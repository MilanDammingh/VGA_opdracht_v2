
Software_ontwikkeling_opdracht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031e4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002848  0800336c  0800336c  0001336c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08005bb4  08005bb4  00015bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005bb8  08005bb8  00015bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00015bbc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00015bbc  2**0
                  CONTENTS
  7 .bss          00012d80  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20012d80  20012d80  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00015bbc  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000942b  00000000  00000000  00015bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001620  00000000  00000000  0001f017  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008d8  00000000  00000000  00020638  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000800  00000000  00000000  00020f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003ac2  00000000  00000000  00021710  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002f4c  00000000  00000000  000251d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002811e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000025a4  00000000  00000000  0002819c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002a740  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003354 	.word	0x08003354

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08003354 	.word	0x08003354

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <draw_bitmap>:
#include <stdio.h>
#include <stdlib.h>


//Bitmap function
void draw_bitmap (int x, int y) {
 80001d8:	b590      	push	{r4, r7, lr}
 80001da:	f5ad 5dc8 	sub.w	sp, sp, #6400	; 0x1900
 80001de:	b087      	sub	sp, #28
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	f107 0318 	add.w	r3, r7, #24
 80001e6:	3b14      	subs	r3, #20
 80001e8:	6018      	str	r0, [r3, #0]
 80001ea:	f107 0318 	add.w	r3, r7, #24
 80001ee:	3b18      	subs	r3, #24
 80001f0:	6019      	str	r1, [r3, #0]

//const int size = 50;

int bitmap [40][40] = {
 80001f2:	f107 0318 	add.w	r3, r7, #24
 80001f6:	3b10      	subs	r3, #16
 80001f8:	4a41      	ldr	r2, [pc, #260]	; (8000300 <draw_bitmap+0x128>)
 80001fa:	4618      	mov	r0, r3
 80001fc:	4611      	mov	r1, r2
 80001fe:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000202:	461a      	mov	r2, r3
 8000204:	f003 f892 	bl	800332c <memcpy>
		,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
		,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
		,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff

};
	for (int i=0; i<40; i++) {
 8000208:	2300      	movs	r3, #0
 800020a:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 800020e:	f102 0214 	add.w	r2, r2, #20
 8000212:	6013      	str	r3, [r2, #0]
 8000214:	e066      	b.n	80002e4 <draw_bitmap+0x10c>
		for (int j=0; j<40; j++) {
 8000216:	2300      	movs	r3, #0
 8000218:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 800021c:	f102 0210 	add.w	r2, r2, #16
 8000220:	6013      	str	r3, [r2, #0]
 8000222:	e04d      	b.n	80002c0 <draw_bitmap+0xe8>

			int x_pos = j + x;
 8000224:	f107 0318 	add.w	r3, r7, #24
 8000228:	3b14      	subs	r3, #20
 800022a:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 800022e:	f102 0210 	add.w	r2, r2, #16
 8000232:	6812      	ldr	r2, [r2, #0]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	4413      	add	r3, r2
 8000238:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 800023c:	f102 020c 	add.w	r2, r2, #12
 8000240:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8000242:	f107 0318 	add.w	r3, r7, #24
 8000246:	3b18      	subs	r3, #24
 8000248:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 800024c:	f102 0214 	add.w	r2, r2, #20
 8000250:	6812      	ldr	r2, [r2, #0]
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4413      	add	r3, r2
 8000256:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 800025a:	f102 0208 	add.w	r2, r2, #8
 800025e:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, bitmap[i][j]);
 8000260:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000264:	f103 030c 	add.w	r3, r3, #12
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	b298      	uxth	r0, r3
 800026c:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000270:	f103 0308 	add.w	r3, r3, #8
 8000274:	681b      	ldr	r3, [r3, #0]
 8000276:	b29c      	uxth	r4, r3
 8000278:	f107 0218 	add.w	r2, r7, #24
 800027c:	3a10      	subs	r2, #16
 800027e:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000282:	f103 0314 	add.w	r3, r3, #20
 8000286:	6819      	ldr	r1, [r3, #0]
 8000288:	460b      	mov	r3, r1
 800028a:	009b      	lsls	r3, r3, #2
 800028c:	440b      	add	r3, r1
 800028e:	00db      	lsls	r3, r3, #3
 8000290:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000294:	f101 0110 	add.w	r1, r1, #16
 8000298:	6809      	ldr	r1, [r1, #0]
 800029a:	440b      	add	r3, r1
 800029c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002a0:	b2db      	uxtb	r3, r3
 80002a2:	461a      	mov	r2, r3
 80002a4:	4621      	mov	r1, r4
 80002a6:	f002 fcc9 	bl	8002c3c <UB_VGA_SetPixel>
		for (int j=0; j<40; j++) {
 80002aa:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 80002ae:	f103 0310 	add.w	r3, r3, #16
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	3301      	adds	r3, #1
 80002b6:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 80002ba:	f102 0210 	add.w	r2, r2, #16
 80002be:	6013      	str	r3, [r2, #0]
 80002c0:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 80002c4:	f103 0310 	add.w	r3, r3, #16
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	2b27      	cmp	r3, #39	; 0x27
 80002cc:	ddaa      	ble.n	8000224 <draw_bitmap+0x4c>
	for (int i=0; i<40; i++) {
 80002ce:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 80002d2:	f103 0314 	add.w	r3, r3, #20
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	3301      	adds	r3, #1
 80002da:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 80002de:	f102 0214 	add.w	r2, r2, #20
 80002e2:	6013      	str	r3, [r2, #0]
 80002e4:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 80002e8:	f103 0314 	add.w	r3, r3, #20
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	2b27      	cmp	r3, #39	; 0x27
 80002f0:	dd91      	ble.n	8000216 <draw_bitmap+0x3e>
		}
	}
}
 80002f2:	bf00      	nop
 80002f4:	f507 57c8 	add.w	r7, r7, #6400	; 0x1900
 80002f8:	371c      	adds	r7, #28
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd90      	pop	{r4, r7, pc}
 80002fe:	bf00      	nop
 8000300:	0800336c 	.word	0x0800336c

08000304 <draw_text>:

#include <stdio.h>
#include <stdlib.h>


void draw_text (int x, int y, char text[]) {
 8000304:	b580      	push	{r7, lr}
 8000306:	b086      	sub	sp, #24
 8000308:	af00      	add	r7, sp, #0
 800030a:	60f8      	str	r0, [r7, #12]
 800030c:	60b9      	str	r1, [r7, #8]
 800030e:	607a      	str	r2, [r7, #4]

	for(int i=0;i<strlen(text);i++)
 8000310:	2300      	movs	r3, #0
 8000312:	617b      	str	r3, [r7, #20]
 8000314:	e00e      	b.n	8000334 <draw_text+0x30>
	{
		letter_select(x,y,text[i]);
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	687a      	ldr	r2, [r7, #4]
 800031a:	4413      	add	r3, r2
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	461a      	mov	r2, r3
 8000320:	68b9      	ldr	r1, [r7, #8]
 8000322:	68f8      	ldr	r0, [r7, #12]
 8000324:	f000 f812 	bl	800034c <letter_select>
		x = x + 5;
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	3305      	adds	r3, #5
 800032c:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<strlen(text);i++)
 800032e:	697b      	ldr	r3, [r7, #20]
 8000330:	3301      	adds	r3, #1
 8000332:	617b      	str	r3, [r7, #20]
 8000334:	6878      	ldr	r0, [r7, #4]
 8000336:	f7ff ff47 	bl	80001c8 <strlen>
 800033a:	4602      	mov	r2, r0
 800033c:	697b      	ldr	r3, [r7, #20]
 800033e:	429a      	cmp	r2, r3
 8000340:	d8e9      	bhi.n	8000316 <draw_text+0x12>
	}
}
 8000342:	bf00      	nop
 8000344:	3718      	adds	r7, #24
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
	...

0800034c <letter_select>:

void letter_select(int x, int y, char letter){
 800034c:	b590      	push	{r4, r7, lr}
 800034e:	f5ad 5d96 	sub.w	sp, sp, #4800	; 0x12c0
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800035a:	3b1c      	subs	r3, #28
 800035c:	6018      	str	r0, [r3, #0]
 800035e:	f107 0308 	add.w	r3, r7, #8
 8000362:	6019      	str	r1, [r3, #0]
 8000364:	f107 0308 	add.w	r3, r7, #8
 8000368:	3b01      	subs	r3, #1
 800036a:	701a      	strb	r2, [r3, #0]

	//____________________________________ALFABET IN C ARRAY_________________________________________

	int letter_A[10][4] = {
 800036c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8000370:	f103 0318 	add.w	r3, r3, #24
 8000374:	4ae1      	ldr	r2, [pc, #900]	; (80006fc <letter_select+0x3b0>)
 8000376:	4618      	mov	r0, r3
 8000378:	4611      	mov	r1, r2
 800037a:	23a0      	movs	r3, #160	; 0xa0
 800037c:	461a      	mov	r2, r3
 800037e:	f002 ffd5 	bl	800332c <memcpy>
			  0xff, 0xff, 0xff, 0xff,  //@@@@
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00
	};
	int letter_B[10][4] = {
 8000382:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8000386:	4ade      	ldr	r2, [pc, #888]	; (8000700 <letter_select+0x3b4>)
 8000388:	4618      	mov	r0, r3
 800038a:	4611      	mov	r1, r2
 800038c:	23a0      	movs	r3, #160	; 0xa0
 800038e:	461a      	mov	r2, r3
 8000390:	f002 ffcc 	bl	800332c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0xff, 0xff, 0x00,  //@@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_C[10][4] = {
 8000394:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 8000398:	4ada      	ldr	r2, [pc, #872]	; (8000704 <letter_select+0x3b8>)
 800039a:	4618      	mov	r0, r3
 800039c:	4611      	mov	r1, r2
 800039e:	23a0      	movs	r3, #160	; 0xa0
 80003a0:	461a      	mov	r2, r3
 80003a2:	f002 ffc3 	bl	800332c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_D[10][4] = {
 80003a6:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 80003aa:	4ad7      	ldr	r2, [pc, #860]	; (8000708 <letter_select+0x3bc>)
 80003ac:	4618      	mov	r0, r3
 80003ae:	4611      	mov	r1, r2
 80003b0:	23a0      	movs	r3, #160	; 0xa0
 80003b2:	461a      	mov	r2, r3
 80003b4:	f002 ffba 	bl	800332c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0xff, 0xff, 0x00,  //@@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_E[10][4] = {
 80003b8:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80003bc:	4ad3      	ldr	r2, [pc, #844]	; (800070c <letter_select+0x3c0>)
 80003be:	4618      	mov	r0, r3
 80003c0:	4611      	mov	r1, r2
 80003c2:	23a0      	movs	r3, #160	; 0xa0
 80003c4:	461a      	mov	r2, r3
 80003c6:	f002 ffb1 	bl	800332c <memcpy>
			  0xff, 0x00, 0x00, 0x00,  //@...
			  0xff, 0xff, 0xff, 0xff,  //@@@@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_F[10][4] = {
 80003ca:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 80003ce:	4ad0      	ldr	r2, [pc, #832]	; (8000710 <letter_select+0x3c4>)
 80003d0:	4618      	mov	r0, r3
 80003d2:	4611      	mov	r1, r2
 80003d4:	23a0      	movs	r3, #160	; 0xa0
 80003d6:	461a      	mov	r2, r3
 80003d8:	f002 ffa8 	bl	800332c <memcpy>
			  0xff, 0x00, 0x00, 0x00,  //@...
			  0xff, 0x00, 0x00, 0x00,  //@...
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_G[10][4] = {
 80003dc:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 80003e0:	4acc      	ldr	r2, [pc, #816]	; (8000714 <letter_select+0x3c8>)
 80003e2:	4618      	mov	r0, r3
 80003e4:	4611      	mov	r1, r2
 80003e6:	23a0      	movs	r3, #160	; 0xa0
 80003e8:	461a      	mov	r2, r3
 80003ea:	f002 ff9f 	bl	800332c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_H[10][4] = {
 80003ee:	f607 4318 	addw	r3, r7, #3096	; 0xc18
 80003f2:	4ac9      	ldr	r2, [pc, #804]	; (8000718 <letter_select+0x3cc>)
 80003f4:	4618      	mov	r0, r3
 80003f6:	4611      	mov	r1, r2
 80003f8:	23a0      	movs	r3, #160	; 0xa0
 80003fa:	461a      	mov	r2, r3
 80003fc:	f002 ff96 	bl	800332c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_I[10][3] = {
 8000400:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8000404:	4ac5      	ldr	r2, [pc, #788]	; (800071c <letter_select+0x3d0>)
 8000406:	4618      	mov	r0, r3
 8000408:	4611      	mov	r1, r2
 800040a:	2378      	movs	r3, #120	; 0x78
 800040c:	461a      	mov	r2, r3
 800040e:	f002 ff8d 	bl	800332c <memcpy>
			  0x00, 0xff, 0x00,  //.@.
			  0xff, 0xff, 0xff,  //@@@
			  0x00, 0x00, 0x00,  //...
			  0x00, 0x00, 0x00,  //...
	};
	int letter_J[10][4] = {
 8000412:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8000416:	4618      	mov	r0, r3
 8000418:	23a0      	movs	r3, #160	; 0xa0
 800041a:	461a      	mov	r2, r3
 800041c:	2100      	movs	r1, #0
 800041e:	f002 ff90 	bl	8003342 <memset>
 8000422:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8000426:	22ff      	movs	r2, #255	; 0xff
 8000428:	62da      	str	r2, [r3, #44]	; 0x2c
 800042a:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800042e:	22ff      	movs	r2, #255	; 0xff
 8000430:	63da      	str	r2, [r3, #60]	; 0x3c
 8000432:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8000436:	22ff      	movs	r2, #255	; 0xff
 8000438:	64da      	str	r2, [r3, #76]	; 0x4c
 800043a:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800043e:	22ff      	movs	r2, #255	; 0xff
 8000440:	65da      	str	r2, [r3, #92]	; 0x5c
 8000442:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8000446:	22ff      	movs	r2, #255	; 0xff
 8000448:	661a      	str	r2, [r3, #96]	; 0x60
 800044a:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800044e:	22ff      	movs	r2, #255	; 0xff
 8000450:	66da      	str	r2, [r3, #108]	; 0x6c
 8000452:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8000456:	22ff      	movs	r2, #255	; 0xff
 8000458:	675a      	str	r2, [r3, #116]	; 0x74
 800045a:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800045e:	22ff      	movs	r2, #255	; 0xff
 8000460:	679a      	str	r2, [r3, #120]	; 0x78
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_K[10][4] = {
 8000462:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8000466:	4aae      	ldr	r2, [pc, #696]	; (8000720 <letter_select+0x3d4>)
 8000468:	4618      	mov	r0, r3
 800046a:	4611      	mov	r1, r2
 800046c:	23a0      	movs	r3, #160	; 0xa0
 800046e:	461a      	mov	r2, r3
 8000470:	f002 ff5c 	bl	800332c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_L[10][4] = {
 8000474:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8000478:	4618      	mov	r0, r3
 800047a:	23a0      	movs	r3, #160	; 0xa0
 800047c:	461a      	mov	r2, r3
 800047e:	2100      	movs	r1, #0
 8000480:	f002 ff5f 	bl	8003342 <memset>
 8000484:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8000488:	22ff      	movs	r2, #255	; 0xff
 800048a:	621a      	str	r2, [r3, #32]
 800048c:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8000490:	22ff      	movs	r2, #255	; 0xff
 8000492:	631a      	str	r2, [r3, #48]	; 0x30
 8000494:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8000498:	22ff      	movs	r2, #255	; 0xff
 800049a:	641a      	str	r2, [r3, #64]	; 0x40
 800049c:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 80004a0:	22ff      	movs	r2, #255	; 0xff
 80004a2:	651a      	str	r2, [r3, #80]	; 0x50
 80004a4:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 80004a8:	22ff      	movs	r2, #255	; 0xff
 80004aa:	661a      	str	r2, [r3, #96]	; 0x60
 80004ac:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 80004b0:	22ff      	movs	r2, #255	; 0xff
 80004b2:	671a      	str	r2, [r3, #112]	; 0x70
 80004b4:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 80004b8:	22ff      	movs	r2, #255	; 0xff
 80004ba:	675a      	str	r2, [r3, #116]	; 0x74
 80004bc:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 80004c0:	22ff      	movs	r2, #255	; 0xff
 80004c2:	679a      	str	r2, [r3, #120]	; 0x78
 80004c4:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 80004c8:	22ff      	movs	r2, #255	; 0xff
 80004ca:	67da      	str	r2, [r3, #124]	; 0x7c
			  0xff, 0x00, 0x00, 0x00,  //@...
			  0xff, 0xff, 0xff, 0xff,  //@@@@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_M[10][4] = {
 80004cc:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 80004d0:	4a94      	ldr	r2, [pc, #592]	; (8000724 <letter_select+0x3d8>)
 80004d2:	4618      	mov	r0, r3
 80004d4:	4611      	mov	r1, r2
 80004d6:	23a0      	movs	r3, #160	; 0xa0
 80004d8:	461a      	mov	r2, r3
 80004da:	f002 ff27 	bl	800332c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_N[10][4] = {
 80004de:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80004e2:	4a91      	ldr	r2, [pc, #580]	; (8000728 <letter_select+0x3dc>)
 80004e4:	4618      	mov	r0, r3
 80004e6:	4611      	mov	r1, r2
 80004e8:	23a0      	movs	r3, #160	; 0xa0
 80004ea:	461a      	mov	r2, r3
 80004ec:	f002 ff1e 	bl	800332c <memcpy>
			  0xff, 0x00, 0xff, 0xff,  //@.@@
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_O[10][4] = {
 80004f0:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 80004f4:	4a8d      	ldr	r2, [pc, #564]	; (800072c <letter_select+0x3e0>)
 80004f6:	4618      	mov	r0, r3
 80004f8:	4611      	mov	r1, r2
 80004fa:	23a0      	movs	r3, #160	; 0xa0
 80004fc:	461a      	mov	r2, r3
 80004fe:	f002 ff15 	bl	800332c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_P[10][4] = {
 8000502:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8000506:	4a8a      	ldr	r2, [pc, #552]	; (8000730 <letter_select+0x3e4>)
 8000508:	4618      	mov	r0, r3
 800050a:	4611      	mov	r1, r2
 800050c:	23a0      	movs	r3, #160	; 0xa0
 800050e:	461a      	mov	r2, r3
 8000510:	f002 ff0c 	bl	800332c <memcpy>
			  0xff, 0x00, 0x00, 0x00,  //@...
			  0xff, 0x00, 0x00, 0x00,  //@...
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_Q[10][4] = {
 8000514:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8000518:	4a86      	ldr	r2, [pc, #536]	; (8000734 <letter_select+0x3e8>)
 800051a:	4618      	mov	r0, r3
 800051c:	4611      	mov	r1, r2
 800051e:	23a0      	movs	r3, #160	; 0xa0
 8000520:	461a      	mov	r2, r3
 8000522:	f002 ff03 	bl	800332c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0x00, 0xff, 0x00,  //..@.
			  0x00, 0x00, 0x00, 0xff,  //...@
	};
	int letter_R[10][4] = {
 8000526:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800052a:	4a83      	ldr	r2, [pc, #524]	; (8000738 <letter_select+0x3ec>)
 800052c:	4618      	mov	r0, r3
 800052e:	4611      	mov	r1, r2
 8000530:	23a0      	movs	r3, #160	; 0xa0
 8000532:	461a      	mov	r2, r3
 8000534:	f002 fefa 	bl	800332c <memcpy>
			  0xff, 0x00, 0xff, 0x00,  //@.@.
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_S[10][4] = {
 8000538:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800053c:	4a7f      	ldr	r2, [pc, #508]	; (800073c <letter_select+0x3f0>)
 800053e:	4618      	mov	r0, r3
 8000540:	4611      	mov	r1, r2
 8000542:	23a0      	movs	r3, #160	; 0xa0
 8000544:	461a      	mov	r2, r3
 8000546:	f002 fef1 	bl	800332c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0xff, 0xff, 0x00,  //@@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_T[10][5] = {
 800054a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800054e:	4a7c      	ldr	r2, [pc, #496]	; (8000740 <letter_select+0x3f4>)
 8000550:	4618      	mov	r0, r3
 8000552:	4611      	mov	r1, r2
 8000554:	23c8      	movs	r3, #200	; 0xc8
 8000556:	461a      	mov	r2, r3
 8000558:	f002 fee8 	bl	800332c <memcpy>
			  0x00, 0x00, 0xff, 0x00, 0x00,  //..@..
			  0x00, 0xff, 0xff, 0xff, 0x00,  //.@@@.
			  0x00, 0x00, 0x00, 0x00, 0x00,  //.....
			  0x00, 0x00, 0x00, 0x00, 0x00,  //.....
	};
	int letter_U[10][4] = {
 800055c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8000560:	4a78      	ldr	r2, [pc, #480]	; (8000744 <letter_select+0x3f8>)
 8000562:	4618      	mov	r0, r3
 8000564:	4611      	mov	r1, r2
 8000566:	23a0      	movs	r3, #160	; 0xa0
 8000568:	461a      	mov	r2, r3
 800056a:	f002 fedf 	bl	800332c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_V[10][4] = {
 800056e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8000572:	4a75      	ldr	r2, [pc, #468]	; (8000748 <letter_select+0x3fc>)
 8000574:	4618      	mov	r0, r3
 8000576:	4611      	mov	r1, r2
 8000578:	23a0      	movs	r3, #160	; 0xa0
 800057a:	461a      	mov	r2, r3
 800057c:	f002 fed6 	bl	800332c <memcpy>
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_W[10][4] = {
 8000580:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8000584:	3b10      	subs	r3, #16
 8000586:	4a71      	ldr	r2, [pc, #452]	; (800074c <letter_select+0x400>)
 8000588:	4618      	mov	r0, r3
 800058a:	4611      	mov	r1, r2
 800058c:	23a0      	movs	r3, #160	; 0xa0
 800058e:	461a      	mov	r2, r3
 8000590:	f002 fecc 	bl	800332c <memcpy>
			  0xff, 0xff, 0xff, 0xff,  //@@@@
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_X[10][4] = {
 8000594:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8000598:	3b10      	subs	r3, #16
 800059a:	4a6d      	ldr	r2, [pc, #436]	; (8000750 <letter_select+0x404>)
 800059c:	4618      	mov	r0, r3
 800059e:	4611      	mov	r1, r2
 80005a0:	23a0      	movs	r3, #160	; 0xa0
 80005a2:	461a      	mov	r2, r3
 80005a4:	f002 fec2 	bl	800332c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_Y[10][5] = {
 80005a8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 80005ac:	3b18      	subs	r3, #24
 80005ae:	4a69      	ldr	r2, [pc, #420]	; (8000754 <letter_select+0x408>)
 80005b0:	4618      	mov	r0, r3
 80005b2:	4611      	mov	r1, r2
 80005b4:	23c8      	movs	r3, #200	; 0xc8
 80005b6:	461a      	mov	r2, r3
 80005b8:	f002 feb8 	bl	800332c <memcpy>
			  0x00, 0x00, 0xff, 0x00, 0x00,  //..@..
			  0x00, 0xff, 0xff, 0xff, 0x00,  //.@@@.
			  0x00, 0x00, 0x00, 0x00, 0x00,  //.....
			  0x00, 0x00, 0x00, 0x00, 0x00,  //.....
	};
	int letter_Z[10][4] = {
 80005bc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80005c0:	3b18      	subs	r3, #24
 80005c2:	4a65      	ldr	r2, [pc, #404]	; (8000758 <letter_select+0x40c>)
 80005c4:	4618      	mov	r0, r3
 80005c6:	4611      	mov	r1, r2
 80005c8:	23a0      	movs	r3, #160	; 0xa0
 80005ca:	461a      	mov	r2, r3
 80005cc:	f002 feae 	bl	800332c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0xff, 0xff, 0xff,  //@@@@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int spatie[10][4] = {
 80005d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005d4:	3b18      	subs	r3, #24
 80005d6:	4618      	mov	r0, r3
 80005d8:	23a0      	movs	r3, #160	; 0xa0
 80005da:	461a      	mov	r2, r3
 80005dc:	2100      	movs	r1, #0
 80005de:	f002 feb0 	bl	8003342 <memset>
	};


	//____________________________________SWITCH_________________________________________

	switch (letter)
 80005e2:	f107 0308 	add.w	r3, r7, #8
 80005e6:	3b01      	subs	r3, #1
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	3b20      	subs	r3, #32
 80005ec:	2b3a      	cmp	r3, #58	; 0x3a
 80005ee:	f201 8443 	bhi.w	8001e78 <letter_select+0x1b2c>
 80005f2:	a201      	add	r2, pc, #4	; (adr r2, 80005f8 <letter_select+0x2ac>)
 80005f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f8:	08001d95 	.word	0x08001d95
 80005fc:	08001e79 	.word	0x08001e79
 8000600:	08001e79 	.word	0x08001e79
 8000604:	08001e79 	.word	0x08001e79
 8000608:	08001e79 	.word	0x08001e79
 800060c:	08001e79 	.word	0x08001e79
 8000610:	08001e79 	.word	0x08001e79
 8000614:	08001e79 	.word	0x08001e79
 8000618:	08001e79 	.word	0x08001e79
 800061c:	08001e79 	.word	0x08001e79
 8000620:	08001e79 	.word	0x08001e79
 8000624:	08001e79 	.word	0x08001e79
 8000628:	08001e79 	.word	0x08001e79
 800062c:	08001e79 	.word	0x08001e79
 8000630:	08001e79 	.word	0x08001e79
 8000634:	08001e79 	.word	0x08001e79
 8000638:	08001e79 	.word	0x08001e79
 800063c:	08001e79 	.word	0x08001e79
 8000640:	08001e79 	.word	0x08001e79
 8000644:	08001e79 	.word	0x08001e79
 8000648:	08001e79 	.word	0x08001e79
 800064c:	08001e79 	.word	0x08001e79
 8000650:	08001e79 	.word	0x08001e79
 8000654:	08001e79 	.word	0x08001e79
 8000658:	08001e79 	.word	0x08001e79
 800065c:	08001e79 	.word	0x08001e79
 8000660:	08001e79 	.word	0x08001e79
 8000664:	08001e79 	.word	0x08001e79
 8000668:	08001e79 	.word	0x08001e79
 800066c:	08001e79 	.word	0x08001e79
 8000670:	08001e79 	.word	0x08001e79
 8000674:	08001e79 	.word	0x08001e79
 8000678:	08001e79 	.word	0x08001e79
 800067c:	080006e5 	.word	0x080006e5
 8000680:	08000817 	.word	0x08000817
 8000684:	080008f3 	.word	0x080008f3
 8000688:	080009d7 	.word	0x080009d7
 800068c:	08000abb 	.word	0x08000abb
 8000690:	08000b87 	.word	0x08000b87
 8000694:	08000c63 	.word	0x08000c63
 8000698:	08000d47 	.word	0x08000d47
 800069c:	08000e2b 	.word	0x08000e2b
 80006a0:	08000efb 	.word	0x08000efb
 80006a4:	08000fd7 	.word	0x08000fd7
 80006a8:	080010bb 	.word	0x080010bb
 80006ac:	0800119f 	.word	0x0800119f
 80006b0:	0800126b 	.word	0x0800126b
 80006b4:	08001347 	.word	0x08001347
 80006b8:	0800142b 	.word	0x0800142b
 80006bc:	0800150f 	.word	0x0800150f
 80006c0:	080015db 	.word	0x080015db
 80006c4:	080016b5 	.word	0x080016b5
 80006c8:	08001797 	.word	0x08001797
 80006cc:	0800187d 	.word	0x0800187d
 80006d0:	08001947 	.word	0x08001947
 80006d4:	08001a21 	.word	0x08001a21
 80006d8:	08001b05 	.word	0x08001b05
 80006dc:	08001be9 	.word	0x08001be9
 80006e0:	08001cb9 	.word	0x08001cb9
	{
	case 'A':
	for (int i=0; i<10; i++) {
 80006e4:	2300      	movs	r3, #0
 80006e6:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80006ea:	f102 0204 	add.w	r2, r2, #4
 80006ee:	6013      	str	r3, [r2, #0]
 80006f0:	e087      	b.n	8000802 <letter_select+0x4b6>
		for (int j=0; j<4; j++) {
 80006f2:	2300      	movs	r3, #0
 80006f4:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80006f8:	6013      	str	r3, [r2, #0]
 80006fa:	e072      	b.n	80007e2 <letter_select+0x496>
 80006fc:	08004c6c 	.word	0x08004c6c
 8000700:	08004d0c 	.word	0x08004d0c
 8000704:	08004dac 	.word	0x08004dac
 8000708:	08004e4c 	.word	0x08004e4c
 800070c:	08004eec 	.word	0x08004eec
 8000710:	08004f8c 	.word	0x08004f8c
 8000714:	0800502c 	.word	0x0800502c
 8000718:	080050cc 	.word	0x080050cc
 800071c:	0800516c 	.word	0x0800516c
 8000720:	080051e4 	.word	0x080051e4
 8000724:	08005284 	.word	0x08005284
 8000728:	08005324 	.word	0x08005324
 800072c:	080053c4 	.word	0x080053c4
 8000730:	08005464 	.word	0x08005464
 8000734:	08005504 	.word	0x08005504
 8000738:	080055a4 	.word	0x080055a4
 800073c:	08005644 	.word	0x08005644
 8000740:	080056e4 	.word	0x080056e4
 8000744:	080057ac 	.word	0x080057ac
 8000748:	0800584c 	.word	0x0800584c
 800074c:	080058ec 	.word	0x080058ec
 8000750:	0800598c 	.word	0x0800598c
 8000754:	08005a2c 	.word	0x08005a2c
 8000758:	08005af4 	.word	0x08005af4

			int x_pos = j + x;
 800075c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000760:	3b1c      	subs	r3, #28
 8000762:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8000766:	6812      	ldr	r2, [r2, #0]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	4413      	add	r3, r2
 800076c:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8000770:	f102 020c 	add.w	r2, r2, #12
 8000774:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8000776:	f107 0308 	add.w	r3, r7, #8
 800077a:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800077e:	f102 0204 	add.w	r2, r2, #4
 8000782:	6812      	ldr	r2, [r2, #0]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4413      	add	r3, r2
 8000788:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 800078c:	f102 0208 	add.w	r2, r2, #8
 8000790:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_A[i][j]);
 8000792:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8000796:	f103 030c 	add.w	r3, r3, #12
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	b298      	uxth	r0, r3
 800079e:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 80007a2:	f103 0308 	add.w	r3, r3, #8
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	b29c      	uxth	r4, r3
 80007aa:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80007ae:	f103 0318 	add.w	r3, r3, #24
 80007b2:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80007b6:	f102 0204 	add.w	r2, r2, #4
 80007ba:	6812      	ldr	r2, [r2, #0]
 80007bc:	0091      	lsls	r1, r2, #2
 80007be:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80007c2:	6812      	ldr	r2, [r2, #0]
 80007c4:	440a      	add	r2, r1
 80007c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	461a      	mov	r2, r3
 80007ce:	4621      	mov	r1, r4
 80007d0:	f002 fa34 	bl	8002c3c <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 80007d4:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	3301      	adds	r3, #1
 80007dc:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80007e0:	6013      	str	r3, [r2, #0]
 80007e2:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b03      	cmp	r3, #3
 80007ea:	ddb7      	ble.n	800075c <letter_select+0x410>
	for (int i=0; i<10; i++) {
 80007ec:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80007f0:	f103 0304 	add.w	r3, r3, #4
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	3301      	adds	r3, #1
 80007f8:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80007fc:	f102 0204 	add.w	r2, r2, #4
 8000800:	6013      	str	r3, [r2, #0]
 8000802:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8000806:	f103 0304 	add.w	r3, r3, #4
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	2b09      	cmp	r3, #9
 800080e:	f77f af70 	ble.w	80006f2 <letter_select+0x3a6>
		}
	}
	break;
 8000812:	f001 bb34 	b.w	8001e7e <letter_select+0x1b32>


	case 'B':
	for (int i=0; i<10; i++) {
 8000816:	2300      	movs	r3, #0
 8000818:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800081c:	f102 021c 	add.w	r2, r2, #28
 8000820:	6013      	str	r3, [r2, #0]
 8000822:	e05d      	b.n	80008e0 <letter_select+0x594>
		for (int j=0; j<4; j++) {
 8000824:	2300      	movs	r3, #0
 8000826:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800082a:	f102 0218 	add.w	r2, r2, #24
 800082e:	6013      	str	r3, [r2, #0]
 8000830:	e044      	b.n	80008bc <letter_select+0x570>

			int x_pos = j + x;
 8000832:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000836:	3b1c      	subs	r3, #28
 8000838:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800083c:	f102 0218 	add.w	r2, r2, #24
 8000840:	6812      	ldr	r2, [r2, #0]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4413      	add	r3, r2
 8000846:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 800084a:	f102 0204 	add.w	r2, r2, #4
 800084e:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8000850:	f107 0308 	add.w	r3, r7, #8
 8000854:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8000858:	f102 021c 	add.w	r2, r2, #28
 800085c:	6812      	ldr	r2, [r2, #0]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4413      	add	r3, r2
 8000862:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8000866:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_B[i][j]);
 8000868:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 800086c:	f103 0304 	add.w	r3, r3, #4
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	b298      	uxth	r0, r3
 8000874:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	b29c      	uxth	r4, r3
 800087c:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8000880:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8000884:	f102 021c 	add.w	r2, r2, #28
 8000888:	6812      	ldr	r2, [r2, #0]
 800088a:	0091      	lsls	r1, r2, #2
 800088c:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8000890:	f102 0218 	add.w	r2, r2, #24
 8000894:	6812      	ldr	r2, [r2, #0]
 8000896:	440a      	add	r2, r1
 8000898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800089c:	b2db      	uxtb	r3, r3
 800089e:	461a      	mov	r2, r3
 80008a0:	4621      	mov	r1, r4
 80008a2:	f002 f9cb 	bl	8002c3c <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 80008a6:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80008aa:	f103 0318 	add.w	r3, r3, #24
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	3301      	adds	r3, #1
 80008b2:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80008b6:	f102 0218 	add.w	r2, r2, #24
 80008ba:	6013      	str	r3, [r2, #0]
 80008bc:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80008c0:	f103 0318 	add.w	r3, r3, #24
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	2b03      	cmp	r3, #3
 80008c8:	ddb3      	ble.n	8000832 <letter_select+0x4e6>
	for (int i=0; i<10; i++) {
 80008ca:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80008ce:	f103 031c 	add.w	r3, r3, #28
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	3301      	adds	r3, #1
 80008d6:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80008da:	f102 021c 	add.w	r2, r2, #28
 80008de:	6013      	str	r3, [r2, #0]
 80008e0:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80008e4:	f103 031c 	add.w	r3, r3, #28
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2b09      	cmp	r3, #9
 80008ec:	dd9a      	ble.n	8000824 <letter_select+0x4d8>
		}
	}
	break;
 80008ee:	f001 bac6 	b.w	8001e7e <letter_select+0x1b32>


	case 'C':
	for (int i=0; i<10; i++) {
 80008f2:	2300      	movs	r3, #0
 80008f4:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80008f8:	f102 0214 	add.w	r2, r2, #20
 80008fc:	6013      	str	r3, [r2, #0]
 80008fe:	e061      	b.n	80009c4 <letter_select+0x678>
		for (int j=0; j<4; j++) {
 8000900:	2300      	movs	r3, #0
 8000902:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8000906:	f102 0210 	add.w	r2, r2, #16
 800090a:	6013      	str	r3, [r2, #0]
 800090c:	e048      	b.n	80009a0 <letter_select+0x654>

			int x_pos = j + x;
 800090e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000912:	3b1c      	subs	r3, #28
 8000914:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8000918:	f102 0210 	add.w	r2, r2, #16
 800091c:	6812      	ldr	r2, [r2, #0]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4413      	add	r3, r2
 8000922:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000926:	f102 021c 	add.w	r2, r2, #28
 800092a:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 800092c:	f107 0308 	add.w	r3, r7, #8
 8000930:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8000934:	f102 0214 	add.w	r2, r2, #20
 8000938:	6812      	ldr	r2, [r2, #0]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4413      	add	r3, r2
 800093e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000942:	f102 0218 	add.w	r2, r2, #24
 8000946:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_C[i][j]);
 8000948:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800094c:	f103 031c 	add.w	r3, r3, #28
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	b298      	uxth	r0, r3
 8000954:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8000958:	f103 0318 	add.w	r3, r3, #24
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	b29c      	uxth	r4, r3
 8000960:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 8000964:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8000968:	f102 0214 	add.w	r2, r2, #20
 800096c:	6812      	ldr	r2, [r2, #0]
 800096e:	0091      	lsls	r1, r2, #2
 8000970:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8000974:	f102 0210 	add.w	r2, r2, #16
 8000978:	6812      	ldr	r2, [r2, #0]
 800097a:	440a      	add	r2, r1
 800097c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000980:	b2db      	uxtb	r3, r3
 8000982:	461a      	mov	r2, r3
 8000984:	4621      	mov	r1, r4
 8000986:	f002 f959 	bl	8002c3c <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 800098a:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800098e:	f103 0310 	add.w	r3, r3, #16
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	3301      	adds	r3, #1
 8000996:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800099a:	f102 0210 	add.w	r2, r2, #16
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80009a4:	f103 0310 	add.w	r3, r3, #16
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b03      	cmp	r3, #3
 80009ac:	ddaf      	ble.n	800090e <letter_select+0x5c2>
	for (int i=0; i<10; i++) {
 80009ae:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80009b2:	f103 0314 	add.w	r3, r3, #20
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	3301      	adds	r3, #1
 80009ba:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80009be:	f102 0214 	add.w	r2, r2, #20
 80009c2:	6013      	str	r3, [r2, #0]
 80009c4:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80009c8:	f103 0314 	add.w	r3, r3, #20
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	2b09      	cmp	r3, #9
 80009d0:	dd96      	ble.n	8000900 <letter_select+0x5b4>
		}
	}
	break;
 80009d2:	f001 ba54 	b.w	8001e7e <letter_select+0x1b32>


	case 'D':
	for (int i=0; i<10; i++) {
 80009d6:	2300      	movs	r3, #0
 80009d8:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80009dc:	f102 020c 	add.w	r2, r2, #12
 80009e0:	6013      	str	r3, [r2, #0]
 80009e2:	e061      	b.n	8000aa8 <letter_select+0x75c>
		for (int j=0; j<4; j++) {
 80009e4:	2300      	movs	r3, #0
 80009e6:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80009ea:	f102 0208 	add.w	r2, r2, #8
 80009ee:	6013      	str	r3, [r2, #0]
 80009f0:	e048      	b.n	8000a84 <letter_select+0x738>

			int x_pos = j + x;
 80009f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009f6:	3b1c      	subs	r3, #28
 80009f8:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80009fc:	f102 0208 	add.w	r2, r2, #8
 8000a00:	6812      	ldr	r2, [r2, #0]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4413      	add	r3, r2
 8000a06:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000a0a:	f102 0214 	add.w	r2, r2, #20
 8000a0e:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8000a10:	f107 0308 	add.w	r3, r7, #8
 8000a14:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8000a18:	f102 020c 	add.w	r2, r2, #12
 8000a1c:	6812      	ldr	r2, [r2, #0]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4413      	add	r3, r2
 8000a22:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000a26:	f102 0210 	add.w	r2, r2, #16
 8000a2a:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_D[i][j]);
 8000a2c:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8000a30:	f103 0314 	add.w	r3, r3, #20
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	b298      	uxth	r0, r3
 8000a38:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8000a3c:	f103 0310 	add.w	r3, r3, #16
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	b29c      	uxth	r4, r3
 8000a44:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8000a48:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8000a4c:	f102 020c 	add.w	r2, r2, #12
 8000a50:	6812      	ldr	r2, [r2, #0]
 8000a52:	0091      	lsls	r1, r2, #2
 8000a54:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8000a58:	f102 0208 	add.w	r2, r2, #8
 8000a5c:	6812      	ldr	r2, [r2, #0]
 8000a5e:	440a      	add	r2, r1
 8000a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	461a      	mov	r2, r3
 8000a68:	4621      	mov	r1, r4
 8000a6a:	f002 f8e7 	bl	8002c3c <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8000a6e:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8000a72:	f103 0308 	add.w	r3, r3, #8
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8000a7e:	f102 0208 	add.w	r2, r2, #8
 8000a82:	6013      	str	r3, [r2, #0]
 8000a84:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8000a88:	f103 0308 	add.w	r3, r3, #8
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b03      	cmp	r3, #3
 8000a90:	ddaf      	ble.n	80009f2 <letter_select+0x6a6>
	for (int i=0; i<10; i++) {
 8000a92:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8000a96:	f103 030c 	add.w	r3, r3, #12
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8000aa2:	f102 020c 	add.w	r2, r2, #12
 8000aa6:	6013      	str	r3, [r2, #0]
 8000aa8:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8000aac:	f103 030c 	add.w	r3, r3, #12
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b09      	cmp	r3, #9
 8000ab4:	dd96      	ble.n	80009e4 <letter_select+0x698>
		}
	}
	break;
 8000ab6:	f001 b9e2 	b.w	8001e7e <letter_select+0x1b32>


	case 'E':
	for (int i=0; i<10; i++) {
 8000aba:	2300      	movs	r3, #0
 8000abc:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8000ac0:	f102 0204 	add.w	r2, r2, #4
 8000ac4:	6013      	str	r3, [r2, #0]
 8000ac6:	e055      	b.n	8000b74 <letter_select+0x828>
		for (int j=0; j<4; j++) {
 8000ac8:	2300      	movs	r3, #0
 8000aca:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8000ace:	6013      	str	r3, [r2, #0]
 8000ad0:	e040      	b.n	8000b54 <letter_select+0x808>

			int x_pos = j + x;
 8000ad2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ad6:	3b1c      	subs	r3, #28
 8000ad8:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8000adc:	6812      	ldr	r2, [r2, #0]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000ae6:	f102 020c 	add.w	r2, r2, #12
 8000aea:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8000aec:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8000af0:	f103 0308 	add.w	r3, r3, #8
 8000af4:	f107 0208 	add.w	r2, r7, #8
 8000af8:	f507 5195 	add.w	r1, r7, #4768	; 0x12a0
 8000afc:	f101 0104 	add.w	r1, r1, #4
 8000b00:	6809      	ldr	r1, [r1, #0]
 8000b02:	6812      	ldr	r2, [r2, #0]
 8000b04:	440a      	add	r2, r1
 8000b06:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_E[i][j]);
 8000b08:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8000b0c:	f103 030c 	add.w	r3, r3, #12
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	b298      	uxth	r0, r3
 8000b14:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8000b18:	f103 0308 	add.w	r3, r3, #8
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	b29c      	uxth	r4, r3
 8000b20:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8000b24:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8000b28:	f102 0204 	add.w	r2, r2, #4
 8000b2c:	6812      	ldr	r2, [r2, #0]
 8000b2e:	0091      	lsls	r1, r2, #2
 8000b30:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8000b34:	6812      	ldr	r2, [r2, #0]
 8000b36:	440a      	add	r2, r1
 8000b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	461a      	mov	r2, r3
 8000b40:	4621      	mov	r1, r4
 8000b42:	f002 f87b 	bl	8002c3c <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8000b46:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8000b52:	6013      	str	r3, [r2, #0]
 8000b54:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2b03      	cmp	r3, #3
 8000b5c:	ddb9      	ble.n	8000ad2 <letter_select+0x786>
	for (int i=0; i<10; i++) {
 8000b5e:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8000b62:	f103 0304 	add.w	r3, r3, #4
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8000b6e:	f102 0204 	add.w	r2, r2, #4
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8000b78:	f103 0304 	add.w	r3, r3, #4
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b09      	cmp	r3, #9
 8000b80:	dda2      	ble.n	8000ac8 <letter_select+0x77c>
		}
	}
	break;
 8000b82:	f001 b97c 	b.w	8001e7e <letter_select+0x1b32>


	case 'F':
	for (int i=0; i<10; i++) {
 8000b86:	2300      	movs	r3, #0
 8000b88:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000b8c:	f102 021c 	add.w	r2, r2, #28
 8000b90:	6013      	str	r3, [r2, #0]
 8000b92:	e05d      	b.n	8000c50 <letter_select+0x904>
		for (int j=0; j<4; j++) {
 8000b94:	2300      	movs	r3, #0
 8000b96:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000b9a:	f102 0218 	add.w	r2, r2, #24
 8000b9e:	6013      	str	r3, [r2, #0]
 8000ba0:	e044      	b.n	8000c2c <letter_select+0x8e0>

			int x_pos = j + x;
 8000ba2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000ba6:	f102 0204 	add.w	r2, r2, #4
 8000baa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bae:	3b1c      	subs	r3, #28
 8000bb0:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 8000bb4:	f101 0118 	add.w	r1, r1, #24
 8000bb8:	6809      	ldr	r1, [r1, #0]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	440b      	add	r3, r1
 8000bbe:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8000bc0:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8000bc4:	f107 0208 	add.w	r2, r7, #8
 8000bc8:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 8000bcc:	f101 011c 	add.w	r1, r1, #28
 8000bd0:	6809      	ldr	r1, [r1, #0]
 8000bd2:	6812      	ldr	r2, [r2, #0]
 8000bd4:	440a      	add	r2, r1
 8000bd6:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_F[i][j]);
 8000bd8:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8000bdc:	f103 0304 	add.w	r3, r3, #4
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	b298      	uxth	r0, r3
 8000be4:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	b29c      	uxth	r4, r3
 8000bec:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8000bf0:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000bf4:	f102 021c 	add.w	r2, r2, #28
 8000bf8:	6812      	ldr	r2, [r2, #0]
 8000bfa:	0091      	lsls	r1, r2, #2
 8000bfc:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000c00:	f102 0218 	add.w	r2, r2, #24
 8000c04:	6812      	ldr	r2, [r2, #0]
 8000c06:	440a      	add	r2, r1
 8000c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	461a      	mov	r2, r3
 8000c10:	4621      	mov	r1, r4
 8000c12:	f002 f813 	bl	8002c3c <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8000c16:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8000c1a:	f103 0318 	add.w	r3, r3, #24
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	3301      	adds	r3, #1
 8000c22:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000c26:	f102 0218 	add.w	r2, r2, #24
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8000c30:	f103 0318 	add.w	r3, r3, #24
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2b03      	cmp	r3, #3
 8000c38:	ddb3      	ble.n	8000ba2 <letter_select+0x856>
	for (int i=0; i<10; i++) {
 8000c3a:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8000c3e:	f103 031c 	add.w	r3, r3, #28
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	3301      	adds	r3, #1
 8000c46:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000c4a:	f102 021c 	add.w	r2, r2, #28
 8000c4e:	6013      	str	r3, [r2, #0]
 8000c50:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8000c54:	f103 031c 	add.w	r3, r3, #28
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2b09      	cmp	r3, #9
 8000c5c:	dd9a      	ble.n	8000b94 <letter_select+0x848>
		}
	}
	break;
 8000c5e:	f001 b90e 	b.w	8001e7e <letter_select+0x1b32>


	case 'G':
	for (int i=0; i<10; i++) {
 8000c62:	2300      	movs	r3, #0
 8000c64:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000c68:	f102 0214 	add.w	r2, r2, #20
 8000c6c:	6013      	str	r3, [r2, #0]
 8000c6e:	e061      	b.n	8000d34 <letter_select+0x9e8>
		for (int j=0; j<4; j++) {
 8000c70:	2300      	movs	r3, #0
 8000c72:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000c76:	f102 0210 	add.w	r2, r2, #16
 8000c7a:	6013      	str	r3, [r2, #0]
 8000c7c:	e048      	b.n	8000d10 <letter_select+0x9c4>

			int x_pos = j + x;
 8000c7e:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8000c82:	f102 021c 	add.w	r2, r2, #28
 8000c86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c8a:	3b1c      	subs	r3, #28
 8000c8c:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 8000c90:	f101 0110 	add.w	r1, r1, #16
 8000c94:	6809      	ldr	r1, [r1, #0]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	440b      	add	r3, r1
 8000c9a:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8000c9c:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8000ca0:	f103 0318 	add.w	r3, r3, #24
 8000ca4:	f107 0208 	add.w	r2, r7, #8
 8000ca8:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 8000cac:	f101 0114 	add.w	r1, r1, #20
 8000cb0:	6809      	ldr	r1, [r1, #0]
 8000cb2:	6812      	ldr	r2, [r2, #0]
 8000cb4:	440a      	add	r2, r1
 8000cb6:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_G[i][j]);
 8000cb8:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8000cbc:	f103 031c 	add.w	r3, r3, #28
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	b298      	uxth	r0, r3
 8000cc4:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8000cc8:	f103 0318 	add.w	r3, r3, #24
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	b29c      	uxth	r4, r3
 8000cd0:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8000cd4:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000cd8:	f102 0214 	add.w	r2, r2, #20
 8000cdc:	6812      	ldr	r2, [r2, #0]
 8000cde:	0091      	lsls	r1, r2, #2
 8000ce0:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000ce4:	f102 0210 	add.w	r2, r2, #16
 8000ce8:	6812      	ldr	r2, [r2, #0]
 8000cea:	440a      	add	r2, r1
 8000cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	4621      	mov	r1, r4
 8000cf6:	f001 ffa1 	bl	8002c3c <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8000cfa:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8000cfe:	f103 0310 	add.w	r3, r3, #16
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	3301      	adds	r3, #1
 8000d06:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000d0a:	f102 0210 	add.w	r2, r2, #16
 8000d0e:	6013      	str	r3, [r2, #0]
 8000d10:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8000d14:	f103 0310 	add.w	r3, r3, #16
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	2b03      	cmp	r3, #3
 8000d1c:	ddaf      	ble.n	8000c7e <letter_select+0x932>
	for (int i=0; i<10; i++) {
 8000d1e:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8000d22:	f103 0314 	add.w	r3, r3, #20
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000d2e:	f102 0214 	add.w	r2, r2, #20
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8000d38:	f103 0314 	add.w	r3, r3, #20
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	2b09      	cmp	r3, #9
 8000d40:	dd96      	ble.n	8000c70 <letter_select+0x924>
		}
	}
	break;
 8000d42:	f001 b89c 	b.w	8001e7e <letter_select+0x1b32>


	case 'H':
	for (int i=0; i<10; i++) {
 8000d46:	2300      	movs	r3, #0
 8000d48:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000d4c:	f102 020c 	add.w	r2, r2, #12
 8000d50:	6013      	str	r3, [r2, #0]
 8000d52:	e061      	b.n	8000e18 <letter_select+0xacc>
		for (int j=0; j<4; j++) {
 8000d54:	2300      	movs	r3, #0
 8000d56:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000d5a:	f102 0208 	add.w	r2, r2, #8
 8000d5e:	6013      	str	r3, [r2, #0]
 8000d60:	e048      	b.n	8000df4 <letter_select+0xaa8>

			int x_pos = j + x;
 8000d62:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8000d66:	f102 0214 	add.w	r2, r2, #20
 8000d6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d6e:	3b1c      	subs	r3, #28
 8000d70:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 8000d74:	f101 0108 	add.w	r1, r1, #8
 8000d78:	6809      	ldr	r1, [r1, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	440b      	add	r3, r1
 8000d7e:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8000d80:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8000d84:	f103 0310 	add.w	r3, r3, #16
 8000d88:	f107 0208 	add.w	r2, r7, #8
 8000d8c:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 8000d90:	f101 010c 	add.w	r1, r1, #12
 8000d94:	6809      	ldr	r1, [r1, #0]
 8000d96:	6812      	ldr	r2, [r2, #0]
 8000d98:	440a      	add	r2, r1
 8000d9a:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_H[i][j]);
 8000d9c:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8000da0:	f103 0314 	add.w	r3, r3, #20
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	b298      	uxth	r0, r3
 8000da8:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8000dac:	f103 0310 	add.w	r3, r3, #16
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	b29c      	uxth	r4, r3
 8000db4:	f607 4318 	addw	r3, r7, #3096	; 0xc18
 8000db8:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000dbc:	f102 020c 	add.w	r2, r2, #12
 8000dc0:	6812      	ldr	r2, [r2, #0]
 8000dc2:	0091      	lsls	r1, r2, #2
 8000dc4:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000dc8:	f102 0208 	add.w	r2, r2, #8
 8000dcc:	6812      	ldr	r2, [r2, #0]
 8000dce:	440a      	add	r2, r1
 8000dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	461a      	mov	r2, r3
 8000dd8:	4621      	mov	r1, r4
 8000dda:	f001 ff2f 	bl	8002c3c <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8000dde:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8000de2:	f103 0308 	add.w	r3, r3, #8
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	3301      	adds	r3, #1
 8000dea:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000dee:	f102 0208 	add.w	r2, r2, #8
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8000df8:	f103 0308 	add.w	r3, r3, #8
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b03      	cmp	r3, #3
 8000e00:	ddaf      	ble.n	8000d62 <letter_select+0xa16>
	for (int i=0; i<10; i++) {
 8000e02:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8000e06:	f103 030c 	add.w	r3, r3, #12
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000e12:	f102 020c 	add.w	r2, r2, #12
 8000e16:	6013      	str	r3, [r2, #0]
 8000e18:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8000e1c:	f103 030c 	add.w	r3, r3, #12
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b09      	cmp	r3, #9
 8000e24:	dd96      	ble.n	8000d54 <letter_select+0xa08>
		}
	}
	break;
 8000e26:	f001 b82a 	b.w	8001e7e <letter_select+0x1b32>


	case 'I':
	for (int i=0; i<10; i++) {
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000e30:	f102 0204 	add.w	r2, r2, #4
 8000e34:	6013      	str	r3, [r2, #0]
 8000e36:	e057      	b.n	8000ee8 <letter_select+0xb9c>
		for (int j=0; j<3; j++) {
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000e3e:	6013      	str	r3, [r2, #0]
 8000e40:	e042      	b.n	8000ec8 <letter_select+0xb7c>

			int x_pos = j + x;
 8000e42:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8000e46:	f102 020c 	add.w	r2, r2, #12
 8000e4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e4e:	3b1c      	subs	r3, #28
 8000e50:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 8000e54:	6809      	ldr	r1, [r1, #0]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	440b      	add	r3, r1
 8000e5a:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8000e5c:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8000e60:	f103 0308 	add.w	r3, r3, #8
 8000e64:	f107 0208 	add.w	r2, r7, #8
 8000e68:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 8000e6c:	f101 0104 	add.w	r1, r1, #4
 8000e70:	6809      	ldr	r1, [r1, #0]
 8000e72:	6812      	ldr	r2, [r2, #0]
 8000e74:	440a      	add	r2, r1
 8000e76:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_I[i][j]);
 8000e78:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8000e7c:	f103 030c 	add.w	r3, r3, #12
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	b298      	uxth	r0, r3
 8000e84:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8000e88:	f103 0308 	add.w	r3, r3, #8
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	b29c      	uxth	r4, r3
 8000e90:	f507 613a 	add.w	r1, r7, #2976	; 0xba0
 8000e94:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8000e98:	f103 0304 	add.w	r3, r3, #4
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	4413      	add	r3, r2
 8000ea4:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000ea8:	6812      	ldr	r2, [r2, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4621      	mov	r1, r4
 8000eb6:	f001 fec1 	bl	8002c3c <UB_VGA_SetPixel>
		for (int j=0; j<3; j++) {
 8000eba:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000ec6:	6013      	str	r3, [r2, #0]
 8000ec8:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	ddb7      	ble.n	8000e42 <letter_select+0xaf6>
	for (int i=0; i<10; i++) {
 8000ed2:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8000ed6:	f103 0304 	add.w	r3, r3, #4
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8000ee2:	f102 0204 	add.w	r2, r2, #4
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8000eec:	f103 0304 	add.w	r3, r3, #4
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2b09      	cmp	r3, #9
 8000ef4:	dda0      	ble.n	8000e38 <letter_select+0xaec>
		}
	}
	break;
 8000ef6:	f000 bfc2 	b.w	8001e7e <letter_select+0x1b32>


	case 'J':
	for (int i=0; i<10; i++) {
 8000efa:	2300      	movs	r3, #0
 8000efc:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8000f00:	f102 021c 	add.w	r2, r2, #28
 8000f04:	6013      	str	r3, [r2, #0]
 8000f06:	e05d      	b.n	8000fc4 <letter_select+0xc78>
		for (int j=0; j<4; j++) {
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8000f0e:	f102 0218 	add.w	r2, r2, #24
 8000f12:	6013      	str	r3, [r2, #0]
 8000f14:	e044      	b.n	8000fa0 <letter_select+0xc54>

			int x_pos = j + x;
 8000f16:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8000f1a:	f102 0204 	add.w	r2, r2, #4
 8000f1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f22:	3b1c      	subs	r3, #28
 8000f24:	f507 5193 	add.w	r1, r7, #4704	; 0x1260
 8000f28:	f101 0118 	add.w	r1, r1, #24
 8000f2c:	6809      	ldr	r1, [r1, #0]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	440b      	add	r3, r1
 8000f32:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8000f34:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8000f38:	f107 0208 	add.w	r2, r7, #8
 8000f3c:	f507 5193 	add.w	r1, r7, #4704	; 0x1260
 8000f40:	f101 011c 	add.w	r1, r1, #28
 8000f44:	6809      	ldr	r1, [r1, #0]
 8000f46:	6812      	ldr	r2, [r2, #0]
 8000f48:	440a      	add	r2, r1
 8000f4a:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_J[i][j]);
 8000f4c:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8000f50:	f103 0304 	add.w	r3, r3, #4
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	b298      	uxth	r0, r3
 8000f58:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	b29c      	uxth	r4, r3
 8000f60:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8000f64:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8000f68:	f102 021c 	add.w	r2, r2, #28
 8000f6c:	6812      	ldr	r2, [r2, #0]
 8000f6e:	0091      	lsls	r1, r2, #2
 8000f70:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8000f74:	f102 0218 	add.w	r2, r2, #24
 8000f78:	6812      	ldr	r2, [r2, #0]
 8000f7a:	440a      	add	r2, r1
 8000f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	461a      	mov	r2, r3
 8000f84:	4621      	mov	r1, r4
 8000f86:	f001 fe59 	bl	8002c3c <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8000f8a:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8000f8e:	f103 0318 	add.w	r3, r3, #24
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	3301      	adds	r3, #1
 8000f96:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8000f9a:	f102 0218 	add.w	r2, r2, #24
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8000fa4:	f103 0318 	add.w	r3, r3, #24
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b03      	cmp	r3, #3
 8000fac:	ddb3      	ble.n	8000f16 <letter_select+0xbca>
	for (int i=0; i<10; i++) {
 8000fae:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8000fb2:	f103 031c 	add.w	r3, r3, #28
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8000fbe:	f102 021c 	add.w	r2, r2, #28
 8000fc2:	6013      	str	r3, [r2, #0]
 8000fc4:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8000fc8:	f103 031c 	add.w	r3, r3, #28
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b09      	cmp	r3, #9
 8000fd0:	dd9a      	ble.n	8000f08 <letter_select+0xbbc>
		}
	}
	break;
 8000fd2:	f000 bf54 	b.w	8001e7e <letter_select+0x1b32>


	case 'K':
	for (int i=0; i<10; i++) {
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8000fdc:	f102 0214 	add.w	r2, r2, #20
 8000fe0:	6013      	str	r3, [r2, #0]
 8000fe2:	e061      	b.n	80010a8 <letter_select+0xd5c>
		for (int j=0; j<4; j++) {
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8000fea:	f102 0210 	add.w	r2, r2, #16
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	e048      	b.n	8001084 <letter_select+0xd38>

			int x_pos = j + x;
 8000ff2:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 8000ff6:	f102 021c 	add.w	r2, r2, #28
 8000ffa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ffe:	3b1c      	subs	r3, #28
 8001000:	f507 5193 	add.w	r1, r7, #4704	; 0x1260
 8001004:	f101 0110 	add.w	r1, r1, #16
 8001008:	6809      	ldr	r1, [r1, #0]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	440b      	add	r3, r1
 800100e:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001010:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001014:	f103 0318 	add.w	r3, r3, #24
 8001018:	f107 0208 	add.w	r2, r7, #8
 800101c:	f507 5193 	add.w	r1, r7, #4704	; 0x1260
 8001020:	f101 0114 	add.w	r1, r1, #20
 8001024:	6809      	ldr	r1, [r1, #0]
 8001026:	6812      	ldr	r2, [r2, #0]
 8001028:	440a      	add	r2, r1
 800102a:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_K[i][j]);
 800102c:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001030:	f103 031c 	add.w	r3, r3, #28
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	b298      	uxth	r0, r3
 8001038:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 800103c:	f103 0318 	add.w	r3, r3, #24
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	b29c      	uxth	r4, r3
 8001044:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8001048:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800104c:	f102 0214 	add.w	r2, r2, #20
 8001050:	6812      	ldr	r2, [r2, #0]
 8001052:	0091      	lsls	r1, r2, #2
 8001054:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001058:	f102 0210 	add.w	r2, r2, #16
 800105c:	6812      	ldr	r2, [r2, #0]
 800105e:	440a      	add	r2, r1
 8001060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001064:	b2db      	uxtb	r3, r3
 8001066:	461a      	mov	r2, r3
 8001068:	4621      	mov	r1, r4
 800106a:	f001 fde7 	bl	8002c3c <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 800106e:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001072:	f103 0310 	add.w	r3, r3, #16
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	3301      	adds	r3, #1
 800107a:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800107e:	f102 0210 	add.w	r2, r2, #16
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001088:	f103 0310 	add.w	r3, r3, #16
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b03      	cmp	r3, #3
 8001090:	ddaf      	ble.n	8000ff2 <letter_select+0xca6>
	for (int i=0; i<10; i++) {
 8001092:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001096:	f103 0314 	add.w	r3, r3, #20
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	3301      	adds	r3, #1
 800109e:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 80010a2:	f102 0214 	add.w	r2, r2, #20
 80010a6:	6013      	str	r3, [r2, #0]
 80010a8:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 80010ac:	f103 0314 	add.w	r3, r3, #20
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2b09      	cmp	r3, #9
 80010b4:	dd96      	ble.n	8000fe4 <letter_select+0xc98>
		}
	}
	break;
 80010b6:	f000 bee2 	b.w	8001e7e <letter_select+0x1b32>


	case 'L':
	for (int i=0; i<10; i++) {
 80010ba:	2300      	movs	r3, #0
 80010bc:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 80010c0:	f102 020c 	add.w	r2, r2, #12
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	e061      	b.n	800118c <letter_select+0xe40>
		for (int j=0; j<4; j++) {
 80010c8:	2300      	movs	r3, #0
 80010ca:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 80010ce:	f102 0208 	add.w	r2, r2, #8
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	e048      	b.n	8001168 <letter_select+0xe1c>

			int x_pos = j + x;
 80010d6:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 80010da:	f102 0214 	add.w	r2, r2, #20
 80010de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e2:	3b1c      	subs	r3, #28
 80010e4:	f507 5193 	add.w	r1, r7, #4704	; 0x1260
 80010e8:	f101 0108 	add.w	r1, r1, #8
 80010ec:	6809      	ldr	r1, [r1, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	440b      	add	r3, r1
 80010f2:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80010f4:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80010f8:	f103 0310 	add.w	r3, r3, #16
 80010fc:	f107 0208 	add.w	r2, r7, #8
 8001100:	f507 5193 	add.w	r1, r7, #4704	; 0x1260
 8001104:	f101 010c 	add.w	r1, r1, #12
 8001108:	6809      	ldr	r1, [r1, #0]
 800110a:	6812      	ldr	r2, [r2, #0]
 800110c:	440a      	add	r2, r1
 800110e:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_L[i][j]);
 8001110:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001114:	f103 0314 	add.w	r3, r3, #20
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	b298      	uxth	r0, r3
 800111c:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001120:	f103 0310 	add.w	r3, r3, #16
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	b29c      	uxth	r4, r3
 8001128:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800112c:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001130:	f102 020c 	add.w	r2, r2, #12
 8001134:	6812      	ldr	r2, [r2, #0]
 8001136:	0091      	lsls	r1, r2, #2
 8001138:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800113c:	f102 0208 	add.w	r2, r2, #8
 8001140:	6812      	ldr	r2, [r2, #0]
 8001142:	440a      	add	r2, r1
 8001144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	461a      	mov	r2, r3
 800114c:	4621      	mov	r1, r4
 800114e:	f001 fd75 	bl	8002c3c <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8001152:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001156:	f103 0308 	add.w	r3, r3, #8
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	3301      	adds	r3, #1
 800115e:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001162:	f102 0208 	add.w	r2, r2, #8
 8001166:	6013      	str	r3, [r2, #0]
 8001168:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800116c:	f103 0308 	add.w	r3, r3, #8
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b03      	cmp	r3, #3
 8001174:	ddaf      	ble.n	80010d6 <letter_select+0xd8a>
	for (int i=0; i<10; i++) {
 8001176:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800117a:	f103 030c 	add.w	r3, r3, #12
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001186:	f102 020c 	add.w	r2, r2, #12
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001190:	f103 030c 	add.w	r3, r3, #12
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2b09      	cmp	r3, #9
 8001198:	dd96      	ble.n	80010c8 <letter_select+0xd7c>
		}
	}
	break;
 800119a:	f000 be70 	b.w	8001e7e <letter_select+0x1b32>


	case 'M':
	for (int i=0; i<10; i++) {
 800119e:	2300      	movs	r3, #0
 80011a0:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 80011a4:	f102 0204 	add.w	r2, r2, #4
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	e055      	b.n	8001258 <letter_select+0xf0c>
		for (int j=0; j<4; j++) {
 80011ac:	2300      	movs	r3, #0
 80011ae:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 80011b2:	6013      	str	r3, [r2, #0]
 80011b4:	e040      	b.n	8001238 <letter_select+0xeec>

			int x_pos = j + x;
 80011b6:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 80011ba:	f102 020c 	add.w	r2, r2, #12
 80011be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011c2:	3b1c      	subs	r3, #28
 80011c4:	f507 5193 	add.w	r1, r7, #4704	; 0x1260
 80011c8:	6809      	ldr	r1, [r1, #0]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	440b      	add	r3, r1
 80011ce:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80011d0:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80011d4:	f103 0308 	add.w	r3, r3, #8
 80011d8:	f107 0208 	add.w	r2, r7, #8
 80011dc:	f507 5193 	add.w	r1, r7, #4704	; 0x1260
 80011e0:	f101 0104 	add.w	r1, r1, #4
 80011e4:	6809      	ldr	r1, [r1, #0]
 80011e6:	6812      	ldr	r2, [r2, #0]
 80011e8:	440a      	add	r2, r1
 80011ea:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_M[i][j]);
 80011ec:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80011f0:	f103 030c 	add.w	r3, r3, #12
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	b298      	uxth	r0, r3
 80011f8:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80011fc:	f103 0308 	add.w	r3, r3, #8
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	b29c      	uxth	r4, r3
 8001204:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8001208:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800120c:	f102 0204 	add.w	r2, r2, #4
 8001210:	6812      	ldr	r2, [r2, #0]
 8001212:	0091      	lsls	r1, r2, #2
 8001214:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001218:	6812      	ldr	r2, [r2, #0]
 800121a:	440a      	add	r2, r1
 800121c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001220:	b2db      	uxtb	r3, r3
 8001222:	461a      	mov	r2, r3
 8001224:	4621      	mov	r1, r4
 8001226:	f001 fd09 	bl	8002c3c <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 800122a:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	3301      	adds	r3, #1
 8001232:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2b03      	cmp	r3, #3
 8001240:	ddb9      	ble.n	80011b6 <letter_select+0xe6a>
	for (int i=0; i<10; i++) {
 8001242:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001246:	f103 0304 	add.w	r3, r3, #4
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	3301      	adds	r3, #1
 800124e:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001252:	f102 0204 	add.w	r2, r2, #4
 8001256:	6013      	str	r3, [r2, #0]
 8001258:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800125c:	f103 0304 	add.w	r3, r3, #4
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2b09      	cmp	r3, #9
 8001264:	dda2      	ble.n	80011ac <letter_select+0xe60>
		}
	}
	break;
 8001266:	f000 be0a 	b.w	8001e7e <letter_select+0x1b32>


	case 'N':
	for (int i=0; i<10; i++) {
 800126a:	2300      	movs	r3, #0
 800126c:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8001270:	f102 021c 	add.w	r2, r2, #28
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e05d      	b.n	8001334 <letter_select+0xfe8>
		for (int j=0; j<4; j++) {
 8001278:	2300      	movs	r3, #0
 800127a:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 800127e:	f102 0218 	add.w	r2, r2, #24
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	e044      	b.n	8001310 <letter_select+0xfc4>

			int x_pos = j + x;
 8001286:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 800128a:	f102 0204 	add.w	r2, r2, #4
 800128e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001292:	3b1c      	subs	r3, #28
 8001294:	f507 5192 	add.w	r1, r7, #4672	; 0x1240
 8001298:	f101 0118 	add.w	r1, r1, #24
 800129c:	6809      	ldr	r1, [r1, #0]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	440b      	add	r3, r1
 80012a2:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80012a4:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80012a8:	f107 0208 	add.w	r2, r7, #8
 80012ac:	f507 5192 	add.w	r1, r7, #4672	; 0x1240
 80012b0:	f101 011c 	add.w	r1, r1, #28
 80012b4:	6809      	ldr	r1, [r1, #0]
 80012b6:	6812      	ldr	r2, [r2, #0]
 80012b8:	440a      	add	r2, r1
 80012ba:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_N[i][j]);
 80012bc:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80012c0:	f103 0304 	add.w	r3, r3, #4
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	b298      	uxth	r0, r3
 80012c8:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	b29c      	uxth	r4, r3
 80012d0:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80012d4:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 80012d8:	f102 021c 	add.w	r2, r2, #28
 80012dc:	6812      	ldr	r2, [r2, #0]
 80012de:	0091      	lsls	r1, r2, #2
 80012e0:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 80012e4:	f102 0218 	add.w	r2, r2, #24
 80012e8:	6812      	ldr	r2, [r2, #0]
 80012ea:	440a      	add	r2, r1
 80012ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	461a      	mov	r2, r3
 80012f4:	4621      	mov	r1, r4
 80012f6:	f001 fca1 	bl	8002c3c <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 80012fa:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80012fe:	f103 0318 	add.w	r3, r3, #24
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	3301      	adds	r3, #1
 8001306:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 800130a:	f102 0218 	add.w	r2, r2, #24
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001314:	f103 0318 	add.w	r3, r3, #24
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b03      	cmp	r3, #3
 800131c:	ddb3      	ble.n	8001286 <letter_select+0xf3a>
	for (int i=0; i<10; i++) {
 800131e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001322:	f103 031c 	add.w	r3, r3, #28
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	3301      	adds	r3, #1
 800132a:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 800132e:	f102 021c 	add.w	r2, r2, #28
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001338:	f103 031c 	add.w	r3, r3, #28
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b09      	cmp	r3, #9
 8001340:	dd9a      	ble.n	8001278 <letter_select+0xf2c>
		}
	}
	break;
 8001342:	f000 bd9c 	b.w	8001e7e <letter_select+0x1b32>


	case 'O':
	for (int i=0; i<10; i++) {
 8001346:	2300      	movs	r3, #0
 8001348:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 800134c:	f102 0214 	add.w	r2, r2, #20
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e061      	b.n	8001418 <letter_select+0x10cc>
		for (int j=0; j<4; j++) {
 8001354:	2300      	movs	r3, #0
 8001356:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 800135a:	f102 0210 	add.w	r2, r2, #16
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	e048      	b.n	80013f4 <letter_select+0x10a8>

			int x_pos = j + x;
 8001362:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8001366:	f102 021c 	add.w	r2, r2, #28
 800136a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800136e:	3b1c      	subs	r3, #28
 8001370:	f507 5192 	add.w	r1, r7, #4672	; 0x1240
 8001374:	f101 0110 	add.w	r1, r1, #16
 8001378:	6809      	ldr	r1, [r1, #0]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	440b      	add	r3, r1
 800137e:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001380:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8001384:	f103 0318 	add.w	r3, r3, #24
 8001388:	f107 0208 	add.w	r2, r7, #8
 800138c:	f507 5192 	add.w	r1, r7, #4672	; 0x1240
 8001390:	f101 0114 	add.w	r1, r1, #20
 8001394:	6809      	ldr	r1, [r1, #0]
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	440a      	add	r2, r1
 800139a:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_O[i][j]);
 800139c:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80013a0:	f103 031c 	add.w	r3, r3, #28
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	b298      	uxth	r0, r3
 80013a8:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80013ac:	f103 0318 	add.w	r3, r3, #24
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	b29c      	uxth	r4, r3
 80013b4:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 80013b8:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 80013bc:	f102 0214 	add.w	r2, r2, #20
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	0091      	lsls	r1, r2, #2
 80013c4:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 80013c8:	f102 0210 	add.w	r2, r2, #16
 80013cc:	6812      	ldr	r2, [r2, #0]
 80013ce:	440a      	add	r2, r1
 80013d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	461a      	mov	r2, r3
 80013d8:	4621      	mov	r1, r4
 80013da:	f001 fc2f 	bl	8002c3c <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 80013de:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80013e2:	f103 0310 	add.w	r3, r3, #16
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3301      	adds	r3, #1
 80013ea:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 80013ee:	f102 0210 	add.w	r2, r2, #16
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80013f8:	f103 0310 	add.w	r3, r3, #16
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b03      	cmp	r3, #3
 8001400:	ddaf      	ble.n	8001362 <letter_select+0x1016>
	for (int i=0; i<10; i++) {
 8001402:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001406:	f103 0314 	add.w	r3, r3, #20
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8001412:	f102 0214 	add.w	r2, r2, #20
 8001416:	6013      	str	r3, [r2, #0]
 8001418:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800141c:	f103 0314 	add.w	r3, r3, #20
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	2b09      	cmp	r3, #9
 8001424:	dd96      	ble.n	8001354 <letter_select+0x1008>
		}
	}
	break;
 8001426:	f000 bd2a 	b.w	8001e7e <letter_select+0x1b32>


	case 'P':
	for (int i=0; i<10; i++) {
 800142a:	2300      	movs	r3, #0
 800142c:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8001430:	f102 020c 	add.w	r2, r2, #12
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	e061      	b.n	80014fc <letter_select+0x11b0>
		for (int j=0; j<4; j++) {
 8001438:	2300      	movs	r3, #0
 800143a:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 800143e:	f102 0208 	add.w	r2, r2, #8
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	e048      	b.n	80014d8 <letter_select+0x118c>

			int x_pos = j + x;
 8001446:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 800144a:	f102 0214 	add.w	r2, r2, #20
 800144e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001452:	3b1c      	subs	r3, #28
 8001454:	f507 5192 	add.w	r1, r7, #4672	; 0x1240
 8001458:	f101 0108 	add.w	r1, r1, #8
 800145c:	6809      	ldr	r1, [r1, #0]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	440b      	add	r3, r1
 8001462:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001464:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8001468:	f103 0310 	add.w	r3, r3, #16
 800146c:	f107 0208 	add.w	r2, r7, #8
 8001470:	f507 5192 	add.w	r1, r7, #4672	; 0x1240
 8001474:	f101 010c 	add.w	r1, r1, #12
 8001478:	6809      	ldr	r1, [r1, #0]
 800147a:	6812      	ldr	r2, [r2, #0]
 800147c:	440a      	add	r2, r1
 800147e:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_P[i][j]);
 8001480:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8001484:	f103 0314 	add.w	r3, r3, #20
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b298      	uxth	r0, r3
 800148c:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8001490:	f103 0310 	add.w	r3, r3, #16
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	b29c      	uxth	r4, r3
 8001498:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800149c:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 80014a0:	f102 020c 	add.w	r2, r2, #12
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	0091      	lsls	r1, r2, #2
 80014a8:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 80014ac:	f102 0208 	add.w	r2, r2, #8
 80014b0:	6812      	ldr	r2, [r2, #0]
 80014b2:	440a      	add	r2, r1
 80014b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	461a      	mov	r2, r3
 80014bc:	4621      	mov	r1, r4
 80014be:	f001 fbbd 	bl	8002c3c <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 80014c2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80014c6:	f103 0308 	add.w	r3, r3, #8
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	3301      	adds	r3, #1
 80014ce:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 80014d2:	f102 0208 	add.w	r2, r2, #8
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80014dc:	f103 0308 	add.w	r3, r3, #8
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	ddaf      	ble.n	8001446 <letter_select+0x10fa>
	for (int i=0; i<10; i++) {
 80014e6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80014ea:	f103 030c 	add.w	r3, r3, #12
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	3301      	adds	r3, #1
 80014f2:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 80014f6:	f102 020c 	add.w	r2, r2, #12
 80014fa:	6013      	str	r3, [r2, #0]
 80014fc:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001500:	f103 030c 	add.w	r3, r3, #12
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2b09      	cmp	r3, #9
 8001508:	dd96      	ble.n	8001438 <letter_select+0x10ec>
		}
	}
	break;
 800150a:	f000 bcb8 	b.w	8001e7e <letter_select+0x1b32>


	case 'Q':
	for (int i=0; i<10; i++) {
 800150e:	2300      	movs	r3, #0
 8001510:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8001514:	f102 0204 	add.w	r2, r2, #4
 8001518:	6013      	str	r3, [r2, #0]
 800151a:	e055      	b.n	80015c8 <letter_select+0x127c>
		for (int j=0; j<4; j++) {
 800151c:	2300      	movs	r3, #0
 800151e:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	e040      	b.n	80015a8 <letter_select+0x125c>

			int x_pos = j + x;
 8001526:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 800152a:	f102 020c 	add.w	r2, r2, #12
 800152e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001532:	3b1c      	subs	r3, #28
 8001534:	f507 5192 	add.w	r1, r7, #4672	; 0x1240
 8001538:	6809      	ldr	r1, [r1, #0]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	440b      	add	r3, r1
 800153e:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001540:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8001544:	f103 0308 	add.w	r3, r3, #8
 8001548:	f107 0208 	add.w	r2, r7, #8
 800154c:	f507 5192 	add.w	r1, r7, #4672	; 0x1240
 8001550:	f101 0104 	add.w	r1, r1, #4
 8001554:	6809      	ldr	r1, [r1, #0]
 8001556:	6812      	ldr	r2, [r2, #0]
 8001558:	440a      	add	r2, r1
 800155a:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_Q[i][j]);
 800155c:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8001560:	f103 030c 	add.w	r3, r3, #12
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	b298      	uxth	r0, r3
 8001568:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 800156c:	f103 0308 	add.w	r3, r3, #8
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	b29c      	uxth	r4, r3
 8001574:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8001578:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 800157c:	f102 0204 	add.w	r2, r2, #4
 8001580:	6812      	ldr	r2, [r2, #0]
 8001582:	0091      	lsls	r1, r2, #2
 8001584:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8001588:	6812      	ldr	r2, [r2, #0]
 800158a:	440a      	add	r2, r1
 800158c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001590:	b2db      	uxtb	r3, r3
 8001592:	461a      	mov	r2, r3
 8001594:	4621      	mov	r1, r4
 8001596:	f001 fb51 	bl	8002c3c <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 800159a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b03      	cmp	r3, #3
 80015b0:	ddb9      	ble.n	8001526 <letter_select+0x11da>
	for (int i=0; i<10; i++) {
 80015b2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80015b6:	f103 0304 	add.w	r3, r3, #4
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 80015c2:	f102 0204 	add.w	r2, r2, #4
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80015cc:	f103 0304 	add.w	r3, r3, #4
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b09      	cmp	r3, #9
 80015d4:	dda2      	ble.n	800151c <letter_select+0x11d0>
		}
	}
	break;
 80015d6:	f000 bc52 	b.w	8001e7e <letter_select+0x1b32>


	case 'R':
	for (int i=0; i<10; i++) {
 80015da:	2300      	movs	r3, #0
 80015dc:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80015e0:	f102 021c 	add.w	r2, r2, #28
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	e05d      	b.n	80016a4 <letter_select+0x1358>
		for (int j=0; j<4; j++) {
 80015e8:	2300      	movs	r3, #0
 80015ea:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80015ee:	f102 0218 	add.w	r2, r2, #24
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	e044      	b.n	8001680 <letter_select+0x1334>

			int x_pos = j + x;
 80015f6:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80015fa:	f102 0204 	add.w	r2, r2, #4
 80015fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001602:	3b1c      	subs	r3, #28
 8001604:	f507 5191 	add.w	r1, r7, #4640	; 0x1220
 8001608:	f101 0118 	add.w	r1, r1, #24
 800160c:	6809      	ldr	r1, [r1, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	440b      	add	r3, r1
 8001612:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001614:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8001618:	f107 0208 	add.w	r2, r7, #8
 800161c:	f507 5191 	add.w	r1, r7, #4640	; 0x1220
 8001620:	f101 011c 	add.w	r1, r1, #28
 8001624:	6809      	ldr	r1, [r1, #0]
 8001626:	6812      	ldr	r2, [r2, #0]
 8001628:	440a      	add	r2, r1
 800162a:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_R[i][j]);
 800162c:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8001630:	f103 0304 	add.w	r3, r3, #4
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	b298      	uxth	r0, r3
 8001638:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	b29c      	uxth	r4, r3
 8001640:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8001644:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8001648:	f102 021c 	add.w	r2, r2, #28
 800164c:	6812      	ldr	r2, [r2, #0]
 800164e:	0091      	lsls	r1, r2, #2
 8001650:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8001654:	f102 0218 	add.w	r2, r2, #24
 8001658:	6812      	ldr	r2, [r2, #0]
 800165a:	440a      	add	r2, r1
 800165c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	461a      	mov	r2, r3
 8001664:	4621      	mov	r1, r4
 8001666:	f001 fae9 	bl	8002c3c <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 800166a:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 800166e:	f103 0318 	add.w	r3, r3, #24
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	3301      	adds	r3, #1
 8001676:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 800167a:	f102 0218 	add.w	r2, r2, #24
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8001684:	f103 0318 	add.w	r3, r3, #24
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b03      	cmp	r3, #3
 800168c:	ddb3      	ble.n	80015f6 <letter_select+0x12aa>
	for (int i=0; i<10; i++) {
 800168e:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8001692:	f103 031c 	add.w	r3, r3, #28
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	3301      	adds	r3, #1
 800169a:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 800169e:	f102 021c 	add.w	r2, r2, #28
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 80016a8:	f103 031c 	add.w	r3, r3, #28
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b09      	cmp	r3, #9
 80016b0:	dd9a      	ble.n	80015e8 <letter_select+0x129c>
		}
	}
	break;
 80016b2:	e3e4      	b.n	8001e7e <letter_select+0x1b32>


	case 'S':
	for (int i=0; i<10; i++) {
 80016b4:	2300      	movs	r3, #0
 80016b6:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80016ba:	f102 0214 	add.w	r2, r2, #20
 80016be:	6013      	str	r3, [r2, #0]
 80016c0:	e061      	b.n	8001786 <letter_select+0x143a>
		for (int j=0; j<4; j++) {
 80016c2:	2300      	movs	r3, #0
 80016c4:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80016c8:	f102 0210 	add.w	r2, r2, #16
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	e048      	b.n	8001762 <letter_select+0x1416>

			int x_pos = j + x;
 80016d0:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 80016d4:	f102 021c 	add.w	r2, r2, #28
 80016d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016dc:	3b1c      	subs	r3, #28
 80016de:	f507 5191 	add.w	r1, r7, #4640	; 0x1220
 80016e2:	f101 0110 	add.w	r1, r1, #16
 80016e6:	6809      	ldr	r1, [r1, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	440b      	add	r3, r1
 80016ec:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80016ee:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80016f2:	f103 0318 	add.w	r3, r3, #24
 80016f6:	f107 0208 	add.w	r2, r7, #8
 80016fa:	f507 5191 	add.w	r1, r7, #4640	; 0x1220
 80016fe:	f101 0114 	add.w	r1, r1, #20
 8001702:	6809      	ldr	r1, [r1, #0]
 8001704:	6812      	ldr	r2, [r2, #0]
 8001706:	440a      	add	r2, r1
 8001708:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_S[i][j]);
 800170a:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800170e:	f103 031c 	add.w	r3, r3, #28
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	b298      	uxth	r0, r3
 8001716:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800171a:	f103 0318 	add.w	r3, r3, #24
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	b29c      	uxth	r4, r3
 8001722:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8001726:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 800172a:	f102 0214 	add.w	r2, r2, #20
 800172e:	6812      	ldr	r2, [r2, #0]
 8001730:	0091      	lsls	r1, r2, #2
 8001732:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8001736:	f102 0210 	add.w	r2, r2, #16
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	440a      	add	r2, r1
 800173e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	4621      	mov	r1, r4
 8001748:	f001 fa78 	bl	8002c3c <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 800174c:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8001750:	f103 0310 	add.w	r3, r3, #16
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	3301      	adds	r3, #1
 8001758:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 800175c:	f102 0210 	add.w	r2, r2, #16
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8001766:	f103 0310 	add.w	r3, r3, #16
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b03      	cmp	r3, #3
 800176e:	ddaf      	ble.n	80016d0 <letter_select+0x1384>
	for (int i=0; i<10; i++) {
 8001770:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8001774:	f103 0314 	add.w	r3, r3, #20
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	3301      	adds	r3, #1
 800177c:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8001780:	f102 0214 	add.w	r2, r2, #20
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 800178a:	f103 0314 	add.w	r3, r3, #20
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b09      	cmp	r3, #9
 8001792:	dd96      	ble.n	80016c2 <letter_select+0x1376>
		}
	}
	break;
 8001794:	e373      	b.n	8001e7e <letter_select+0x1b32>


	case 'T':
	for (int i=0; i<10; i++) {
 8001796:	2300      	movs	r3, #0
 8001798:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 800179c:	f102 020c 	add.w	r2, r2, #12
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	e063      	b.n	800186c <letter_select+0x1520>
		for (int j=0; j<5; j++) {
 80017a4:	2300      	movs	r3, #0
 80017a6:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80017aa:	f102 0208 	add.w	r2, r2, #8
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	e04a      	b.n	8001848 <letter_select+0x14fc>

			int x_pos = j + x;
 80017b2:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 80017b6:	f102 0214 	add.w	r2, r2, #20
 80017ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017be:	3b1c      	subs	r3, #28
 80017c0:	f507 5191 	add.w	r1, r7, #4640	; 0x1220
 80017c4:	f101 0108 	add.w	r1, r1, #8
 80017c8:	6809      	ldr	r1, [r1, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	440b      	add	r3, r1
 80017ce:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80017d0:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80017d4:	f103 0310 	add.w	r3, r3, #16
 80017d8:	f107 0208 	add.w	r2, r7, #8
 80017dc:	f507 5191 	add.w	r1, r7, #4640	; 0x1220
 80017e0:	f101 010c 	add.w	r1, r1, #12
 80017e4:	6809      	ldr	r1, [r1, #0]
 80017e6:	6812      	ldr	r2, [r2, #0]
 80017e8:	440a      	add	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_T[i][j]);
 80017ec:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80017f0:	f103 0314 	add.w	r3, r3, #20
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	b298      	uxth	r0, r3
 80017f8:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80017fc:	f103 0310 	add.w	r3, r3, #16
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	b29c      	uxth	r4, r3
 8001804:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 8001808:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 800180c:	f103 030c 	add.w	r3, r3, #12
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 800181c:	f102 0208 	add.w	r2, r2, #8
 8001820:	6812      	ldr	r2, [r2, #0]
 8001822:	4413      	add	r3, r2
 8001824:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001828:	b2db      	uxtb	r3, r3
 800182a:	461a      	mov	r2, r3
 800182c:	4621      	mov	r1, r4
 800182e:	f001 fa05 	bl	8002c3c <UB_VGA_SetPixel>
		for (int j=0; j<5; j++) {
 8001832:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8001836:	f103 0308 	add.w	r3, r3, #8
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	3301      	adds	r3, #1
 800183e:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8001842:	f102 0208 	add.w	r2, r2, #8
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 800184c:	f103 0308 	add.w	r3, r3, #8
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b04      	cmp	r3, #4
 8001854:	ddad      	ble.n	80017b2 <letter_select+0x1466>
	for (int i=0; i<10; i++) {
 8001856:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 800185a:	f103 030c 	add.w	r3, r3, #12
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	3301      	adds	r3, #1
 8001862:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8001866:	f102 020c 	add.w	r2, r2, #12
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8001870:	f103 030c 	add.w	r3, r3, #12
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	2b09      	cmp	r3, #9
 8001878:	dd94      	ble.n	80017a4 <letter_select+0x1458>
		}
	}
	break;
 800187a:	e300      	b.n	8001e7e <letter_select+0x1b32>


	case 'U':
	for (int i=0; i<10; i++) {
 800187c:	2300      	movs	r3, #0
 800187e:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8001882:	f102 0204 	add.w	r2, r2, #4
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	e055      	b.n	8001936 <letter_select+0x15ea>
		for (int j=0; j<4; j++) {
 800188a:	2300      	movs	r3, #0
 800188c:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	e040      	b.n	8001916 <letter_select+0x15ca>

			int x_pos = j + x;
 8001894:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8001898:	f102 020c 	add.w	r2, r2, #12
 800189c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018a0:	3b1c      	subs	r3, #28
 80018a2:	f507 5191 	add.w	r1, r7, #4640	; 0x1220
 80018a6:	6809      	ldr	r1, [r1, #0]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	440b      	add	r3, r1
 80018ac:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80018ae:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80018b2:	f103 0308 	add.w	r3, r3, #8
 80018b6:	f107 0208 	add.w	r2, r7, #8
 80018ba:	f507 5191 	add.w	r1, r7, #4640	; 0x1220
 80018be:	f101 0104 	add.w	r1, r1, #4
 80018c2:	6809      	ldr	r1, [r1, #0]
 80018c4:	6812      	ldr	r2, [r2, #0]
 80018c6:	440a      	add	r2, r1
 80018c8:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_U[i][j]);
 80018ca:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80018ce:	f103 030c 	add.w	r3, r3, #12
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	b298      	uxth	r0, r3
 80018d6:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80018da:	f103 0308 	add.w	r3, r3, #8
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	b29c      	uxth	r4, r3
 80018e2:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80018e6:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80018ea:	f102 0204 	add.w	r2, r2, #4
 80018ee:	6812      	ldr	r2, [r2, #0]
 80018f0:	0091      	lsls	r1, r2, #2
 80018f2:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80018f6:	6812      	ldr	r2, [r2, #0]
 80018f8:	440a      	add	r2, r1
 80018fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	461a      	mov	r2, r3
 8001902:	4621      	mov	r1, r4
 8001904:	f001 f99a 	bl	8002c3c <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8001908:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	3301      	adds	r3, #1
 8001910:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b03      	cmp	r3, #3
 800191e:	ddb9      	ble.n	8001894 <letter_select+0x1548>
	for (int i=0; i<10; i++) {
 8001920:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8001924:	f103 0304 	add.w	r3, r3, #4
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	3301      	adds	r3, #1
 800192c:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8001930:	f102 0204 	add.w	r2, r2, #4
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 800193a:	f103 0304 	add.w	r3, r3, #4
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b09      	cmp	r3, #9
 8001942:	dda2      	ble.n	800188a <letter_select+0x153e>
		}
	}
	break;
 8001944:	e29b      	b.n	8001e7e <letter_select+0x1b32>


	case 'V':
	for (int i=0; i<10; i++) {
 8001946:	2300      	movs	r3, #0
 8001948:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 800194c:	f102 021c 	add.w	r2, r2, #28
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	e05d      	b.n	8001a10 <letter_select+0x16c4>
		for (int j=0; j<4; j++) {
 8001954:	2300      	movs	r3, #0
 8001956:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 800195a:	f102 0218 	add.w	r2, r2, #24
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	e044      	b.n	80019ec <letter_select+0x16a0>

			int x_pos = j + x;
 8001962:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8001966:	f102 0204 	add.w	r2, r2, #4
 800196a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800196e:	3b1c      	subs	r3, #28
 8001970:	f507 5190 	add.w	r1, r7, #4608	; 0x1200
 8001974:	f101 0118 	add.w	r1, r1, #24
 8001978:	6809      	ldr	r1, [r1, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	440b      	add	r3, r1
 800197e:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001980:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8001984:	f107 0208 	add.w	r2, r7, #8
 8001988:	f507 5190 	add.w	r1, r7, #4608	; 0x1200
 800198c:	f101 011c 	add.w	r1, r1, #28
 8001990:	6809      	ldr	r1, [r1, #0]
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	440a      	add	r2, r1
 8001996:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_V[i][j]);
 8001998:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800199c:	f103 0304 	add.w	r3, r3, #4
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	b298      	uxth	r0, r3
 80019a4:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	b29c      	uxth	r4, r3
 80019ac:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80019b0:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80019b4:	f102 021c 	add.w	r2, r2, #28
 80019b8:	6812      	ldr	r2, [r2, #0]
 80019ba:	0091      	lsls	r1, r2, #2
 80019bc:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80019c0:	f102 0218 	add.w	r2, r2, #24
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	440a      	add	r2, r1
 80019c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	461a      	mov	r2, r3
 80019d0:	4621      	mov	r1, r4
 80019d2:	f001 f933 	bl	8002c3c <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 80019d6:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80019da:	f103 0318 	add.w	r3, r3, #24
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	3301      	adds	r3, #1
 80019e2:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80019e6:	f102 0218 	add.w	r2, r2, #24
 80019ea:	6013      	str	r3, [r2, #0]
 80019ec:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80019f0:	f103 0318 	add.w	r3, r3, #24
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	ddb3      	ble.n	8001962 <letter_select+0x1616>
	for (int i=0; i<10; i++) {
 80019fa:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80019fe:	f103 031c 	add.w	r3, r3, #28
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	3301      	adds	r3, #1
 8001a06:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8001a0a:	f102 021c 	add.w	r2, r2, #28
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8001a14:	f103 031c 	add.w	r3, r3, #28
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b09      	cmp	r3, #9
 8001a1c:	dd9a      	ble.n	8001954 <letter_select+0x1608>
		}
	}
	break;
 8001a1e:	e22e      	b.n	8001e7e <letter_select+0x1b32>


	case 'W':
	for (int i=0; i<10; i++) {
 8001a20:	2300      	movs	r3, #0
 8001a22:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8001a26:	f102 0214 	add.w	r2, r2, #20
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	e062      	b.n	8001af4 <letter_select+0x17a8>
		for (int j=0; j<4; j++) {
 8001a2e:	2300      	movs	r3, #0
 8001a30:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8001a34:	f102 0210 	add.w	r2, r2, #16
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e049      	b.n	8001ad0 <letter_select+0x1784>

			int x_pos = j + x;
 8001a3c:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8001a40:	f102 021c 	add.w	r2, r2, #28
 8001a44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a48:	3b1c      	subs	r3, #28
 8001a4a:	f507 5190 	add.w	r1, r7, #4608	; 0x1200
 8001a4e:	f101 0110 	add.w	r1, r1, #16
 8001a52:	6809      	ldr	r1, [r1, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	440b      	add	r3, r1
 8001a58:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001a5a:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8001a5e:	f103 0318 	add.w	r3, r3, #24
 8001a62:	f107 0208 	add.w	r2, r7, #8
 8001a66:	f507 5190 	add.w	r1, r7, #4608	; 0x1200
 8001a6a:	f101 0114 	add.w	r1, r1, #20
 8001a6e:	6809      	ldr	r1, [r1, #0]
 8001a70:	6812      	ldr	r2, [r2, #0]
 8001a72:	440a      	add	r2, r1
 8001a74:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_W[i][j]);
 8001a76:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8001a7a:	f103 031c 	add.w	r3, r3, #28
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	b298      	uxth	r0, r3
 8001a82:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8001a86:	f103 0318 	add.w	r3, r3, #24
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	b29c      	uxth	r4, r3
 8001a8e:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8001a92:	3b10      	subs	r3, #16
 8001a94:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8001a98:	f102 0214 	add.w	r2, r2, #20
 8001a9c:	6812      	ldr	r2, [r2, #0]
 8001a9e:	0091      	lsls	r1, r2, #2
 8001aa0:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8001aa4:	f102 0210 	add.w	r2, r2, #16
 8001aa8:	6812      	ldr	r2, [r2, #0]
 8001aaa:	440a      	add	r2, r1
 8001aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4621      	mov	r1, r4
 8001ab6:	f001 f8c1 	bl	8002c3c <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8001aba:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8001abe:	f103 0310 	add.w	r3, r3, #16
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8001aca:	f102 0210 	add.w	r2, r2, #16
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8001ad4:	f103 0310 	add.w	r3, r3, #16
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	ddae      	ble.n	8001a3c <letter_select+0x16f0>
	for (int i=0; i<10; i++) {
 8001ade:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8001ae2:	f103 0314 	add.w	r3, r3, #20
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8001aee:	f102 0214 	add.w	r2, r2, #20
 8001af2:	6013      	str	r3, [r2, #0]
 8001af4:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8001af8:	f103 0314 	add.w	r3, r3, #20
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2b09      	cmp	r3, #9
 8001b00:	dd95      	ble.n	8001a2e <letter_select+0x16e2>
		}
	}
	break;
 8001b02:	e1bc      	b.n	8001e7e <letter_select+0x1b32>


	case 'X':
	for (int i=0; i<10; i++) {
 8001b04:	2300      	movs	r3, #0
 8001b06:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8001b0a:	f102 020c 	add.w	r2, r2, #12
 8001b0e:	6013      	str	r3, [r2, #0]
 8001b10:	e062      	b.n	8001bd8 <letter_select+0x188c>
		for (int j=0; j<4; j++) {
 8001b12:	2300      	movs	r3, #0
 8001b14:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8001b18:	f102 0208 	add.w	r2, r2, #8
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e049      	b.n	8001bb4 <letter_select+0x1868>

			int x_pos = j + x;
 8001b20:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8001b24:	f102 0214 	add.w	r2, r2, #20
 8001b28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b2c:	3b1c      	subs	r3, #28
 8001b2e:	f507 5190 	add.w	r1, r7, #4608	; 0x1200
 8001b32:	f101 0108 	add.w	r1, r1, #8
 8001b36:	6809      	ldr	r1, [r1, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	440b      	add	r3, r1
 8001b3c:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001b3e:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8001b42:	f103 0310 	add.w	r3, r3, #16
 8001b46:	f107 0208 	add.w	r2, r7, #8
 8001b4a:	f507 5190 	add.w	r1, r7, #4608	; 0x1200
 8001b4e:	f101 010c 	add.w	r1, r1, #12
 8001b52:	6809      	ldr	r1, [r1, #0]
 8001b54:	6812      	ldr	r2, [r2, #0]
 8001b56:	440a      	add	r2, r1
 8001b58:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_X[i][j]);
 8001b5a:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8001b5e:	f103 0314 	add.w	r3, r3, #20
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	b298      	uxth	r0, r3
 8001b66:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8001b6a:	f103 0310 	add.w	r3, r3, #16
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	b29c      	uxth	r4, r3
 8001b72:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001b76:	3b10      	subs	r3, #16
 8001b78:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8001b7c:	f102 020c 	add.w	r2, r2, #12
 8001b80:	6812      	ldr	r2, [r2, #0]
 8001b82:	0091      	lsls	r1, r2, #2
 8001b84:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8001b88:	f102 0208 	add.w	r2, r2, #8
 8001b8c:	6812      	ldr	r2, [r2, #0]
 8001b8e:	440a      	add	r2, r1
 8001b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	461a      	mov	r2, r3
 8001b98:	4621      	mov	r1, r4
 8001b9a:	f001 f84f 	bl	8002c3c <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8001b9e:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8001ba2:	f103 0308 	add.w	r3, r3, #8
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8001bae:	f102 0208 	add.w	r2, r2, #8
 8001bb2:	6013      	str	r3, [r2, #0]
 8001bb4:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8001bb8:	f103 0308 	add.w	r3, r3, #8
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	ddae      	ble.n	8001b20 <letter_select+0x17d4>
	for (int i=0; i<10; i++) {
 8001bc2:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8001bc6:	f103 030c 	add.w	r3, r3, #12
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8001bd2:	f102 020c 	add.w	r2, r2, #12
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8001bdc:	f103 030c 	add.w	r3, r3, #12
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2b09      	cmp	r3, #9
 8001be4:	dd95      	ble.n	8001b12 <letter_select+0x17c6>
		}
	}
	break;
 8001be6:	e14a      	b.n	8001e7e <letter_select+0x1b32>


	case 'Y':
	for (int i=0; i<10; i++) {
 8001be8:	2300      	movs	r3, #0
 8001bea:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8001bee:	f102 0204 	add.w	r2, r2, #4
 8001bf2:	6013      	str	r3, [r2, #0]
 8001bf4:	e058      	b.n	8001ca8 <letter_select+0x195c>
		for (int j=0; j<5; j++) {
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	e043      	b.n	8001c88 <letter_select+0x193c>

			int x_pos = j + x;
 8001c00:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8001c04:	f102 020c 	add.w	r2, r2, #12
 8001c08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c0c:	3b1c      	subs	r3, #28
 8001c0e:	f507 5190 	add.w	r1, r7, #4608	; 0x1200
 8001c12:	6809      	ldr	r1, [r1, #0]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	440b      	add	r3, r1
 8001c18:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001c1a:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8001c1e:	f103 0308 	add.w	r3, r3, #8
 8001c22:	f107 0208 	add.w	r2, r7, #8
 8001c26:	f507 5190 	add.w	r1, r7, #4608	; 0x1200
 8001c2a:	f101 0104 	add.w	r1, r1, #4
 8001c2e:	6809      	ldr	r1, [r1, #0]
 8001c30:	6812      	ldr	r2, [r2, #0]
 8001c32:	440a      	add	r2, r1
 8001c34:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_Y[i][j]);
 8001c36:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8001c3a:	f103 030c 	add.w	r3, r3, #12
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	b298      	uxth	r0, r3
 8001c42:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8001c46:	f103 0308 	add.w	r3, r3, #8
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	b29c      	uxth	r4, r3
 8001c4e:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 8001c52:	3a18      	subs	r2, #24
 8001c54:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8001c58:	f103 0304 	add.w	r3, r3, #4
 8001c5c:	6819      	ldr	r1, [r3, #0]
 8001c5e:	460b      	mov	r3, r1
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	440b      	add	r3, r1
 8001c64:	f507 5190 	add.w	r1, r7, #4608	; 0x1200
 8001c68:	6809      	ldr	r1, [r1, #0]
 8001c6a:	440b      	add	r3, r1
 8001c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	461a      	mov	r2, r3
 8001c74:	4621      	mov	r1, r4
 8001c76:	f000 ffe1 	bl	8002c3c <UB_VGA_SetPixel>
		for (int j=0; j<5; j++) {
 8001c7a:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	3301      	adds	r3, #1
 8001c82:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	ddb6      	ble.n	8001c00 <letter_select+0x18b4>
	for (int i=0; i<10; i++) {
 8001c92:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8001c96:	f103 0304 	add.w	r3, r3, #4
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8001ca2:	f102 0204 	add.w	r2, r2, #4
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8001cac:	f103 0304 	add.w	r3, r3, #4
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2b09      	cmp	r3, #9
 8001cb4:	dd9f      	ble.n	8001bf6 <letter_select+0x18aa>
		}
	}
	break;
 8001cb6:	e0e2      	b.n	8001e7e <letter_select+0x1b32>


	case 'Z':
	for (int i=0; i<10; i++) {
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8001cbe:	f102 021c 	add.w	r2, r2, #28
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	e05e      	b.n	8001d84 <letter_select+0x1a38>
		for (int j=0; j<4; j++) {
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8001ccc:	f102 0218 	add.w	r2, r2, #24
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	e045      	b.n	8001d60 <letter_select+0x1a14>

			int x_pos = j + x;
 8001cd4:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8001cd8:	f102 0204 	add.w	r2, r2, #4
 8001cdc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ce0:	3b1c      	subs	r3, #28
 8001ce2:	f507 518f 	add.w	r1, r7, #4576	; 0x11e0
 8001ce6:	f101 0118 	add.w	r1, r1, #24
 8001cea:	6809      	ldr	r1, [r1, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	440b      	add	r3, r1
 8001cf0:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001cf2:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8001cf6:	f107 0208 	add.w	r2, r7, #8
 8001cfa:	f507 518f 	add.w	r1, r7, #4576	; 0x11e0
 8001cfe:	f101 011c 	add.w	r1, r1, #28
 8001d02:	6809      	ldr	r1, [r1, #0]
 8001d04:	6812      	ldr	r2, [r2, #0]
 8001d06:	440a      	add	r2, r1
 8001d08:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_Z[i][j]);
 8001d0a:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8001d0e:	f103 0304 	add.w	r3, r3, #4
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	b298      	uxth	r0, r3
 8001d16:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	b29c      	uxth	r4, r3
 8001d1e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001d22:	3b18      	subs	r3, #24
 8001d24:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8001d28:	f102 021c 	add.w	r2, r2, #28
 8001d2c:	6812      	ldr	r2, [r2, #0]
 8001d2e:	0091      	lsls	r1, r2, #2
 8001d30:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8001d34:	f102 0218 	add.w	r2, r2, #24
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	440a      	add	r2, r1
 8001d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	461a      	mov	r2, r3
 8001d44:	4621      	mov	r1, r4
 8001d46:	f000 ff79 	bl	8002c3c <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8001d4a:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8001d4e:	f103 0318 	add.w	r3, r3, #24
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	3301      	adds	r3, #1
 8001d56:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8001d5a:	f102 0218 	add.w	r2, r2, #24
 8001d5e:	6013      	str	r3, [r2, #0]
 8001d60:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8001d64:	f103 0318 	add.w	r3, r3, #24
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2b03      	cmp	r3, #3
 8001d6c:	ddb2      	ble.n	8001cd4 <letter_select+0x1988>
	for (int i=0; i<10; i++) {
 8001d6e:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8001d72:	f103 031c 	add.w	r3, r3, #28
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8001d7e:	f102 021c 	add.w	r2, r2, #28
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8001d88:	f103 031c 	add.w	r3, r3, #28
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b09      	cmp	r3, #9
 8001d90:	dd99      	ble.n	8001cc6 <letter_select+0x197a>
		}
	}
	break;
 8001d92:	e074      	b.n	8001e7e <letter_select+0x1b32>


	case ' ':
	for (int i=0; i<10; i++) {
 8001d94:	2300      	movs	r3, #0
 8001d96:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8001d9a:	f102 0214 	add.w	r2, r2, #20
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	e062      	b.n	8001e68 <letter_select+0x1b1c>
		for (int j=0; j<4; j++) {
 8001da2:	2300      	movs	r3, #0
 8001da4:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8001da8:	f102 0210 	add.w	r2, r2, #16
 8001dac:	6013      	str	r3, [r2, #0]
 8001dae:	e049      	b.n	8001e44 <letter_select+0x1af8>

			int x_pos = j + x;
 8001db0:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8001db4:	f102 021c 	add.w	r2, r2, #28
 8001db8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dbc:	3b1c      	subs	r3, #28
 8001dbe:	f507 518f 	add.w	r1, r7, #4576	; 0x11e0
 8001dc2:	f101 0110 	add.w	r1, r1, #16
 8001dc6:	6809      	ldr	r1, [r1, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	440b      	add	r3, r1
 8001dcc:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001dce:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001dd2:	f103 0318 	add.w	r3, r3, #24
 8001dd6:	f107 0208 	add.w	r2, r7, #8
 8001dda:	f507 518f 	add.w	r1, r7, #4576	; 0x11e0
 8001dde:	f101 0114 	add.w	r1, r1, #20
 8001de2:	6809      	ldr	r1, [r1, #0]
 8001de4:	6812      	ldr	r2, [r2, #0]
 8001de6:	440a      	add	r2, r1
 8001de8:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, spatie[i][j]);
 8001dea:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001dee:	f103 031c 	add.w	r3, r3, #28
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	b298      	uxth	r0, r3
 8001df6:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001dfa:	f103 0318 	add.w	r3, r3, #24
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	b29c      	uxth	r4, r3
 8001e02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e06:	3b18      	subs	r3, #24
 8001e08:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8001e0c:	f102 0214 	add.w	r2, r2, #20
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	0091      	lsls	r1, r2, #2
 8001e14:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8001e18:	f102 0210 	add.w	r2, r2, #16
 8001e1c:	6812      	ldr	r2, [r2, #0]
 8001e1e:	440a      	add	r2, r1
 8001e20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	461a      	mov	r2, r3
 8001e28:	4621      	mov	r1, r4
 8001e2a:	f000 ff07 	bl	8002c3c <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8001e2e:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8001e32:	f103 0310 	add.w	r3, r3, #16
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8001e3e:	f102 0210 	add.w	r2, r2, #16
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8001e48:	f103 0310 	add.w	r3, r3, #16
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	ddae      	ble.n	8001db0 <letter_select+0x1a64>
	for (int i=0; i<10; i++) {
 8001e52:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8001e56:	f103 0314 	add.w	r3, r3, #20
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8001e62:	f102 0214 	add.w	r2, r2, #20
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8001e6c:	f103 0314 	add.w	r3, r3, #20
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b09      	cmp	r3, #9
 8001e74:	dd95      	ble.n	8001da2 <letter_select+0x1a56>
		}
	}
	break;
 8001e76:	e002      	b.n	8001e7e <letter_select+0x1b32>


	default:
		UB_VGA_FillScreen(VGA_COL_RED);
 8001e78:	20e0      	movs	r0, #224	; 0xe0
 8001e7a:	f000 febd 	bl	8002bf8 <UB_VGA_FillScreen>
	}




}
 8001e7e:	bf00      	nop
 8001e80:	f507 5796 	add.w	r7, r7, #4800	; 0x12c0
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd90      	pop	{r4, r7, pc}
 8001e8a:	bf00      	nop

08001e8c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8001e94:	2300      	movs	r3, #0
 8001e96:	73fb      	strb	r3, [r7, #15]
 8001e98:	2300      	movs	r3, #0
 8001e9a:	73bb      	strb	r3, [r7, #14]
 8001e9c:	230f      	movs	r3, #15
 8001e9e:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	78db      	ldrb	r3, [r3, #3]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d039      	beq.n	8001f1c <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001ea8:	4b27      	ldr	r3, [pc, #156]	; (8001f48 <NVIC_Init+0xbc>)
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	0a1b      	lsrs	r3, r3, #8
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
 8001eba:	f1c3 0304 	rsb	r3, r3, #4
 8001ebe:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8001ec0:	7b7a      	ldrb	r2, [r7, #13]
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
 8001ec4:	fa42 f303 	asr.w	r3, r2, r3
 8001ec8:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	785b      	ldrb	r3, [r3, #1]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	7bbb      	ldrb	r3, [r7, #14]
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	789a      	ldrb	r2, [r3, #2]
 8001edc:	7b7b      	ldrb	r3, [r7, #13]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	7bfb      	ldrb	r3, [r7, #15]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8001ee8:	7bfb      	ldrb	r3, [r7, #15]
 8001eea:	011b      	lsls	r3, r3, #4
 8001eec:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001eee:	4a17      	ldr	r2, [pc, #92]	; (8001f4c <NVIC_Init+0xc0>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	4413      	add	r3, r2
 8001ef6:	7bfa      	ldrb	r2, [r7, #15]
 8001ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001efc:	4a13      	ldr	r2, [pc, #76]	; (8001f4c <NVIC_Init+0xc0>)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	095b      	lsrs	r3, r3, #5
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	f003 031f 	and.w	r3, r3, #31
 8001f10:	2101      	movs	r1, #1
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001f16:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001f1a:	e00f      	b.n	8001f3c <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001f1c:	490b      	ldr	r1, [pc, #44]	; (8001f4c <NVIC_Init+0xc0>)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	095b      	lsrs	r3, r3, #5
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	f003 031f 	and.w	r3, r3, #31
 8001f30:	2201      	movs	r2, #1
 8001f32:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001f34:	f100 0320 	add.w	r3, r0, #32
 8001f38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	e000ed00 	.word	0xe000ed00
 8001f4c:	e000e100 	.word	0xe000e100

08001f50 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f023 0201 	bic.w	r2, r3, #1
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2200      	movs	r2, #0
 8001f74:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2221      	movs	r2, #33	; 0x21
 8001f86:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a46      	ldr	r2, [pc, #280]	; (80020a4 <DMA_DeInit+0x154>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d103      	bne.n	8001f98 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8001f90:	4b45      	ldr	r3, [pc, #276]	; (80020a8 <DMA_DeInit+0x158>)
 8001f92:	223d      	movs	r2, #61	; 0x3d
 8001f94:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001f96:	e07e      	b.n	8002096 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4a44      	ldr	r2, [pc, #272]	; (80020ac <DMA_DeInit+0x15c>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d104      	bne.n	8001faa <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8001fa0:	4b41      	ldr	r3, [pc, #260]	; (80020a8 <DMA_DeInit+0x158>)
 8001fa2:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8001fa6:	609a      	str	r2, [r3, #8]
}
 8001fa8:	e075      	b.n	8002096 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a40      	ldr	r2, [pc, #256]	; (80020b0 <DMA_DeInit+0x160>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d104      	bne.n	8001fbc <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8001fb2:	4b3d      	ldr	r3, [pc, #244]	; (80020a8 <DMA_DeInit+0x158>)
 8001fb4:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8001fb8:	609a      	str	r2, [r3, #8]
}
 8001fba:	e06c      	b.n	8002096 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a3d      	ldr	r2, [pc, #244]	; (80020b4 <DMA_DeInit+0x164>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d104      	bne.n	8001fce <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8001fc4:	4b38      	ldr	r3, [pc, #224]	; (80020a8 <DMA_DeInit+0x158>)
 8001fc6:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8001fca:	609a      	str	r2, [r3, #8]
}
 8001fcc:	e063      	b.n	8002096 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a39      	ldr	r2, [pc, #228]	; (80020b8 <DMA_DeInit+0x168>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d103      	bne.n	8001fde <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8001fd6:	4b34      	ldr	r3, [pc, #208]	; (80020a8 <DMA_DeInit+0x158>)
 8001fd8:	4a38      	ldr	r2, [pc, #224]	; (80020bc <DMA_DeInit+0x16c>)
 8001fda:	60da      	str	r2, [r3, #12]
}
 8001fdc:	e05b      	b.n	8002096 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a37      	ldr	r2, [pc, #220]	; (80020c0 <DMA_DeInit+0x170>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d103      	bne.n	8001fee <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8001fe6:	4b30      	ldr	r3, [pc, #192]	; (80020a8 <DMA_DeInit+0x158>)
 8001fe8:	4a36      	ldr	r2, [pc, #216]	; (80020c4 <DMA_DeInit+0x174>)
 8001fea:	60da      	str	r2, [r3, #12]
}
 8001fec:	e053      	b.n	8002096 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a35      	ldr	r2, [pc, #212]	; (80020c8 <DMA_DeInit+0x178>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d103      	bne.n	8001ffe <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8001ff6:	4b2c      	ldr	r3, [pc, #176]	; (80020a8 <DMA_DeInit+0x158>)
 8001ff8:	4a34      	ldr	r2, [pc, #208]	; (80020cc <DMA_DeInit+0x17c>)
 8001ffa:	60da      	str	r2, [r3, #12]
}
 8001ffc:	e04b      	b.n	8002096 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a33      	ldr	r2, [pc, #204]	; (80020d0 <DMA_DeInit+0x180>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d104      	bne.n	8002010 <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8002006:	4b28      	ldr	r3, [pc, #160]	; (80020a8 <DMA_DeInit+0x158>)
 8002008:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 800200c:	60da      	str	r2, [r3, #12]
}
 800200e:	e042      	b.n	8002096 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a30      	ldr	r2, [pc, #192]	; (80020d4 <DMA_DeInit+0x184>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d103      	bne.n	8002020 <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8002018:	4b2f      	ldr	r3, [pc, #188]	; (80020d8 <DMA_DeInit+0x188>)
 800201a:	223d      	movs	r2, #61	; 0x3d
 800201c:	609a      	str	r2, [r3, #8]
}
 800201e:	e03a      	b.n	8002096 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4a2e      	ldr	r2, [pc, #184]	; (80020dc <DMA_DeInit+0x18c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d104      	bne.n	8002032 <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8002028:	4b2b      	ldr	r3, [pc, #172]	; (80020d8 <DMA_DeInit+0x188>)
 800202a:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800202e:	609a      	str	r2, [r3, #8]
}
 8002030:	e031      	b.n	8002096 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a2a      	ldr	r2, [pc, #168]	; (80020e0 <DMA_DeInit+0x190>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d104      	bne.n	8002044 <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 800203a:	4b27      	ldr	r3, [pc, #156]	; (80020d8 <DMA_DeInit+0x188>)
 800203c:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8002040:	609a      	str	r2, [r3, #8]
}
 8002042:	e028      	b.n	8002096 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a27      	ldr	r2, [pc, #156]	; (80020e4 <DMA_DeInit+0x194>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d104      	bne.n	8002056 <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 800204c:	4b22      	ldr	r3, [pc, #136]	; (80020d8 <DMA_DeInit+0x188>)
 800204e:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8002052:	609a      	str	r2, [r3, #8]
}
 8002054:	e01f      	b.n	8002096 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a23      	ldr	r2, [pc, #140]	; (80020e8 <DMA_DeInit+0x198>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d103      	bne.n	8002066 <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 800205e:	4b1e      	ldr	r3, [pc, #120]	; (80020d8 <DMA_DeInit+0x188>)
 8002060:	4a16      	ldr	r2, [pc, #88]	; (80020bc <DMA_DeInit+0x16c>)
 8002062:	60da      	str	r2, [r3, #12]
}
 8002064:	e017      	b.n	8002096 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a20      	ldr	r2, [pc, #128]	; (80020ec <DMA_DeInit+0x19c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d103      	bne.n	8002076 <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 800206e:	4b1a      	ldr	r3, [pc, #104]	; (80020d8 <DMA_DeInit+0x188>)
 8002070:	4a14      	ldr	r2, [pc, #80]	; (80020c4 <DMA_DeInit+0x174>)
 8002072:	60da      	str	r2, [r3, #12]
}
 8002074:	e00f      	b.n	8002096 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a1d      	ldr	r2, [pc, #116]	; (80020f0 <DMA_DeInit+0x1a0>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d103      	bne.n	8002086 <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 800207e:	4b16      	ldr	r3, [pc, #88]	; (80020d8 <DMA_DeInit+0x188>)
 8002080:	4a12      	ldr	r2, [pc, #72]	; (80020cc <DMA_DeInit+0x17c>)
 8002082:	60da      	str	r2, [r3, #12]
}
 8002084:	e007      	b.n	8002096 <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a1a      	ldr	r2, [pc, #104]	; (80020f4 <DMA_DeInit+0x1a4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d103      	bne.n	8002096 <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 800208e:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <DMA_DeInit+0x188>)
 8002090:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8002094:	60da      	str	r2, [r3, #12]
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40026010 	.word	0x40026010
 80020a8:	40026000 	.word	0x40026000
 80020ac:	40026028 	.word	0x40026028
 80020b0:	40026040 	.word	0x40026040
 80020b4:	40026058 	.word	0x40026058
 80020b8:	40026070 	.word	0x40026070
 80020bc:	2000003d 	.word	0x2000003d
 80020c0:	40026088 	.word	0x40026088
 80020c4:	20000f40 	.word	0x20000f40
 80020c8:	400260a0 	.word	0x400260a0
 80020cc:	203d0000 	.word	0x203d0000
 80020d0:	400260b8 	.word	0x400260b8
 80020d4:	40026410 	.word	0x40026410
 80020d8:	40026400 	.word	0x40026400
 80020dc:	40026428 	.word	0x40026428
 80020e0:	40026440 	.word	0x40026440
 80020e4:	40026458 	.word	0x40026458
 80020e8:	40026470 	.word	0x40026470
 80020ec:	40026488 	.word	0x40026488
 80020f0:	400264a0 	.word	0x400264a0
 80020f4:	400264b8 	.word	0x400264b8

080020f8 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <DMA_Init+0xac>)
 8002110:	4013      	ands	r3, r2
 8002112:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002122:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800212e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	6a1b      	ldr	r3, [r3, #32]
 8002134:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800213a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002140:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002146:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800214c:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	4313      	orrs	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f023 0307 	bic.w	r3, r3, #7
 8002166:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002170:	4313      	orrs	r3, r2
 8002172:	68fa      	ldr	r2, [r7, #12]
 8002174:	4313      	orrs	r3, r2
 8002176:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68fa      	ldr	r2, [r7, #12]
 800217c:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	691a      	ldr	r2, [r3, #16]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	60da      	str	r2, [r3, #12]
}
 8002196:	bf00      	nop
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	f01c803f 	.word	0xf01c803f

080021a8 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	460b      	mov	r3, r1
 80021b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d006      	beq.n	80021c8 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f043 0201 	orr.w	r2, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80021c6:	e005      	b.n	80021d4 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f023 0201 	bic.w	r2, r3, #1
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	601a      	str	r2, [r3, #0]
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	4613      	mov	r3, r2
 80021ec:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00f      	beq.n	8002218 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 80021f8:	79fb      	ldrb	r3, [r7, #7]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d006      	beq.n	800220c <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	615a      	str	r2, [r3, #20]
 800220a:	e005      	b.n	8002218 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b80      	cmp	r3, #128	; 0x80
 800221c:	d014      	beq.n	8002248 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 800221e:	79fb      	ldrb	r3, [r7, #7]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d008      	beq.n	8002236 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	f003 031e 	and.w	r3, r3, #30
 800222e:	431a      	orrs	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8002234:	e008      	b.n	8002248 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	f003 031e 	and.w	r3, r3, #30
 8002240:	43db      	mvns	r3, r3
 8002242:	401a      	ands	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	601a      	str	r2, [r3, #0]
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8002254:	b480      	push	{r7}
 8002256:	b087      	sub	sp, #28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800225e:	2300      	movs	r3, #0
 8002260:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	2300      	movs	r3, #0
 8002268:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a22      	ldr	r2, [pc, #136]	; (80022f8 <DMA_GetITStatus+0xa4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d802      	bhi.n	8002278 <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002272:	4b22      	ldr	r3, [pc, #136]	; (80022fc <DMA_GetITStatus+0xa8>)
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	e001      	b.n	800227c <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002278:	4b21      	ldr	r3, [pc, #132]	; (8002300 <DMA_GetITStatus+0xac>)
 800227a:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002282:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00a      	beq.n	80022a0 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	0adb      	lsrs	r3, r3, #11
 800228e:	f003 031e 	and.w	r3, r3, #30
 8002292:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	4013      	ands	r3, r2
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	e004      	b.n	80022aa <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	695b      	ldr	r3, [r3, #20]
 80022a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022a8:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	e002      	b.n	80022c2 <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80022c8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80022cc:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <DMA_GetITStatus+0x90>
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 80022de:	2301      	movs	r3, #1
 80022e0:	75fb      	strb	r3, [r7, #23]
 80022e2:	e001      	b.n	80022e8 <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 80022e4:	2300      	movs	r3, #0
 80022e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 80022e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	371c      	adds	r7, #28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	4002640f 	.word	0x4002640f
 80022fc:	40026000 	.word	0x40026000
 8002300:	40026400 	.word	0x40026400

08002304 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a10      	ldr	r2, [pc, #64]	; (8002354 <DMA_ClearITPendingBit+0x50>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d802      	bhi.n	800231c <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002316:	4b10      	ldr	r3, [pc, #64]	; (8002358 <DMA_ClearITPendingBit+0x54>)
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	e001      	b.n	8002320 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800231c:	4b0f      	ldr	r3, [pc, #60]	; (800235c <DMA_ClearITPendingBit+0x58>)
 800231e:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d007      	beq.n	800233a <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002330:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 8002338:	e006      	b.n	8002348 <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002340:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	6093      	str	r3, [r2, #8]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	4002640f 	.word	0x4002640f
 8002358:	40026000 	.word	0x40026000
 800235c:	40026400 	.word	0x40026400

08002360 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8002360:	b480      	push	{r7}
 8002362:	b087      	sub	sp, #28
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	2300      	movs	r3, #0
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	e076      	b.n	800246a <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800237c:	2201      	movs	r2, #1
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4013      	ands	r3, r2
 800238e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	429a      	cmp	r2, r3
 8002396:	d165      	bne.n	8002464 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	2103      	movs	r1, #3
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	401a      	ands	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	791b      	ldrb	r3, [r3, #4]
 80023b6:	4619      	mov	r1, r3
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	fa01 f303 	lsl.w	r3, r1, r3
 80023c0:	431a      	orrs	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	791b      	ldrb	r3, [r3, #4]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d003      	beq.n	80023d6 <GPIO_Init+0x76>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	791b      	ldrb	r3, [r3, #4]
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d12e      	bne.n	8002434 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	005b      	lsls	r3, r3, #1
 80023de:	2103      	movs	r1, #3
 80023e0:	fa01 f303 	lsl.w	r3, r1, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	401a      	ands	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	795b      	ldrb	r3, [r3, #5]
 80023f4:	4619      	mov	r1, r3
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	fa01 f303 	lsl.w	r3, r1, r3
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	b29b      	uxth	r3, r3
 800240c:	4619      	mov	r1, r3
 800240e:	2301      	movs	r3, #1
 8002410:	408b      	lsls	r3, r1
 8002412:	43db      	mvns	r3, r3
 8002414:	401a      	ands	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	7992      	ldrb	r2, [r2, #6]
 8002422:	4611      	mov	r1, r2
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	b292      	uxth	r2, r2
 8002428:	fa01 f202 	lsl.w	r2, r1, r2
 800242c:	b292      	uxth	r2, r2
 800242e:	431a      	orrs	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68da      	ldr	r2, [r3, #12]
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	b29b      	uxth	r3, r3
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	2103      	movs	r1, #3
 8002440:	fa01 f303 	lsl.w	r3, r1, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	401a      	ands	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	79db      	ldrb	r3, [r3, #7]
 8002454:	4619      	mov	r1, r3
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	fa01 f303 	lsl.w	r3, r1, r3
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	3301      	adds	r3, #1
 8002468:	617b      	str	r3, [r7, #20]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	2b0f      	cmp	r3, #15
 800246e:	d985      	bls.n	800237c <GPIO_Init+0x1c>
    }
  }
}
 8002470:	bf00      	nop
 8002472:	371c      	adds	r7, #28
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	460b      	mov	r3, r1
 8002486:	807b      	strh	r3, [r7, #2]
 8002488:	4613      	mov	r3, r2
 800248a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800248c:	2300      	movs	r3, #0
 800248e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8002490:	2300      	movs	r3, #0
 8002492:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8002494:	787a      	ldrb	r2, [r7, #1]
 8002496:	887b      	ldrh	r3, [r7, #2]
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80024a4:	887b      	ldrh	r3, [r7, #2]
 80024a6:	08db      	lsrs	r3, r3, #3
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	4618      	mov	r0, r3
 80024ac:	887b      	ldrh	r3, [r7, #2]
 80024ae:	08db      	lsrs	r3, r3, #3
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	461a      	mov	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3208      	adds	r2, #8
 80024b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80024bc:	887b      	ldrh	r3, [r7, #2]
 80024be:	f003 0307 	and.w	r3, r3, #7
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	210f      	movs	r1, #15
 80024c6:	fa01 f303 	lsl.w	r3, r1, r3
 80024ca:	43db      	mvns	r3, r3
 80024cc:	ea02 0103 	and.w	r1, r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f100 0208 	add.w	r2, r0, #8
 80024d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80024da:	887b      	ldrh	r3, [r7, #2]
 80024dc:	08db      	lsrs	r3, r3, #3
 80024de:	b29b      	uxth	r3, r3
 80024e0:	461a      	mov	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3208      	adds	r2, #8
 80024e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80024f0:	887b      	ldrh	r3, [r7, #2]
 80024f2:	08db      	lsrs	r3, r3, #3
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	461a      	mov	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3208      	adds	r2, #8
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002502:	bf00      	nop
 8002504:	3714      	adds	r7, #20
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
	...

08002510 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800251c:	78fb      	ldrb	r3, [r7, #3]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d006      	beq.n	8002530 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8002522:	490a      	ldr	r1, [pc, #40]	; (800254c <RCC_AHB1PeriphClockCmd+0x3c>)
 8002524:	4b09      	ldr	r3, [pc, #36]	; (800254c <RCC_AHB1PeriphClockCmd+0x3c>)
 8002526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4313      	orrs	r3, r2
 800252c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800252e:	e006      	b.n	800253e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8002530:	4906      	ldr	r1, [pc, #24]	; (800254c <RCC_AHB1PeriphClockCmd+0x3c>)
 8002532:	4b06      	ldr	r3, [pc, #24]	; (800254c <RCC_AHB1PeriphClockCmd+0x3c>)
 8002534:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	43db      	mvns	r3, r3
 800253a:	4013      	ands	r3, r2
 800253c:	630b      	str	r3, [r1, #48]	; 0x30
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	40023800 	.word	0x40023800

08002550 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d006      	beq.n	8002570 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8002562:	490a      	ldr	r1, [pc, #40]	; (800258c <RCC_APB1PeriphClockCmd+0x3c>)
 8002564:	4b09      	ldr	r3, [pc, #36]	; (800258c <RCC_APB1PeriphClockCmd+0x3c>)
 8002566:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4313      	orrs	r3, r2
 800256c:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800256e:	e006      	b.n	800257e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8002570:	4906      	ldr	r1, [pc, #24]	; (800258c <RCC_APB1PeriphClockCmd+0x3c>)
 8002572:	4b06      	ldr	r3, [pc, #24]	; (800258c <RCC_APB1PeriphClockCmd+0x3c>)
 8002574:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	43db      	mvns	r3, r3
 800257a:	4013      	ands	r3, r2
 800257c:	640b      	str	r3, [r1, #64]	; 0x40
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40023800 	.word	0x40023800

08002590 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	460b      	mov	r3, r1
 800259a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800259c:	78fb      	ldrb	r3, [r7, #3]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d006      	beq.n	80025b0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80025a2:	490a      	ldr	r1, [pc, #40]	; (80025cc <RCC_APB2PeriphClockCmd+0x3c>)
 80025a4:	4b09      	ldr	r3, [pc, #36]	; (80025cc <RCC_APB2PeriphClockCmd+0x3c>)
 80025a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80025ae:	e006      	b.n	80025be <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80025b0:	4906      	ldr	r1, [pc, #24]	; (80025cc <RCC_APB2PeriphClockCmd+0x3c>)
 80025b2:	4b06      	ldr	r3, [pc, #24]	; (80025cc <RCC_APB2PeriphClockCmd+0x3c>)
 80025b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	43db      	mvns	r3, r3
 80025ba:	4013      	ands	r3, r2
 80025bc:	644b      	str	r3, [r1, #68]	; 0x44
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800

080025d0 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80025da:	2300      	movs	r3, #0
 80025dc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a29      	ldr	r2, [pc, #164]	; (800268c <TIM_TimeBaseInit+0xbc>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d013      	beq.n	8002614 <TIM_TimeBaseInit+0x44>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a28      	ldr	r2, [pc, #160]	; (8002690 <TIM_TimeBaseInit+0xc0>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d00f      	beq.n	8002614 <TIM_TimeBaseInit+0x44>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025fa:	d00b      	beq.n	8002614 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a25      	ldr	r2, [pc, #148]	; (8002694 <TIM_TimeBaseInit+0xc4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d007      	beq.n	8002614 <TIM_TimeBaseInit+0x44>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a24      	ldr	r2, [pc, #144]	; (8002698 <TIM_TimeBaseInit+0xc8>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d003      	beq.n	8002614 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a23      	ldr	r2, [pc, #140]	; (800269c <TIM_TimeBaseInit+0xcc>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d108      	bne.n	8002626 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8002614:	89fb      	ldrh	r3, [r7, #14]
 8002616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800261a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	885a      	ldrh	r2, [r3, #2]
 8002620:	89fb      	ldrh	r3, [r7, #14]
 8002622:	4313      	orrs	r3, r2
 8002624:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a1d      	ldr	r2, [pc, #116]	; (80026a0 <TIM_TimeBaseInit+0xd0>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d00c      	beq.n	8002648 <TIM_TimeBaseInit+0x78>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a1c      	ldr	r2, [pc, #112]	; (80026a4 <TIM_TimeBaseInit+0xd4>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d008      	beq.n	8002648 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8002636:	89fb      	ldrh	r3, [r7, #14]
 8002638:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800263c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	891a      	ldrh	r2, [r3, #8]
 8002642:	89fb      	ldrh	r3, [r7, #14]
 8002644:	4313      	orrs	r3, r2
 8002646:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	89fa      	ldrh	r2, [r7, #14]
 800264c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	881a      	ldrh	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a0a      	ldr	r2, [pc, #40]	; (800268c <TIM_TimeBaseInit+0xbc>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d003      	beq.n	800266e <TIM_TimeBaseInit+0x9e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a09      	ldr	r2, [pc, #36]	; (8002690 <TIM_TimeBaseInit+0xc0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d104      	bne.n	8002678 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	7a9b      	ldrb	r3, [r3, #10]
 8002672:	b29a      	uxth	r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	829a      	strh	r2, [r3, #20]
}
 800267e:	bf00      	nop
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	40010000 	.word	0x40010000
 8002690:	40010400 	.word	0x40010400
 8002694:	40000400 	.word	0x40000400
 8002698:	40000800 	.word	0x40000800
 800269c:	40000c00 	.word	0x40000c00
 80026a0:	40001000 	.word	0x40001000
 80026a4:	40001400 	.word	0x40001400

080026a8 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d008      	beq.n	80026cc <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	881b      	ldrh	r3, [r3, #0]
 80026be:	b29b      	uxth	r3, r3
 80026c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 80026ca:	e007      	b.n	80026dc <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	801a      	strh	r2, [r3, #0]
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80026f4:	78fb      	ldrb	r3, [r7, #3]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d008      	beq.n	800270c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 800270a:	e007      	b.n	800271c <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	881b      	ldrh	r3, [r3, #0]
 8002710:	b29b      	uxth	r3, r3
 8002712:	f023 0301 	bic.w	r3, r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	801a      	strh	r2, [r3, #0]
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002728:	b480      	push	{r7}
 800272a:	b085      	sub	sp, #20
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8002732:	2300      	movs	r3, #0
 8002734:	817b      	strh	r3, [r7, #10]
 8002736:	2300      	movs	r3, #0
 8002738:	81fb      	strh	r3, [r7, #14]
 800273a:	2300      	movs	r3, #0
 800273c:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	8c1b      	ldrh	r3, [r3, #32]
 8002742:	b29b      	uxth	r3, r3
 8002744:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002748:	b29a      	uxth	r2, r3
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	8c1b      	ldrh	r3, [r3, #32]
 8002752:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	889b      	ldrh	r3, [r3, #4]
 8002758:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	8b9b      	ldrh	r3, [r3, #28]
 800275e:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8002760:	897b      	ldrh	r3, [r7, #10]
 8002762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002766:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8002768:	897b      	ldrh	r3, [r7, #10]
 800276a:	f023 0303 	bic.w	r3, r3, #3
 800276e:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	881a      	ldrh	r2, [r3, #0]
 8002774:	897b      	ldrh	r3, [r7, #10]
 8002776:	4313      	orrs	r3, r2
 8002778:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800277a:	89fb      	ldrh	r3, [r7, #14]
 800277c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002780:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	899b      	ldrh	r3, [r3, #12]
 8002786:	021b      	lsls	r3, r3, #8
 8002788:	b29a      	uxth	r2, r3
 800278a:	89fb      	ldrh	r3, [r7, #14]
 800278c:	4313      	orrs	r3, r2
 800278e:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	885b      	ldrh	r3, [r3, #2]
 8002794:	021b      	lsls	r3, r3, #8
 8002796:	b29a      	uxth	r2, r3
 8002798:	89fb      	ldrh	r3, [r7, #14]
 800279a:	4313      	orrs	r3, r2
 800279c:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a22      	ldr	r2, [pc, #136]	; (800282c <TIM_OC3Init+0x104>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d003      	beq.n	80027ae <TIM_OC3Init+0x86>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a21      	ldr	r2, [pc, #132]	; (8002830 <TIM_OC3Init+0x108>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d12b      	bne.n	8002806 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80027ae:	89fb      	ldrh	r3, [r7, #14]
 80027b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027b4:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	89db      	ldrh	r3, [r3, #14]
 80027ba:	021b      	lsls	r3, r3, #8
 80027bc:	b29a      	uxth	r2, r3
 80027be:	89fb      	ldrh	r3, [r7, #14]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 80027c4:	89fb      	ldrh	r3, [r7, #14]
 80027c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027ca:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	889b      	ldrh	r3, [r3, #4]
 80027d0:	021b      	lsls	r3, r3, #8
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	89fb      	ldrh	r3, [r7, #14]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 80027da:	89bb      	ldrh	r3, [r7, #12]
 80027dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027e0:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80027e2:	89bb      	ldrh	r3, [r7, #12]
 80027e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027e8:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	8a1b      	ldrh	r3, [r3, #16]
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	89bb      	ldrh	r3, [r7, #12]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	8a5b      	ldrh	r3, [r3, #18]
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	b29a      	uxth	r2, r3
 8002800:	89bb      	ldrh	r3, [r7, #12]
 8002802:	4313      	orrs	r3, r2
 8002804:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	89ba      	ldrh	r2, [r7, #12]
 800280a:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	897a      	ldrh	r2, [r7, #10]
 8002810:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	89fa      	ldrh	r2, [r7, #14]
 800281e:	841a      	strh	r2, [r3, #32]
}
 8002820:	bf00      	nop
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr
 800282c:	40010000 	.word	0x40010000
 8002830:	40010400 	.word	0x40010400

08002834 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800283e:	2300      	movs	r3, #0
 8002840:	81bb      	strh	r3, [r7, #12]
 8002842:	2300      	movs	r3, #0
 8002844:	817b      	strh	r3, [r7, #10]
 8002846:	2300      	movs	r3, #0
 8002848:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	8c1b      	ldrh	r3, [r3, #32]
 800284e:	b29b      	uxth	r3, r3
 8002850:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002854:	b29a      	uxth	r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	8c1b      	ldrh	r3, [r3, #32]
 800285e:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	889b      	ldrh	r3, [r3, #4]
 8002864:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	8b9b      	ldrh	r3, [r3, #28]
 800286a:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 800286c:	89bb      	ldrh	r3, [r7, #12]
 800286e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002872:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8002874:	89bb      	ldrh	r3, [r7, #12]
 8002876:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800287a:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	881b      	ldrh	r3, [r3, #0]
 8002880:	021b      	lsls	r3, r3, #8
 8002882:	b29a      	uxth	r2, r3
 8002884:	89bb      	ldrh	r3, [r7, #12]
 8002886:	4313      	orrs	r3, r2
 8002888:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800288a:	897b      	ldrh	r3, [r7, #10]
 800288c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002890:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	899b      	ldrh	r3, [r3, #12]
 8002896:	031b      	lsls	r3, r3, #12
 8002898:	b29a      	uxth	r2, r3
 800289a:	897b      	ldrh	r3, [r7, #10]
 800289c:	4313      	orrs	r3, r2
 800289e:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	885b      	ldrh	r3, [r3, #2]
 80028a4:	031b      	lsls	r3, r3, #12
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	897b      	ldrh	r3, [r7, #10]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a12      	ldr	r2, [pc, #72]	; (80028fc <TIM_OC4Init+0xc8>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d003      	beq.n	80028be <TIM_OC4Init+0x8a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a11      	ldr	r2, [pc, #68]	; (8002900 <TIM_OC4Init+0xcc>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d10a      	bne.n	80028d4 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 80028be:	89fb      	ldrh	r3, [r7, #14]
 80028c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028c4:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	8a1b      	ldrh	r3, [r3, #16]
 80028ca:	019b      	lsls	r3, r3, #6
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	89fb      	ldrh	r3, [r7, #14]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	89fa      	ldrh	r2, [r7, #14]
 80028d8:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	89ba      	ldrh	r2, [r7, #12]
 80028de:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	897a      	ldrh	r2, [r7, #10]
 80028ec:	841a      	strh	r2, [r3, #32]
}
 80028ee:	bf00      	nop
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40010000 	.word	0x40010000
 8002900:	40010400 	.word	0x40010400

08002904 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002910:	2300      	movs	r3, #0
 8002912:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	8b9b      	ldrh	r3, [r3, #28]
 8002918:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 800291a:	89fb      	ldrh	r3, [r7, #14]
 800291c:	f023 0308 	bic.w	r3, r3, #8
 8002920:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8002922:	89fa      	ldrh	r2, [r7, #14]
 8002924:	887b      	ldrh	r3, [r7, #2]
 8002926:	4313      	orrs	r3, r2
 8002928:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	89fa      	ldrh	r2, [r7, #14]
 800292e:	839a      	strh	r2, [r3, #28]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr

0800293c <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	460b      	mov	r3, r1
 8002946:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002948:	2300      	movs	r3, #0
 800294a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	8b9b      	ldrh	r3, [r3, #28]
 8002950:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8002952:	89fb      	ldrh	r3, [r7, #14]
 8002954:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002958:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 800295a:	887b      	ldrh	r3, [r7, #2]
 800295c:	021b      	lsls	r3, r3, #8
 800295e:	b29a      	uxth	r2, r3
 8002960:	89fb      	ldrh	r3, [r7, #14]
 8002962:	4313      	orrs	r3, r2
 8002964:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	89fa      	ldrh	r2, [r7, #14]
 800296a:	839a      	strh	r2, [r3, #28]
}
 800296c:	bf00      	nop
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	460b      	mov	r3, r1
 8002982:	807b      	strh	r3, [r7, #2]
 8002984:	4613      	mov	r3, r2
 8002986:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002988:	787b      	ldrb	r3, [r7, #1]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d008      	beq.n	80029a0 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	899b      	ldrh	r3, [r3, #12]
 8002992:	b29a      	uxth	r2, r3
 8002994:	887b      	ldrh	r3, [r7, #2]
 8002996:	4313      	orrs	r3, r2
 8002998:	b29a      	uxth	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 800299e:	e009      	b.n	80029b4 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	899b      	ldrh	r3, [r3, #12]
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	887b      	ldrh	r3, [r7, #2]
 80029a8:	43db      	mvns	r3, r3
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	4013      	ands	r3, r2
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	819a      	strh	r2, [r3, #12]
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
 80029c8:	460b      	mov	r3, r1
 80029ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80029cc:	887b      	ldrh	r3, [r7, #2]
 80029ce:	43db      	mvns	r3, r3
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	821a      	strh	r2, [r3, #16]
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	460b      	mov	r3, r1
 80029ec:	807b      	strh	r3, [r7, #2]
 80029ee:	4613      	mov	r3, r2
 80029f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80029f2:	787b      	ldrb	r3, [r7, #1]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d008      	beq.n	8002a0a <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	899b      	ldrh	r3, [r3, #12]
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	887b      	ldrh	r3, [r7, #2]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
 8002a08:	e009      	b.n	8002a1e <TIM_DMACmd+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	899b      	ldrh	r3, [r3, #12]
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	887b      	ldrh	r3, [r7, #2]
 8002a12:	43db      	mvns	r3, r3
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	4013      	ands	r3, r2
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	819a      	strh	r2, [r3, #12]
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr

08002a2a <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8002a2a:	b480      	push	{r7}
 8002a2c:	b083      	sub	sp, #12
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
 8002a32:	460b      	mov	r3, r1
 8002a34:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8002a36:	887b      	ldrh	r3, [r7, #2]
 8002a38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a3c:	b29a      	uxth	r2, r3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	809a      	strh	r2, [r3, #4]
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr

08002a4e <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8002a4e:	b480      	push	{r7}
 8002a50:	b085      	sub	sp, #20
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	460b      	mov	r3, r1
 8002a58:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	887b      	ldrh	r3, [r7, #2]
 8002a66:	4013      	ands	r3, r2
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	73fb      	strb	r3, [r7, #15]
 8002a72:	e001      	b.n	8002a78 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8002a74:	2300      	movs	r3, #0
 8002a76:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3714      	adds	r7, #20
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b087      	sub	sp, #28
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	2300      	movs	r3, #0
 8002a98:	617b      	str	r3, [r7, #20]
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8002aa2:	887b      	ldrh	r3, [r7, #2]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	095b      	lsrs	r3, r3, #5
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8002aac:	887b      	ldrh	r3, [r7, #2]
 8002aae:	f003 031f 	and.w	r3, r3, #31
 8002ab2:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d107      	bne.n	8002ad4 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	899b      	ldrh	r3, [r3, #12]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	461a      	mov	r2, r3
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	e011      	b.n	8002af8 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d107      	bne.n	8002aea <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	8a1b      	ldrh	r3, [r3, #16]
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	e006      	b.n	8002af8 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	8a9b      	ldrh	r3, [r3, #20]
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	461a      	mov	r2, r3
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	4013      	ands	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8002af8:	887b      	ldrh	r3, [r7, #2]
 8002afa:	0a1b      	lsrs	r3, r3, #8
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8002b00:	2201      	movs	r2, #1
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	461a      	mov	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	4013      	ands	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d005      	beq.n	8002b2a <USART_GetITStatus+0xa4>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8002b24:	2301      	movs	r3, #1
 8002b26:	74fb      	strb	r3, [r7, #19]
 8002b28:	e001      	b.n	8002b2e <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8002b2e:	7cfb      	ldrb	r3, [r7, #19]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	371c      	adds	r7, #28
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	81fb      	strh	r3, [r7, #14]
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8002b50:	887b      	ldrh	r3, [r7, #2]
 8002b52:	0a1b      	lsrs	r3, r3, #8
 8002b54:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8002b56:	89fb      	ldrh	r3, [r7, #14]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8002b60:	89bb      	ldrh	r3, [r7, #12]
 8002b62:	43db      	mvns	r3, r3
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	801a      	strh	r2, [r3, #0]
}
 8002b6a:	bf00      	nop
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
	...

08002b78 <UB_VGA_Screen_Init>:

//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
  uint16_t xp,yp;

  VGA.hsync_cnt=0;
 8002b7e:	4b1b      	ldr	r3, [pc, #108]	; (8002bec <UB_VGA_Screen_Init+0x74>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	801a      	strh	r2, [r3, #0]
  VGA.start_adr=0;
 8002b84:	4b19      	ldr	r3, [pc, #100]	; (8002bec <UB_VGA_Screen_Init+0x74>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg=0;
 8002b8a:	4b18      	ldr	r3, [pc, #96]	; (8002bec <UB_VGA_Screen_Init+0x74>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	609a      	str	r2, [r3, #8]

  // RAM init total black
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8002b90:	2300      	movs	r3, #0
 8002b92:	80bb      	strh	r3, [r7, #4]
 8002b94:	e017      	b.n	8002bc6 <UB_VGA_Screen_Init+0x4e>
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 8002b96:	2300      	movs	r3, #0
 8002b98:	80fb      	strh	r3, [r7, #6]
 8002b9a:	e00d      	b.n	8002bb8 <UB_VGA_Screen_Init+0x40>
      VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=0;
 8002b9c:	88ba      	ldrh	r2, [r7, #4]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4413      	add	r3, r2
 8002ba4:	019b      	lsls	r3, r3, #6
 8002ba6:	441a      	add	r2, r3
 8002ba8:	88fb      	ldrh	r3, [r7, #6]
 8002baa:	4413      	add	r3, r2
 8002bac:	4a10      	ldr	r2, [pc, #64]	; (8002bf0 <UB_VGA_Screen_Init+0x78>)
 8002bae:	2100      	movs	r1, #0
 8002bb0:	54d1      	strb	r1, [r2, r3]
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 8002bb2:	88fb      	ldrh	r3, [r7, #6]
 8002bb4:	3301      	adds	r3, #1
 8002bb6:	80fb      	strh	r3, [r7, #6]
 8002bb8:	88fb      	ldrh	r3, [r7, #6]
 8002bba:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002bbe:	d9ed      	bls.n	8002b9c <UB_VGA_Screen_Init+0x24>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8002bc0:	88bb      	ldrh	r3, [r7, #4]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	80bb      	strh	r3, [r7, #4]
 8002bc6:	88bb      	ldrh	r3, [r7, #4]
 8002bc8:	2bef      	cmp	r3, #239	; 0xef
 8002bca:	d9e4      	bls.n	8002b96 <UB_VGA_Screen_Init+0x1e>
    }
  }

  // init IO-Pins
  P_VGA_InitIO();
 8002bcc:	f000 f85e 	bl	8002c8c <P_VGA_InitIO>
  // init Timer
  P_VGA_InitTIM();
 8002bd0:	f000 f8b0 	bl	8002d34 <P_VGA_InitTIM>
  // init DMA
  P_VGA_InitDMA();
 8002bd4:	f000 f940 	bl	8002e58 <P_VGA_InitDMA>
  // init Interrupts
  P_VGA_InitINT();
 8002bd8:	f000 f912 	bl	8002e00 <P_VGA_InitINT>

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg=DMA2_Stream5->CR;
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <UB_VGA_Screen_Init+0x7c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a02      	ldr	r2, [pc, #8]	; (8002bec <UB_VGA_Screen_Init+0x74>)
 8002be2:	6093      	str	r3, [r2, #8]
}
 8002be4:	bf00      	nop
 8002be6:	3708      	adds	r7, #8
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20000020 	.word	0x20000020
 8002bf0:	2000002c 	.word	0x2000002c
 8002bf4:	40026488 	.word	0x40026488

08002bf8 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8002c02:	2300      	movs	r3, #0
 8002c04:	81bb      	strh	r3, [r7, #12]
 8002c06:	e012      	b.n	8002c2e <UB_VGA_FillScreen+0x36>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 8002c08:	2300      	movs	r3, #0
 8002c0a:	81fb      	strh	r3, [r7, #14]
 8002c0c:	e008      	b.n	8002c20 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp,yp,color);
 8002c0e:	79fa      	ldrb	r2, [r7, #7]
 8002c10:	89b9      	ldrh	r1, [r7, #12]
 8002c12:	89fb      	ldrh	r3, [r7, #14]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f000 f811 	bl	8002c3c <UB_VGA_SetPixel>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 8002c1a:	89fb      	ldrh	r3, [r7, #14]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	81fb      	strh	r3, [r7, #14]
 8002c20:	89fb      	ldrh	r3, [r7, #14]
 8002c22:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002c26:	d3f2      	bcc.n	8002c0e <UB_VGA_FillScreen+0x16>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8002c28:	89bb      	ldrh	r3, [r7, #12]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	81bb      	strh	r3, [r7, #12]
 8002c2e:	89bb      	ldrh	r3, [r7, #12]
 8002c30:	2bef      	cmp	r3, #239	; 0xef
 8002c32:	d9e9      	bls.n	8002c08 <UB_VGA_FillScreen+0x10>
    }
  }
}
 8002c34:	bf00      	nop
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	80fb      	strh	r3, [r7, #6]
 8002c46:	460b      	mov	r3, r1
 8002c48:	80bb      	strh	r3, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	70fb      	strb	r3, [r7, #3]
  if(xp>=VGA_DISPLAY_X) xp=0;
 8002c4e:	88fb      	ldrh	r3, [r7, #6]
 8002c50:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002c54:	d301      	bcc.n	8002c5a <UB_VGA_SetPixel+0x1e>
 8002c56:	2300      	movs	r3, #0
 8002c58:	80fb      	strh	r3, [r7, #6]
  if(yp>=VGA_DISPLAY_Y) yp=0;
 8002c5a:	88bb      	ldrh	r3, [r7, #4]
 8002c5c:	2bef      	cmp	r3, #239	; 0xef
 8002c5e:	d901      	bls.n	8002c64 <UB_VGA_SetPixel+0x28>
 8002c60:	2300      	movs	r3, #0
 8002c62:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=color;
 8002c64:	88ba      	ldrh	r2, [r7, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	019b      	lsls	r3, r3, #6
 8002c6e:	441a      	add	r2, r3
 8002c70:	88fb      	ldrh	r3, [r7, #6]
 8002c72:	4413      	add	r3, r2
 8002c74:	4904      	ldr	r1, [pc, #16]	; (8002c88 <UB_VGA_SetPixel+0x4c>)
 8002c76:	78fa      	ldrb	r2, [r7, #3]
 8002c78:	54ca      	strb	r2, [r1, r3]
}
 8002c7a:	bf00      	nop
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	2000002c 	.word	0x2000002c

08002c8c <P_VGA_InitIO>:
//--------------------------------------------------------------
// interne Funktionen
// init aller IO-Pins
//--------------------------------------------------------------
void P_VGA_InitIO(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
  // init RGB-Pins (PE8 - PE15)
  // as normal GPIOs
  //---------------------------------------------
 
  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8002c92:	2101      	movs	r1, #1
 8002c94:	2010      	movs	r0, #16
 8002c96:	f7ff fc3b 	bl	8002510 <RCC_AHB1PeriphClockCmd>

  // Config as Digital output
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 |
 8002c9a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002c9e:	603b      	str	r3, [r7, #0]
        GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8002cac:	2303      	movs	r3, #3
 8002cae:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002cb0:	463b      	mov	r3, r7
 8002cb2:	4619      	mov	r1, r3
 8002cb4:	481d      	ldr	r0, [pc, #116]	; (8002d2c <P_VGA_InitIO+0xa0>)
 8002cb6:	f7ff fb53 	bl	8002360 <GPIO_Init>

  GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 8002cba:	4b1c      	ldr	r3, [pc, #112]	; (8002d2c <P_VGA_InitIO+0xa0>)
 8002cbc:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8002cc0:	835a      	strh	r2, [r3, #26]
  // init of the H-Sync Pin (PB11)
  // using Timer2 and CH4
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	2002      	movs	r0, #2
 8002cc6:	f7ff fc23 	bl	8002510 <RCC_AHB1PeriphClockCmd>

  // Config Pins as Digital-out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 8002cca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002cce:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002ce0:	463b      	mov	r3, r7
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	4812      	ldr	r0, [pc, #72]	; (8002d30 <P_VGA_InitIO+0xa4>)
 8002ce6:	f7ff fb3b 	bl	8002360 <GPIO_Init>

  // alternative function connect with IO
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_TIM2);
 8002cea:	2201      	movs	r2, #1
 8002cec:	210b      	movs	r1, #11
 8002cee:	4810      	ldr	r0, [pc, #64]	; (8002d30 <P_VGA_InitIO+0xa4>)
 8002cf0:	f7ff fbc4 	bl	800247c <GPIO_PinAFConfig>
  // init of V-Sync Pin (PB12)
  // using GPIO
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	2002      	movs	r0, #2
 8002cf8:	f7ff fc0a 	bl	8002510 <RCC_AHB1PeriphClockCmd>

  // Config of the Pins as Digital out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8002cfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d00:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002d02:	2301      	movs	r3, #1
 8002d04:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002d06:	2300      	movs	r3, #0
 8002d08:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002d12:	463b      	mov	r3, r7
 8002d14:	4619      	mov	r1, r3
 8002d16:	4806      	ldr	r0, [pc, #24]	; (8002d30 <P_VGA_InitIO+0xa4>)
 8002d18:	f7ff fb22 	bl	8002360 <GPIO_Init>

  GPIOB->BSRRL = GPIO_Pin_12;
 8002d1c:	4b04      	ldr	r3, [pc, #16]	; (8002d30 <P_VGA_InitIO+0xa4>)
 8002d1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d22:	831a      	strh	r2, [r3, #24]
}
 8002d24:	bf00      	nop
 8002d26:	3708      	adds	r7, #8
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd80      	pop	{r7, pc}
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	40020400 	.word	0x40020400

08002d34 <P_VGA_InitTIM>:
//--------------------------------------------------------------
// internal Function
// init Timer
//--------------------------------------------------------------
void P_VGA_InitTIM(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af00      	add	r7, sp, #0
  // init of Timer1 for
  // Pixeldata via DMA
  //---------------------------------------------

  // Clock enable
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	2001      	movs	r0, #1
 8002d3e:	f7ff fc27 	bl	8002590 <RCC_APB2PeriphClockCmd>

  // Timer1 init
  TIM_TimeBaseStructure.TIM_Period =  VGA_TIM1_PERIODE;
 8002d42:	230b      	movs	r3, #11
 8002d44:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM1_PRESCALE;
 8002d46:	2300      	movs	r3, #0
 8002d48:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 8002d52:	f107 0314 	add.w	r3, r7, #20
 8002d56:	4619      	mov	r1, r3
 8002d58:	4828      	ldr	r0, [pc, #160]	; (8002dfc <P_VGA_InitTIM+0xc8>)
 8002d5a:	f7ff fc39 	bl	80025d0 <TIM_TimeBaseInit>
  // CH4 for HSYNC-Signal
  // CH3 for DMA Trigger start
  //---------------------------------------------

  // Clock enable
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8002d5e:	2101      	movs	r1, #1
 8002d60:	2001      	movs	r0, #1
 8002d62:	f7ff fbf5 	bl	8002550 <RCC_APB1PeriphClockCmd>

  // Timer2 init
  TIM_TimeBaseStructure.TIM_Period = VGA_TIM2_HSYNC_PERIODE;
 8002d66:	f640 236b 	movw	r3, #2667	; 0xa6b
 8002d6a:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8002d70:	2300      	movs	r3, #0
 8002d72:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002d74:	2300      	movs	r3, #0
 8002d76:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8002d78:	f107 0314 	add.w	r3, r7, #20
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002d82:	f7ff fc25 	bl	80025d0 <TIM_TimeBaseInit>

  // Timer2 Channel 3 ( for DMA Trigger start)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8002d86:	2360      	movs	r3, #96	; 0x60
 8002d88:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HTRIGGER_START-VGA_TIM2_DMA_DELAY;
 8002d8e:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8002d92:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8002d94:	2302      	movs	r3, #2
 8002d96:	81bb      	strh	r3, [r7, #12]
  TIM_OC3Init(TIM2, &TIM_OCInitStructure);
 8002d98:	463b      	mov	r3, r7
 8002d9a:	4619      	mov	r1, r3
 8002d9c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002da0:	f7ff fcc2 	bl	8002728 <TIM_OC3Init>
  TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8002da4:	2108      	movs	r1, #8
 8002da6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002daa:	f7ff fdab 	bl	8002904 <TIM_OC3PreloadConfig>

  // Timer2 Channel 4 (for HSYNC)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8002dae:	2360      	movs	r3, #96	; 0x60
 8002db0:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8002db2:	2301      	movs	r3, #1
 8002db4:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HSYNC_IMP;
 8002db6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002dba:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	81bb      	strh	r3, [r7, #12]
  TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 8002dc0:	463b      	mov	r3, r7
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002dc8:	f7ff fd34 	bl	8002834 <TIM_OC4Init>
  TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8002dcc:	2108      	movs	r1, #8
 8002dce:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002dd2:	f7ff fdb3 	bl	800293c <TIM_OC4PreloadConfig>
  //---------------------------------------------
  // enable all Timers
  //---------------------------------------------

  // Timer1 enable
  TIM_ARRPreloadConfig(TIM1, ENABLE);
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	4808      	ldr	r0, [pc, #32]	; (8002dfc <P_VGA_InitTIM+0xc8>)
 8002dda:	f7ff fc65 	bl	80026a8 <TIM_ARRPreloadConfig>

  // Timer2 enable
  TIM_ARRPreloadConfig(TIM2, ENABLE);
 8002dde:	2101      	movs	r1, #1
 8002de0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002de4:	f7ff fc60 	bl	80026a8 <TIM_ARRPreloadConfig>
  TIM_Cmd(TIM2, ENABLE);
 8002de8:	2101      	movs	r1, #1
 8002dea:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002dee:	f7ff fc7b 	bl	80026e8 <TIM_Cmd>

}
 8002df2:	bf00      	nop
 8002df4:	3720      	adds	r7, #32
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40010000 	.word	0x40010000

08002e00 <P_VGA_InitINT>:
//--------------------------------------------------------------
// internal Function
// init Interrupts
//--------------------------------------------------------------
void P_VGA_InitINT(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b082      	sub	sp, #8
 8002e04:	af00      	add	r7, sp, #0
  // init from DMA Interrupt
  // for TransferComplete Interrupt
  // DMA2, Stream5, Channel6
  //---------------------------------------------

  DMA_ITConfig(DMA2_Stream5, DMA_IT_TC, ENABLE);
 8002e06:	2201      	movs	r2, #1
 8002e08:	2110      	movs	r1, #16
 8002e0a:	4812      	ldr	r0, [pc, #72]	; (8002e54 <P_VGA_InitINT+0x54>)
 8002e0c:	f7ff f9e8 	bl	80021e0 <DMA_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream5_IRQn;
 8002e10:	2344      	movs	r3, #68	; 0x44
 8002e12:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002e14:	2300      	movs	r3, #0
 8002e16:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8002e20:	1d3b      	adds	r3, r7, #4
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff f832 	bl	8001e8c <NVIC_Init>
  // init of Timer2 Interrupt
  // for HSync-Counter using Update
  // for DMA Trigger START using CH3
  //---------------------------------------------

  TIM_ITConfig(TIM2,TIM_IT_CC3,ENABLE);
 8002e28:	2201      	movs	r2, #1
 8002e2a:	2108      	movs	r1, #8
 8002e2c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e30:	f7ff fda2 	bl	8002978 <TIM_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8002e34:	231c      	movs	r3, #28
 8002e36:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002e40:	2301      	movs	r3, #1
 8002e42:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8002e44:	1d3b      	adds	r3, r7, #4
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff f820 	bl	8001e8c <NVIC_Init>
}
 8002e4c:	bf00      	nop
 8002e4e:	3708      	adds	r7, #8
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40026488 	.word	0x40026488

08002e58 <P_VGA_InitDMA>:
//--------------------------------------------------------------
// internal Function
// init DMA
//--------------------------------------------------------------
void P_VGA_InitDMA(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b090      	sub	sp, #64	; 0x40
 8002e5c:	af00      	add	r7, sp, #0
  // (look at page 217 of the Ref Manual)
  // DMA=2, Channel=6, Stream=5
  //---------------------------------------------

  // Clock Enable (DMA)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 8002e5e:	2101      	movs	r1, #1
 8002e60:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002e64:	f7ff fb54 	bl	8002510 <RCC_AHB1PeriphClockCmd>

  // DMA init (DMA2, Channel6, Stream5)
  DMA_Cmd(DMA2_Stream5, DISABLE);
 8002e68:	2100      	movs	r1, #0
 8002e6a:	481b      	ldr	r0, [pc, #108]	; (8002ed8 <P_VGA_InitDMA+0x80>)
 8002e6c:	f7ff f99c 	bl	80021a8 <DMA_Cmd>
  DMA_DeInit(DMA2_Stream5);
 8002e70:	4819      	ldr	r0, [pc, #100]	; (8002ed8 <P_VGA_InitDMA+0x80>)
 8002e72:	f7ff f86d 	bl	8001f50 <DMA_DeInit>
  DMA_InitStructure.DMA_Channel = DMA_Channel_6;
 8002e76:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8002e7a:	607b      	str	r3, [r7, #4]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)VGA_GPIOE_ODR_ADDRESS;
 8002e7c:	4b17      	ldr	r3, [pc, #92]	; (8002edc <P_VGA_InitDMA+0x84>)
 8002e7e:	60bb      	str	r3, [r7, #8]
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&VGA_RAM1;
 8002e80:	4b17      	ldr	r3, [pc, #92]	; (8002ee0 <P_VGA_InitDMA+0x88>)
 8002e82:	60fb      	str	r3, [r7, #12]
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8002e84:	2340      	movs	r3, #64	; 0x40
 8002e86:	613b      	str	r3, [r7, #16]
  DMA_InitStructure.DMA_BufferSize = VGA_DISPLAY_X+1;
 8002e88:	f240 1341 	movw	r3, #321	; 0x141
 8002e8c:	617b      	str	r3, [r7, #20]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61bb      	str	r3, [r7, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8002e92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e96:	61fb      	str	r3, [r7, #28]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	623b      	str	r3, [r7, #32]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8002ea4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	633b      	str	r3, [r7, #48]	; 0x30
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	637b      	str	r3, [r7, #52]	; 0x34
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	63bb      	str	r3, [r7, #56]	; 0x38
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  DMA_Init(DMA2_Stream5, &DMA_InitStructure);
 8002eba:	1d3b      	adds	r3, r7, #4
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	4806      	ldr	r0, [pc, #24]	; (8002ed8 <P_VGA_InitDMA+0x80>)
 8002ec0:	f7ff f91a 	bl	80020f8 <DMA_Init>

  // DMA-Timer1 enable
  TIM_DMACmd(TIM1,TIM_DMA_Update,ENABLE);
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002eca:	4806      	ldr	r0, [pc, #24]	; (8002ee4 <P_VGA_InitDMA+0x8c>)
 8002ecc:	f7ff fd89 	bl	80029e2 <TIM_DMACmd>
}
 8002ed0:	bf00      	nop
 8002ed2:	3740      	adds	r7, #64	; 0x40
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40026488 	.word	0x40026488
 8002edc:	40021015 	.word	0x40021015
 8002ee0:	2000002c 	.word	0x2000002c
 8002ee4:	40010000 	.word	0x40010000

08002ee8 <TIM2_IRQHandler>:
//
//   CC3-Interrupt    -> starts from DMA
// Watch it.. higher troughput when interrupt flag is left alone
//--------------------------------------------------------------
void TIM2_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0

  // Interrupt of Timer2 CH3 occurred (for Trigger start)
  TIM_ClearITPendingBit(TIM2, TIM_IT_CC3);
 8002eec:	2108      	movs	r1, #8
 8002eee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ef2:	f7ff fd65 	bl	80029c0 <TIM_ClearITPendingBit>

  VGA.hsync_cnt++;
 8002ef6:	4b26      	ldr	r3, [pc, #152]	; (8002f90 <TIM2_IRQHandler+0xa8>)
 8002ef8:	881b      	ldrh	r3, [r3, #0]
 8002efa:	3301      	adds	r3, #1
 8002efc:	b29a      	uxth	r2, r3
 8002efe:	4b24      	ldr	r3, [pc, #144]	; (8002f90 <TIM2_IRQHandler+0xa8>)
 8002f00:	801a      	strh	r2, [r3, #0]
  if(VGA.hsync_cnt>=VGA_VSYNC_PERIODE) {
 8002f02:	4b23      	ldr	r3, [pc, #140]	; (8002f90 <TIM2_IRQHandler+0xa8>)
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8002f0a:	d905      	bls.n	8002f18 <TIM2_IRQHandler+0x30>
    // -----------
    VGA.hsync_cnt=0;
 8002f0c:	4b20      	ldr	r3, [pc, #128]	; (8002f90 <TIM2_IRQHandler+0xa8>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr=(uint32_t)(&VGA_RAM1[0]);
 8002f12:	4a20      	ldr	r2, [pc, #128]	; (8002f94 <TIM2_IRQHandler+0xac>)
 8002f14:	4b1e      	ldr	r3, [pc, #120]	; (8002f90 <TIM2_IRQHandler+0xa8>)
 8002f16:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  if(VGA.hsync_cnt<VGA_VSYNC_IMP) {
 8002f18:	4b1d      	ldr	r3, [pc, #116]	; (8002f90 <TIM2_IRQHandler+0xa8>)
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d804      	bhi.n	8002f2a <TIM2_IRQHandler+0x42>
    // HSync low
    GPIOB->BSRRH = GPIO_Pin_12;
 8002f20:	4b1d      	ldr	r3, [pc, #116]	; (8002f98 <TIM2_IRQHandler+0xb0>)
 8002f22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f26:	835a      	strh	r2, [r3, #26]
 8002f28:	e003      	b.n	8002f32 <TIM2_IRQHandler+0x4a>
  }
  else {
    // HSync High
    GPIOB->BSRRL = GPIO_Pin_12;
 8002f2a:	4b1b      	ldr	r3, [pc, #108]	; (8002f98 <TIM2_IRQHandler+0xb0>)
 8002f2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f30:	831a      	strh	r2, [r3, #24]
  }

  // Test for DMA start
  if((VGA.hsync_cnt>=VGA_VSYNC_BILD_START) && (VGA.hsync_cnt<=VGA_VSYNC_BILD_STOP)) {
 8002f32:	4b17      	ldr	r3, [pc, #92]	; (8002f90 <TIM2_IRQHandler+0xa8>)
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	2b23      	cmp	r3, #35	; 0x23
 8002f38:	d927      	bls.n	8002f8a <TIM2_IRQHandler+0xa2>
 8002f3a:	4b15      	ldr	r3, [pc, #84]	; (8002f90 <TIM2_IRQHandler+0xa8>)
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	f240 2202 	movw	r2, #514	; 0x202
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d821      	bhi.n	8002f8a <TIM2_IRQHandler+0xa2>
    // after FP start => DMA Transfer

    // DMA2 init
	DMA2_Stream5->CR=VGA.dma2_cr_reg;
 8002f46:	4a15      	ldr	r2, [pc, #84]	; (8002f9c <TIM2_IRQHandler+0xb4>)
 8002f48:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <TIM2_IRQHandler+0xa8>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR=VGA.start_adr;
 8002f4e:	4a13      	ldr	r2, [pc, #76]	; (8002f9c <TIM2_IRQHandler+0xb4>)
 8002f50:	4b0f      	ldr	r3, [pc, #60]	; (8002f90 <TIM2_IRQHandler+0xa8>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1|=TIM_CR1_CEN;
 8002f56:	4a12      	ldr	r2, [pc, #72]	; (8002fa0 <TIM2_IRQHandler+0xb8>)
 8002f58:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <TIM2_IRQHandler+0xb8>)
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	f043 0301 	orr.w	r3, r3, #1
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	8013      	strh	r3, [r2, #0]
    // DMA2 enable
    DMA2_Stream5->CR|=DMA_SxCR_EN;
 8002f66:	4a0d      	ldr	r2, [pc, #52]	; (8002f9c <TIM2_IRQHandler+0xb4>)
 8002f68:	4b0c      	ldr	r3, [pc, #48]	; (8002f9c <TIM2_IRQHandler+0xb4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f043 0301 	orr.w	r3, r3, #1
 8002f70:	6013      	str	r3, [r2, #0]

    // Test Adrespointer for high
    if((VGA.hsync_cnt & 0x01)!=0) {
 8002f72:	4b07      	ldr	r3, [pc, #28]	; (8002f90 <TIM2_IRQHandler+0xa8>)
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d005      	beq.n	8002f8a <TIM2_IRQHandler+0xa2>
      // inc after Hsync
      VGA.start_adr+=(VGA_DISPLAY_X+1);
 8002f7e:	4b04      	ldr	r3, [pc, #16]	; (8002f90 <TIM2_IRQHandler+0xa8>)
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f203 1341 	addw	r3, r3, #321	; 0x141
 8002f86:	4a02      	ldr	r2, [pc, #8]	; (8002f90 <TIM2_IRQHandler+0xa8>)
 8002f88:	6053      	str	r3, [r2, #4]
    }
  }
}
 8002f8a:	bf00      	nop
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	20000020 	.word	0x20000020
 8002f94:	2000002c 	.word	0x2000002c
 8002f98:	40020400 	.word	0x40020400
 8002f9c:	40026488 	.word	0x40026488
 8002fa0:	40010000 	.word	0x40010000

08002fa4 <DMA2_Stream5_IRQHandler>:
//   after TransferCompleteInterrupt -> stop DMA
//
// still a bit buggy
//--------------------------------------------------------------
void DMA2_Stream5_IRQHandler(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  if(DMA_GetITStatus(DMA2_Stream5, DMA_IT_TCIF5))
 8002fa8:	490d      	ldr	r1, [pc, #52]	; (8002fe0 <DMA2_Stream5_IRQHandler+0x3c>)
 8002faa:	480e      	ldr	r0, [pc, #56]	; (8002fe4 <DMA2_Stream5_IRQHandler+0x40>)
 8002fac:	f7ff f952 	bl	8002254 <DMA_GetITStatus>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d012      	beq.n	8002fdc <DMA2_Stream5_IRQHandler+0x38>
  {
    // TransferInterruptComplete Interrupt from DMA2
    DMA_ClearITPendingBit(DMA2_Stream5, DMA_IT_TCIF5);
 8002fb6:	490a      	ldr	r1, [pc, #40]	; (8002fe0 <DMA2_Stream5_IRQHandler+0x3c>)
 8002fb8:	480a      	ldr	r0, [pc, #40]	; (8002fe4 <DMA2_Stream5_IRQHandler+0x40>)
 8002fba:	f7ff f9a3 	bl	8002304 <DMA_ClearITPendingBit>
    // stop after all pixels => DMA Transfer stop

    // Timer1 stop
    TIM1->CR1&=~TIM_CR1_CEN;
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <DMA2_Stream5_IRQHandler+0x44>)
 8002fc0:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <DMA2_Stream5_IRQHandler+0x44>)
 8002fc2:	881b      	ldrh	r3, [r3, #0]
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	f023 0301 	bic.w	r3, r3, #1
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	8013      	strh	r3, [r2, #0]
    // DMA2 disable
    DMA2_Stream5->CR=0;
 8002fce:	4b05      	ldr	r3, [pc, #20]	; (8002fe4 <DMA2_Stream5_IRQHandler+0x40>)
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
    // switch on black
    GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 8002fd4:	4b05      	ldr	r3, [pc, #20]	; (8002fec <DMA2_Stream5_IRQHandler+0x48>)
 8002fd6:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8002fda:	835a      	strh	r2, [r3, #26]
  }
}
 8002fdc:	bf00      	nop
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	20008800 	.word	0x20008800
 8002fe4:	40026488 	.word	0x40026488
 8002fe8:	40010000 	.word	0x40010000
 8002fec:	40021000 	.word	0x40021000

08002ff0 <USART2_IRQHandler>:
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
}

void USART2_IRQHandler(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
	// check if the USART2 receive interrupt flag was set
	if( USART_GetITStatus(USART2, USART_IT_RXNE))
 8002ff6:	f240 5125 	movw	r1, #1317	; 0x525
 8002ffa:	4827      	ldr	r0, [pc, #156]	; (8003098 <USART2_IRQHandler+0xa8>)
 8002ffc:	f7ff fd43 	bl	8002a86 <USART_GetITStatus>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d044      	beq.n	8003090 <USART2_IRQHandler+0xa0>
	{
		USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8003006:	f240 5125 	movw	r1, #1317	; 0x525
 800300a:	4823      	ldr	r0, [pc, #140]	; (8003098 <USART2_IRQHandler+0xa8>)
 800300c:	f7ff fd96 	bl	8002b3c <USART_ClearITPendingBit>
		int i;
		char c = USART2->DR & 0xFF;
 8003010:	4b21      	ldr	r3, [pc, #132]	; (8003098 <USART2_IRQHandler+0xa8>)
 8003012:	889b      	ldrh	r3, [r3, #4]
 8003014:	b29b      	uxth	r3, r3
 8003016:	70fb      	strb	r3, [r7, #3]
//		LCD_XY(10,1);
//		LCD_put("UART:   ");
//		LCD_XY(15,1);
//		LCD_putchar(c);

		if(c > 64 && c < 91)
 8003018:	78fb      	ldrb	r3, [r7, #3]
 800301a:	2b40      	cmp	r3, #64	; 0x40
 800301c:	d905      	bls.n	800302a <USART2_IRQHandler+0x3a>
 800301e:	78fb      	ldrb	r3, [r7, #3]
 8003020:	2b5a      	cmp	r3, #90	; 0x5a
 8003022:	d802      	bhi.n	800302a <USART2_IRQHandler+0x3a>
			c += 32;
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	3320      	adds	r3, #32
 8003028:	70fb      	strb	r3, [r7, #3]
		if(c <= 13)
 800302a:	78fb      	ldrb	r3, [r7, #3]
 800302c:	2b0d      	cmp	r3, #13
 800302e:	d81d      	bhi.n	800306c <USART2_IRQHandler+0x7c>
		{
			for(i=0;i<charcounter;i++)
 8003030:	2300      	movs	r3, #0
 8003032:	607b      	str	r3, [r7, #4]
 8003034:	e00b      	b.n	800304e <USART2_IRQHandler+0x5e>
			{
				USART_SendData(USART2, string[i]); // Echo Char
 8003036:	4a19      	ldr	r2, [pc, #100]	; (800309c <USART2_IRQHandler+0xac>)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4413      	add	r3, r2
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	b29b      	uxth	r3, r3
 8003040:	4619      	mov	r1, r3
 8003042:	4815      	ldr	r0, [pc, #84]	; (8003098 <USART2_IRQHandler+0xa8>)
 8003044:	f7ff fcf1 	bl	8002a2a <USART_SendData>
			for(i=0;i<charcounter;i++)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	3301      	adds	r3, #1
 800304c:	607b      	str	r3, [r7, #4]
 800304e:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <USART2_IRQHandler+0xb0>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	429a      	cmp	r2, r3
 8003056:	dbee      	blt.n	8003036 <USART2_IRQHandler+0x46>
			}
			charcounter = 0;
 8003058:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <USART2_IRQHandler+0xb0>)
 800305a:	2200      	movs	r2, #0
 800305c:	601a      	str	r2, [r3, #0]
			USART_SendData(USART2, c); // Echo Char
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	b29b      	uxth	r3, r3
 8003062:	4619      	mov	r1, r3
 8003064:	480c      	ldr	r0, [pc, #48]	; (8003098 <USART2_IRQHandler+0xa8>)
 8003066:	f7ff fce0 	bl	8002a2a <USART_SendData>
 800306a:	e009      	b.n	8003080 <USART2_IRQHandler+0x90>
		}
		else
		{
			string[charcounter] = c;
 800306c:	4b0c      	ldr	r3, [pc, #48]	; (80030a0 <USART2_IRQHandler+0xb0>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	490a      	ldr	r1, [pc, #40]	; (800309c <USART2_IRQHandler+0xac>)
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	54ca      	strb	r2, [r1, r3]
			charcounter++;
 8003076:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <USART2_IRQHandler+0xb0>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	3301      	adds	r3, #1
 800307c:	4a08      	ldr	r2, [pc, #32]	; (80030a0 <USART2_IRQHandler+0xb0>)
 800307e:	6013      	str	r3, [r2, #0]
		}


		while (USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET); // Wait for Empty
 8003080:	bf00      	nop
 8003082:	2140      	movs	r1, #64	; 0x40
 8003084:	4804      	ldr	r0, [pc, #16]	; (8003098 <USART2_IRQHandler+0xa8>)
 8003086:	f7ff fce2 	bl	8002a4e <USART_GetFlagStatus>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0f8      	beq.n	8003082 <USART2_IRQHandler+0x92>

	}
}
 8003090:	bf00      	nop
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40004400 	.word	0x40004400
 800309c:	20012d1c 	.word	0x20012d1c
 80030a0:	2000001c 	.word	0x2000001c

080030a4 <main>:
#include <math.h>
#include "line.h"
#include "text.h"

int main(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
	//  uint32_t n;

	SystemInit(); // System speed to 168MHz
 80030a8:	f000 f86a 	bl	8003180 <SystemInit>

	UB_VGA_Screen_Init(); // Init VGA-Screen
 80030ac:	f7ff fd64 	bl	8002b78 <UB_VGA_Screen_Init>

	UB_VGA_FillScreen(VGA_COL_BLACK);
 80030b0:	2000      	movs	r0, #0
 80030b2:	f7ff fda1 	bl	8002bf8 <UB_VGA_FillScreen>
	//draw_rectangle (0,0,50,50,125);
	draw_bitmap (50, 50);
 80030b6:	2132      	movs	r1, #50	; 0x32
 80030b8:	2032      	movs	r0, #50	; 0x32
 80030ba:	f7fd f88d 	bl	80001d8 <draw_bitmap>


	draw_text (70, 30, "MILAN JE BENT EEN KANKER NEGER");
 80030be:	4a03      	ldr	r2, [pc, #12]	; (80030cc <main+0x28>)
 80030c0:	211e      	movs	r1, #30
 80030c2:	2046      	movs	r0, #70	; 0x46
 80030c4:	f7fd f91e 	bl	8000304 <draw_text>




  while(1)
 80030c8:	e7fe      	b.n	80030c8 <main+0x24>
 80030ca:	bf00      	nop
 80030cc:	08005b94 	.word	0x08005b94

080030d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80030d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003108 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80030d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80030d6:	e003      	b.n	80030e0 <LoopCopyDataInit>

080030d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80030da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80030dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80030de:	3104      	adds	r1, #4

080030e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80030e0:	480b      	ldr	r0, [pc, #44]	; (8003110 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80030e2:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80030e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80030e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80030e8:	d3f6      	bcc.n	80030d8 <CopyDataInit>
  ldr  r2, =_sbss
 80030ea:	4a0b      	ldr	r2, [pc, #44]	; (8003118 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80030ec:	e002      	b.n	80030f4 <LoopFillZerobss>

080030ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80030ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80030f0:	f842 3b04 	str.w	r3, [r2], #4

080030f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80030f4:	4b09      	ldr	r3, [pc, #36]	; (800311c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80030f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80030f8:	d3f9      	bcc.n	80030ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030fa:	f000 f841 	bl	8003180 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030fe:	f000 f8f1 	bl	80032e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003102:	f7ff ffcf 	bl	80030a4 <main>
  bx  lr    
 8003106:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003108:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800310c:	08005bbc 	.word	0x08005bbc
  ldr  r0, =_sdata
 8003110:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003114:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8003118:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 800311c:	20012d80 	.word	0x20012d80

08003120 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003120:	e7fe      	b.n	8003120 <ADC_IRQHandler>

08003122 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8003122:	b480      	push	{r7}
 8003124:	af00      	add	r7, sp, #0
}
 8003126:	bf00      	nop
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003134:	e7fe      	b.n	8003134 <HardFault_Handler+0x4>

08003136 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8003136:	b480      	push	{r7}
 8003138:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800313a:	e7fe      	b.n	800313a <MemManage_Handler+0x4>

0800313c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003140:	e7fe      	b.n	8003140 <BusFault_Handler+0x4>

08003142 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003142:	b480      	push	{r7}
 8003144:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8003146:	e7fe      	b.n	8003146 <UsageFault_Handler+0x4>

08003148 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
}
 800314c:	bf00      	nop
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr

08003156 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8003156:	b480      	push	{r7}
 8003158:	af00      	add	r7, sp, #0
}
 800315a:	bf00      	nop
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
}
 8003168:	bf00      	nop
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8003172:	b480      	push	{r7}
 8003174:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8003176:	bf00      	nop
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003184:	4a16      	ldr	r2, [pc, #88]	; (80031e0 <SystemInit+0x60>)
 8003186:	4b16      	ldr	r3, [pc, #88]	; (80031e0 <SystemInit+0x60>)
 8003188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003194:	4a13      	ldr	r2, [pc, #76]	; (80031e4 <SystemInit+0x64>)
 8003196:	4b13      	ldr	r3, [pc, #76]	; (80031e4 <SystemInit+0x64>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80031a0:	4b10      	ldr	r3, [pc, #64]	; (80031e4 <SystemInit+0x64>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80031a6:	4a0f      	ldr	r2, [pc, #60]	; (80031e4 <SystemInit+0x64>)
 80031a8:	4b0e      	ldr	r3, [pc, #56]	; (80031e4 <SystemInit+0x64>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80031b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031b4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80031b6:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <SystemInit+0x64>)
 80031b8:	4a0b      	ldr	r2, [pc, #44]	; (80031e8 <SystemInit+0x68>)
 80031ba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80031bc:	4a09      	ldr	r2, [pc, #36]	; (80031e4 <SystemInit+0x64>)
 80031be:	4b09      	ldr	r3, [pc, #36]	; (80031e4 <SystemInit+0x64>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80031c8:	4b06      	ldr	r3, [pc, #24]	; (80031e4 <SystemInit+0x64>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80031ce:	f000 f80d 	bl	80031ec <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031d2:	4b03      	ldr	r3, [pc, #12]	; (80031e0 <SystemInit+0x60>)
 80031d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031d8:	609a      	str	r2, [r3, #8]
#endif
}
 80031da:	bf00      	nop
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	e000ed00 	.word	0xe000ed00
 80031e4:	40023800 	.word	0x40023800
 80031e8:	24003010 	.word	0x24003010

080031ec <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	607b      	str	r3, [r7, #4]
 80031f6:	2300      	movs	r3, #0
 80031f8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80031fa:	4a36      	ldr	r2, [pc, #216]	; (80032d4 <SetSysClock+0xe8>)
 80031fc:	4b35      	ldr	r3, [pc, #212]	; (80032d4 <SetSysClock+0xe8>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003204:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003206:	4b33      	ldr	r3, [pc, #204]	; (80032d4 <SetSysClock+0xe8>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3301      	adds	r3, #1
 8003214:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d103      	bne.n	8003224 <SetSysClock+0x38>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003222:	d1f0      	bne.n	8003206 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003224:	4b2b      	ldr	r3, [pc, #172]	; (80032d4 <SetSysClock+0xe8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d002      	beq.n	8003236 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003230:	2301      	movs	r3, #1
 8003232:	603b      	str	r3, [r7, #0]
 8003234:	e001      	b.n	800323a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003236:	2300      	movs	r3, #0
 8003238:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d142      	bne.n	80032c6 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003240:	4a24      	ldr	r2, [pc, #144]	; (80032d4 <SetSysClock+0xe8>)
 8003242:	4b24      	ldr	r3, [pc, #144]	; (80032d4 <SetSysClock+0xe8>)
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800324a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800324c:	4a22      	ldr	r2, [pc, #136]	; (80032d8 <SetSysClock+0xec>)
 800324e:	4b22      	ldr	r3, [pc, #136]	; (80032d8 <SetSysClock+0xec>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003256:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8003258:	4a1e      	ldr	r2, [pc, #120]	; (80032d4 <SetSysClock+0xe8>)
 800325a:	4b1e      	ldr	r3, [pc, #120]	; (80032d4 <SetSysClock+0xe8>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003260:	4a1c      	ldr	r2, [pc, #112]	; (80032d4 <SetSysClock+0xe8>)
 8003262:	4b1c      	ldr	r3, [pc, #112]	; (80032d4 <SetSysClock+0xe8>)
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800326a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800326c:	4a19      	ldr	r2, [pc, #100]	; (80032d4 <SetSysClock+0xe8>)
 800326e:	4b19      	ldr	r3, [pc, #100]	; (80032d4 <SetSysClock+0xe8>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8003276:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8003278:	4b16      	ldr	r3, [pc, #88]	; (80032d4 <SetSysClock+0xe8>)
 800327a:	4a18      	ldr	r2, [pc, #96]	; (80032dc <SetSysClock+0xf0>)
 800327c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800327e:	4a15      	ldr	r2, [pc, #84]	; (80032d4 <SetSysClock+0xe8>)
 8003280:	4b14      	ldr	r3, [pc, #80]	; (80032d4 <SetSysClock+0xe8>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003288:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800328a:	bf00      	nop
 800328c:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <SetSysClock+0xe8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0f9      	beq.n	800328c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003298:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <SetSysClock+0xf4>)
 800329a:	f240 7205 	movw	r2, #1797	; 0x705
 800329e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80032a0:	4a0c      	ldr	r2, [pc, #48]	; (80032d4 <SetSysClock+0xe8>)
 80032a2:	4b0c      	ldr	r3, [pc, #48]	; (80032d4 <SetSysClock+0xe8>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f023 0303 	bic.w	r3, r3, #3
 80032aa:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80032ac:	4a09      	ldr	r2, [pc, #36]	; (80032d4 <SetSysClock+0xe8>)
 80032ae:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <SetSysClock+0xe8>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f043 0302 	orr.w	r3, r3, #2
 80032b6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80032b8:	bf00      	nop
 80032ba:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <SetSysClock+0xe8>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d1f9      	bne.n	80032ba <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	40023800 	.word	0x40023800
 80032d8:	40007000 	.word	0x40007000
 80032dc:	07405419 	.word	0x07405419
 80032e0:	40023c00 	.word	0x40023c00

080032e4 <__libc_init_array>:
 80032e4:	b570      	push	{r4, r5, r6, lr}
 80032e6:	4e0d      	ldr	r6, [pc, #52]	; (800331c <__libc_init_array+0x38>)
 80032e8:	4c0d      	ldr	r4, [pc, #52]	; (8003320 <__libc_init_array+0x3c>)
 80032ea:	1ba4      	subs	r4, r4, r6
 80032ec:	10a4      	asrs	r4, r4, #2
 80032ee:	2500      	movs	r5, #0
 80032f0:	42a5      	cmp	r5, r4
 80032f2:	d109      	bne.n	8003308 <__libc_init_array+0x24>
 80032f4:	4e0b      	ldr	r6, [pc, #44]	; (8003324 <__libc_init_array+0x40>)
 80032f6:	4c0c      	ldr	r4, [pc, #48]	; (8003328 <__libc_init_array+0x44>)
 80032f8:	f000 f82c 	bl	8003354 <_init>
 80032fc:	1ba4      	subs	r4, r4, r6
 80032fe:	10a4      	asrs	r4, r4, #2
 8003300:	2500      	movs	r5, #0
 8003302:	42a5      	cmp	r5, r4
 8003304:	d105      	bne.n	8003312 <__libc_init_array+0x2e>
 8003306:	bd70      	pop	{r4, r5, r6, pc}
 8003308:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800330c:	4798      	blx	r3
 800330e:	3501      	adds	r5, #1
 8003310:	e7ee      	b.n	80032f0 <__libc_init_array+0xc>
 8003312:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003316:	4798      	blx	r3
 8003318:	3501      	adds	r5, #1
 800331a:	e7f2      	b.n	8003302 <__libc_init_array+0x1e>
 800331c:	08005bb4 	.word	0x08005bb4
 8003320:	08005bb4 	.word	0x08005bb4
 8003324:	08005bb4 	.word	0x08005bb4
 8003328:	08005bb8 	.word	0x08005bb8

0800332c <memcpy>:
 800332c:	b510      	push	{r4, lr}
 800332e:	1e43      	subs	r3, r0, #1
 8003330:	440a      	add	r2, r1
 8003332:	4291      	cmp	r1, r2
 8003334:	d100      	bne.n	8003338 <memcpy+0xc>
 8003336:	bd10      	pop	{r4, pc}
 8003338:	f811 4b01 	ldrb.w	r4, [r1], #1
 800333c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003340:	e7f7      	b.n	8003332 <memcpy+0x6>

08003342 <memset>:
 8003342:	4402      	add	r2, r0
 8003344:	4603      	mov	r3, r0
 8003346:	4293      	cmp	r3, r2
 8003348:	d100      	bne.n	800334c <memset+0xa>
 800334a:	4770      	bx	lr
 800334c:	f803 1b01 	strb.w	r1, [r3], #1
 8003350:	e7f9      	b.n	8003346 <memset+0x4>
	...

08003354 <_init>:
 8003354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003356:	bf00      	nop
 8003358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800335a:	bc08      	pop	{r3}
 800335c:	469e      	mov	lr, r3
 800335e:	4770      	bx	lr

08003360 <_fini>:
 8003360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003362:	bf00      	nop
 8003364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003366:	bc08      	pop	{r3}
 8003368:	469e      	mov	lr, r3
 800336a:	4770      	bx	lr
