
Software_ontwikkeling_opdracht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bb0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08002d38  08002d38  00012d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003028  08003028  00013028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800302c  0800302c  0001302c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000514  20000000  08003030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020514  2**0
                  CONTENTS
  7 .bss          00012ed8  20000514  20000514  00020514  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200133ec  200133ec  00020514  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020514  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000987f  00000000  00000000  00020544  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000017bb  00000000  00000000  00029dc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000908  00000000  00000000  0002b580  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000820  00000000  00000000  0002be88  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003a47  00000000  00000000  0002c6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002f1b  00000000  00000000  000300ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003300a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000029e4  00000000  00000000  00033088  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00035a6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000514 	.word	0x20000514
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002d20 	.word	0x08002d20

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000518 	.word	0x20000518
 80001c4:	08002d20 	.word	0x08002d20

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_drsub>:
 80001dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e0:	e002      	b.n	80001e8 <__adddf3>
 80001e2:	bf00      	nop

080001e4 <__aeabi_dsub>:
 80001e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e8 <__adddf3>:
 80001e8:	b530      	push	{r4, r5, lr}
 80001ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f2:	ea94 0f05 	teq	r4, r5
 80001f6:	bf08      	it	eq
 80001f8:	ea90 0f02 	teqeq	r0, r2
 80001fc:	bf1f      	itttt	ne
 80001fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000202:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000206:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020e:	f000 80e2 	beq.w	80003d6 <__adddf3+0x1ee>
 8000212:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000216:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021a:	bfb8      	it	lt
 800021c:	426d      	neglt	r5, r5
 800021e:	dd0c      	ble.n	800023a <__adddf3+0x52>
 8000220:	442c      	add	r4, r5
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	ea82 0000 	eor.w	r0, r2, r0
 800022e:	ea83 0101 	eor.w	r1, r3, r1
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	2d36      	cmp	r5, #54	; 0x36
 800023c:	bf88      	it	hi
 800023e:	bd30      	pophi	{r4, r5, pc}
 8000240:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000244:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000248:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800024c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x70>
 8000252:	4240      	negs	r0, r0
 8000254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000258:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800025c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000260:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x84>
 8000266:	4252      	negs	r2, r2
 8000268:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026c:	ea94 0f05 	teq	r4, r5
 8000270:	f000 80a7 	beq.w	80003c2 <__adddf3+0x1da>
 8000274:	f1a4 0401 	sub.w	r4, r4, #1
 8000278:	f1d5 0e20 	rsbs	lr, r5, #32
 800027c:	db0d      	blt.n	800029a <__adddf3+0xb2>
 800027e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000282:	fa22 f205 	lsr.w	r2, r2, r5
 8000286:	1880      	adds	r0, r0, r2
 8000288:	f141 0100 	adc.w	r1, r1, #0
 800028c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000290:	1880      	adds	r0, r0, r2
 8000292:	fa43 f305 	asr.w	r3, r3, r5
 8000296:	4159      	adcs	r1, r3
 8000298:	e00e      	b.n	80002b8 <__adddf3+0xd0>
 800029a:	f1a5 0520 	sub.w	r5, r5, #32
 800029e:	f10e 0e20 	add.w	lr, lr, #32
 80002a2:	2a01      	cmp	r2, #1
 80002a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a8:	bf28      	it	cs
 80002aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ae:	fa43 f305 	asr.w	r3, r3, r5
 80002b2:	18c0      	adds	r0, r0, r3
 80002b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002bc:	d507      	bpl.n	80002ce <__adddf3+0xe6>
 80002be:	f04f 0e00 	mov.w	lr, #0
 80002c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d2:	d31b      	bcc.n	800030c <__adddf3+0x124>
 80002d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d8:	d30c      	bcc.n	80002f4 <__adddf3+0x10c>
 80002da:	0849      	lsrs	r1, r1, #1
 80002dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e4:	f104 0401 	add.w	r4, r4, #1
 80002e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f0:	f080 809a 	bcs.w	8000428 <__adddf3+0x240>
 80002f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f8:	bf08      	it	eq
 80002fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fe:	f150 0000 	adcs.w	r0, r0, #0
 8000302:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000306:	ea41 0105 	orr.w	r1, r1, r5
 800030a:	bd30      	pop	{r4, r5, pc}
 800030c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000310:	4140      	adcs	r0, r0
 8000312:	eb41 0101 	adc.w	r1, r1, r1
 8000316:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031a:	f1a4 0401 	sub.w	r4, r4, #1
 800031e:	d1e9      	bne.n	80002f4 <__adddf3+0x10c>
 8000320:	f091 0f00 	teq	r1, #0
 8000324:	bf04      	itt	eq
 8000326:	4601      	moveq	r1, r0
 8000328:	2000      	moveq	r0, #0
 800032a:	fab1 f381 	clz	r3, r1
 800032e:	bf08      	it	eq
 8000330:	3320      	addeq	r3, #32
 8000332:	f1a3 030b 	sub.w	r3, r3, #11
 8000336:	f1b3 0220 	subs.w	r2, r3, #32
 800033a:	da0c      	bge.n	8000356 <__adddf3+0x16e>
 800033c:	320c      	adds	r2, #12
 800033e:	dd08      	ble.n	8000352 <__adddf3+0x16a>
 8000340:	f102 0c14 	add.w	ip, r2, #20
 8000344:	f1c2 020c 	rsb	r2, r2, #12
 8000348:	fa01 f00c 	lsl.w	r0, r1, ip
 800034c:	fa21 f102 	lsr.w	r1, r1, r2
 8000350:	e00c      	b.n	800036c <__adddf3+0x184>
 8000352:	f102 0214 	add.w	r2, r2, #20
 8000356:	bfd8      	it	le
 8000358:	f1c2 0c20 	rsble	ip, r2, #32
 800035c:	fa01 f102 	lsl.w	r1, r1, r2
 8000360:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000364:	bfdc      	itt	le
 8000366:	ea41 010c 	orrle.w	r1, r1, ip
 800036a:	4090      	lslle	r0, r2
 800036c:	1ae4      	subs	r4, r4, r3
 800036e:	bfa2      	ittt	ge
 8000370:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000374:	4329      	orrge	r1, r5
 8000376:	bd30      	popge	{r4, r5, pc}
 8000378:	ea6f 0404 	mvn.w	r4, r4
 800037c:	3c1f      	subs	r4, #31
 800037e:	da1c      	bge.n	80003ba <__adddf3+0x1d2>
 8000380:	340c      	adds	r4, #12
 8000382:	dc0e      	bgt.n	80003a2 <__adddf3+0x1ba>
 8000384:	f104 0414 	add.w	r4, r4, #20
 8000388:	f1c4 0220 	rsb	r2, r4, #32
 800038c:	fa20 f004 	lsr.w	r0, r0, r4
 8000390:	fa01 f302 	lsl.w	r3, r1, r2
 8000394:	ea40 0003 	orr.w	r0, r0, r3
 8000398:	fa21 f304 	lsr.w	r3, r1, r4
 800039c:	ea45 0103 	orr.w	r1, r5, r3
 80003a0:	bd30      	pop	{r4, r5, pc}
 80003a2:	f1c4 040c 	rsb	r4, r4, #12
 80003a6:	f1c4 0220 	rsb	r2, r4, #32
 80003aa:	fa20 f002 	lsr.w	r0, r0, r2
 80003ae:	fa01 f304 	lsl.w	r3, r1, r4
 80003b2:	ea40 0003 	orr.w	r0, r0, r3
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	fa21 f004 	lsr.w	r0, r1, r4
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f094 0f00 	teq	r4, #0
 80003c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ca:	bf06      	itte	eq
 80003cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d0:	3401      	addeq	r4, #1
 80003d2:	3d01      	subne	r5, #1
 80003d4:	e74e      	b.n	8000274 <__adddf3+0x8c>
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf18      	it	ne
 80003dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e0:	d029      	beq.n	8000436 <__adddf3+0x24e>
 80003e2:	ea94 0f05 	teq	r4, r5
 80003e6:	bf08      	it	eq
 80003e8:	ea90 0f02 	teqeq	r0, r2
 80003ec:	d005      	beq.n	80003fa <__adddf3+0x212>
 80003ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f2:	bf04      	itt	eq
 80003f4:	4619      	moveq	r1, r3
 80003f6:	4610      	moveq	r0, r2
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	ea91 0f03 	teq	r1, r3
 80003fe:	bf1e      	ittt	ne
 8000400:	2100      	movne	r1, #0
 8000402:	2000      	movne	r0, #0
 8000404:	bd30      	popne	{r4, r5, pc}
 8000406:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040a:	d105      	bne.n	8000418 <__adddf3+0x230>
 800040c:	0040      	lsls	r0, r0, #1
 800040e:	4149      	adcs	r1, r1
 8000410:	bf28      	it	cs
 8000412:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800041c:	bf3c      	itt	cc
 800041e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000422:	bd30      	popcc	{r4, r5, pc}
 8000424:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000428:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043a:	bf1a      	itte	ne
 800043c:	4619      	movne	r1, r3
 800043e:	4610      	movne	r0, r2
 8000440:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000444:	bf1c      	itt	ne
 8000446:	460b      	movne	r3, r1
 8000448:	4602      	movne	r2, r0
 800044a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044e:	bf06      	itte	eq
 8000450:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000454:	ea91 0f03 	teqeq	r1, r3
 8000458:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	bf00      	nop

08000460 <__aeabi_ui2d>:
 8000460:	f090 0f00 	teq	r0, #0
 8000464:	bf04      	itt	eq
 8000466:	2100      	moveq	r1, #0
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000470:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000474:	f04f 0500 	mov.w	r5, #0
 8000478:	f04f 0100 	mov.w	r1, #0
 800047c:	e750      	b.n	8000320 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_i2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000498:	bf48      	it	mi
 800049a:	4240      	negmi	r0, r0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e73e      	b.n	8000320 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_f2d>:
 80004a4:	0042      	lsls	r2, r0, #1
 80004a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b2:	bf1f      	itttt	ne
 80004b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c0:	4770      	bxne	lr
 80004c2:	f092 0f00 	teq	r2, #0
 80004c6:	bf14      	ite	ne
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	e720      	b.n	8000320 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aedc 	beq.w	80002ce <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6c1      	b.n	80002ce <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_dmul>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000552:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000556:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055a:	bf1d      	ittte	ne
 800055c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000560:	ea94 0f0c 	teqne	r4, ip
 8000564:	ea95 0f0c 	teqne	r5, ip
 8000568:	f000 f8de 	bleq	8000728 <__aeabi_dmul+0x1dc>
 800056c:	442c      	add	r4, r5
 800056e:	ea81 0603 	eor.w	r6, r1, r3
 8000572:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000576:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057e:	bf18      	it	ne
 8000580:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000588:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800058c:	d038      	beq.n	8000600 <__aeabi_dmul+0xb4>
 800058e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000592:	f04f 0500 	mov.w	r5, #0
 8000596:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a2:	f04f 0600 	mov.w	r6, #0
 80005a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005aa:	f09c 0f00 	teq	ip, #0
 80005ae:	bf18      	it	ne
 80005b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c0:	d204      	bcs.n	80005cc <__aeabi_dmul+0x80>
 80005c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c6:	416d      	adcs	r5, r5
 80005c8:	eb46 0606 	adc.w	r6, r6, r6
 80005cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e4:	bf88      	it	hi
 80005e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ea:	d81e      	bhi.n	800062a <__aeabi_dmul+0xde>
 80005ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000604:	ea46 0101 	orr.w	r1, r6, r1
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	ea81 0103 	eor.w	r1, r1, r3
 8000610:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000614:	bfc2      	ittt	gt
 8000616:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061e:	bd70      	popgt	{r4, r5, r6, pc}
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f04f 0e00 	mov.w	lr, #0
 8000628:	3c01      	subs	r4, #1
 800062a:	f300 80ab 	bgt.w	8000784 <__aeabi_dmul+0x238>
 800062e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000632:	bfde      	ittt	le
 8000634:	2000      	movle	r0, #0
 8000636:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063a:	bd70      	pople	{r4, r5, r6, pc}
 800063c:	f1c4 0400 	rsb	r4, r4, #0
 8000640:	3c20      	subs	r4, #32
 8000642:	da35      	bge.n	80006b0 <__aeabi_dmul+0x164>
 8000644:	340c      	adds	r4, #12
 8000646:	dc1b      	bgt.n	8000680 <__aeabi_dmul+0x134>
 8000648:	f104 0414 	add.w	r4, r4, #20
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f305 	lsl.w	r3, r0, r5
 8000654:	fa20 f004 	lsr.w	r0, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800066c:	fa21 f604 	lsr.w	r6, r1, r4
 8000670:	eb42 0106 	adc.w	r1, r2, r6
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 040c 	rsb	r4, r4, #12
 8000684:	f1c4 0520 	rsb	r5, r4, #32
 8000688:	fa00 f304 	lsl.w	r3, r0, r4
 800068c:	fa20 f005 	lsr.w	r0, r0, r5
 8000690:	fa01 f204 	lsl.w	r2, r1, r4
 8000694:	ea40 0002 	orr.w	r0, r0, r2
 8000698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	f141 0100 	adc.w	r1, r1, #0
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f205 	lsl.w	r2, r0, r5
 80006b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006bc:	fa20 f304 	lsr.w	r3, r0, r4
 80006c0:	fa01 f205 	lsl.w	r2, r1, r5
 80006c4:	ea43 0302 	orr.w	r3, r3, r2
 80006c8:	fa21 f004 	lsr.w	r0, r1, r4
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	fa21 f204 	lsr.w	r2, r1, r4
 80006d4:	ea20 0002 	bic.w	r0, r0, r2
 80006d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e0:	bf08      	it	eq
 80006e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f094 0f00 	teq	r4, #0
 80006ec:	d10f      	bne.n	800070e <__aeabi_dmul+0x1c2>
 80006ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f2:	0040      	lsls	r0, r0, #1
 80006f4:	eb41 0101 	adc.w	r1, r1, r1
 80006f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006fc:	bf08      	it	eq
 80006fe:	3c01      	subeq	r4, #1
 8000700:	d0f7      	beq.n	80006f2 <__aeabi_dmul+0x1a6>
 8000702:	ea41 0106 	orr.w	r1, r1, r6
 8000706:	f095 0f00 	teq	r5, #0
 800070a:	bf18      	it	ne
 800070c:	4770      	bxne	lr
 800070e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000712:	0052      	lsls	r2, r2, #1
 8000714:	eb43 0303 	adc.w	r3, r3, r3
 8000718:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800071c:	bf08      	it	eq
 800071e:	3d01      	subeq	r5, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1c6>
 8000722:	ea43 0306 	orr.w	r3, r3, r6
 8000726:	4770      	bx	lr
 8000728:	ea94 0f0c 	teq	r4, ip
 800072c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000730:	bf18      	it	ne
 8000732:	ea95 0f0c 	teqne	r5, ip
 8000736:	d00c      	beq.n	8000752 <__aeabi_dmul+0x206>
 8000738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800073c:	bf18      	it	ne
 800073e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000742:	d1d1      	bne.n	80006e8 <__aeabi_dmul+0x19c>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000756:	bf06      	itte	eq
 8000758:	4610      	moveq	r0, r2
 800075a:	4619      	moveq	r1, r3
 800075c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000760:	d019      	beq.n	8000796 <__aeabi_dmul+0x24a>
 8000762:	ea94 0f0c 	teq	r4, ip
 8000766:	d102      	bne.n	800076e <__aeabi_dmul+0x222>
 8000768:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800076c:	d113      	bne.n	8000796 <__aeabi_dmul+0x24a>
 800076e:	ea95 0f0c 	teq	r5, ip
 8000772:	d105      	bne.n	8000780 <__aeabi_dmul+0x234>
 8000774:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000778:	bf1c      	itt	ne
 800077a:	4610      	movne	r0, r2
 800077c:	4619      	movne	r1, r3
 800077e:	d10a      	bne.n	8000796 <__aeabi_dmul+0x24a>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079e:	bd70      	pop	{r4, r5, r6, pc}

080007a0 <__aeabi_ddiv>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ae:	bf1d      	ittte	ne
 80007b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b4:	ea94 0f0c 	teqne	r4, ip
 80007b8:	ea95 0f0c 	teqne	r5, ip
 80007bc:	f000 f8a7 	bleq	800090e <__aeabi_ddiv+0x16e>
 80007c0:	eba4 0405 	sub.w	r4, r4, r5
 80007c4:	ea81 0e03 	eor.w	lr, r1, r3
 80007c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d0:	f000 8088 	beq.w	80008e4 <__aeabi_ddiv+0x144>
 80007d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f8:	429d      	cmp	r5, r3
 80007fa:	bf08      	it	eq
 80007fc:	4296      	cmpeq	r6, r2
 80007fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000802:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000806:	d202      	bcs.n	800080e <__aeabi_ddiv+0x6e>
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	1ab6      	subs	r6, r6, r2
 8000810:	eb65 0503 	sbc.w	r5, r5, r3
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 000c 	orrcs.w	r0, r0, ip
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800087c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000880:	d018      	beq.n	80008b4 <__aeabi_ddiv+0x114>
 8000882:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000886:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000892:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000896:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089e:	d1c0      	bne.n	8000822 <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	d10b      	bne.n	80008be <__aeabi_ddiv+0x11e>
 80008a6:	ea41 0100 	orr.w	r1, r1, r0
 80008aa:	f04f 0000 	mov.w	r0, #0
 80008ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b2:	e7b6      	b.n	8000822 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	bf04      	itt	eq
 80008ba:	4301      	orreq	r1, r0
 80008bc:	2000      	moveq	r0, #0
 80008be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c2:	bf88      	it	hi
 80008c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c8:	f63f aeaf 	bhi.w	800062a <__aeabi_dmul+0xde>
 80008cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d0:	bf04      	itt	eq
 80008d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008da:	f150 0000 	adcs.w	r0, r0, #0
 80008de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	e690      	b.n	800062a <__aeabi_dmul+0xde>
 8000908:	ea45 0e06 	orr.w	lr, r5, r6
 800090c:	e68d      	b.n	800062a <__aeabi_dmul+0xde>
 800090e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000912:	ea94 0f0c 	teq	r4, ip
 8000916:	bf08      	it	eq
 8000918:	ea95 0f0c 	teqeq	r5, ip
 800091c:	f43f af3b 	beq.w	8000796 <__aeabi_dmul+0x24a>
 8000920:	ea94 0f0c 	teq	r4, ip
 8000924:	d10a      	bne.n	800093c <__aeabi_ddiv+0x19c>
 8000926:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092a:	f47f af34 	bne.w	8000796 <__aeabi_dmul+0x24a>
 800092e:	ea95 0f0c 	teq	r5, ip
 8000932:	f47f af25 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e72c      	b.n	8000796 <__aeabi_dmul+0x24a>
 800093c:	ea95 0f0c 	teq	r5, ip
 8000940:	d106      	bne.n	8000950 <__aeabi_ddiv+0x1b0>
 8000942:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000946:	f43f aefd 	beq.w	8000744 <__aeabi_dmul+0x1f8>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e722      	b.n	8000796 <__aeabi_dmul+0x24a>
 8000950:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095a:	f47f aec5 	bne.w	80006e8 <__aeabi_dmul+0x19c>
 800095e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000962:	f47f af0d 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000966:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096a:	f47f aeeb 	bne.w	8000744 <__aeabi_dmul+0x1f8>
 800096e:	e712      	b.n	8000796 <__aeabi_dmul+0x24a>

08000970 <__aeabi_d2uiz>:
 8000970:	004a      	lsls	r2, r1, #1
 8000972:	d211      	bcs.n	8000998 <__aeabi_d2uiz+0x28>
 8000974:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000978:	d211      	bcs.n	800099e <__aeabi_d2uiz+0x2e>
 800097a:	d50d      	bpl.n	8000998 <__aeabi_d2uiz+0x28>
 800097c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000980:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000984:	d40e      	bmi.n	80009a4 <__aeabi_d2uiz+0x34>
 8000986:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	4770      	bx	lr
 8000998:	f04f 0000 	mov.w	r0, #0
 800099c:	4770      	bx	lr
 800099e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a2:	d102      	bne.n	80009aa <__aeabi_d2uiz+0x3a>
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	4770      	bx	lr
 80009aa:	f04f 0000 	mov.w	r0, #0
 80009ae:	4770      	bx	lr

080009b0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80009b8:	2300      	movs	r3, #0
 80009ba:	73fb      	strb	r3, [r7, #15]
 80009bc:	2300      	movs	r3, #0
 80009be:	73bb      	strb	r3, [r7, #14]
 80009c0:	230f      	movs	r3, #15
 80009c2:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	78db      	ldrb	r3, [r3, #3]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d039      	beq.n	8000a40 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80009cc:	4b27      	ldr	r3, [pc, #156]	; (8000a6c <NVIC_Init+0xbc>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	43db      	mvns	r3, r3
 80009d2:	0a1b      	lsrs	r3, r3, #8
 80009d4:	b2db      	uxtb	r3, r3
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	f1c3 0304 	rsb	r3, r3, #4
 80009e2:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80009e4:	7b7a      	ldrb	r2, [r7, #13]
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	fa42 f303 	asr.w	r3, r2, r3
 80009ec:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	785b      	ldrb	r3, [r3, #1]
 80009f2:	461a      	mov	r2, r3
 80009f4:	7bbb      	ldrb	r3, [r7, #14]
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	789a      	ldrb	r2, [r3, #2]
 8000a00:	7b7b      	ldrb	r3, [r7, #13]
 8000a02:	4013      	ands	r3, r2
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	7bfb      	ldrb	r3, [r7, #15]
 8000a08:	4313      	orrs	r3, r2
 8000a0a:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000a0c:	7bfb      	ldrb	r3, [r7, #15]
 8000a0e:	011b      	lsls	r3, r3, #4
 8000a10:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000a12:	4a17      	ldr	r2, [pc, #92]	; (8000a70 <NVIC_Init+0xc0>)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	4413      	add	r3, r2
 8000a1a:	7bfa      	ldrb	r2, [r7, #15]
 8000a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a20:	4a13      	ldr	r2, [pc, #76]	; (8000a70 <NVIC_Init+0xc0>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	095b      	lsrs	r3, r3, #5
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	f003 031f 	and.w	r3, r3, #31
 8000a34:	2101      	movs	r1, #1
 8000a36:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a3a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000a3e:	e00f      	b.n	8000a60 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a40:	490b      	ldr	r1, [pc, #44]	; (8000a70 <NVIC_Init+0xc0>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	095b      	lsrs	r3, r3, #5
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	f003 031f 	and.w	r3, r3, #31
 8000a54:	2201      	movs	r2, #1
 8000a56:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000a58:	f100 0320 	add.w	r3, r0, #32
 8000a5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	e000ed00 	.word	0xe000ed00
 8000a70:	e000e100 	.word	0xe000e100

08000a74 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f023 0201 	bic.w	r2, r3, #1
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2200      	movs	r2, #0
 8000a92:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2221      	movs	r2, #33	; 0x21
 8000aaa:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a46      	ldr	r2, [pc, #280]	; (8000bc8 <DMA_DeInit+0x154>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d103      	bne.n	8000abc <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8000ab4:	4b45      	ldr	r3, [pc, #276]	; (8000bcc <DMA_DeInit+0x158>)
 8000ab6:	223d      	movs	r2, #61	; 0x3d
 8000ab8:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000aba:	e07e      	b.n	8000bba <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a44      	ldr	r2, [pc, #272]	; (8000bd0 <DMA_DeInit+0x15c>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d104      	bne.n	8000ace <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8000ac4:	4b41      	ldr	r3, [pc, #260]	; (8000bcc <DMA_DeInit+0x158>)
 8000ac6:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000aca:	609a      	str	r2, [r3, #8]
}
 8000acc:	e075      	b.n	8000bba <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4a40      	ldr	r2, [pc, #256]	; (8000bd4 <DMA_DeInit+0x160>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d104      	bne.n	8000ae0 <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8000ad6:	4b3d      	ldr	r3, [pc, #244]	; (8000bcc <DMA_DeInit+0x158>)
 8000ad8:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000adc:	609a      	str	r2, [r3, #8]
}
 8000ade:	e06c      	b.n	8000bba <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a3d      	ldr	r2, [pc, #244]	; (8000bd8 <DMA_DeInit+0x164>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d104      	bne.n	8000af2 <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8000ae8:	4b38      	ldr	r3, [pc, #224]	; (8000bcc <DMA_DeInit+0x158>)
 8000aea:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000aee:	609a      	str	r2, [r3, #8]
}
 8000af0:	e063      	b.n	8000bba <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4a39      	ldr	r2, [pc, #228]	; (8000bdc <DMA_DeInit+0x168>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d103      	bne.n	8000b02 <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8000afa:	4b34      	ldr	r3, [pc, #208]	; (8000bcc <DMA_DeInit+0x158>)
 8000afc:	4a38      	ldr	r2, [pc, #224]	; (8000be0 <DMA_DeInit+0x16c>)
 8000afe:	60da      	str	r2, [r3, #12]
}
 8000b00:	e05b      	b.n	8000bba <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a37      	ldr	r2, [pc, #220]	; (8000be4 <DMA_DeInit+0x170>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d103      	bne.n	8000b12 <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8000b0a:	4b30      	ldr	r3, [pc, #192]	; (8000bcc <DMA_DeInit+0x158>)
 8000b0c:	4a36      	ldr	r2, [pc, #216]	; (8000be8 <DMA_DeInit+0x174>)
 8000b0e:	60da      	str	r2, [r3, #12]
}
 8000b10:	e053      	b.n	8000bba <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	4a35      	ldr	r2, [pc, #212]	; (8000bec <DMA_DeInit+0x178>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d103      	bne.n	8000b22 <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8000b1a:	4b2c      	ldr	r3, [pc, #176]	; (8000bcc <DMA_DeInit+0x158>)
 8000b1c:	4a34      	ldr	r2, [pc, #208]	; (8000bf0 <DMA_DeInit+0x17c>)
 8000b1e:	60da      	str	r2, [r3, #12]
}
 8000b20:	e04b      	b.n	8000bba <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	4a33      	ldr	r2, [pc, #204]	; (8000bf4 <DMA_DeInit+0x180>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d104      	bne.n	8000b34 <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8000b2a:	4b28      	ldr	r3, [pc, #160]	; (8000bcc <DMA_DeInit+0x158>)
 8000b2c:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000b30:	60da      	str	r2, [r3, #12]
}
 8000b32:	e042      	b.n	8000bba <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a30      	ldr	r2, [pc, #192]	; (8000bf8 <DMA_DeInit+0x184>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d103      	bne.n	8000b44 <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8000b3c:	4b2f      	ldr	r3, [pc, #188]	; (8000bfc <DMA_DeInit+0x188>)
 8000b3e:	223d      	movs	r2, #61	; 0x3d
 8000b40:	609a      	str	r2, [r3, #8]
}
 8000b42:	e03a      	b.n	8000bba <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a2e      	ldr	r2, [pc, #184]	; (8000c00 <DMA_DeInit+0x18c>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d104      	bne.n	8000b56 <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8000b4c:	4b2b      	ldr	r3, [pc, #172]	; (8000bfc <DMA_DeInit+0x188>)
 8000b4e:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000b52:	609a      	str	r2, [r3, #8]
}
 8000b54:	e031      	b.n	8000bba <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a2a      	ldr	r2, [pc, #168]	; (8000c04 <DMA_DeInit+0x190>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d104      	bne.n	8000b68 <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8000b5e:	4b27      	ldr	r3, [pc, #156]	; (8000bfc <DMA_DeInit+0x188>)
 8000b60:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000b64:	609a      	str	r2, [r3, #8]
}
 8000b66:	e028      	b.n	8000bba <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a27      	ldr	r2, [pc, #156]	; (8000c08 <DMA_DeInit+0x194>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d104      	bne.n	8000b7a <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8000b70:	4b22      	ldr	r3, [pc, #136]	; (8000bfc <DMA_DeInit+0x188>)
 8000b72:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000b76:	609a      	str	r2, [r3, #8]
}
 8000b78:	e01f      	b.n	8000bba <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4a23      	ldr	r2, [pc, #140]	; (8000c0c <DMA_DeInit+0x198>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d103      	bne.n	8000b8a <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8000b82:	4b1e      	ldr	r3, [pc, #120]	; (8000bfc <DMA_DeInit+0x188>)
 8000b84:	4a16      	ldr	r2, [pc, #88]	; (8000be0 <DMA_DeInit+0x16c>)
 8000b86:	60da      	str	r2, [r3, #12]
}
 8000b88:	e017      	b.n	8000bba <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4a20      	ldr	r2, [pc, #128]	; (8000c10 <DMA_DeInit+0x19c>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d103      	bne.n	8000b9a <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8000b92:	4b1a      	ldr	r3, [pc, #104]	; (8000bfc <DMA_DeInit+0x188>)
 8000b94:	4a14      	ldr	r2, [pc, #80]	; (8000be8 <DMA_DeInit+0x174>)
 8000b96:	60da      	str	r2, [r3, #12]
}
 8000b98:	e00f      	b.n	8000bba <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	4a1d      	ldr	r2, [pc, #116]	; (8000c14 <DMA_DeInit+0x1a0>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d103      	bne.n	8000baa <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8000ba2:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <DMA_DeInit+0x188>)
 8000ba4:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <DMA_DeInit+0x17c>)
 8000ba6:	60da      	str	r2, [r3, #12]
}
 8000ba8:	e007      	b.n	8000bba <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4a1a      	ldr	r2, [pc, #104]	; (8000c18 <DMA_DeInit+0x1a4>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d103      	bne.n	8000bba <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8000bb2:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <DMA_DeInit+0x188>)
 8000bb4:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000bb8:	60da      	str	r2, [r3, #12]
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40026010 	.word	0x40026010
 8000bcc:	40026000 	.word	0x40026000
 8000bd0:	40026028 	.word	0x40026028
 8000bd4:	40026040 	.word	0x40026040
 8000bd8:	40026058 	.word	0x40026058
 8000bdc:	40026070 	.word	0x40026070
 8000be0:	2000003d 	.word	0x2000003d
 8000be4:	40026088 	.word	0x40026088
 8000be8:	20000f40 	.word	0x20000f40
 8000bec:	400260a0 	.word	0x400260a0
 8000bf0:	203d0000 	.word	0x203d0000
 8000bf4:	400260b8 	.word	0x400260b8
 8000bf8:	40026410 	.word	0x40026410
 8000bfc:	40026400 	.word	0x40026400
 8000c00:	40026428 	.word	0x40026428
 8000c04:	40026440 	.word	0x40026440
 8000c08:	40026458 	.word	0x40026458
 8000c0c:	40026470 	.word	0x40026470
 8000c10:	40026488 	.word	0x40026488
 8000c14:	400264a0 	.word	0x400264a0
 8000c18:	400264b8 	.word	0x400264b8

08000c1c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000c30:	68fa      	ldr	r2, [r7, #12]
 8000c32:	4b25      	ldr	r3, [pc, #148]	; (8000cc8 <DMA_Init+0xac>)
 8000c34:	4013      	ands	r3, r2
 8000c36:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000c46:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000c52:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	6a1b      	ldr	r3, [r3, #32]
 8000c58:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000c5e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c64:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000c6a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c70:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	68fa      	ldr	r2, [r7, #12]
 8000c7c:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f023 0307 	bic.w	r3, r3, #7
 8000c8a:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c94:	4313      	orrs	r3, r2
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	691a      	ldr	r2, [r3, #16]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	685a      	ldr	r2, [r3, #4]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	689a      	ldr	r2, [r3, #8]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	60da      	str	r2, [r3, #12]
}
 8000cba:	bf00      	nop
 8000cbc:	3714      	adds	r7, #20
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	f01c803f 	.word	0xf01c803f

08000ccc <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000cd8:	78fb      	ldrb	r3, [r7, #3]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d006      	beq.n	8000cec <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f043 0201 	orr.w	r2, r3, #1
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000cea:	e005      	b.n	8000cf8 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f023 0201 	bic.w	r2, r3, #1
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	601a      	str	r2, [r3, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d00f      	beq.n	8000d3c <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d006      	beq.n	8000d30 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	615a      	str	r2, [r3, #20]
 8000d2e:	e005      	b.n	8000d3c <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	695b      	ldr	r3, [r3, #20]
 8000d34:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	2b80      	cmp	r3, #128	; 0x80
 8000d40:	d014      	beq.n	8000d6c <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 8000d42:	79fb      	ldrb	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d008      	beq.n	8000d5a <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	f003 031e 	and.w	r3, r3, #30
 8000d52:	431a      	orrs	r2, r3
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8000d58:	e008      	b.n	8000d6c <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	f003 031e 	and.w	r3, r3, #30
 8000d64:	43db      	mvns	r3, r3
 8000d66:	401a      	ands	r2, r3
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	601a      	str	r2, [r3, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	3714      	adds	r7, #20
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b087      	sub	sp, #28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8000d82:	2300      	movs	r3, #0
 8000d84:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4a22      	ldr	r2, [pc, #136]	; (8000e1c <DMA_GetITStatus+0xa4>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d802      	bhi.n	8000d9c <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000d96:	4b22      	ldr	r3, [pc, #136]	; (8000e20 <DMA_GetITStatus+0xa8>)
 8000d98:	613b      	str	r3, [r7, #16]
 8000d9a:	e001      	b.n	8000da0 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000d9c:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <DMA_GetITStatus+0xac>)
 8000d9e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000da6:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d00a      	beq.n	8000dc4 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	0adb      	lsrs	r3, r3, #11
 8000db2:	f003 031e 	and.w	r3, r3, #30
 8000db6:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	e004      	b.n	8000dce <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	695b      	ldr	r3, [r3, #20]
 8000dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dcc:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d003      	beq.n	8000de0 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	e002      	b.n	8000de6 <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000dec:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000df0:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	4013      	ands	r3, r2
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d005      	beq.n	8000e08 <DMA_GetITStatus+0x90>
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d002      	beq.n	8000e08 <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8000e02:	2301      	movs	r3, #1
 8000e04:	75fb      	strb	r3, [r7, #23]
 8000e06:	e001      	b.n	8000e0c <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8000e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	371c      	adds	r7, #28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	4002640f 	.word	0x4002640f
 8000e20:	40026000 	.word	0x40026000
 8000e24:	40026400 	.word	0x40026400

08000e28 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a10      	ldr	r2, [pc, #64]	; (8000e78 <DMA_ClearITPendingBit+0x50>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d802      	bhi.n	8000e40 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000e3a:	4b10      	ldr	r3, [pc, #64]	; (8000e7c <DMA_ClearITPendingBit+0x54>)
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	e001      	b.n	8000e44 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <DMA_ClearITPendingBit+0x58>)
 8000e42:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d007      	beq.n	8000e5e <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000e54:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000e58:	68fa      	ldr	r2, [r7, #12]
 8000e5a:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 8000e5c:	e006      	b.n	8000e6c <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000e64:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	6093      	str	r3, [r2, #8]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	4002640f 	.word	0x4002640f
 8000e7c:	40026000 	.word	0x40026000
 8000e80:	40026400 	.word	0x40026400

08000e84 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	617b      	str	r3, [r7, #20]
 8000e9e:	e076      	b.n	8000f8e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000eb4:	68fa      	ldr	r2, [r7, #12]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d165      	bne.n	8000f88 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	2103      	movs	r1, #3
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	401a      	ands	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	791b      	ldrb	r3, [r3, #4]
 8000eda:	4619      	mov	r1, r3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee4:	431a      	orrs	r2, r3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	791b      	ldrb	r3, [r3, #4]
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d003      	beq.n	8000efa <GPIO_Init+0x76>
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	791b      	ldrb	r3, [r3, #4]
 8000ef6:	2b02      	cmp	r3, #2
 8000ef8:	d12e      	bne.n	8000f58 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689a      	ldr	r2, [r3, #8]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2103      	movs	r1, #3
 8000f04:	fa01 f303 	lsl.w	r3, r1, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	795b      	ldrb	r3, [r3, #5]
 8000f18:	4619      	mov	r1, r3
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f22:	431a      	orrs	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	685a      	ldr	r2, [r3, #4]
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	4619      	mov	r1, r3
 8000f32:	2301      	movs	r3, #1
 8000f34:	408b      	lsls	r3, r1
 8000f36:	43db      	mvns	r3, r3
 8000f38:	401a      	ands	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	7992      	ldrb	r2, [r2, #6]
 8000f46:	4611      	mov	r1, r2
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	b292      	uxth	r2, r2
 8000f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f50:	b292      	uxth	r2, r2
 8000f52:	431a      	orrs	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	68da      	ldr	r2, [r3, #12]
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2103      	movs	r1, #3
 8000f64:	fa01 f303 	lsl.w	r3, r1, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	79db      	ldrb	r3, [r3, #7]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f82:	431a      	orrs	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	2b0f      	cmp	r3, #15
 8000f92:	d985      	bls.n	8000ea0 <GPIO_Init+0x1c>
    }
  }
}
 8000f94:	bf00      	nop
 8000f96:	371c      	adds	r7, #28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
 8000fac:	4613      	mov	r3, r2
 8000fae:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000fb8:	787a      	ldrb	r2, [r7, #1]
 8000fba:	887b      	ldrh	r3, [r7, #2]
 8000fbc:	f003 0307 	and.w	r3, r3, #7
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000fc8:	887b      	ldrh	r3, [r7, #2]
 8000fca:	08db      	lsrs	r3, r3, #3
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	4618      	mov	r0, r3
 8000fd0:	887b      	ldrh	r3, [r7, #2]
 8000fd2:	08db      	lsrs	r3, r3, #3
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	3208      	adds	r2, #8
 8000fdc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000fe0:	887b      	ldrh	r3, [r7, #2]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	210f      	movs	r1, #15
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	ea02 0103 	and.w	r1, r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f100 0208 	add.w	r2, r0, #8
 8000ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000ffe:	887b      	ldrh	r3, [r7, #2]
 8001000:	08db      	lsrs	r3, r3, #3
 8001002:	b29b      	uxth	r3, r3
 8001004:	461a      	mov	r2, r3
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	3208      	adds	r2, #8
 800100a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4313      	orrs	r3, r2
 8001012:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001014:	887b      	ldrh	r3, [r7, #2]
 8001016:	08db      	lsrs	r3, r3, #3
 8001018:	b29b      	uxth	r3, r3
 800101a:	461a      	mov	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3208      	adds	r2, #8
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	; 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800103c:	2300      	movs	r3, #0
 800103e:	61bb      	str	r3, [r7, #24]
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
 8001048:	2302      	movs	r3, #2
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	2300      	movs	r3, #0
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	2302      	movs	r3, #2
 8001052:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001054:	4b47      	ldr	r3, [pc, #284]	; (8001174 <RCC_GetClocksFreq+0x140>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	f003 030c 	and.w	r3, r3, #12
 800105c:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	2b04      	cmp	r3, #4
 8001062:	d007      	beq.n	8001074 <RCC_GetClocksFreq+0x40>
 8001064:	2b08      	cmp	r3, #8
 8001066:	d009      	beq.n	800107c <RCC_GetClocksFreq+0x48>
 8001068:	2b00      	cmp	r3, #0
 800106a:	d13d      	bne.n	80010e8 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a42      	ldr	r2, [pc, #264]	; (8001178 <RCC_GetClocksFreq+0x144>)
 8001070:	601a      	str	r2, [r3, #0]
      break;
 8001072:	e03d      	b.n	80010f0 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	4a41      	ldr	r2, [pc, #260]	; (800117c <RCC_GetClocksFreq+0x148>)
 8001078:	601a      	str	r2, [r3, #0]
      break;
 800107a:	e039      	b.n	80010f0 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800107c:	4b3d      	ldr	r3, [pc, #244]	; (8001174 <RCC_GetClocksFreq+0x140>)
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	0d9b      	lsrs	r3, r3, #22
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001088:	4b3a      	ldr	r3, [pc, #232]	; (8001174 <RCC_GetClocksFreq+0x140>)
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001090:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d00c      	beq.n	80010b2 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001098:	4a38      	ldr	r2, [pc, #224]	; (800117c <RCC_GetClocksFreq+0x148>)
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a0:	4a34      	ldr	r2, [pc, #208]	; (8001174 <RCC_GetClocksFreq+0x140>)
 80010a2:	6852      	ldr	r2, [r2, #4]
 80010a4:	0992      	lsrs	r2, r2, #6
 80010a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010aa:	fb02 f303 	mul.w	r3, r2, r3
 80010ae:	61fb      	str	r3, [r7, #28]
 80010b0:	e00b      	b.n	80010ca <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80010b2:	4a31      	ldr	r2, [pc, #196]	; (8001178 <RCC_GetClocksFreq+0x144>)
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ba:	4a2e      	ldr	r2, [pc, #184]	; (8001174 <RCC_GetClocksFreq+0x140>)
 80010bc:	6852      	ldr	r2, [r2, #4]
 80010be:	0992      	lsrs	r2, r2, #6
 80010c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80010c4:	fb02 f303 	mul.w	r3, r2, r3
 80010c8:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80010ca:	4b2a      	ldr	r3, [pc, #168]	; (8001174 <RCC_GetClocksFreq+0x140>)
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	0c1b      	lsrs	r3, r3, #16
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	3301      	adds	r3, #1
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80010da:	69fa      	ldr	r2, [r7, #28]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	fbb2 f2f3 	udiv	r2, r2, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	601a      	str	r2, [r3, #0]
      break;
 80010e6:	e003      	b.n	80010f0 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a23      	ldr	r2, [pc, #140]	; (8001178 <RCC_GetClocksFreq+0x144>)
 80010ec:	601a      	str	r2, [r3, #0]
      break;
 80010ee:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80010f0:	4b20      	ldr	r3, [pc, #128]	; (8001174 <RCC_GetClocksFreq+0x140>)
 80010f2:	689b      	ldr	r3, [r3, #8]
 80010f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010f8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	091b      	lsrs	r3, r3, #4
 80010fe:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001100:	4a1f      	ldr	r2, [pc, #124]	; (8001180 <RCC_GetClocksFreq+0x14c>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	4413      	add	r3, r2
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	40da      	lsrs	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <RCC_GetClocksFreq+0x140>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001120:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	0a9b      	lsrs	r3, r3, #10
 8001126:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001128:	4a15      	ldr	r2, [pc, #84]	; (8001180 <RCC_GetClocksFreq+0x14c>)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	4413      	add	r3, r2
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	40da      	lsrs	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <RCC_GetClocksFreq+0x140>)
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001148:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	0b5b      	lsrs	r3, r3, #13
 800114e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001150:	4a0b      	ldr	r2, [pc, #44]	; (8001180 <RCC_GetClocksFreq+0x14c>)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	4413      	add	r3, r2
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685a      	ldr	r2, [r3, #4]
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	40da      	lsrs	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	60da      	str	r2, [r3, #12]
}
 8001168:	bf00      	nop
 800116a:	3724      	adds	r7, #36	; 0x24
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	40023800 	.word	0x40023800
 8001178:	00f42400 	.word	0x00f42400
 800117c:	007a1200 	.word	0x007a1200
 8001180:	20000000 	.word	0x20000000

08001184 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001190:	78fb      	ldrb	r3, [r7, #3]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d006      	beq.n	80011a4 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8001196:	490a      	ldr	r1, [pc, #40]	; (80011c0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001198:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <RCC_AHB1PeriphClockCmd+0x3c>)
 800119a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4313      	orrs	r3, r2
 80011a0:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80011a2:	e006      	b.n	80011b2 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80011a4:	4906      	ldr	r1, [pc, #24]	; (80011c0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <RCC_AHB1PeriphClockCmd+0x3c>)
 80011a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	43db      	mvns	r3, r3
 80011ae:	4013      	ands	r3, r2
 80011b0:	630b      	str	r3, [r1, #48]	; 0x30
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800

080011c4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80011d0:	78fb      	ldrb	r3, [r7, #3]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d006      	beq.n	80011e4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80011d6:	490a      	ldr	r1, [pc, #40]	; (8001200 <RCC_APB1PeriphClockCmd+0x3c>)
 80011d8:	4b09      	ldr	r3, [pc, #36]	; (8001200 <RCC_APB1PeriphClockCmd+0x3c>)
 80011da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4313      	orrs	r3, r2
 80011e0:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80011e2:	e006      	b.n	80011f2 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80011e4:	4906      	ldr	r1, [pc, #24]	; (8001200 <RCC_APB1PeriphClockCmd+0x3c>)
 80011e6:	4b06      	ldr	r3, [pc, #24]	; (8001200 <RCC_APB1PeriphClockCmd+0x3c>)
 80011e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	4013      	ands	r3, r2
 80011f0:	640b      	str	r3, [r1, #64]	; 0x40
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800

08001204 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001210:	78fb      	ldrb	r3, [r7, #3]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d006      	beq.n	8001224 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001216:	490a      	ldr	r1, [pc, #40]	; (8001240 <RCC_APB2PeriphClockCmd+0x3c>)
 8001218:	4b09      	ldr	r3, [pc, #36]	; (8001240 <RCC_APB2PeriphClockCmd+0x3c>)
 800121a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4313      	orrs	r3, r2
 8001220:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001222:	e006      	b.n	8001232 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001224:	4906      	ldr	r1, [pc, #24]	; (8001240 <RCC_APB2PeriphClockCmd+0x3c>)
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <RCC_APB2PeriphClockCmd+0x3c>)
 8001228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	43db      	mvns	r3, r3
 800122e:	4013      	ands	r3, r2
 8001230:	644b      	str	r3, [r1, #68]	; 0x44
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40023800 	.word	0x40023800

08001244 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800124e:	2300      	movs	r3, #0
 8001250:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	881b      	ldrh	r3, [r3, #0]
 8001256:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	4a29      	ldr	r2, [pc, #164]	; (8001300 <TIM_TimeBaseInit+0xbc>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d013      	beq.n	8001288 <TIM_TimeBaseInit+0x44>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a28      	ldr	r2, [pc, #160]	; (8001304 <TIM_TimeBaseInit+0xc0>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d00f      	beq.n	8001288 <TIM_TimeBaseInit+0x44>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800126e:	d00b      	beq.n	8001288 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a25      	ldr	r2, [pc, #148]	; (8001308 <TIM_TimeBaseInit+0xc4>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d007      	beq.n	8001288 <TIM_TimeBaseInit+0x44>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a24      	ldr	r2, [pc, #144]	; (800130c <TIM_TimeBaseInit+0xc8>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d003      	beq.n	8001288 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a23      	ldr	r2, [pc, #140]	; (8001310 <TIM_TimeBaseInit+0xcc>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d108      	bne.n	800129a <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001288:	89fb      	ldrh	r3, [r7, #14]
 800128a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800128e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	885a      	ldrh	r2, [r3, #2]
 8001294:	89fb      	ldrh	r3, [r7, #14]
 8001296:	4313      	orrs	r3, r2
 8001298:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a1d      	ldr	r2, [pc, #116]	; (8001314 <TIM_TimeBaseInit+0xd0>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d00c      	beq.n	80012bc <TIM_TimeBaseInit+0x78>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a1c      	ldr	r2, [pc, #112]	; (8001318 <TIM_TimeBaseInit+0xd4>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d008      	beq.n	80012bc <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80012aa:	89fb      	ldrh	r3, [r7, #14]
 80012ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80012b0:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	891a      	ldrh	r2, [r3, #8]
 80012b6:	89fb      	ldrh	r3, [r7, #14]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	89fa      	ldrh	r2, [r7, #14]
 80012c0:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	881a      	ldrh	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <TIM_TimeBaseInit+0xbc>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d003      	beq.n	80012e2 <TIM_TimeBaseInit+0x9e>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a09      	ldr	r2, [pc, #36]	; (8001304 <TIM_TimeBaseInit+0xc0>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d104      	bne.n	80012ec <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	7a9b      	ldrb	r3, [r3, #10]
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2201      	movs	r2, #1
 80012f0:	829a      	strh	r2, [r3, #20]
}
 80012f2:	bf00      	nop
 80012f4:	3714      	adds	r7, #20
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40010000 	.word	0x40010000
 8001304:	40010400 	.word	0x40010400
 8001308:	40000400 	.word	0x40000400
 800130c:	40000800 	.word	0x40000800
 8001310:	40000c00 	.word	0x40000c00
 8001314:	40001000 	.word	0x40001000
 8001318:	40001400 	.word	0x40001400

0800131c <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	460b      	mov	r3, r1
 8001326:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001328:	78fb      	ldrb	r3, [r7, #3]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d008      	beq.n	8001340 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	b29b      	uxth	r3, r3
 8001334:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001338:	b29a      	uxth	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 800133e:	e007      	b.n	8001350 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	881b      	ldrh	r3, [r3, #0]
 8001344:	b29b      	uxth	r3, r3
 8001346:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800134a:	b29a      	uxth	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	801a      	strh	r2, [r3, #0]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001368:	78fb      	ldrb	r3, [r7, #3]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d008      	beq.n	8001380 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	b29b      	uxth	r3, r3
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	b29a      	uxth	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 800137e:	e007      	b.n	8001390 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	b29b      	uxth	r3, r3
 8001386:	f023 0301 	bic.w	r3, r3, #1
 800138a:	b29a      	uxth	r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	801a      	strh	r2, [r3, #0]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	817b      	strh	r3, [r7, #10]
 80013aa:	2300      	movs	r3, #0
 80013ac:	81fb      	strh	r3, [r7, #14]
 80013ae:	2300      	movs	r3, #0
 80013b0:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	8c1b      	ldrh	r3, [r3, #32]
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80013bc:	b29a      	uxth	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	8c1b      	ldrh	r3, [r3, #32]
 80013c6:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	889b      	ldrh	r3, [r3, #4]
 80013cc:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	8b9b      	ldrh	r3, [r3, #28]
 80013d2:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 80013d4:	897b      	ldrh	r3, [r7, #10]
 80013d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013da:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80013dc:	897b      	ldrh	r3, [r7, #10]
 80013de:	f023 0303 	bic.w	r3, r3, #3
 80013e2:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	881a      	ldrh	r2, [r3, #0]
 80013e8:	897b      	ldrh	r3, [r7, #10]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80013ee:	89fb      	ldrh	r3, [r7, #14]
 80013f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80013f4:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	899b      	ldrh	r3, [r3, #12]
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	89fb      	ldrh	r3, [r7, #14]
 8001400:	4313      	orrs	r3, r2
 8001402:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	885b      	ldrh	r3, [r3, #2]
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	b29a      	uxth	r2, r3
 800140c:	89fb      	ldrh	r3, [r7, #14]
 800140e:	4313      	orrs	r3, r2
 8001410:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a22      	ldr	r2, [pc, #136]	; (80014a0 <TIM_OC3Init+0x104>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d003      	beq.n	8001422 <TIM_OC3Init+0x86>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a21      	ldr	r2, [pc, #132]	; (80014a4 <TIM_OC3Init+0x108>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d12b      	bne.n	800147a <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8001422:	89fb      	ldrh	r3, [r7, #14]
 8001424:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001428:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	89db      	ldrh	r3, [r3, #14]
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	b29a      	uxth	r2, r3
 8001432:	89fb      	ldrh	r3, [r7, #14]
 8001434:	4313      	orrs	r3, r2
 8001436:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8001438:	89fb      	ldrh	r3, [r7, #14]
 800143a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800143e:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	889b      	ldrh	r3, [r3, #4]
 8001444:	021b      	lsls	r3, r3, #8
 8001446:	b29a      	uxth	r2, r3
 8001448:	89fb      	ldrh	r3, [r7, #14]
 800144a:	4313      	orrs	r3, r2
 800144c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 800144e:	89bb      	ldrh	r3, [r7, #12]
 8001450:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001454:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8001456:	89bb      	ldrh	r3, [r7, #12]
 8001458:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800145c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	8a1b      	ldrh	r3, [r3, #16]
 8001462:	011b      	lsls	r3, r3, #4
 8001464:	b29a      	uxth	r2, r3
 8001466:	89bb      	ldrh	r3, [r7, #12]
 8001468:	4313      	orrs	r3, r2
 800146a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	8a5b      	ldrh	r3, [r3, #18]
 8001470:	011b      	lsls	r3, r3, #4
 8001472:	b29a      	uxth	r2, r3
 8001474:	89bb      	ldrh	r3, [r7, #12]
 8001476:	4313      	orrs	r3, r2
 8001478:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	89ba      	ldrh	r2, [r7, #12]
 800147e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	897a      	ldrh	r2, [r7, #10]
 8001484:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	689a      	ldr	r2, [r3, #8]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	89fa      	ldrh	r2, [r7, #14]
 8001492:	841a      	strh	r2, [r3, #32]
}
 8001494:	bf00      	nop
 8001496:	3714      	adds	r7, #20
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	40010000 	.word	0x40010000
 80014a4:	40010400 	.word	0x40010400

080014a8 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b085      	sub	sp, #20
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	81bb      	strh	r3, [r7, #12]
 80014b6:	2300      	movs	r3, #0
 80014b8:	817b      	strh	r3, [r7, #10]
 80014ba:	2300      	movs	r3, #0
 80014bc:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	8c1b      	ldrh	r3, [r3, #32]
 80014c2:	b29b      	uxth	r3, r3
 80014c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	8c1b      	ldrh	r3, [r3, #32]
 80014d2:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	889b      	ldrh	r3, [r3, #4]
 80014d8:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	8b9b      	ldrh	r3, [r3, #28]
 80014de:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 80014e0:	89bb      	ldrh	r3, [r7, #12]
 80014e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80014e6:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 80014e8:	89bb      	ldrh	r3, [r7, #12]
 80014ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014ee:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	881b      	ldrh	r3, [r3, #0]
 80014f4:	021b      	lsls	r3, r3, #8
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	89bb      	ldrh	r3, [r7, #12]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80014fe:	897b      	ldrh	r3, [r7, #10]
 8001500:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001504:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	899b      	ldrh	r3, [r3, #12]
 800150a:	031b      	lsls	r3, r3, #12
 800150c:	b29a      	uxth	r2, r3
 800150e:	897b      	ldrh	r3, [r7, #10]
 8001510:	4313      	orrs	r3, r2
 8001512:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	885b      	ldrh	r3, [r3, #2]
 8001518:	031b      	lsls	r3, r3, #12
 800151a:	b29a      	uxth	r2, r3
 800151c:	897b      	ldrh	r3, [r7, #10]
 800151e:	4313      	orrs	r3, r2
 8001520:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a12      	ldr	r2, [pc, #72]	; (8001570 <TIM_OC4Init+0xc8>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d003      	beq.n	8001532 <TIM_OC4Init+0x8a>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a11      	ldr	r2, [pc, #68]	; (8001574 <TIM_OC4Init+0xcc>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d10a      	bne.n	8001548 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8001532:	89fb      	ldrh	r3, [r7, #14]
 8001534:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001538:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	8a1b      	ldrh	r3, [r3, #16]
 800153e:	019b      	lsls	r3, r3, #6
 8001540:	b29a      	uxth	r2, r3
 8001542:	89fb      	ldrh	r3, [r7, #14]
 8001544:	4313      	orrs	r3, r2
 8001546:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	89fa      	ldrh	r2, [r7, #14]
 800154c:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	89ba      	ldrh	r2, [r7, #12]
 8001552:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	897a      	ldrh	r2, [r7, #10]
 8001560:	841a      	strh	r2, [r3, #32]
}
 8001562:	bf00      	nop
 8001564:	3714      	adds	r7, #20
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40010000 	.word	0x40010000
 8001574:	40010400 	.word	0x40010400

08001578 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	8b9b      	ldrh	r3, [r3, #28]
 800158c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 800158e:	89fb      	ldrh	r3, [r7, #14]
 8001590:	f023 0308 	bic.w	r3, r3, #8
 8001594:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8001596:	89fa      	ldrh	r2, [r7, #14]
 8001598:	887b      	ldrh	r3, [r7, #2]
 800159a:	4313      	orrs	r3, r2
 800159c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	89fa      	ldrh	r2, [r7, #14]
 80015a2:	839a      	strh	r2, [r3, #28]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80015bc:	2300      	movs	r3, #0
 80015be:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	8b9b      	ldrh	r3, [r3, #28]
 80015c4:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 80015c6:	89fb      	ldrh	r3, [r7, #14]
 80015c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015cc:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 80015ce:	887b      	ldrh	r3, [r7, #2]
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	b29a      	uxth	r2, r3
 80015d4:	89fb      	ldrh	r3, [r7, #14]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	89fa      	ldrh	r2, [r7, #14]
 80015de:	839a      	strh	r2, [r3, #28]
}
 80015e0:	bf00      	nop
 80015e2:	3714      	adds	r7, #20
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	807b      	strh	r3, [r7, #2]
 80015f8:	4613      	mov	r3, r2
 80015fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80015fc:	787b      	ldrb	r3, [r7, #1]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d008      	beq.n	8001614 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	899b      	ldrh	r3, [r3, #12]
 8001606:	b29a      	uxth	r2, r3
 8001608:	887b      	ldrh	r3, [r7, #2]
 800160a:	4313      	orrs	r3, r2
 800160c:	b29a      	uxth	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8001612:	e009      	b.n	8001628 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	899b      	ldrh	r3, [r3, #12]
 8001618:	b29a      	uxth	r2, r3
 800161a:	887b      	ldrh	r3, [r7, #2]
 800161c:	43db      	mvns	r3, r3
 800161e:	b29b      	uxth	r3, r3
 8001620:	4013      	ands	r3, r2
 8001622:	b29a      	uxth	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	819a      	strh	r2, [r3, #12]
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001640:	887b      	ldrh	r3, [r7, #2]
 8001642:	43db      	mvns	r3, r3
 8001644:	b29a      	uxth	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	821a      	strh	r2, [r3, #16]
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr

08001656 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	460b      	mov	r3, r1
 8001660:	807b      	strh	r3, [r7, #2]
 8001662:	4613      	mov	r3, r2
 8001664:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001666:	787b      	ldrb	r3, [r7, #1]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d008      	beq.n	800167e <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	899b      	ldrh	r3, [r3, #12]
 8001670:	b29a      	uxth	r2, r3
 8001672:	887b      	ldrh	r3, [r7, #2]
 8001674:	4313      	orrs	r3, r2
 8001676:	b29a      	uxth	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
 800167c:	e009      	b.n	8001692 <TIM_DMACmd+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	899b      	ldrh	r3, [r3, #12]
 8001682:	b29a      	uxth	r2, r3
 8001684:	887b      	ldrh	r3, [r7, #2]
 8001686:	43db      	mvns	r3, r3
 8001688:	b29b      	uxth	r3, r3
 800168a:	4013      	ands	r3, r2
 800168c:	b29a      	uxth	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	819a      	strh	r2, [r3, #12]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
	...

080016a0 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	; 0x28
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
 80016ae:	2300      	movs	r3, #0
 80016b0:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	8a1b      	ldrh	r3, [r3, #16]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80016c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	88db      	ldrh	r3, [r3, #6]
 80016ce:	461a      	mov	r2, r3
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	4313      	orrs	r3, r2
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80016d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d8:	b29a      	uxth	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	899b      	ldrh	r3, [r3, #12]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80016ec:	f023 030c 	bic.w	r3, r3, #12
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	889a      	ldrh	r2, [r3, #4]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	891b      	ldrh	r3, [r3, #8]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001702:	4313      	orrs	r3, r2
 8001704:	b29b      	uxth	r3, r3
 8001706:	461a      	mov	r2, r3
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	4313      	orrs	r3, r2
 800170c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	b29a      	uxth	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	8a9b      	ldrh	r3, [r3, #20]
 800171a:	b29b      	uxth	r3, r3
 800171c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 800171e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001720:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001724:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	899b      	ldrh	r3, [r3, #12]
 800172a:	461a      	mov	r2, r3
 800172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172e:	4313      	orrs	r3, r2
 8001730:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001734:	b29a      	uxth	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800173a:	f107 0308 	add.w	r3, r7, #8
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fc78 	bl	8001034 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4a30      	ldr	r2, [pc, #192]	; (8001808 <USART_Init+0x168>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d003      	beq.n	8001754 <USART_Init+0xb4>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4a2f      	ldr	r2, [pc, #188]	; (800180c <USART_Init+0x16c>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d102      	bne.n	800175a <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	623b      	str	r3, [r7, #32]
 8001758:	e001      	b.n	800175e <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	899b      	ldrh	r3, [r3, #12]
 8001762:	b29b      	uxth	r3, r3
 8001764:	b21b      	sxth	r3, r3
 8001766:	2b00      	cmp	r3, #0
 8001768:	da0c      	bge.n	8001784 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800176a:	6a3a      	ldr	r2, [r7, #32]
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	009a      	lsls	r2, r3, #2
 8001774:	441a      	add	r2, r3
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001780:	61fb      	str	r3, [r7, #28]
 8001782:	e00b      	b.n	800179c <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001784:	6a3a      	ldr	r2, [r7, #32]
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	009a      	lsls	r2, r3, #2
 800178e:	441a      	add	r2, r3
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	fbb2 f3f3 	udiv	r3, r2, r3
 800179a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	4a1c      	ldr	r2, [pc, #112]	; (8001810 <USART_Init+0x170>)
 80017a0:	fba2 2303 	umull	r2, r3, r2, r3
 80017a4:	095b      	lsrs	r3, r3, #5
 80017a6:	011b      	lsls	r3, r3, #4
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	091b      	lsrs	r3, r3, #4
 80017ae:	2264      	movs	r2, #100	; 0x64
 80017b0:	fb02 f303 	mul.w	r3, r2, r3
 80017b4:	69fa      	ldr	r2, [r7, #28]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	899b      	ldrh	r3, [r3, #12]
 80017be:	b29b      	uxth	r3, r3
 80017c0:	b21b      	sxth	r3, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	da0c      	bge.n	80017e0 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	3332      	adds	r3, #50	; 0x32
 80017cc:	4a10      	ldr	r2, [pc, #64]	; (8001810 <USART_Init+0x170>)
 80017ce:	fba2 2303 	umull	r2, r3, r2, r3
 80017d2:	095b      	lsrs	r3, r3, #5
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017da:	4313      	orrs	r3, r2
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
 80017de:	e00b      	b.n	80017f8 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	011b      	lsls	r3, r3, #4
 80017e4:	3332      	adds	r3, #50	; 0x32
 80017e6:	4a0a      	ldr	r2, [pc, #40]	; (8001810 <USART_Init+0x170>)
 80017e8:	fba2 2303 	umull	r2, r3, r2, r3
 80017ec:	095b      	lsrs	r3, r3, #5
 80017ee:	f003 030f 	and.w	r3, r3, #15
 80017f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f4:	4313      	orrs	r3, r2
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	811a      	strh	r2, [r3, #8]
}
 8001800:	bf00      	nop
 8001802:	3728      	adds	r7, #40	; 0x28
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40011000 	.word	0x40011000
 800180c:	40011400 	.word	0x40011400
 8001810:	51eb851f 	.word	0x51eb851f

08001814 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001820:	78fb      	ldrb	r3, [r7, #3]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d008      	beq.n	8001838 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	899b      	ldrh	r3, [r3, #12]
 800182a:	b29b      	uxth	r3, r3
 800182c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001830:	b29a      	uxth	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8001836:	e007      	b.n	8001848 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	899b      	ldrh	r3, [r3, #12]
 800183c:	b29b      	uxth	r3, r3
 800183e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001842:	b29a      	uxth	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	819a      	strh	r2, [r3, #12]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001860:	887b      	ldrh	r3, [r7, #2]
 8001862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001866:	b29a      	uxth	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	809a      	strh	r2, [r3, #4]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	460b      	mov	r3, r1
 8001882:	807b      	strh	r3, [r7, #2]
 8001884:	4613      	mov	r3, r2
 8001886:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001888:	2300      	movs	r3, #0
 800188a:	613b      	str	r3, [r7, #16]
 800188c:	2300      	movs	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	2300      	movs	r3, #0
 8001892:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800189c:	887b      	ldrh	r3, [r7, #2]
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	095b      	lsrs	r3, r3, #5
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 80018a6:	887b      	ldrh	r3, [r7, #2]
 80018a8:	f003 031f 	and.w	r3, r3, #31
 80018ac:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 80018ae:	2201      	movs	r2, #1
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d103      	bne.n	80018c6 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	330c      	adds	r3, #12
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	e009      	b.n	80018da <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d103      	bne.n	80018d4 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	3310      	adds	r3, #16
 80018d0:	617b      	str	r3, [r7, #20]
 80018d2:	e002      	b.n	80018da <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	3314      	adds	r3, #20
 80018d8:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80018da:	787b      	ldrb	r3, [r7, #1]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d006      	beq.n	80018ee <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	6811      	ldr	r1, [r2, #0]
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80018ec:	e006      	b.n	80018fc <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	6811      	ldr	r1, [r2, #0]
 80018f4:	68ba      	ldr	r2, [r7, #8]
 80018f6:	43d2      	mvns	r2, r2
 80018f8:	400a      	ands	r2, r1
 80018fa:	601a      	str	r2, [r3, #0]
}
 80018fc:	bf00      	nop
 80018fe:	371c      	adds	r7, #28
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr

08001908 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001914:	2300      	movs	r3, #0
 8001916:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	881b      	ldrh	r3, [r3, #0]
 800191c:	b29a      	uxth	r2, r3
 800191e:	887b      	ldrh	r3, [r7, #2]
 8001920:	4013      	ands	r3, r2
 8001922:	b29b      	uxth	r3, r3
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001928:	2301      	movs	r3, #1
 800192a:	73fb      	strb	r3, [r7, #15]
 800192c:	e001      	b.n	8001932 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 800192e:	2300      	movs	r3, #0
 8001930:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001932:	7bfb      	ldrb	r3, [r7, #15]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001940:	b480      	push	{r7}
 8001942:	b087      	sub	sp, #28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	460b      	mov	r3, r1
 800194a:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	2300      	movs	r3, #0
 8001956:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001958:	2300      	movs	r3, #0
 800195a:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800195c:	887b      	ldrh	r3, [r7, #2]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	095b      	lsrs	r3, r3, #5
 8001962:	b2db      	uxtb	r3, r3
 8001964:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001966:	887b      	ldrh	r3, [r7, #2]
 8001968:	f003 031f 	and.w	r3, r3, #31
 800196c:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800196e:	2201      	movs	r2, #1
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d107      	bne.n	800198e <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	899b      	ldrh	r3, [r3, #12]
 8001982:	b29b      	uxth	r3, r3
 8001984:	461a      	mov	r2, r3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	4013      	ands	r3, r2
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	e011      	b.n	80019b2 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	2b02      	cmp	r3, #2
 8001992:	d107      	bne.n	80019a4 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	8a1b      	ldrh	r3, [r3, #16]
 8001998:	b29b      	uxth	r3, r3
 800199a:	461a      	mov	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	4013      	ands	r3, r2
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	e006      	b.n	80019b2 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	8a9b      	ldrh	r3, [r3, #20]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	461a      	mov	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	4013      	ands	r3, r2
 80019b0:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 80019b2:	887b      	ldrh	r3, [r7, #2]
 80019b4:	0a1b      	lsrs	r3, r3, #8
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80019ba:	2201      	movs	r2, #1
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	881b      	ldrh	r3, [r3, #0]
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	461a      	mov	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4013      	ands	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d005      	beq.n	80019e4 <USART_GetITStatus+0xa4>
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d002      	beq.n	80019e4 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 80019de:	2301      	movs	r3, #1
 80019e0:	74fb      	strb	r3, [r7, #19]
 80019e2:	e001      	b.n	80019e8 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 80019e4:	2300      	movs	r3, #0
 80019e6:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80019e8:	7cfb      	ldrb	r3, [r7, #19]
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	371c      	adds	r7, #28
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b085      	sub	sp, #20
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	460b      	mov	r3, r1
 8001a00:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8001a02:	2300      	movs	r3, #0
 8001a04:	81fb      	strh	r3, [r7, #14]
 8001a06:	2300      	movs	r3, #0
 8001a08:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8001a0a:	887b      	ldrh	r3, [r7, #2]
 8001a0c:	0a1b      	lsrs	r3, r3, #8
 8001a0e:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8001a10:	89fb      	ldrh	r3, [r7, #14]
 8001a12:	2201      	movs	r2, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8001a1a:	89bb      	ldrh	r3, [r7, #12]
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	801a      	strh	r2, [r3, #0]
}
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <DELAY_init>:
uint32_t D_mS; // Global variable (ms)
uint32_t D_S; // Global variable (s)


void DELAY_init(void)
{
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
	RCC_ClocksTypeDef Clocks;
	RCC_GetClocksFreq(&Clocks);
 8001a36:	463b      	mov	r3, r7
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fafb 	bl	8001034 <RCC_GetClocksFreq>
	G_CLK = Clocks.SYSCLK_Frequency;	// Read the systemclock
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	4a3f      	ldr	r2, [pc, #252]	; (8001b40 <DELAY_init+0x110>)
 8001a42:	6013      	str	r3, [r2, #0]
	D_S  = (G_CLK*1.25)/9/2;	// Number of instructions in one second
 8001a44:	4b3e      	ldr	r3, [pc, #248]	; (8001b40 <DELAY_init+0x110>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fd09 	bl	8000460 <__aeabi_ui2d>
 8001a4e:	f04f 0200 	mov.w	r2, #0
 8001a52:	4b3c      	ldr	r3, [pc, #240]	; (8001b44 <DELAY_init+0x114>)
 8001a54:	f7fe fd7a 	bl	800054c <__aeabi_dmul>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	460c      	mov	r4, r1
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	4621      	mov	r1, r4
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	4b38      	ldr	r3, [pc, #224]	; (8001b48 <DELAY_init+0x118>)
 8001a66:	f7fe fe9b 	bl	80007a0 <__aeabi_ddiv>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	460c      	mov	r4, r1
 8001a6e:	4618      	mov	r0, r3
 8001a70:	4621      	mov	r1, r4
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a7a:	f7fe fe91 	bl	80007a0 <__aeabi_ddiv>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	460c      	mov	r4, r1
 8001a82:	4618      	mov	r0, r3
 8001a84:	4621      	mov	r1, r4
 8001a86:	f7fe ff73 	bl	8000970 <__aeabi_d2uiz>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	4b2f      	ldr	r3, [pc, #188]	; (8001b4c <DELAY_init+0x11c>)
 8001a8e:	601a      	str	r2, [r3, #0]
	D_mS = (G_CLK*1.25)/9000/2; // Number of instructions in one millisecond
 8001a90:	4b2b      	ldr	r3, [pc, #172]	; (8001b40 <DELAY_init+0x110>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe fce3 	bl	8000460 <__aeabi_ui2d>
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <DELAY_init+0x114>)
 8001aa0:	f7fe fd54 	bl	800054c <__aeabi_dmul>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	460c      	mov	r4, r1
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	4621      	mov	r1, r4
 8001aac:	a320      	add	r3, pc, #128	; (adr r3, 8001b30 <DELAY_init+0x100>)
 8001aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab2:	f7fe fe75 	bl	80007a0 <__aeabi_ddiv>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	460c      	mov	r4, r1
 8001aba:	4618      	mov	r0, r3
 8001abc:	4621      	mov	r1, r4
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ac6:	f7fe fe6b 	bl	80007a0 <__aeabi_ddiv>
 8001aca:	4603      	mov	r3, r0
 8001acc:	460c      	mov	r4, r1
 8001ace:	4618      	mov	r0, r3
 8001ad0:	4621      	mov	r1, r4
 8001ad2:	f7fe ff4d 	bl	8000970 <__aeabi_d2uiz>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <DELAY_init+0x120>)
 8001ada:	601a      	str	r2, [r3, #0]
	D_uS = (G_CLK*1.25)/9000000/2; // Number of instructions in one microsecond, largest rounding error
 8001adc:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <DELAY_init+0x110>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7fe fcbd 	bl	8000460 <__aeabi_ui2d>
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <DELAY_init+0x114>)
 8001aec:	f7fe fd2e 	bl	800054c <__aeabi_dmul>
 8001af0:	4603      	mov	r3, r0
 8001af2:	460c      	mov	r4, r1
 8001af4:	4618      	mov	r0, r3
 8001af6:	4621      	mov	r1, r4
 8001af8:	a30f      	add	r3, pc, #60	; (adr r3, 8001b38 <DELAY_init+0x108>)
 8001afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afe:	f7fe fe4f 	bl	80007a0 <__aeabi_ddiv>
 8001b02:	4603      	mov	r3, r0
 8001b04:	460c      	mov	r4, r1
 8001b06:	4618      	mov	r0, r3
 8001b08:	4621      	mov	r1, r4
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b12:	f7fe fe45 	bl	80007a0 <__aeabi_ddiv>
 8001b16:	4603      	mov	r3, r0
 8001b18:	460c      	mov	r4, r1
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	4621      	mov	r1, r4
 8001b1e:	f7fe ff27 	bl	8000970 <__aeabi_d2uiz>
 8001b22:	4602      	mov	r2, r0
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <DELAY_init+0x124>)
 8001b26:	601a      	str	r2, [r3, #0]
}
 8001b28:	bf00      	nop
 8001b2a:	3714      	adds	r7, #20
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd90      	pop	{r4, r7, pc}
 8001b30:	00000000 	.word	0x00000000
 8001b34:	40c19400 	.word	0x40c19400
 8001b38:	00000000 	.word	0x00000000
 8001b3c:	41612a88 	.word	0x41612a88
 8001b40:	20013368 	.word	0x20013368
 8001b44:	3ff40000 	.word	0x3ff40000
 8001b48:	40220000 	.word	0x40220000
 8001b4c:	2001336c 	.word	0x2001336c
 8001b50:	20013374 	.word	0x20013374
 8001b54:	20013370 	.word	0x20013370

08001b58 <UB_VGA_Screen_Init>:

//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
  uint16_t xp,yp;

  VGA.hsync_cnt=0;
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <UB_VGA_Screen_Init+0x74>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	801a      	strh	r2, [r3, #0]
  VGA.start_adr=0;
 8001b64:	4b19      	ldr	r3, [pc, #100]	; (8001bcc <UB_VGA_Screen_Init+0x74>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg=0;
 8001b6a:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <UB_VGA_Screen_Init+0x74>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]

  // RAM init total black
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8001b70:	2300      	movs	r3, #0
 8001b72:	80bb      	strh	r3, [r7, #4]
 8001b74:	e017      	b.n	8001ba6 <UB_VGA_Screen_Init+0x4e>
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 8001b76:	2300      	movs	r3, #0
 8001b78:	80fb      	strh	r3, [r7, #6]
 8001b7a:	e00d      	b.n	8001b98 <UB_VGA_Screen_Init+0x40>
      VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=0;
 8001b7c:	88ba      	ldrh	r2, [r7, #4]
 8001b7e:	4613      	mov	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4413      	add	r3, r2
 8001b84:	019b      	lsls	r3, r3, #6
 8001b86:	441a      	add	r2, r3
 8001b88:	88fb      	ldrh	r3, [r7, #6]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4a10      	ldr	r2, [pc, #64]	; (8001bd0 <UB_VGA_Screen_Init+0x78>)
 8001b8e:	2100      	movs	r1, #0
 8001b90:	54d1      	strb	r1, [r2, r3]
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	3301      	adds	r3, #1
 8001b96:	80fb      	strh	r3, [r7, #6]
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001b9e:	d9ed      	bls.n	8001b7c <UB_VGA_Screen_Init+0x24>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8001ba0:	88bb      	ldrh	r3, [r7, #4]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	80bb      	strh	r3, [r7, #4]
 8001ba6:	88bb      	ldrh	r3, [r7, #4]
 8001ba8:	2bef      	cmp	r3, #239	; 0xef
 8001baa:	d9e4      	bls.n	8001b76 <UB_VGA_Screen_Init+0x1e>
    }
  }

  // init IO-Pins
  P_VGA_InitIO();
 8001bac:	f000 f85e 	bl	8001c6c <P_VGA_InitIO>
  // init Timer
  P_VGA_InitTIM();
 8001bb0:	f000 f8b0 	bl	8001d14 <P_VGA_InitTIM>
  // init DMA
  P_VGA_InitDMA();
 8001bb4:	f000 f940 	bl	8001e38 <P_VGA_InitDMA>
  // init Interrupts
  P_VGA_InitINT();
 8001bb8:	f000 f912 	bl	8001de0 <P_VGA_InitINT>

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg=DMA2_Stream5->CR;
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <UB_VGA_Screen_Init+0x7c>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a02      	ldr	r2, [pc, #8]	; (8001bcc <UB_VGA_Screen_Init+0x74>)
 8001bc2:	6093      	str	r3, [r2, #8]
}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000590 	.word	0x20000590
 8001bd0:	200005a0 	.word	0x200005a0
 8001bd4:	40026488 	.word	0x40026488

08001bd8 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8001be2:	2300      	movs	r3, #0
 8001be4:	81bb      	strh	r3, [r7, #12]
 8001be6:	e012      	b.n	8001c0e <UB_VGA_FillScreen+0x36>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 8001be8:	2300      	movs	r3, #0
 8001bea:	81fb      	strh	r3, [r7, #14]
 8001bec:	e008      	b.n	8001c00 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp,yp,color);
 8001bee:	79fa      	ldrb	r2, [r7, #7]
 8001bf0:	89b9      	ldrh	r1, [r7, #12]
 8001bf2:	89fb      	ldrh	r3, [r7, #14]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 f811 	bl	8001c1c <UB_VGA_SetPixel>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 8001bfa:	89fb      	ldrh	r3, [r7, #14]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	81fb      	strh	r3, [r7, #14]
 8001c00:	89fb      	ldrh	r3, [r7, #14]
 8001c02:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001c06:	d3f2      	bcc.n	8001bee <UB_VGA_FillScreen+0x16>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8001c08:	89bb      	ldrh	r3, [r7, #12]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	81bb      	strh	r3, [r7, #12]
 8001c0e:	89bb      	ldrh	r3, [r7, #12]
 8001c10:	2bef      	cmp	r3, #239	; 0xef
 8001c12:	d9e9      	bls.n	8001be8 <UB_VGA_FillScreen+0x10>
    }
  }
}
 8001c14:	bf00      	nop
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	80fb      	strh	r3, [r7, #6]
 8001c26:	460b      	mov	r3, r1
 8001c28:	80bb      	strh	r3, [r7, #4]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	70fb      	strb	r3, [r7, #3]
  if(xp>=VGA_DISPLAY_X) xp=0;
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001c34:	d301      	bcc.n	8001c3a <UB_VGA_SetPixel+0x1e>
 8001c36:	2300      	movs	r3, #0
 8001c38:	80fb      	strh	r3, [r7, #6]
  if(yp>=VGA_DISPLAY_Y) yp=0;
 8001c3a:	88bb      	ldrh	r3, [r7, #4]
 8001c3c:	2bef      	cmp	r3, #239	; 0xef
 8001c3e:	d901      	bls.n	8001c44 <UB_VGA_SetPixel+0x28>
 8001c40:	2300      	movs	r3, #0
 8001c42:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=color;
 8001c44:	88ba      	ldrh	r2, [r7, #4]
 8001c46:	4613      	mov	r3, r2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	4413      	add	r3, r2
 8001c4c:	019b      	lsls	r3, r3, #6
 8001c4e:	441a      	add	r2, r3
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	4413      	add	r3, r2
 8001c54:	4904      	ldr	r1, [pc, #16]	; (8001c68 <UB_VGA_SetPixel+0x4c>)
 8001c56:	78fa      	ldrb	r2, [r7, #3]
 8001c58:	54ca      	strb	r2, [r1, r3]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	200005a0 	.word	0x200005a0

08001c6c <P_VGA_InitIO>:
//--------------------------------------------------------------
// interne Funktionen
// init aller IO-Pins
//--------------------------------------------------------------
void P_VGA_InitIO(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
  // init RGB-Pins (PE8 - PE15)
  // as normal GPIOs
  //---------------------------------------------
 
  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8001c72:	2101      	movs	r1, #1
 8001c74:	2010      	movs	r0, #16
 8001c76:	f7ff fa85 	bl	8001184 <RCC_AHB1PeriphClockCmd>

  // Config as Digital output
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 |
 8001c7a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001c7e:	603b      	str	r3, [r7, #0]
        GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001c80:	2301      	movs	r3, #1
 8001c82:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001c84:	2300      	movs	r3, #0
 8001c86:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001c90:	463b      	mov	r3, r7
 8001c92:	4619      	mov	r1, r3
 8001c94:	481d      	ldr	r0, [pc, #116]	; (8001d0c <P_VGA_InitIO+0xa0>)
 8001c96:	f7ff f8f5 	bl	8000e84 <GPIO_Init>

  GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 8001c9a:	4b1c      	ldr	r3, [pc, #112]	; (8001d0c <P_VGA_InitIO+0xa0>)
 8001c9c:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8001ca0:	835a      	strh	r2, [r3, #26]
  // init of the H-Sync Pin (PB11)
  // using Timer2 and CH4
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	2002      	movs	r0, #2
 8001ca6:	f7ff fa6d 	bl	8001184 <RCC_AHB1PeriphClockCmd>

  // Config Pins as Digital-out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 8001caa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cae:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001cc0:	463b      	mov	r3, r7
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4812      	ldr	r0, [pc, #72]	; (8001d10 <P_VGA_InitIO+0xa4>)
 8001cc6:	f7ff f8dd 	bl	8000e84 <GPIO_Init>

  // alternative function connect with IO
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_TIM2);
 8001cca:	2201      	movs	r2, #1
 8001ccc:	210b      	movs	r1, #11
 8001cce:	4810      	ldr	r0, [pc, #64]	; (8001d10 <P_VGA_InitIO+0xa4>)
 8001cd0:	f7ff f966 	bl	8000fa0 <GPIO_PinAFConfig>
  // init of V-Sync Pin (PB12)
  // using GPIO
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	2002      	movs	r0, #2
 8001cd8:	f7ff fa54 	bl	8001184 <RCC_AHB1PeriphClockCmd>

  // Config of the Pins as Digital out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8001cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ce0:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001cea:	2301      	movs	r3, #1
 8001cec:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001cf2:	463b      	mov	r3, r7
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4806      	ldr	r0, [pc, #24]	; (8001d10 <P_VGA_InitIO+0xa4>)
 8001cf8:	f7ff f8c4 	bl	8000e84 <GPIO_Init>

  GPIOB->BSRRL = GPIO_Pin_12;
 8001cfc:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <P_VGA_InitIO+0xa4>)
 8001cfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d02:	831a      	strh	r2, [r3, #24]
}
 8001d04:	bf00      	nop
 8001d06:	3708      	adds	r7, #8
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	40020400 	.word	0x40020400

08001d14 <P_VGA_InitTIM>:
//--------------------------------------------------------------
// internal Function
// init Timer
//--------------------------------------------------------------
void P_VGA_InitTIM(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af00      	add	r7, sp, #0
  // init of Timer1 for
  // Pixeldata via DMA
  //---------------------------------------------

  // Clock enable
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	f7ff fa71 	bl	8001204 <RCC_APB2PeriphClockCmd>

  // Timer1 init
  TIM_TimeBaseStructure.TIM_Period =  VGA_TIM1_PERIODE;
 8001d22:	230b      	movs	r3, #11
 8001d24:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM1_PRESCALE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4619      	mov	r1, r3
 8001d38:	4828      	ldr	r0, [pc, #160]	; (8001ddc <P_VGA_InitTIM+0xc8>)
 8001d3a:	f7ff fa83 	bl	8001244 <TIM_TimeBaseInit>
  // CH4 for HSYNC-Signal
  // CH3 for DMA Trigger start
  //---------------------------------------------

  // Clock enable
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001d3e:	2101      	movs	r1, #1
 8001d40:	2001      	movs	r0, #1
 8001d42:	f7ff fa3f 	bl	80011c4 <RCC_APB1PeriphClockCmd>

  // Timer2 init
  TIM_TimeBaseStructure.TIM_Period = VGA_TIM2_HSYNC_PERIODE;
 8001d46:	f640 236b 	movw	r3, #2667	; 0xa6b
 8001d4a:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8001d50:	2300      	movs	r3, #0
 8001d52:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001d54:	2300      	movs	r3, #0
 8001d56:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d62:	f7ff fa6f 	bl	8001244 <TIM_TimeBaseInit>

  // Timer2 Channel 3 ( for DMA Trigger start)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8001d66:	2360      	movs	r3, #96	; 0x60
 8001d68:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HTRIGGER_START-VGA_TIM2_DMA_DELAY;
 8001d6e:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8001d72:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8001d74:	2302      	movs	r3, #2
 8001d76:	81bb      	strh	r3, [r7, #12]
  TIM_OC3Init(TIM2, &TIM_OCInitStructure);
 8001d78:	463b      	mov	r3, r7
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d80:	f7ff fb0c 	bl	800139c <TIM_OC3Init>
  TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8001d84:	2108      	movs	r1, #8
 8001d86:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001d8a:	f7ff fbf5 	bl	8001578 <TIM_OC3PreloadConfig>

  // Timer2 Channel 4 (for HSYNC)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8001d8e:	2360      	movs	r3, #96	; 0x60
 8001d90:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8001d92:	2301      	movs	r3, #1
 8001d94:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HSYNC_IMP;
 8001d96:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001d9a:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	81bb      	strh	r3, [r7, #12]
  TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 8001da0:	463b      	mov	r3, r7
 8001da2:	4619      	mov	r1, r3
 8001da4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001da8:	f7ff fb7e 	bl	80014a8 <TIM_OC4Init>
  TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8001dac:	2108      	movs	r1, #8
 8001dae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001db2:	f7ff fbfd 	bl	80015b0 <TIM_OC4PreloadConfig>
  //---------------------------------------------
  // enable all Timers
  //---------------------------------------------

  // Timer1 enable
  TIM_ARRPreloadConfig(TIM1, ENABLE);
 8001db6:	2101      	movs	r1, #1
 8001db8:	4808      	ldr	r0, [pc, #32]	; (8001ddc <P_VGA_InitTIM+0xc8>)
 8001dba:	f7ff faaf 	bl	800131c <TIM_ARRPreloadConfig>

  // Timer2 enable
  TIM_ARRPreloadConfig(TIM2, ENABLE);
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001dc4:	f7ff faaa 	bl	800131c <TIM_ARRPreloadConfig>
  TIM_Cmd(TIM2, ENABLE);
 8001dc8:	2101      	movs	r1, #1
 8001dca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001dce:	f7ff fac5 	bl	800135c <TIM_Cmd>

}
 8001dd2:	bf00      	nop
 8001dd4:	3720      	adds	r7, #32
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40010000 	.word	0x40010000

08001de0 <P_VGA_InitINT>:
//--------------------------------------------------------------
// internal Function
// init Interrupts
//--------------------------------------------------------------
void P_VGA_InitINT(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
  // init from DMA Interrupt
  // for TransferComplete Interrupt
  // DMA2, Stream5, Channel6
  //---------------------------------------------

  DMA_ITConfig(DMA2_Stream5, DMA_IT_TC, ENABLE);
 8001de6:	2201      	movs	r2, #1
 8001de8:	2110      	movs	r1, #16
 8001dea:	4812      	ldr	r0, [pc, #72]	; (8001e34 <P_VGA_InitINT+0x54>)
 8001dec:	f7fe ff8a 	bl	8000d04 <DMA_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream5_IRQn;
 8001df0:	2344      	movs	r3, #68	; 0x44
 8001df2:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe fdd4 	bl	80009b0 <NVIC_Init>
  // init of Timer2 Interrupt
  // for HSync-Counter using Update
  // for DMA Trigger START using CH3
  //---------------------------------------------

  TIM_ITConfig(TIM2,TIM_IT_CC3,ENABLE);
 8001e08:	2201      	movs	r2, #1
 8001e0a:	2108      	movs	r1, #8
 8001e0c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001e10:	f7ff fbec 	bl	80015ec <TIM_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8001e14:	231c      	movs	r3, #28
 8001e16:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001e20:	2301      	movs	r3, #1
 8001e22:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8001e24:	1d3b      	adds	r3, r7, #4
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe fdc2 	bl	80009b0 <NVIC_Init>
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40026488 	.word	0x40026488

08001e38 <P_VGA_InitDMA>:
//--------------------------------------------------------------
// internal Function
// init DMA
//--------------------------------------------------------------
void P_VGA_InitDMA(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b090      	sub	sp, #64	; 0x40
 8001e3c:	af00      	add	r7, sp, #0
  // (look at page 217 of the Ref Manual)
  // DMA=2, Channel=6, Stream=5
  //---------------------------------------------

  // Clock Enable (DMA)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 8001e3e:	2101      	movs	r1, #1
 8001e40:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001e44:	f7ff f99e 	bl	8001184 <RCC_AHB1PeriphClockCmd>

  // DMA init (DMA2, Channel6, Stream5)
  DMA_Cmd(DMA2_Stream5, DISABLE);
 8001e48:	2100      	movs	r1, #0
 8001e4a:	481b      	ldr	r0, [pc, #108]	; (8001eb8 <P_VGA_InitDMA+0x80>)
 8001e4c:	f7fe ff3e 	bl	8000ccc <DMA_Cmd>
  DMA_DeInit(DMA2_Stream5);
 8001e50:	4819      	ldr	r0, [pc, #100]	; (8001eb8 <P_VGA_InitDMA+0x80>)
 8001e52:	f7fe fe0f 	bl	8000a74 <DMA_DeInit>
  DMA_InitStructure.DMA_Channel = DMA_Channel_6;
 8001e56:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8001e5a:	607b      	str	r3, [r7, #4]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)VGA_GPIOE_ODR_ADDRESS;
 8001e5c:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <P_VGA_InitDMA+0x84>)
 8001e5e:	60bb      	str	r3, [r7, #8]
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&VGA_RAM1;
 8001e60:	4b17      	ldr	r3, [pc, #92]	; (8001ec0 <P_VGA_InitDMA+0x88>)
 8001e62:	60fb      	str	r3, [r7, #12]
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8001e64:	2340      	movs	r3, #64	; 0x40
 8001e66:	613b      	str	r3, [r7, #16]
  DMA_InitStructure.DMA_BufferSize = VGA_DISPLAY_X+1;
 8001e68:	f240 1341 	movw	r3, #321	; 0x141
 8001e6c:	617b      	str	r3, [r7, #20]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8001e72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e76:	61fb      	str	r3, [r7, #28]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	623b      	str	r3, [r7, #32]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8001e80:	2300      	movs	r3, #0
 8001e82:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8001e84:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	633b      	str	r3, [r7, #48]	; 0x30
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	637b      	str	r3, [r7, #52]	; 0x34
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8001e92:	2300      	movs	r3, #0
 8001e94:	63bb      	str	r3, [r7, #56]	; 0x38
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8001e96:	2300      	movs	r3, #0
 8001e98:	63fb      	str	r3, [r7, #60]	; 0x3c
  DMA_Init(DMA2_Stream5, &DMA_InitStructure);
 8001e9a:	1d3b      	adds	r3, r7, #4
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4806      	ldr	r0, [pc, #24]	; (8001eb8 <P_VGA_InitDMA+0x80>)
 8001ea0:	f7fe febc 	bl	8000c1c <DMA_Init>

  // DMA-Timer1 enable
  TIM_DMACmd(TIM1,TIM_DMA_Update,ENABLE);
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001eaa:	4806      	ldr	r0, [pc, #24]	; (8001ec4 <P_VGA_InitDMA+0x8c>)
 8001eac:	f7ff fbd3 	bl	8001656 <TIM_DMACmd>
}
 8001eb0:	bf00      	nop
 8001eb2:	3740      	adds	r7, #64	; 0x40
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40026488 	.word	0x40026488
 8001ebc:	40021015 	.word	0x40021015
 8001ec0:	200005a0 	.word	0x200005a0
 8001ec4:	40010000 	.word	0x40010000

08001ec8 <TIM2_IRQHandler>:
//
//   CC3-Interrupt    -> starts from DMA
// Watch it.. higher troughput when interrupt flag is left alone
//--------------------------------------------------------------
void TIM2_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0

  // Interrupt of Timer2 CH3 occurred (for Trigger start)
  TIM_ClearITPendingBit(TIM2, TIM_IT_CC3);
 8001ecc:	2108      	movs	r1, #8
 8001ece:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ed2:	f7ff fbaf 	bl	8001634 <TIM_ClearITPendingBit>

  VGA.hsync_cnt++;
 8001ed6:	4b26      	ldr	r3, [pc, #152]	; (8001f70 <TIM2_IRQHandler+0xa8>)
 8001ed8:	881b      	ldrh	r3, [r3, #0]
 8001eda:	3301      	adds	r3, #1
 8001edc:	b29a      	uxth	r2, r3
 8001ede:	4b24      	ldr	r3, [pc, #144]	; (8001f70 <TIM2_IRQHandler+0xa8>)
 8001ee0:	801a      	strh	r2, [r3, #0]
  if(VGA.hsync_cnt>=VGA_VSYNC_PERIODE) {
 8001ee2:	4b23      	ldr	r3, [pc, #140]	; (8001f70 <TIM2_IRQHandler+0xa8>)
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8001eea:	d905      	bls.n	8001ef8 <TIM2_IRQHandler+0x30>
    // -----------
    VGA.hsync_cnt=0;
 8001eec:	4b20      	ldr	r3, [pc, #128]	; (8001f70 <TIM2_IRQHandler+0xa8>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr=(uint32_t)(&VGA_RAM1[0]);
 8001ef2:	4a20      	ldr	r2, [pc, #128]	; (8001f74 <TIM2_IRQHandler+0xac>)
 8001ef4:	4b1e      	ldr	r3, [pc, #120]	; (8001f70 <TIM2_IRQHandler+0xa8>)
 8001ef6:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  if(VGA.hsync_cnt<VGA_VSYNC_IMP) {
 8001ef8:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <TIM2_IRQHandler+0xa8>)
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d804      	bhi.n	8001f0a <TIM2_IRQHandler+0x42>
    // HSync low
    GPIOB->BSRRH = GPIO_Pin_12;
 8001f00:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <TIM2_IRQHandler+0xb0>)
 8001f02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f06:	835a      	strh	r2, [r3, #26]
 8001f08:	e003      	b.n	8001f12 <TIM2_IRQHandler+0x4a>
  }
  else {
    // HSync High
    GPIOB->BSRRL = GPIO_Pin_12;
 8001f0a:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <TIM2_IRQHandler+0xb0>)
 8001f0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f10:	831a      	strh	r2, [r3, #24]
  }

  // Test for DMA start
  if((VGA.hsync_cnt>=VGA_VSYNC_BILD_START) && (VGA.hsync_cnt<=VGA_VSYNC_BILD_STOP)) {
 8001f12:	4b17      	ldr	r3, [pc, #92]	; (8001f70 <TIM2_IRQHandler+0xa8>)
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	2b23      	cmp	r3, #35	; 0x23
 8001f18:	d927      	bls.n	8001f6a <TIM2_IRQHandler+0xa2>
 8001f1a:	4b15      	ldr	r3, [pc, #84]	; (8001f70 <TIM2_IRQHandler+0xa8>)
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	f240 2202 	movw	r2, #514	; 0x202
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d821      	bhi.n	8001f6a <TIM2_IRQHandler+0xa2>
    // after FP start => DMA Transfer

    // DMA2 init
	DMA2_Stream5->CR=VGA.dma2_cr_reg;
 8001f26:	4a15      	ldr	r2, [pc, #84]	; (8001f7c <TIM2_IRQHandler+0xb4>)
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <TIM2_IRQHandler+0xa8>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR=VGA.start_adr;
 8001f2e:	4a13      	ldr	r2, [pc, #76]	; (8001f7c <TIM2_IRQHandler+0xb4>)
 8001f30:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <TIM2_IRQHandler+0xa8>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1|=TIM_CR1_CEN;
 8001f36:	4a12      	ldr	r2, [pc, #72]	; (8001f80 <TIM2_IRQHandler+0xb8>)
 8001f38:	4b11      	ldr	r3, [pc, #68]	; (8001f80 <TIM2_IRQHandler+0xb8>)
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	8013      	strh	r3, [r2, #0]
    // DMA2 enable
    DMA2_Stream5->CR|=DMA_SxCR_EN;
 8001f46:	4a0d      	ldr	r2, [pc, #52]	; (8001f7c <TIM2_IRQHandler+0xb4>)
 8001f48:	4b0c      	ldr	r3, [pc, #48]	; (8001f7c <TIM2_IRQHandler+0xb4>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6013      	str	r3, [r2, #0]

    // Test Adrespointer for high
    if((VGA.hsync_cnt & 0x01)!=0) {
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <TIM2_IRQHandler+0xa8>)
 8001f54:	881b      	ldrh	r3, [r3, #0]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d005      	beq.n	8001f6a <TIM2_IRQHandler+0xa2>
      // inc after Hsync
      VGA.start_adr+=(VGA_DISPLAY_X+1);
 8001f5e:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <TIM2_IRQHandler+0xa8>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f203 1341 	addw	r3, r3, #321	; 0x141
 8001f66:	4a02      	ldr	r2, [pc, #8]	; (8001f70 <TIM2_IRQHandler+0xa8>)
 8001f68:	6053      	str	r3, [r2, #4]
    }
  }
}
 8001f6a:	bf00      	nop
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	20000590 	.word	0x20000590
 8001f74:	200005a0 	.word	0x200005a0
 8001f78:	40020400 	.word	0x40020400
 8001f7c:	40026488 	.word	0x40026488
 8001f80:	40010000 	.word	0x40010000

08001f84 <DMA2_Stream5_IRQHandler>:
//   after TransferCompleteInterrupt -> stop DMA
//
// still a bit buggy
//--------------------------------------------------------------
void DMA2_Stream5_IRQHandler(void)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
  if(DMA_GetITStatus(DMA2_Stream5, DMA_IT_TCIF5))
 8001f88:	490d      	ldr	r1, [pc, #52]	; (8001fc0 <DMA2_Stream5_IRQHandler+0x3c>)
 8001f8a:	480e      	ldr	r0, [pc, #56]	; (8001fc4 <DMA2_Stream5_IRQHandler+0x40>)
 8001f8c:	f7fe fef4 	bl	8000d78 <DMA_GetITStatus>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d012      	beq.n	8001fbc <DMA2_Stream5_IRQHandler+0x38>
  {
    // TransferInterruptComplete Interrupt from DMA2
    DMA_ClearITPendingBit(DMA2_Stream5, DMA_IT_TCIF5);
 8001f96:	490a      	ldr	r1, [pc, #40]	; (8001fc0 <DMA2_Stream5_IRQHandler+0x3c>)
 8001f98:	480a      	ldr	r0, [pc, #40]	; (8001fc4 <DMA2_Stream5_IRQHandler+0x40>)
 8001f9a:	f7fe ff45 	bl	8000e28 <DMA_ClearITPendingBit>
    // stop after all pixels => DMA Transfer stop

    // Timer1 stop
    TIM1->CR1&=~TIM_CR1_CEN;
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	; (8001fc8 <DMA2_Stream5_IRQHandler+0x44>)
 8001fa0:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <DMA2_Stream5_IRQHandler+0x44>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	f023 0301 	bic.w	r3, r3, #1
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	8013      	strh	r3, [r2, #0]
    // DMA2 disable
    DMA2_Stream5->CR=0;
 8001fae:	4b05      	ldr	r3, [pc, #20]	; (8001fc4 <DMA2_Stream5_IRQHandler+0x40>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
    // switch on black
    GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <DMA2_Stream5_IRQHandler+0x48>)
 8001fb6:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8001fba:	835a      	strh	r2, [r3, #26]
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20008800 	.word	0x20008800
 8001fc4:	40026488 	.word	0x40026488
 8001fc8:	40010000 	.word	0x40010000
 8001fcc:	40021000 	.word	0x40021000

08001fd0 <UART_init>:

char string[100];
int charcounter = 0;

void UART_init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0

  /* --------------------------- System Clocks Configuration -----------------*/
  /* USART2 clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001fdc:	f7ff f8f2 	bl	80011c4 <RCC_APB1PeriphClockCmd>

  /* GPIOA clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	2001      	movs	r0, #1
 8001fe4:	f7ff f8ce 	bl	8001184 <RCC_AHB1PeriphClockCmd>

  GPIO_InitTypeDef GPIO_InitStructure;

  /*-------------------------- GPIO Configuration ----------------------------*/
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8001fe8:	230c      	movs	r3, #12
 8001fea:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001fec:	2302      	movs	r3, #2
 8001fee:	753b      	strb	r3, [r7, #20]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	75bb      	strb	r3, [r7, #22]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	75fb      	strb	r3, [r7, #23]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	757b      	strb	r3, [r7, #21]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001ffc:	f107 0310 	add.w	r3, r7, #16
 8002000:	4619      	mov	r1, r3
 8002002:	4816      	ldr	r0, [pc, #88]	; (800205c <UART_init+0x8c>)
 8002004:	f7fe ff3e 	bl	8000e84 <GPIO_Init>

  /* Connect USART pins to AF */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);   // USART2_TX
 8002008:	2207      	movs	r2, #7
 800200a:	2102      	movs	r1, #2
 800200c:	4813      	ldr	r0, [pc, #76]	; (800205c <UART_init+0x8c>)
 800200e:	f7fe ffc7 	bl	8000fa0 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);  // USART2_RX
 8002012:	2207      	movs	r2, #7
 8002014:	2103      	movs	r1, #3
 8002016:	4811      	ldr	r0, [pc, #68]	; (800205c <UART_init+0x8c>)
 8002018:	f7fe ffc2 	bl	8000fa0 <GPIO_PinAFConfig>
      - One Stop Bit
      - No parity
      - Hardware flow control disabled (RTS and CTS signals)
      - Receive and transmit enabled
*/
USART_InitStructure.USART_BaudRate = 115200;
 800201c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002020:	603b      	str	r3, [r7, #0]
USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8002022:	2300      	movs	r3, #0
 8002024:	80bb      	strh	r3, [r7, #4]
USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8002026:	2300      	movs	r3, #0
 8002028:	80fb      	strh	r3, [r7, #6]
USART_InitStructure.USART_Parity = USART_Parity_No;
 800202a:	2300      	movs	r3, #0
 800202c:	813b      	strh	r3, [r7, #8]
USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 800202e:	2300      	movs	r3, #0
 8002030:	81bb      	strh	r3, [r7, #12]

USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002032:	230c      	movs	r3, #12
 8002034:	817b      	strh	r3, [r7, #10]

USART_Init(USART2, &USART_InitStructure);
 8002036:	463b      	mov	r3, r7
 8002038:	4619      	mov	r1, r3
 800203a:	4809      	ldr	r0, [pc, #36]	; (8002060 <UART_init+0x90>)
 800203c:	f7ff fb30 	bl	80016a0 <USART_Init>
USART_ITConfig(USART2,USART_IT_RXNE,ENABLE);
 8002040:	2201      	movs	r2, #1
 8002042:	f240 5125 	movw	r1, #1317	; 0x525
 8002046:	4806      	ldr	r0, [pc, #24]	; (8002060 <UART_init+0x90>)
 8002048:	f7ff fc16 	bl	8001878 <USART_ITConfig>

USART_Cmd(USART2, ENABLE);
 800204c:	2101      	movs	r1, #1
 800204e:	4804      	ldr	r0, [pc, #16]	; (8002060 <UART_init+0x90>)
 8002050:	f7ff fbe0 	bl	8001814 <USART_Cmd>

}
 8002054:	bf00      	nop
 8002056:	3718      	adds	r7, #24
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40020000 	.word	0x40020000
 8002060:	40004400 	.word	0x40004400

08002064 <UART_putchar>:

void UART_putchar(char c)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
		while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET); // Wait for Empty
 800206e:	bf00      	nop
 8002070:	2180      	movs	r1, #128	; 0x80
 8002072:	4808      	ldr	r0, [pc, #32]	; (8002094 <UART_putchar+0x30>)
 8002074:	f7ff fc48 	bl	8001908 <USART_GetFlagStatus>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f8      	beq.n	8002070 <UART_putchar+0xc>
		USART_SendData(USART2, c);
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	b29b      	uxth	r3, r3
 8002082:	4619      	mov	r1, r3
 8002084:	4803      	ldr	r0, [pc, #12]	; (8002094 <UART_putchar+0x30>)
 8002086:	f7ff fbe5 	bl	8001854 <USART_SendData>

}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40004400 	.word	0x40004400

08002098 <UART_puts>:

void UART_puts(char *s)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	volatile unsigned int i;
	for (i=0; s[i]; i++)
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	e009      	b.n	80020ba <UART_puts+0x22>
	{
		UART_putchar(s[i]);
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	4413      	add	r3, r2
 80020ac:	781b      	ldrb	r3, [r3, #0]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff ffd8 	bl	8002064 <UART_putchar>
	for (i=0; s[i]; i++)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	3301      	adds	r3, #1
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	4413      	add	r3, r2
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1ef      	bne.n	80020a6 <UART_puts+0xe>
		//while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET); // Wait for Empty
		//USART_SendData(USART2, s[i]);
	}
}
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
	...

080020d0 <USART2_IRQHandler>:
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
}

void USART2_IRQHandler(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
	// check if the USART2 receive interrupt flag was set
	if( USART_GetITStatus(USART2, USART_IT_RXNE))
 80020d6:	f240 5125 	movw	r1, #1317	; 0x525
 80020da:	4827      	ldr	r0, [pc, #156]	; (8002178 <USART2_IRQHandler+0xa8>)
 80020dc:	f7ff fc30 	bl	8001940 <USART_GetITStatus>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d044      	beq.n	8002170 <USART2_IRQHandler+0xa0>
	{
		USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 80020e6:	f240 5125 	movw	r1, #1317	; 0x525
 80020ea:	4823      	ldr	r0, [pc, #140]	; (8002178 <USART2_IRQHandler+0xa8>)
 80020ec:	f7ff fc83 	bl	80019f6 <USART_ClearITPendingBit>
		int i;
		char c = USART2->DR & 0xFF;
 80020f0:	4b21      	ldr	r3, [pc, #132]	; (8002178 <USART2_IRQHandler+0xa8>)
 80020f2:	889b      	ldrh	r3, [r3, #4]
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	70fb      	strb	r3, [r7, #3]
//		LCD_XY(10,1);
//		LCD_put("UART:   ");
//		LCD_XY(15,1);
//		LCD_putchar(c);

		if(c > 64 && c < 91)
 80020f8:	78fb      	ldrb	r3, [r7, #3]
 80020fa:	2b40      	cmp	r3, #64	; 0x40
 80020fc:	d905      	bls.n	800210a <USART2_IRQHandler+0x3a>
 80020fe:	78fb      	ldrb	r3, [r7, #3]
 8002100:	2b5a      	cmp	r3, #90	; 0x5a
 8002102:	d802      	bhi.n	800210a <USART2_IRQHandler+0x3a>
			c += 32;
 8002104:	78fb      	ldrb	r3, [r7, #3]
 8002106:	3320      	adds	r3, #32
 8002108:	70fb      	strb	r3, [r7, #3]
		if(c <= 13)
 800210a:	78fb      	ldrb	r3, [r7, #3]
 800210c:	2b0d      	cmp	r3, #13
 800210e:	d81d      	bhi.n	800214c <USART2_IRQHandler+0x7c>
		{
			for(i=0;i<charcounter;i++)
 8002110:	2300      	movs	r3, #0
 8002112:	607b      	str	r3, [r7, #4]
 8002114:	e00b      	b.n	800212e <USART2_IRQHandler+0x5e>
			{
				USART_SendData(USART2, string[i]); // Echo Char
 8002116:	4a19      	ldr	r2, [pc, #100]	; (800217c <USART2_IRQHandler+0xac>)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	4413      	add	r3, r2
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	b29b      	uxth	r3, r3
 8002120:	4619      	mov	r1, r3
 8002122:	4815      	ldr	r0, [pc, #84]	; (8002178 <USART2_IRQHandler+0xa8>)
 8002124:	f7ff fb96 	bl	8001854 <USART_SendData>
			for(i=0;i<charcounter;i++)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	3301      	adds	r3, #1
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	4b14      	ldr	r3, [pc, #80]	; (8002180 <USART2_IRQHandler+0xb0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	dbee      	blt.n	8002116 <USART2_IRQHandler+0x46>
			}
			charcounter = 0;
 8002138:	4b11      	ldr	r3, [pc, #68]	; (8002180 <USART2_IRQHandler+0xb0>)
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
			USART_SendData(USART2, c); // Echo Char
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	b29b      	uxth	r3, r3
 8002142:	4619      	mov	r1, r3
 8002144:	480c      	ldr	r0, [pc, #48]	; (8002178 <USART2_IRQHandler+0xa8>)
 8002146:	f7ff fb85 	bl	8001854 <USART_SendData>
 800214a:	e009      	b.n	8002160 <USART2_IRQHandler+0x90>
		}
		else
		{
			string[charcounter] = c;
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <USART2_IRQHandler+0xb0>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	490a      	ldr	r1, [pc, #40]	; (800217c <USART2_IRQHandler+0xac>)
 8002152:	78fa      	ldrb	r2, [r7, #3]
 8002154:	54ca      	strb	r2, [r1, r3]
			charcounter++;
 8002156:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <USART2_IRQHandler+0xb0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	3301      	adds	r3, #1
 800215c:	4a08      	ldr	r2, [pc, #32]	; (8002180 <USART2_IRQHandler+0xb0>)
 800215e:	6013      	str	r3, [r2, #0]
		}


		while (USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET); // Wait for Empty
 8002160:	bf00      	nop
 8002162:	2140      	movs	r1, #64	; 0x40
 8002164:	4804      	ldr	r0, [pc, #16]	; (8002178 <USART2_IRQHandler+0xa8>)
 8002166:	f7ff fbcf 	bl	8001908 <USART_GetFlagStatus>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f8      	beq.n	8002162 <USART2_IRQHandler+0x92>

	}
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40004400 	.word	0x40004400
 800217c:	20013378 	.word	0x20013378
 8002180:	20000530 	.word	0x20000530

08002184 <UART_get>:

// Ontvang een karakter via de UART
// niet echt nodig als routine maar als wrapper voor compatabiliteit. Let op geen -1 als er geen char is ontvangen!

char UART_get(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
    char uart_char = -1;
 800218a:	23ff      	movs	r3, #255	; 0xff
 800218c:	71fb      	strb	r3, [r7, #7]
    if (USART_GetFlagStatus(USART2, USART_FLAG_RXNE)== SET)  // check for data available
 800218e:	2120      	movs	r1, #32
 8002190:	4807      	ldr	r0, [pc, #28]	; (80021b0 <UART_get+0x2c>)
 8002192:	f7ff fbb9 	bl	8001908 <USART_GetFlagStatus>
 8002196:	4603      	mov	r3, r0
 8002198:	2b01      	cmp	r3, #1
 800219a:	d103      	bne.n	80021a4 <UART_get+0x20>
    	 uart_char= USART2->DR & 0xFF; // and read the data from peripheral
 800219c:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <UART_get+0x2c>)
 800219e:	889b      	ldrh	r3, [r3, #4]
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	71fb      	strb	r3, [r7, #7]
    return uart_char;
 80021a4:	79fb      	ldrb	r3, [r7, #7]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40004400 	.word	0x40004400

080021b4 <UART_gets>:
// args: char *readbuffer
//       int   echo, when TRUE, send read-char to UART
// remark: ARM sends -1 if buffer is empty
//         LF is cleared if set in terminal-program
void UART_gets(char *s, int echo)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
	while (TRUE)
	{
	 	*s = UART_get();
 80021be:	f7ff ffe1 	bl	8002184 <UART_get>
 80021c2:	4603      	mov	r3, r0
 80021c4:	461a      	mov	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	701a      	strb	r2, [r3, #0]

	 	if (*s==-1)             // check for data available
	 		continue;

	 	if (*s==0xff || *s==LF) // if no data or LF, continue
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2bff      	cmp	r3, #255	; 0xff
 80021d0:	d017      	beq.n	8002202 <UART_gets+0x4e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	2b0a      	cmp	r3, #10
 80021d8:	d013      	beq.n	8002202 <UART_gets+0x4e>
			continue;


		if (echo)              // if output-flag set
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d004      	beq.n	80021ea <UART_gets+0x36>
			UART_putchar(*s);  // to read what u entered
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff3d 	bl	8002064 <UART_putchar>


		if (*s==CR)            // if enter pressed
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	2b0d      	cmp	r3, #13
 80021f0:	d103      	bne.n	80021fa <UART_gets+0x46>
		{
			*s = '\0';         // ignore char and close string
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
		    return;            // buf ready, exit loop
 80021f8:	e005      	b.n	8002206 <UART_gets+0x52>
		}
		s++;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3301      	adds	r3, #1
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	e7dd      	b.n	80021be <UART_gets+0xa>
			continue;
 8002202:	bf00      	nop
	 	*s = UART_get();
 8002204:	e7db      	b.n	80021be <UART_gets+0xa>
	}
}
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <main>:
#include "main.h"
#include "includes.h"


int main(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b09a      	sub	sp, #104	; 0x68
 8002210:	af00      	add	r7, sp, #0
	//  uint32_t n;

	SystemInit(); // System speed to 168MHz
 8002212:	f000 f869 	bl	80022e8 <SystemInit>
	UART_init();
 8002216:	f7ff fedb 	bl	8001fd0 <UART_init>
	DELAY_init();
 800221a:	f7ff fc09 	bl	8001a30 <DELAY_init>
	UB_VGA_Screen_Init(); // Init VGA-Screen
 800221e:	f7ff fc9b 	bl	8001b58 <UB_VGA_Screen_Init>

	UB_VGA_FillScreen(VGA_COL_GREEN);
 8002222:	201c      	movs	r0, #28
 8002224:	f7ff fcd8 	bl	8001bd8 <UB_VGA_FillScreen>
		break;
	default:
	}
	*/

	UART_puts(	"Welke van de volgende functies wil je gebruiken? "
 8002228:	4802      	ldr	r0, [pc, #8]	; (8002234 <main+0x28>)
 800222a:	f7ff ff35 	bl	8002098 <UART_puts>
				"line/triangle/rectangle/ellips/text/bitmap/clr_screen\r");
	char text[100];

	while(1)
	{
		get_data();
 800222e:	f000 f90d 	bl	800244c <get_data>
 8002232:	e7fc      	b.n	800222e <main+0x22>
 8002234:	08002d38 	.word	0x08002d38

08002238 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002238:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002270 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800223c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800223e:	e003      	b.n	8002248 <LoopCopyDataInit>

08002240 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002242:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002244:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002246:	3104      	adds	r1, #4

08002248 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002248:	480b      	ldr	r0, [pc, #44]	; (8002278 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800224a:	4b0c      	ldr	r3, [pc, #48]	; (800227c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800224c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800224e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002250:	d3f6      	bcc.n	8002240 <CopyDataInit>
  ldr  r2, =_sbss
 8002252:	4a0b      	ldr	r2, [pc, #44]	; (8002280 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002254:	e002      	b.n	800225c <LoopFillZerobss>

08002256 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002256:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002258:	f842 3b04 	str.w	r3, [r2], #4

0800225c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800225c:	4b09      	ldr	r3, [pc, #36]	; (8002284 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800225e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002260:	d3f9      	bcc.n	8002256 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002262:	f000 f841 	bl	80022e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002266:	f000 f98d 	bl	8002584 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800226a:	f7ff ffcf 	bl	800220c <main>
  bx  lr    
 800226e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002270:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002274:	08003030 	.word	0x08003030
  ldr  r0, =_sdata
 8002278:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800227c:	20000514 	.word	0x20000514
  ldr  r2, =_sbss
 8002280:	20000514 	.word	0x20000514
  ldr  r3, = _ebss
 8002284:	200133ec 	.word	0x200133ec

08002288 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002288:	e7fe      	b.n	8002288 <ADC_IRQHandler>

0800228a <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800228a:	b480      	push	{r7}
 800228c:	af00      	add	r7, sp, #0
}
 800228e:	bf00      	nop
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800229c:	e7fe      	b.n	800229c <HardFault_Handler+0x4>

0800229e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80022a2:	e7fe      	b.n	80022a2 <MemManage_Handler+0x4>

080022a4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80022a8:	e7fe      	b.n	80022a8 <BusFault_Handler+0x4>

080022aa <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80022ae:	e7fe      	b.n	80022ae <UsageFault_Handler+0x4>

080022b0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
}
 80022b4:	bf00      	nop
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0
}
 80022c2:	bf00      	nop
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80022de:	bf00      	nop
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022ec:	4a16      	ldr	r2, [pc, #88]	; (8002348 <SystemInit+0x60>)
 80022ee:	4b16      	ldr	r3, [pc, #88]	; (8002348 <SystemInit+0x60>)
 80022f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80022fc:	4a13      	ldr	r2, [pc, #76]	; (800234c <SystemInit+0x64>)
 80022fe:	4b13      	ldr	r3, [pc, #76]	; (800234c <SystemInit+0x64>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002308:	4b10      	ldr	r3, [pc, #64]	; (800234c <SystemInit+0x64>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800230e:	4a0f      	ldr	r2, [pc, #60]	; (800234c <SystemInit+0x64>)
 8002310:	4b0e      	ldr	r3, [pc, #56]	; (800234c <SystemInit+0x64>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800231c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <SystemInit+0x64>)
 8002320:	4a0b      	ldr	r2, [pc, #44]	; (8002350 <SystemInit+0x68>)
 8002322:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002324:	4a09      	ldr	r2, [pc, #36]	; (800234c <SystemInit+0x64>)
 8002326:	4b09      	ldr	r3, [pc, #36]	; (800234c <SystemInit+0x64>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800232e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <SystemInit+0x64>)
 8002332:	2200      	movs	r2, #0
 8002334:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002336:	f000 f80d 	bl	8002354 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800233a:	4b03      	ldr	r3, [pc, #12]	; (8002348 <SystemInit+0x60>)
 800233c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002340:	609a      	str	r2, [r3, #8]
#endif
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	e000ed00 	.word	0xe000ed00
 800234c:	40023800 	.word	0x40023800
 8002350:	24003010 	.word	0x24003010

08002354 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]
 800235e:	2300      	movs	r3, #0
 8002360:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002362:	4a36      	ldr	r2, [pc, #216]	; (800243c <SetSysClock+0xe8>)
 8002364:	4b35      	ldr	r3, [pc, #212]	; (800243c <SetSysClock+0xe8>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800236e:	4b33      	ldr	r3, [pc, #204]	; (800243c <SetSysClock+0xe8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3301      	adds	r3, #1
 800237c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d103      	bne.n	800238c <SetSysClock+0x38>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800238a:	d1f0      	bne.n	800236e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800238c:	4b2b      	ldr	r3, [pc, #172]	; (800243c <SetSysClock+0xe8>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d002      	beq.n	800239e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002398:	2301      	movs	r3, #1
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	e001      	b.n	80023a2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800239e:	2300      	movs	r3, #0
 80023a0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d142      	bne.n	800242e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80023a8:	4a24      	ldr	r2, [pc, #144]	; (800243c <SetSysClock+0xe8>)
 80023aa:	4b24      	ldr	r3, [pc, #144]	; (800243c <SetSysClock+0xe8>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80023b4:	4a22      	ldr	r2, [pc, #136]	; (8002440 <SetSysClock+0xec>)
 80023b6:	4b22      	ldr	r3, [pc, #136]	; (8002440 <SetSysClock+0xec>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023be:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80023c0:	4a1e      	ldr	r2, [pc, #120]	; (800243c <SetSysClock+0xe8>)
 80023c2:	4b1e      	ldr	r3, [pc, #120]	; (800243c <SetSysClock+0xe8>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80023c8:	4a1c      	ldr	r2, [pc, #112]	; (800243c <SetSysClock+0xe8>)
 80023ca:	4b1c      	ldr	r3, [pc, #112]	; (800243c <SetSysClock+0xe8>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023d2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80023d4:	4a19      	ldr	r2, [pc, #100]	; (800243c <SetSysClock+0xe8>)
 80023d6:	4b19      	ldr	r3, [pc, #100]	; (800243c <SetSysClock+0xe8>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80023de:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80023e0:	4b16      	ldr	r3, [pc, #88]	; (800243c <SetSysClock+0xe8>)
 80023e2:	4a18      	ldr	r2, [pc, #96]	; (8002444 <SetSysClock+0xf0>)
 80023e4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80023e6:	4a15      	ldr	r2, [pc, #84]	; (800243c <SetSysClock+0xe8>)
 80023e8:	4b14      	ldr	r3, [pc, #80]	; (800243c <SetSysClock+0xe8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023f0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80023f2:	bf00      	nop
 80023f4:	4b11      	ldr	r3, [pc, #68]	; (800243c <SetSysClock+0xe8>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0f9      	beq.n	80023f4 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <SetSysClock+0xf4>)
 8002402:	f240 7205 	movw	r2, #1797	; 0x705
 8002406:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002408:	4a0c      	ldr	r2, [pc, #48]	; (800243c <SetSysClock+0xe8>)
 800240a:	4b0c      	ldr	r3, [pc, #48]	; (800243c <SetSysClock+0xe8>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f023 0303 	bic.w	r3, r3, #3
 8002412:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002414:	4a09      	ldr	r2, [pc, #36]	; (800243c <SetSysClock+0xe8>)
 8002416:	4b09      	ldr	r3, [pc, #36]	; (800243c <SetSysClock+0xe8>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f043 0302 	orr.w	r3, r3, #2
 800241e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002420:	bf00      	nop
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <SetSysClock+0xe8>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 030c 	and.w	r3, r3, #12
 800242a:	2b08      	cmp	r3, #8
 800242c:	d1f9      	bne.n	8002422 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40023800 	.word	0x40023800
 8002440:	40007000 	.word	0x40007000
 8002444:	07405419 	.word	0x07405419
 8002448:	40023c00 	.word	0x40023c00

0800244c <get_data>:

#include "terminal_input.h"


void get_data()
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
	UART_gets(functions,TRUE);
 8002450:	2101      	movs	r1, #1
 8002452:	4838      	ldr	r0, [pc, #224]	; (8002534 <get_data+0xe8>)
 8002454:	f7ff feae 	bl	80021b4 <UART_gets>

	if(strcmp(functions, "line")==0)
 8002458:	4937      	ldr	r1, [pc, #220]	; (8002538 <get_data+0xec>)
 800245a:	4836      	ldr	r0, [pc, #216]	; (8002534 <get_data+0xe8>)
 800245c:	f7fd feb4 	bl	80001c8 <strcmp>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d122      	bne.n	80024ac <get_data+0x60>
	{
		UART_puts("You need to type the following parameter:"
 8002466:	4835      	ldr	r0, [pc, #212]	; (800253c <get_data+0xf0>)
 8002468:	f7ff fe16 	bl	8002098 <UART_puts>
				"x1 y1 x2 y2 color\r"
				"color = VGA_COL_BLUE or VGA_COL_GREEN or VGA_COL_RED or VGA_COL_WHITE or VGA_COL_CYAN or VGA_COL_MAGENTA or VGA_COL_YELLOW\r");
		UART_gets(parameters,TRUE);
 800246c:	2101      	movs	r1, #1
 800246e:	4834      	ldr	r0, [pc, #208]	; (8002540 <get_data+0xf4>)
 8002470:	f7ff fea0 	bl	80021b4 <UART_gets>
		str_check = strtok (parameters," ,");
 8002474:	4933      	ldr	r1, [pc, #204]	; (8002544 <get_data+0xf8>)
 8002476:	4832      	ldr	r0, [pc, #200]	; (8002540 <get_data+0xf4>)
 8002478:	f000 f8a8 	bl	80025cc <strtok>
 800247c:	4602      	mov	r2, r0
 800247e:	4b32      	ldr	r3, [pc, #200]	; (8002548 <get_data+0xfc>)
 8002480:	601a      	str	r2, [r3, #0]

		while (str_check != NULL)
 8002482:	e00e      	b.n	80024a2 <get_data+0x56>
		{
			UART_puts(str_check);
 8002484:	4b30      	ldr	r3, [pc, #192]	; (8002548 <get_data+0xfc>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fe05 	bl	8002098 <UART_puts>
			UART_puts("\t");
 800248e:	482f      	ldr	r0, [pc, #188]	; (800254c <get_data+0x100>)
 8002490:	f7ff fe02 	bl	8002098 <UART_puts>
			str_check = strtok (NULL, " ,.-");
 8002494:	492e      	ldr	r1, [pc, #184]	; (8002550 <get_data+0x104>)
 8002496:	2000      	movs	r0, #0
 8002498:	f000 f898 	bl	80025cc <strtok>
 800249c:	4602      	mov	r2, r0
 800249e:	4b2a      	ldr	r3, [pc, #168]	; (8002548 <get_data+0xfc>)
 80024a0:	601a      	str	r2, [r3, #0]
		while (str_check != NULL)
 80024a2:	4b29      	ldr	r3, [pc, #164]	; (8002548 <get_data+0xfc>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1ec      	bne.n	8002484 <get_data+0x38>
//	for(int j=0;j<7;j++)
//	{
//		UART_puts(draw[j]);
//		UART_puts("\r");
//	}
}
 80024aa:	e040      	b.n	800252e <get_data+0xe2>
	else if(strcmp(functions, "triangle")==0)
 80024ac:	4929      	ldr	r1, [pc, #164]	; (8002554 <get_data+0x108>)
 80024ae:	4821      	ldr	r0, [pc, #132]	; (8002534 <get_data+0xe8>)
 80024b0:	f7fd fe8a 	bl	80001c8 <strcmp>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d103      	bne.n	80024c2 <get_data+0x76>
		UART_puts("You need to type the following parameter:"
 80024ba:	4827      	ldr	r0, [pc, #156]	; (8002558 <get_data+0x10c>)
 80024bc:	f7ff fdec 	bl	8002098 <UART_puts>
}
 80024c0:	e035      	b.n	800252e <get_data+0xe2>
	else if(strcmp(functions, "rectangle")==0)
 80024c2:	4926      	ldr	r1, [pc, #152]	; (800255c <get_data+0x110>)
 80024c4:	481b      	ldr	r0, [pc, #108]	; (8002534 <get_data+0xe8>)
 80024c6:	f7fd fe7f 	bl	80001c8 <strcmp>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d103      	bne.n	80024d8 <get_data+0x8c>
		UART_puts("You need to type the following parameter:"
 80024d0:	4823      	ldr	r0, [pc, #140]	; (8002560 <get_data+0x114>)
 80024d2:	f7ff fde1 	bl	8002098 <UART_puts>
}
 80024d6:	e02a      	b.n	800252e <get_data+0xe2>
	else if(strcmp(functions, "ellips")==0)
 80024d8:	4922      	ldr	r1, [pc, #136]	; (8002564 <get_data+0x118>)
 80024da:	4816      	ldr	r0, [pc, #88]	; (8002534 <get_data+0xe8>)
 80024dc:	f7fd fe74 	bl	80001c8 <strcmp>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d103      	bne.n	80024ee <get_data+0xa2>
		UART_puts("You need to type the following parameter:"
 80024e6:	4820      	ldr	r0, [pc, #128]	; (8002568 <get_data+0x11c>)
 80024e8:	f7ff fdd6 	bl	8002098 <UART_puts>
}
 80024ec:	e01f      	b.n	800252e <get_data+0xe2>
	else if(strcmp(functions, "text")==0)
 80024ee:	491f      	ldr	r1, [pc, #124]	; (800256c <get_data+0x120>)
 80024f0:	4810      	ldr	r0, [pc, #64]	; (8002534 <get_data+0xe8>)
 80024f2:	f7fd fe69 	bl	80001c8 <strcmp>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d103      	bne.n	8002504 <get_data+0xb8>
		UART_puts("You need to type the following parameter:"
 80024fc:	481c      	ldr	r0, [pc, #112]	; (8002570 <get_data+0x124>)
 80024fe:	f7ff fdcb 	bl	8002098 <UART_puts>
}
 8002502:	e014      	b.n	800252e <get_data+0xe2>
	else if(strcmp(functions, "bitmap")==0)
 8002504:	491b      	ldr	r1, [pc, #108]	; (8002574 <get_data+0x128>)
 8002506:	480b      	ldr	r0, [pc, #44]	; (8002534 <get_data+0xe8>)
 8002508:	f7fd fe5e 	bl	80001c8 <strcmp>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d103      	bne.n	800251a <get_data+0xce>
		UART_puts("You need to type the following bitmaps:"
 8002512:	4819      	ldr	r0, [pc, #100]	; (8002578 <get_data+0x12c>)
 8002514:	f7ff fdc0 	bl	8002098 <UART_puts>
}
 8002518:	e009      	b.n	800252e <get_data+0xe2>
	else if(strcmp(functions, "clr_screen")==0)
 800251a:	4918      	ldr	r1, [pc, #96]	; (800257c <get_data+0x130>)
 800251c:	4805      	ldr	r0, [pc, #20]	; (8002534 <get_data+0xe8>)
 800251e:	f7fd fe53 	bl	80001c8 <strcmp>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d102      	bne.n	800252e <get_data+0xe2>
		UART_puts("screen_clr_screen\r");
 8002528:	4815      	ldr	r0, [pc, #84]	; (8002580 <get_data+0x134>)
 800252a:	f7ff fdb5 	bl	8002098 <UART_puts>
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	20000578 	.word	0x20000578
 8002538:	08002da0 	.word	0x08002da0
 800253c:	08002da8 	.word	0x08002da8
 8002540:	200132f8 	.word	0x200132f8
 8002544:	08002e60 	.word	0x08002e60
 8002548:	2001335c 	.word	0x2001335c
 800254c:	08002e64 	.word	0x08002e64
 8002550:	08002e68 	.word	0x08002e68
 8002554:	08002e70 	.word	0x08002e70
 8002558:	08002e7c 	.word	0x08002e7c
 800255c:	08002ec0 	.word	0x08002ec0
 8002560:	08002ecc 	.word	0x08002ecc
 8002564:	08002f08 	.word	0x08002f08
 8002568:	08002f10 	.word	0x08002f10
 800256c:	08002f64 	.word	0x08002f64
 8002570:	08002f6c 	.word	0x08002f6c
 8002574:	08002fd4 	.word	0x08002fd4
 8002578:	08002fdc 	.word	0x08002fdc
 800257c:	08003008 	.word	0x08003008
 8002580:	08003014 	.word	0x08003014

08002584 <__libc_init_array>:
 8002584:	b570      	push	{r4, r5, r6, lr}
 8002586:	4e0d      	ldr	r6, [pc, #52]	; (80025bc <__libc_init_array+0x38>)
 8002588:	4c0d      	ldr	r4, [pc, #52]	; (80025c0 <__libc_init_array+0x3c>)
 800258a:	1ba4      	subs	r4, r4, r6
 800258c:	10a4      	asrs	r4, r4, #2
 800258e:	2500      	movs	r5, #0
 8002590:	42a5      	cmp	r5, r4
 8002592:	d109      	bne.n	80025a8 <__libc_init_array+0x24>
 8002594:	4e0b      	ldr	r6, [pc, #44]	; (80025c4 <__libc_init_array+0x40>)
 8002596:	4c0c      	ldr	r4, [pc, #48]	; (80025c8 <__libc_init_array+0x44>)
 8002598:	f000 fbc2 	bl	8002d20 <_init>
 800259c:	1ba4      	subs	r4, r4, r6
 800259e:	10a4      	asrs	r4, r4, #2
 80025a0:	2500      	movs	r5, #0
 80025a2:	42a5      	cmp	r5, r4
 80025a4:	d105      	bne.n	80025b2 <__libc_init_array+0x2e>
 80025a6:	bd70      	pop	{r4, r5, r6, pc}
 80025a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025ac:	4798      	blx	r3
 80025ae:	3501      	adds	r5, #1
 80025b0:	e7ee      	b.n	8002590 <__libc_init_array+0xc>
 80025b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025b6:	4798      	blx	r3
 80025b8:	3501      	adds	r5, #1
 80025ba:	e7f2      	b.n	80025a2 <__libc_init_array+0x1e>
 80025bc:	08003028 	.word	0x08003028
 80025c0:	08003028 	.word	0x08003028
 80025c4:	08003028 	.word	0x08003028
 80025c8:	0800302c 	.word	0x0800302c

080025cc <strtok>:
 80025cc:	4b14      	ldr	r3, [pc, #80]	; (8002620 <strtok+0x54>)
 80025ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025d2:	681d      	ldr	r5, [r3, #0]
 80025d4:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
 80025d8:	4606      	mov	r6, r0
 80025da:	460f      	mov	r7, r1
 80025dc:	b9bc      	cbnz	r4, 800260e <strtok+0x42>
 80025de:	2050      	movs	r0, #80	; 0x50
 80025e0:	f000 f84a 	bl	8002678 <malloc>
 80025e4:	f8c5 00e8 	str.w	r0, [r5, #232]	; 0xe8
 80025e8:	6004      	str	r4, [r0, #0]
 80025ea:	6044      	str	r4, [r0, #4]
 80025ec:	6084      	str	r4, [r0, #8]
 80025ee:	60c4      	str	r4, [r0, #12]
 80025f0:	6104      	str	r4, [r0, #16]
 80025f2:	6144      	str	r4, [r0, #20]
 80025f4:	6184      	str	r4, [r0, #24]
 80025f6:	6284      	str	r4, [r0, #40]	; 0x28
 80025f8:	62c4      	str	r4, [r0, #44]	; 0x2c
 80025fa:	6304      	str	r4, [r0, #48]	; 0x30
 80025fc:	6344      	str	r4, [r0, #52]	; 0x34
 80025fe:	6384      	str	r4, [r0, #56]	; 0x38
 8002600:	63c4      	str	r4, [r0, #60]	; 0x3c
 8002602:	6404      	str	r4, [r0, #64]	; 0x40
 8002604:	6444      	str	r4, [r0, #68]	; 0x44
 8002606:	6484      	str	r4, [r0, #72]	; 0x48
 8002608:	64c4      	str	r4, [r0, #76]	; 0x4c
 800260a:	7704      	strb	r4, [r0, #28]
 800260c:	6244      	str	r4, [r0, #36]	; 0x24
 800260e:	f8d5 20e8 	ldr.w	r2, [r5, #232]	; 0xe8
 8002612:	4639      	mov	r1, r7
 8002614:	4630      	mov	r0, r6
 8002616:	2301      	movs	r3, #1
 8002618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800261c:	f000 b802 	b.w	8002624 <__strtok_r>
 8002620:	20000010 	.word	0x20000010

08002624 <__strtok_r>:
 8002624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002626:	b918      	cbnz	r0, 8002630 <__strtok_r+0xc>
 8002628:	6810      	ldr	r0, [r2, #0]
 800262a:	b908      	cbnz	r0, 8002630 <__strtok_r+0xc>
 800262c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800262e:	4620      	mov	r0, r4
 8002630:	4604      	mov	r4, r0
 8002632:	460f      	mov	r7, r1
 8002634:	f814 5b01 	ldrb.w	r5, [r4], #1
 8002638:	f817 6b01 	ldrb.w	r6, [r7], #1
 800263c:	b91e      	cbnz	r6, 8002646 <__strtok_r+0x22>
 800263e:	b965      	cbnz	r5, 800265a <__strtok_r+0x36>
 8002640:	6015      	str	r5, [r2, #0]
 8002642:	4628      	mov	r0, r5
 8002644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002646:	42b5      	cmp	r5, r6
 8002648:	d1f6      	bne.n	8002638 <__strtok_r+0x14>
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1ef      	bne.n	800262e <__strtok_r+0xa>
 800264e:	6014      	str	r4, [r2, #0]
 8002650:	7003      	strb	r3, [r0, #0]
 8002652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002654:	461c      	mov	r4, r3
 8002656:	e00c      	b.n	8002672 <__strtok_r+0x4e>
 8002658:	b915      	cbnz	r5, 8002660 <__strtok_r+0x3c>
 800265a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800265e:	460e      	mov	r6, r1
 8002660:	f816 5b01 	ldrb.w	r5, [r6], #1
 8002664:	42ab      	cmp	r3, r5
 8002666:	d1f7      	bne.n	8002658 <__strtok_r+0x34>
 8002668:	2b00      	cmp	r3, #0
 800266a:	d0f3      	beq.n	8002654 <__strtok_r+0x30>
 800266c:	2300      	movs	r3, #0
 800266e:	f804 3c01 	strb.w	r3, [r4, #-1]
 8002672:	6014      	str	r4, [r2, #0]
 8002674:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002678 <malloc>:
 8002678:	4b02      	ldr	r3, [pc, #8]	; (8002684 <malloc+0xc>)
 800267a:	4601      	mov	r1, r0
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	f000 b803 	b.w	8002688 <_malloc_r>
 8002682:	bf00      	nop
 8002684:	20000010 	.word	0x20000010

08002688 <_malloc_r>:
 8002688:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800268c:	f101 040b 	add.w	r4, r1, #11
 8002690:	2c16      	cmp	r4, #22
 8002692:	4681      	mov	r9, r0
 8002694:	d907      	bls.n	80026a6 <_malloc_r+0x1e>
 8002696:	f034 0407 	bics.w	r4, r4, #7
 800269a:	d505      	bpl.n	80026a8 <_malloc_r+0x20>
 800269c:	230c      	movs	r3, #12
 800269e:	f8c9 3000 	str.w	r3, [r9]
 80026a2:	2600      	movs	r6, #0
 80026a4:	e131      	b.n	800290a <_malloc_r+0x282>
 80026a6:	2410      	movs	r4, #16
 80026a8:	428c      	cmp	r4, r1
 80026aa:	d3f7      	bcc.n	800269c <_malloc_r+0x14>
 80026ac:	4648      	mov	r0, r9
 80026ae:	f000 f9f9 	bl	8002aa4 <__malloc_lock>
 80026b2:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 80026b6:	4d9c      	ldr	r5, [pc, #624]	; (8002928 <_malloc_r+0x2a0>)
 80026b8:	d236      	bcs.n	8002728 <_malloc_r+0xa0>
 80026ba:	f104 0208 	add.w	r2, r4, #8
 80026be:	442a      	add	r2, r5
 80026c0:	f1a2 0108 	sub.w	r1, r2, #8
 80026c4:	6856      	ldr	r6, [r2, #4]
 80026c6:	428e      	cmp	r6, r1
 80026c8:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80026cc:	d102      	bne.n	80026d4 <_malloc_r+0x4c>
 80026ce:	68d6      	ldr	r6, [r2, #12]
 80026d0:	42b2      	cmp	r2, r6
 80026d2:	d010      	beq.n	80026f6 <_malloc_r+0x6e>
 80026d4:	6873      	ldr	r3, [r6, #4]
 80026d6:	68f2      	ldr	r2, [r6, #12]
 80026d8:	68b1      	ldr	r1, [r6, #8]
 80026da:	f023 0303 	bic.w	r3, r3, #3
 80026de:	60ca      	str	r2, [r1, #12]
 80026e0:	4433      	add	r3, r6
 80026e2:	6091      	str	r1, [r2, #8]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	f042 0201 	orr.w	r2, r2, #1
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	4648      	mov	r0, r9
 80026ee:	f000 f9df 	bl	8002ab0 <__malloc_unlock>
 80026f2:	3608      	adds	r6, #8
 80026f4:	e109      	b.n	800290a <_malloc_r+0x282>
 80026f6:	3302      	adds	r3, #2
 80026f8:	4a8c      	ldr	r2, [pc, #560]	; (800292c <_malloc_r+0x2a4>)
 80026fa:	692e      	ldr	r6, [r5, #16]
 80026fc:	4296      	cmp	r6, r2
 80026fe:	4611      	mov	r1, r2
 8002700:	d06d      	beq.n	80027de <_malloc_r+0x156>
 8002702:	6870      	ldr	r0, [r6, #4]
 8002704:	f020 0003 	bic.w	r0, r0, #3
 8002708:	1b07      	subs	r7, r0, r4
 800270a:	2f0f      	cmp	r7, #15
 800270c:	dd47      	ble.n	800279e <_malloc_r+0x116>
 800270e:	1933      	adds	r3, r6, r4
 8002710:	f044 0401 	orr.w	r4, r4, #1
 8002714:	6074      	str	r4, [r6, #4]
 8002716:	616b      	str	r3, [r5, #20]
 8002718:	612b      	str	r3, [r5, #16]
 800271a:	60da      	str	r2, [r3, #12]
 800271c:	609a      	str	r2, [r3, #8]
 800271e:	f047 0201 	orr.w	r2, r7, #1
 8002722:	605a      	str	r2, [r3, #4]
 8002724:	5037      	str	r7, [r6, r0]
 8002726:	e7e1      	b.n	80026ec <_malloc_r+0x64>
 8002728:	0a63      	lsrs	r3, r4, #9
 800272a:	d02a      	beq.n	8002782 <_malloc_r+0xfa>
 800272c:	2b04      	cmp	r3, #4
 800272e:	d812      	bhi.n	8002756 <_malloc_r+0xce>
 8002730:	09a3      	lsrs	r3, r4, #6
 8002732:	3338      	adds	r3, #56	; 0x38
 8002734:	1c5a      	adds	r2, r3, #1
 8002736:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800273a:	f1a2 0008 	sub.w	r0, r2, #8
 800273e:	6856      	ldr	r6, [r2, #4]
 8002740:	4286      	cmp	r6, r0
 8002742:	d006      	beq.n	8002752 <_malloc_r+0xca>
 8002744:	6872      	ldr	r2, [r6, #4]
 8002746:	f022 0203 	bic.w	r2, r2, #3
 800274a:	1b11      	subs	r1, r2, r4
 800274c:	290f      	cmp	r1, #15
 800274e:	dd1c      	ble.n	800278a <_malloc_r+0x102>
 8002750:	3b01      	subs	r3, #1
 8002752:	3301      	adds	r3, #1
 8002754:	e7d0      	b.n	80026f8 <_malloc_r+0x70>
 8002756:	2b14      	cmp	r3, #20
 8002758:	d801      	bhi.n	800275e <_malloc_r+0xd6>
 800275a:	335b      	adds	r3, #91	; 0x5b
 800275c:	e7ea      	b.n	8002734 <_malloc_r+0xac>
 800275e:	2b54      	cmp	r3, #84	; 0x54
 8002760:	d802      	bhi.n	8002768 <_malloc_r+0xe0>
 8002762:	0b23      	lsrs	r3, r4, #12
 8002764:	336e      	adds	r3, #110	; 0x6e
 8002766:	e7e5      	b.n	8002734 <_malloc_r+0xac>
 8002768:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800276c:	d802      	bhi.n	8002774 <_malloc_r+0xec>
 800276e:	0be3      	lsrs	r3, r4, #15
 8002770:	3377      	adds	r3, #119	; 0x77
 8002772:	e7df      	b.n	8002734 <_malloc_r+0xac>
 8002774:	f240 5254 	movw	r2, #1364	; 0x554
 8002778:	4293      	cmp	r3, r2
 800277a:	d804      	bhi.n	8002786 <_malloc_r+0xfe>
 800277c:	0ca3      	lsrs	r3, r4, #18
 800277e:	337c      	adds	r3, #124	; 0x7c
 8002780:	e7d8      	b.n	8002734 <_malloc_r+0xac>
 8002782:	233f      	movs	r3, #63	; 0x3f
 8002784:	e7d6      	b.n	8002734 <_malloc_r+0xac>
 8002786:	237e      	movs	r3, #126	; 0x7e
 8002788:	e7d4      	b.n	8002734 <_malloc_r+0xac>
 800278a:	2900      	cmp	r1, #0
 800278c:	68f1      	ldr	r1, [r6, #12]
 800278e:	db04      	blt.n	800279a <_malloc_r+0x112>
 8002790:	68b3      	ldr	r3, [r6, #8]
 8002792:	60d9      	str	r1, [r3, #12]
 8002794:	608b      	str	r3, [r1, #8]
 8002796:	18b3      	adds	r3, r6, r2
 8002798:	e7a4      	b.n	80026e4 <_malloc_r+0x5c>
 800279a:	460e      	mov	r6, r1
 800279c:	e7d0      	b.n	8002740 <_malloc_r+0xb8>
 800279e:	2f00      	cmp	r7, #0
 80027a0:	616a      	str	r2, [r5, #20]
 80027a2:	612a      	str	r2, [r5, #16]
 80027a4:	db05      	blt.n	80027b2 <_malloc_r+0x12a>
 80027a6:	4430      	add	r0, r6
 80027a8:	6843      	ldr	r3, [r0, #4]
 80027aa:	f043 0301 	orr.w	r3, r3, #1
 80027ae:	6043      	str	r3, [r0, #4]
 80027b0:	e79c      	b.n	80026ec <_malloc_r+0x64>
 80027b2:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80027b6:	d244      	bcs.n	8002842 <_malloc_r+0x1ba>
 80027b8:	08c0      	lsrs	r0, r0, #3
 80027ba:	1087      	asrs	r7, r0, #2
 80027bc:	2201      	movs	r2, #1
 80027be:	fa02 f707 	lsl.w	r7, r2, r7
 80027c2:	686a      	ldr	r2, [r5, #4]
 80027c4:	3001      	adds	r0, #1
 80027c6:	433a      	orrs	r2, r7
 80027c8:	606a      	str	r2, [r5, #4]
 80027ca:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80027ce:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 80027d2:	60b7      	str	r7, [r6, #8]
 80027d4:	3a08      	subs	r2, #8
 80027d6:	60f2      	str	r2, [r6, #12]
 80027d8:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 80027dc:	60fe      	str	r6, [r7, #12]
 80027de:	2001      	movs	r0, #1
 80027e0:	109a      	asrs	r2, r3, #2
 80027e2:	fa00 f202 	lsl.w	r2, r0, r2
 80027e6:	6868      	ldr	r0, [r5, #4]
 80027e8:	4282      	cmp	r2, r0
 80027ea:	f200 80a1 	bhi.w	8002930 <_malloc_r+0x2a8>
 80027ee:	4202      	tst	r2, r0
 80027f0:	d106      	bne.n	8002800 <_malloc_r+0x178>
 80027f2:	f023 0303 	bic.w	r3, r3, #3
 80027f6:	0052      	lsls	r2, r2, #1
 80027f8:	4202      	tst	r2, r0
 80027fa:	f103 0304 	add.w	r3, r3, #4
 80027fe:	d0fa      	beq.n	80027f6 <_malloc_r+0x16e>
 8002800:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8002804:	46e0      	mov	r8, ip
 8002806:	469e      	mov	lr, r3
 8002808:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800280c:	4546      	cmp	r6, r8
 800280e:	d153      	bne.n	80028b8 <_malloc_r+0x230>
 8002810:	f10e 0e01 	add.w	lr, lr, #1
 8002814:	f01e 0f03 	tst.w	lr, #3
 8002818:	f108 0808 	add.w	r8, r8, #8
 800281c:	d1f4      	bne.n	8002808 <_malloc_r+0x180>
 800281e:	0798      	lsls	r0, r3, #30
 8002820:	d179      	bne.n	8002916 <_malloc_r+0x28e>
 8002822:	686b      	ldr	r3, [r5, #4]
 8002824:	ea23 0302 	bic.w	r3, r3, r2
 8002828:	606b      	str	r3, [r5, #4]
 800282a:	6868      	ldr	r0, [r5, #4]
 800282c:	0052      	lsls	r2, r2, #1
 800282e:	4282      	cmp	r2, r0
 8002830:	d87e      	bhi.n	8002930 <_malloc_r+0x2a8>
 8002832:	2a00      	cmp	r2, #0
 8002834:	d07c      	beq.n	8002930 <_malloc_r+0x2a8>
 8002836:	4673      	mov	r3, lr
 8002838:	4202      	tst	r2, r0
 800283a:	d1e1      	bne.n	8002800 <_malloc_r+0x178>
 800283c:	3304      	adds	r3, #4
 800283e:	0052      	lsls	r2, r2, #1
 8002840:	e7fa      	b.n	8002838 <_malloc_r+0x1b0>
 8002842:	0a42      	lsrs	r2, r0, #9
 8002844:	2a04      	cmp	r2, #4
 8002846:	d815      	bhi.n	8002874 <_malloc_r+0x1ec>
 8002848:	0982      	lsrs	r2, r0, #6
 800284a:	3238      	adds	r2, #56	; 0x38
 800284c:	1c57      	adds	r7, r2, #1
 800284e:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8002852:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8002856:	45be      	cmp	lr, r7
 8002858:	d126      	bne.n	80028a8 <_malloc_r+0x220>
 800285a:	2001      	movs	r0, #1
 800285c:	1092      	asrs	r2, r2, #2
 800285e:	fa00 f202 	lsl.w	r2, r0, r2
 8002862:	6868      	ldr	r0, [r5, #4]
 8002864:	4310      	orrs	r0, r2
 8002866:	6068      	str	r0, [r5, #4]
 8002868:	f8c6 e00c 	str.w	lr, [r6, #12]
 800286c:	60b7      	str	r7, [r6, #8]
 800286e:	f8ce 6008 	str.w	r6, [lr, #8]
 8002872:	e7b3      	b.n	80027dc <_malloc_r+0x154>
 8002874:	2a14      	cmp	r2, #20
 8002876:	d801      	bhi.n	800287c <_malloc_r+0x1f4>
 8002878:	325b      	adds	r2, #91	; 0x5b
 800287a:	e7e7      	b.n	800284c <_malloc_r+0x1c4>
 800287c:	2a54      	cmp	r2, #84	; 0x54
 800287e:	d802      	bhi.n	8002886 <_malloc_r+0x1fe>
 8002880:	0b02      	lsrs	r2, r0, #12
 8002882:	326e      	adds	r2, #110	; 0x6e
 8002884:	e7e2      	b.n	800284c <_malloc_r+0x1c4>
 8002886:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800288a:	d802      	bhi.n	8002892 <_malloc_r+0x20a>
 800288c:	0bc2      	lsrs	r2, r0, #15
 800288e:	3277      	adds	r2, #119	; 0x77
 8002890:	e7dc      	b.n	800284c <_malloc_r+0x1c4>
 8002892:	f240 5754 	movw	r7, #1364	; 0x554
 8002896:	42ba      	cmp	r2, r7
 8002898:	bf9a      	itte	ls
 800289a:	0c82      	lsrls	r2, r0, #18
 800289c:	327c      	addls	r2, #124	; 0x7c
 800289e:	227e      	movhi	r2, #126	; 0x7e
 80028a0:	e7d4      	b.n	800284c <_malloc_r+0x1c4>
 80028a2:	68bf      	ldr	r7, [r7, #8]
 80028a4:	45be      	cmp	lr, r7
 80028a6:	d004      	beq.n	80028b2 <_malloc_r+0x22a>
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	f022 0203 	bic.w	r2, r2, #3
 80028ae:	4290      	cmp	r0, r2
 80028b0:	d3f7      	bcc.n	80028a2 <_malloc_r+0x21a>
 80028b2:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 80028b6:	e7d7      	b.n	8002868 <_malloc_r+0x1e0>
 80028b8:	6870      	ldr	r0, [r6, #4]
 80028ba:	68f7      	ldr	r7, [r6, #12]
 80028bc:	f020 0003 	bic.w	r0, r0, #3
 80028c0:	eba0 0a04 	sub.w	sl, r0, r4
 80028c4:	f1ba 0f0f 	cmp.w	sl, #15
 80028c8:	dd10      	ble.n	80028ec <_malloc_r+0x264>
 80028ca:	68b2      	ldr	r2, [r6, #8]
 80028cc:	1933      	adds	r3, r6, r4
 80028ce:	f044 0401 	orr.w	r4, r4, #1
 80028d2:	6074      	str	r4, [r6, #4]
 80028d4:	60d7      	str	r7, [r2, #12]
 80028d6:	60ba      	str	r2, [r7, #8]
 80028d8:	f04a 0201 	orr.w	r2, sl, #1
 80028dc:	616b      	str	r3, [r5, #20]
 80028de:	612b      	str	r3, [r5, #16]
 80028e0:	60d9      	str	r1, [r3, #12]
 80028e2:	6099      	str	r1, [r3, #8]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	f846 a000 	str.w	sl, [r6, r0]
 80028ea:	e6ff      	b.n	80026ec <_malloc_r+0x64>
 80028ec:	f1ba 0f00 	cmp.w	sl, #0
 80028f0:	db0f      	blt.n	8002912 <_malloc_r+0x28a>
 80028f2:	4430      	add	r0, r6
 80028f4:	6843      	ldr	r3, [r0, #4]
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	6043      	str	r3, [r0, #4]
 80028fc:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8002900:	4648      	mov	r0, r9
 8002902:	60df      	str	r7, [r3, #12]
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	f000 f8d3 	bl	8002ab0 <__malloc_unlock>
 800290a:	4630      	mov	r0, r6
 800290c:	b003      	add	sp, #12
 800290e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002912:	463e      	mov	r6, r7
 8002914:	e77a      	b.n	800280c <_malloc_r+0x184>
 8002916:	f85c 0908 	ldr.w	r0, [ip], #-8
 800291a:	4584      	cmp	ip, r0
 800291c:	f103 33ff 	add.w	r3, r3, #4294967295
 8002920:	f43f af7d 	beq.w	800281e <_malloc_r+0x196>
 8002924:	e781      	b.n	800282a <_malloc_r+0x1a2>
 8002926:	bf00      	nop
 8002928:	20000104 	.word	0x20000104
 800292c:	2000010c 	.word	0x2000010c
 8002930:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8002934:	f8db 6004 	ldr.w	r6, [fp, #4]
 8002938:	f026 0603 	bic.w	r6, r6, #3
 800293c:	42b4      	cmp	r4, r6
 800293e:	d803      	bhi.n	8002948 <_malloc_r+0x2c0>
 8002940:	1b33      	subs	r3, r6, r4
 8002942:	2b0f      	cmp	r3, #15
 8002944:	f300 8096 	bgt.w	8002a74 <_malloc_r+0x3ec>
 8002948:	4a4f      	ldr	r2, [pc, #316]	; (8002a88 <_malloc_r+0x400>)
 800294a:	6817      	ldr	r7, [r2, #0]
 800294c:	4a4f      	ldr	r2, [pc, #316]	; (8002a8c <_malloc_r+0x404>)
 800294e:	6811      	ldr	r1, [r2, #0]
 8002950:	3710      	adds	r7, #16
 8002952:	3101      	adds	r1, #1
 8002954:	eb0b 0306 	add.w	r3, fp, r6
 8002958:	4427      	add	r7, r4
 800295a:	d005      	beq.n	8002968 <_malloc_r+0x2e0>
 800295c:	494c      	ldr	r1, [pc, #304]	; (8002a90 <_malloc_r+0x408>)
 800295e:	3901      	subs	r1, #1
 8002960:	440f      	add	r7, r1
 8002962:	3101      	adds	r1, #1
 8002964:	4249      	negs	r1, r1
 8002966:	400f      	ands	r7, r1
 8002968:	4639      	mov	r1, r7
 800296a:	4648      	mov	r0, r9
 800296c:	9201      	str	r2, [sp, #4]
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	f000 f8a4 	bl	8002abc <_sbrk_r>
 8002974:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002978:	4680      	mov	r8, r0
 800297a:	d056      	beq.n	8002a2a <_malloc_r+0x3a2>
 800297c:	9b00      	ldr	r3, [sp, #0]
 800297e:	9a01      	ldr	r2, [sp, #4]
 8002980:	4283      	cmp	r3, r0
 8002982:	d901      	bls.n	8002988 <_malloc_r+0x300>
 8002984:	45ab      	cmp	fp, r5
 8002986:	d150      	bne.n	8002a2a <_malloc_r+0x3a2>
 8002988:	4842      	ldr	r0, [pc, #264]	; (8002a94 <_malloc_r+0x40c>)
 800298a:	6801      	ldr	r1, [r0, #0]
 800298c:	4543      	cmp	r3, r8
 800298e:	eb07 0e01 	add.w	lr, r7, r1
 8002992:	f8c0 e000 	str.w	lr, [r0]
 8002996:	4940      	ldr	r1, [pc, #256]	; (8002a98 <_malloc_r+0x410>)
 8002998:	4682      	mov	sl, r0
 800299a:	d113      	bne.n	80029c4 <_malloc_r+0x33c>
 800299c:	420b      	tst	r3, r1
 800299e:	d111      	bne.n	80029c4 <_malloc_r+0x33c>
 80029a0:	68ab      	ldr	r3, [r5, #8]
 80029a2:	443e      	add	r6, r7
 80029a4:	f046 0601 	orr.w	r6, r6, #1
 80029a8:	605e      	str	r6, [r3, #4]
 80029aa:	4a3c      	ldr	r2, [pc, #240]	; (8002a9c <_malloc_r+0x414>)
 80029ac:	f8da 3000 	ldr.w	r3, [sl]
 80029b0:	6811      	ldr	r1, [r2, #0]
 80029b2:	428b      	cmp	r3, r1
 80029b4:	bf88      	it	hi
 80029b6:	6013      	strhi	r3, [r2, #0]
 80029b8:	4a39      	ldr	r2, [pc, #228]	; (8002aa0 <_malloc_r+0x418>)
 80029ba:	6811      	ldr	r1, [r2, #0]
 80029bc:	428b      	cmp	r3, r1
 80029be:	bf88      	it	hi
 80029c0:	6013      	strhi	r3, [r2, #0]
 80029c2:	e032      	b.n	8002a2a <_malloc_r+0x3a2>
 80029c4:	6810      	ldr	r0, [r2, #0]
 80029c6:	3001      	adds	r0, #1
 80029c8:	bf1b      	ittet	ne
 80029ca:	eba8 0303 	subne.w	r3, r8, r3
 80029ce:	4473      	addne	r3, lr
 80029d0:	f8c2 8000 	streq.w	r8, [r2]
 80029d4:	f8ca 3000 	strne.w	r3, [sl]
 80029d8:	f018 0007 	ands.w	r0, r8, #7
 80029dc:	bf1c      	itt	ne
 80029de:	f1c0 0008 	rsbne	r0, r0, #8
 80029e2:	4480      	addne	r8, r0
 80029e4:	4b2a      	ldr	r3, [pc, #168]	; (8002a90 <_malloc_r+0x408>)
 80029e6:	4447      	add	r7, r8
 80029e8:	4418      	add	r0, r3
 80029ea:	400f      	ands	r7, r1
 80029ec:	1bc7      	subs	r7, r0, r7
 80029ee:	4639      	mov	r1, r7
 80029f0:	4648      	mov	r0, r9
 80029f2:	f000 f863 	bl	8002abc <_sbrk_r>
 80029f6:	1c43      	adds	r3, r0, #1
 80029f8:	bf08      	it	eq
 80029fa:	4640      	moveq	r0, r8
 80029fc:	f8da 3000 	ldr.w	r3, [sl]
 8002a00:	f8c5 8008 	str.w	r8, [r5, #8]
 8002a04:	bf08      	it	eq
 8002a06:	2700      	moveq	r7, #0
 8002a08:	eba0 0008 	sub.w	r0, r0, r8
 8002a0c:	443b      	add	r3, r7
 8002a0e:	4407      	add	r7, r0
 8002a10:	f047 0701 	orr.w	r7, r7, #1
 8002a14:	45ab      	cmp	fp, r5
 8002a16:	f8ca 3000 	str.w	r3, [sl]
 8002a1a:	f8c8 7004 	str.w	r7, [r8, #4]
 8002a1e:	d0c4      	beq.n	80029aa <_malloc_r+0x322>
 8002a20:	2e0f      	cmp	r6, #15
 8002a22:	d810      	bhi.n	8002a46 <_malloc_r+0x3be>
 8002a24:	2301      	movs	r3, #1
 8002a26:	f8c8 3004 	str.w	r3, [r8, #4]
 8002a2a:	68ab      	ldr	r3, [r5, #8]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	f022 0203 	bic.w	r2, r2, #3
 8002a32:	4294      	cmp	r4, r2
 8002a34:	eba2 0304 	sub.w	r3, r2, r4
 8002a38:	d801      	bhi.n	8002a3e <_malloc_r+0x3b6>
 8002a3a:	2b0f      	cmp	r3, #15
 8002a3c:	dc1a      	bgt.n	8002a74 <_malloc_r+0x3ec>
 8002a3e:	4648      	mov	r0, r9
 8002a40:	f000 f836 	bl	8002ab0 <__malloc_unlock>
 8002a44:	e62d      	b.n	80026a2 <_malloc_r+0x1a>
 8002a46:	f8db 3004 	ldr.w	r3, [fp, #4]
 8002a4a:	3e0c      	subs	r6, #12
 8002a4c:	f026 0607 	bic.w	r6, r6, #7
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	4333      	orrs	r3, r6
 8002a56:	f8cb 3004 	str.w	r3, [fp, #4]
 8002a5a:	eb0b 0306 	add.w	r3, fp, r6
 8002a5e:	2205      	movs	r2, #5
 8002a60:	2e0f      	cmp	r6, #15
 8002a62:	605a      	str	r2, [r3, #4]
 8002a64:	609a      	str	r2, [r3, #8]
 8002a66:	d9a0      	bls.n	80029aa <_malloc_r+0x322>
 8002a68:	f10b 0108 	add.w	r1, fp, #8
 8002a6c:	4648      	mov	r0, r9
 8002a6e:	f000 f88b 	bl	8002b88 <_free_r>
 8002a72:	e79a      	b.n	80029aa <_malloc_r+0x322>
 8002a74:	68ae      	ldr	r6, [r5, #8]
 8002a76:	f044 0201 	orr.w	r2, r4, #1
 8002a7a:	4434      	add	r4, r6
 8002a7c:	f043 0301 	orr.w	r3, r3, #1
 8002a80:	6072      	str	r2, [r6, #4]
 8002a82:	60ac      	str	r4, [r5, #8]
 8002a84:	6063      	str	r3, [r4, #4]
 8002a86:	e631      	b.n	80026ec <_malloc_r+0x64>
 8002a88:	20000564 	.word	0x20000564
 8002a8c:	2000050c 	.word	0x2000050c
 8002a90:	00000080 	.word	0x00000080
 8002a94:	20000534 	.word	0x20000534
 8002a98:	0000007f 	.word	0x0000007f
 8002a9c:	2000055c 	.word	0x2000055c
 8002aa0:	20000560 	.word	0x20000560

08002aa4 <__malloc_lock>:
 8002aa4:	4801      	ldr	r0, [pc, #4]	; (8002aac <__malloc_lock+0x8>)
 8002aa6:	f000 b92b 	b.w	8002d00 <__retarget_lock_acquire_recursive>
 8002aaa:	bf00      	nop
 8002aac:	200133e0 	.word	0x200133e0

08002ab0 <__malloc_unlock>:
 8002ab0:	4801      	ldr	r0, [pc, #4]	; (8002ab8 <__malloc_unlock+0x8>)
 8002ab2:	f000 b926 	b.w	8002d02 <__retarget_lock_release_recursive>
 8002ab6:	bf00      	nop
 8002ab8:	200133e0 	.word	0x200133e0

08002abc <_sbrk_r>:
 8002abc:	b538      	push	{r3, r4, r5, lr}
 8002abe:	4c06      	ldr	r4, [pc, #24]	; (8002ad8 <_sbrk_r+0x1c>)
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	4605      	mov	r5, r0
 8002ac4:	4608      	mov	r0, r1
 8002ac6:	6023      	str	r3, [r4, #0]
 8002ac8:	f000 f91c 	bl	8002d04 <_sbrk>
 8002acc:	1c43      	adds	r3, r0, #1
 8002ace:	d102      	bne.n	8002ad6 <_sbrk_r+0x1a>
 8002ad0:	6823      	ldr	r3, [r4, #0]
 8002ad2:	b103      	cbz	r3, 8002ad6 <_sbrk_r+0x1a>
 8002ad4:	602b      	str	r3, [r5, #0]
 8002ad6:	bd38      	pop	{r3, r4, r5, pc}
 8002ad8:	200133e8 	.word	0x200133e8

08002adc <_malloc_trim_r>:
 8002adc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ae0:	4f25      	ldr	r7, [pc, #148]	; (8002b78 <_malloc_trim_r+0x9c>)
 8002ae2:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8002b84 <_malloc_trim_r+0xa8>
 8002ae6:	4689      	mov	r9, r1
 8002ae8:	4606      	mov	r6, r0
 8002aea:	f7ff ffdb 	bl	8002aa4 <__malloc_lock>
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	685d      	ldr	r5, [r3, #4]
 8002af2:	f1a8 0411 	sub.w	r4, r8, #17
 8002af6:	f025 0503 	bic.w	r5, r5, #3
 8002afa:	eba4 0409 	sub.w	r4, r4, r9
 8002afe:	442c      	add	r4, r5
 8002b00:	fbb4 f4f8 	udiv	r4, r4, r8
 8002b04:	3c01      	subs	r4, #1
 8002b06:	fb08 f404 	mul.w	r4, r8, r4
 8002b0a:	4544      	cmp	r4, r8
 8002b0c:	da05      	bge.n	8002b1a <_malloc_trim_r+0x3e>
 8002b0e:	4630      	mov	r0, r6
 8002b10:	f7ff ffce 	bl	8002ab0 <__malloc_unlock>
 8002b14:	2000      	movs	r0, #0
 8002b16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b1a:	2100      	movs	r1, #0
 8002b1c:	4630      	mov	r0, r6
 8002b1e:	f7ff ffcd 	bl	8002abc <_sbrk_r>
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	442b      	add	r3, r5
 8002b26:	4298      	cmp	r0, r3
 8002b28:	d1f1      	bne.n	8002b0e <_malloc_trim_r+0x32>
 8002b2a:	4261      	negs	r1, r4
 8002b2c:	4630      	mov	r0, r6
 8002b2e:	f7ff ffc5 	bl	8002abc <_sbrk_r>
 8002b32:	3001      	adds	r0, #1
 8002b34:	d110      	bne.n	8002b58 <_malloc_trim_r+0x7c>
 8002b36:	2100      	movs	r1, #0
 8002b38:	4630      	mov	r0, r6
 8002b3a:	f7ff ffbf 	bl	8002abc <_sbrk_r>
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	1a83      	subs	r3, r0, r2
 8002b42:	2b0f      	cmp	r3, #15
 8002b44:	dde3      	ble.n	8002b0e <_malloc_trim_r+0x32>
 8002b46:	490d      	ldr	r1, [pc, #52]	; (8002b7c <_malloc_trim_r+0xa0>)
 8002b48:	6809      	ldr	r1, [r1, #0]
 8002b4a:	1a40      	subs	r0, r0, r1
 8002b4c:	490c      	ldr	r1, [pc, #48]	; (8002b80 <_malloc_trim_r+0xa4>)
 8002b4e:	f043 0301 	orr.w	r3, r3, #1
 8002b52:	6008      	str	r0, [r1, #0]
 8002b54:	6053      	str	r3, [r2, #4]
 8002b56:	e7da      	b.n	8002b0e <_malloc_trim_r+0x32>
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	4a09      	ldr	r2, [pc, #36]	; (8002b80 <_malloc_trim_r+0xa4>)
 8002b5c:	1b2d      	subs	r5, r5, r4
 8002b5e:	f045 0501 	orr.w	r5, r5, #1
 8002b62:	605d      	str	r5, [r3, #4]
 8002b64:	6813      	ldr	r3, [r2, #0]
 8002b66:	4630      	mov	r0, r6
 8002b68:	1b1c      	subs	r4, r3, r4
 8002b6a:	6014      	str	r4, [r2, #0]
 8002b6c:	f7ff ffa0 	bl	8002ab0 <__malloc_unlock>
 8002b70:	2001      	movs	r0, #1
 8002b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b76:	bf00      	nop
 8002b78:	20000104 	.word	0x20000104
 8002b7c:	2000050c 	.word	0x2000050c
 8002b80:	20000534 	.word	0x20000534
 8002b84:	00000080 	.word	0x00000080

08002b88 <_free_r>:
 8002b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b8c:	4604      	mov	r4, r0
 8002b8e:	4688      	mov	r8, r1
 8002b90:	2900      	cmp	r1, #0
 8002b92:	f000 80ab 	beq.w	8002cec <_free_r+0x164>
 8002b96:	f7ff ff85 	bl	8002aa4 <__malloc_lock>
 8002b9a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8002b9e:	4d54      	ldr	r5, [pc, #336]	; (8002cf0 <_free_r+0x168>)
 8002ba0:	f022 0001 	bic.w	r0, r2, #1
 8002ba4:	f1a8 0308 	sub.w	r3, r8, #8
 8002ba8:	181f      	adds	r7, r3, r0
 8002baa:	68a9      	ldr	r1, [r5, #8]
 8002bac:	687e      	ldr	r6, [r7, #4]
 8002bae:	428f      	cmp	r7, r1
 8002bb0:	f026 0603 	bic.w	r6, r6, #3
 8002bb4:	f002 0201 	and.w	r2, r2, #1
 8002bb8:	d11b      	bne.n	8002bf2 <_free_r+0x6a>
 8002bba:	4430      	add	r0, r6
 8002bbc:	b93a      	cbnz	r2, 8002bce <_free_r+0x46>
 8002bbe:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8002bc2:	1a9b      	subs	r3, r3, r2
 8002bc4:	4410      	add	r0, r2
 8002bc6:	6899      	ldr	r1, [r3, #8]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	60ca      	str	r2, [r1, #12]
 8002bcc:	6091      	str	r1, [r2, #8]
 8002bce:	f040 0201 	orr.w	r2, r0, #1
 8002bd2:	605a      	str	r2, [r3, #4]
 8002bd4:	60ab      	str	r3, [r5, #8]
 8002bd6:	4b47      	ldr	r3, [pc, #284]	; (8002cf4 <_free_r+0x16c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4298      	cmp	r0, r3
 8002bdc:	d304      	bcc.n	8002be8 <_free_r+0x60>
 8002bde:	4b46      	ldr	r3, [pc, #280]	; (8002cf8 <_free_r+0x170>)
 8002be0:	4620      	mov	r0, r4
 8002be2:	6819      	ldr	r1, [r3, #0]
 8002be4:	f7ff ff7a 	bl	8002adc <_malloc_trim_r>
 8002be8:	4620      	mov	r0, r4
 8002bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002bee:	f7ff bf5f 	b.w	8002ab0 <__malloc_unlock>
 8002bf2:	607e      	str	r6, [r7, #4]
 8002bf4:	2a00      	cmp	r2, #0
 8002bf6:	d139      	bne.n	8002c6c <_free_r+0xe4>
 8002bf8:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8002bfc:	1a5b      	subs	r3, r3, r1
 8002bfe:	4408      	add	r0, r1
 8002c00:	6899      	ldr	r1, [r3, #8]
 8002c02:	f105 0e08 	add.w	lr, r5, #8
 8002c06:	4571      	cmp	r1, lr
 8002c08:	d032      	beq.n	8002c70 <_free_r+0xe8>
 8002c0a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8002c0e:	f8c1 e00c 	str.w	lr, [r1, #12]
 8002c12:	f8ce 1008 	str.w	r1, [lr, #8]
 8002c16:	19b9      	adds	r1, r7, r6
 8002c18:	6849      	ldr	r1, [r1, #4]
 8002c1a:	07c9      	lsls	r1, r1, #31
 8002c1c:	d40a      	bmi.n	8002c34 <_free_r+0xac>
 8002c1e:	4430      	add	r0, r6
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	bb3a      	cbnz	r2, 8002c74 <_free_r+0xec>
 8002c24:	4e35      	ldr	r6, [pc, #212]	; (8002cfc <_free_r+0x174>)
 8002c26:	42b1      	cmp	r1, r6
 8002c28:	d124      	bne.n	8002c74 <_free_r+0xec>
 8002c2a:	616b      	str	r3, [r5, #20]
 8002c2c:	612b      	str	r3, [r5, #16]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	60d9      	str	r1, [r3, #12]
 8002c32:	6099      	str	r1, [r3, #8]
 8002c34:	f040 0101 	orr.w	r1, r0, #1
 8002c38:	6059      	str	r1, [r3, #4]
 8002c3a:	5018      	str	r0, [r3, r0]
 8002c3c:	2a00      	cmp	r2, #0
 8002c3e:	d1d3      	bne.n	8002be8 <_free_r+0x60>
 8002c40:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002c44:	d21a      	bcs.n	8002c7c <_free_r+0xf4>
 8002c46:	08c0      	lsrs	r0, r0, #3
 8002c48:	1081      	asrs	r1, r0, #2
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	408a      	lsls	r2, r1
 8002c4e:	6869      	ldr	r1, [r5, #4]
 8002c50:	3001      	adds	r0, #1
 8002c52:	430a      	orrs	r2, r1
 8002c54:	606a      	str	r2, [r5, #4]
 8002c56:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8002c5a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8002c5e:	6099      	str	r1, [r3, #8]
 8002c60:	3a08      	subs	r2, #8
 8002c62:	60da      	str	r2, [r3, #12]
 8002c64:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8002c68:	60cb      	str	r3, [r1, #12]
 8002c6a:	e7bd      	b.n	8002be8 <_free_r+0x60>
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	e7d2      	b.n	8002c16 <_free_r+0x8e>
 8002c70:	2201      	movs	r2, #1
 8002c72:	e7d0      	b.n	8002c16 <_free_r+0x8e>
 8002c74:	68fe      	ldr	r6, [r7, #12]
 8002c76:	60ce      	str	r6, [r1, #12]
 8002c78:	60b1      	str	r1, [r6, #8]
 8002c7a:	e7db      	b.n	8002c34 <_free_r+0xac>
 8002c7c:	0a42      	lsrs	r2, r0, #9
 8002c7e:	2a04      	cmp	r2, #4
 8002c80:	d813      	bhi.n	8002caa <_free_r+0x122>
 8002c82:	0982      	lsrs	r2, r0, #6
 8002c84:	3238      	adds	r2, #56	; 0x38
 8002c86:	1c51      	adds	r1, r2, #1
 8002c88:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8002c8c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8002c90:	428e      	cmp	r6, r1
 8002c92:	d124      	bne.n	8002cde <_free_r+0x156>
 8002c94:	2001      	movs	r0, #1
 8002c96:	1092      	asrs	r2, r2, #2
 8002c98:	fa00 f202 	lsl.w	r2, r0, r2
 8002c9c:	6868      	ldr	r0, [r5, #4]
 8002c9e:	4302      	orrs	r2, r0
 8002ca0:	606a      	str	r2, [r5, #4]
 8002ca2:	60de      	str	r6, [r3, #12]
 8002ca4:	6099      	str	r1, [r3, #8]
 8002ca6:	60b3      	str	r3, [r6, #8]
 8002ca8:	e7de      	b.n	8002c68 <_free_r+0xe0>
 8002caa:	2a14      	cmp	r2, #20
 8002cac:	d801      	bhi.n	8002cb2 <_free_r+0x12a>
 8002cae:	325b      	adds	r2, #91	; 0x5b
 8002cb0:	e7e9      	b.n	8002c86 <_free_r+0xfe>
 8002cb2:	2a54      	cmp	r2, #84	; 0x54
 8002cb4:	d802      	bhi.n	8002cbc <_free_r+0x134>
 8002cb6:	0b02      	lsrs	r2, r0, #12
 8002cb8:	326e      	adds	r2, #110	; 0x6e
 8002cba:	e7e4      	b.n	8002c86 <_free_r+0xfe>
 8002cbc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8002cc0:	d802      	bhi.n	8002cc8 <_free_r+0x140>
 8002cc2:	0bc2      	lsrs	r2, r0, #15
 8002cc4:	3277      	adds	r2, #119	; 0x77
 8002cc6:	e7de      	b.n	8002c86 <_free_r+0xfe>
 8002cc8:	f240 5154 	movw	r1, #1364	; 0x554
 8002ccc:	428a      	cmp	r2, r1
 8002cce:	bf9a      	itte	ls
 8002cd0:	0c82      	lsrls	r2, r0, #18
 8002cd2:	327c      	addls	r2, #124	; 0x7c
 8002cd4:	227e      	movhi	r2, #126	; 0x7e
 8002cd6:	e7d6      	b.n	8002c86 <_free_r+0xfe>
 8002cd8:	6889      	ldr	r1, [r1, #8]
 8002cda:	428e      	cmp	r6, r1
 8002cdc:	d004      	beq.n	8002ce8 <_free_r+0x160>
 8002cde:	684a      	ldr	r2, [r1, #4]
 8002ce0:	f022 0203 	bic.w	r2, r2, #3
 8002ce4:	4290      	cmp	r0, r2
 8002ce6:	d3f7      	bcc.n	8002cd8 <_free_r+0x150>
 8002ce8:	68ce      	ldr	r6, [r1, #12]
 8002cea:	e7da      	b.n	8002ca2 <_free_r+0x11a>
 8002cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cf0:	20000104 	.word	0x20000104
 8002cf4:	20000510 	.word	0x20000510
 8002cf8:	20000564 	.word	0x20000564
 8002cfc:	2000010c 	.word	0x2000010c

08002d00 <__retarget_lock_acquire_recursive>:
 8002d00:	4770      	bx	lr

08002d02 <__retarget_lock_release_recursive>:
 8002d02:	4770      	bx	lr

08002d04 <_sbrk>:
 8002d04:	4b04      	ldr	r3, [pc, #16]	; (8002d18 <_sbrk+0x14>)
 8002d06:	6819      	ldr	r1, [r3, #0]
 8002d08:	4602      	mov	r2, r0
 8002d0a:	b909      	cbnz	r1, 8002d10 <_sbrk+0xc>
 8002d0c:	4903      	ldr	r1, [pc, #12]	; (8002d1c <_sbrk+0x18>)
 8002d0e:	6019      	str	r1, [r3, #0]
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	4402      	add	r2, r0
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	4770      	bx	lr
 8002d18:	20000568 	.word	0x20000568
 8002d1c:	200133ec 	.word	0x200133ec

08002d20 <_init>:
 8002d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d22:	bf00      	nop
 8002d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d26:	bc08      	pop	{r3}
 8002d28:	469e      	mov	lr, r3
 8002d2a:	4770      	bx	lr

08002d2c <_fini>:
 8002d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d2e:	bf00      	nop
 8002d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d32:	bc08      	pop	{r3}
 8002d34:	469e      	mov	lr, r3
 8002d36:	4770      	bx	lr
