
Software_ontwikkeling_opdracht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002464  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080025ec  080025ec  000125ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080025f4  080025f4  000125f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080025f8  080025f8  000125f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  080025fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  7 .bss          00012d90  20000010  20000010  00020010  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20012da0  20012da0  00020010  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008a34  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000164b  00000000  00000000  00028a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000908  00000000  00000000  0002a0c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000820  00000000  00000000  0002a9c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000038d0  00000000  00000000  0002b1e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002ed9  00000000  00000000  0002eab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00031991  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000026fc  00000000  00000000  00031a10  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0003410c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080025d4 	.word	0x080025d4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080025d4 	.word	0x080025d4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2uiz>:
 800095c:	004a      	lsls	r2, r1, #1
 800095e:	d211      	bcs.n	8000984 <__aeabi_d2uiz+0x28>
 8000960:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000964:	d211      	bcs.n	800098a <__aeabi_d2uiz+0x2e>
 8000966:	d50d      	bpl.n	8000984 <__aeabi_d2uiz+0x28>
 8000968:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800096c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000970:	d40e      	bmi.n	8000990 <__aeabi_d2uiz+0x34>
 8000972:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000976:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800097a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800097e:	fa23 f002 	lsr.w	r0, r3, r2
 8000982:	4770      	bx	lr
 8000984:	f04f 0000 	mov.w	r0, #0
 8000988:	4770      	bx	lr
 800098a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800098e:	d102      	bne.n	8000996 <__aeabi_d2uiz+0x3a>
 8000990:	f04f 30ff 	mov.w	r0, #4294967295
 8000994:	4770      	bx	lr
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	4770      	bx	lr

0800099c <draw_line>:

#include <stdio.h>
#include <stdlib.h>

void draw_line(int x1, int y1, int x2, int y2, uint8_t color)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b090      	sub	sp, #64	; 0x40
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
 80009a8:	603b      	str	r3, [r7, #0]

  int i,dx,dy,sdx,sdy,dxabs,dyabs,x,y,px,py;

  dx=x2-x1;      /* the horizontal distance of the line */
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
  dy=y2-y1;      /* the vertical distance of the line */
 80009b2:	683a      	ldr	r2, [r7, #0]
 80009b4:	68bb      	ldr	r3, [r7, #8]
 80009b6:	1ad3      	subs	r3, r2, r3
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  dxabs=abs(dx);
 80009ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009bc:	2b00      	cmp	r3, #0
 80009be:	bfb8      	it	lt
 80009c0:	425b      	neglt	r3, r3
 80009c2:	623b      	str	r3, [r7, #32]
  dyabs=abs(dy);
 80009c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	bfb8      	it	lt
 80009ca:	425b      	neglt	r3, r3
 80009cc:	61fb      	str	r3, [r7, #28]
  sdx=sgn(dx);
 80009ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	db06      	blt.n	80009e2 <draw_line+0x46>
 80009d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	bfcc      	ite	gt
 80009da:	2301      	movgt	r3, #1
 80009dc:	2300      	movle	r3, #0
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	e001      	b.n	80009e6 <draw_line+0x4a>
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
 80009e6:	61bb      	str	r3, [r7, #24]
  sdy=sgn(dy);
 80009e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	db06      	blt.n	80009fc <draw_line+0x60>
 80009ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	bfcc      	ite	gt
 80009f4:	2301      	movgt	r3, #1
 80009f6:	2300      	movle	r3, #0
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	e001      	b.n	8000a00 <draw_line+0x64>
 80009fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000a00:	617b      	str	r3, [r7, #20]
  x=dyabs>>1;
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	105b      	asrs	r3, r3, #1
 8000a06:	63bb      	str	r3, [r7, #56]	; 0x38
  y=dxabs>>1;
 8000a08:	6a3b      	ldr	r3, [r7, #32]
 8000a0a:	105b      	asrs	r3, r3, #1
 8000a0c:	637b      	str	r3, [r7, #52]	; 0x34
  px=x1;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	633b      	str	r3, [r7, #48]	; 0x30
  py=y1;
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c

  //VGA[(py<<8)+(py<<6)+px]=color;

  if (dxabs>=dyabs) /* the line is more horizontal than vertical */
 8000a16:	6a3a      	ldr	r2, [r7, #32]
 8000a18:	69fb      	ldr	r3, [r7, #28]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	db27      	blt.n	8000a6e <draw_line+0xd2>
  {

	for(i=0;i<=dxabs;i++)
 8000a1e:	2300      	movs	r3, #0
 8000a20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a22:	e01f      	b.n	8000a64 <draw_line+0xc8>
	{
		UB_VGA_SetPixel(px,py,color);
 8000a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a2a:	b291      	uxth	r1, r2
 8000a2c:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8000a30:	4618      	mov	r0, r3
 8000a32:	f001 f9cd 	bl	8001dd0 <UB_VGA_SetPixel>
		y+=dyabs;
 8000a36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	637b      	str	r3, [r7, #52]	; 0x34
		if (y>=dxabs)
 8000a3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a40:	6a3b      	ldr	r3, [r7, #32]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	db07      	blt.n	8000a56 <draw_line+0xba>
		{
			y-=dxabs;
 8000a46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a48:	6a3b      	ldr	r3, [r7, #32]
 8000a4a:	1ad3      	subs	r3, r2, r3
 8000a4c:	637b      	str	r3, [r7, #52]	; 0x34
			py+=sdy;
 8000a4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	4413      	add	r3, r2
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		px+=sdx;
 8000a56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a58:	69bb      	ldr	r3, [r7, #24]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	633b      	str	r3, [r7, #48]	; 0x30
	for(i=0;i<=dxabs;i++)
 8000a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000a60:	3301      	adds	r3, #1
 8000a62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000a66:	6a3b      	ldr	r3, [r7, #32]
 8000a68:	429a      	cmp	r2, r3
 8000a6a:	dddb      	ble.n	8000a24 <draw_line+0x88>
      py+=sdy;

    }
  }

}
 8000a6c:	e026      	b.n	8000abc <draw_line+0x120>
    for(i=0;i<=dyabs;i++)
 8000a6e:	2300      	movs	r3, #0
 8000a70:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000a72:	e01f      	b.n	8000ab4 <draw_line+0x118>
      UB_VGA_SetPixel(px,py,color);
 8000a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a7a:	b291      	uxth	r1, r2
 8000a7c:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8000a80:	4618      	mov	r0, r3
 8000a82:	f001 f9a5 	bl	8001dd0 <UB_VGA_SetPixel>
      x+=dxabs;
 8000a86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a88:	6a3b      	ldr	r3, [r7, #32]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	63bb      	str	r3, [r7, #56]	; 0x38
      if (x>=dyabs)
 8000a8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	429a      	cmp	r2, r3
 8000a94:	db07      	blt.n	8000aa6 <draw_line+0x10a>
        x-=dyabs;
 8000a96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	63bb      	str	r3, [r7, #56]	; 0x38
        px+=sdx;
 8000a9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	633b      	str	r3, [r7, #48]	; 0x30
      py+=sdy;
 8000aa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	4413      	add	r3, r2
 8000aac:	62fb      	str	r3, [r7, #44]	; 0x2c
    for(i=0;i<=dyabs;i++)
 8000aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000ab4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	dddb      	ble.n	8000a74 <draw_line+0xd8>
}
 8000abc:	bf00      	nop
 8000abe:	3740      	adds	r7, #64	; 0x40
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <draw_rectangle>:

#include "rectangle.h"
#include "line.h"

void draw_rectangle (int x1, int y1, int x2, int y2, byte color)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af02      	add	r7, sp, #8
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
 8000ad0:	603b      	str	r3, [r7, #0]
	x1 = x1 - 1;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
	x2 = x2 + 10;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	330a      	adds	r3, #10
 8000adc:	607b      	str	r3, [r7, #4]
	draw_line(x1, y1, x2, y1, color);
 8000ade:	7e3b      	ldrb	r3, [r7, #24]
 8000ae0:	9300      	str	r3, [sp, #0]
 8000ae2:	68bb      	ldr	r3, [r7, #8]
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	68b9      	ldr	r1, [r7, #8]
 8000ae8:	68f8      	ldr	r0, [r7, #12]
 8000aea:	f7ff ff57 	bl	800099c <draw_line>
	draw_line(x1, y1, x1, y2, color);
 8000aee:	7e3b      	ldrb	r3, [r7, #24]
 8000af0:	9300      	str	r3, [sp, #0]
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	68fa      	ldr	r2, [r7, #12]
 8000af6:	68b9      	ldr	r1, [r7, #8]
 8000af8:	68f8      	ldr	r0, [r7, #12]
 8000afa:	f7ff ff4f 	bl	800099c <draw_line>
	draw_line(x2, y2, x2, y1, color);
 8000afe:	7e3b      	ldrb	r3, [r7, #24]
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	6839      	ldr	r1, [r7, #0]
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff ff47 	bl	800099c <draw_line>
	draw_line(x2, y2, x1, y2, color);
 8000b0e:	7e3b      	ldrb	r3, [r7, #24]
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	68fa      	ldr	r2, [r7, #12]
 8000b16:	6839      	ldr	r1, [r7, #0]
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f7ff ff3f 	bl	800099c <draw_line>
}
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b085      	sub	sp, #20
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000b30:	2300      	movs	r3, #0
 8000b32:	73fb      	strb	r3, [r7, #15]
 8000b34:	2300      	movs	r3, #0
 8000b36:	73bb      	strb	r3, [r7, #14]
 8000b38:	230f      	movs	r3, #15
 8000b3a:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	78db      	ldrb	r3, [r3, #3]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d039      	beq.n	8000bb8 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000b44:	4b27      	ldr	r3, [pc, #156]	; (8000be4 <NVIC_Init+0xbc>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	0a1b      	lsrs	r3, r3, #8
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
 8000b56:	f1c3 0304 	rsb	r3, r3, #4
 8000b5a:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000b5c:	7b7a      	ldrb	r2, [r7, #13]
 8000b5e:	7bfb      	ldrb	r3, [r7, #15]
 8000b60:	fa42 f303 	asr.w	r3, r2, r3
 8000b64:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	785b      	ldrb	r3, [r3, #1]
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	7bbb      	ldrb	r3, [r7, #14]
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	789a      	ldrb	r2, [r3, #2]
 8000b78:	7b7b      	ldrb	r3, [r7, #13]
 8000b7a:	4013      	ands	r3, r2
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	7bfb      	ldrb	r3, [r7, #15]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000b84:	7bfb      	ldrb	r3, [r7, #15]
 8000b86:	011b      	lsls	r3, r3, #4
 8000b88:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000b8a:	4a17      	ldr	r2, [pc, #92]	; (8000be8 <NVIC_Init+0xc0>)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4413      	add	r3, r2
 8000b92:	7bfa      	ldrb	r2, [r7, #15]
 8000b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000b98:	4a13      	ldr	r2, [pc, #76]	; (8000be8 <NVIC_Init+0xc0>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	095b      	lsrs	r3, r3, #5
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	f003 031f 	and.w	r3, r3, #31
 8000bac:	2101      	movs	r1, #1
 8000bae:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000bb2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000bb6:	e00f      	b.n	8000bd8 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000bb8:	490b      	ldr	r1, [pc, #44]	; (8000be8 <NVIC_Init+0xc0>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	095b      	lsrs	r3, r3, #5
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	f003 031f 	and.w	r3, r3, #31
 8000bcc:	2201      	movs	r2, #1
 8000bce:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000bd0:	f100 0320 	add.w	r3, r0, #32
 8000bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00
 8000be8:	e000e100 	.word	0xe000e100

08000bec <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f023 0201 	bic.w	r2, r3, #1
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2221      	movs	r2, #33	; 0x21
 8000c22:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4a46      	ldr	r2, [pc, #280]	; (8000d40 <DMA_DeInit+0x154>)
 8000c28:	4293      	cmp	r3, r2
 8000c2a:	d103      	bne.n	8000c34 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8000c2c:	4b45      	ldr	r3, [pc, #276]	; (8000d44 <DMA_DeInit+0x158>)
 8000c2e:	223d      	movs	r2, #61	; 0x3d
 8000c30:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000c32:	e07e      	b.n	8000d32 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a44      	ldr	r2, [pc, #272]	; (8000d48 <DMA_DeInit+0x15c>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d104      	bne.n	8000c46 <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8000c3c:	4b41      	ldr	r3, [pc, #260]	; (8000d44 <DMA_DeInit+0x158>)
 8000c3e:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000c42:	609a      	str	r2, [r3, #8]
}
 8000c44:	e075      	b.n	8000d32 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a40      	ldr	r2, [pc, #256]	; (8000d4c <DMA_DeInit+0x160>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d104      	bne.n	8000c58 <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8000c4e:	4b3d      	ldr	r3, [pc, #244]	; (8000d44 <DMA_DeInit+0x158>)
 8000c50:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000c54:	609a      	str	r2, [r3, #8]
}
 8000c56:	e06c      	b.n	8000d32 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a3d      	ldr	r2, [pc, #244]	; (8000d50 <DMA_DeInit+0x164>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d104      	bne.n	8000c6a <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8000c60:	4b38      	ldr	r3, [pc, #224]	; (8000d44 <DMA_DeInit+0x158>)
 8000c62:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000c66:	609a      	str	r2, [r3, #8]
}
 8000c68:	e063      	b.n	8000d32 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4a39      	ldr	r2, [pc, #228]	; (8000d54 <DMA_DeInit+0x168>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d103      	bne.n	8000c7a <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8000c72:	4b34      	ldr	r3, [pc, #208]	; (8000d44 <DMA_DeInit+0x158>)
 8000c74:	4a38      	ldr	r2, [pc, #224]	; (8000d58 <DMA_DeInit+0x16c>)
 8000c76:	60da      	str	r2, [r3, #12]
}
 8000c78:	e05b      	b.n	8000d32 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4a37      	ldr	r2, [pc, #220]	; (8000d5c <DMA_DeInit+0x170>)
 8000c7e:	4293      	cmp	r3, r2
 8000c80:	d103      	bne.n	8000c8a <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8000c82:	4b30      	ldr	r3, [pc, #192]	; (8000d44 <DMA_DeInit+0x158>)
 8000c84:	4a36      	ldr	r2, [pc, #216]	; (8000d60 <DMA_DeInit+0x174>)
 8000c86:	60da      	str	r2, [r3, #12]
}
 8000c88:	e053      	b.n	8000d32 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a35      	ldr	r2, [pc, #212]	; (8000d64 <DMA_DeInit+0x178>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d103      	bne.n	8000c9a <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8000c92:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <DMA_DeInit+0x158>)
 8000c94:	4a34      	ldr	r2, [pc, #208]	; (8000d68 <DMA_DeInit+0x17c>)
 8000c96:	60da      	str	r2, [r3, #12]
}
 8000c98:	e04b      	b.n	8000d32 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a33      	ldr	r2, [pc, #204]	; (8000d6c <DMA_DeInit+0x180>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d104      	bne.n	8000cac <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8000ca2:	4b28      	ldr	r3, [pc, #160]	; (8000d44 <DMA_DeInit+0x158>)
 8000ca4:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000ca8:	60da      	str	r2, [r3, #12]
}
 8000caa:	e042      	b.n	8000d32 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4a30      	ldr	r2, [pc, #192]	; (8000d70 <DMA_DeInit+0x184>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d103      	bne.n	8000cbc <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8000cb4:	4b2f      	ldr	r3, [pc, #188]	; (8000d74 <DMA_DeInit+0x188>)
 8000cb6:	223d      	movs	r2, #61	; 0x3d
 8000cb8:	609a      	str	r2, [r3, #8]
}
 8000cba:	e03a      	b.n	8000d32 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4a2e      	ldr	r2, [pc, #184]	; (8000d78 <DMA_DeInit+0x18c>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d104      	bne.n	8000cce <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8000cc4:	4b2b      	ldr	r3, [pc, #172]	; (8000d74 <DMA_DeInit+0x188>)
 8000cc6:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000cca:	609a      	str	r2, [r3, #8]
}
 8000ccc:	e031      	b.n	8000d32 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4a2a      	ldr	r2, [pc, #168]	; (8000d7c <DMA_DeInit+0x190>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d104      	bne.n	8000ce0 <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8000cd6:	4b27      	ldr	r3, [pc, #156]	; (8000d74 <DMA_DeInit+0x188>)
 8000cd8:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000cdc:	609a      	str	r2, [r3, #8]
}
 8000cde:	e028      	b.n	8000d32 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	4a27      	ldr	r2, [pc, #156]	; (8000d80 <DMA_DeInit+0x194>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d104      	bne.n	8000cf2 <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8000ce8:	4b22      	ldr	r3, [pc, #136]	; (8000d74 <DMA_DeInit+0x188>)
 8000cea:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000cee:	609a      	str	r2, [r3, #8]
}
 8000cf0:	e01f      	b.n	8000d32 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a23      	ldr	r2, [pc, #140]	; (8000d84 <DMA_DeInit+0x198>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d103      	bne.n	8000d02 <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8000cfa:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <DMA_DeInit+0x188>)
 8000cfc:	4a16      	ldr	r2, [pc, #88]	; (8000d58 <DMA_DeInit+0x16c>)
 8000cfe:	60da      	str	r2, [r3, #12]
}
 8000d00:	e017      	b.n	8000d32 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a20      	ldr	r2, [pc, #128]	; (8000d88 <DMA_DeInit+0x19c>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d103      	bne.n	8000d12 <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8000d0a:	4b1a      	ldr	r3, [pc, #104]	; (8000d74 <DMA_DeInit+0x188>)
 8000d0c:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <DMA_DeInit+0x174>)
 8000d0e:	60da      	str	r2, [r3, #12]
}
 8000d10:	e00f      	b.n	8000d32 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a1d      	ldr	r2, [pc, #116]	; (8000d8c <DMA_DeInit+0x1a0>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d103      	bne.n	8000d22 <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8000d1a:	4b16      	ldr	r3, [pc, #88]	; (8000d74 <DMA_DeInit+0x188>)
 8000d1c:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <DMA_DeInit+0x17c>)
 8000d1e:	60da      	str	r2, [r3, #12]
}
 8000d20:	e007      	b.n	8000d32 <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a1a      	ldr	r2, [pc, #104]	; (8000d90 <DMA_DeInit+0x1a4>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d103      	bne.n	8000d32 <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8000d2a:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <DMA_DeInit+0x188>)
 8000d2c:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000d30:	60da      	str	r2, [r3, #12]
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	40026010 	.word	0x40026010
 8000d44:	40026000 	.word	0x40026000
 8000d48:	40026028 	.word	0x40026028
 8000d4c:	40026040 	.word	0x40026040
 8000d50:	40026058 	.word	0x40026058
 8000d54:	40026070 	.word	0x40026070
 8000d58:	2000003d 	.word	0x2000003d
 8000d5c:	40026088 	.word	0x40026088
 8000d60:	20000f40 	.word	0x20000f40
 8000d64:	400260a0 	.word	0x400260a0
 8000d68:	203d0000 	.word	0x203d0000
 8000d6c:	400260b8 	.word	0x400260b8
 8000d70:	40026410 	.word	0x40026410
 8000d74:	40026400 	.word	0x40026400
 8000d78:	40026428 	.word	0x40026428
 8000d7c:	40026440 	.word	0x40026440
 8000d80:	40026458 	.word	0x40026458
 8000d84:	40026470 	.word	0x40026470
 8000d88:	40026488 	.word	0x40026488
 8000d8c:	400264a0 	.word	0x400264a0
 8000d90:	400264b8 	.word	0x400264b8

08000d94 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000da8:	68fa      	ldr	r2, [r7, #12]
 8000daa:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <DMA_Init+0xac>)
 8000dac:	4013      	ands	r3, r2
 8000dae:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000dbe:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000dca:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	6a1b      	ldr	r3, [r3, #32]
 8000dd0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000dd6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ddc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000de2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000de8:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	695b      	ldr	r3, [r3, #20]
 8000dfa:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f023 0307 	bic.w	r3, r3, #7
 8000e02:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	68fa      	ldr	r2, [r7, #12]
 8000e18:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	691a      	ldr	r2, [r3, #16]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	60da      	str	r2, [r3, #12]
}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	f01c803f 	.word	0xf01c803f

08000e44 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e50:	78fb      	ldrb	r3, [r7, #3]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d006      	beq.n	8000e64 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f043 0201 	orr.w	r2, r3, #1
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000e62:	e005      	b.n	8000e70 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	f023 0201 	bic.w	r2, r3, #1
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	601a      	str	r2, [r3, #0]
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	60f8      	str	r0, [r7, #12]
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	4613      	mov	r3, r2
 8000e88:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d00f      	beq.n	8000eb4 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d006      	beq.n	8000ea8 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	615a      	str	r2, [r3, #20]
 8000ea6:	e005      	b.n	8000eb4 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	695b      	ldr	r3, [r3, #20]
 8000eac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	2b80      	cmp	r3, #128	; 0x80
 8000eb8:	d014      	beq.n	8000ee4 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d008      	beq.n	8000ed2 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	f003 031e 	and.w	r3, r3, #30
 8000eca:	431a      	orrs	r2, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8000ed0:	e008      	b.n	8000ee4 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	f003 031e 	and.w	r3, r3, #30
 8000edc:	43db      	mvns	r3, r3
 8000ede:	401a      	ands	r2, r3
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	601a      	str	r2, [r3, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b087      	sub	sp, #28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8000efa:	2300      	movs	r3, #0
 8000efc:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a22      	ldr	r2, [pc, #136]	; (8000f94 <DMA_GetITStatus+0xa4>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d802      	bhi.n	8000f14 <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000f0e:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <DMA_GetITStatus+0xa8>)
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	e001      	b.n	8000f18 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000f14:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <DMA_GetITStatus+0xac>)
 8000f16:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000f1e:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d00a      	beq.n	8000f3c <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	0adb      	lsrs	r3, r3, #11
 8000f2a:	f003 031e 	and.w	r3, r3, #30
 8000f2e:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	4013      	ands	r3, r2
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	e004      	b.n	8000f46 <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	695b      	ldr	r3, [r3, #20]
 8000f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f44:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	e002      	b.n	8000f5e <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000f64:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000f68:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d005      	beq.n	8000f80 <DMA_GetITStatus+0x90>
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d002      	beq.n	8000f80 <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	75fb      	strb	r3, [r7, #23]
 8000f7e:	e001      	b.n	8000f84 <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8000f80:	2300      	movs	r3, #0
 8000f82:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8000f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	371c      	adds	r7, #28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	4002640f 	.word	0x4002640f
 8000f98:	40026000 	.word	0x40026000
 8000f9c:	40026400 	.word	0x40026400

08000fa0 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a10      	ldr	r2, [pc, #64]	; (8000ff0 <DMA_ClearITPendingBit+0x50>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d802      	bhi.n	8000fb8 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <DMA_ClearITPendingBit+0x54>)
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	e001      	b.n	8000fbc <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <DMA_ClearITPendingBit+0x58>)
 8000fba:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d007      	beq.n	8000fd6 <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000fcc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000fd0:	68fa      	ldr	r2, [r7, #12]
 8000fd2:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 8000fd4:	e006      	b.n	8000fe4 <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000fdc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000fe0:	68fa      	ldr	r2, [r7, #12]
 8000fe2:	6093      	str	r3, [r2, #8]
}
 8000fe4:	bf00      	nop
 8000fe6:	3714      	adds	r7, #20
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	4002640f 	.word	0x4002640f
 8000ff4:	40026000 	.word	0x40026000
 8000ff8:	40026400 	.word	0x40026400

08000ffc <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b087      	sub	sp, #28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001012:	2300      	movs	r3, #0
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	e076      	b.n	8001106 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8001018:	2201      	movs	r2, #1
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	429a      	cmp	r2, r3
 8001032:	d165      	bne.n	8001100 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	2103      	movs	r1, #3
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43db      	mvns	r3, r3
 8001044:	401a      	ands	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	791b      	ldrb	r3, [r3, #4]
 8001052:	4619      	mov	r1, r3
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	fa01 f303 	lsl.w	r3, r1, r3
 800105c:	431a      	orrs	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	791b      	ldrb	r3, [r3, #4]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d003      	beq.n	8001072 <GPIO_Init+0x76>
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	791b      	ldrb	r3, [r3, #4]
 800106e:	2b02      	cmp	r3, #2
 8001070:	d12e      	bne.n	80010d0 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689a      	ldr	r2, [r3, #8]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	2103      	movs	r1, #3
 800107c:	fa01 f303 	lsl.w	r3, r1, r3
 8001080:	43db      	mvns	r3, r3
 8001082:	401a      	ands	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	795b      	ldrb	r3, [r3, #5]
 8001090:	4619      	mov	r1, r3
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	fa01 f303 	lsl.w	r3, r1, r3
 800109a:	431a      	orrs	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	4619      	mov	r1, r3
 80010aa:	2301      	movs	r3, #1
 80010ac:	408b      	lsls	r3, r1
 80010ae:	43db      	mvns	r3, r3
 80010b0:	401a      	ands	r2, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	7992      	ldrb	r2, [r2, #6]
 80010be:	4611      	mov	r1, r2
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	b292      	uxth	r2, r2
 80010c4:	fa01 f202 	lsl.w	r2, r1, r2
 80010c8:	b292      	uxth	r2, r2
 80010ca:	431a      	orrs	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68da      	ldr	r2, [r3, #12]
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	2103      	movs	r1, #3
 80010dc:	fa01 f303 	lsl.w	r3, r1, r3
 80010e0:	43db      	mvns	r3, r3
 80010e2:	401a      	ands	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68da      	ldr	r2, [r3, #12]
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	79db      	ldrb	r3, [r3, #7]
 80010f0:	4619      	mov	r1, r3
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	fa01 f303 	lsl.w	r3, r1, r3
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	3301      	adds	r3, #1
 8001104:	617b      	str	r3, [r7, #20]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	2b0f      	cmp	r3, #15
 800110a:	d985      	bls.n	8001018 <GPIO_Init+0x1c>
    }
  }
}
 800110c:	bf00      	nop
 800110e:	371c      	adds	r7, #28
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	460b      	mov	r3, r1
 8001122:	807b      	strh	r3, [r7, #2]
 8001124:	4613      	mov	r3, r2
 8001126:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8001128:	2300      	movs	r3, #0
 800112a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001130:	787a      	ldrb	r2, [r7, #1]
 8001132:	887b      	ldrh	r3, [r7, #2]
 8001134:	f003 0307 	and.w	r3, r3, #7
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8001140:	887b      	ldrh	r3, [r7, #2]
 8001142:	08db      	lsrs	r3, r3, #3
 8001144:	b29b      	uxth	r3, r3
 8001146:	4618      	mov	r0, r3
 8001148:	887b      	ldrh	r3, [r7, #2]
 800114a:	08db      	lsrs	r3, r3, #3
 800114c:	b29b      	uxth	r3, r3
 800114e:	461a      	mov	r2, r3
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3208      	adds	r2, #8
 8001154:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001158:	887b      	ldrh	r3, [r7, #2]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	210f      	movs	r1, #15
 8001162:	fa01 f303 	lsl.w	r3, r1, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	ea02 0103 	and.w	r1, r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f100 0208 	add.w	r2, r0, #8
 8001172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001176:	887b      	ldrh	r3, [r7, #2]
 8001178:	08db      	lsrs	r3, r3, #3
 800117a:	b29b      	uxth	r3, r3
 800117c:	461a      	mov	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3208      	adds	r2, #8
 8001182:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4313      	orrs	r3, r2
 800118a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800118c:	887b      	ldrh	r3, [r7, #2]
 800118e:	08db      	lsrs	r3, r3, #3
 8001190:	b29b      	uxth	r3, r3
 8001192:	461a      	mov	r2, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3208      	adds	r2, #8
 8001198:	68b9      	ldr	r1, [r7, #8]
 800119a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800119e:	bf00      	nop
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b089      	sub	sp, #36	; 0x24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61bb      	str	r3, [r7, #24]
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
 80011c0:	2302      	movs	r3, #2
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	2302      	movs	r3, #2
 80011ca:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80011cc:	4b47      	ldr	r3, [pc, #284]	; (80012ec <RCC_GetClocksFreq+0x140>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f003 030c 	and.w	r3, r3, #12
 80011d4:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	2b04      	cmp	r3, #4
 80011da:	d007      	beq.n	80011ec <RCC_GetClocksFreq+0x40>
 80011dc:	2b08      	cmp	r3, #8
 80011de:	d009      	beq.n	80011f4 <RCC_GetClocksFreq+0x48>
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d13d      	bne.n	8001260 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a42      	ldr	r2, [pc, #264]	; (80012f0 <RCC_GetClocksFreq+0x144>)
 80011e8:	601a      	str	r2, [r3, #0]
      break;
 80011ea:	e03d      	b.n	8001268 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a41      	ldr	r2, [pc, #260]	; (80012f4 <RCC_GetClocksFreq+0x148>)
 80011f0:	601a      	str	r2, [r3, #0]
      break;
 80011f2:	e039      	b.n	8001268 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80011f4:	4b3d      	ldr	r3, [pc, #244]	; (80012ec <RCC_GetClocksFreq+0x140>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	0d9b      	lsrs	r3, r3, #22
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001200:	4b3a      	ldr	r3, [pc, #232]	; (80012ec <RCC_GetClocksFreq+0x140>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001208:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00c      	beq.n	800122a <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001210:	4a38      	ldr	r2, [pc, #224]	; (80012f4 <RCC_GetClocksFreq+0x148>)
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	fbb2 f3f3 	udiv	r3, r2, r3
 8001218:	4a34      	ldr	r2, [pc, #208]	; (80012ec <RCC_GetClocksFreq+0x140>)
 800121a:	6852      	ldr	r2, [r2, #4]
 800121c:	0992      	lsrs	r2, r2, #6
 800121e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001222:	fb02 f303 	mul.w	r3, r2, r3
 8001226:	61fb      	str	r3, [r7, #28]
 8001228:	e00b      	b.n	8001242 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800122a:	4a31      	ldr	r2, [pc, #196]	; (80012f0 <RCC_GetClocksFreq+0x144>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001232:	4a2e      	ldr	r2, [pc, #184]	; (80012ec <RCC_GetClocksFreq+0x140>)
 8001234:	6852      	ldr	r2, [r2, #4]
 8001236:	0992      	lsrs	r2, r2, #6
 8001238:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800123c:	fb02 f303 	mul.w	r3, r2, r3
 8001240:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001242:	4b2a      	ldr	r3, [pc, #168]	; (80012ec <RCC_GetClocksFreq+0x140>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	0c1b      	lsrs	r3, r3, #16
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	3301      	adds	r3, #1
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8001252:	69fa      	ldr	r2, [r7, #28]
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	fbb2 f2f3 	udiv	r2, r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	601a      	str	r2, [r3, #0]
      break;
 800125e:	e003      	b.n	8001268 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a23      	ldr	r2, [pc, #140]	; (80012f0 <RCC_GetClocksFreq+0x144>)
 8001264:	601a      	str	r2, [r3, #0]
      break;
 8001266:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8001268:	4b20      	ldr	r3, [pc, #128]	; (80012ec <RCC_GetClocksFreq+0x140>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001270:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	091b      	lsrs	r3, r3, #4
 8001276:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001278:	4a1f      	ldr	r2, [pc, #124]	; (80012f8 <RCC_GetClocksFreq+0x14c>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	4413      	add	r3, r2
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	40da      	lsrs	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8001290:	4b16      	ldr	r3, [pc, #88]	; (80012ec <RCC_GetClocksFreq+0x140>)
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001298:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800129a:	69bb      	ldr	r3, [r7, #24]
 800129c:	0a9b      	lsrs	r3, r3, #10
 800129e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80012a0:	4a15      	ldr	r2, [pc, #84]	; (80012f8 <RCC_GetClocksFreq+0x14c>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	4413      	add	r3, r2
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	40da      	lsrs	r2, r3
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <RCC_GetClocksFreq+0x140>)
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80012c0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80012c2:	69bb      	ldr	r3, [r7, #24]
 80012c4:	0b5b      	lsrs	r3, r3, #13
 80012c6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80012c8:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <RCC_GetClocksFreq+0x14c>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	4413      	add	r3, r2
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	40da      	lsrs	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	60da      	str	r2, [r3, #12]
}
 80012e0:	bf00      	nop
 80012e2:	3724      	adds	r7, #36	; 0x24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	40023800 	.word	0x40023800
 80012f0:	00f42400 	.word	0x00f42400
 80012f4:	017d7840 	.word	0x017d7840
 80012f8:	20000000 	.word	0x20000000

080012fc <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001308:	78fb      	ldrb	r3, [r7, #3]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d006      	beq.n	800131c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800130e:	490a      	ldr	r1, [pc, #40]	; (8001338 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4313      	orrs	r3, r2
 8001318:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800131a:	e006      	b.n	800132a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800131c:	4906      	ldr	r1, [pc, #24]	; (8001338 <RCC_AHB1PeriphClockCmd+0x3c>)
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <RCC_AHB1PeriphClockCmd+0x3c>)
 8001320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	43db      	mvns	r3, r3
 8001326:	4013      	ands	r3, r2
 8001328:	630b      	str	r3, [r1, #48]	; 0x30
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800

0800133c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001348:	78fb      	ldrb	r3, [r7, #3]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d006      	beq.n	800135c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800134e:	490a      	ldr	r1, [pc, #40]	; (8001378 <RCC_APB1PeriphClockCmd+0x3c>)
 8001350:	4b09      	ldr	r3, [pc, #36]	; (8001378 <RCC_APB1PeriphClockCmd+0x3c>)
 8001352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4313      	orrs	r3, r2
 8001358:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800135a:	e006      	b.n	800136a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800135c:	4906      	ldr	r1, [pc, #24]	; (8001378 <RCC_APB1PeriphClockCmd+0x3c>)
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <RCC_APB1PeriphClockCmd+0x3c>)
 8001360:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	43db      	mvns	r3, r3
 8001366:	4013      	ands	r3, r2
 8001368:	640b      	str	r3, [r1, #64]	; 0x40
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800

0800137c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001388:	78fb      	ldrb	r3, [r7, #3]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d006      	beq.n	800139c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800138e:	490a      	ldr	r1, [pc, #40]	; (80013b8 <RCC_APB2PeriphClockCmd+0x3c>)
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <RCC_APB2PeriphClockCmd+0x3c>)
 8001392:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4313      	orrs	r3, r2
 8001398:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800139a:	e006      	b.n	80013aa <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 800139c:	4906      	ldr	r1, [pc, #24]	; (80013b8 <RCC_APB2PeriphClockCmd+0x3c>)
 800139e:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <RCC_APB2PeriphClockCmd+0x3c>)
 80013a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	4013      	ands	r3, r2
 80013a8:	644b      	str	r3, [r1, #68]	; 0x44
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800

080013bc <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a29      	ldr	r2, [pc, #164]	; (8001478 <TIM_TimeBaseInit+0xbc>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d013      	beq.n	8001400 <TIM_TimeBaseInit+0x44>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a28      	ldr	r2, [pc, #160]	; (800147c <TIM_TimeBaseInit+0xc0>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d00f      	beq.n	8001400 <TIM_TimeBaseInit+0x44>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013e6:	d00b      	beq.n	8001400 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a25      	ldr	r2, [pc, #148]	; (8001480 <TIM_TimeBaseInit+0xc4>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d007      	beq.n	8001400 <TIM_TimeBaseInit+0x44>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a24      	ldr	r2, [pc, #144]	; (8001484 <TIM_TimeBaseInit+0xc8>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d003      	beq.n	8001400 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a23      	ldr	r2, [pc, #140]	; (8001488 <TIM_TimeBaseInit+0xcc>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d108      	bne.n	8001412 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8001400:	89fb      	ldrh	r3, [r7, #14]
 8001402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001406:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	885a      	ldrh	r2, [r3, #2]
 800140c:	89fb      	ldrh	r3, [r7, #14]
 800140e:	4313      	orrs	r3, r2
 8001410:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a1d      	ldr	r2, [pc, #116]	; (800148c <TIM_TimeBaseInit+0xd0>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d00c      	beq.n	8001434 <TIM_TimeBaseInit+0x78>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a1c      	ldr	r2, [pc, #112]	; (8001490 <TIM_TimeBaseInit+0xd4>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d008      	beq.n	8001434 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8001422:	89fb      	ldrh	r3, [r7, #14]
 8001424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001428:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	891a      	ldrh	r2, [r3, #8]
 800142e:	89fb      	ldrh	r3, [r7, #14]
 8001430:	4313      	orrs	r3, r2
 8001432:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	89fa      	ldrh	r2, [r7, #14]
 8001438:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	881a      	ldrh	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <TIM_TimeBaseInit+0xbc>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d003      	beq.n	800145a <TIM_TimeBaseInit+0x9e>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a09      	ldr	r2, [pc, #36]	; (800147c <TIM_TimeBaseInit+0xc0>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d104      	bne.n	8001464 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	7a9b      	ldrb	r3, [r3, #10]
 800145e:	b29a      	uxth	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2201      	movs	r2, #1
 8001468:	829a      	strh	r2, [r3, #20]
}
 800146a:	bf00      	nop
 800146c:	3714      	adds	r7, #20
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40010000 	.word	0x40010000
 800147c:	40010400 	.word	0x40010400
 8001480:	40000400 	.word	0x40000400
 8001484:	40000800 	.word	0x40000800
 8001488:	40000c00 	.word	0x40000c00
 800148c:	40001000 	.word	0x40001000
 8001490:	40001400 	.word	0x40001400

08001494 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80014a0:	78fb      	ldrb	r3, [r7, #3]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d008      	beq.n	80014b8 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	881b      	ldrh	r3, [r3, #0]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 80014b6:	e007      	b.n	80014c8 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	881b      	ldrh	r3, [r3, #0]
 80014bc:	b29b      	uxth	r3, r3
 80014be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	801a      	strh	r2, [r3, #0]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80014e0:	78fb      	ldrb	r3, [r7, #3]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d008      	beq.n	80014f8 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	881b      	ldrh	r3, [r3, #0]
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80014f6:	e007      	b.n	8001508 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	b29b      	uxth	r3, r3
 80014fe:	f023 0301 	bic.w	r3, r3, #1
 8001502:	b29a      	uxth	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	801a      	strh	r2, [r3, #0]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800151e:	2300      	movs	r3, #0
 8001520:	817b      	strh	r3, [r7, #10]
 8001522:	2300      	movs	r3, #0
 8001524:	81fb      	strh	r3, [r7, #14]
 8001526:	2300      	movs	r3, #0
 8001528:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	8c1b      	ldrh	r3, [r3, #32]
 800152e:	b29b      	uxth	r3, r3
 8001530:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001534:	b29a      	uxth	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	8c1b      	ldrh	r3, [r3, #32]
 800153e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	889b      	ldrh	r3, [r3, #4]
 8001544:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	8b9b      	ldrh	r3, [r3, #28]
 800154a:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 800154c:	897b      	ldrh	r3, [r7, #10]
 800154e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001552:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8001554:	897b      	ldrh	r3, [r7, #10]
 8001556:	f023 0303 	bic.w	r3, r3, #3
 800155a:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	881a      	ldrh	r2, [r3, #0]
 8001560:	897b      	ldrh	r3, [r7, #10]
 8001562:	4313      	orrs	r3, r2
 8001564:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8001566:	89fb      	ldrh	r3, [r7, #14]
 8001568:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800156c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	899b      	ldrh	r3, [r3, #12]
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	b29a      	uxth	r2, r3
 8001576:	89fb      	ldrh	r3, [r7, #14]
 8001578:	4313      	orrs	r3, r2
 800157a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	885b      	ldrh	r3, [r3, #2]
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	b29a      	uxth	r2, r3
 8001584:	89fb      	ldrh	r3, [r7, #14]
 8001586:	4313      	orrs	r3, r2
 8001588:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a22      	ldr	r2, [pc, #136]	; (8001618 <TIM_OC3Init+0x104>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d003      	beq.n	800159a <TIM_OC3Init+0x86>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a21      	ldr	r2, [pc, #132]	; (800161c <TIM_OC3Init+0x108>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d12b      	bne.n	80015f2 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 800159a:	89fb      	ldrh	r3, [r7, #14]
 800159c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015a0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	89db      	ldrh	r3, [r3, #14]
 80015a6:	021b      	lsls	r3, r3, #8
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	89fb      	ldrh	r3, [r7, #14]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 80015b0:	89fb      	ldrh	r3, [r7, #14]
 80015b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015b6:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	889b      	ldrh	r3, [r3, #4]
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	b29a      	uxth	r2, r3
 80015c0:	89fb      	ldrh	r3, [r7, #14]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 80015c6:	89bb      	ldrh	r3, [r7, #12]
 80015c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80015cc:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80015ce:	89bb      	ldrh	r3, [r7, #12]
 80015d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80015d4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	8a1b      	ldrh	r3, [r3, #16]
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	b29a      	uxth	r2, r3
 80015de:	89bb      	ldrh	r3, [r7, #12]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	8a5b      	ldrh	r3, [r3, #18]
 80015e8:	011b      	lsls	r3, r3, #4
 80015ea:	b29a      	uxth	r2, r3
 80015ec:	89bb      	ldrh	r3, [r7, #12]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	89ba      	ldrh	r2, [r7, #12]
 80015f6:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	897a      	ldrh	r2, [r7, #10]
 80015fc:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	689a      	ldr	r2, [r3, #8]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	89fa      	ldrh	r2, [r7, #14]
 800160a:	841a      	strh	r2, [r3, #32]
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	40010000 	.word	0x40010000
 800161c:	40010400 	.word	0x40010400

08001620 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	81bb      	strh	r3, [r7, #12]
 800162e:	2300      	movs	r3, #0
 8001630:	817b      	strh	r3, [r7, #10]
 8001632:	2300      	movs	r3, #0
 8001634:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	8c1b      	ldrh	r3, [r3, #32]
 800163a:	b29b      	uxth	r3, r3
 800163c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001640:	b29a      	uxth	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	8c1b      	ldrh	r3, [r3, #32]
 800164a:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	889b      	ldrh	r3, [r3, #4]
 8001650:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	8b9b      	ldrh	r3, [r3, #28]
 8001656:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8001658:	89bb      	ldrh	r3, [r7, #12]
 800165a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800165e:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8001660:	89bb      	ldrh	r3, [r7, #12]
 8001662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001666:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	021b      	lsls	r3, r3, #8
 800166e:	b29a      	uxth	r2, r3
 8001670:	89bb      	ldrh	r3, [r7, #12]
 8001672:	4313      	orrs	r3, r2
 8001674:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8001676:	897b      	ldrh	r3, [r7, #10]
 8001678:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800167c:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	899b      	ldrh	r3, [r3, #12]
 8001682:	031b      	lsls	r3, r3, #12
 8001684:	b29a      	uxth	r2, r3
 8001686:	897b      	ldrh	r3, [r7, #10]
 8001688:	4313      	orrs	r3, r2
 800168a:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	885b      	ldrh	r3, [r3, #2]
 8001690:	031b      	lsls	r3, r3, #12
 8001692:	b29a      	uxth	r2, r3
 8001694:	897b      	ldrh	r3, [r7, #10]
 8001696:	4313      	orrs	r3, r2
 8001698:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a12      	ldr	r2, [pc, #72]	; (80016e8 <TIM_OC4Init+0xc8>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d003      	beq.n	80016aa <TIM_OC4Init+0x8a>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a11      	ldr	r2, [pc, #68]	; (80016ec <TIM_OC4Init+0xcc>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d10a      	bne.n	80016c0 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 80016aa:	89fb      	ldrh	r3, [r7, #14]
 80016ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016b0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	8a1b      	ldrh	r3, [r3, #16]
 80016b6:	019b      	lsls	r3, r3, #6
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	89fb      	ldrh	r3, [r7, #14]
 80016bc:	4313      	orrs	r3, r2
 80016be:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	89fa      	ldrh	r2, [r7, #14]
 80016c4:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	89ba      	ldrh	r2, [r7, #12]
 80016ca:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	897a      	ldrh	r2, [r7, #10]
 80016d8:	841a      	strh	r2, [r3, #32]
}
 80016da:	bf00      	nop
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	40010000 	.word	0x40010000
 80016ec:	40010400 	.word	0x40010400

080016f0 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	8b9b      	ldrh	r3, [r3, #28]
 8001704:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8001706:	89fb      	ldrh	r3, [r7, #14]
 8001708:	f023 0308 	bic.w	r3, r3, #8
 800170c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800170e:	89fa      	ldrh	r2, [r7, #14]
 8001710:	887b      	ldrh	r3, [r7, #2]
 8001712:	4313      	orrs	r3, r2
 8001714:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	89fa      	ldrh	r2, [r7, #14]
 800171a:	839a      	strh	r2, [r3, #28]
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001728:	b480      	push	{r7}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	8b9b      	ldrh	r3, [r3, #28]
 800173c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001744:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8001746:	887b      	ldrh	r3, [r7, #2]
 8001748:	021b      	lsls	r3, r3, #8
 800174a:	b29a      	uxth	r2, r3
 800174c:	89fb      	ldrh	r3, [r7, #14]
 800174e:	4313      	orrs	r3, r2
 8001750:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	89fa      	ldrh	r2, [r7, #14]
 8001756:	839a      	strh	r2, [r3, #28]
}
 8001758:	bf00      	nop
 800175a:	3714      	adds	r7, #20
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	460b      	mov	r3, r1
 800176e:	807b      	strh	r3, [r7, #2]
 8001770:	4613      	mov	r3, r2
 8001772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001774:	787b      	ldrb	r3, [r7, #1]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d008      	beq.n	800178c <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	899b      	ldrh	r3, [r3, #12]
 800177e:	b29a      	uxth	r2, r3
 8001780:	887b      	ldrh	r3, [r7, #2]
 8001782:	4313      	orrs	r3, r2
 8001784:	b29a      	uxth	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 800178a:	e009      	b.n	80017a0 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	899b      	ldrh	r3, [r3, #12]
 8001790:	b29a      	uxth	r2, r3
 8001792:	887b      	ldrh	r3, [r7, #2]
 8001794:	43db      	mvns	r3, r3
 8001796:	b29b      	uxth	r3, r3
 8001798:	4013      	ands	r3, r2
 800179a:	b29a      	uxth	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	819a      	strh	r2, [r3, #12]
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80017b8:	887b      	ldrh	r3, [r7, #2]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	b29a      	uxth	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	821a      	strh	r2, [r3, #16]
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 80017ce:	b480      	push	{r7}
 80017d0:	b083      	sub	sp, #12
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	460b      	mov	r3, r1
 80017d8:	807b      	strh	r3, [r7, #2]
 80017da:	4613      	mov	r3, r2
 80017dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80017de:	787b      	ldrb	r3, [r7, #1]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d008      	beq.n	80017f6 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	899b      	ldrh	r3, [r3, #12]
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	887b      	ldrh	r3, [r7, #2]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
 80017f4:	e009      	b.n	800180a <TIM_DMACmd+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	899b      	ldrh	r3, [r3, #12]
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	887b      	ldrh	r3, [r7, #2]
 80017fe:	43db      	mvns	r3, r3
 8001800:	b29b      	uxth	r3, r3
 8001802:	4013      	ands	r3, r2
 8001804:	b29a      	uxth	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	819a      	strh	r2, [r3, #12]
}
 800180a:	bf00      	nop
 800180c:	370c      	adds	r7, #12
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
	...

08001818 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	; 0x28
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001822:	2300      	movs	r3, #0
 8001824:	627b      	str	r3, [r7, #36]	; 0x24
 8001826:	2300      	movs	r3, #0
 8001828:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 800182e:	2300      	movs	r3, #0
 8001830:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	8a1b      	ldrh	r3, [r3, #16]
 8001836:	b29b      	uxth	r3, r3
 8001838:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001840:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	88db      	ldrh	r3, [r3, #6]
 8001846:	461a      	mov	r2, r3
 8001848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184a:	4313      	orrs	r3, r2
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	b29a      	uxth	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	899b      	ldrh	r3, [r3, #12]
 800185a:	b29b      	uxth	r3, r3
 800185c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001864:	f023 030c 	bic.w	r3, r3, #12
 8001868:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	889a      	ldrh	r2, [r3, #4]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	891b      	ldrh	r3, [r3, #8]
 8001872:	4313      	orrs	r3, r2
 8001874:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800187a:	4313      	orrs	r3, r2
 800187c:	b29b      	uxth	r3, r3
 800187e:	461a      	mov	r2, r3
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	4313      	orrs	r3, r2
 8001884:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	b29a      	uxth	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	8a9b      	ldrh	r3, [r3, #20]
 8001892:	b29b      	uxth	r3, r3
 8001894:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800189c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	899b      	ldrh	r3, [r3, #12]
 80018a2:	461a      	mov	r2, r3
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	4313      	orrs	r3, r2
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80018aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80018b2:	f107 0308 	add.w	r3, r7, #8
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7ff fc78 	bl	80011ac <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a30      	ldr	r2, [pc, #192]	; (8001980 <USART_Init+0x168>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d003      	beq.n	80018cc <USART_Init+0xb4>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a2f      	ldr	r2, [pc, #188]	; (8001984 <USART_Init+0x16c>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d102      	bne.n	80018d2 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	623b      	str	r3, [r7, #32]
 80018d0:	e001      	b.n	80018d6 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	899b      	ldrh	r3, [r3, #12]
 80018da:	b29b      	uxth	r3, r3
 80018dc:	b21b      	sxth	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	da0c      	bge.n	80018fc <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 80018e2:	6a3a      	ldr	r2, [r7, #32]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	009a      	lsls	r2, r3, #2
 80018ec:	441a      	add	r2, r3
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f8:	61fb      	str	r3, [r7, #28]
 80018fa:	e00b      	b.n	8001914 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80018fc:	6a3a      	ldr	r2, [r7, #32]
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	009a      	lsls	r2, r3, #2
 8001906:	441a      	add	r2, r3
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001912:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	4a1c      	ldr	r2, [pc, #112]	; (8001988 <USART_Init+0x170>)
 8001918:	fba2 2303 	umull	r2, r3, r2, r3
 800191c:	095b      	lsrs	r3, r3, #5
 800191e:	011b      	lsls	r3, r3, #4
 8001920:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	2264      	movs	r2, #100	; 0x64
 8001928:	fb02 f303 	mul.w	r3, r2, r3
 800192c:	69fa      	ldr	r2, [r7, #28]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	899b      	ldrh	r3, [r3, #12]
 8001936:	b29b      	uxth	r3, r3
 8001938:	b21b      	sxth	r3, r3
 800193a:	2b00      	cmp	r3, #0
 800193c:	da0c      	bge.n	8001958 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	3332      	adds	r3, #50	; 0x32
 8001944:	4a10      	ldr	r2, [pc, #64]	; (8001988 <USART_Init+0x170>)
 8001946:	fba2 2303 	umull	r2, r3, r2, r3
 800194a:	095b      	lsrs	r3, r3, #5
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001952:	4313      	orrs	r3, r2
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
 8001956:	e00b      	b.n	8001970 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	011b      	lsls	r3, r3, #4
 800195c:	3332      	adds	r3, #50	; 0x32
 800195e:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <USART_Init+0x170>)
 8001960:	fba2 2303 	umull	r2, r3, r2, r3
 8001964:	095b      	lsrs	r3, r3, #5
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196c:	4313      	orrs	r3, r2
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8001970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001972:	b29a      	uxth	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	811a      	strh	r2, [r3, #8]
}
 8001978:	bf00      	nop
 800197a:	3728      	adds	r7, #40	; 0x28
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40011000 	.word	0x40011000
 8001984:	40011400 	.word	0x40011400
 8001988:	51eb851f 	.word	0x51eb851f

0800198c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001998:	78fb      	ldrb	r3, [r7, #3]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d008      	beq.n	80019b0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	899b      	ldrh	r3, [r3, #12]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 80019ae:	e007      	b.n	80019c0 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	899b      	ldrh	r3, [r3, #12]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	819a      	strh	r2, [r3, #12]
}
 80019c0:	bf00      	nop
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 80019d8:	887b      	ldrh	r3, [r7, #2]
 80019da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019de:	b29a      	uxth	r2, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	809a      	strh	r2, [r3, #4]
}
 80019e4:	bf00      	nop
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b087      	sub	sp, #28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	807b      	strh	r3, [r7, #2]
 80019fc:	4613      	mov	r3, r2
 80019fe:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001a00:	2300      	movs	r3, #0
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	2300      	movs	r3, #0
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001a14:	887b      	ldrh	r3, [r7, #2]
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	095b      	lsrs	r3, r3, #5
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001a1e:	887b      	ldrh	r3, [r7, #2]
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001a26:	2201      	movs	r2, #1
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d103      	bne.n	8001a3e <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	330c      	adds	r3, #12
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	e009      	b.n	8001a52 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d103      	bne.n	8001a4c <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3310      	adds	r3, #16
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	e002      	b.n	8001a52 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	3314      	adds	r3, #20
 8001a50:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8001a52:	787b      	ldrb	r3, [r7, #1]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d006      	beq.n	8001a66 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	697a      	ldr	r2, [r7, #20]
 8001a5c:	6811      	ldr	r1, [r2, #0]
 8001a5e:	68ba      	ldr	r2, [r7, #8]
 8001a60:	430a      	orrs	r2, r1
 8001a62:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001a64:	e006      	b.n	8001a74 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	6811      	ldr	r1, [r2, #0]
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	43d2      	mvns	r2, r2
 8001a70:	400a      	ands	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]
}
 8001a74:	bf00      	nop
 8001a76:	371c      	adds	r7, #28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	887b      	ldrh	r3, [r7, #2]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d002      	beq.n	8001aa6 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	73fb      	strb	r3, [r7, #15]
 8001aa4:	e001      	b.n	8001aaa <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b087      	sub	sp, #28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	2300      	movs	r3, #0
 8001ace:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001ad4:	887b      	ldrh	r3, [r7, #2]
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	095b      	lsrs	r3, r3, #5
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001ade:	887b      	ldrh	r3, [r7, #2]
 8001ae0:	f003 031f 	and.w	r3, r3, #31
 8001ae4:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	fa02 f303 	lsl.w	r3, r2, r3
 8001aee:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d107      	bne.n	8001b06 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	899b      	ldrh	r3, [r3, #12]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	461a      	mov	r2, r3
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	4013      	ands	r3, r2
 8001b02:	617b      	str	r3, [r7, #20]
 8001b04:	e011      	b.n	8001b2a <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d107      	bne.n	8001b1c <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	8a1b      	ldrh	r3, [r3, #16]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	461a      	mov	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	4013      	ands	r3, r2
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	e006      	b.n	8001b2a <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	8a9b      	ldrh	r3, [r3, #20]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	461a      	mov	r2, r3
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	4013      	ands	r3, r2
 8001b28:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001b2a:	887b      	ldrh	r3, [r7, #2]
 8001b2c:	0a1b      	lsrs	r3, r3, #8
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001b32:	2201      	movs	r2, #1
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	461a      	mov	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	4013      	ands	r3, r2
 8001b48:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <USART_GetITStatus+0xa4>
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d002      	beq.n	8001b5c <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8001b56:	2301      	movs	r3, #1
 8001b58:	74fb      	strb	r3, [r7, #19]
 8001b5a:	e001      	b.n	8001b60 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001b60:	7cfb      	ldrb	r3, [r7, #19]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	371c      	adds	r7, #28
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b085      	sub	sp, #20
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	460b      	mov	r3, r1
 8001b78:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	81fb      	strh	r3, [r7, #14]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8001b82:	887b      	ldrh	r3, [r7, #2]
 8001b84:	0a1b      	lsrs	r3, r3, #8
 8001b86:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8001b88:	89fb      	ldrh	r3, [r7, #14]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8001b92:	89bb      	ldrh	r3, [r7, #12]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	801a      	strh	r2, [r3, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <DELAY_init>:
uint32_t D_mS; // Global variable (ms)
uint32_t D_S; // Global variable (s)


void DELAY_init(void)
{
 8001ba8:	b590      	push	{r4, r7, lr}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
	RCC_ClocksTypeDef Clocks;
	RCC_GetClocksFreq(&Clocks);
 8001bae:	463b      	mov	r3, r7
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fafb 	bl	80011ac <RCC_GetClocksFreq>
	G_CLK = Clocks.SYSCLK_Frequency;	// Read the systemclock
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	4a3f      	ldr	r2, [pc, #252]	; (8001cb8 <DELAY_init+0x110>)
 8001bba:	6013      	str	r3, [r2, #0]
	D_S  = (G_CLK*1.25)/9/2;	// Number of instructions in one second
 8001bbc:	4b3e      	ldr	r3, [pc, #248]	; (8001cb8 <DELAY_init+0x110>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fc43 	bl	800044c <__aeabi_ui2d>
 8001bc6:	f04f 0200 	mov.w	r2, #0
 8001bca:	4b3c      	ldr	r3, [pc, #240]	; (8001cbc <DELAY_init+0x114>)
 8001bcc:	f7fe fcb4 	bl	8000538 <__aeabi_dmul>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	460c      	mov	r4, r1
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	4621      	mov	r1, r4
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	4b38      	ldr	r3, [pc, #224]	; (8001cc0 <DELAY_init+0x118>)
 8001bde:	f7fe fdd5 	bl	800078c <__aeabi_ddiv>
 8001be2:	4603      	mov	r3, r0
 8001be4:	460c      	mov	r4, r1
 8001be6:	4618      	mov	r0, r3
 8001be8:	4621      	mov	r1, r4
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bf2:	f7fe fdcb 	bl	800078c <__aeabi_ddiv>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	460c      	mov	r4, r1
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	4621      	mov	r1, r4
 8001bfe:	f7fe fead 	bl	800095c <__aeabi_d2uiz>
 8001c02:	4602      	mov	r2, r0
 8001c04:	4b2f      	ldr	r3, [pc, #188]	; (8001cc4 <DELAY_init+0x11c>)
 8001c06:	601a      	str	r2, [r3, #0]
	D_mS = (G_CLK*1.25)/9000/2; // Number of instructions in one millisecond
 8001c08:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <DELAY_init+0x110>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7fe fc1d 	bl	800044c <__aeabi_ui2d>
 8001c12:	f04f 0200 	mov.w	r2, #0
 8001c16:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <DELAY_init+0x114>)
 8001c18:	f7fe fc8e 	bl	8000538 <__aeabi_dmul>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	460c      	mov	r4, r1
 8001c20:	4618      	mov	r0, r3
 8001c22:	4621      	mov	r1, r4
 8001c24:	a320      	add	r3, pc, #128	; (adr r3, 8001ca8 <DELAY_init+0x100>)
 8001c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2a:	f7fe fdaf 	bl	800078c <__aeabi_ddiv>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	460c      	mov	r4, r1
 8001c32:	4618      	mov	r0, r3
 8001c34:	4621      	mov	r1, r4
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c3e:	f7fe fda5 	bl	800078c <__aeabi_ddiv>
 8001c42:	4603      	mov	r3, r0
 8001c44:	460c      	mov	r4, r1
 8001c46:	4618      	mov	r0, r3
 8001c48:	4621      	mov	r1, r4
 8001c4a:	f7fe fe87 	bl	800095c <__aeabi_d2uiz>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <DELAY_init+0x120>)
 8001c52:	601a      	str	r2, [r3, #0]
	D_uS = (G_CLK*1.25)/9000000/2; // Number of instructions in one microsecond, largest rounding error
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <DELAY_init+0x110>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fbf7 	bl	800044c <__aeabi_ui2d>
 8001c5e:	f04f 0200 	mov.w	r2, #0
 8001c62:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <DELAY_init+0x114>)
 8001c64:	f7fe fc68 	bl	8000538 <__aeabi_dmul>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	460c      	mov	r4, r1
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	4621      	mov	r1, r4
 8001c70:	a30f      	add	r3, pc, #60	; (adr r3, 8001cb0 <DELAY_init+0x108>)
 8001c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c76:	f7fe fd89 	bl	800078c <__aeabi_ddiv>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	460c      	mov	r4, r1
 8001c7e:	4618      	mov	r0, r3
 8001c80:	4621      	mov	r1, r4
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c8a:	f7fe fd7f 	bl	800078c <__aeabi_ddiv>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	460c      	mov	r4, r1
 8001c92:	4618      	mov	r0, r3
 8001c94:	4621      	mov	r1, r4
 8001c96:	f7fe fe61 	bl	800095c <__aeabi_d2uiz>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <DELAY_init+0x124>)
 8001c9e:	601a      	str	r2, [r3, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd90      	pop	{r4, r7, pc}
 8001ca8:	00000000 	.word	0x00000000
 8001cac:	40c19400 	.word	0x40c19400
 8001cb0:	00000000 	.word	0x00000000
 8001cb4:	41612a88 	.word	0x41612a88
 8001cb8:	20012d2c 	.word	0x20012d2c
 8001cbc:	3ff40000 	.word	0x3ff40000
 8001cc0:	40220000 	.word	0x40220000
 8001cc4:	20012d30 	.word	0x20012d30
 8001cc8:	20012d38 	.word	0x20012d38
 8001ccc:	20012d34 	.word	0x20012d34

08001cd0 <DELAY_ms>:
        time--;
    }
}

void DELAY_ms(volatile unsigned int time)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
    volatile unsigned int i;

    while(time>0)		// Run x times 1 millisecond
 8001cd8:	e00d      	b.n	8001cf6 <DELAY_ms+0x26>
    {
        for(i=0;i<D_mS;i++);
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	e002      	b.n	8001ce6 <DELAY_ms+0x16>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <DELAY_ms+0x38>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d3f7      	bcc.n	8001ce0 <DELAY_ms+0x10>
        time--;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	607b      	str	r3, [r7, #4]
    while(time>0)		// Run x times 1 millisecond
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1ee      	bne.n	8001cda <DELAY_ms+0xa>
    }
}
 8001cfc:	bf00      	nop
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	20012d38 	.word	0x20012d38

08001d0c <UB_VGA_Screen_Init>:

//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
  uint16_t xp,yp;

  VGA.hsync_cnt=0;
 8001d12:	4b1b      	ldr	r3, [pc, #108]	; (8001d80 <UB_VGA_Screen_Init+0x74>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	801a      	strh	r2, [r3, #0]
  VGA.start_adr=0;
 8001d18:	4b19      	ldr	r3, [pc, #100]	; (8001d80 <UB_VGA_Screen_Init+0x74>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg=0;
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <UB_VGA_Screen_Init+0x74>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]

  // RAM init total black
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8001d24:	2300      	movs	r3, #0
 8001d26:	80bb      	strh	r3, [r7, #4]
 8001d28:	e017      	b.n	8001d5a <UB_VGA_Screen_Init+0x4e>
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	80fb      	strh	r3, [r7, #6]
 8001d2e:	e00d      	b.n	8001d4c <UB_VGA_Screen_Init+0x40>
      VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=0;
 8001d30:	88ba      	ldrh	r2, [r7, #4]
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	019b      	lsls	r3, r3, #6
 8001d3a:	441a      	add	r2, r3
 8001d3c:	88fb      	ldrh	r3, [r7, #6]
 8001d3e:	4413      	add	r3, r2
 8001d40:	4a10      	ldr	r2, [pc, #64]	; (8001d84 <UB_VGA_Screen_Init+0x78>)
 8001d42:	2100      	movs	r1, #0
 8001d44:	54d1      	strb	r1, [r2, r3]
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 8001d46:	88fb      	ldrh	r3, [r7, #6]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	80fb      	strh	r3, [r7, #6]
 8001d4c:	88fb      	ldrh	r3, [r7, #6]
 8001d4e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001d52:	d9ed      	bls.n	8001d30 <UB_VGA_Screen_Init+0x24>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8001d54:	88bb      	ldrh	r3, [r7, #4]
 8001d56:	3301      	adds	r3, #1
 8001d58:	80bb      	strh	r3, [r7, #4]
 8001d5a:	88bb      	ldrh	r3, [r7, #4]
 8001d5c:	2bef      	cmp	r3, #239	; 0xef
 8001d5e:	d9e4      	bls.n	8001d2a <UB_VGA_Screen_Init+0x1e>
    }
  }

  // init IO-Pins
  P_VGA_InitIO();
 8001d60:	f000 f85e 	bl	8001e20 <P_VGA_InitIO>
  // init Timer
  P_VGA_InitTIM();
 8001d64:	f000 f8b0 	bl	8001ec8 <P_VGA_InitTIM>
  // init DMA
  P_VGA_InitDMA();
 8001d68:	f000 f940 	bl	8001fec <P_VGA_InitDMA>
  // init Interrupts
  P_VGA_InitINT();
 8001d6c:	f000 f912 	bl	8001f94 <P_VGA_InitINT>

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg=DMA2_Stream5->CR;
 8001d70:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <UB_VGA_Screen_Init+0x7c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a02      	ldr	r2, [pc, #8]	; (8001d80 <UB_VGA_Screen_Init+0x74>)
 8001d76:	6093      	str	r3, [r2, #8]
}
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000030 	.word	0x20000030
 8001d84:	2000003c 	.word	0x2000003c
 8001d88:	40026488 	.word	0x40026488

08001d8c <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8001d96:	2300      	movs	r3, #0
 8001d98:	81bb      	strh	r3, [r7, #12]
 8001d9a:	e012      	b.n	8001dc2 <UB_VGA_FillScreen+0x36>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	81fb      	strh	r3, [r7, #14]
 8001da0:	e008      	b.n	8001db4 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp,yp,color);
 8001da2:	79fa      	ldrb	r2, [r7, #7]
 8001da4:	89b9      	ldrh	r1, [r7, #12]
 8001da6:	89fb      	ldrh	r3, [r7, #14]
 8001da8:	4618      	mov	r0, r3
 8001daa:	f000 f811 	bl	8001dd0 <UB_VGA_SetPixel>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 8001dae:	89fb      	ldrh	r3, [r7, #14]
 8001db0:	3301      	adds	r3, #1
 8001db2:	81fb      	strh	r3, [r7, #14]
 8001db4:	89fb      	ldrh	r3, [r7, #14]
 8001db6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001dba:	d3f2      	bcc.n	8001da2 <UB_VGA_FillScreen+0x16>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8001dbc:	89bb      	ldrh	r3, [r7, #12]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	81bb      	strh	r3, [r7, #12]
 8001dc2:	89bb      	ldrh	r3, [r7, #12]
 8001dc4:	2bef      	cmp	r3, #239	; 0xef
 8001dc6:	d9e9      	bls.n	8001d9c <UB_VGA_FillScreen+0x10>
    }
  }
}
 8001dc8:	bf00      	nop
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	80fb      	strh	r3, [r7, #6]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	80bb      	strh	r3, [r7, #4]
 8001dde:	4613      	mov	r3, r2
 8001de0:	70fb      	strb	r3, [r7, #3]
  if(xp>=VGA_DISPLAY_X) xp=0;
 8001de2:	88fb      	ldrh	r3, [r7, #6]
 8001de4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001de8:	d301      	bcc.n	8001dee <UB_VGA_SetPixel+0x1e>
 8001dea:	2300      	movs	r3, #0
 8001dec:	80fb      	strh	r3, [r7, #6]
  if(yp>=VGA_DISPLAY_Y) yp=0;
 8001dee:	88bb      	ldrh	r3, [r7, #4]
 8001df0:	2bef      	cmp	r3, #239	; 0xef
 8001df2:	d901      	bls.n	8001df8 <UB_VGA_SetPixel+0x28>
 8001df4:	2300      	movs	r3, #0
 8001df6:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=color;
 8001df8:	88ba      	ldrh	r2, [r7, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	019b      	lsls	r3, r3, #6
 8001e02:	441a      	add	r2, r3
 8001e04:	88fb      	ldrh	r3, [r7, #6]
 8001e06:	4413      	add	r3, r2
 8001e08:	4904      	ldr	r1, [pc, #16]	; (8001e1c <UB_VGA_SetPixel+0x4c>)
 8001e0a:	78fa      	ldrb	r2, [r7, #3]
 8001e0c:	54ca      	strb	r2, [r1, r3]
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	2000003c 	.word	0x2000003c

08001e20 <P_VGA_InitIO>:
//--------------------------------------------------------------
// interne Funktionen
// init aller IO-Pins
//--------------------------------------------------------------
void P_VGA_InitIO(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
  // init RGB-Pins (PE8 - PE15)
  // as normal GPIOs
  //---------------------------------------------
 
  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8001e26:	2101      	movs	r1, #1
 8001e28:	2010      	movs	r0, #16
 8001e2a:	f7ff fa67 	bl	80012fc <RCC_AHB1PeriphClockCmd>

  // Config as Digital output
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 |
 8001e2e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001e32:	603b      	str	r3, [r7, #0]
        GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001e34:	2301      	movs	r3, #1
 8001e36:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001e40:	2303      	movs	r3, #3
 8001e42:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001e44:	463b      	mov	r3, r7
 8001e46:	4619      	mov	r1, r3
 8001e48:	481d      	ldr	r0, [pc, #116]	; (8001ec0 <P_VGA_InitIO+0xa0>)
 8001e4a:	f7ff f8d7 	bl	8000ffc <GPIO_Init>

  GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 8001e4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ec0 <P_VGA_InitIO+0xa0>)
 8001e50:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8001e54:	835a      	strh	r2, [r3, #26]
  // init of the H-Sync Pin (PB11)
  // using Timer2 and CH4
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001e56:	2101      	movs	r1, #1
 8001e58:	2002      	movs	r0, #2
 8001e5a:	f7ff fa4f 	bl	80012fc <RCC_AHB1PeriphClockCmd>

  // Config Pins as Digital-out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 8001e5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e62:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001e64:	2302      	movs	r3, #2
 8001e66:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8001e70:	2301      	movs	r3, #1
 8001e72:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001e74:	463b      	mov	r3, r7
 8001e76:	4619      	mov	r1, r3
 8001e78:	4812      	ldr	r0, [pc, #72]	; (8001ec4 <P_VGA_InitIO+0xa4>)
 8001e7a:	f7ff f8bf 	bl	8000ffc <GPIO_Init>

  // alternative function connect with IO
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_TIM2);
 8001e7e:	2201      	movs	r2, #1
 8001e80:	210b      	movs	r1, #11
 8001e82:	4810      	ldr	r0, [pc, #64]	; (8001ec4 <P_VGA_InitIO+0xa4>)
 8001e84:	f7ff f948 	bl	8001118 <GPIO_PinAFConfig>
  // init of V-Sync Pin (PB12)
  // using GPIO
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8001e88:	2101      	movs	r1, #1
 8001e8a:	2002      	movs	r0, #2
 8001e8c:	f7ff fa36 	bl	80012fc <RCC_AHB1PeriphClockCmd>

  // Config of the Pins as Digital out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8001e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e94:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001e96:	2301      	movs	r3, #1
 8001e98:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001ea6:	463b      	mov	r3, r7
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4806      	ldr	r0, [pc, #24]	; (8001ec4 <P_VGA_InitIO+0xa4>)
 8001eac:	f7ff f8a6 	bl	8000ffc <GPIO_Init>

  GPIOB->BSRRL = GPIO_Pin_12;
 8001eb0:	4b04      	ldr	r3, [pc, #16]	; (8001ec4 <P_VGA_InitIO+0xa4>)
 8001eb2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001eb6:	831a      	strh	r2, [r3, #24]
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40020400 	.word	0x40020400

08001ec8 <P_VGA_InitTIM>:
//--------------------------------------------------------------
// internal Function
// init Timer
//--------------------------------------------------------------
void P_VGA_InitTIM(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af00      	add	r7, sp, #0
  // init of Timer1 for
  // Pixeldata via DMA
  //---------------------------------------------

  // Clock enable
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8001ece:	2101      	movs	r1, #1
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	f7ff fa53 	bl	800137c <RCC_APB2PeriphClockCmd>

  // Timer1 init
  TIM_TimeBaseStructure.TIM_Period =  VGA_TIM1_PERIODE;
 8001ed6:	230b      	movs	r3, #11
 8001ed8:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM1_PRESCALE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 8001ee6:	f107 0314 	add.w	r3, r7, #20
 8001eea:	4619      	mov	r1, r3
 8001eec:	4828      	ldr	r0, [pc, #160]	; (8001f90 <P_VGA_InitTIM+0xc8>)
 8001eee:	f7ff fa65 	bl	80013bc <TIM_TimeBaseInit>
  // CH4 for HSYNC-Signal
  // CH3 for DMA Trigger start
  //---------------------------------------------

  // Clock enable
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	f7ff fa21 	bl	800133c <RCC_APB1PeriphClockCmd>

  // Timer2 init
  TIM_TimeBaseStructure.TIM_Period = VGA_TIM2_HSYNC_PERIODE;
 8001efa:	f640 236b 	movw	r3, #2667	; 0xa6b
 8001efe:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8001f04:	2300      	movs	r3, #0
 8001f06:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	4619      	mov	r1, r3
 8001f12:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f16:	f7ff fa51 	bl	80013bc <TIM_TimeBaseInit>

  // Timer2 Channel 3 ( for DMA Trigger start)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8001f1a:	2360      	movs	r3, #96	; 0x60
 8001f1c:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HTRIGGER_START-VGA_TIM2_DMA_DELAY;
 8001f22:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8001f26:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8001f28:	2302      	movs	r3, #2
 8001f2a:	81bb      	strh	r3, [r7, #12]
  TIM_OC3Init(TIM2, &TIM_OCInitStructure);
 8001f2c:	463b      	mov	r3, r7
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f34:	f7ff faee 	bl	8001514 <TIM_OC3Init>
  TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8001f38:	2108      	movs	r1, #8
 8001f3a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f3e:	f7ff fbd7 	bl	80016f0 <TIM_OC3PreloadConfig>

  // Timer2 Channel 4 (for HSYNC)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8001f42:	2360      	movs	r3, #96	; 0x60
 8001f44:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8001f46:	2301      	movs	r3, #1
 8001f48:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HSYNC_IMP;
 8001f4a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001f4e:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8001f50:	2302      	movs	r3, #2
 8001f52:	81bb      	strh	r3, [r7, #12]
  TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 8001f54:	463b      	mov	r3, r7
 8001f56:	4619      	mov	r1, r3
 8001f58:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f5c:	f7ff fb60 	bl	8001620 <TIM_OC4Init>
  TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8001f60:	2108      	movs	r1, #8
 8001f62:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f66:	f7ff fbdf 	bl	8001728 <TIM_OC4PreloadConfig>
  //---------------------------------------------
  // enable all Timers
  //---------------------------------------------

  // Timer1 enable
  TIM_ARRPreloadConfig(TIM1, ENABLE);
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	4808      	ldr	r0, [pc, #32]	; (8001f90 <P_VGA_InitTIM+0xc8>)
 8001f6e:	f7ff fa91 	bl	8001494 <TIM_ARRPreloadConfig>

  // Timer2 enable
  TIM_ARRPreloadConfig(TIM2, ENABLE);
 8001f72:	2101      	movs	r1, #1
 8001f74:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f78:	f7ff fa8c 	bl	8001494 <TIM_ARRPreloadConfig>
  TIM_Cmd(TIM2, ENABLE);
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001f82:	f7ff faa7 	bl	80014d4 <TIM_Cmd>

}
 8001f86:	bf00      	nop
 8001f88:	3720      	adds	r7, #32
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40010000 	.word	0x40010000

08001f94 <P_VGA_InitINT>:
//--------------------------------------------------------------
// internal Function
// init Interrupts
//--------------------------------------------------------------
void P_VGA_InitINT(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
  // init from DMA Interrupt
  // for TransferComplete Interrupt
  // DMA2, Stream5, Channel6
  //---------------------------------------------

  DMA_ITConfig(DMA2_Stream5, DMA_IT_TC, ENABLE);
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	2110      	movs	r1, #16
 8001f9e:	4812      	ldr	r0, [pc, #72]	; (8001fe8 <P_VGA_InitINT+0x54>)
 8001fa0:	f7fe ff6c 	bl	8000e7c <DMA_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream5_IRQn;
 8001fa4:	2344      	movs	r3, #68	; 0x44
 8001fa6:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8001fb4:	1d3b      	adds	r3, r7, #4
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7fe fdb6 	bl	8000b28 <NVIC_Init>
  // init of Timer2 Interrupt
  // for HSync-Counter using Update
  // for DMA Trigger START using CH3
  //---------------------------------------------

  TIM_ITConfig(TIM2,TIM_IT_CC3,ENABLE);
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	2108      	movs	r1, #8
 8001fc0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001fc4:	f7ff fbce 	bl	8001764 <TIM_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8001fc8:	231c      	movs	r3, #28
 8001fca:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8001fd8:	1d3b      	adds	r3, r7, #4
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fda4 	bl	8000b28 <NVIC_Init>
}
 8001fe0:	bf00      	nop
 8001fe2:	3708      	adds	r7, #8
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40026488 	.word	0x40026488

08001fec <P_VGA_InitDMA>:
//--------------------------------------------------------------
// internal Function
// init DMA
//--------------------------------------------------------------
void P_VGA_InitDMA(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b090      	sub	sp, #64	; 0x40
 8001ff0:	af00      	add	r7, sp, #0
  // (look at page 217 of the Ref Manual)
  // DMA=2, Channel=6, Stream=5
  //---------------------------------------------

  // Clock Enable (DMA)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001ff8:	f7ff f980 	bl	80012fc <RCC_AHB1PeriphClockCmd>

  // DMA init (DMA2, Channel6, Stream5)
  DMA_Cmd(DMA2_Stream5, DISABLE);
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	481b      	ldr	r0, [pc, #108]	; (800206c <P_VGA_InitDMA+0x80>)
 8002000:	f7fe ff20 	bl	8000e44 <DMA_Cmd>
  DMA_DeInit(DMA2_Stream5);
 8002004:	4819      	ldr	r0, [pc, #100]	; (800206c <P_VGA_InitDMA+0x80>)
 8002006:	f7fe fdf1 	bl	8000bec <DMA_DeInit>
  DMA_InitStructure.DMA_Channel = DMA_Channel_6;
 800200a:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800200e:	607b      	str	r3, [r7, #4]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)VGA_GPIOE_ODR_ADDRESS;
 8002010:	4b17      	ldr	r3, [pc, #92]	; (8002070 <P_VGA_InitDMA+0x84>)
 8002012:	60bb      	str	r3, [r7, #8]
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&VGA_RAM1;
 8002014:	4b17      	ldr	r3, [pc, #92]	; (8002074 <P_VGA_InitDMA+0x88>)
 8002016:	60fb      	str	r3, [r7, #12]
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8002018:	2340      	movs	r3, #64	; 0x40
 800201a:	613b      	str	r3, [r7, #16]
  DMA_InitStructure.DMA_BufferSize = VGA_DISPLAY_X+1;
 800201c:	f240 1341 	movw	r3, #321	; 0x141
 8002020:	617b      	str	r3, [r7, #20]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8002022:	2300      	movs	r3, #0
 8002024:	61bb      	str	r3, [r7, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8002026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800202a:	61fb      	str	r3, [r7, #28]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800202c:	2300      	movs	r3, #0
 800202e:	623b      	str	r3, [r7, #32]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8002030:	2300      	movs	r3, #0
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8002034:	2300      	movs	r3, #0
 8002036:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8002038:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800203c:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 800203e:	2300      	movs	r3, #0
 8002040:	633b      	str	r3, [r7, #48]	; 0x30
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 8002042:	2301      	movs	r3, #1
 8002044:	637b      	str	r3, [r7, #52]	; 0x34
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8002046:	2300      	movs	r3, #0
 8002048:	63bb      	str	r3, [r7, #56]	; 0x38
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800204a:	2300      	movs	r3, #0
 800204c:	63fb      	str	r3, [r7, #60]	; 0x3c
  DMA_Init(DMA2_Stream5, &DMA_InitStructure);
 800204e:	1d3b      	adds	r3, r7, #4
 8002050:	4619      	mov	r1, r3
 8002052:	4806      	ldr	r0, [pc, #24]	; (800206c <P_VGA_InitDMA+0x80>)
 8002054:	f7fe fe9e 	bl	8000d94 <DMA_Init>

  // DMA-Timer1 enable
  TIM_DMACmd(TIM1,TIM_DMA_Update,ENABLE);
 8002058:	2201      	movs	r2, #1
 800205a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800205e:	4806      	ldr	r0, [pc, #24]	; (8002078 <P_VGA_InitDMA+0x8c>)
 8002060:	f7ff fbb5 	bl	80017ce <TIM_DMACmd>
}
 8002064:	bf00      	nop
 8002066:	3740      	adds	r7, #64	; 0x40
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40026488 	.word	0x40026488
 8002070:	40021015 	.word	0x40021015
 8002074:	2000003c 	.word	0x2000003c
 8002078:	40010000 	.word	0x40010000

0800207c <TIM2_IRQHandler>:
//
//   CC3-Interrupt    -> starts from DMA
// Watch it.. higher troughput when interrupt flag is left alone
//--------------------------------------------------------------
void TIM2_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0

  // Interrupt of Timer2 CH3 occurred (for Trigger start)
  TIM_ClearITPendingBit(TIM2, TIM_IT_CC3);
 8002080:	2108      	movs	r1, #8
 8002082:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002086:	f7ff fb91 	bl	80017ac <TIM_ClearITPendingBit>

  VGA.hsync_cnt++;
 800208a:	4b26      	ldr	r3, [pc, #152]	; (8002124 <TIM2_IRQHandler+0xa8>)
 800208c:	881b      	ldrh	r3, [r3, #0]
 800208e:	3301      	adds	r3, #1
 8002090:	b29a      	uxth	r2, r3
 8002092:	4b24      	ldr	r3, [pc, #144]	; (8002124 <TIM2_IRQHandler+0xa8>)
 8002094:	801a      	strh	r2, [r3, #0]
  if(VGA.hsync_cnt>=VGA_VSYNC_PERIODE) {
 8002096:	4b23      	ldr	r3, [pc, #140]	; (8002124 <TIM2_IRQHandler+0xa8>)
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 800209e:	d905      	bls.n	80020ac <TIM2_IRQHandler+0x30>
    // -----------
    VGA.hsync_cnt=0;
 80020a0:	4b20      	ldr	r3, [pc, #128]	; (8002124 <TIM2_IRQHandler+0xa8>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr=(uint32_t)(&VGA_RAM1[0]);
 80020a6:	4a20      	ldr	r2, [pc, #128]	; (8002128 <TIM2_IRQHandler+0xac>)
 80020a8:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <TIM2_IRQHandler+0xa8>)
 80020aa:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  if(VGA.hsync_cnt<VGA_VSYNC_IMP) {
 80020ac:	4b1d      	ldr	r3, [pc, #116]	; (8002124 <TIM2_IRQHandler+0xa8>)
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d804      	bhi.n	80020be <TIM2_IRQHandler+0x42>
    // HSync low
    GPIOB->BSRRH = GPIO_Pin_12;
 80020b4:	4b1d      	ldr	r3, [pc, #116]	; (800212c <TIM2_IRQHandler+0xb0>)
 80020b6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020ba:	835a      	strh	r2, [r3, #26]
 80020bc:	e003      	b.n	80020c6 <TIM2_IRQHandler+0x4a>
  }
  else {
    // HSync High
    GPIOB->BSRRL = GPIO_Pin_12;
 80020be:	4b1b      	ldr	r3, [pc, #108]	; (800212c <TIM2_IRQHandler+0xb0>)
 80020c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020c4:	831a      	strh	r2, [r3, #24]
  }

  // Test for DMA start
  if((VGA.hsync_cnt>=VGA_VSYNC_BILD_START) && (VGA.hsync_cnt<=VGA_VSYNC_BILD_STOP)) {
 80020c6:	4b17      	ldr	r3, [pc, #92]	; (8002124 <TIM2_IRQHandler+0xa8>)
 80020c8:	881b      	ldrh	r3, [r3, #0]
 80020ca:	2b23      	cmp	r3, #35	; 0x23
 80020cc:	d927      	bls.n	800211e <TIM2_IRQHandler+0xa2>
 80020ce:	4b15      	ldr	r3, [pc, #84]	; (8002124 <TIM2_IRQHandler+0xa8>)
 80020d0:	881b      	ldrh	r3, [r3, #0]
 80020d2:	f240 2202 	movw	r2, #514	; 0x202
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d821      	bhi.n	800211e <TIM2_IRQHandler+0xa2>
    // after FP start => DMA Transfer

    // DMA2 init
	DMA2_Stream5->CR=VGA.dma2_cr_reg;
 80020da:	4a15      	ldr	r2, [pc, #84]	; (8002130 <TIM2_IRQHandler+0xb4>)
 80020dc:	4b11      	ldr	r3, [pc, #68]	; (8002124 <TIM2_IRQHandler+0xa8>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR=VGA.start_adr;
 80020e2:	4a13      	ldr	r2, [pc, #76]	; (8002130 <TIM2_IRQHandler+0xb4>)
 80020e4:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <TIM2_IRQHandler+0xa8>)
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1|=TIM_CR1_CEN;
 80020ea:	4a12      	ldr	r2, [pc, #72]	; (8002134 <TIM2_IRQHandler+0xb8>)
 80020ec:	4b11      	ldr	r3, [pc, #68]	; (8002134 <TIM2_IRQHandler+0xb8>)
 80020ee:	881b      	ldrh	r3, [r3, #0]
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	8013      	strh	r3, [r2, #0]
    // DMA2 enable
    DMA2_Stream5->CR|=DMA_SxCR_EN;
 80020fa:	4a0d      	ldr	r2, [pc, #52]	; (8002130 <TIM2_IRQHandler+0xb4>)
 80020fc:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <TIM2_IRQHandler+0xb4>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	6013      	str	r3, [r2, #0]

    // Test Adrespointer for high
    if((VGA.hsync_cnt & 0x01)!=0) {
 8002106:	4b07      	ldr	r3, [pc, #28]	; (8002124 <TIM2_IRQHandler+0xa8>)
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d005      	beq.n	800211e <TIM2_IRQHandler+0xa2>
      // inc after Hsync
      VGA.start_adr+=(VGA_DISPLAY_X+1);
 8002112:	4b04      	ldr	r3, [pc, #16]	; (8002124 <TIM2_IRQHandler+0xa8>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f203 1341 	addw	r3, r3, #321	; 0x141
 800211a:	4a02      	ldr	r2, [pc, #8]	; (8002124 <TIM2_IRQHandler+0xa8>)
 800211c:	6053      	str	r3, [r2, #4]
    }
  }
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	20000030 	.word	0x20000030
 8002128:	2000003c 	.word	0x2000003c
 800212c:	40020400 	.word	0x40020400
 8002130:	40026488 	.word	0x40026488
 8002134:	40010000 	.word	0x40010000

08002138 <DMA2_Stream5_IRQHandler>:
//   after TransferCompleteInterrupt -> stop DMA
//
// still a bit buggy
//--------------------------------------------------------------
void DMA2_Stream5_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  if(DMA_GetITStatus(DMA2_Stream5, DMA_IT_TCIF5))
 800213c:	490d      	ldr	r1, [pc, #52]	; (8002174 <DMA2_Stream5_IRQHandler+0x3c>)
 800213e:	480e      	ldr	r0, [pc, #56]	; (8002178 <DMA2_Stream5_IRQHandler+0x40>)
 8002140:	f7fe fed6 	bl	8000ef0 <DMA_GetITStatus>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d012      	beq.n	8002170 <DMA2_Stream5_IRQHandler+0x38>
  {
    // TransferInterruptComplete Interrupt from DMA2
    DMA_ClearITPendingBit(DMA2_Stream5, DMA_IT_TCIF5);
 800214a:	490a      	ldr	r1, [pc, #40]	; (8002174 <DMA2_Stream5_IRQHandler+0x3c>)
 800214c:	480a      	ldr	r0, [pc, #40]	; (8002178 <DMA2_Stream5_IRQHandler+0x40>)
 800214e:	f7fe ff27 	bl	8000fa0 <DMA_ClearITPendingBit>
    // stop after all pixels => DMA Transfer stop

    // Timer1 stop
    TIM1->CR1&=~TIM_CR1_CEN;
 8002152:	4a0a      	ldr	r2, [pc, #40]	; (800217c <DMA2_Stream5_IRQHandler+0x44>)
 8002154:	4b09      	ldr	r3, [pc, #36]	; (800217c <DMA2_Stream5_IRQHandler+0x44>)
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	b29b      	uxth	r3, r3
 800215a:	f023 0301 	bic.w	r3, r3, #1
 800215e:	b29b      	uxth	r3, r3
 8002160:	8013      	strh	r3, [r2, #0]
    // DMA2 disable
    DMA2_Stream5->CR=0;
 8002162:	4b05      	ldr	r3, [pc, #20]	; (8002178 <DMA2_Stream5_IRQHandler+0x40>)
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
    // switch on black
    GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 8002168:	4b05      	ldr	r3, [pc, #20]	; (8002180 <DMA2_Stream5_IRQHandler+0x48>)
 800216a:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 800216e:	835a      	strh	r2, [r3, #26]
  }
}
 8002170:	bf00      	nop
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20008800 	.word	0x20008800
 8002178:	40026488 	.word	0x40026488
 800217c:	40010000 	.word	0x40010000
 8002180:	40021000 	.word	0x40021000

08002184 <UART_init>:

char string[100];
int charcounter = 0;

void UART_init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0

  /* --------------------------- System Clocks Configuration -----------------*/
  /* USART2 clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 800218a:	2101      	movs	r1, #1
 800218c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002190:	f7ff f8d4 	bl	800133c <RCC_APB1PeriphClockCmd>

  /* GPIOA clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8002194:	2101      	movs	r1, #1
 8002196:	2001      	movs	r0, #1
 8002198:	f7ff f8b0 	bl	80012fc <RCC_AHB1PeriphClockCmd>

  GPIO_InitTypeDef GPIO_InitStructure;

  /*-------------------------- GPIO Configuration ----------------------------*/
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 800219c:	230c      	movs	r3, #12
 800219e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80021a0:	2302      	movs	r3, #2
 80021a2:	753b      	strb	r3, [r7, #20]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80021a4:	2300      	movs	r3, #0
 80021a6:	75bb      	strb	r3, [r7, #22]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80021a8:	2301      	movs	r3, #1
 80021aa:	75fb      	strb	r3, [r7, #23]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80021ac:	2302      	movs	r3, #2
 80021ae:	757b      	strb	r3, [r7, #21]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 80021b0:	f107 0310 	add.w	r3, r7, #16
 80021b4:	4619      	mov	r1, r3
 80021b6:	4816      	ldr	r0, [pc, #88]	; (8002210 <UART_init+0x8c>)
 80021b8:	f7fe ff20 	bl	8000ffc <GPIO_Init>

  /* Connect USART pins to AF */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);   // USART2_TX
 80021bc:	2207      	movs	r2, #7
 80021be:	2102      	movs	r1, #2
 80021c0:	4813      	ldr	r0, [pc, #76]	; (8002210 <UART_init+0x8c>)
 80021c2:	f7fe ffa9 	bl	8001118 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);  // USART2_RX
 80021c6:	2207      	movs	r2, #7
 80021c8:	2103      	movs	r1, #3
 80021ca:	4811      	ldr	r0, [pc, #68]	; (8002210 <UART_init+0x8c>)
 80021cc:	f7fe ffa4 	bl	8001118 <GPIO_PinAFConfig>
      - One Stop Bit
      - No parity
      - Hardware flow control disabled (RTS and CTS signals)
      - Receive and transmit enabled
*/
USART_InitStructure.USART_BaudRate = 115200;
 80021d0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80021d4:	603b      	str	r3, [r7, #0]
USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80021d6:	2300      	movs	r3, #0
 80021d8:	80bb      	strh	r3, [r7, #4]
USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80021da:	2300      	movs	r3, #0
 80021dc:	80fb      	strh	r3, [r7, #6]
USART_InitStructure.USART_Parity = USART_Parity_No;
 80021de:	2300      	movs	r3, #0
 80021e0:	813b      	strh	r3, [r7, #8]
USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80021e2:	2300      	movs	r3, #0
 80021e4:	81bb      	strh	r3, [r7, #12]

USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80021e6:	230c      	movs	r3, #12
 80021e8:	817b      	strh	r3, [r7, #10]

USART_Init(USART2, &USART_InitStructure);
 80021ea:	463b      	mov	r3, r7
 80021ec:	4619      	mov	r1, r3
 80021ee:	4809      	ldr	r0, [pc, #36]	; (8002214 <UART_init+0x90>)
 80021f0:	f7ff fb12 	bl	8001818 <USART_Init>
USART_ITConfig(USART2,USART_IT_RXNE,ENABLE);
 80021f4:	2201      	movs	r2, #1
 80021f6:	f240 5125 	movw	r1, #1317	; 0x525
 80021fa:	4806      	ldr	r0, [pc, #24]	; (8002214 <UART_init+0x90>)
 80021fc:	f7ff fbf8 	bl	80019f0 <USART_ITConfig>

USART_Cmd(USART2, ENABLE);
 8002200:	2101      	movs	r1, #1
 8002202:	4804      	ldr	r0, [pc, #16]	; (8002214 <UART_init+0x90>)
 8002204:	f7ff fbc2 	bl	800198c <USART_Cmd>

}
 8002208:	bf00      	nop
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40020000 	.word	0x40020000
 8002214:	40004400 	.word	0x40004400

08002218 <UART_putchar>:

void UART_putchar(char c)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	71fb      	strb	r3, [r7, #7]
		while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET); // Wait for Empty
 8002222:	bf00      	nop
 8002224:	2180      	movs	r1, #128	; 0x80
 8002226:	4808      	ldr	r0, [pc, #32]	; (8002248 <UART_putchar+0x30>)
 8002228:	f7ff fc2a 	bl	8001a80 <USART_GetFlagStatus>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f8      	beq.n	8002224 <UART_putchar+0xc>
		USART_SendData(USART2, c);
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	b29b      	uxth	r3, r3
 8002236:	4619      	mov	r1, r3
 8002238:	4803      	ldr	r0, [pc, #12]	; (8002248 <UART_putchar+0x30>)
 800223a:	f7ff fbc7 	bl	80019cc <USART_SendData>

}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40004400 	.word	0x40004400

0800224c <UART_puts>:

void UART_puts(char *s)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
	volatile unsigned int i;
	for (i=0; s[i]; i++)
 8002254:	2300      	movs	r3, #0
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	e009      	b.n	800226e <UART_puts+0x22>
	{
		UART_putchar(s[i]);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	4413      	add	r3, r2
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff ffd8 	bl	8002218 <UART_putchar>
	for (i=0; s[i]; i++)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	3301      	adds	r3, #1
 800226c:	60fb      	str	r3, [r7, #12]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	4413      	add	r3, r2
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1ef      	bne.n	800225a <UART_puts+0xe>
		//while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET); // Wait for Empty
		//USART_SendData(USART2, s[i]);
	}
}
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
	...

08002284 <USART2_IRQHandler>:
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
}

void USART2_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
	// check if the USART2 receive interrupt flag was set
	if( USART_GetITStatus(USART2, USART_IT_RXNE))
 800228a:	f240 5125 	movw	r1, #1317	; 0x525
 800228e:	4827      	ldr	r0, [pc, #156]	; (800232c <USART2_IRQHandler+0xa8>)
 8002290:	f7ff fc12 	bl	8001ab8 <USART_GetITStatus>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d044      	beq.n	8002324 <USART2_IRQHandler+0xa0>
	{
		USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 800229a:	f240 5125 	movw	r1, #1317	; 0x525
 800229e:	4823      	ldr	r0, [pc, #140]	; (800232c <USART2_IRQHandler+0xa8>)
 80022a0:	f7ff fc65 	bl	8001b6e <USART_ClearITPendingBit>
		int i;
		char c = USART2->DR & 0xFF;
 80022a4:	4b21      	ldr	r3, [pc, #132]	; (800232c <USART2_IRQHandler+0xa8>)
 80022a6:	889b      	ldrh	r3, [r3, #4]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	70fb      	strb	r3, [r7, #3]
//		LCD_XY(10,1);
//		LCD_put("UART:   ");
//		LCD_XY(15,1);
//		LCD_putchar(c);

		if(c > 64 && c < 91)
 80022ac:	78fb      	ldrb	r3, [r7, #3]
 80022ae:	2b40      	cmp	r3, #64	; 0x40
 80022b0:	d905      	bls.n	80022be <USART2_IRQHandler+0x3a>
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	2b5a      	cmp	r3, #90	; 0x5a
 80022b6:	d802      	bhi.n	80022be <USART2_IRQHandler+0x3a>
			c += 32;
 80022b8:	78fb      	ldrb	r3, [r7, #3]
 80022ba:	3320      	adds	r3, #32
 80022bc:	70fb      	strb	r3, [r7, #3]
		if(c <= 13)
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	2b0d      	cmp	r3, #13
 80022c2:	d81d      	bhi.n	8002300 <USART2_IRQHandler+0x7c>
		{
			for(i=0;i<charcounter;i++)
 80022c4:	2300      	movs	r3, #0
 80022c6:	607b      	str	r3, [r7, #4]
 80022c8:	e00b      	b.n	80022e2 <USART2_IRQHandler+0x5e>
			{
				USART_SendData(USART2, string[i]); // Echo Char
 80022ca:	4a19      	ldr	r2, [pc, #100]	; (8002330 <USART2_IRQHandler+0xac>)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4413      	add	r3, r2
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	4619      	mov	r1, r3
 80022d6:	4815      	ldr	r0, [pc, #84]	; (800232c <USART2_IRQHandler+0xa8>)
 80022d8:	f7ff fb78 	bl	80019cc <USART_SendData>
			for(i=0;i<charcounter;i++)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3301      	adds	r3, #1
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	4b14      	ldr	r3, [pc, #80]	; (8002334 <USART2_IRQHandler+0xb0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	dbee      	blt.n	80022ca <USART2_IRQHandler+0x46>
			}
			charcounter = 0;
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <USART2_IRQHandler+0xb0>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
			USART_SendData(USART2, c); // Echo Char
 80022f2:	78fb      	ldrb	r3, [r7, #3]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	4619      	mov	r1, r3
 80022f8:	480c      	ldr	r0, [pc, #48]	; (800232c <USART2_IRQHandler+0xa8>)
 80022fa:	f7ff fb67 	bl	80019cc <USART_SendData>
 80022fe:	e009      	b.n	8002314 <USART2_IRQHandler+0x90>
		}
		else
		{
			string[charcounter] = c;
 8002300:	4b0c      	ldr	r3, [pc, #48]	; (8002334 <USART2_IRQHandler+0xb0>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	490a      	ldr	r1, [pc, #40]	; (8002330 <USART2_IRQHandler+0xac>)
 8002306:	78fa      	ldrb	r2, [r7, #3]
 8002308:	54ca      	strb	r2, [r1, r3]
			charcounter++;
 800230a:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <USART2_IRQHandler+0xb0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	3301      	adds	r3, #1
 8002310:	4a08      	ldr	r2, [pc, #32]	; (8002334 <USART2_IRQHandler+0xb0>)
 8002312:	6013      	str	r3, [r2, #0]
		}


		while (USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET); // Wait for Empty
 8002314:	bf00      	nop
 8002316:	2140      	movs	r1, #64	; 0x40
 8002318:	4804      	ldr	r0, [pc, #16]	; (800232c <USART2_IRQHandler+0xa8>)
 800231a:	f7ff fbb1 	bl	8001a80 <USART_GetFlagStatus>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0f8      	beq.n	8002316 <USART2_IRQHandler+0x92>

	}
}
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40004400 	.word	0x40004400
 8002330:	20012d3c 	.word	0x20012d3c
 8002334:	2000002c 	.word	0x2000002c

08002338 <main>:
#include "line.h"
#include "rectangle.h"
#include "includes.h"

int main(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af02      	add	r7, sp, #8
	//  uint32_t n;

	SystemInit(); // System speed to 168MHz
 800233e:	f000 f873 	bl	8002428 <SystemInit>
	UART_init();
 8002342:	f7ff ff1f 	bl	8002184 <UART_init>
	DELAY_init();
 8002346:	f7ff fc2f 	bl	8001ba8 <DELAY_init>
	UB_VGA_Screen_Init(); // Init VGA-Screen
 800234a:	f7ff fcdf 	bl	8001d0c <UB_VGA_Screen_Init>

	UB_VGA_FillScreen(VGA_COL_BLACK);
 800234e:	2000      	movs	r0, #0
 8002350:	f7ff fd1c 	bl	8001d8c <UB_VGA_FillScreen>
	draw_rectangle(10,10,50,50,200);
 8002354:	23c8      	movs	r3, #200	; 0xc8
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	2332      	movs	r3, #50	; 0x32
 800235a:	2232      	movs	r2, #50	; 0x32
 800235c:	210a      	movs	r1, #10
 800235e:	200a      	movs	r0, #10
 8002360:	f7fe fbb0 	bl	8000ac4 <draw_rectangle>
	for(l=y1;l<=y2;l++)
		UB_VGA_SetPixel(x2,l,255);
	*/
  while(1)
  {
	  UART_puts("\nabc");
 8002364:	4803      	ldr	r0, [pc, #12]	; (8002374 <main+0x3c>)
 8002366:	f7ff ff71 	bl	800224c <UART_puts>
	  DELAY_ms(100);
 800236a:	2064      	movs	r0, #100	; 0x64
 800236c:	f7ff fcb0 	bl	8001cd0 <DELAY_ms>
	  UART_puts("\nabc");
 8002370:	e7f8      	b.n	8002364 <main+0x2c>
 8002372:	bf00      	nop
 8002374:	080025ec 	.word	0x080025ec

08002378 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002378:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800237c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800237e:	e003      	b.n	8002388 <LoopCopyDataInit>

08002380 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002380:	4b0c      	ldr	r3, [pc, #48]	; (80023b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002382:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002384:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002386:	3104      	adds	r1, #4

08002388 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002388:	480b      	ldr	r0, [pc, #44]	; (80023b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800238a:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800238c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800238e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002390:	d3f6      	bcc.n	8002380 <CopyDataInit>
  ldr  r2, =_sbss
 8002392:	4a0b      	ldr	r2, [pc, #44]	; (80023c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002394:	e002      	b.n	800239c <LoopFillZerobss>

08002396 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002396:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002398:	f842 3b04 	str.w	r3, [r2], #4

0800239c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800239e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023a0:	d3f9      	bcc.n	8002396 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023a2:	f000 f841 	bl	8002428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023a6:	f000 f8f1 	bl	800258c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023aa:	f7ff ffc5 	bl	8002338 <main>
  bx  lr    
 80023ae:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80023b4:	080025fc 	.word	0x080025fc
  ldr  r0, =_sdata
 80023b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80023bc:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80023c0:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80023c4:	20012da0 	.word	0x20012da0

080023c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023c8:	e7fe      	b.n	80023c8 <ADC_IRQHandler>

080023ca <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0
}
 80023ce:	bf00      	nop
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr

080023d8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80023dc:	e7fe      	b.n	80023dc <HardFault_Handler+0x4>

080023de <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80023de:	b480      	push	{r7}
 80023e0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80023e2:	e7fe      	b.n	80023e2 <MemManage_Handler+0x4>

080023e4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80023e8:	e7fe      	b.n	80023e8 <BusFault_Handler+0x4>

080023ea <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80023ee:	e7fe      	b.n	80023ee <UsageFault_Handler+0x4>

080023f0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80023fe:	b480      	push	{r7}
 8002400:	af00      	add	r7, sp, #0
}
 8002402:	bf00      	nop
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800241e:	bf00      	nop
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800242c:	4a16      	ldr	r2, [pc, #88]	; (8002488 <SystemInit+0x60>)
 800242e:	4b16      	ldr	r3, [pc, #88]	; (8002488 <SystemInit+0x60>)
 8002430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002434:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002438:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800243c:	4a13      	ldr	r2, [pc, #76]	; (800248c <SystemInit+0x64>)
 800243e:	4b13      	ldr	r3, [pc, #76]	; (800248c <SystemInit+0x64>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002448:	4b10      	ldr	r3, [pc, #64]	; (800248c <SystemInit+0x64>)
 800244a:	2200      	movs	r2, #0
 800244c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800244e:	4a0f      	ldr	r2, [pc, #60]	; (800248c <SystemInit+0x64>)
 8002450:	4b0e      	ldr	r3, [pc, #56]	; (800248c <SystemInit+0x64>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800245c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800245e:	4b0b      	ldr	r3, [pc, #44]	; (800248c <SystemInit+0x64>)
 8002460:	4a0b      	ldr	r2, [pc, #44]	; (8002490 <SystemInit+0x68>)
 8002462:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002464:	4a09      	ldr	r2, [pc, #36]	; (800248c <SystemInit+0x64>)
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <SystemInit+0x64>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800246e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <SystemInit+0x64>)
 8002472:	2200      	movs	r2, #0
 8002474:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002476:	f000 f80d 	bl	8002494 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800247a:	4b03      	ldr	r3, [pc, #12]	; (8002488 <SystemInit+0x60>)
 800247c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002480:	609a      	str	r2, [r3, #8]
#endif
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	e000ed00 	.word	0xe000ed00
 800248c:	40023800 	.word	0x40023800
 8002490:	24003010 	.word	0x24003010

08002494 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800249a:	2300      	movs	r3, #0
 800249c:	607b      	str	r3, [r7, #4]
 800249e:	2300      	movs	r3, #0
 80024a0:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80024a2:	4a36      	ldr	r2, [pc, #216]	; (800257c <SetSysClock+0xe8>)
 80024a4:	4b35      	ldr	r3, [pc, #212]	; (800257c <SetSysClock+0xe8>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024ac:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80024ae:	4b33      	ldr	r3, [pc, #204]	; (800257c <SetSysClock+0xe8>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3301      	adds	r3, #1
 80024bc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d103      	bne.n	80024cc <SetSysClock+0x38>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80024ca:	d1f0      	bne.n	80024ae <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80024cc:	4b2b      	ldr	r3, [pc, #172]	; (800257c <SetSysClock+0xe8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80024d8:	2301      	movs	r3, #1
 80024da:	603b      	str	r3, [r7, #0]
 80024dc:	e001      	b.n	80024e2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80024de:	2300      	movs	r3, #0
 80024e0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d142      	bne.n	800256e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80024e8:	4a24      	ldr	r2, [pc, #144]	; (800257c <SetSysClock+0xe8>)
 80024ea:	4b24      	ldr	r3, [pc, #144]	; (800257c <SetSysClock+0xe8>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80024f4:	4a22      	ldr	r2, [pc, #136]	; (8002580 <SetSysClock+0xec>)
 80024f6:	4b22      	ldr	r3, [pc, #136]	; (8002580 <SetSysClock+0xec>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024fe:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002500:	4a1e      	ldr	r2, [pc, #120]	; (800257c <SetSysClock+0xe8>)
 8002502:	4b1e      	ldr	r3, [pc, #120]	; (800257c <SetSysClock+0xe8>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002508:	4a1c      	ldr	r2, [pc, #112]	; (800257c <SetSysClock+0xe8>)
 800250a:	4b1c      	ldr	r3, [pc, #112]	; (800257c <SetSysClock+0xe8>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002512:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002514:	4a19      	ldr	r2, [pc, #100]	; (800257c <SetSysClock+0xe8>)
 8002516:	4b19      	ldr	r3, [pc, #100]	; (800257c <SetSysClock+0xe8>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800251e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002520:	4b16      	ldr	r3, [pc, #88]	; (800257c <SetSysClock+0xe8>)
 8002522:	4a18      	ldr	r2, [pc, #96]	; (8002584 <SetSysClock+0xf0>)
 8002524:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002526:	4a15      	ldr	r2, [pc, #84]	; (800257c <SetSysClock+0xe8>)
 8002528:	4b14      	ldr	r3, [pc, #80]	; (800257c <SetSysClock+0xe8>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002530:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002532:	bf00      	nop
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <SetSysClock+0xe8>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0f9      	beq.n	8002534 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002540:	4b11      	ldr	r3, [pc, #68]	; (8002588 <SetSysClock+0xf4>)
 8002542:	f240 7205 	movw	r2, #1797	; 0x705
 8002546:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002548:	4a0c      	ldr	r2, [pc, #48]	; (800257c <SetSysClock+0xe8>)
 800254a:	4b0c      	ldr	r3, [pc, #48]	; (800257c <SetSysClock+0xe8>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f023 0303 	bic.w	r3, r3, #3
 8002552:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002554:	4a09      	ldr	r2, [pc, #36]	; (800257c <SetSysClock+0xe8>)
 8002556:	4b09      	ldr	r3, [pc, #36]	; (800257c <SetSysClock+0xe8>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f043 0302 	orr.w	r3, r3, #2
 800255e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002560:	bf00      	nop
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <SetSysClock+0xe8>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 030c 	and.w	r3, r3, #12
 800256a:	2b08      	cmp	r3, #8
 800256c:	d1f9      	bne.n	8002562 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800
 8002580:	40007000 	.word	0x40007000
 8002584:	07405419 	.word	0x07405419
 8002588:	40023c00 	.word	0x40023c00

0800258c <__libc_init_array>:
 800258c:	b570      	push	{r4, r5, r6, lr}
 800258e:	4e0d      	ldr	r6, [pc, #52]	; (80025c4 <__libc_init_array+0x38>)
 8002590:	4c0d      	ldr	r4, [pc, #52]	; (80025c8 <__libc_init_array+0x3c>)
 8002592:	1ba4      	subs	r4, r4, r6
 8002594:	10a4      	asrs	r4, r4, #2
 8002596:	2500      	movs	r5, #0
 8002598:	42a5      	cmp	r5, r4
 800259a:	d109      	bne.n	80025b0 <__libc_init_array+0x24>
 800259c:	4e0b      	ldr	r6, [pc, #44]	; (80025cc <__libc_init_array+0x40>)
 800259e:	4c0c      	ldr	r4, [pc, #48]	; (80025d0 <__libc_init_array+0x44>)
 80025a0:	f000 f818 	bl	80025d4 <_init>
 80025a4:	1ba4      	subs	r4, r4, r6
 80025a6:	10a4      	asrs	r4, r4, #2
 80025a8:	2500      	movs	r5, #0
 80025aa:	42a5      	cmp	r5, r4
 80025ac:	d105      	bne.n	80025ba <__libc_init_array+0x2e>
 80025ae:	bd70      	pop	{r4, r5, r6, pc}
 80025b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025b4:	4798      	blx	r3
 80025b6:	3501      	adds	r5, #1
 80025b8:	e7ee      	b.n	8002598 <__libc_init_array+0xc>
 80025ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025be:	4798      	blx	r3
 80025c0:	3501      	adds	r5, #1
 80025c2:	e7f2      	b.n	80025aa <__libc_init_array+0x1e>
 80025c4:	080025f4 	.word	0x080025f4
 80025c8:	080025f4 	.word	0x080025f4
 80025cc:	080025f4 	.word	0x080025f4
 80025d0:	080025f8 	.word	0x080025f8

080025d4 <_init>:
 80025d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025d6:	bf00      	nop
 80025d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025da:	bc08      	pop	{r3}
 80025dc:	469e      	mov	lr, r3
 80025de:	4770      	bx	lr

080025e0 <_fini>:
 80025e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025e2:	bf00      	nop
 80025e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025e6:	bc08      	pop	{r3}
 80025e8:	469e      	mov	lr, r3
 80025ea:	4770      	bx	lr
