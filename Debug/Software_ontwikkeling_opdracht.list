
Software_ontwikkeling_opdracht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ca4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08009e2c  08009e2c  00019e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a0c4  0800a0c4  0001a0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a0c8  0800a0c8  0001a0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000680  20000000  0800a0cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020680  2**0
                  CONTENTS
  7 .bss          0001330c  20000680  20000680  00020680  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2001398c  2001398c  00020680  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020680  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012175  00000000  00000000  000206b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002b55  00000000  00000000  00032825  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000a60  00000000  00000000  00035380  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008d8  00000000  00000000  00035de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000066aa  00000000  00000000  000366b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000032d1  00000000  00000000  0003cd62  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00040033  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002e2c  00000000  00000000  000400b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00042edc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000680 	.word	0x20000680
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009e14 	.word	0x08009e14

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000684 	.word	0x20000684
 80001c4:	08009e14 	.word	0x08009e14

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032a:	f1a4 0401 	sub.w	r4, r4, #1
 800032e:	d1e9      	bne.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f092 0f00 	teq	r2, #0
 80004d6:	bf14      	ite	ne
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	e720      	b.n	8000330 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_ul2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f04f 0500 	mov.w	r5, #0
 80004fe:	e00a      	b.n	8000516 <__aeabi_l2d+0x16>

08000500 <__aeabi_l2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050e:	d502      	bpl.n	8000516 <__aeabi_l2d+0x16>
 8000510:	4240      	negs	r0, r0
 8000512:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000516:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000522:	f43f aedc 	beq.w	80002de <__adddf3+0xe6>
 8000526:	f04f 0203 	mov.w	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053e:	f1c2 0320 	rsb	r3, r2, #32
 8000542:	fa00 fc03 	lsl.w	ip, r0, r3
 8000546:	fa20 f002 	lsr.w	r0, r0, r2
 800054a:	fa01 fe03 	lsl.w	lr, r1, r3
 800054e:	ea40 000e 	orr.w	r0, r0, lr
 8000552:	fa21 f102 	lsr.w	r1, r1, r2
 8000556:	4414      	add	r4, r2
 8000558:	e6c1      	b.n	80002de <__adddf3+0xe6>
 800055a:	bf00      	nop

0800055c <__aeabi_dmul>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000562:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000566:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056a:	bf1d      	ittte	ne
 800056c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000570:	ea94 0f0c 	teqne	r4, ip
 8000574:	ea95 0f0c 	teqne	r5, ip
 8000578:	f000 f8de 	bleq	8000738 <__aeabi_dmul+0x1dc>
 800057c:	442c      	add	r4, r5
 800057e:	ea81 0603 	eor.w	r6, r1, r3
 8000582:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000586:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058e:	bf18      	it	ne
 8000590:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800059c:	d038      	beq.n	8000610 <__aeabi_dmul+0xb4>
 800059e:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a2:	f04f 0500 	mov.w	r5, #0
 80005a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b2:	f04f 0600 	mov.w	r6, #0
 80005b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ba:	f09c 0f00 	teq	ip, #0
 80005be:	bf18      	it	ne
 80005c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d0:	d204      	bcs.n	80005dc <__aeabi_dmul+0x80>
 80005d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d6:	416d      	adcs	r5, r5
 80005d8:	eb46 0606 	adc.w	r6, r6, r6
 80005dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f4:	bf88      	it	hi
 80005f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fa:	d81e      	bhi.n	800063a <__aeabi_dmul+0xde>
 80005fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000614:	ea46 0101 	orr.w	r1, r6, r1
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	ea81 0103 	eor.w	r1, r1, r3
 8000620:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000624:	bfc2      	ittt	gt
 8000626:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062e:	bd70      	popgt	{r4, r5, r6, pc}
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f04f 0e00 	mov.w	lr, #0
 8000638:	3c01      	subs	r4, #1
 800063a:	f300 80ab 	bgt.w	8000794 <__aeabi_dmul+0x238>
 800063e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000642:	bfde      	ittt	le
 8000644:	2000      	movle	r0, #0
 8000646:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064a:	bd70      	pople	{r4, r5, r6, pc}
 800064c:	f1c4 0400 	rsb	r4, r4, #0
 8000650:	3c20      	subs	r4, #32
 8000652:	da35      	bge.n	80006c0 <__aeabi_dmul+0x164>
 8000654:	340c      	adds	r4, #12
 8000656:	dc1b      	bgt.n	8000690 <__aeabi_dmul+0x134>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f305 	lsl.w	r3, r0, r5
 8000664:	fa20 f004 	lsr.w	r0, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800067c:	fa21 f604 	lsr.w	r6, r1, r4
 8000680:	eb42 0106 	adc.w	r1, r2, r6
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f1c4 040c 	rsb	r4, r4, #12
 8000694:	f1c4 0520 	rsb	r5, r4, #32
 8000698:	fa00 f304 	lsl.w	r3, r0, r4
 800069c:	fa20 f005 	lsr.w	r0, r0, r5
 80006a0:	fa01 f204 	lsl.w	r2, r1, r4
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	f141 0100 	adc.w	r1, r1, #0
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f205 	lsl.w	r2, r0, r5
 80006c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006cc:	fa20 f304 	lsr.w	r3, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea43 0302 	orr.w	r3, r3, r2
 80006d8:	fa21 f004 	lsr.w	r0, r1, r4
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	fa21 f204 	lsr.w	r2, r1, r4
 80006e4:	ea20 0002 	bic.w	r0, r0, r2
 80006e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f094 0f00 	teq	r4, #0
 80006fc:	d10f      	bne.n	800071e <__aeabi_dmul+0x1c2>
 80006fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000702:	0040      	lsls	r0, r0, #1
 8000704:	eb41 0101 	adc.w	r1, r1, r1
 8000708:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800070c:	bf08      	it	eq
 800070e:	3c01      	subeq	r4, #1
 8000710:	d0f7      	beq.n	8000702 <__aeabi_dmul+0x1a6>
 8000712:	ea41 0106 	orr.w	r1, r1, r6
 8000716:	f095 0f00 	teq	r5, #0
 800071a:	bf18      	it	ne
 800071c:	4770      	bxne	lr
 800071e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	eb43 0303 	adc.w	r3, r3, r3
 8000728:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3d01      	subeq	r5, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1c6>
 8000732:	ea43 0306 	orr.w	r3, r3, r6
 8000736:	4770      	bx	lr
 8000738:	ea94 0f0c 	teq	r4, ip
 800073c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000740:	bf18      	it	ne
 8000742:	ea95 0f0c 	teqne	r5, ip
 8000746:	d00c      	beq.n	8000762 <__aeabi_dmul+0x206>
 8000748:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074c:	bf18      	it	ne
 800074e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000752:	d1d1      	bne.n	80006f8 <__aeabi_dmul+0x19c>
 8000754:	ea81 0103 	eor.w	r1, r1, r3
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000766:	bf06      	itte	eq
 8000768:	4610      	moveq	r0, r2
 800076a:	4619      	moveq	r1, r3
 800076c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000770:	d019      	beq.n	80007a6 <__aeabi_dmul+0x24a>
 8000772:	ea94 0f0c 	teq	r4, ip
 8000776:	d102      	bne.n	800077e <__aeabi_dmul+0x222>
 8000778:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800077c:	d113      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 800077e:	ea95 0f0c 	teq	r5, ip
 8000782:	d105      	bne.n	8000790 <__aeabi_dmul+0x234>
 8000784:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000788:	bf1c      	itt	ne
 800078a:	4610      	movne	r0, r2
 800078c:	4619      	movne	r1, r3
 800078e:	d10a      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ae:	bd70      	pop	{r4, r5, r6, pc}

080007b0 <__aeabi_ddiv>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007be:	bf1d      	ittte	ne
 80007c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c4:	ea94 0f0c 	teqne	r4, ip
 80007c8:	ea95 0f0c 	teqne	r5, ip
 80007cc:	f000 f8a7 	bleq	800091e <__aeabi_ddiv+0x16e>
 80007d0:	eba4 0405 	sub.w	r4, r4, r5
 80007d4:	ea81 0e03 	eor.w	lr, r1, r3
 80007d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e0:	f000 8088 	beq.w	80008f4 <__aeabi_ddiv+0x144>
 80007e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000800:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000804:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000808:	429d      	cmp	r5, r3
 800080a:	bf08      	it	eq
 800080c:	4296      	cmpeq	r6, r2
 800080e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000812:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000816:	d202      	bcs.n	800081e <__aeabi_ddiv+0x6e>
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	1ab6      	subs	r6, r6, r2
 8000820:	eb65 0503 	sbc.w	r5, r5, r3
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 000c 	orrcs.w	r0, r0, ip
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800088c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000890:	d018      	beq.n	80008c4 <__aeabi_ddiv+0x114>
 8000892:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000896:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ae:	d1c0      	bne.n	8000832 <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	d10b      	bne.n	80008ce <__aeabi_ddiv+0x11e>
 80008b6:	ea41 0100 	orr.w	r1, r1, r0
 80008ba:	f04f 0000 	mov.w	r0, #0
 80008be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c2:	e7b6      	b.n	8000832 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf04      	itt	eq
 80008ca:	4301      	orreq	r1, r0
 80008cc:	2000      	moveq	r0, #0
 80008ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d2:	bf88      	it	hi
 80008d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d8:	f63f aeaf 	bhi.w	800063a <__aeabi_dmul+0xde>
 80008dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e0:	bf04      	itt	eq
 80008e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ea:	f150 0000 	adcs.w	r0, r0, #0
 80008ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000900:	bfc2      	ittt	gt
 8000902:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000906:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090a:	bd70      	popgt	{r4, r5, r6, pc}
 800090c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000910:	f04f 0e00 	mov.w	lr, #0
 8000914:	3c01      	subs	r4, #1
 8000916:	e690      	b.n	800063a <__aeabi_dmul+0xde>
 8000918:	ea45 0e06 	orr.w	lr, r5, r6
 800091c:	e68d      	b.n	800063a <__aeabi_dmul+0xde>
 800091e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000922:	ea94 0f0c 	teq	r4, ip
 8000926:	bf08      	it	eq
 8000928:	ea95 0f0c 	teqeq	r5, ip
 800092c:	f43f af3b 	beq.w	80007a6 <__aeabi_dmul+0x24a>
 8000930:	ea94 0f0c 	teq	r4, ip
 8000934:	d10a      	bne.n	800094c <__aeabi_ddiv+0x19c>
 8000936:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093a:	f47f af34 	bne.w	80007a6 <__aeabi_dmul+0x24a>
 800093e:	ea95 0f0c 	teq	r5, ip
 8000942:	f47f af25 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e72c      	b.n	80007a6 <__aeabi_dmul+0x24a>
 800094c:	ea95 0f0c 	teq	r5, ip
 8000950:	d106      	bne.n	8000960 <__aeabi_ddiv+0x1b0>
 8000952:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000956:	f43f aefd 	beq.w	8000754 <__aeabi_dmul+0x1f8>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e722      	b.n	80007a6 <__aeabi_dmul+0x24a>
 8000960:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096a:	f47f aec5 	bne.w	80006f8 <__aeabi_dmul+0x19c>
 800096e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000972:	f47f af0d 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000976:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097a:	f47f aeeb 	bne.w	8000754 <__aeabi_dmul+0x1f8>
 800097e:	e712      	b.n	80007a6 <__aeabi_dmul+0x24a>

08000980 <__aeabi_d2uiz>:
 8000980:	004a      	lsls	r2, r1, #1
 8000982:	d211      	bcs.n	80009a8 <__aeabi_d2uiz+0x28>
 8000984:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000988:	d211      	bcs.n	80009ae <__aeabi_d2uiz+0x2e>
 800098a:	d50d      	bpl.n	80009a8 <__aeabi_d2uiz+0x28>
 800098c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000990:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000994:	d40e      	bmi.n	80009b4 <__aeabi_d2uiz+0x34>
 8000996:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009a2:	fa23 f002 	lsr.w	r0, r3, r2
 80009a6:	4770      	bx	lr
 80009a8:	f04f 0000 	mov.w	r0, #0
 80009ac:	4770      	bx	lr
 80009ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b2:	d102      	bne.n	80009ba <__aeabi_d2uiz+0x3a>
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295
 80009b8:	4770      	bx	lr
 80009ba:	f04f 0000 	mov.w	r0, #0
 80009be:	4770      	bx	lr

080009c0 <draw_bitmap>:
//	- arrow right "right"
//	- arrow left "left"



void draw_bitmap (int bitmap_selector, int x, int y, int backcolor) {
 80009c0:	b480      	push	{r7}
 80009c2:	b085      	sub	sp, #20
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
 80009cc:	603b      	str	r3, [r7, #0]
				UB_VGA_SetPixel(x_pos, y_pos, arrow_left[i][j]);
			}
		}
	}
*/
}
 80009ce:	bf00      	nop
 80009d0:	3714      	adds	r7, #20
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <clr_screen>:

// Includes
#include "clr_screen.h"

void clr_screen(uint8_t color)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	4603      	mov	r3, r0
 80009e2:	71fb      	strb	r3, [r7, #7]
	UB_VGA_FillScreen(color);	// Fill screen
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f007 fb58 	bl	800809c <UB_VGA_FillScreen>
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <draw_ellips>:

// Includes
#include "ellips.h"

void draw_ellips (int x_center,int y_center, int x_rad, int y_rad, int color)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b086      	sub	sp, #24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
 8000a00:	603b      	str	r3, [r7, #0]
	for(int y=-y_rad; y<=y_rad; y++) {
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	425b      	negs	r3, r3
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	e03f      	b.n	8000a8a <draw_ellips+0x96>
	    for(int x=-x_rad; x<=x_rad; x++) {
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	425b      	negs	r3, r3
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	e034      	b.n	8000a7c <draw_ellips+0x88>
	        if(x*x*y_rad*y_rad+y*y*x_rad*x_rad <= y_rad*y_rad*x_rad*x_rad)
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	fb02 f303 	mul.w	r3, r2, r3
 8000a1a:	683a      	ldr	r2, [r7, #0]
 8000a1c:	fb02 f303 	mul.w	r3, r2, r3
 8000a20:	683a      	ldr	r2, [r7, #0]
 8000a22:	fb02 f203 	mul.w	r2, r2, r3
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	6979      	ldr	r1, [r7, #20]
 8000a2a:	fb01 f303 	mul.w	r3, r1, r3
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	fb01 f303 	mul.w	r3, r1, r3
 8000a34:	6879      	ldr	r1, [r7, #4]
 8000a36:	fb01 f303 	mul.w	r3, r1, r3
 8000a3a:	441a      	add	r2, r3
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	6839      	ldr	r1, [r7, #0]
 8000a40:	fb01 f303 	mul.w	r3, r1, r3
 8000a44:	6879      	ldr	r1, [r7, #4]
 8000a46:	fb01 f303 	mul.w	r3, r1, r3
 8000a4a:	6879      	ldr	r1, [r7, #4]
 8000a4c:	fb01 f303 	mul.w	r3, r1, r3
 8000a50:	429a      	cmp	r2, r3
 8000a52:	dc10      	bgt.n	8000a76 <draw_ellips+0x82>
	        	UB_VGA_SetPixel(x_center+x,y_center+y,color);
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	b29b      	uxth	r3, r3
 8000a5c:	4413      	add	r3, r2
 8000a5e:	b298      	uxth	r0, r3
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	4413      	add	r3, r2
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	6a3a      	ldr	r2, [r7, #32]
 8000a6e:	b2d2      	uxtb	r2, r2
 8000a70:	4619      	mov	r1, r3
 8000a72:	f007 fb35 	bl	80080e0 <UB_VGA_SetPixel>
	    for(int x=-x_rad; x<=x_rad; x++) {
 8000a76:	693b      	ldr	r3, [r7, #16]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	ddc6      	ble.n	8000a12 <draw_ellips+0x1e>
	for(int y=-y_rad; y<=y_rad; y++) {
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	3301      	adds	r3, #1
 8000a88:	617b      	str	r3, [r7, #20]
 8000a8a:	697a      	ldr	r2, [r7, #20]
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	429a      	cmp	r2, r3
 8000a90:	ddbb      	ble.n	8000a0a <draw_ellips+0x16>
	    }
	}
}
 8000a92:	bf00      	nop
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <letter_select>:

#include "letter_select.h"



void letter_select(int x, int y, char letter, int backcolor, int textcolor){
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	f5ad 5d9b 	sub.w	sp, sp, #4960	; 0x1360
 8000aa2:	b087      	sub	sp, #28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	f107 0418 	add.w	r4, r7, #24
 8000aaa:	3c0c      	subs	r4, #12
 8000aac:	6020      	str	r0, [r4, #0]
 8000aae:	f107 0018 	add.w	r0, r7, #24
 8000ab2:	3810      	subs	r0, #16
 8000ab4:	6001      	str	r1, [r0, #0]
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	f107 0218 	add.w	r2, r7, #24
 8000abc:	3a18      	subs	r2, #24
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	f107 0318 	add.w	r3, r7, #24
 8000ac4:	3b11      	subs	r3, #17
 8000ac6:	460a      	mov	r2, r1
 8000ac8:	701a      	strb	r2, [r3, #0]

	//____________________________________ALFABET IN C ARRAY_________________________________________

	int letter_A[10][4] = {
 8000aca:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000ace:	f102 0218 	add.w	r2, r2, #24
 8000ad2:	f107 0318 	add.w	r3, r7, #24
 8000ad6:	3b18      	subs	r3, #24
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	6013      	str	r3, [r2, #0]
 8000adc:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000ae0:	f102 0218 	add.w	r2, r2, #24
 8000ae4:	f107 0318 	add.w	r3, r7, #24
 8000ae8:	3b18      	subs	r3, #24
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	6053      	str	r3, [r2, #4]
 8000aee:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000af2:	f102 0218 	add.w	r2, r2, #24
 8000af6:	f107 0318 	add.w	r3, r7, #24
 8000afa:	3b18      	subs	r3, #24
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	6093      	str	r3, [r2, #8]
 8000b00:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000b04:	f102 0218 	add.w	r2, r2, #24
 8000b08:	f107 0318 	add.w	r3, r7, #24
 8000b0c:	3b18      	subs	r3, #24
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	60d3      	str	r3, [r2, #12]
 8000b12:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000b16:	f102 0218 	add.w	r2, r2, #24
 8000b1a:	f107 0318 	add.w	r3, r7, #24
 8000b1e:	3b18      	subs	r3, #24
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	6113      	str	r3, [r2, #16]
 8000b24:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000b28:	f102 0218 	add.w	r2, r2, #24
 8000b2c:	f107 0318 	add.w	r3, r7, #24
 8000b30:	3b18      	subs	r3, #24
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	6153      	str	r3, [r2, #20]
 8000b36:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000b3a:	f102 0218 	add.w	r2, r2, #24
 8000b3e:	f107 0318 	add.w	r3, r7, #24
 8000b42:	3b18      	subs	r3, #24
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000b4c:	f102 0218 	add.w	r2, r2, #24
 8000b50:	f107 0318 	add.w	r3, r7, #24
 8000b54:	3b18      	subs	r3, #24
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	61d3      	str	r3, [r2, #28]
 8000b5a:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000b5e:	f102 0218 	add.w	r2, r2, #24
 8000b62:	f107 0318 	add.w	r3, r7, #24
 8000b66:	3b18      	subs	r3, #24
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	6213      	str	r3, [r2, #32]
 8000b6c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000b70:	f103 0318 	add.w	r3, r3, #24
 8000b74:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8000b78:	f102 0208 	add.w	r2, r2, #8
 8000b7c:	6812      	ldr	r2, [r2, #0]
 8000b7e:	625a      	str	r2, [r3, #36]	; 0x24
 8000b80:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000b84:	f103 0318 	add.w	r3, r3, #24
 8000b88:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8000b8c:	f102 0208 	add.w	r2, r2, #8
 8000b90:	6812      	ldr	r2, [r2, #0]
 8000b92:	629a      	str	r2, [r3, #40]	; 0x28
 8000b94:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000b98:	f102 0218 	add.w	r2, r2, #24
 8000b9c:	f107 0318 	add.w	r3, r7, #24
 8000ba0:	3b18      	subs	r3, #24
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ba6:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000baa:	f102 0218 	add.w	r2, r2, #24
 8000bae:	f107 0318 	add.w	r3, r7, #24
 8000bb2:	3b18      	subs	r3, #24
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb8:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000bbc:	f103 0318 	add.w	r3, r3, #24
 8000bc0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8000bc4:	f102 0208 	add.w	r2, r2, #8
 8000bc8:	6812      	ldr	r2, [r2, #0]
 8000bca:	635a      	str	r2, [r3, #52]	; 0x34
 8000bcc:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000bd0:	f103 0318 	add.w	r3, r3, #24
 8000bd4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8000bd8:	f102 0208 	add.w	r2, r2, #8
 8000bdc:	6812      	ldr	r2, [r2, #0]
 8000bde:	639a      	str	r2, [r3, #56]	; 0x38
 8000be0:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000be4:	f102 0218 	add.w	r2, r2, #24
 8000be8:	f107 0318 	add.w	r3, r7, #24
 8000bec:	3b18      	subs	r3, #24
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000bf2:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000bf6:	f103 0318 	add.w	r3, r3, #24
 8000bfa:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8000bfe:	f102 0208 	add.w	r2, r2, #8
 8000c02:	6812      	ldr	r2, [r2, #0]
 8000c04:	641a      	str	r2, [r3, #64]	; 0x40
 8000c06:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000c0a:	f102 0218 	add.w	r2, r2, #24
 8000c0e:	f107 0318 	add.w	r3, r7, #24
 8000c12:	3b18      	subs	r3, #24
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	6453      	str	r3, [r2, #68]	; 0x44
 8000c18:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000c1c:	f102 0218 	add.w	r2, r2, #24
 8000c20:	f107 0318 	add.w	r3, r7, #24
 8000c24:	3b18      	subs	r3, #24
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	6493      	str	r3, [r2, #72]	; 0x48
 8000c2a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000c2e:	f103 0318 	add.w	r3, r3, #24
 8000c32:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8000c36:	f102 0208 	add.w	r2, r2, #8
 8000c3a:	6812      	ldr	r2, [r2, #0]
 8000c3c:	64da      	str	r2, [r3, #76]	; 0x4c
 8000c3e:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000c42:	f103 0318 	add.w	r3, r3, #24
 8000c46:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8000c4a:	f102 0208 	add.w	r2, r2, #8
 8000c4e:	6812      	ldr	r2, [r2, #0]
 8000c50:	651a      	str	r2, [r3, #80]	; 0x50
 8000c52:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000c56:	f102 0218 	add.w	r2, r2, #24
 8000c5a:	f107 0318 	add.w	r3, r7, #24
 8000c5e:	3b18      	subs	r3, #24
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	6553      	str	r3, [r2, #84]	; 0x54
 8000c64:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000c68:	f102 0218 	add.w	r2, r2, #24
 8000c6c:	f107 0318 	add.w	r3, r7, #24
 8000c70:	3b18      	subs	r3, #24
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	6593      	str	r3, [r2, #88]	; 0x58
 8000c76:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000c7a:	f103 0318 	add.w	r3, r3, #24
 8000c7e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8000c82:	f102 0208 	add.w	r2, r2, #8
 8000c86:	6812      	ldr	r2, [r2, #0]
 8000c88:	65da      	str	r2, [r3, #92]	; 0x5c
 8000c8a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000c8e:	f103 0318 	add.w	r3, r3, #24
 8000c92:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8000c96:	f102 0208 	add.w	r2, r2, #8
 8000c9a:	6812      	ldr	r2, [r2, #0]
 8000c9c:	661a      	str	r2, [r3, #96]	; 0x60
 8000c9e:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000ca2:	f103 0318 	add.w	r3, r3, #24
 8000ca6:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8000caa:	f102 0208 	add.w	r2, r2, #8
 8000cae:	6812      	ldr	r2, [r2, #0]
 8000cb0:	665a      	str	r2, [r3, #100]	; 0x64
 8000cb2:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000cb6:	f103 0318 	add.w	r3, r3, #24
 8000cba:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8000cbe:	f102 0208 	add.w	r2, r2, #8
 8000cc2:	6812      	ldr	r2, [r2, #0]
 8000cc4:	669a      	str	r2, [r3, #104]	; 0x68
 8000cc6:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000cca:	f103 0318 	add.w	r3, r3, #24
 8000cce:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8000cd2:	f102 0208 	add.w	r2, r2, #8
 8000cd6:	6812      	ldr	r2, [r2, #0]
 8000cd8:	66da      	str	r2, [r3, #108]	; 0x6c
 8000cda:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000cde:	f103 0318 	add.w	r3, r3, #24
 8000ce2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8000ce6:	f102 0208 	add.w	r2, r2, #8
 8000cea:	6812      	ldr	r2, [r2, #0]
 8000cec:	671a      	str	r2, [r3, #112]	; 0x70
 8000cee:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000cf2:	f102 0218 	add.w	r2, r2, #24
 8000cf6:	f107 0318 	add.w	r3, r7, #24
 8000cfa:	3b18      	subs	r3, #24
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	6753      	str	r3, [r2, #116]	; 0x74
 8000d00:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000d04:	f102 0218 	add.w	r2, r2, #24
 8000d08:	f107 0318 	add.w	r3, r7, #24
 8000d0c:	3b18      	subs	r3, #24
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	6793      	str	r3, [r2, #120]	; 0x78
 8000d12:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000d16:	f103 0318 	add.w	r3, r3, #24
 8000d1a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8000d1e:	f102 0208 	add.w	r2, r2, #8
 8000d22:	6812      	ldr	r2, [r2, #0]
 8000d24:	67da      	str	r2, [r3, #124]	; 0x7c
 8000d26:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000d2a:	f102 0218 	add.w	r2, r2, #24
 8000d2e:	f107 0318 	add.w	r3, r7, #24
 8000d32:	3b18      	subs	r3, #24
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000d3a:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000d3e:	f102 0218 	add.w	r2, r2, #24
 8000d42:	f107 0318 	add.w	r3, r7, #24
 8000d46:	3b18      	subs	r3, #24
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8000d4e:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000d52:	f102 0218 	add.w	r2, r2, #24
 8000d56:	f107 0318 	add.w	r3, r7, #24
 8000d5a:	3b18      	subs	r3, #24
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000d62:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000d66:	f102 0218 	add.w	r2, r2, #24
 8000d6a:	f107 0318 	add.w	r3, r7, #24
 8000d6e:	3b18      	subs	r3, #24
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000d76:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000d7a:	f102 0218 	add.w	r2, r2, #24
 8000d7e:	f107 0318 	add.w	r3, r7, #24
 8000d82:	3b18      	subs	r3, #24
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000d8a:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000d8e:	f102 0218 	add.w	r2, r2, #24
 8000d92:	f107 0318 	add.w	r3, r7, #24
 8000d96:	3b18      	subs	r3, #24
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8000d9e:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000da2:	f102 0218 	add.w	r2, r2, #24
 8000da6:	f107 0318 	add.w	r3, r7, #24
 8000daa:	3b18      	subs	r3, #24
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8000db2:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000db6:	f102 0218 	add.w	r2, r2, #24
 8000dba:	f107 0318 	add.w	r3, r7, #24
 8000dbe:	3b18      	subs	r3, #24
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			  textcolor, textcolor, textcolor, textcolor, //@@@@
			  textcolor, backcolor, backcolor, textcolor, //@..@
			  backcolor, backcolor, backcolor, backcolor, //....
			  backcolor, backcolor, backcolor, backcolor
	};
	int letter_B[10][4] = {
 8000dc6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8000dca:	f102 0218 	add.w	r2, r2, #24
 8000dce:	f107 0318 	add.w	r3, r7, #24
 8000dd2:	3b18      	subs	r3, #24
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	6013      	str	r3, [r2, #0]
 8000dd8:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8000ddc:	f102 0218 	add.w	r2, r2, #24
 8000de0:	f107 0318 	add.w	r3, r7, #24
 8000de4:	3b18      	subs	r3, #24
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	6053      	str	r3, [r2, #4]
 8000dea:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8000dee:	f102 0218 	add.w	r2, r2, #24
 8000df2:	f107 0318 	add.w	r3, r7, #24
 8000df6:	3b18      	subs	r3, #24
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	6093      	str	r3, [r2, #8]
 8000dfc:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8000e00:	f102 0218 	add.w	r2, r2, #24
 8000e04:	f107 0318 	add.w	r3, r7, #24
 8000e08:	3b18      	subs	r3, #24
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	60d3      	str	r3, [r2, #12]
 8000e0e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8000e12:	f102 0218 	add.w	r2, r2, #24
 8000e16:	f107 0318 	add.w	r3, r7, #24
 8000e1a:	3b18      	subs	r3, #24
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	6113      	str	r3, [r2, #16]
 8000e20:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8000e24:	f102 0218 	add.w	r2, r2, #24
 8000e28:	f107 0318 	add.w	r3, r7, #24
 8000e2c:	3b18      	subs	r3, #24
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	6153      	str	r3, [r2, #20]
 8000e32:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8000e36:	f102 0218 	add.w	r2, r2, #24
 8000e3a:	f107 0318 	add.w	r3, r7, #24
 8000e3e:	3b18      	subs	r3, #24
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8000e48:	f102 0218 	add.w	r2, r2, #24
 8000e4c:	f107 0318 	add.w	r3, r7, #24
 8000e50:	3b18      	subs	r3, #24
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	61d3      	str	r3, [r2, #28]
 8000e56:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8000e5a:	f103 0318 	add.w	r3, r3, #24
 8000e5e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8000e62:	f102 0208 	add.w	r2, r2, #8
 8000e66:	6812      	ldr	r2, [r2, #0]
 8000e68:	621a      	str	r2, [r3, #32]
 8000e6a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8000e6e:	f103 0318 	add.w	r3, r3, #24
 8000e72:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8000e76:	f102 0208 	add.w	r2, r2, #8
 8000e7a:	6812      	ldr	r2, [r2, #0]
 8000e7c:	625a      	str	r2, [r3, #36]	; 0x24
 8000e7e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8000e82:	f103 0318 	add.w	r3, r3, #24
 8000e86:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8000e8a:	f102 0208 	add.w	r2, r2, #8
 8000e8e:	6812      	ldr	r2, [r2, #0]
 8000e90:	629a      	str	r2, [r3, #40]	; 0x28
 8000e92:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8000e96:	f102 0218 	add.w	r2, r2, #24
 8000e9a:	f107 0318 	add.w	r3, r7, #24
 8000e9e:	3b18      	subs	r3, #24
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000ea4:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8000ea8:	f103 0318 	add.w	r3, r3, #24
 8000eac:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8000eb0:	f102 0208 	add.w	r2, r2, #8
 8000eb4:	6812      	ldr	r2, [r2, #0]
 8000eb6:	631a      	str	r2, [r3, #48]	; 0x30
 8000eb8:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8000ebc:	f102 0218 	add.w	r2, r2, #24
 8000ec0:	f107 0318 	add.w	r3, r7, #24
 8000ec4:	3b18      	subs	r3, #24
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	6353      	str	r3, [r2, #52]	; 0x34
 8000eca:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8000ece:	f102 0218 	add.w	r2, r2, #24
 8000ed2:	f107 0318 	add.w	r3, r7, #24
 8000ed6:	3b18      	subs	r3, #24
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6393      	str	r3, [r2, #56]	; 0x38
 8000edc:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8000ee0:	f103 0318 	add.w	r3, r3, #24
 8000ee4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8000ee8:	f102 0208 	add.w	r2, r2, #8
 8000eec:	6812      	ldr	r2, [r2, #0]
 8000eee:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ef0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8000ef4:	f103 0318 	add.w	r3, r3, #24
 8000ef8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8000efc:	f102 0208 	add.w	r2, r2, #8
 8000f00:	6812      	ldr	r2, [r2, #0]
 8000f02:	641a      	str	r2, [r3, #64]	; 0x40
 8000f04:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8000f08:	f103 0318 	add.w	r3, r3, #24
 8000f0c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8000f10:	f102 0208 	add.w	r2, r2, #8
 8000f14:	6812      	ldr	r2, [r2, #0]
 8000f16:	645a      	str	r2, [r3, #68]	; 0x44
 8000f18:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8000f1c:	f103 0318 	add.w	r3, r3, #24
 8000f20:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8000f24:	f102 0208 	add.w	r2, r2, #8
 8000f28:	6812      	ldr	r2, [r2, #0]
 8000f2a:	649a      	str	r2, [r3, #72]	; 0x48
 8000f2c:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8000f30:	f102 0218 	add.w	r2, r2, #24
 8000f34:	f107 0318 	add.w	r3, r7, #24
 8000f38:	3b18      	subs	r3, #24
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8000f42:	f103 0318 	add.w	r3, r3, #24
 8000f46:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8000f4a:	f102 0208 	add.w	r2, r2, #8
 8000f4e:	6812      	ldr	r2, [r2, #0]
 8000f50:	651a      	str	r2, [r3, #80]	; 0x50
 8000f52:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8000f56:	f102 0218 	add.w	r2, r2, #24
 8000f5a:	f107 0318 	add.w	r3, r7, #24
 8000f5e:	3b18      	subs	r3, #24
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	6553      	str	r3, [r2, #84]	; 0x54
 8000f64:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8000f68:	f102 0218 	add.w	r2, r2, #24
 8000f6c:	f107 0318 	add.w	r3, r7, #24
 8000f70:	3b18      	subs	r3, #24
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	6593      	str	r3, [r2, #88]	; 0x58
 8000f76:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8000f7a:	f103 0318 	add.w	r3, r3, #24
 8000f7e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8000f82:	f102 0208 	add.w	r2, r2, #8
 8000f86:	6812      	ldr	r2, [r2, #0]
 8000f88:	65da      	str	r2, [r3, #92]	; 0x5c
 8000f8a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8000f8e:	f103 0318 	add.w	r3, r3, #24
 8000f92:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8000f96:	f102 0208 	add.w	r2, r2, #8
 8000f9a:	6812      	ldr	r2, [r2, #0]
 8000f9c:	661a      	str	r2, [r3, #96]	; 0x60
 8000f9e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8000fa2:	f102 0218 	add.w	r2, r2, #24
 8000fa6:	f107 0318 	add.w	r3, r7, #24
 8000faa:	3b18      	subs	r3, #24
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	6653      	str	r3, [r2, #100]	; 0x64
 8000fb0:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8000fb4:	f102 0218 	add.w	r2, r2, #24
 8000fb8:	f107 0318 	add.w	r3, r7, #24
 8000fbc:	3b18      	subs	r3, #24
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	6693      	str	r3, [r2, #104]	; 0x68
 8000fc2:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8000fc6:	f103 0318 	add.w	r3, r3, #24
 8000fca:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8000fce:	f102 0208 	add.w	r2, r2, #8
 8000fd2:	6812      	ldr	r2, [r2, #0]
 8000fd4:	66da      	str	r2, [r3, #108]	; 0x6c
 8000fd6:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8000fda:	f103 0318 	add.w	r3, r3, #24
 8000fde:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8000fe2:	f102 0208 	add.w	r2, r2, #8
 8000fe6:	6812      	ldr	r2, [r2, #0]
 8000fe8:	671a      	str	r2, [r3, #112]	; 0x70
 8000fea:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8000fee:	f103 0318 	add.w	r3, r3, #24
 8000ff2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8000ff6:	f102 0208 	add.w	r2, r2, #8
 8000ffa:	6812      	ldr	r2, [r2, #0]
 8000ffc:	675a      	str	r2, [r3, #116]	; 0x74
 8000ffe:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001002:	f103 0318 	add.w	r3, r3, #24
 8001006:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800100a:	f102 0208 	add.w	r2, r2, #8
 800100e:	6812      	ldr	r2, [r2, #0]
 8001010:	679a      	str	r2, [r3, #120]	; 0x78
 8001012:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001016:	f102 0218 	add.w	r2, r2, #24
 800101a:	f107 0318 	add.w	r3, r7, #24
 800101e:	3b18      	subs	r3, #24
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	67d3      	str	r3, [r2, #124]	; 0x7c
 8001024:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001028:	f102 0218 	add.w	r2, r2, #24
 800102c:	f107 0318 	add.w	r3, r7, #24
 8001030:	3b18      	subs	r3, #24
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001038:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800103c:	f102 0218 	add.w	r2, r2, #24
 8001040:	f107 0318 	add.w	r3, r7, #24
 8001044:	3b18      	subs	r3, #24
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 800104c:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001050:	f102 0218 	add.w	r2, r2, #24
 8001054:	f107 0318 	add.w	r3, r7, #24
 8001058:	3b18      	subs	r3, #24
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001060:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001064:	f102 0218 	add.w	r2, r2, #24
 8001068:	f107 0318 	add.w	r3, r7, #24
 800106c:	3b18      	subs	r3, #24
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001074:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001078:	f102 0218 	add.w	r2, r2, #24
 800107c:	f107 0318 	add.w	r3, r7, #24
 8001080:	3b18      	subs	r3, #24
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001088:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800108c:	f102 0218 	add.w	r2, r2, #24
 8001090:	f107 0318 	add.w	r3, r7, #24
 8001094:	3b18      	subs	r3, #24
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800109c:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80010a0:	f102 0218 	add.w	r2, r2, #24
 80010a4:	f107 0318 	add.w	r3, r7, #24
 80010a8:	3b18      	subs	r3, #24
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 80010b0:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80010b4:	f102 0218 	add.w	r2, r2, #24
 80010b8:	f107 0318 	add.w	r3, r7, #24
 80010bc:	3b18      	subs	r3, #24
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			  textcolor, backcolor, backcolor, textcolor,  //@..@
			  textcolor, textcolor, textcolor, backcolor,  //@@@.
			  backcolor, backcolor, backcolor, backcolor,  //....
			  backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_C[10][4] = {
 80010c4:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 80010c8:	f107 0318 	add.w	r3, r7, #24
 80010cc:	3b18      	subs	r3, #24
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 80010d6:	f107 0318 	add.w	r3, r7, #24
 80010da:	3b18      	subs	r3, #24
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6053      	str	r3, [r2, #4]
 80010e0:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 80010e4:	f107 0318 	add.w	r3, r7, #24
 80010e8:	3b18      	subs	r3, #24
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6093      	str	r3, [r2, #8]
 80010ee:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 80010f2:	f107 0318 	add.w	r3, r7, #24
 80010f6:	3b18      	subs	r3, #24
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	60d3      	str	r3, [r2, #12]
 80010fc:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001100:	f107 0318 	add.w	r3, r7, #24
 8001104:	3b18      	subs	r3, #24
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	6113      	str	r3, [r2, #16]
 800110a:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 800110e:	f107 0318 	add.w	r3, r7, #24
 8001112:	3b18      	subs	r3, #24
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6153      	str	r3, [r2, #20]
 8001118:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 800111c:	f107 0318 	add.w	r3, r7, #24
 8001120:	3b18      	subs	r3, #24
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	6193      	str	r3, [r2, #24]
 8001126:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 800112a:	f107 0318 	add.w	r3, r7, #24
 800112e:	3b18      	subs	r3, #24
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	61d3      	str	r3, [r2, #28]
 8001134:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001138:	f107 0318 	add.w	r3, r7, #24
 800113c:	3b18      	subs	r3, #24
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6213      	str	r3, [r2, #32]
 8001142:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8001146:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800114a:	f102 0208 	add.w	r2, r2, #8
 800114e:	6812      	ldr	r2, [r2, #0]
 8001150:	625a      	str	r2, [r3, #36]	; 0x24
 8001152:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8001156:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800115a:	f102 0208 	add.w	r2, r2, #8
 800115e:	6812      	ldr	r2, [r2, #0]
 8001160:	629a      	str	r2, [r3, #40]	; 0x28
 8001162:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8001166:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800116a:	f102 0208 	add.w	r2, r2, #8
 800116e:	6812      	ldr	r2, [r2, #0]
 8001170:	62da      	str	r2, [r3, #44]	; 0x2c
 8001172:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8001176:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800117a:	f102 0208 	add.w	r2, r2, #8
 800117e:	6812      	ldr	r2, [r2, #0]
 8001180:	631a      	str	r2, [r3, #48]	; 0x30
 8001182:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001186:	f107 0318 	add.w	r3, r7, #24
 800118a:	3b18      	subs	r3, #24
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6353      	str	r3, [r2, #52]	; 0x34
 8001190:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001194:	f107 0318 	add.w	r3, r7, #24
 8001198:	3b18      	subs	r3, #24
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	6393      	str	r3, [r2, #56]	; 0x38
 800119e:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 80011a2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80011a6:	f102 0208 	add.w	r2, r2, #8
 80011aa:	6812      	ldr	r2, [r2, #0]
 80011ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80011ae:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 80011b2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80011b6:	f102 0208 	add.w	r2, r2, #8
 80011ba:	6812      	ldr	r2, [r2, #0]
 80011bc:	641a      	str	r2, [r3, #64]	; 0x40
 80011be:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 80011c2:	f107 0318 	add.w	r3, r7, #24
 80011c6:	3b18      	subs	r3, #24
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	6453      	str	r3, [r2, #68]	; 0x44
 80011cc:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 80011d0:	f107 0318 	add.w	r3, r7, #24
 80011d4:	3b18      	subs	r3, #24
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6493      	str	r3, [r2, #72]	; 0x48
 80011da:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 80011de:	f107 0318 	add.w	r3, r7, #24
 80011e2:	3b18      	subs	r3, #24
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e8:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 80011ec:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80011f0:	f102 0208 	add.w	r2, r2, #8
 80011f4:	6812      	ldr	r2, [r2, #0]
 80011f6:	651a      	str	r2, [r3, #80]	; 0x50
 80011f8:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 80011fc:	f107 0318 	add.w	r3, r7, #24
 8001200:	3b18      	subs	r3, #24
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6553      	str	r3, [r2, #84]	; 0x54
 8001206:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 800120a:	f107 0318 	add.w	r3, r7, #24
 800120e:	3b18      	subs	r3, #24
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6593      	str	r3, [r2, #88]	; 0x58
 8001214:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001218:	f107 0318 	add.w	r3, r7, #24
 800121c:	3b18      	subs	r3, #24
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001222:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8001226:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800122a:	f102 0208 	add.w	r2, r2, #8
 800122e:	6812      	ldr	r2, [r2, #0]
 8001230:	661a      	str	r2, [r3, #96]	; 0x60
 8001232:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001236:	f107 0318 	add.w	r3, r7, #24
 800123a:	3b18      	subs	r3, #24
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	6653      	str	r3, [r2, #100]	; 0x64
 8001240:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001244:	f107 0318 	add.w	r3, r7, #24
 8001248:	3b18      	subs	r3, #24
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6693      	str	r3, [r2, #104]	; 0x68
 800124e:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8001252:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001256:	f102 0208 	add.w	r2, r2, #8
 800125a:	6812      	ldr	r2, [r2, #0]
 800125c:	66da      	str	r2, [r3, #108]	; 0x6c
 800125e:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001262:	f107 0318 	add.w	r3, r7, #24
 8001266:	3b18      	subs	r3, #24
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	6713      	str	r3, [r2, #112]	; 0x70
 800126c:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8001270:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001274:	f102 0208 	add.w	r2, r2, #8
 8001278:	6812      	ldr	r2, [r2, #0]
 800127a:	675a      	str	r2, [r3, #116]	; 0x74
 800127c:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8001280:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001284:	f102 0208 	add.w	r2, r2, #8
 8001288:	6812      	ldr	r2, [r2, #0]
 800128a:	679a      	str	r2, [r3, #120]	; 0x78
 800128c:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001290:	f107 0318 	add.w	r3, r7, #24
 8001294:	3b18      	subs	r3, #24
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	67d3      	str	r3, [r2, #124]	; 0x7c
 800129a:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 800129e:	f107 0318 	add.w	r3, r7, #24
 80012a2:	3b18      	subs	r3, #24
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80012aa:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 80012ae:	f107 0318 	add.w	r3, r7, #24
 80012b2:	3b18      	subs	r3, #24
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80012ba:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 80012be:	f107 0318 	add.w	r3, r7, #24
 80012c2:	3b18      	subs	r3, #24
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80012ca:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 80012ce:	f107 0318 	add.w	r3, r7, #24
 80012d2:	3b18      	subs	r3, #24
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80012da:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 80012de:	f107 0318 	add.w	r3, r7, #24
 80012e2:	3b18      	subs	r3, #24
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012ea:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 80012ee:	f107 0318 	add.w	r3, r7, #24
 80012f2:	3b18      	subs	r3, #24
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80012fa:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 80012fe:	f107 0318 	add.w	r3, r7, #24
 8001302:	3b18      	subs	r3, #24
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800130a:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 800130e:	f107 0318 	add.w	r3, r7, #24
 8001312:	3b18      	subs	r3, #24
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			  textcolor, backcolor, backcolor, textcolor,  //@..@
			  backcolor, textcolor, textcolor, backcolor,  //.@@.
			  backcolor, backcolor, backcolor, backcolor,  //....
			  backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_D[10][4] = {
 800131a:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 800131e:	f107 0318 	add.w	r3, r7, #24
 8001322:	3b18      	subs	r3, #24
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 800132c:	f107 0318 	add.w	r3, r7, #24
 8001330:	3b18      	subs	r3, #24
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6053      	str	r3, [r2, #4]
 8001336:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 800133a:	f107 0318 	add.w	r3, r7, #24
 800133e:	3b18      	subs	r3, #24
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6093      	str	r3, [r2, #8]
 8001344:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 8001348:	f107 0318 	add.w	r3, r7, #24
 800134c:	3b18      	subs	r3, #24
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	60d3      	str	r3, [r2, #12]
 8001352:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 8001356:	f107 0318 	add.w	r3, r7, #24
 800135a:	3b18      	subs	r3, #24
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6113      	str	r3, [r2, #16]
 8001360:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 8001364:	f107 0318 	add.w	r3, r7, #24
 8001368:	3b18      	subs	r3, #24
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6153      	str	r3, [r2, #20]
 800136e:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 8001372:	f107 0318 	add.w	r3, r7, #24
 8001376:	3b18      	subs	r3, #24
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6193      	str	r3, [r2, #24]
 800137c:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 8001380:	f107 0318 	add.w	r3, r7, #24
 8001384:	3b18      	subs	r3, #24
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	61d3      	str	r3, [r2, #28]
 800138a:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 800138e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001392:	f102 0208 	add.w	r2, r2, #8
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	621a      	str	r2, [r3, #32]
 800139a:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 800139e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80013a2:	f102 0208 	add.w	r2, r2, #8
 80013a6:	6812      	ldr	r2, [r2, #0]
 80013a8:	625a      	str	r2, [r3, #36]	; 0x24
 80013aa:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 80013ae:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80013b2:	f102 0208 	add.w	r2, r2, #8
 80013b6:	6812      	ldr	r2, [r2, #0]
 80013b8:	629a      	str	r2, [r3, #40]	; 0x28
 80013ba:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80013be:	f107 0318 	add.w	r3, r7, #24
 80013c2:	3b18      	subs	r3, #24
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80013c8:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 80013cc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80013d0:	f102 0208 	add.w	r2, r2, #8
 80013d4:	6812      	ldr	r2, [r2, #0]
 80013d6:	631a      	str	r2, [r3, #48]	; 0x30
 80013d8:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80013dc:	f107 0318 	add.w	r3, r7, #24
 80013e0:	3b18      	subs	r3, #24
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6353      	str	r3, [r2, #52]	; 0x34
 80013e6:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80013ea:	f107 0318 	add.w	r3, r7, #24
 80013ee:	3b18      	subs	r3, #24
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6393      	str	r3, [r2, #56]	; 0x38
 80013f4:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 80013f8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80013fc:	f102 0208 	add.w	r2, r2, #8
 8001400:	6812      	ldr	r2, [r2, #0]
 8001402:	63da      	str	r2, [r3, #60]	; 0x3c
 8001404:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 8001408:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800140c:	f102 0208 	add.w	r2, r2, #8
 8001410:	6812      	ldr	r2, [r2, #0]
 8001412:	641a      	str	r2, [r3, #64]	; 0x40
 8001414:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 8001418:	f107 0318 	add.w	r3, r7, #24
 800141c:	3b18      	subs	r3, #24
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	6453      	str	r3, [r2, #68]	; 0x44
 8001422:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 8001426:	f107 0318 	add.w	r3, r7, #24
 800142a:	3b18      	subs	r3, #24
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	6493      	str	r3, [r2, #72]	; 0x48
 8001430:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 8001434:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001438:	f102 0208 	add.w	r2, r2, #8
 800143c:	6812      	ldr	r2, [r2, #0]
 800143e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001440:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 8001444:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001448:	f102 0208 	add.w	r2, r2, #8
 800144c:	6812      	ldr	r2, [r2, #0]
 800144e:	651a      	str	r2, [r3, #80]	; 0x50
 8001450:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 8001454:	f107 0318 	add.w	r3, r7, #24
 8001458:	3b18      	subs	r3, #24
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6553      	str	r3, [r2, #84]	; 0x54
 800145e:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 8001462:	f107 0318 	add.w	r3, r7, #24
 8001466:	3b18      	subs	r3, #24
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	6593      	str	r3, [r2, #88]	; 0x58
 800146c:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 8001470:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001474:	f102 0208 	add.w	r2, r2, #8
 8001478:	6812      	ldr	r2, [r2, #0]
 800147a:	65da      	str	r2, [r3, #92]	; 0x5c
 800147c:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 8001480:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001484:	f102 0208 	add.w	r2, r2, #8
 8001488:	6812      	ldr	r2, [r2, #0]
 800148a:	661a      	str	r2, [r3, #96]	; 0x60
 800148c:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 8001490:	f107 0318 	add.w	r3, r7, #24
 8001494:	3b18      	subs	r3, #24
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6653      	str	r3, [r2, #100]	; 0x64
 800149a:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 800149e:	f107 0318 	add.w	r3, r7, #24
 80014a2:	3b18      	subs	r3, #24
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6693      	str	r3, [r2, #104]	; 0x68
 80014a8:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 80014ac:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80014b0:	f102 0208 	add.w	r2, r2, #8
 80014b4:	6812      	ldr	r2, [r2, #0]
 80014b6:	66da      	str	r2, [r3, #108]	; 0x6c
 80014b8:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 80014bc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80014c0:	f102 0208 	add.w	r2, r2, #8
 80014c4:	6812      	ldr	r2, [r2, #0]
 80014c6:	671a      	str	r2, [r3, #112]	; 0x70
 80014c8:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 80014cc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80014d0:	f102 0208 	add.w	r2, r2, #8
 80014d4:	6812      	ldr	r2, [r2, #0]
 80014d6:	675a      	str	r2, [r3, #116]	; 0x74
 80014d8:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 80014dc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80014e0:	f102 0208 	add.w	r2, r2, #8
 80014e4:	6812      	ldr	r2, [r2, #0]
 80014e6:	679a      	str	r2, [r3, #120]	; 0x78
 80014e8:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80014ec:	f107 0318 	add.w	r3, r7, #24
 80014f0:	3b18      	subs	r3, #24
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	67d3      	str	r3, [r2, #124]	; 0x7c
 80014f6:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80014fa:	f107 0318 	add.w	r3, r7, #24
 80014fe:	3b18      	subs	r3, #24
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001506:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 800150a:	f107 0318 	add.w	r3, r7, #24
 800150e:	3b18      	subs	r3, #24
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8001516:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 800151a:	f107 0318 	add.w	r3, r7, #24
 800151e:	3b18      	subs	r3, #24
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001526:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 800152a:	f107 0318 	add.w	r3, r7, #24
 800152e:	3b18      	subs	r3, #24
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001536:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 800153a:	f107 0318 	add.w	r3, r7, #24
 800153e:	3b18      	subs	r3, #24
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001546:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 800154a:	f107 0318 	add.w	r3, r7, #24
 800154e:	3b18      	subs	r3, #24
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001556:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 800155a:	f107 0318 	add.w	r3, r7, #24
 800155e:	3b18      	subs	r3, #24
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8001566:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 800156a:	f107 0318 	add.w	r3, r7, #24
 800156e:	3b18      	subs	r3, #24
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			  textcolor, backcolor, backcolor, textcolor,  //@..@
			  textcolor, textcolor, textcolor, backcolor,  //@@@.
			  backcolor, backcolor, backcolor, backcolor,  //....
			  backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_E[10][4] = {
 8001576:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 800157a:	f107 0318 	add.w	r3, r7, #24
 800157e:	3b18      	subs	r3, #24
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6013      	str	r3, [r2, #0]
 8001584:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001588:	f107 0318 	add.w	r3, r7, #24
 800158c:	3b18      	subs	r3, #24
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6053      	str	r3, [r2, #4]
 8001592:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001596:	f107 0318 	add.w	r3, r7, #24
 800159a:	3b18      	subs	r3, #24
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6093      	str	r3, [r2, #8]
 80015a0:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 80015a4:	f107 0318 	add.w	r3, r7, #24
 80015a8:	3b18      	subs	r3, #24
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	60d3      	str	r3, [r2, #12]
 80015ae:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 80015b2:	f107 0318 	add.w	r3, r7, #24
 80015b6:	3b18      	subs	r3, #24
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6113      	str	r3, [r2, #16]
 80015bc:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 80015c0:	f107 0318 	add.w	r3, r7, #24
 80015c4:	3b18      	subs	r3, #24
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6153      	str	r3, [r2, #20]
 80015ca:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 80015ce:	f107 0318 	add.w	r3, r7, #24
 80015d2:	3b18      	subs	r3, #24
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6193      	str	r3, [r2, #24]
 80015d8:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 80015dc:	f107 0318 	add.w	r3, r7, #24
 80015e0:	3b18      	subs	r3, #24
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	61d3      	str	r3, [r2, #28]
 80015e6:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 80015ea:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80015ee:	f102 0208 	add.w	r2, r2, #8
 80015f2:	6812      	ldr	r2, [r2, #0]
 80015f4:	621a      	str	r2, [r3, #32]
 80015f6:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 80015fa:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80015fe:	f102 0208 	add.w	r2, r2, #8
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	625a      	str	r2, [r3, #36]	; 0x24
 8001606:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 800160a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800160e:	f102 0208 	add.w	r2, r2, #8
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	629a      	str	r2, [r3, #40]	; 0x28
 8001616:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 800161a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800161e:	f102 0208 	add.w	r2, r2, #8
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	62da      	str	r2, [r3, #44]	; 0x2c
 8001626:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 800162a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800162e:	f102 0208 	add.w	r2, r2, #8
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	631a      	str	r2, [r3, #48]	; 0x30
 8001636:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 800163a:	f107 0318 	add.w	r3, r7, #24
 800163e:	3b18      	subs	r3, #24
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6353      	str	r3, [r2, #52]	; 0x34
 8001644:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001648:	f107 0318 	add.w	r3, r7, #24
 800164c:	3b18      	subs	r3, #24
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6393      	str	r3, [r2, #56]	; 0x38
 8001652:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001656:	f107 0318 	add.w	r3, r7, #24
 800165a:	3b18      	subs	r3, #24
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001660:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001664:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001668:	f102 0208 	add.w	r2, r2, #8
 800166c:	6812      	ldr	r2, [r2, #0]
 800166e:	641a      	str	r2, [r3, #64]	; 0x40
 8001670:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001674:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001678:	f102 0208 	add.w	r2, r2, #8
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	645a      	str	r2, [r3, #68]	; 0x44
 8001680:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001684:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001688:	f102 0208 	add.w	r2, r2, #8
 800168c:	6812      	ldr	r2, [r2, #0]
 800168e:	649a      	str	r2, [r3, #72]	; 0x48
 8001690:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001694:	f107 0318 	add.w	r3, r7, #24
 8001698:	3b18      	subs	r3, #24
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169e:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 80016a2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80016a6:	f102 0208 	add.w	r2, r2, #8
 80016aa:	6812      	ldr	r2, [r2, #0]
 80016ac:	651a      	str	r2, [r3, #80]	; 0x50
 80016ae:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 80016b2:	f107 0318 	add.w	r3, r7, #24
 80016b6:	3b18      	subs	r3, #24
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6553      	str	r3, [r2, #84]	; 0x54
 80016bc:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 80016c0:	f107 0318 	add.w	r3, r7, #24
 80016c4:	3b18      	subs	r3, #24
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6593      	str	r3, [r2, #88]	; 0x58
 80016ca:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 80016ce:	f107 0318 	add.w	r3, r7, #24
 80016d2:	3b18      	subs	r3, #24
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80016d8:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 80016dc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80016e0:	f102 0208 	add.w	r2, r2, #8
 80016e4:	6812      	ldr	r2, [r2, #0]
 80016e6:	661a      	str	r2, [r3, #96]	; 0x60
 80016e8:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 80016ec:	f107 0318 	add.w	r3, r7, #24
 80016f0:	3b18      	subs	r3, #24
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6653      	str	r3, [r2, #100]	; 0x64
 80016f6:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 80016fa:	f107 0318 	add.w	r3, r7, #24
 80016fe:	3b18      	subs	r3, #24
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6693      	str	r3, [r2, #104]	; 0x68
 8001704:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001708:	f107 0318 	add.w	r3, r7, #24
 800170c:	3b18      	subs	r3, #24
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	66d3      	str	r3, [r2, #108]	; 0x6c
 8001712:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001716:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800171a:	f102 0208 	add.w	r2, r2, #8
 800171e:	6812      	ldr	r2, [r2, #0]
 8001720:	671a      	str	r2, [r3, #112]	; 0x70
 8001722:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001726:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800172a:	f102 0208 	add.w	r2, r2, #8
 800172e:	6812      	ldr	r2, [r2, #0]
 8001730:	675a      	str	r2, [r3, #116]	; 0x74
 8001732:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001736:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800173a:	f102 0208 	add.w	r2, r2, #8
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	679a      	str	r2, [r3, #120]	; 0x78
 8001742:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001746:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800174a:	f102 0208 	add.w	r2, r2, #8
 800174e:	6812      	ldr	r2, [r2, #0]
 8001750:	67da      	str	r2, [r3, #124]	; 0x7c
 8001752:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001756:	f107 0318 	add.w	r3, r7, #24
 800175a:	3b18      	subs	r3, #24
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001762:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001766:	f107 0318 	add.w	r3, r7, #24
 800176a:	3b18      	subs	r3, #24
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8001772:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001776:	f107 0318 	add.w	r3, r7, #24
 800177a:	3b18      	subs	r3, #24
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001782:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001786:	f107 0318 	add.w	r3, r7, #24
 800178a:	3b18      	subs	r3, #24
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001792:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001796:	f107 0318 	add.w	r3, r7, #24
 800179a:	3b18      	subs	r3, #24
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017a2:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 80017a6:	f107 0318 	add.w	r3, r7, #24
 80017aa:	3b18      	subs	r3, #24
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80017b2:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 80017b6:	f107 0318 	add.w	r3, r7, #24
 80017ba:	3b18      	subs	r3, #24
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 80017c2:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 80017c6:	f107 0318 	add.w	r3, r7, #24
 80017ca:	3b18      	subs	r3, #24
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			  textcolor, backcolor, backcolor, backcolor,  //@...
			  textcolor, textcolor, textcolor, textcolor,  //@@@@
			  backcolor, backcolor, backcolor, backcolor,  //....
			  backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_F[10][4] = {
 80017d2:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 80017d6:	f107 0318 	add.w	r3, r7, #24
 80017da:	3b18      	subs	r3, #24
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 80017e4:	f107 0318 	add.w	r3, r7, #24
 80017e8:	3b18      	subs	r3, #24
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6053      	str	r3, [r2, #4]
 80017ee:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 80017f2:	f107 0318 	add.w	r3, r7, #24
 80017f6:	3b18      	subs	r3, #24
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6093      	str	r3, [r2, #8]
 80017fc:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001800:	f107 0318 	add.w	r3, r7, #24
 8001804:	3b18      	subs	r3, #24
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	60d3      	str	r3, [r2, #12]
 800180a:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 800180e:	f107 0318 	add.w	r3, r7, #24
 8001812:	3b18      	subs	r3, #24
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	6113      	str	r3, [r2, #16]
 8001818:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 800181c:	f107 0318 	add.w	r3, r7, #24
 8001820:	3b18      	subs	r3, #24
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6153      	str	r3, [r2, #20]
 8001826:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 800182a:	f107 0318 	add.w	r3, r7, #24
 800182e:	3b18      	subs	r3, #24
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	6193      	str	r3, [r2, #24]
 8001834:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001838:	f107 0318 	add.w	r3, r7, #24
 800183c:	3b18      	subs	r3, #24
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	61d3      	str	r3, [r2, #28]
 8001842:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001846:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800184a:	f102 0208 	add.w	r2, r2, #8
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	621a      	str	r2, [r3, #32]
 8001852:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001856:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800185a:	f102 0208 	add.w	r2, r2, #8
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	625a      	str	r2, [r3, #36]	; 0x24
 8001862:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001866:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800186a:	f102 0208 	add.w	r2, r2, #8
 800186e:	6812      	ldr	r2, [r2, #0]
 8001870:	629a      	str	r2, [r3, #40]	; 0x28
 8001872:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001876:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800187a:	f102 0208 	add.w	r2, r2, #8
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	62da      	str	r2, [r3, #44]	; 0x2c
 8001882:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001886:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800188a:	f102 0208 	add.w	r2, r2, #8
 800188e:	6812      	ldr	r2, [r2, #0]
 8001890:	631a      	str	r2, [r3, #48]	; 0x30
 8001892:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001896:	f107 0318 	add.w	r3, r7, #24
 800189a:	3b18      	subs	r3, #24
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6353      	str	r3, [r2, #52]	; 0x34
 80018a0:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 80018a4:	f107 0318 	add.w	r3, r7, #24
 80018a8:	3b18      	subs	r3, #24
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6393      	str	r3, [r2, #56]	; 0x38
 80018ae:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 80018b2:	f107 0318 	add.w	r3, r7, #24
 80018b6:	3b18      	subs	r3, #24
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	63d3      	str	r3, [r2, #60]	; 0x3c
 80018bc:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80018c0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80018c4:	f102 0208 	add.w	r2, r2, #8
 80018c8:	6812      	ldr	r2, [r2, #0]
 80018ca:	641a      	str	r2, [r3, #64]	; 0x40
 80018cc:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80018d0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80018d4:	f102 0208 	add.w	r2, r2, #8
 80018d8:	6812      	ldr	r2, [r2, #0]
 80018da:	645a      	str	r2, [r3, #68]	; 0x44
 80018dc:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80018e0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80018e4:	f102 0208 	add.w	r2, r2, #8
 80018e8:	6812      	ldr	r2, [r2, #0]
 80018ea:	649a      	str	r2, [r3, #72]	; 0x48
 80018ec:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 80018f0:	f107 0318 	add.w	r3, r7, #24
 80018f4:	3b18      	subs	r3, #24
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018fa:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80018fe:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001902:	f102 0208 	add.w	r2, r2, #8
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	651a      	str	r2, [r3, #80]	; 0x50
 800190a:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 800190e:	f107 0318 	add.w	r3, r7, #24
 8001912:	3b18      	subs	r3, #24
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6553      	str	r3, [r2, #84]	; 0x54
 8001918:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 800191c:	f107 0318 	add.w	r3, r7, #24
 8001920:	3b18      	subs	r3, #24
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6593      	str	r3, [r2, #88]	; 0x58
 8001926:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 800192a:	f107 0318 	add.w	r3, r7, #24
 800192e:	3b18      	subs	r3, #24
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001934:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001938:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800193c:	f102 0208 	add.w	r2, r2, #8
 8001940:	6812      	ldr	r2, [r2, #0]
 8001942:	661a      	str	r2, [r3, #96]	; 0x60
 8001944:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001948:	f107 0318 	add.w	r3, r7, #24
 800194c:	3b18      	subs	r3, #24
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6653      	str	r3, [r2, #100]	; 0x64
 8001952:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001956:	f107 0318 	add.w	r3, r7, #24
 800195a:	3b18      	subs	r3, #24
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6693      	str	r3, [r2, #104]	; 0x68
 8001960:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001964:	f107 0318 	add.w	r3, r7, #24
 8001968:	3b18      	subs	r3, #24
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	66d3      	str	r3, [r2, #108]	; 0x6c
 800196e:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001972:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001976:	f102 0208 	add.w	r2, r2, #8
 800197a:	6812      	ldr	r2, [r2, #0]
 800197c:	671a      	str	r2, [r3, #112]	; 0x70
 800197e:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001982:	f107 0318 	add.w	r3, r7, #24
 8001986:	3b18      	subs	r3, #24
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6753      	str	r3, [r2, #116]	; 0x74
 800198c:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001990:	f107 0318 	add.w	r3, r7, #24
 8001994:	3b18      	subs	r3, #24
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6793      	str	r3, [r2, #120]	; 0x78
 800199a:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 800199e:	f107 0318 	add.w	r3, r7, #24
 80019a2:	3b18      	subs	r3, #24
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	67d3      	str	r3, [r2, #124]	; 0x7c
 80019a8:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 80019ac:	f107 0318 	add.w	r3, r7, #24
 80019b0:	3b18      	subs	r3, #24
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80019b8:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 80019bc:	f107 0318 	add.w	r3, r7, #24
 80019c0:	3b18      	subs	r3, #24
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80019c8:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 80019cc:	f107 0318 	add.w	r3, r7, #24
 80019d0:	3b18      	subs	r3, #24
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80019d8:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 80019dc:	f107 0318 	add.w	r3, r7, #24
 80019e0:	3b18      	subs	r3, #24
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80019e8:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 80019ec:	f107 0318 	add.w	r3, r7, #24
 80019f0:	3b18      	subs	r3, #24
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019f8:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 80019fc:	f107 0318 	add.w	r3, r7, #24
 8001a00:	3b18      	subs	r3, #24
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001a08:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001a0c:	f107 0318 	add.w	r3, r7, #24
 8001a10:	3b18      	subs	r3, #24
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8001a18:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001a1c:	f107 0318 	add.w	r3, r7, #24
 8001a20:	3b18      	subs	r3, #24
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			  textcolor, backcolor, backcolor, backcolor,  //@...
			  textcolor, backcolor, backcolor, backcolor,  //@...
			  backcolor, backcolor, backcolor, backcolor,  //....
			  backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_G[10][4] = {
 8001a28:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001a2c:	f107 0318 	add.w	r3, r7, #24
 8001a30:	3b18      	subs	r3, #24
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001a3a:	f107 0318 	add.w	r3, r7, #24
 8001a3e:	3b18      	subs	r3, #24
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6053      	str	r3, [r2, #4]
 8001a44:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001a48:	f107 0318 	add.w	r3, r7, #24
 8001a4c:	3b18      	subs	r3, #24
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6093      	str	r3, [r2, #8]
 8001a52:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001a56:	f107 0318 	add.w	r3, r7, #24
 8001a5a:	3b18      	subs	r3, #24
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	60d3      	str	r3, [r2, #12]
 8001a60:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001a64:	f107 0318 	add.w	r3, r7, #24
 8001a68:	3b18      	subs	r3, #24
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	6113      	str	r3, [r2, #16]
 8001a6e:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001a72:	f107 0318 	add.w	r3, r7, #24
 8001a76:	3b18      	subs	r3, #24
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6153      	str	r3, [r2, #20]
 8001a7c:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001a80:	f107 0318 	add.w	r3, r7, #24
 8001a84:	3b18      	subs	r3, #24
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	6193      	str	r3, [r2, #24]
 8001a8a:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001a8e:	f107 0318 	add.w	r3, r7, #24
 8001a92:	3b18      	subs	r3, #24
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	61d3      	str	r3, [r2, #28]
 8001a98:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001a9c:	f107 0318 	add.w	r3, r7, #24
 8001aa0:	3b18      	subs	r3, #24
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6213      	str	r3, [r2, #32]
 8001aa6:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001aaa:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001aae:	f102 0208 	add.w	r2, r2, #8
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	625a      	str	r2, [r3, #36]	; 0x24
 8001ab6:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001aba:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001abe:	f102 0208 	add.w	r2, r2, #8
 8001ac2:	6812      	ldr	r2, [r2, #0]
 8001ac4:	629a      	str	r2, [r3, #40]	; 0x28
 8001ac6:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001aca:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001ace:	f102 0208 	add.w	r2, r2, #8
 8001ad2:	6812      	ldr	r2, [r2, #0]
 8001ad4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ad6:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001ada:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001ade:	f102 0208 	add.w	r2, r2, #8
 8001ae2:	6812      	ldr	r2, [r2, #0]
 8001ae4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ae6:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001aea:	f107 0318 	add.w	r3, r7, #24
 8001aee:	3b18      	subs	r3, #24
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6353      	str	r3, [r2, #52]	; 0x34
 8001af4:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001af8:	f107 0318 	add.w	r3, r7, #24
 8001afc:	3b18      	subs	r3, #24
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6393      	str	r3, [r2, #56]	; 0x38
 8001b02:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001b06:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001b0a:	f102 0208 	add.w	r2, r2, #8
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b12:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001b16:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001b1a:	f102 0208 	add.w	r2, r2, #8
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	641a      	str	r2, [r3, #64]	; 0x40
 8001b22:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001b26:	f107 0318 	add.w	r3, r7, #24
 8001b2a:	3b18      	subs	r3, #24
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	6453      	str	r3, [r2, #68]	; 0x44
 8001b30:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001b34:	f107 0318 	add.w	r3, r7, #24
 8001b38:	3b18      	subs	r3, #24
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6493      	str	r3, [r2, #72]	; 0x48
 8001b3e:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001b42:	f107 0318 	add.w	r3, r7, #24
 8001b46:	3b18      	subs	r3, #24
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b4c:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001b50:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001b54:	f102 0208 	add.w	r2, r2, #8
 8001b58:	6812      	ldr	r2, [r2, #0]
 8001b5a:	651a      	str	r2, [r3, #80]	; 0x50
 8001b5c:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001b60:	f107 0318 	add.w	r3, r7, #24
 8001b64:	3b18      	subs	r3, #24
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6553      	str	r3, [r2, #84]	; 0x54
 8001b6a:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001b6e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001b72:	f102 0208 	add.w	r2, r2, #8
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	659a      	str	r2, [r3, #88]	; 0x58
 8001b7a:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001b7e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001b82:	f102 0208 	add.w	r2, r2, #8
 8001b86:	6812      	ldr	r2, [r2, #0]
 8001b88:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b8a:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001b8e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001b92:	f102 0208 	add.w	r2, r2, #8
 8001b96:	6812      	ldr	r2, [r2, #0]
 8001b98:	661a      	str	r2, [r3, #96]	; 0x60
 8001b9a:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001b9e:	f107 0318 	add.w	r3, r7, #24
 8001ba2:	3b18      	subs	r3, #24
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6653      	str	r3, [r2, #100]	; 0x64
 8001ba8:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001bac:	f107 0318 	add.w	r3, r7, #24
 8001bb0:	3b18      	subs	r3, #24
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	6693      	str	r3, [r2, #104]	; 0x68
 8001bb6:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001bba:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001bbe:	f102 0208 	add.w	r2, r2, #8
 8001bc2:	6812      	ldr	r2, [r2, #0]
 8001bc4:	66da      	str	r2, [r3, #108]	; 0x6c
 8001bc6:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001bca:	f107 0318 	add.w	r3, r7, #24
 8001bce:	3b18      	subs	r3, #24
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd4:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001bd8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001bdc:	f102 0208 	add.w	r2, r2, #8
 8001be0:	6812      	ldr	r2, [r2, #0]
 8001be2:	675a      	str	r2, [r3, #116]	; 0x74
 8001be4:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001be8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001bec:	f102 0208 	add.w	r2, r2, #8
 8001bf0:	6812      	ldr	r2, [r2, #0]
 8001bf2:	679a      	str	r2, [r3, #120]	; 0x78
 8001bf4:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001bf8:	f107 0318 	add.w	r3, r7, #24
 8001bfc:	3b18      	subs	r3, #24
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	67d3      	str	r3, [r2, #124]	; 0x7c
 8001c02:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001c06:	f107 0318 	add.w	r3, r7, #24
 8001c0a:	3b18      	subs	r3, #24
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001c12:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001c16:	f107 0318 	add.w	r3, r7, #24
 8001c1a:	3b18      	subs	r3, #24
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8001c22:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001c26:	f107 0318 	add.w	r3, r7, #24
 8001c2a:	3b18      	subs	r3, #24
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001c32:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001c36:	f107 0318 	add.w	r3, r7, #24
 8001c3a:	3b18      	subs	r3, #24
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c42:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001c46:	f107 0318 	add.w	r3, r7, #24
 8001c4a:	3b18      	subs	r3, #24
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c52:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001c56:	f107 0318 	add.w	r3, r7, #24
 8001c5a:	3b18      	subs	r3, #24
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001c62:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001c66:	f107 0318 	add.w	r3, r7, #24
 8001c6a:	3b18      	subs	r3, #24
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8001c72:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001c76:	f107 0318 	add.w	r3, r7, #24
 8001c7a:	3b18      	subs	r3, #24
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			  textcolor, backcolor, backcolor, textcolor,  //@..@
			  backcolor, textcolor, textcolor, backcolor,  //.@@.
			  backcolor, backcolor, backcolor, backcolor,  //....
			  backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_H[10][4] = {
 8001c82:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8001c86:	f107 0318 	add.w	r3, r7, #24
 8001c8a:	3b18      	subs	r3, #24
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8001c94:	f107 0318 	add.w	r3, r7, #24
 8001c98:	3b18      	subs	r3, #24
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	6053      	str	r3, [r2, #4]
 8001c9e:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8001ca2:	f107 0318 	add.w	r3, r7, #24
 8001ca6:	3b18      	subs	r3, #24
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	6093      	str	r3, [r2, #8]
 8001cac:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8001cb0:	f107 0318 	add.w	r3, r7, #24
 8001cb4:	3b18      	subs	r3, #24
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60d3      	str	r3, [r2, #12]
 8001cba:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8001cbe:	f107 0318 	add.w	r3, r7, #24
 8001cc2:	3b18      	subs	r3, #24
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6113      	str	r3, [r2, #16]
 8001cc8:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8001ccc:	f107 0318 	add.w	r3, r7, #24
 8001cd0:	3b18      	subs	r3, #24
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	6153      	str	r3, [r2, #20]
 8001cd6:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8001cda:	f107 0318 	add.w	r3, r7, #24
 8001cde:	3b18      	subs	r3, #24
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6193      	str	r3, [r2, #24]
 8001ce4:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8001ce8:	f107 0318 	add.w	r3, r7, #24
 8001cec:	3b18      	subs	r3, #24
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	61d3      	str	r3, [r2, #28]
 8001cf2:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8001cf6:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001cfa:	f102 0208 	add.w	r2, r2, #8
 8001cfe:	6812      	ldr	r2, [r2, #0]
 8001d00:	621a      	str	r2, [r3, #32]
 8001d02:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8001d06:	f107 0318 	add.w	r3, r7, #24
 8001d0a:	3b18      	subs	r3, #24
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6253      	str	r3, [r2, #36]	; 0x24
 8001d10:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8001d14:	f107 0318 	add.w	r3, r7, #24
 8001d18:	3b18      	subs	r3, #24
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	6293      	str	r3, [r2, #40]	; 0x28
 8001d1e:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8001d22:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001d26:	f102 0208 	add.w	r2, r2, #8
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d2e:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8001d32:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001d36:	f102 0208 	add.w	r2, r2, #8
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	631a      	str	r2, [r3, #48]	; 0x30
 8001d3e:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8001d42:	f107 0318 	add.w	r3, r7, #24
 8001d46:	3b18      	subs	r3, #24
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6353      	str	r3, [r2, #52]	; 0x34
 8001d4c:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8001d50:	f107 0318 	add.w	r3, r7, #24
 8001d54:	3b18      	subs	r3, #24
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6393      	str	r3, [r2, #56]	; 0x38
 8001d5a:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8001d5e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001d62:	f102 0208 	add.w	r2, r2, #8
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	63da      	str	r2, [r3, #60]	; 0x3c
 8001d6a:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8001d6e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001d72:	f102 0208 	add.w	r2, r2, #8
 8001d76:	6812      	ldr	r2, [r2, #0]
 8001d78:	641a      	str	r2, [r3, #64]	; 0x40
 8001d7a:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8001d7e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001d82:	f102 0208 	add.w	r2, r2, #8
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	645a      	str	r2, [r3, #68]	; 0x44
 8001d8a:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8001d8e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001d92:	f102 0208 	add.w	r2, r2, #8
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	649a      	str	r2, [r3, #72]	; 0x48
 8001d9a:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8001d9e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001da2:	f102 0208 	add.w	r2, r2, #8
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	64da      	str	r2, [r3, #76]	; 0x4c
 8001daa:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8001dae:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001db2:	f102 0208 	add.w	r2, r2, #8
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	651a      	str	r2, [r3, #80]	; 0x50
 8001dba:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8001dbe:	f107 0318 	add.w	r3, r7, #24
 8001dc2:	3b18      	subs	r3, #24
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6553      	str	r3, [r2, #84]	; 0x54
 8001dc8:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8001dcc:	f107 0318 	add.w	r3, r7, #24
 8001dd0:	3b18      	subs	r3, #24
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6593      	str	r3, [r2, #88]	; 0x58
 8001dd6:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8001dda:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001dde:	f102 0208 	add.w	r2, r2, #8
 8001de2:	6812      	ldr	r2, [r2, #0]
 8001de4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001de6:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8001dea:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001dee:	f102 0208 	add.w	r2, r2, #8
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	661a      	str	r2, [r3, #96]	; 0x60
 8001df6:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8001dfa:	f107 0318 	add.w	r3, r7, #24
 8001dfe:	3b18      	subs	r3, #24
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6653      	str	r3, [r2, #100]	; 0x64
 8001e04:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8001e08:	f107 0318 	add.w	r3, r7, #24
 8001e0c:	3b18      	subs	r3, #24
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6693      	str	r3, [r2, #104]	; 0x68
 8001e12:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8001e16:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001e1a:	f102 0208 	add.w	r2, r2, #8
 8001e1e:	6812      	ldr	r2, [r2, #0]
 8001e20:	66da      	str	r2, [r3, #108]	; 0x6c
 8001e22:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8001e26:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001e2a:	f102 0208 	add.w	r2, r2, #8
 8001e2e:	6812      	ldr	r2, [r2, #0]
 8001e30:	671a      	str	r2, [r3, #112]	; 0x70
 8001e32:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8001e36:	f107 0318 	add.w	r3, r7, #24
 8001e3a:	3b18      	subs	r3, #24
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6753      	str	r3, [r2, #116]	; 0x74
 8001e40:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8001e44:	f107 0318 	add.w	r3, r7, #24
 8001e48:	3b18      	subs	r3, #24
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	6793      	str	r3, [r2, #120]	; 0x78
 8001e4e:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8001e52:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001e56:	f102 0208 	add.w	r2, r2, #8
 8001e5a:	6812      	ldr	r2, [r2, #0]
 8001e5c:	67da      	str	r2, [r3, #124]	; 0x7c
 8001e5e:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8001e62:	f107 0318 	add.w	r3, r7, #24
 8001e66:	3b18      	subs	r3, #24
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e6e:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8001e72:	f107 0318 	add.w	r3, r7, #24
 8001e76:	3b18      	subs	r3, #24
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8001e7e:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8001e82:	f107 0318 	add.w	r3, r7, #24
 8001e86:	3b18      	subs	r3, #24
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001e8e:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8001e92:	f107 0318 	add.w	r3, r7, #24
 8001e96:	3b18      	subs	r3, #24
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e9e:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8001ea2:	f107 0318 	add.w	r3, r7, #24
 8001ea6:	3b18      	subs	r3, #24
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eae:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8001eb2:	f107 0318 	add.w	r3, r7, #24
 8001eb6:	3b18      	subs	r3, #24
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001ebe:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8001ec2:	f107 0318 	add.w	r3, r7, #24
 8001ec6:	3b18      	subs	r3, #24
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8001ece:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8001ed2:	f107 0318 	add.w	r3, r7, #24
 8001ed6:	3b18      	subs	r3, #24
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			  textcolor, backcolor, backcolor, textcolor,  //@..@
			  textcolor, backcolor, backcolor, textcolor,  //@..@
			  backcolor, backcolor, backcolor, backcolor,  //....
			  backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_I[10][3] = {
 8001ede:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8001ee2:	f107 0318 	add.w	r3, r7, #24
 8001ee6:	3b18      	subs	r3, #24
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6013      	str	r3, [r2, #0]
 8001eec:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8001ef0:	f107 0318 	add.w	r3, r7, #24
 8001ef4:	3b18      	subs	r3, #24
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6053      	str	r3, [r2, #4]
 8001efa:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8001efe:	f107 0318 	add.w	r3, r7, #24
 8001f02:	3b18      	subs	r3, #24
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6093      	str	r3, [r2, #8]
 8001f08:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8001f0c:	f107 0318 	add.w	r3, r7, #24
 8001f10:	3b18      	subs	r3, #24
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	60d3      	str	r3, [r2, #12]
 8001f16:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8001f1a:	f107 0318 	add.w	r3, r7, #24
 8001f1e:	3b18      	subs	r3, #24
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6113      	str	r3, [r2, #16]
 8001f24:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8001f28:	f107 0318 	add.w	r3, r7, #24
 8001f2c:	3b18      	subs	r3, #24
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6153      	str	r3, [r2, #20]
 8001f32:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8001f36:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001f3a:	f102 0208 	add.w	r2, r2, #8
 8001f3e:	6812      	ldr	r2, [r2, #0]
 8001f40:	619a      	str	r2, [r3, #24]
 8001f42:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8001f46:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001f4a:	f102 0208 	add.w	r2, r2, #8
 8001f4e:	6812      	ldr	r2, [r2, #0]
 8001f50:	61da      	str	r2, [r3, #28]
 8001f52:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8001f56:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001f5a:	f102 0208 	add.w	r2, r2, #8
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	621a      	str	r2, [r3, #32]
 8001f62:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8001f66:	f107 0318 	add.w	r3, r7, #24
 8001f6a:	3b18      	subs	r3, #24
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6253      	str	r3, [r2, #36]	; 0x24
 8001f70:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8001f74:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001f78:	f102 0208 	add.w	r2, r2, #8
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	629a      	str	r2, [r3, #40]	; 0x28
 8001f80:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8001f84:	f107 0318 	add.w	r3, r7, #24
 8001f88:	3b18      	subs	r3, #24
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001f8e:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8001f92:	f107 0318 	add.w	r3, r7, #24
 8001f96:	3b18      	subs	r3, #24
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9c:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8001fa0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001fa4:	f102 0208 	add.w	r2, r2, #8
 8001fa8:	6812      	ldr	r2, [r2, #0]
 8001faa:	635a      	str	r2, [r3, #52]	; 0x34
 8001fac:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8001fb0:	f107 0318 	add.w	r3, r7, #24
 8001fb4:	3b18      	subs	r3, #24
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6393      	str	r3, [r2, #56]	; 0x38
 8001fba:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8001fbe:	f107 0318 	add.w	r3, r7, #24
 8001fc2:	3b18      	subs	r3, #24
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001fc8:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8001fcc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001fd0:	f102 0208 	add.w	r2, r2, #8
 8001fd4:	6812      	ldr	r2, [r2, #0]
 8001fd6:	641a      	str	r2, [r3, #64]	; 0x40
 8001fd8:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8001fdc:	f107 0318 	add.w	r3, r7, #24
 8001fe0:	3b18      	subs	r3, #24
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6453      	str	r3, [r2, #68]	; 0x44
 8001fe6:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8001fea:	f107 0318 	add.w	r3, r7, #24
 8001fee:	3b18      	subs	r3, #24
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6493      	str	r3, [r2, #72]	; 0x48
 8001ff4:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8001ff8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001ffc:	f102 0208 	add.w	r2, r2, #8
 8002000:	6812      	ldr	r2, [r2, #0]
 8002002:	64da      	str	r2, [r3, #76]	; 0x4c
 8002004:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8002008:	f107 0318 	add.w	r3, r7, #24
 800200c:	3b18      	subs	r3, #24
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6513      	str	r3, [r2, #80]	; 0x50
 8002012:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8002016:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800201a:	f102 0208 	add.w	r2, r2, #8
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	655a      	str	r2, [r3, #84]	; 0x54
 8002022:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8002026:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800202a:	f102 0208 	add.w	r2, r2, #8
 800202e:	6812      	ldr	r2, [r2, #0]
 8002030:	659a      	str	r2, [r3, #88]	; 0x58
 8002032:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8002036:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800203a:	f102 0208 	add.w	r2, r2, #8
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	65da      	str	r2, [r3, #92]	; 0x5c
 8002042:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8002046:	f107 0318 	add.w	r3, r7, #24
 800204a:	3b18      	subs	r3, #24
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6613      	str	r3, [r2, #96]	; 0x60
 8002050:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8002054:	f107 0318 	add.w	r3, r7, #24
 8002058:	3b18      	subs	r3, #24
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6653      	str	r3, [r2, #100]	; 0x64
 800205e:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8002062:	f107 0318 	add.w	r3, r7, #24
 8002066:	3b18      	subs	r3, #24
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6693      	str	r3, [r2, #104]	; 0x68
 800206c:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8002070:	f107 0318 	add.w	r3, r7, #24
 8002074:	3b18      	subs	r3, #24
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	66d3      	str	r3, [r2, #108]	; 0x6c
 800207a:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 800207e:	f107 0318 	add.w	r3, r7, #24
 8002082:	3b18      	subs	r3, #24
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6713      	str	r3, [r2, #112]	; 0x70
 8002088:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 800208c:	f107 0318 	add.w	r3, r7, #24
 8002090:	3b18      	subs	r3, #24
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6753      	str	r3, [r2, #116]	; 0x74
			  backcolor, textcolor, backcolor,  //.@.
			  textcolor, textcolor, textcolor,  //@@@
			  backcolor, backcolor, backcolor,  //...
			  backcolor, backcolor, backcolor,  //...
	};
	int letter_J[10][4] = {
 8002096:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800209a:	f107 0318 	add.w	r3, r7, #24
 800209e:	3b18      	subs	r3, #24
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6013      	str	r3, [r2, #0]
 80020a4:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80020a8:	f107 0318 	add.w	r3, r7, #24
 80020ac:	3b18      	subs	r3, #24
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6053      	str	r3, [r2, #4]
 80020b2:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80020b6:	f107 0318 	add.w	r3, r7, #24
 80020ba:	3b18      	subs	r3, #24
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6093      	str	r3, [r2, #8]
 80020c0:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80020c4:	f107 0318 	add.w	r3, r7, #24
 80020c8:	3b18      	subs	r3, #24
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	60d3      	str	r3, [r2, #12]
 80020ce:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80020d2:	f107 0318 	add.w	r3, r7, #24
 80020d6:	3b18      	subs	r3, #24
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6113      	str	r3, [r2, #16]
 80020dc:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80020e0:	f107 0318 	add.w	r3, r7, #24
 80020e4:	3b18      	subs	r3, #24
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6153      	str	r3, [r2, #20]
 80020ea:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80020ee:	f107 0318 	add.w	r3, r7, #24
 80020f2:	3b18      	subs	r3, #24
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6193      	str	r3, [r2, #24]
 80020f8:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80020fc:	f107 0318 	add.w	r3, r7, #24
 8002100:	3b18      	subs	r3, #24
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	61d3      	str	r3, [r2, #28]
 8002106:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800210a:	f107 0318 	add.w	r3, r7, #24
 800210e:	3b18      	subs	r3, #24
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6213      	str	r3, [r2, #32]
 8002114:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002118:	f107 0318 	add.w	r3, r7, #24
 800211c:	3b18      	subs	r3, #24
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6253      	str	r3, [r2, #36]	; 0x24
 8002122:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002126:	f107 0318 	add.w	r3, r7, #24
 800212a:	3b18      	subs	r3, #24
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6293      	str	r3, [r2, #40]	; 0x28
 8002130:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8002134:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002138:	f102 0208 	add.w	r2, r2, #8
 800213c:	6812      	ldr	r2, [r2, #0]
 800213e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002140:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002144:	f107 0318 	add.w	r3, r7, #24
 8002148:	3b18      	subs	r3, #24
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6313      	str	r3, [r2, #48]	; 0x30
 800214e:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002152:	f107 0318 	add.w	r3, r7, #24
 8002156:	3b18      	subs	r3, #24
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6353      	str	r3, [r2, #52]	; 0x34
 800215c:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002160:	f107 0318 	add.w	r3, r7, #24
 8002164:	3b18      	subs	r3, #24
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6393      	str	r3, [r2, #56]	; 0x38
 800216a:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 800216e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002172:	f102 0208 	add.w	r2, r2, #8
 8002176:	6812      	ldr	r2, [r2, #0]
 8002178:	63da      	str	r2, [r3, #60]	; 0x3c
 800217a:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800217e:	f107 0318 	add.w	r3, r7, #24
 8002182:	3b18      	subs	r3, #24
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6413      	str	r3, [r2, #64]	; 0x40
 8002188:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800218c:	f107 0318 	add.w	r3, r7, #24
 8002190:	3b18      	subs	r3, #24
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6453      	str	r3, [r2, #68]	; 0x44
 8002196:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800219a:	f107 0318 	add.w	r3, r7, #24
 800219e:	3b18      	subs	r3, #24
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6493      	str	r3, [r2, #72]	; 0x48
 80021a4:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 80021a8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80021ac:	f102 0208 	add.w	r2, r2, #8
 80021b0:	6812      	ldr	r2, [r2, #0]
 80021b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80021b4:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80021b8:	f107 0318 	add.w	r3, r7, #24
 80021bc:	3b18      	subs	r3, #24
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6513      	str	r3, [r2, #80]	; 0x50
 80021c2:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80021c6:	f107 0318 	add.w	r3, r7, #24
 80021ca:	3b18      	subs	r3, #24
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	6553      	str	r3, [r2, #84]	; 0x54
 80021d0:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80021d4:	f107 0318 	add.w	r3, r7, #24
 80021d8:	3b18      	subs	r3, #24
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6593      	str	r3, [r2, #88]	; 0x58
 80021de:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 80021e2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80021e6:	f102 0208 	add.w	r2, r2, #8
 80021ea:	6812      	ldr	r2, [r2, #0]
 80021ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80021ee:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 80021f2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80021f6:	f102 0208 	add.w	r2, r2, #8
 80021fa:	6812      	ldr	r2, [r2, #0]
 80021fc:	661a      	str	r2, [r3, #96]	; 0x60
 80021fe:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002202:	f107 0318 	add.w	r3, r7, #24
 8002206:	3b18      	subs	r3, #24
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	6653      	str	r3, [r2, #100]	; 0x64
 800220c:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002210:	f107 0318 	add.w	r3, r7, #24
 8002214:	3b18      	subs	r3, #24
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6693      	str	r3, [r2, #104]	; 0x68
 800221a:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 800221e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002222:	f102 0208 	add.w	r2, r2, #8
 8002226:	6812      	ldr	r2, [r2, #0]
 8002228:	66da      	str	r2, [r3, #108]	; 0x6c
 800222a:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800222e:	f107 0318 	add.w	r3, r7, #24
 8002232:	3b18      	subs	r3, #24
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6713      	str	r3, [r2, #112]	; 0x70
 8002238:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 800223c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002240:	f102 0208 	add.w	r2, r2, #8
 8002244:	6812      	ldr	r2, [r2, #0]
 8002246:	675a      	str	r2, [r3, #116]	; 0x74
 8002248:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 800224c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002250:	f102 0208 	add.w	r2, r2, #8
 8002254:	6812      	ldr	r2, [r2, #0]
 8002256:	679a      	str	r2, [r3, #120]	; 0x78
 8002258:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800225c:	f107 0318 	add.w	r3, r7, #24
 8002260:	3b18      	subs	r3, #24
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	67d3      	str	r3, [r2, #124]	; 0x7c
 8002266:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800226a:	f107 0318 	add.w	r3, r7, #24
 800226e:	3b18      	subs	r3, #24
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002276:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800227a:	f107 0318 	add.w	r3, r7, #24
 800227e:	3b18      	subs	r3, #24
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8002286:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800228a:	f107 0318 	add.w	r3, r7, #24
 800228e:	3b18      	subs	r3, #24
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002296:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800229a:	f107 0318 	add.w	r3, r7, #24
 800229e:	3b18      	subs	r3, #24
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80022a6:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80022aa:	f107 0318 	add.w	r3, r7, #24
 80022ae:	3b18      	subs	r3, #24
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80022b6:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80022ba:	f107 0318 	add.w	r3, r7, #24
 80022be:	3b18      	subs	r3, #24
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80022c6:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80022ca:	f107 0318 	add.w	r3, r7, #24
 80022ce:	3b18      	subs	r3, #24
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 80022d6:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80022da:	f107 0318 	add.w	r3, r7, #24
 80022de:	3b18      	subs	r3, #24
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			  textcolor, backcolor, backcolor, textcolor,  //@..@
			  backcolor, textcolor, textcolor, backcolor,  //.@@.
			  backcolor, backcolor, backcolor, backcolor,  //....
			  backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_K[10][4] = {
 80022e6:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80022ea:	f107 0318 	add.w	r3, r7, #24
 80022ee:	3b18      	subs	r3, #24
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80022f8:	f107 0318 	add.w	r3, r7, #24
 80022fc:	3b18      	subs	r3, #24
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6053      	str	r3, [r2, #4]
 8002302:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002306:	f107 0318 	add.w	r3, r7, #24
 800230a:	3b18      	subs	r3, #24
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6093      	str	r3, [r2, #8]
 8002310:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002314:	f107 0318 	add.w	r3, r7, #24
 8002318:	3b18      	subs	r3, #24
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60d3      	str	r3, [r2, #12]
 800231e:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002322:	f107 0318 	add.w	r3, r7, #24
 8002326:	3b18      	subs	r3, #24
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6113      	str	r3, [r2, #16]
 800232c:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002330:	f107 0318 	add.w	r3, r7, #24
 8002334:	3b18      	subs	r3, #24
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6153      	str	r3, [r2, #20]
 800233a:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 800233e:	f107 0318 	add.w	r3, r7, #24
 8002342:	3b18      	subs	r3, #24
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6193      	str	r3, [r2, #24]
 8002348:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 800234c:	f107 0318 	add.w	r3, r7, #24
 8002350:	3b18      	subs	r3, #24
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	61d3      	str	r3, [r2, #28]
 8002356:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800235a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800235e:	f102 0208 	add.w	r2, r2, #8
 8002362:	6812      	ldr	r2, [r2, #0]
 8002364:	621a      	str	r2, [r3, #32]
 8002366:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 800236a:	f107 0318 	add.w	r3, r7, #24
 800236e:	3b18      	subs	r3, #24
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6253      	str	r3, [r2, #36]	; 0x24
 8002374:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002378:	f107 0318 	add.w	r3, r7, #24
 800237c:	3b18      	subs	r3, #24
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6293      	str	r3, [r2, #40]	; 0x28
 8002382:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002386:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800238a:	f102 0208 	add.w	r2, r2, #8
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	62da      	str	r2, [r3, #44]	; 0x2c
 8002392:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002396:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800239a:	f102 0208 	add.w	r2, r2, #8
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	631a      	str	r2, [r3, #48]	; 0x30
 80023a2:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80023a6:	f107 0318 	add.w	r3, r7, #24
 80023aa:	3b18      	subs	r3, #24
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	6353      	str	r3, [r2, #52]	; 0x34
 80023b0:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80023b4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80023b8:	f102 0208 	add.w	r2, r2, #8
 80023bc:	6812      	ldr	r2, [r2, #0]
 80023be:	639a      	str	r2, [r3, #56]	; 0x38
 80023c0:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80023c4:	f107 0318 	add.w	r3, r7, #24
 80023c8:	3b18      	subs	r3, #24
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	63d3      	str	r3, [r2, #60]	; 0x3c
 80023ce:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80023d2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80023d6:	f102 0208 	add.w	r2, r2, #8
 80023da:	6812      	ldr	r2, [r2, #0]
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
 80023de:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80023e2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80023e6:	f102 0208 	add.w	r2, r2, #8
 80023ea:	6812      	ldr	r2, [r2, #0]
 80023ec:	645a      	str	r2, [r3, #68]	; 0x44
 80023ee:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80023f2:	f107 0318 	add.w	r3, r7, #24
 80023f6:	3b18      	subs	r3, #24
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6493      	str	r3, [r2, #72]	; 0x48
 80023fc:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002400:	f107 0318 	add.w	r3, r7, #24
 8002404:	3b18      	subs	r3, #24
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800240a:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800240e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002412:	f102 0208 	add.w	r2, r2, #8
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	651a      	str	r2, [r3, #80]	; 0x50
 800241a:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 800241e:	f107 0318 	add.w	r3, r7, #24
 8002422:	3b18      	subs	r3, #24
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6553      	str	r3, [r2, #84]	; 0x54
 8002428:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800242c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002430:	f102 0208 	add.w	r2, r2, #8
 8002434:	6812      	ldr	r2, [r2, #0]
 8002436:	659a      	str	r2, [r3, #88]	; 0x58
 8002438:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 800243c:	f107 0318 	add.w	r3, r7, #24
 8002440:	3b18      	subs	r3, #24
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002446:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800244a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800244e:	f102 0208 	add.w	r2, r2, #8
 8002452:	6812      	ldr	r2, [r2, #0]
 8002454:	661a      	str	r2, [r3, #96]	; 0x60
 8002456:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 800245a:	f107 0318 	add.w	r3, r7, #24
 800245e:	3b18      	subs	r3, #24
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6653      	str	r3, [r2, #100]	; 0x64
 8002464:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002468:	f107 0318 	add.w	r3, r7, #24
 800246c:	3b18      	subs	r3, #24
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6693      	str	r3, [r2, #104]	; 0x68
 8002472:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002476:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800247a:	f102 0208 	add.w	r2, r2, #8
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	66da      	str	r2, [r3, #108]	; 0x6c
 8002482:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002486:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800248a:	f102 0208 	add.w	r2, r2, #8
 800248e:	6812      	ldr	r2, [r2, #0]
 8002490:	671a      	str	r2, [r3, #112]	; 0x70
 8002492:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002496:	f107 0318 	add.w	r3, r7, #24
 800249a:	3b18      	subs	r3, #24
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6753      	str	r3, [r2, #116]	; 0x74
 80024a0:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80024a4:	f107 0318 	add.w	r3, r7, #24
 80024a8:	3b18      	subs	r3, #24
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6793      	str	r3, [r2, #120]	; 0x78
 80024ae:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80024b2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80024b6:	f102 0208 	add.w	r2, r2, #8
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	67da      	str	r2, [r3, #124]	; 0x7c
 80024be:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80024c2:	f107 0318 	add.w	r3, r7, #24
 80024c6:	3b18      	subs	r3, #24
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80024ce:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80024d2:	f107 0318 	add.w	r3, r7, #24
 80024d6:	3b18      	subs	r3, #24
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80024de:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80024e2:	f107 0318 	add.w	r3, r7, #24
 80024e6:	3b18      	subs	r3, #24
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80024ee:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80024f2:	f107 0318 	add.w	r3, r7, #24
 80024f6:	3b18      	subs	r3, #24
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80024fe:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002502:	f107 0318 	add.w	r3, r7, #24
 8002506:	3b18      	subs	r3, #24
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800250e:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002512:	f107 0318 	add.w	r3, r7, #24
 8002516:	3b18      	subs	r3, #24
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800251e:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002522:	f107 0318 	add.w	r3, r7, #24
 8002526:	3b18      	subs	r3, #24
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800252e:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002532:	f107 0318 	add.w	r3, r7, #24
 8002536:	3b18      	subs	r3, #24
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			  textcolor, backcolor, backcolor, textcolor,  //@..@
			  textcolor, backcolor, backcolor, textcolor,  //@..@
			  backcolor, backcolor, backcolor, backcolor,  //....
			  backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_L[10][4] = {
 800253e:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002542:	f107 0318 	add.w	r3, r7, #24
 8002546:	3b18      	subs	r3, #24
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6013      	str	r3, [r2, #0]
 800254c:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002550:	f107 0318 	add.w	r3, r7, #24
 8002554:	3b18      	subs	r3, #24
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6053      	str	r3, [r2, #4]
 800255a:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 800255e:	f107 0318 	add.w	r3, r7, #24
 8002562:	3b18      	subs	r3, #24
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6093      	str	r3, [r2, #8]
 8002568:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 800256c:	f107 0318 	add.w	r3, r7, #24
 8002570:	3b18      	subs	r3, #24
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	60d3      	str	r3, [r2, #12]
 8002576:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 800257a:	f107 0318 	add.w	r3, r7, #24
 800257e:	3b18      	subs	r3, #24
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6113      	str	r3, [r2, #16]
 8002584:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002588:	f107 0318 	add.w	r3, r7, #24
 800258c:	3b18      	subs	r3, #24
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6153      	str	r3, [r2, #20]
 8002592:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002596:	f107 0318 	add.w	r3, r7, #24
 800259a:	3b18      	subs	r3, #24
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	6193      	str	r3, [r2, #24]
 80025a0:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 80025a4:	f107 0318 	add.w	r3, r7, #24
 80025a8:	3b18      	subs	r3, #24
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	61d3      	str	r3, [r2, #28]
 80025ae:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80025b2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80025b6:	f102 0208 	add.w	r2, r2, #8
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	621a      	str	r2, [r3, #32]
 80025be:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 80025c2:	f107 0318 	add.w	r3, r7, #24
 80025c6:	3b18      	subs	r3, #24
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6253      	str	r3, [r2, #36]	; 0x24
 80025cc:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 80025d0:	f107 0318 	add.w	r3, r7, #24
 80025d4:	3b18      	subs	r3, #24
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6293      	str	r3, [r2, #40]	; 0x28
 80025da:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 80025de:	f107 0318 	add.w	r3, r7, #24
 80025e2:	3b18      	subs	r3, #24
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80025e8:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80025ec:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80025f0:	f102 0208 	add.w	r2, r2, #8
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	631a      	str	r2, [r3, #48]	; 0x30
 80025f8:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 80025fc:	f107 0318 	add.w	r3, r7, #24
 8002600:	3b18      	subs	r3, #24
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6353      	str	r3, [r2, #52]	; 0x34
 8002606:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 800260a:	f107 0318 	add.w	r3, r7, #24
 800260e:	3b18      	subs	r3, #24
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	6393      	str	r3, [r2, #56]	; 0x38
 8002614:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002618:	f107 0318 	add.w	r3, r7, #24
 800261c:	3b18      	subs	r3, #24
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002622:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8002626:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800262a:	f102 0208 	add.w	r2, r2, #8
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	641a      	str	r2, [r3, #64]	; 0x40
 8002632:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002636:	f107 0318 	add.w	r3, r7, #24
 800263a:	3b18      	subs	r3, #24
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6453      	str	r3, [r2, #68]	; 0x44
 8002640:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002644:	f107 0318 	add.w	r3, r7, #24
 8002648:	3b18      	subs	r3, #24
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6493      	str	r3, [r2, #72]	; 0x48
 800264e:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002652:	f107 0318 	add.w	r3, r7, #24
 8002656:	3b18      	subs	r3, #24
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800265c:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8002660:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002664:	f102 0208 	add.w	r2, r2, #8
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	651a      	str	r2, [r3, #80]	; 0x50
 800266c:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002670:	f107 0318 	add.w	r3, r7, #24
 8002674:	3b18      	subs	r3, #24
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	6553      	str	r3, [r2, #84]	; 0x54
 800267a:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 800267e:	f107 0318 	add.w	r3, r7, #24
 8002682:	3b18      	subs	r3, #24
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6593      	str	r3, [r2, #88]	; 0x58
 8002688:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 800268c:	f107 0318 	add.w	r3, r7, #24
 8002690:	3b18      	subs	r3, #24
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002696:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 800269a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800269e:	f102 0208 	add.w	r2, r2, #8
 80026a2:	6812      	ldr	r2, [r2, #0]
 80026a4:	661a      	str	r2, [r3, #96]	; 0x60
 80026a6:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 80026aa:	f107 0318 	add.w	r3, r7, #24
 80026ae:	3b18      	subs	r3, #24
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	6653      	str	r3, [r2, #100]	; 0x64
 80026b4:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 80026b8:	f107 0318 	add.w	r3, r7, #24
 80026bc:	3b18      	subs	r3, #24
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6693      	str	r3, [r2, #104]	; 0x68
 80026c2:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 80026c6:	f107 0318 	add.w	r3, r7, #24
 80026ca:	3b18      	subs	r3, #24
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	66d3      	str	r3, [r2, #108]	; 0x6c
 80026d0:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80026d4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80026d8:	f102 0208 	add.w	r2, r2, #8
 80026dc:	6812      	ldr	r2, [r2, #0]
 80026de:	671a      	str	r2, [r3, #112]	; 0x70
 80026e0:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80026e4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80026e8:	f102 0208 	add.w	r2, r2, #8
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	675a      	str	r2, [r3, #116]	; 0x74
 80026f0:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80026f4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80026f8:	f102 0208 	add.w	r2, r2, #8
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	679a      	str	r2, [r3, #120]	; 0x78
 8002700:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8002704:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002708:	f102 0208 	add.w	r2, r2, #8
 800270c:	6812      	ldr	r2, [r2, #0]
 800270e:	67da      	str	r2, [r3, #124]	; 0x7c
 8002710:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002714:	f107 0318 	add.w	r3, r7, #24
 8002718:	3b18      	subs	r3, #24
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002720:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002724:	f107 0318 	add.w	r3, r7, #24
 8002728:	3b18      	subs	r3, #24
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8002730:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002734:	f107 0318 	add.w	r3, r7, #24
 8002738:	3b18      	subs	r3, #24
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002740:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002744:	f107 0318 	add.w	r3, r7, #24
 8002748:	3b18      	subs	r3, #24
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002750:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002754:	f107 0318 	add.w	r3, r7, #24
 8002758:	3b18      	subs	r3, #24
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002760:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002764:	f107 0318 	add.w	r3, r7, #24
 8002768:	3b18      	subs	r3, #24
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002770:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002774:	f107 0318 	add.w	r3, r7, #24
 8002778:	3b18      	subs	r3, #24
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8002780:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002784:	f107 0318 	add.w	r3, r7, #24
 8002788:	3b18      	subs	r3, #24
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			  textcolor, backcolor, backcolor, backcolor,  //@...
			  textcolor, textcolor, textcolor, textcolor,  //@@@@
			  backcolor, backcolor, backcolor, backcolor,  //....
			  backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_M[10][4] = {
 8002790:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002794:	f107 0318 	add.w	r3, r7, #24
 8002798:	3b18      	subs	r3, #24
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 80027a2:	f107 0318 	add.w	r3, r7, #24
 80027a6:	3b18      	subs	r3, #24
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	6053      	str	r3, [r2, #4]
 80027ac:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 80027b0:	f107 0318 	add.w	r3, r7, #24
 80027b4:	3b18      	subs	r3, #24
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6093      	str	r3, [r2, #8]
 80027ba:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 80027be:	f107 0318 	add.w	r3, r7, #24
 80027c2:	3b18      	subs	r3, #24
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	60d3      	str	r3, [r2, #12]
 80027c8:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 80027cc:	f107 0318 	add.w	r3, r7, #24
 80027d0:	3b18      	subs	r3, #24
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6113      	str	r3, [r2, #16]
 80027d6:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 80027da:	f107 0318 	add.w	r3, r7, #24
 80027de:	3b18      	subs	r3, #24
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6153      	str	r3, [r2, #20]
 80027e4:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 80027e8:	f107 0318 	add.w	r3, r7, #24
 80027ec:	3b18      	subs	r3, #24
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6193      	str	r3, [r2, #24]
 80027f2:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 80027f6:	f107 0318 	add.w	r3, r7, #24
 80027fa:	3b18      	subs	r3, #24
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	61d3      	str	r3, [r2, #28]
 8002800:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002804:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002808:	f102 0208 	add.w	r2, r2, #8
 800280c:	6812      	ldr	r2, [r2, #0]
 800280e:	621a      	str	r2, [r3, #32]
 8002810:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002814:	f107 0318 	add.w	r3, r7, #24
 8002818:	3b18      	subs	r3, #24
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6253      	str	r3, [r2, #36]	; 0x24
 800281e:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002822:	f107 0318 	add.w	r3, r7, #24
 8002826:	3b18      	subs	r3, #24
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6293      	str	r3, [r2, #40]	; 0x28
 800282c:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002830:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002834:	f102 0208 	add.w	r2, r2, #8
 8002838:	6812      	ldr	r2, [r2, #0]
 800283a:	62da      	str	r2, [r3, #44]	; 0x2c
 800283c:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002840:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002844:	f102 0208 	add.w	r2, r2, #8
 8002848:	6812      	ldr	r2, [r2, #0]
 800284a:	631a      	str	r2, [r3, #48]	; 0x30
 800284c:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002850:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002854:	f102 0208 	add.w	r2, r2, #8
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	635a      	str	r2, [r3, #52]	; 0x34
 800285c:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002860:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002864:	f102 0208 	add.w	r2, r2, #8
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	639a      	str	r2, [r3, #56]	; 0x38
 800286c:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002870:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002874:	f102 0208 	add.w	r2, r2, #8
 8002878:	6812      	ldr	r2, [r2, #0]
 800287a:	63da      	str	r2, [r3, #60]	; 0x3c
 800287c:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002880:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002884:	f102 0208 	add.w	r2, r2, #8
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	641a      	str	r2, [r3, #64]	; 0x40
 800288c:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002890:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002894:	f102 0208 	add.w	r2, r2, #8
 8002898:	6812      	ldr	r2, [r2, #0]
 800289a:	645a      	str	r2, [r3, #68]	; 0x44
 800289c:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 80028a0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80028a4:	f102 0208 	add.w	r2, r2, #8
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	649a      	str	r2, [r3, #72]	; 0x48
 80028ac:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 80028b0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80028b4:	f102 0208 	add.w	r2, r2, #8
 80028b8:	6812      	ldr	r2, [r2, #0]
 80028ba:	64da      	str	r2, [r3, #76]	; 0x4c
 80028bc:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 80028c0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80028c4:	f102 0208 	add.w	r2, r2, #8
 80028c8:	6812      	ldr	r2, [r2, #0]
 80028ca:	651a      	str	r2, [r3, #80]	; 0x50
 80028cc:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 80028d0:	f107 0318 	add.w	r3, r7, #24
 80028d4:	3b18      	subs	r3, #24
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6553      	str	r3, [r2, #84]	; 0x54
 80028da:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 80028de:	f107 0318 	add.w	r3, r7, #24
 80028e2:	3b18      	subs	r3, #24
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6593      	str	r3, [r2, #88]	; 0x58
 80028e8:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 80028ec:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80028f0:	f102 0208 	add.w	r2, r2, #8
 80028f4:	6812      	ldr	r2, [r2, #0]
 80028f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80028f8:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 80028fc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002900:	f102 0208 	add.w	r2, r2, #8
 8002904:	6812      	ldr	r2, [r2, #0]
 8002906:	661a      	str	r2, [r3, #96]	; 0x60
 8002908:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 800290c:	f107 0318 	add.w	r3, r7, #24
 8002910:	3b18      	subs	r3, #24
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6653      	str	r3, [r2, #100]	; 0x64
 8002916:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 800291a:	f107 0318 	add.w	r3, r7, #24
 800291e:	3b18      	subs	r3, #24
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6693      	str	r3, [r2, #104]	; 0x68
 8002924:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002928:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800292c:	f102 0208 	add.w	r2, r2, #8
 8002930:	6812      	ldr	r2, [r2, #0]
 8002932:	66da      	str	r2, [r3, #108]	; 0x6c
 8002934:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002938:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800293c:	f102 0208 	add.w	r2, r2, #8
 8002940:	6812      	ldr	r2, [r2, #0]
 8002942:	671a      	str	r2, [r3, #112]	; 0x70
 8002944:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002948:	f107 0318 	add.w	r3, r7, #24
 800294c:	3b18      	subs	r3, #24
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	6753      	str	r3, [r2, #116]	; 0x74
 8002952:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002956:	f107 0318 	add.w	r3, r7, #24
 800295a:	3b18      	subs	r3, #24
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6793      	str	r3, [r2, #120]	; 0x78
 8002960:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002964:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002968:	f102 0208 	add.w	r2, r2, #8
 800296c:	6812      	ldr	r2, [r2, #0]
 800296e:	67da      	str	r2, [r3, #124]	; 0x7c
 8002970:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002974:	f107 0318 	add.w	r3, r7, #24
 8002978:	3b18      	subs	r3, #24
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002980:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002984:	f107 0318 	add.w	r3, r7, #24
 8002988:	3b18      	subs	r3, #24
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8002990:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002994:	f107 0318 	add.w	r3, r7, #24
 8002998:	3b18      	subs	r3, #24
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80029a0:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 80029a4:	f107 0318 	add.w	r3, r7, #24
 80029a8:	3b18      	subs	r3, #24
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80029b0:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 80029b4:	f107 0318 	add.w	r3, r7, #24
 80029b8:	3b18      	subs	r3, #24
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029c0:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 80029c4:	f107 0318 	add.w	r3, r7, #24
 80029c8:	3b18      	subs	r3, #24
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80029d0:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 80029d4:	f107 0318 	add.w	r3, r7, #24
 80029d8:	3b18      	subs	r3, #24
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 80029e0:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 80029e4:	f107 0318 	add.w	r3, r7, #24
 80029e8:	3b18      	subs	r3, #24
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			  textcolor, backcolor, backcolor, textcolor,  //@..@
			  textcolor, backcolor, backcolor, textcolor,  //@..@
			  backcolor, backcolor, backcolor, backcolor,  //....
			  backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_N[10][4] = {
 80029f0:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 80029f4:	f107 0318 	add.w	r3, r7, #24
 80029f8:	3b18      	subs	r3, #24
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002a02:	f107 0318 	add.w	r3, r7, #24
 8002a06:	3b18      	subs	r3, #24
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6053      	str	r3, [r2, #4]
 8002a0c:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002a10:	f107 0318 	add.w	r3, r7, #24
 8002a14:	3b18      	subs	r3, #24
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6093      	str	r3, [r2, #8]
 8002a1a:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002a1e:	f107 0318 	add.w	r3, r7, #24
 8002a22:	3b18      	subs	r3, #24
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	60d3      	str	r3, [r2, #12]
 8002a28:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002a2c:	f107 0318 	add.w	r3, r7, #24
 8002a30:	3b18      	subs	r3, #24
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6113      	str	r3, [r2, #16]
 8002a36:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002a3a:	f107 0318 	add.w	r3, r7, #24
 8002a3e:	3b18      	subs	r3, #24
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6153      	str	r3, [r2, #20]
 8002a44:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002a48:	f107 0318 	add.w	r3, r7, #24
 8002a4c:	3b18      	subs	r3, #24
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6193      	str	r3, [r2, #24]
 8002a52:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002a56:	f107 0318 	add.w	r3, r7, #24
 8002a5a:	3b18      	subs	r3, #24
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	61d3      	str	r3, [r2, #28]
 8002a60:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002a64:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002a68:	f102 0208 	add.w	r2, r2, #8
 8002a6c:	6812      	ldr	r2, [r2, #0]
 8002a6e:	621a      	str	r2, [r3, #32]
 8002a70:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002a74:	f107 0318 	add.w	r3, r7, #24
 8002a78:	3b18      	subs	r3, #24
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6253      	str	r3, [r2, #36]	; 0x24
 8002a7e:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002a82:	f107 0318 	add.w	r3, r7, #24
 8002a86:	3b18      	subs	r3, #24
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6293      	str	r3, [r2, #40]	; 0x28
 8002a8c:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002a90:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002a94:	f102 0208 	add.w	r2, r2, #8
 8002a98:	6812      	ldr	r2, [r2, #0]
 8002a9a:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a9c:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002aa0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002aa4:	f102 0208 	add.w	r2, r2, #8
 8002aa8:	6812      	ldr	r2, [r2, #0]
 8002aaa:	631a      	str	r2, [r3, #48]	; 0x30
 8002aac:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002ab0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002ab4:	f102 0208 	add.w	r2, r2, #8
 8002ab8:	6812      	ldr	r2, [r2, #0]
 8002aba:	635a      	str	r2, [r3, #52]	; 0x34
 8002abc:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002ac0:	f107 0318 	add.w	r3, r7, #24
 8002ac4:	3b18      	subs	r3, #24
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6393      	str	r3, [r2, #56]	; 0x38
 8002aca:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002ace:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002ad2:	f102 0208 	add.w	r2, r2, #8
 8002ad6:	6812      	ldr	r2, [r2, #0]
 8002ad8:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ada:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002ade:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002ae2:	f102 0208 	add.w	r2, r2, #8
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40
 8002aea:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002aee:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002af2:	f102 0208 	add.w	r2, r2, #8
 8002af6:	6812      	ldr	r2, [r2, #0]
 8002af8:	645a      	str	r2, [r3, #68]	; 0x44
 8002afa:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002afe:	f107 0318 	add.w	r3, r7, #24
 8002b02:	3b18      	subs	r3, #24
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6493      	str	r3, [r2, #72]	; 0x48
 8002b08:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002b0c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002b10:	f102 0208 	add.w	r2, r2, #8
 8002b14:	6812      	ldr	r2, [r2, #0]
 8002b16:	64da      	str	r2, [r3, #76]	; 0x4c
 8002b18:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002b1c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002b20:	f102 0208 	add.w	r2, r2, #8
 8002b24:	6812      	ldr	r2, [r2, #0]
 8002b26:	651a      	str	r2, [r3, #80]	; 0x50
 8002b28:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002b2c:	f107 0318 	add.w	r3, r7, #24
 8002b30:	3b18      	subs	r3, #24
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6553      	str	r3, [r2, #84]	; 0x54
 8002b36:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002b3a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002b3e:	f102 0208 	add.w	r2, r2, #8
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	659a      	str	r2, [r3, #88]	; 0x58
 8002b46:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002b4a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002b4e:	f102 0208 	add.w	r2, r2, #8
 8002b52:	6812      	ldr	r2, [r2, #0]
 8002b54:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b56:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002b5a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002b5e:	f102 0208 	add.w	r2, r2, #8
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	661a      	str	r2, [r3, #96]	; 0x60
 8002b66:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002b6a:	f107 0318 	add.w	r3, r7, #24
 8002b6e:	3b18      	subs	r3, #24
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6653      	str	r3, [r2, #100]	; 0x64
 8002b74:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002b78:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002b7c:	f102 0208 	add.w	r2, r2, #8
 8002b80:	6812      	ldr	r2, [r2, #0]
 8002b82:	669a      	str	r2, [r3, #104]	; 0x68
 8002b84:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002b88:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002b8c:	f102 0208 	add.w	r2, r2, #8
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	66da      	str	r2, [r3, #108]	; 0x6c
 8002b94:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002b98:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002b9c:	f102 0208 	add.w	r2, r2, #8
 8002ba0:	6812      	ldr	r2, [r2, #0]
 8002ba2:	671a      	str	r2, [r3, #112]	; 0x70
 8002ba4:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002ba8:	f107 0318 	add.w	r3, r7, #24
 8002bac:	3b18      	subs	r3, #24
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	6753      	str	r3, [r2, #116]	; 0x74
 8002bb2:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002bb6:	f107 0318 	add.w	r3, r7, #24
 8002bba:	3b18      	subs	r3, #24
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6793      	str	r3, [r2, #120]	; 0x78
 8002bc0:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002bc4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002bc8:	f102 0208 	add.w	r2, r2, #8
 8002bcc:	6812      	ldr	r2, [r2, #0]
 8002bce:	67da      	str	r2, [r3, #124]	; 0x7c
 8002bd0:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002bd4:	f107 0318 	add.w	r3, r7, #24
 8002bd8:	3b18      	subs	r3, #24
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002be0:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002be4:	f107 0318 	add.w	r3, r7, #24
 8002be8:	3b18      	subs	r3, #24
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8002bf0:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002bf4:	f107 0318 	add.w	r3, r7, #24
 8002bf8:	3b18      	subs	r3, #24
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002c00:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002c04:	f107 0318 	add.w	r3, r7, #24
 8002c08:	3b18      	subs	r3, #24
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c10:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002c14:	f107 0318 	add.w	r3, r7, #24
 8002c18:	3b18      	subs	r3, #24
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c20:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002c24:	f107 0318 	add.w	r3, r7, #24
 8002c28:	3b18      	subs	r3, #24
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002c30:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002c34:	f107 0318 	add.w	r3, r7, #24
 8002c38:	3b18      	subs	r3, #24
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8002c40:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002c44:	f107 0318 	add.w	r3, r7, #24
 8002c48:	3b18      	subs	r3, #24
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			  textcolor, backcolor, textcolor, textcolor,  //@.@@
			  textcolor, backcolor, backcolor, textcolor,  //@..@
			  backcolor, backcolor, backcolor, backcolor,  //....
			  backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_O[10][4] = {
 8002c50:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8002c54:	f107 0318 	add.w	r3, r7, #24
 8002c58:	3b18      	subs	r3, #24
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8002c62:	f107 0318 	add.w	r3, r7, #24
 8002c66:	3b18      	subs	r3, #24
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6053      	str	r3, [r2, #4]
 8002c6c:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8002c70:	f107 0318 	add.w	r3, r7, #24
 8002c74:	3b18      	subs	r3, #24
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6093      	str	r3, [r2, #8]
 8002c7a:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8002c7e:	f107 0318 	add.w	r3, r7, #24
 8002c82:	3b18      	subs	r3, #24
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	60d3      	str	r3, [r2, #12]
 8002c88:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8002c8c:	f107 0318 	add.w	r3, r7, #24
 8002c90:	3b18      	subs	r3, #24
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6113      	str	r3, [r2, #16]
 8002c96:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8002c9a:	f107 0318 	add.w	r3, r7, #24
 8002c9e:	3b18      	subs	r3, #24
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6153      	str	r3, [r2, #20]
 8002ca4:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8002ca8:	f107 0318 	add.w	r3, r7, #24
 8002cac:	3b18      	subs	r3, #24
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6193      	str	r3, [r2, #24]
 8002cb2:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8002cb6:	f107 0318 	add.w	r3, r7, #24
 8002cba:	3b18      	subs	r3, #24
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	61d3      	str	r3, [r2, #28]
 8002cc0:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8002cc4:	f107 0318 	add.w	r3, r7, #24
 8002cc8:	3b18      	subs	r3, #24
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6213      	str	r3, [r2, #32]
 8002cce:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8002cd2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002cd6:	f102 0208 	add.w	r2, r2, #8
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24
 8002cde:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8002ce2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002ce6:	f102 0208 	add.w	r2, r2, #8
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	629a      	str	r2, [r3, #40]	; 0x28
 8002cee:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8002cf2:	f107 0318 	add.w	r3, r7, #24
 8002cf6:	3b18      	subs	r3, #24
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002cfc:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8002d00:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002d04:	f102 0208 	add.w	r2, r2, #8
 8002d08:	6812      	ldr	r2, [r2, #0]
 8002d0a:	631a      	str	r2, [r3, #48]	; 0x30
 8002d0c:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8002d10:	f107 0318 	add.w	r3, r7, #24
 8002d14:	3b18      	subs	r3, #24
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6353      	str	r3, [r2, #52]	; 0x34
 8002d1a:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8002d1e:	f107 0318 	add.w	r3, r7, #24
 8002d22:	3b18      	subs	r3, #24
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6393      	str	r3, [r2, #56]	; 0x38
 8002d28:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8002d2c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002d30:	f102 0208 	add.w	r2, r2, #8
 8002d34:	6812      	ldr	r2, [r2, #0]
 8002d36:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d38:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8002d3c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002d40:	f102 0208 	add.w	r2, r2, #8
 8002d44:	6812      	ldr	r2, [r2, #0]
 8002d46:	641a      	str	r2, [r3, #64]	; 0x40
 8002d48:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8002d4c:	f107 0318 	add.w	r3, r7, #24
 8002d50:	3b18      	subs	r3, #24
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6453      	str	r3, [r2, #68]	; 0x44
 8002d56:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8002d5a:	f107 0318 	add.w	r3, r7, #24
 8002d5e:	3b18      	subs	r3, #24
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6493      	str	r3, [r2, #72]	; 0x48
 8002d64:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8002d68:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002d6c:	f102 0208 	add.w	r2, r2, #8
 8002d70:	6812      	ldr	r2, [r2, #0]
 8002d72:	64da      	str	r2, [r3, #76]	; 0x4c
 8002d74:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8002d78:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002d7c:	f102 0208 	add.w	r2, r2, #8
 8002d80:	6812      	ldr	r2, [r2, #0]
 8002d82:	651a      	str	r2, [r3, #80]	; 0x50
 8002d84:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8002d88:	f107 0318 	add.w	r3, r7, #24
 8002d8c:	3b18      	subs	r3, #24
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6553      	str	r3, [r2, #84]	; 0x54
 8002d92:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8002d96:	f107 0318 	add.w	r3, r7, #24
 8002d9a:	3b18      	subs	r3, #24
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6593      	str	r3, [r2, #88]	; 0x58
 8002da0:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8002da4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002da8:	f102 0208 	add.w	r2, r2, #8
 8002dac:	6812      	ldr	r2, [r2, #0]
 8002dae:	65da      	str	r2, [r3, #92]	; 0x5c
 8002db0:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8002db4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002db8:	f102 0208 	add.w	r2, r2, #8
 8002dbc:	6812      	ldr	r2, [r2, #0]
 8002dbe:	661a      	str	r2, [r3, #96]	; 0x60
 8002dc0:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8002dc4:	f107 0318 	add.w	r3, r7, #24
 8002dc8:	3b18      	subs	r3, #24
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6653      	str	r3, [r2, #100]	; 0x64
 8002dce:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8002dd2:	f107 0318 	add.w	r3, r7, #24
 8002dd6:	3b18      	subs	r3, #24
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6693      	str	r3, [r2, #104]	; 0x68
 8002ddc:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8002de0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002de4:	f102 0208 	add.w	r2, r2, #8
 8002de8:	6812      	ldr	r2, [r2, #0]
 8002dea:	66da      	str	r2, [r3, #108]	; 0x6c
 8002dec:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8002df0:	f107 0318 	add.w	r3, r7, #24
 8002df4:	3b18      	subs	r3, #24
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dfa:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8002dfe:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002e02:	f102 0208 	add.w	r2, r2, #8
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	675a      	str	r2, [r3, #116]	; 0x74
 8002e0a:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8002e0e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002e12:	f102 0208 	add.w	r2, r2, #8
 8002e16:	6812      	ldr	r2, [r2, #0]
 8002e18:	679a      	str	r2, [r3, #120]	; 0x78
 8002e1a:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8002e1e:	f107 0318 	add.w	r3, r7, #24
 8002e22:	3b18      	subs	r3, #24
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	67d3      	str	r3, [r2, #124]	; 0x7c
 8002e28:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8002e2c:	f107 0318 	add.w	r3, r7, #24
 8002e30:	3b18      	subs	r3, #24
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e38:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8002e3c:	f107 0318 	add.w	r3, r7, #24
 8002e40:	3b18      	subs	r3, #24
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8002e48:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8002e4c:	f107 0318 	add.w	r3, r7, #24
 8002e50:	3b18      	subs	r3, #24
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002e58:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8002e5c:	f107 0318 	add.w	r3, r7, #24
 8002e60:	3b18      	subs	r3, #24
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002e68:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8002e6c:	f107 0318 	add.w	r3, r7, #24
 8002e70:	3b18      	subs	r3, #24
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e78:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8002e7c:	f107 0318 	add.w	r3, r7, #24
 8002e80:	3b18      	subs	r3, #24
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002e88:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8002e8c:	f107 0318 	add.w	r3, r7, #24
 8002e90:	3b18      	subs	r3, #24
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8002e98:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8002e9c:	f107 0318 	add.w	r3, r7, #24
 8002ea0:	3b18      	subs	r3, #24
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			  textcolor, backcolor, backcolor, textcolor,  //@..@
			  backcolor, textcolor, textcolor, backcolor,  //.@@.
			  backcolor, backcolor, backcolor, backcolor,  //....
			  backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_P[10][4] = {
 8002ea8:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8002eac:	f107 0318 	add.w	r3, r7, #24
 8002eb0:	3b18      	subs	r3, #24
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8002eba:	f107 0318 	add.w	r3, r7, #24
 8002ebe:	3b18      	subs	r3, #24
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	6053      	str	r3, [r2, #4]
 8002ec4:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8002ec8:	f107 0318 	add.w	r3, r7, #24
 8002ecc:	3b18      	subs	r3, #24
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6093      	str	r3, [r2, #8]
 8002ed2:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8002ed6:	f107 0318 	add.w	r3, r7, #24
 8002eda:	3b18      	subs	r3, #24
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	60d3      	str	r3, [r2, #12]
 8002ee0:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8002ee4:	f107 0318 	add.w	r3, r7, #24
 8002ee8:	3b18      	subs	r3, #24
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6113      	str	r3, [r2, #16]
 8002eee:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8002ef2:	f107 0318 	add.w	r3, r7, #24
 8002ef6:	3b18      	subs	r3, #24
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6153      	str	r3, [r2, #20]
 8002efc:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8002f00:	f107 0318 	add.w	r3, r7, #24
 8002f04:	3b18      	subs	r3, #24
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6193      	str	r3, [r2, #24]
 8002f0a:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8002f0e:	f107 0318 	add.w	r3, r7, #24
 8002f12:	3b18      	subs	r3, #24
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	61d3      	str	r3, [r2, #28]
 8002f18:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8002f1c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002f20:	f102 0208 	add.w	r2, r2, #8
 8002f24:	6812      	ldr	r2, [r2, #0]
 8002f26:	621a      	str	r2, [r3, #32]
 8002f28:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8002f2c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002f30:	f102 0208 	add.w	r2, r2, #8
 8002f34:	6812      	ldr	r2, [r2, #0]
 8002f36:	625a      	str	r2, [r3, #36]	; 0x24
 8002f38:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8002f3c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002f40:	f102 0208 	add.w	r2, r2, #8
 8002f44:	6812      	ldr	r2, [r2, #0]
 8002f46:	629a      	str	r2, [r3, #40]	; 0x28
 8002f48:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8002f4c:	f107 0318 	add.w	r3, r7, #24
 8002f50:	3b18      	subs	r3, #24
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002f56:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8002f5a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002f5e:	f102 0208 	add.w	r2, r2, #8
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	631a      	str	r2, [r3, #48]	; 0x30
 8002f66:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8002f6a:	f107 0318 	add.w	r3, r7, #24
 8002f6e:	3b18      	subs	r3, #24
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6353      	str	r3, [r2, #52]	; 0x34
 8002f74:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8002f78:	f107 0318 	add.w	r3, r7, #24
 8002f7c:	3b18      	subs	r3, #24
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6393      	str	r3, [r2, #56]	; 0x38
 8002f82:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8002f86:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002f8a:	f102 0208 	add.w	r2, r2, #8
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f92:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8002f96:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002f9a:	f102 0208 	add.w	r2, r2, #8
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40
 8002fa2:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8002fa6:	f107 0318 	add.w	r3, r7, #24
 8002faa:	3b18      	subs	r3, #24
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	6453      	str	r3, [r2, #68]	; 0x44
 8002fb0:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8002fb4:	f107 0318 	add.w	r3, r7, #24
 8002fb8:	3b18      	subs	r3, #24
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6493      	str	r3, [r2, #72]	; 0x48
 8002fbe:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8002fc2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002fc6:	f102 0208 	add.w	r2, r2, #8
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	64da      	str	r2, [r3, #76]	; 0x4c
 8002fce:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8002fd2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002fd6:	f102 0208 	add.w	r2, r2, #8
 8002fda:	6812      	ldr	r2, [r2, #0]
 8002fdc:	651a      	str	r2, [r3, #80]	; 0x50
 8002fde:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8002fe2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002fe6:	f102 0208 	add.w	r2, r2, #8
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	655a      	str	r2, [r3, #84]	; 0x54
 8002fee:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8002ff2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002ff6:	f102 0208 	add.w	r2, r2, #8
 8002ffa:	6812      	ldr	r2, [r2, #0]
 8002ffc:	659a      	str	r2, [r3, #88]	; 0x58
 8002ffe:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003002:	f107 0318 	add.w	r3, r7, #24
 8003006:	3b18      	subs	r3, #24
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800300c:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8003010:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003014:	f102 0208 	add.w	r2, r2, #8
 8003018:	6812      	ldr	r2, [r2, #0]
 800301a:	661a      	str	r2, [r3, #96]	; 0x60
 800301c:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003020:	f107 0318 	add.w	r3, r7, #24
 8003024:	3b18      	subs	r3, #24
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6653      	str	r3, [r2, #100]	; 0x64
 800302a:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800302e:	f107 0318 	add.w	r3, r7, #24
 8003032:	3b18      	subs	r3, #24
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6693      	str	r3, [r2, #104]	; 0x68
 8003038:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800303c:	f107 0318 	add.w	r3, r7, #24
 8003040:	3b18      	subs	r3, #24
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	66d3      	str	r3, [r2, #108]	; 0x6c
 8003046:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800304a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800304e:	f102 0208 	add.w	r2, r2, #8
 8003052:	6812      	ldr	r2, [r2, #0]
 8003054:	671a      	str	r2, [r3, #112]	; 0x70
 8003056:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800305a:	f107 0318 	add.w	r3, r7, #24
 800305e:	3b18      	subs	r3, #24
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6753      	str	r3, [r2, #116]	; 0x74
 8003064:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003068:	f107 0318 	add.w	r3, r7, #24
 800306c:	3b18      	subs	r3, #24
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6793      	str	r3, [r2, #120]	; 0x78
 8003072:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003076:	f107 0318 	add.w	r3, r7, #24
 800307a:	3b18      	subs	r3, #24
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	67d3      	str	r3, [r2, #124]	; 0x7c
 8003080:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003084:	f107 0318 	add.w	r3, r7, #24
 8003088:	3b18      	subs	r3, #24
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003090:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003094:	f107 0318 	add.w	r3, r7, #24
 8003098:	3b18      	subs	r3, #24
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80030a0:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 80030a4:	f107 0318 	add.w	r3, r7, #24
 80030a8:	3b18      	subs	r3, #24
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80030b0:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 80030b4:	f107 0318 	add.w	r3, r7, #24
 80030b8:	3b18      	subs	r3, #24
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80030c0:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 80030c4:	f107 0318 	add.w	r3, r7, #24
 80030c8:	3b18      	subs	r3, #24
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030d0:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 80030d4:	f107 0318 	add.w	r3, r7, #24
 80030d8:	3b18      	subs	r3, #24
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80030e0:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 80030e4:	f107 0318 	add.w	r3, r7, #24
 80030e8:	3b18      	subs	r3, #24
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 80030f0:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 80030f4:	f107 0318 	add.w	r3, r7, #24
 80030f8:	3b18      	subs	r3, #24
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			  textcolor, backcolor, backcolor, backcolor,  //@...
			  textcolor, backcolor, backcolor, backcolor,  //@...
			  backcolor, backcolor, backcolor, backcolor,  //....
			  backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_Q[10][4] = {
 8003100:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003104:	f107 0318 	add.w	r3, r7, #24
 8003108:	3b18      	subs	r3, #24
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6013      	str	r3, [r2, #0]
 800310e:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003112:	f107 0318 	add.w	r3, r7, #24
 8003116:	3b18      	subs	r3, #24
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6053      	str	r3, [r2, #4]
 800311c:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003120:	f107 0318 	add.w	r3, r7, #24
 8003124:	3b18      	subs	r3, #24
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6093      	str	r3, [r2, #8]
 800312a:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 800312e:	f107 0318 	add.w	r3, r7, #24
 8003132:	3b18      	subs	r3, #24
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	60d3      	str	r3, [r2, #12]
 8003138:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 800313c:	f107 0318 	add.w	r3, r7, #24
 8003140:	3b18      	subs	r3, #24
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6113      	str	r3, [r2, #16]
 8003146:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 800314a:	f107 0318 	add.w	r3, r7, #24
 800314e:	3b18      	subs	r3, #24
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6153      	str	r3, [r2, #20]
 8003154:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003158:	f107 0318 	add.w	r3, r7, #24
 800315c:	3b18      	subs	r3, #24
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6193      	str	r3, [r2, #24]
 8003162:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003166:	f107 0318 	add.w	r3, r7, #24
 800316a:	3b18      	subs	r3, #24
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	61d3      	str	r3, [r2, #28]
 8003170:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003174:	f107 0318 	add.w	r3, r7, #24
 8003178:	3b18      	subs	r3, #24
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6213      	str	r3, [r2, #32]
 800317e:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8003182:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003186:	f102 0208 	add.w	r2, r2, #8
 800318a:	6812      	ldr	r2, [r2, #0]
 800318c:	625a      	str	r2, [r3, #36]	; 0x24
 800318e:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8003192:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003196:	f102 0208 	add.w	r2, r2, #8
 800319a:	6812      	ldr	r2, [r2, #0]
 800319c:	629a      	str	r2, [r3, #40]	; 0x28
 800319e:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80031a2:	f107 0318 	add.w	r3, r7, #24
 80031a6:	3b18      	subs	r3, #24
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80031ac:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80031b0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80031b4:	f102 0208 	add.w	r2, r2, #8
 80031b8:	6812      	ldr	r2, [r2, #0]
 80031ba:	631a      	str	r2, [r3, #48]	; 0x30
 80031bc:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80031c0:	f107 0318 	add.w	r3, r7, #24
 80031c4:	3b18      	subs	r3, #24
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6353      	str	r3, [r2, #52]	; 0x34
 80031ca:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80031ce:	f107 0318 	add.w	r3, r7, #24
 80031d2:	3b18      	subs	r3, #24
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	6393      	str	r3, [r2, #56]	; 0x38
 80031d8:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80031dc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80031e0:	f102 0208 	add.w	r2, r2, #8
 80031e4:	6812      	ldr	r2, [r2, #0]
 80031e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80031e8:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80031ec:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80031f0:	f102 0208 	add.w	r2, r2, #8
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	641a      	str	r2, [r3, #64]	; 0x40
 80031f8:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80031fc:	f107 0318 	add.w	r3, r7, #24
 8003200:	3b18      	subs	r3, #24
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6453      	str	r3, [r2, #68]	; 0x44
 8003206:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 800320a:	f107 0318 	add.w	r3, r7, #24
 800320e:	3b18      	subs	r3, #24
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6493      	str	r3, [r2, #72]	; 0x48
 8003214:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8003218:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800321c:	f102 0208 	add.w	r2, r2, #8
 8003220:	6812      	ldr	r2, [r2, #0]
 8003222:	64da      	str	r2, [r3, #76]	; 0x4c
 8003224:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8003228:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800322c:	f102 0208 	add.w	r2, r2, #8
 8003230:	6812      	ldr	r2, [r2, #0]
 8003232:	651a      	str	r2, [r3, #80]	; 0x50
 8003234:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003238:	f107 0318 	add.w	r3, r7, #24
 800323c:	3b18      	subs	r3, #24
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6553      	str	r3, [r2, #84]	; 0x54
 8003242:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003246:	f107 0318 	add.w	r3, r7, #24
 800324a:	3b18      	subs	r3, #24
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6593      	str	r3, [r2, #88]	; 0x58
 8003250:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8003254:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003258:	f102 0208 	add.w	r2, r2, #8
 800325c:	6812      	ldr	r2, [r2, #0]
 800325e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003260:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8003264:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003268:	f102 0208 	add.w	r2, r2, #8
 800326c:	6812      	ldr	r2, [r2, #0]
 800326e:	661a      	str	r2, [r3, #96]	; 0x60
 8003270:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003274:	f107 0318 	add.w	r3, r7, #24
 8003278:	3b18      	subs	r3, #24
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	6653      	str	r3, [r2, #100]	; 0x64
 800327e:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003282:	f107 0318 	add.w	r3, r7, #24
 8003286:	3b18      	subs	r3, #24
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6693      	str	r3, [r2, #104]	; 0x68
 800328c:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8003290:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003294:	f102 0208 	add.w	r2, r2, #8
 8003298:	6812      	ldr	r2, [r2, #0]
 800329a:	66da      	str	r2, [r3, #108]	; 0x6c
 800329c:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80032a0:	f107 0318 	add.w	r3, r7, #24
 80032a4:	3b18      	subs	r3, #24
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6713      	str	r3, [r2, #112]	; 0x70
 80032aa:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80032ae:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80032b2:	f102 0208 	add.w	r2, r2, #8
 80032b6:	6812      	ldr	r2, [r2, #0]
 80032b8:	675a      	str	r2, [r3, #116]	; 0x74
 80032ba:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80032be:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80032c2:	f102 0208 	add.w	r2, r2, #8
 80032c6:	6812      	ldr	r2, [r2, #0]
 80032c8:	679a      	str	r2, [r3, #120]	; 0x78
 80032ca:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80032ce:	f107 0318 	add.w	r3, r7, #24
 80032d2:	3b18      	subs	r3, #24
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	67d3      	str	r3, [r2, #124]	; 0x7c
 80032d8:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80032dc:	f107 0318 	add.w	r3, r7, #24
 80032e0:	3b18      	subs	r3, #24
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032e8:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80032ec:	f107 0318 	add.w	r3, r7, #24
 80032f0:	3b18      	subs	r3, #24
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80032f8:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80032fc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003300:	f102 0208 	add.w	r2, r2, #8
 8003304:	6812      	ldr	r2, [r2, #0]
 8003306:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800330a:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 800330e:	f107 0318 	add.w	r3, r7, #24
 8003312:	3b18      	subs	r3, #24
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800331a:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 800331e:	f107 0318 	add.w	r3, r7, #24
 8003322:	3b18      	subs	r3, #24
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800332a:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 800332e:	f107 0318 	add.w	r3, r7, #24
 8003332:	3b18      	subs	r3, #24
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800333a:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 800333e:	f107 0318 	add.w	r3, r7, #24
 8003342:	3b18      	subs	r3, #24
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800334a:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800334e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003352:	f102 0208 	add.w	r2, r2, #8
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			  textcolor, backcolor, backcolor, textcolor,  //@..@
			  backcolor, textcolor, textcolor, backcolor,  //.@@.
			  backcolor, backcolor, textcolor, backcolor,  //..@.
			  backcolor, backcolor, backcolor, textcolor,  //...@
	};
	int letter_R[10][4] = {
 800335c:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8003360:	f107 0318 	add.w	r3, r7, #24
 8003364:	3b18      	subs	r3, #24
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6013      	str	r3, [r2, #0]
 800336a:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800336e:	f107 0318 	add.w	r3, r7, #24
 8003372:	3b18      	subs	r3, #24
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6053      	str	r3, [r2, #4]
 8003378:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800337c:	f107 0318 	add.w	r3, r7, #24
 8003380:	3b18      	subs	r3, #24
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6093      	str	r3, [r2, #8]
 8003386:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800338a:	f107 0318 	add.w	r3, r7, #24
 800338e:	3b18      	subs	r3, #24
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60d3      	str	r3, [r2, #12]
 8003394:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8003398:	f107 0318 	add.w	r3, r7, #24
 800339c:	3b18      	subs	r3, #24
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6113      	str	r3, [r2, #16]
 80033a2:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80033a6:	f107 0318 	add.w	r3, r7, #24
 80033aa:	3b18      	subs	r3, #24
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6153      	str	r3, [r2, #20]
 80033b0:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80033b4:	f107 0318 	add.w	r3, r7, #24
 80033b8:	3b18      	subs	r3, #24
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6193      	str	r3, [r2, #24]
 80033be:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80033c2:	f107 0318 	add.w	r3, r7, #24
 80033c6:	3b18      	subs	r3, #24
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	61d3      	str	r3, [r2, #28]
 80033cc:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80033d0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80033d4:	f102 0208 	add.w	r2, r2, #8
 80033d8:	6812      	ldr	r2, [r2, #0]
 80033da:	621a      	str	r2, [r3, #32]
 80033dc:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80033e0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80033e4:	f102 0208 	add.w	r2, r2, #8
 80033e8:	6812      	ldr	r2, [r2, #0]
 80033ea:	625a      	str	r2, [r3, #36]	; 0x24
 80033ec:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80033f0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80033f4:	f102 0208 	add.w	r2, r2, #8
 80033f8:	6812      	ldr	r2, [r2, #0]
 80033fa:	629a      	str	r2, [r3, #40]	; 0x28
 80033fc:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8003400:	f107 0318 	add.w	r3, r7, #24
 8003404:	3b18      	subs	r3, #24
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	62d3      	str	r3, [r2, #44]	; 0x2c
 800340a:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800340e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003412:	f102 0208 	add.w	r2, r2, #8
 8003416:	6812      	ldr	r2, [r2, #0]
 8003418:	631a      	str	r2, [r3, #48]	; 0x30
 800341a:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800341e:	f107 0318 	add.w	r3, r7, #24
 8003422:	3b18      	subs	r3, #24
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6353      	str	r3, [r2, #52]	; 0x34
 8003428:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800342c:	f107 0318 	add.w	r3, r7, #24
 8003430:	3b18      	subs	r3, #24
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6393      	str	r3, [r2, #56]	; 0x38
 8003436:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800343a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800343e:	f102 0208 	add.w	r2, r2, #8
 8003442:	6812      	ldr	r2, [r2, #0]
 8003444:	63da      	str	r2, [r3, #60]	; 0x3c
 8003446:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800344a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800344e:	f102 0208 	add.w	r2, r2, #8
 8003452:	6812      	ldr	r2, [r2, #0]
 8003454:	641a      	str	r2, [r3, #64]	; 0x40
 8003456:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800345a:	f107 0318 	add.w	r3, r7, #24
 800345e:	3b18      	subs	r3, #24
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	6453      	str	r3, [r2, #68]	; 0x44
 8003464:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8003468:	f107 0318 	add.w	r3, r7, #24
 800346c:	3b18      	subs	r3, #24
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6493      	str	r3, [r2, #72]	; 0x48
 8003472:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8003476:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800347a:	f102 0208 	add.w	r2, r2, #8
 800347e:	6812      	ldr	r2, [r2, #0]
 8003480:	64da      	str	r2, [r3, #76]	; 0x4c
 8003482:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8003486:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800348a:	f102 0208 	add.w	r2, r2, #8
 800348e:	6812      	ldr	r2, [r2, #0]
 8003490:	651a      	str	r2, [r3, #80]	; 0x50
 8003492:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8003496:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800349a:	f102 0208 	add.w	r2, r2, #8
 800349e:	6812      	ldr	r2, [r2, #0]
 80034a0:	655a      	str	r2, [r3, #84]	; 0x54
 80034a2:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80034a6:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80034aa:	f102 0208 	add.w	r2, r2, #8
 80034ae:	6812      	ldr	r2, [r2, #0]
 80034b0:	659a      	str	r2, [r3, #88]	; 0x58
 80034b2:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80034b6:	f107 0318 	add.w	r3, r7, #24
 80034ba:	3b18      	subs	r3, #24
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	65d3      	str	r3, [r2, #92]	; 0x5c
 80034c0:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80034c4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80034c8:	f102 0208 	add.w	r2, r2, #8
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	661a      	str	r2, [r3, #96]	; 0x60
 80034d0:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80034d4:	f107 0318 	add.w	r3, r7, #24
 80034d8:	3b18      	subs	r3, #24
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6653      	str	r3, [r2, #100]	; 0x64
 80034de:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80034e2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80034e6:	f102 0208 	add.w	r2, r2, #8
 80034ea:	6812      	ldr	r2, [r2, #0]
 80034ec:	669a      	str	r2, [r3, #104]	; 0x68
 80034ee:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80034f2:	f107 0318 	add.w	r3, r7, #24
 80034f6:	3b18      	subs	r3, #24
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	66d3      	str	r3, [r2, #108]	; 0x6c
 80034fc:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8003500:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003504:	f102 0208 	add.w	r2, r2, #8
 8003508:	6812      	ldr	r2, [r2, #0]
 800350a:	671a      	str	r2, [r3, #112]	; 0x70
 800350c:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8003510:	f107 0318 	add.w	r3, r7, #24
 8003514:	3b18      	subs	r3, #24
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6753      	str	r3, [r2, #116]	; 0x74
 800351a:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800351e:	f107 0318 	add.w	r3, r7, #24
 8003522:	3b18      	subs	r3, #24
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	6793      	str	r3, [r2, #120]	; 0x78
 8003528:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800352c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003530:	f102 0208 	add.w	r2, r2, #8
 8003534:	6812      	ldr	r2, [r2, #0]
 8003536:	67da      	str	r2, [r3, #124]	; 0x7c
 8003538:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800353c:	f107 0318 	add.w	r3, r7, #24
 8003540:	3b18      	subs	r3, #24
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003548:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800354c:	f107 0318 	add.w	r3, r7, #24
 8003550:	3b18      	subs	r3, #24
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8003558:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800355c:	f107 0318 	add.w	r3, r7, #24
 8003560:	3b18      	subs	r3, #24
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003568:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800356c:	f107 0318 	add.w	r3, r7, #24
 8003570:	3b18      	subs	r3, #24
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003578:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800357c:	f107 0318 	add.w	r3, r7, #24
 8003580:	3b18      	subs	r3, #24
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003588:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800358c:	f107 0318 	add.w	r3, r7, #24
 8003590:	3b18      	subs	r3, #24
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003598:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800359c:	f107 0318 	add.w	r3, r7, #24
 80035a0:	3b18      	subs	r3, #24
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 80035a8:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80035ac:	f107 0318 	add.w	r3, r7, #24
 80035b0:	3b18      	subs	r3, #24
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			  textcolor, backcolor, textcolor, backcolor,  //@.@.
			  textcolor, backcolor, backcolor, textcolor,  //@..@
			  backcolor, backcolor, backcolor, backcolor,  //....
			  backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_S[10][4] = {
 80035b8:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 80035bc:	f107 0318 	add.w	r3, r7, #24
 80035c0:	3b18      	subs	r3, #24
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 80035ca:	f107 0318 	add.w	r3, r7, #24
 80035ce:	3b18      	subs	r3, #24
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6053      	str	r3, [r2, #4]
 80035d4:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 80035d8:	f107 0318 	add.w	r3, r7, #24
 80035dc:	3b18      	subs	r3, #24
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6093      	str	r3, [r2, #8]
 80035e2:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 80035e6:	f107 0318 	add.w	r3, r7, #24
 80035ea:	3b18      	subs	r3, #24
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	60d3      	str	r3, [r2, #12]
 80035f0:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 80035f4:	f107 0318 	add.w	r3, r7, #24
 80035f8:	3b18      	subs	r3, #24
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6113      	str	r3, [r2, #16]
 80035fe:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003602:	f107 0318 	add.w	r3, r7, #24
 8003606:	3b18      	subs	r3, #24
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6153      	str	r3, [r2, #20]
 800360c:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003610:	f107 0318 	add.w	r3, r7, #24
 8003614:	3b18      	subs	r3, #24
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6193      	str	r3, [r2, #24]
 800361a:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 800361e:	f107 0318 	add.w	r3, r7, #24
 8003622:	3b18      	subs	r3, #24
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	61d3      	str	r3, [r2, #28]
 8003628:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 800362c:	f107 0318 	add.w	r3, r7, #24
 8003630:	3b18      	subs	r3, #24
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6213      	str	r3, [r2, #32]
 8003636:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800363a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800363e:	f102 0208 	add.w	r2, r2, #8
 8003642:	6812      	ldr	r2, [r2, #0]
 8003644:	625a      	str	r2, [r3, #36]	; 0x24
 8003646:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800364a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800364e:	f102 0208 	add.w	r2, r2, #8
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	629a      	str	r2, [r3, #40]	; 0x28
 8003656:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800365a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800365e:	f102 0208 	add.w	r2, r2, #8
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	62da      	str	r2, [r3, #44]	; 0x2c
 8003666:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800366a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800366e:	f102 0208 	add.w	r2, r2, #8
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	631a      	str	r2, [r3, #48]	; 0x30
 8003676:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 800367a:	f107 0318 	add.w	r3, r7, #24
 800367e:	3b18      	subs	r3, #24
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6353      	str	r3, [r2, #52]	; 0x34
 8003684:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003688:	f107 0318 	add.w	r3, r7, #24
 800368c:	3b18      	subs	r3, #24
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6393      	str	r3, [r2, #56]	; 0x38
 8003692:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003696:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800369a:	f102 0208 	add.w	r2, r2, #8
 800369e:	6812      	ldr	r2, [r2, #0]
 80036a0:	63da      	str	r2, [r3, #60]	; 0x3c
 80036a2:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 80036a6:	f107 0318 	add.w	r3, r7, #24
 80036aa:	3b18      	subs	r3, #24
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6413      	str	r3, [r2, #64]	; 0x40
 80036b0:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80036b4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80036b8:	f102 0208 	add.w	r2, r2, #8
 80036bc:	6812      	ldr	r2, [r2, #0]
 80036be:	645a      	str	r2, [r3, #68]	; 0x44
 80036c0:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 80036c4:	f107 0318 	add.w	r3, r7, #24
 80036c8:	3b18      	subs	r3, #24
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	6493      	str	r3, [r2, #72]	; 0x48
 80036ce:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 80036d2:	f107 0318 	add.w	r3, r7, #24
 80036d6:	3b18      	subs	r3, #24
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036dc:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 80036e0:	f107 0318 	add.w	r3, r7, #24
 80036e4:	3b18      	subs	r3, #24
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	6513      	str	r3, [r2, #80]	; 0x50
 80036ea:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 80036ee:	f107 0318 	add.w	r3, r7, #24
 80036f2:	3b18      	subs	r3, #24
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6553      	str	r3, [r2, #84]	; 0x54
 80036f8:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80036fc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003700:	f102 0208 	add.w	r2, r2, #8
 8003704:	6812      	ldr	r2, [r2, #0]
 8003706:	659a      	str	r2, [r3, #88]	; 0x58
 8003708:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 800370c:	f107 0318 	add.w	r3, r7, #24
 8003710:	3b18      	subs	r3, #24
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003716:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800371a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800371e:	f102 0208 	add.w	r2, r2, #8
 8003722:	6812      	ldr	r2, [r2, #0]
 8003724:	661a      	str	r2, [r3, #96]	; 0x60
 8003726:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 800372a:	f107 0318 	add.w	r3, r7, #24
 800372e:	3b18      	subs	r3, #24
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6653      	str	r3, [r2, #100]	; 0x64
 8003734:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003738:	f107 0318 	add.w	r3, r7, #24
 800373c:	3b18      	subs	r3, #24
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6693      	str	r3, [r2, #104]	; 0x68
 8003742:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003746:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800374a:	f102 0208 	add.w	r2, r2, #8
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	66da      	str	r2, [r3, #108]	; 0x6c
 8003752:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003756:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800375a:	f102 0208 	add.w	r2, r2, #8
 800375e:	6812      	ldr	r2, [r2, #0]
 8003760:	671a      	str	r2, [r3, #112]	; 0x70
 8003762:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003766:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800376a:	f102 0208 	add.w	r2, r2, #8
 800376e:	6812      	ldr	r2, [r2, #0]
 8003770:	675a      	str	r2, [r3, #116]	; 0x74
 8003772:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003776:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800377a:	f102 0208 	add.w	r2, r2, #8
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	679a      	str	r2, [r3, #120]	; 0x78
 8003782:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003786:	f107 0318 	add.w	r3, r7, #24
 800378a:	3b18      	subs	r3, #24
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	67d3      	str	r3, [r2, #124]	; 0x7c
 8003790:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003794:	f107 0318 	add.w	r3, r7, #24
 8003798:	3b18      	subs	r3, #24
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80037a0:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 80037a4:	f107 0318 	add.w	r3, r7, #24
 80037a8:	3b18      	subs	r3, #24
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80037b0:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 80037b4:	f107 0318 	add.w	r3, r7, #24
 80037b8:	3b18      	subs	r3, #24
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80037c0:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 80037c4:	f107 0318 	add.w	r3, r7, #24
 80037c8:	3b18      	subs	r3, #24
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80037d0:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 80037d4:	f107 0318 	add.w	r3, r7, #24
 80037d8:	3b18      	subs	r3, #24
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037e0:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 80037e4:	f107 0318 	add.w	r3, r7, #24
 80037e8:	3b18      	subs	r3, #24
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80037f0:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 80037f4:	f107 0318 	add.w	r3, r7, #24
 80037f8:	3b18      	subs	r3, #24
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8003800:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003804:	f107 0318 	add.w	r3, r7, #24
 8003808:	3b18      	subs	r3, #24
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			  textcolor, backcolor, backcolor, textcolor,  //@..@
			  textcolor, textcolor, textcolor, backcolor,  //@@@.
			  backcolor, backcolor, backcolor, backcolor,  //....
			  backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_T[10][5] = {
 8003810:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003814:	f107 0318 	add.w	r3, r7, #24
 8003818:	3b18      	subs	r3, #24
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003822:	f107 0318 	add.w	r3, r7, #24
 8003826:	3b18      	subs	r3, #24
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6053      	str	r3, [r2, #4]
 800382c:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003830:	f107 0318 	add.w	r3, r7, #24
 8003834:	3b18      	subs	r3, #24
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6093      	str	r3, [r2, #8]
 800383a:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 800383e:	f107 0318 	add.w	r3, r7, #24
 8003842:	3b18      	subs	r3, #24
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	60d3      	str	r3, [r2, #12]
 8003848:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 800384c:	f107 0318 	add.w	r3, r7, #24
 8003850:	3b18      	subs	r3, #24
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6113      	str	r3, [r2, #16]
 8003856:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 800385a:	f107 0318 	add.w	r3, r7, #24
 800385e:	3b18      	subs	r3, #24
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	6153      	str	r3, [r2, #20]
 8003864:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003868:	f107 0318 	add.w	r3, r7, #24
 800386c:	3b18      	subs	r3, #24
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6193      	str	r3, [r2, #24]
 8003872:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003876:	f107 0318 	add.w	r3, r7, #24
 800387a:	3b18      	subs	r3, #24
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	61d3      	str	r3, [r2, #28]
 8003880:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003884:	f107 0318 	add.w	r3, r7, #24
 8003888:	3b18      	subs	r3, #24
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6213      	str	r3, [r2, #32]
 800388e:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003892:	f107 0318 	add.w	r3, r7, #24
 8003896:	3b18      	subs	r3, #24
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6253      	str	r3, [r2, #36]	; 0x24
 800389c:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80038a0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80038a4:	f102 0208 	add.w	r2, r2, #8
 80038a8:	6812      	ldr	r2, [r2, #0]
 80038aa:	629a      	str	r2, [r3, #40]	; 0x28
 80038ac:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80038b0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80038b4:	f102 0208 	add.w	r2, r2, #8
 80038b8:	6812      	ldr	r2, [r2, #0]
 80038ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80038bc:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80038c0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80038c4:	f102 0208 	add.w	r2, r2, #8
 80038c8:	6812      	ldr	r2, [r2, #0]
 80038ca:	631a      	str	r2, [r3, #48]	; 0x30
 80038cc:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80038d0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80038d4:	f102 0208 	add.w	r2, r2, #8
 80038d8:	6812      	ldr	r2, [r2, #0]
 80038da:	635a      	str	r2, [r3, #52]	; 0x34
 80038dc:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80038e0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80038e4:	f102 0208 	add.w	r2, r2, #8
 80038e8:	6812      	ldr	r2, [r2, #0]
 80038ea:	639a      	str	r2, [r3, #56]	; 0x38
 80038ec:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80038f0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80038f4:	f102 0208 	add.w	r2, r2, #8
 80038f8:	6812      	ldr	r2, [r2, #0]
 80038fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80038fc:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003900:	f107 0318 	add.w	r3, r7, #24
 8003904:	3b18      	subs	r3, #24
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6413      	str	r3, [r2, #64]	; 0x40
 800390a:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800390e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003912:	f102 0208 	add.w	r2, r2, #8
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	645a      	str	r2, [r3, #68]	; 0x44
 800391a:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 800391e:	f107 0318 	add.w	r3, r7, #24
 8003922:	3b18      	subs	r3, #24
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6493      	str	r3, [r2, #72]	; 0x48
 8003928:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 800392c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003930:	f102 0208 	add.w	r2, r2, #8
 8003934:	6812      	ldr	r2, [r2, #0]
 8003936:	64da      	str	r2, [r3, #76]	; 0x4c
 8003938:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 800393c:	f107 0318 	add.w	r3, r7, #24
 8003940:	3b18      	subs	r3, #24
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6513      	str	r3, [r2, #80]	; 0x50
 8003946:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 800394a:	f107 0318 	add.w	r3, r7, #24
 800394e:	3b18      	subs	r3, #24
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6553      	str	r3, [r2, #84]	; 0x54
 8003954:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003958:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800395c:	f102 0208 	add.w	r2, r2, #8
 8003960:	6812      	ldr	r2, [r2, #0]
 8003962:	659a      	str	r2, [r3, #88]	; 0x58
 8003964:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003968:	f107 0318 	add.w	r3, r7, #24
 800396c:	3b18      	subs	r3, #24
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003972:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003976:	f107 0318 	add.w	r3, r7, #24
 800397a:	3b18      	subs	r3, #24
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6613      	str	r3, [r2, #96]	; 0x60
 8003980:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003984:	f107 0318 	add.w	r3, r7, #24
 8003988:	3b18      	subs	r3, #24
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6653      	str	r3, [r2, #100]	; 0x64
 800398e:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003992:	f107 0318 	add.w	r3, r7, #24
 8003996:	3b18      	subs	r3, #24
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6693      	str	r3, [r2, #104]	; 0x68
 800399c:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80039a0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80039a4:	f102 0208 	add.w	r2, r2, #8
 80039a8:	6812      	ldr	r2, [r2, #0]
 80039aa:	66da      	str	r2, [r3, #108]	; 0x6c
 80039ac:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 80039b0:	f107 0318 	add.w	r3, r7, #24
 80039b4:	3b18      	subs	r3, #24
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6713      	str	r3, [r2, #112]	; 0x70
 80039ba:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 80039be:	f107 0318 	add.w	r3, r7, #24
 80039c2:	3b18      	subs	r3, #24
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6753      	str	r3, [r2, #116]	; 0x74
 80039c8:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 80039cc:	f107 0318 	add.w	r3, r7, #24
 80039d0:	3b18      	subs	r3, #24
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6793      	str	r3, [r2, #120]	; 0x78
 80039d6:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 80039da:	f107 0318 	add.w	r3, r7, #24
 80039de:	3b18      	subs	r3, #24
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	67d3      	str	r3, [r2, #124]	; 0x7c
 80039e4:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 80039e8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80039ec:	f102 0208 	add.w	r2, r2, #8
 80039f0:	6812      	ldr	r2, [r2, #0]
 80039f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80039f6:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 80039fa:	f107 0318 	add.w	r3, r7, #24
 80039fe:	3b18      	subs	r3, #24
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8003a06:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003a0a:	f107 0318 	add.w	r3, r7, #24
 8003a0e:	3b18      	subs	r3, #24
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003a16:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003a1a:	f107 0318 	add.w	r3, r7, #24
 8003a1e:	3b18      	subs	r3, #24
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a26:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003a2a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003a2e:	f102 0208 	add.w	r2, r2, #8
 8003a32:	6812      	ldr	r2, [r2, #0]
 8003a34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003a38:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003a3c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003a40:	f102 0208 	add.w	r2, r2, #8
 8003a44:	6812      	ldr	r2, [r2, #0]
 8003a46:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8003a4a:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003a4e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003a52:	f102 0208 	add.w	r2, r2, #8
 8003a56:	6812      	ldr	r2, [r2, #0]
 8003a58:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003a5c:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003a60:	f107 0318 	add.w	r3, r7, #24
 8003a64:	3b18      	subs	r3, #24
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003a6c:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003a70:	f107 0318 	add.w	r3, r7, #24
 8003a74:	3b18      	subs	r3, #24
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8003a7c:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003a80:	f107 0318 	add.w	r3, r7, #24
 8003a84:	3b18      	subs	r3, #24
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8003a8c:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003a90:	f107 0318 	add.w	r3, r7, #24
 8003a94:	3b18      	subs	r3, #24
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8003a9c:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003aa0:	f107 0318 	add.w	r3, r7, #24
 8003aa4:	3b18      	subs	r3, #24
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 8003aac:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003ab0:	f107 0318 	add.w	r3, r7, #24
 8003ab4:	3b18      	subs	r3, #24
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
 8003abc:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003ac0:	f107 0318 	add.w	r3, r7, #24
 8003ac4:	3b18      	subs	r3, #24
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
 8003acc:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003ad0:	f107 0318 	add.w	r3, r7, #24
 8003ad4:	3b18      	subs	r3, #24
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
 8003adc:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003ae0:	f107 0318 	add.w	r3, r7, #24
 8003ae4:	3b18      	subs	r3, #24
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
 8003aec:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003af0:	f107 0318 	add.w	r3, r7, #24
 8003af4:	3b18      	subs	r3, #24
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003afc:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003b00:	f107 0318 	add.w	r3, r7, #24
 8003b04:	3b18      	subs	r3, #24
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
			  backcolor, backcolor, textcolor, backcolor, backcolor,  //..@..
			  backcolor, textcolor, textcolor, textcolor, backcolor,  //.@@@.
			  backcolor, backcolor, backcolor, backcolor, backcolor,  //.....
			  backcolor, backcolor, backcolor, backcolor, backcolor,  //.....
	};
	int letter_U[10][4] = {
 8003b0c:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003b10:	f107 0318 	add.w	r3, r7, #24
 8003b14:	3b18      	subs	r3, #24
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003b1e:	f107 0318 	add.w	r3, r7, #24
 8003b22:	3b18      	subs	r3, #24
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	6053      	str	r3, [r2, #4]
 8003b28:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003b2c:	f107 0318 	add.w	r3, r7, #24
 8003b30:	3b18      	subs	r3, #24
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6093      	str	r3, [r2, #8]
 8003b36:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003b3a:	f107 0318 	add.w	r3, r7, #24
 8003b3e:	3b18      	subs	r3, #24
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	60d3      	str	r3, [r2, #12]
 8003b44:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003b48:	f107 0318 	add.w	r3, r7, #24
 8003b4c:	3b18      	subs	r3, #24
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6113      	str	r3, [r2, #16]
 8003b52:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003b56:	f107 0318 	add.w	r3, r7, #24
 8003b5a:	3b18      	subs	r3, #24
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6153      	str	r3, [r2, #20]
 8003b60:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003b64:	f107 0318 	add.w	r3, r7, #24
 8003b68:	3b18      	subs	r3, #24
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6193      	str	r3, [r2, #24]
 8003b6e:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003b72:	f107 0318 	add.w	r3, r7, #24
 8003b76:	3b18      	subs	r3, #24
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	61d3      	str	r3, [r2, #28]
 8003b7c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003b80:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003b84:	f102 0208 	add.w	r2, r2, #8
 8003b88:	6812      	ldr	r2, [r2, #0]
 8003b8a:	621a      	str	r2, [r3, #32]
 8003b8c:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003b90:	f107 0318 	add.w	r3, r7, #24
 8003b94:	3b18      	subs	r3, #24
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6253      	str	r3, [r2, #36]	; 0x24
 8003b9a:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003b9e:	f107 0318 	add.w	r3, r7, #24
 8003ba2:	3b18      	subs	r3, #24
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6293      	str	r3, [r2, #40]	; 0x28
 8003ba8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003bac:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003bb0:	f102 0208 	add.w	r2, r2, #8
 8003bb4:	6812      	ldr	r2, [r2, #0]
 8003bb6:	62da      	str	r2, [r3, #44]	; 0x2c
 8003bb8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003bbc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003bc0:	f102 0208 	add.w	r2, r2, #8
 8003bc4:	6812      	ldr	r2, [r2, #0]
 8003bc6:	631a      	str	r2, [r3, #48]	; 0x30
 8003bc8:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003bcc:	f107 0318 	add.w	r3, r7, #24
 8003bd0:	3b18      	subs	r3, #24
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	6353      	str	r3, [r2, #52]	; 0x34
 8003bd6:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003bda:	f107 0318 	add.w	r3, r7, #24
 8003bde:	3b18      	subs	r3, #24
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6393      	str	r3, [r2, #56]	; 0x38
 8003be4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003be8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003bec:	f102 0208 	add.w	r2, r2, #8
 8003bf0:	6812      	ldr	r2, [r2, #0]
 8003bf2:	63da      	str	r2, [r3, #60]	; 0x3c
 8003bf4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003bf8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003bfc:	f102 0208 	add.w	r2, r2, #8
 8003c00:	6812      	ldr	r2, [r2, #0]
 8003c02:	641a      	str	r2, [r3, #64]	; 0x40
 8003c04:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003c08:	f107 0318 	add.w	r3, r7, #24
 8003c0c:	3b18      	subs	r3, #24
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6453      	str	r3, [r2, #68]	; 0x44
 8003c12:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003c16:	f107 0318 	add.w	r3, r7, #24
 8003c1a:	3b18      	subs	r3, #24
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6493      	str	r3, [r2, #72]	; 0x48
 8003c20:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003c24:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003c28:	f102 0208 	add.w	r2, r2, #8
 8003c2c:	6812      	ldr	r2, [r2, #0]
 8003c2e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c30:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003c34:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003c38:	f102 0208 	add.w	r2, r2, #8
 8003c3c:	6812      	ldr	r2, [r2, #0]
 8003c3e:	651a      	str	r2, [r3, #80]	; 0x50
 8003c40:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003c44:	f107 0318 	add.w	r3, r7, #24
 8003c48:	3b18      	subs	r3, #24
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6553      	str	r3, [r2, #84]	; 0x54
 8003c4e:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003c52:	f107 0318 	add.w	r3, r7, #24
 8003c56:	3b18      	subs	r3, #24
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c5c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003c60:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003c64:	f102 0208 	add.w	r2, r2, #8
 8003c68:	6812      	ldr	r2, [r2, #0]
 8003c6a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c6c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003c70:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003c74:	f102 0208 	add.w	r2, r2, #8
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	661a      	str	r2, [r3, #96]	; 0x60
 8003c7c:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003c80:	f107 0318 	add.w	r3, r7, #24
 8003c84:	3b18      	subs	r3, #24
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6653      	str	r3, [r2, #100]	; 0x64
 8003c8a:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003c8e:	f107 0318 	add.w	r3, r7, #24
 8003c92:	3b18      	subs	r3, #24
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6693      	str	r3, [r2, #104]	; 0x68
 8003c98:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003c9c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003ca0:	f102 0208 	add.w	r2, r2, #8
 8003ca4:	6812      	ldr	r2, [r2, #0]
 8003ca6:	66da      	str	r2, [r3, #108]	; 0x6c
 8003ca8:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003cac:	f107 0318 	add.w	r3, r7, #24
 8003cb0:	3b18      	subs	r3, #24
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8003cb6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003cba:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003cbe:	f102 0208 	add.w	r2, r2, #8
 8003cc2:	6812      	ldr	r2, [r2, #0]
 8003cc4:	675a      	str	r2, [r3, #116]	; 0x74
 8003cc6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003cca:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003cce:	f102 0208 	add.w	r2, r2, #8
 8003cd2:	6812      	ldr	r2, [r2, #0]
 8003cd4:	679a      	str	r2, [r3, #120]	; 0x78
 8003cd6:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003cda:	f107 0318 	add.w	r3, r7, #24
 8003cde:	3b18      	subs	r3, #24
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	67d3      	str	r3, [r2, #124]	; 0x7c
 8003ce4:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003ce8:	f107 0318 	add.w	r3, r7, #24
 8003cec:	3b18      	subs	r3, #24
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003cf4:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003cf8:	f107 0318 	add.w	r3, r7, #24
 8003cfc:	3b18      	subs	r3, #24
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8003d04:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003d08:	f107 0318 	add.w	r3, r7, #24
 8003d0c:	3b18      	subs	r3, #24
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003d14:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003d18:	f107 0318 	add.w	r3, r7, #24
 8003d1c:	3b18      	subs	r3, #24
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003d24:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003d28:	f107 0318 	add.w	r3, r7, #24
 8003d2c:	3b18      	subs	r3, #24
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003d34:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003d38:	f107 0318 	add.w	r3, r7, #24
 8003d3c:	3b18      	subs	r3, #24
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003d44:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003d48:	f107 0318 	add.w	r3, r7, #24
 8003d4c:	3b18      	subs	r3, #24
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8003d54:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003d58:	f107 0318 	add.w	r3, r7, #24
 8003d5c:	3b18      	subs	r3, #24
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			  textcolor, backcolor, backcolor, textcolor,  //@..@
			  backcolor, textcolor, textcolor, backcolor,  //.@@.
			  backcolor, backcolor, backcolor, backcolor,  //....
			  backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_V[10][4] = {
 8003d64:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003d68:	f107 0318 	add.w	r3, r7, #24
 8003d6c:	3b18      	subs	r3, #24
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003d76:	f107 0318 	add.w	r3, r7, #24
 8003d7a:	3b18      	subs	r3, #24
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	6053      	str	r3, [r2, #4]
 8003d80:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003d84:	f107 0318 	add.w	r3, r7, #24
 8003d88:	3b18      	subs	r3, #24
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6093      	str	r3, [r2, #8]
 8003d8e:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003d92:	f107 0318 	add.w	r3, r7, #24
 8003d96:	3b18      	subs	r3, #24
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	60d3      	str	r3, [r2, #12]
 8003d9c:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003da0:	f107 0318 	add.w	r3, r7, #24
 8003da4:	3b18      	subs	r3, #24
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6113      	str	r3, [r2, #16]
 8003daa:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003dae:	f107 0318 	add.w	r3, r7, #24
 8003db2:	3b18      	subs	r3, #24
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6153      	str	r3, [r2, #20]
 8003db8:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003dbc:	f107 0318 	add.w	r3, r7, #24
 8003dc0:	3b18      	subs	r3, #24
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6193      	str	r3, [r2, #24]
 8003dc6:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003dca:	f107 0318 	add.w	r3, r7, #24
 8003dce:	3b18      	subs	r3, #24
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	61d3      	str	r3, [r2, #28]
 8003dd4:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003dd8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003ddc:	f102 0208 	add.w	r2, r2, #8
 8003de0:	6812      	ldr	r2, [r2, #0]
 8003de2:	621a      	str	r2, [r3, #32]
 8003de4:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003de8:	f107 0318 	add.w	r3, r7, #24
 8003dec:	3b18      	subs	r3, #24
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6253      	str	r3, [r2, #36]	; 0x24
 8003df2:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003df6:	f107 0318 	add.w	r3, r7, #24
 8003dfa:	3b18      	subs	r3, #24
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6293      	str	r3, [r2, #40]	; 0x28
 8003e00:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003e04:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003e08:	f102 0208 	add.w	r2, r2, #8
 8003e0c:	6812      	ldr	r2, [r2, #0]
 8003e0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e10:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003e14:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003e18:	f102 0208 	add.w	r2, r2, #8
 8003e1c:	6812      	ldr	r2, [r2, #0]
 8003e1e:	631a      	str	r2, [r3, #48]	; 0x30
 8003e20:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003e24:	f107 0318 	add.w	r3, r7, #24
 8003e28:	3b18      	subs	r3, #24
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	6353      	str	r3, [r2, #52]	; 0x34
 8003e2e:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003e32:	f107 0318 	add.w	r3, r7, #24
 8003e36:	3b18      	subs	r3, #24
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6393      	str	r3, [r2, #56]	; 0x38
 8003e3c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003e40:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003e44:	f102 0208 	add.w	r2, r2, #8
 8003e48:	6812      	ldr	r2, [r2, #0]
 8003e4a:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e4c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003e50:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003e54:	f102 0208 	add.w	r2, r2, #8
 8003e58:	6812      	ldr	r2, [r2, #0]
 8003e5a:	641a      	str	r2, [r3, #64]	; 0x40
 8003e5c:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003e60:	f107 0318 	add.w	r3, r7, #24
 8003e64:	3b18      	subs	r3, #24
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	6453      	str	r3, [r2, #68]	; 0x44
 8003e6a:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003e6e:	f107 0318 	add.w	r3, r7, #24
 8003e72:	3b18      	subs	r3, #24
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6493      	str	r3, [r2, #72]	; 0x48
 8003e78:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003e7c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003e80:	f102 0208 	add.w	r2, r2, #8
 8003e84:	6812      	ldr	r2, [r2, #0]
 8003e86:	64da      	str	r2, [r3, #76]	; 0x4c
 8003e88:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003e8c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003e90:	f102 0208 	add.w	r2, r2, #8
 8003e94:	6812      	ldr	r2, [r2, #0]
 8003e96:	651a      	str	r2, [r3, #80]	; 0x50
 8003e98:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003e9c:	f107 0318 	add.w	r3, r7, #24
 8003ea0:	3b18      	subs	r3, #24
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6553      	str	r3, [r2, #84]	; 0x54
 8003ea6:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003eaa:	f107 0318 	add.w	r3, r7, #24
 8003eae:	3b18      	subs	r3, #24
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6593      	str	r3, [r2, #88]	; 0x58
 8003eb4:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003eb8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003ebc:	f102 0208 	add.w	r2, r2, #8
 8003ec0:	6812      	ldr	r2, [r2, #0]
 8003ec2:	65da      	str	r2, [r3, #92]	; 0x5c
 8003ec4:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003ec8:	f107 0318 	add.w	r3, r7, #24
 8003ecc:	3b18      	subs	r3, #24
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6613      	str	r3, [r2, #96]	; 0x60
 8003ed2:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003ed6:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003eda:	f102 0208 	add.w	r2, r2, #8
 8003ede:	6812      	ldr	r2, [r2, #0]
 8003ee0:	665a      	str	r2, [r3, #100]	; 0x64
 8003ee2:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003ee6:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003eea:	f102 0208 	add.w	r2, r2, #8
 8003eee:	6812      	ldr	r2, [r2, #0]
 8003ef0:	669a      	str	r2, [r3, #104]	; 0x68
 8003ef2:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003ef6:	f107 0318 	add.w	r3, r7, #24
 8003efa:	3b18      	subs	r3, #24
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	66d3      	str	r3, [r2, #108]	; 0x6c
 8003f00:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003f04:	f107 0318 	add.w	r3, r7, #24
 8003f08:	3b18      	subs	r3, #24
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f0e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003f12:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003f16:	f102 0208 	add.w	r2, r2, #8
 8003f1a:	6812      	ldr	r2, [r2, #0]
 8003f1c:	675a      	str	r2, [r3, #116]	; 0x74
 8003f1e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8003f22:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003f26:	f102 0208 	add.w	r2, r2, #8
 8003f2a:	6812      	ldr	r2, [r2, #0]
 8003f2c:	679a      	str	r2, [r3, #120]	; 0x78
 8003f2e:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003f32:	f107 0318 	add.w	r3, r7, #24
 8003f36:	3b18      	subs	r3, #24
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	67d3      	str	r3, [r2, #124]	; 0x7c
 8003f3c:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003f40:	f107 0318 	add.w	r3, r7, #24
 8003f44:	3b18      	subs	r3, #24
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f4c:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003f50:	f107 0318 	add.w	r3, r7, #24
 8003f54:	3b18      	subs	r3, #24
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8003f5c:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003f60:	f107 0318 	add.w	r3, r7, #24
 8003f64:	3b18      	subs	r3, #24
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003f6c:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003f70:	f107 0318 	add.w	r3, r7, #24
 8003f74:	3b18      	subs	r3, #24
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f7c:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003f80:	f107 0318 	add.w	r3, r7, #24
 8003f84:	3b18      	subs	r3, #24
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f8c:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003f90:	f107 0318 	add.w	r3, r7, #24
 8003f94:	3b18      	subs	r3, #24
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003f9c:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003fa0:	f107 0318 	add.w	r3, r7, #24
 8003fa4:	3b18      	subs	r3, #24
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8003fac:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8003fb0:	f107 0318 	add.w	r3, r7, #24
 8003fb4:	3b18      	subs	r3, #24
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			  backcolor, textcolor, textcolor, backcolor,  //.@@.
			  backcolor, textcolor, textcolor, backcolor,  //.@@.
			  backcolor, backcolor, backcolor, backcolor,  //....
			  backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_W[10][4] = {
 8003fbc:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8003fc0:	f107 0318 	add.w	r3, r7, #24
 8003fc4:	3b18      	subs	r3, #24
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8003fce:	f107 0318 	add.w	r3, r7, #24
 8003fd2:	3b18      	subs	r3, #24
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6053      	str	r3, [r2, #4]
 8003fd8:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8003fdc:	f107 0318 	add.w	r3, r7, #24
 8003fe0:	3b18      	subs	r3, #24
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6093      	str	r3, [r2, #8]
 8003fe6:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8003fea:	f107 0318 	add.w	r3, r7, #24
 8003fee:	3b18      	subs	r3, #24
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	60d3      	str	r3, [r2, #12]
 8003ff4:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8003ff8:	f107 0318 	add.w	r3, r7, #24
 8003ffc:	3b18      	subs	r3, #24
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6113      	str	r3, [r2, #16]
 8004002:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004006:	f107 0318 	add.w	r3, r7, #24
 800400a:	3b18      	subs	r3, #24
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6153      	str	r3, [r2, #20]
 8004010:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004014:	f107 0318 	add.w	r3, r7, #24
 8004018:	3b18      	subs	r3, #24
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6193      	str	r3, [r2, #24]
 800401e:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004022:	f107 0318 	add.w	r3, r7, #24
 8004026:	3b18      	subs	r3, #24
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	61d3      	str	r3, [r2, #28]
 800402c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004030:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004034:	f102 0208 	add.w	r2, r2, #8
 8004038:	6812      	ldr	r2, [r2, #0]
 800403a:	621a      	str	r2, [r3, #32]
 800403c:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004040:	f107 0318 	add.w	r3, r7, #24
 8004044:	3b18      	subs	r3, #24
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6253      	str	r3, [r2, #36]	; 0x24
 800404a:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800404e:	f107 0318 	add.w	r3, r7, #24
 8004052:	3b18      	subs	r3, #24
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6293      	str	r3, [r2, #40]	; 0x28
 8004058:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800405c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004060:	f102 0208 	add.w	r2, r2, #8
 8004064:	6812      	ldr	r2, [r2, #0]
 8004066:	62da      	str	r2, [r3, #44]	; 0x2c
 8004068:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800406c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004070:	f102 0208 	add.w	r2, r2, #8
 8004074:	6812      	ldr	r2, [r2, #0]
 8004076:	631a      	str	r2, [r3, #48]	; 0x30
 8004078:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800407c:	f107 0318 	add.w	r3, r7, #24
 8004080:	3b18      	subs	r3, #24
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6353      	str	r3, [r2, #52]	; 0x34
 8004086:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800408a:	f107 0318 	add.w	r3, r7, #24
 800408e:	3b18      	subs	r3, #24
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6393      	str	r3, [r2, #56]	; 0x38
 8004094:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004098:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800409c:	f102 0208 	add.w	r2, r2, #8
 80040a0:	6812      	ldr	r2, [r2, #0]
 80040a2:	63da      	str	r2, [r3, #60]	; 0x3c
 80040a4:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80040a8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80040ac:	f102 0208 	add.w	r2, r2, #8
 80040b0:	6812      	ldr	r2, [r2, #0]
 80040b2:	641a      	str	r2, [r3, #64]	; 0x40
 80040b4:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80040b8:	f107 0318 	add.w	r3, r7, #24
 80040bc:	3b18      	subs	r3, #24
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6453      	str	r3, [r2, #68]	; 0x44
 80040c2:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80040c6:	f107 0318 	add.w	r3, r7, #24
 80040ca:	3b18      	subs	r3, #24
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6493      	str	r3, [r2, #72]	; 0x48
 80040d0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80040d4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80040d8:	f102 0208 	add.w	r2, r2, #8
 80040dc:	6812      	ldr	r2, [r2, #0]
 80040de:	64da      	str	r2, [r3, #76]	; 0x4c
 80040e0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80040e4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80040e8:	f102 0208 	add.w	r2, r2, #8
 80040ec:	6812      	ldr	r2, [r2, #0]
 80040ee:	651a      	str	r2, [r3, #80]	; 0x50
 80040f0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80040f4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80040f8:	f102 0208 	add.w	r2, r2, #8
 80040fc:	6812      	ldr	r2, [r2, #0]
 80040fe:	655a      	str	r2, [r3, #84]	; 0x54
 8004100:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004104:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004108:	f102 0208 	add.w	r2, r2, #8
 800410c:	6812      	ldr	r2, [r2, #0]
 800410e:	659a      	str	r2, [r3, #88]	; 0x58
 8004110:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004114:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004118:	f102 0208 	add.w	r2, r2, #8
 800411c:	6812      	ldr	r2, [r2, #0]
 800411e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004120:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004124:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004128:	f102 0208 	add.w	r2, r2, #8
 800412c:	6812      	ldr	r2, [r2, #0]
 800412e:	661a      	str	r2, [r3, #96]	; 0x60
 8004130:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004134:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004138:	f102 0208 	add.w	r2, r2, #8
 800413c:	6812      	ldr	r2, [r2, #0]
 800413e:	665a      	str	r2, [r3, #100]	; 0x64
 8004140:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004144:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004148:	f102 0208 	add.w	r2, r2, #8
 800414c:	6812      	ldr	r2, [r2, #0]
 800414e:	669a      	str	r2, [r3, #104]	; 0x68
 8004150:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004154:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004158:	f102 0208 	add.w	r2, r2, #8
 800415c:	6812      	ldr	r2, [r2, #0]
 800415e:	66da      	str	r2, [r3, #108]	; 0x6c
 8004160:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004164:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004168:	f102 0208 	add.w	r2, r2, #8
 800416c:	6812      	ldr	r2, [r2, #0]
 800416e:	671a      	str	r2, [r3, #112]	; 0x70
 8004170:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004174:	f107 0318 	add.w	r3, r7, #24
 8004178:	3b18      	subs	r3, #24
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6753      	str	r3, [r2, #116]	; 0x74
 800417e:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004182:	f107 0318 	add.w	r3, r7, #24
 8004186:	3b18      	subs	r3, #24
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	6793      	str	r3, [r2, #120]	; 0x78
 800418c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004190:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004194:	f102 0208 	add.w	r2, r2, #8
 8004198:	6812      	ldr	r2, [r2, #0]
 800419a:	67da      	str	r2, [r3, #124]	; 0x7c
 800419c:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80041a0:	f107 0318 	add.w	r3, r7, #24
 80041a4:	3b18      	subs	r3, #24
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80041ac:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80041b0:	f107 0318 	add.w	r3, r7, #24
 80041b4:	3b18      	subs	r3, #24
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80041bc:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80041c0:	f107 0318 	add.w	r3, r7, #24
 80041c4:	3b18      	subs	r3, #24
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80041cc:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80041d0:	f107 0318 	add.w	r3, r7, #24
 80041d4:	3b18      	subs	r3, #24
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80041dc:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80041e0:	f107 0318 	add.w	r3, r7, #24
 80041e4:	3b18      	subs	r3, #24
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041ec:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80041f0:	f107 0318 	add.w	r3, r7, #24
 80041f4:	3b18      	subs	r3, #24
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80041fc:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004200:	f107 0318 	add.w	r3, r7, #24
 8004204:	3b18      	subs	r3, #24
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800420c:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004210:	f107 0318 	add.w	r3, r7, #24
 8004214:	3b18      	subs	r3, #24
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			  textcolor, textcolor, textcolor, textcolor,  //@@@@
			  textcolor, backcolor, backcolor, textcolor,  //@..@
			  backcolor, backcolor, backcolor, backcolor,  //....
			  backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_X[10][4] = {
 800421c:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004220:	f107 0318 	add.w	r3, r7, #24
 8004224:	3b18      	subs	r3, #24
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 800422e:	f107 0318 	add.w	r3, r7, #24
 8004232:	3b18      	subs	r3, #24
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	6053      	str	r3, [r2, #4]
 8004238:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 800423c:	f107 0318 	add.w	r3, r7, #24
 8004240:	3b18      	subs	r3, #24
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6093      	str	r3, [r2, #8]
 8004246:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 800424a:	f107 0318 	add.w	r3, r7, #24
 800424e:	3b18      	subs	r3, #24
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	60d3      	str	r3, [r2, #12]
 8004254:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004258:	f107 0318 	add.w	r3, r7, #24
 800425c:	3b18      	subs	r3, #24
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6113      	str	r3, [r2, #16]
 8004262:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004266:	f107 0318 	add.w	r3, r7, #24
 800426a:	3b18      	subs	r3, #24
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6153      	str	r3, [r2, #20]
 8004270:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004274:	f107 0318 	add.w	r3, r7, #24
 8004278:	3b18      	subs	r3, #24
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6193      	str	r3, [r2, #24]
 800427e:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004282:	f107 0318 	add.w	r3, r7, #24
 8004286:	3b18      	subs	r3, #24
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	61d3      	str	r3, [r2, #28]
 800428c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8004290:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004294:	f102 0208 	add.w	r2, r2, #8
 8004298:	6812      	ldr	r2, [r2, #0]
 800429a:	621a      	str	r2, [r3, #32]
 800429c:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80042a0:	f107 0318 	add.w	r3, r7, #24
 80042a4:	3b18      	subs	r3, #24
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	6253      	str	r3, [r2, #36]	; 0x24
 80042aa:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80042ae:	f107 0318 	add.w	r3, r7, #24
 80042b2:	3b18      	subs	r3, #24
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6293      	str	r3, [r2, #40]	; 0x28
 80042b8:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80042bc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80042c0:	f102 0208 	add.w	r2, r2, #8
 80042c4:	6812      	ldr	r2, [r2, #0]
 80042c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80042c8:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80042cc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80042d0:	f102 0208 	add.w	r2, r2, #8
 80042d4:	6812      	ldr	r2, [r2, #0]
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30
 80042d8:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80042dc:	f107 0318 	add.w	r3, r7, #24
 80042e0:	3b18      	subs	r3, #24
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6353      	str	r3, [r2, #52]	; 0x34
 80042e6:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80042ea:	f107 0318 	add.w	r3, r7, #24
 80042ee:	3b18      	subs	r3, #24
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6393      	str	r3, [r2, #56]	; 0x38
 80042f4:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80042f8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80042fc:	f102 0208 	add.w	r2, r2, #8
 8004300:	6812      	ldr	r2, [r2, #0]
 8004302:	63da      	str	r2, [r3, #60]	; 0x3c
 8004304:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004308:	f107 0318 	add.w	r3, r7, #24
 800430c:	3b18      	subs	r3, #24
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6413      	str	r3, [r2, #64]	; 0x40
 8004312:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8004316:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800431a:	f102 0208 	add.w	r2, r2, #8
 800431e:	6812      	ldr	r2, [r2, #0]
 8004320:	645a      	str	r2, [r3, #68]	; 0x44
 8004322:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8004326:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800432a:	f102 0208 	add.w	r2, r2, #8
 800432e:	6812      	ldr	r2, [r2, #0]
 8004330:	649a      	str	r2, [r3, #72]	; 0x48
 8004332:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004336:	f107 0318 	add.w	r3, r7, #24
 800433a:	3b18      	subs	r3, #24
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004340:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004344:	f107 0318 	add.w	r3, r7, #24
 8004348:	3b18      	subs	r3, #24
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6513      	str	r3, [r2, #80]	; 0x50
 800434e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8004352:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004356:	f102 0208 	add.w	r2, r2, #8
 800435a:	6812      	ldr	r2, [r2, #0]
 800435c:	655a      	str	r2, [r3, #84]	; 0x54
 800435e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8004362:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004366:	f102 0208 	add.w	r2, r2, #8
 800436a:	6812      	ldr	r2, [r2, #0]
 800436c:	659a      	str	r2, [r3, #88]	; 0x58
 800436e:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004372:	f107 0318 	add.w	r3, r7, #24
 8004376:	3b18      	subs	r3, #24
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	65d3      	str	r3, [r2, #92]	; 0x5c
 800437c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8004380:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004384:	f102 0208 	add.w	r2, r2, #8
 8004388:	6812      	ldr	r2, [r2, #0]
 800438a:	661a      	str	r2, [r3, #96]	; 0x60
 800438c:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004390:	f107 0318 	add.w	r3, r7, #24
 8004394:	3b18      	subs	r3, #24
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6653      	str	r3, [r2, #100]	; 0x64
 800439a:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 800439e:	f107 0318 	add.w	r3, r7, #24
 80043a2:	3b18      	subs	r3, #24
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6693      	str	r3, [r2, #104]	; 0x68
 80043a8:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80043ac:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80043b0:	f102 0208 	add.w	r2, r2, #8
 80043b4:	6812      	ldr	r2, [r2, #0]
 80043b6:	66da      	str	r2, [r3, #108]	; 0x6c
 80043b8:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80043bc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80043c0:	f102 0208 	add.w	r2, r2, #8
 80043c4:	6812      	ldr	r2, [r2, #0]
 80043c6:	671a      	str	r2, [r3, #112]	; 0x70
 80043c8:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80043cc:	f107 0318 	add.w	r3, r7, #24
 80043d0:	3b18      	subs	r3, #24
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6753      	str	r3, [r2, #116]	; 0x74
 80043d6:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80043da:	f107 0318 	add.w	r3, r7, #24
 80043de:	3b18      	subs	r3, #24
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6793      	str	r3, [r2, #120]	; 0x78
 80043e4:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80043e8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80043ec:	f102 0208 	add.w	r2, r2, #8
 80043f0:	6812      	ldr	r2, [r2, #0]
 80043f2:	67da      	str	r2, [r3, #124]	; 0x7c
 80043f4:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80043f8:	f107 0318 	add.w	r3, r7, #24
 80043fc:	3b18      	subs	r3, #24
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004404:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004408:	f107 0318 	add.w	r3, r7, #24
 800440c:	3b18      	subs	r3, #24
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8004414:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004418:	f107 0318 	add.w	r3, r7, #24
 800441c:	3b18      	subs	r3, #24
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004424:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004428:	f107 0318 	add.w	r3, r7, #24
 800442c:	3b18      	subs	r3, #24
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004434:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004438:	f107 0318 	add.w	r3, r7, #24
 800443c:	3b18      	subs	r3, #24
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004444:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004448:	f107 0318 	add.w	r3, r7, #24
 800444c:	3b18      	subs	r3, #24
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004454:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004458:	f107 0318 	add.w	r3, r7, #24
 800445c:	3b18      	subs	r3, #24
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8004464:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004468:	f107 0318 	add.w	r3, r7, #24
 800446c:	3b18      	subs	r3, #24
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
			  textcolor, backcolor, backcolor, textcolor,  //@..@
			  textcolor, backcolor, backcolor, textcolor,  //@..@
			  backcolor, backcolor, backcolor, backcolor,  //....
			  backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_Y[10][5] = {
 8004474:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004478:	3b08      	subs	r3, #8
 800447a:	f107 0218 	add.w	r2, r7, #24
 800447e:	3a18      	subs	r2, #24
 8004480:	6812      	ldr	r2, [r2, #0]
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004488:	3b08      	subs	r3, #8
 800448a:	f107 0218 	add.w	r2, r7, #24
 800448e:	3a18      	subs	r2, #24
 8004490:	6812      	ldr	r2, [r2, #0]
 8004492:	605a      	str	r2, [r3, #4]
 8004494:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004498:	3b08      	subs	r3, #8
 800449a:	f107 0218 	add.w	r2, r7, #24
 800449e:	3a18      	subs	r2, #24
 80044a0:	6812      	ldr	r2, [r2, #0]
 80044a2:	609a      	str	r2, [r3, #8]
 80044a4:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80044a8:	3b08      	subs	r3, #8
 80044aa:	f107 0218 	add.w	r2, r7, #24
 80044ae:	3a18      	subs	r2, #24
 80044b0:	6812      	ldr	r2, [r2, #0]
 80044b2:	60da      	str	r2, [r3, #12]
 80044b4:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80044b8:	3b08      	subs	r3, #8
 80044ba:	f107 0218 	add.w	r2, r7, #24
 80044be:	3a18      	subs	r2, #24
 80044c0:	6812      	ldr	r2, [r2, #0]
 80044c2:	611a      	str	r2, [r3, #16]
 80044c4:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80044c8:	3b08      	subs	r3, #8
 80044ca:	f107 0218 	add.w	r2, r7, #24
 80044ce:	3a18      	subs	r2, #24
 80044d0:	6812      	ldr	r2, [r2, #0]
 80044d2:	615a      	str	r2, [r3, #20]
 80044d4:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80044d8:	3b08      	subs	r3, #8
 80044da:	f107 0218 	add.w	r2, r7, #24
 80044de:	3a18      	subs	r2, #24
 80044e0:	6812      	ldr	r2, [r2, #0]
 80044e2:	619a      	str	r2, [r3, #24]
 80044e4:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80044e8:	3b08      	subs	r3, #8
 80044ea:	f107 0218 	add.w	r2, r7, #24
 80044ee:	3a18      	subs	r2, #24
 80044f0:	6812      	ldr	r2, [r2, #0]
 80044f2:	61da      	str	r2, [r3, #28]
 80044f4:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80044f8:	3b08      	subs	r3, #8
 80044fa:	f107 0218 	add.w	r2, r7, #24
 80044fe:	3a18      	subs	r2, #24
 8004500:	6812      	ldr	r2, [r2, #0]
 8004502:	621a      	str	r2, [r3, #32]
 8004504:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004508:	3b08      	subs	r3, #8
 800450a:	f107 0218 	add.w	r2, r7, #24
 800450e:	3a18      	subs	r2, #24
 8004510:	6812      	ldr	r2, [r2, #0]
 8004512:	625a      	str	r2, [r3, #36]	; 0x24
 8004514:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004518:	3b08      	subs	r3, #8
 800451a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800451e:	f102 0208 	add.w	r2, r2, #8
 8004522:	6812      	ldr	r2, [r2, #0]
 8004524:	629a      	str	r2, [r3, #40]	; 0x28
 8004526:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800452a:	3b08      	subs	r3, #8
 800452c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004530:	f102 0208 	add.w	r2, r2, #8
 8004534:	6812      	ldr	r2, [r2, #0]
 8004536:	62da      	str	r2, [r3, #44]	; 0x2c
 8004538:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800453c:	3b08      	subs	r3, #8
 800453e:	f107 0218 	add.w	r2, r7, #24
 8004542:	3a18      	subs	r2, #24
 8004544:	6812      	ldr	r2, [r2, #0]
 8004546:	631a      	str	r2, [r3, #48]	; 0x30
 8004548:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800454c:	3b08      	subs	r3, #8
 800454e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004552:	f102 0208 	add.w	r2, r2, #8
 8004556:	6812      	ldr	r2, [r2, #0]
 8004558:	635a      	str	r2, [r3, #52]	; 0x34
 800455a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800455e:	3b08      	subs	r3, #8
 8004560:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004564:	f102 0208 	add.w	r2, r2, #8
 8004568:	6812      	ldr	r2, [r2, #0]
 800456a:	639a      	str	r2, [r3, #56]	; 0x38
 800456c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004570:	3b08      	subs	r3, #8
 8004572:	f107 0218 	add.w	r2, r7, #24
 8004576:	3a18      	subs	r2, #24
 8004578:	6812      	ldr	r2, [r2, #0]
 800457a:	63da      	str	r2, [r3, #60]	; 0x3c
 800457c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004580:	3b08      	subs	r3, #8
 8004582:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004586:	f102 0208 	add.w	r2, r2, #8
 800458a:	6812      	ldr	r2, [r2, #0]
 800458c:	641a      	str	r2, [r3, #64]	; 0x40
 800458e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004592:	3b08      	subs	r3, #8
 8004594:	f107 0218 	add.w	r2, r7, #24
 8004598:	3a18      	subs	r2, #24
 800459a:	6812      	ldr	r2, [r2, #0]
 800459c:	645a      	str	r2, [r3, #68]	; 0x44
 800459e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80045a2:	3b08      	subs	r3, #8
 80045a4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80045a8:	f102 0208 	add.w	r2, r2, #8
 80045ac:	6812      	ldr	r2, [r2, #0]
 80045ae:	649a      	str	r2, [r3, #72]	; 0x48
 80045b0:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80045b4:	3b08      	subs	r3, #8
 80045b6:	f107 0218 	add.w	r2, r7, #24
 80045ba:	3a18      	subs	r2, #24
 80045bc:	6812      	ldr	r2, [r2, #0]
 80045be:	64da      	str	r2, [r3, #76]	; 0x4c
 80045c0:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80045c4:	3b08      	subs	r3, #8
 80045c6:	f107 0218 	add.w	r2, r7, #24
 80045ca:	3a18      	subs	r2, #24
 80045cc:	6812      	ldr	r2, [r2, #0]
 80045ce:	651a      	str	r2, [r3, #80]	; 0x50
 80045d0:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80045d4:	3b08      	subs	r3, #8
 80045d6:	f107 0218 	add.w	r2, r7, #24
 80045da:	3a18      	subs	r2, #24
 80045dc:	6812      	ldr	r2, [r2, #0]
 80045de:	655a      	str	r2, [r3, #84]	; 0x54
 80045e0:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80045e4:	3b08      	subs	r3, #8
 80045e6:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80045ea:	f102 0208 	add.w	r2, r2, #8
 80045ee:	6812      	ldr	r2, [r2, #0]
 80045f0:	659a      	str	r2, [r3, #88]	; 0x58
 80045f2:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80045f6:	3b08      	subs	r3, #8
 80045f8:	f107 0218 	add.w	r2, r7, #24
 80045fc:	3a18      	subs	r2, #24
 80045fe:	6812      	ldr	r2, [r2, #0]
 8004600:	65da      	str	r2, [r3, #92]	; 0x5c
 8004602:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004606:	3b08      	subs	r3, #8
 8004608:	f107 0218 	add.w	r2, r7, #24
 800460c:	3a18      	subs	r2, #24
 800460e:	6812      	ldr	r2, [r2, #0]
 8004610:	661a      	str	r2, [r3, #96]	; 0x60
 8004612:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004616:	3b08      	subs	r3, #8
 8004618:	f107 0218 	add.w	r2, r7, #24
 800461c:	3a18      	subs	r2, #24
 800461e:	6812      	ldr	r2, [r2, #0]
 8004620:	665a      	str	r2, [r3, #100]	; 0x64
 8004622:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004626:	3b08      	subs	r3, #8
 8004628:	f107 0218 	add.w	r2, r7, #24
 800462c:	3a18      	subs	r2, #24
 800462e:	6812      	ldr	r2, [r2, #0]
 8004630:	669a      	str	r2, [r3, #104]	; 0x68
 8004632:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004636:	3b08      	subs	r3, #8
 8004638:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800463c:	f102 0208 	add.w	r2, r2, #8
 8004640:	6812      	ldr	r2, [r2, #0]
 8004642:	66da      	str	r2, [r3, #108]	; 0x6c
 8004644:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004648:	3b08      	subs	r3, #8
 800464a:	f107 0218 	add.w	r2, r7, #24
 800464e:	3a18      	subs	r2, #24
 8004650:	6812      	ldr	r2, [r2, #0]
 8004652:	671a      	str	r2, [r3, #112]	; 0x70
 8004654:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004658:	3b08      	subs	r3, #8
 800465a:	f107 0218 	add.w	r2, r7, #24
 800465e:	3a18      	subs	r2, #24
 8004660:	6812      	ldr	r2, [r2, #0]
 8004662:	675a      	str	r2, [r3, #116]	; 0x74
 8004664:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004668:	3b08      	subs	r3, #8
 800466a:	f107 0218 	add.w	r2, r7, #24
 800466e:	3a18      	subs	r2, #24
 8004670:	6812      	ldr	r2, [r2, #0]
 8004672:	679a      	str	r2, [r3, #120]	; 0x78
 8004674:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004678:	3b08      	subs	r3, #8
 800467a:	f107 0218 	add.w	r2, r7, #24
 800467e:	3a18      	subs	r2, #24
 8004680:	6812      	ldr	r2, [r2, #0]
 8004682:	67da      	str	r2, [r3, #124]	; 0x7c
 8004684:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004688:	3b08      	subs	r3, #8
 800468a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800468e:	f102 0208 	add.w	r2, r2, #8
 8004692:	6812      	ldr	r2, [r2, #0]
 8004694:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004698:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800469c:	3b08      	subs	r3, #8
 800469e:	f107 0218 	add.w	r2, r7, #24
 80046a2:	3a18      	subs	r2, #24
 80046a4:	6812      	ldr	r2, [r2, #0]
 80046a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80046aa:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80046ae:	3b08      	subs	r3, #8
 80046b0:	f107 0218 	add.w	r2, r7, #24
 80046b4:	3a18      	subs	r2, #24
 80046b6:	6812      	ldr	r2, [r2, #0]
 80046b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80046bc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80046c0:	3b08      	subs	r3, #8
 80046c2:	f107 0218 	add.w	r2, r7, #24
 80046c6:	3a18      	subs	r2, #24
 80046c8:	6812      	ldr	r2, [r2, #0]
 80046ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80046ce:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80046d2:	3b08      	subs	r3, #8
 80046d4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80046d8:	f102 0208 	add.w	r2, r2, #8
 80046dc:	6812      	ldr	r2, [r2, #0]
 80046de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80046e2:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80046e6:	3b08      	subs	r3, #8
 80046e8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80046ec:	f102 0208 	add.w	r2, r2, #8
 80046f0:	6812      	ldr	r2, [r2, #0]
 80046f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80046f6:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80046fa:	3b08      	subs	r3, #8
 80046fc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004700:	f102 0208 	add.w	r2, r2, #8
 8004704:	6812      	ldr	r2, [r2, #0]
 8004706:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800470a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800470e:	3b08      	subs	r3, #8
 8004710:	f107 0218 	add.w	r2, r7, #24
 8004714:	3a18      	subs	r2, #24
 8004716:	6812      	ldr	r2, [r2, #0]
 8004718:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800471c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004720:	3b08      	subs	r3, #8
 8004722:	f107 0218 	add.w	r2, r7, #24
 8004726:	3a18      	subs	r2, #24
 8004728:	6812      	ldr	r2, [r2, #0]
 800472a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 800472e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004732:	3b08      	subs	r3, #8
 8004734:	f107 0218 	add.w	r2, r7, #24
 8004738:	3a18      	subs	r2, #24
 800473a:	6812      	ldr	r2, [r2, #0]
 800473c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8004740:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004744:	3b08      	subs	r3, #8
 8004746:	f107 0218 	add.w	r2, r7, #24
 800474a:	3a18      	subs	r2, #24
 800474c:	6812      	ldr	r2, [r2, #0]
 800474e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8004752:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004756:	3b08      	subs	r3, #8
 8004758:	f107 0218 	add.w	r2, r7, #24
 800475c:	3a18      	subs	r2, #24
 800475e:	6812      	ldr	r2, [r2, #0]
 8004760:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8004764:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004768:	3b08      	subs	r3, #8
 800476a:	f107 0218 	add.w	r2, r7, #24
 800476e:	3a18      	subs	r2, #24
 8004770:	6812      	ldr	r2, [r2, #0]
 8004772:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004776:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800477a:	3b08      	subs	r3, #8
 800477c:	f107 0218 	add.w	r2, r7, #24
 8004780:	3a18      	subs	r2, #24
 8004782:	6812      	ldr	r2, [r2, #0]
 8004784:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8004788:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800478c:	3b08      	subs	r3, #8
 800478e:	f107 0218 	add.w	r2, r7, #24
 8004792:	3a18      	subs	r2, #24
 8004794:	6812      	ldr	r2, [r2, #0]
 8004796:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800479a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 800479e:	3b08      	subs	r3, #8
 80047a0:	f107 0218 	add.w	r2, r7, #24
 80047a4:	3a18      	subs	r2, #24
 80047a6:	6812      	ldr	r2, [r2, #0]
 80047a8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 80047ac:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80047b0:	3b08      	subs	r3, #8
 80047b2:	f107 0218 	add.w	r2, r7, #24
 80047b6:	3a18      	subs	r2, #24
 80047b8:	6812      	ldr	r2, [r2, #0]
 80047ba:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 80047be:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80047c2:	3b08      	subs	r3, #8
 80047c4:	f107 0218 	add.w	r2, r7, #24
 80047c8:	3a18      	subs	r2, #24
 80047ca:	6812      	ldr	r2, [r2, #0]
 80047cc:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
			  backcolor, backcolor, textcolor, backcolor, backcolor,  //..@..
			  backcolor, textcolor, textcolor, textcolor, backcolor,  //.@@@.
			  backcolor, backcolor, backcolor, backcolor, backcolor,  //.....
			  backcolor, backcolor, backcolor, backcolor, backcolor,  //.....
	};
	int letter_Z[10][4] = {
 80047d0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80047d4:	3b08      	subs	r3, #8
 80047d6:	f107 0218 	add.w	r2, r7, #24
 80047da:	3a18      	subs	r2, #24
 80047dc:	6812      	ldr	r2, [r2, #0]
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80047e4:	3b08      	subs	r3, #8
 80047e6:	f107 0218 	add.w	r2, r7, #24
 80047ea:	3a18      	subs	r2, #24
 80047ec:	6812      	ldr	r2, [r2, #0]
 80047ee:	605a      	str	r2, [r3, #4]
 80047f0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80047f4:	3b08      	subs	r3, #8
 80047f6:	f107 0218 	add.w	r2, r7, #24
 80047fa:	3a18      	subs	r2, #24
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	609a      	str	r2, [r3, #8]
 8004800:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004804:	3b08      	subs	r3, #8
 8004806:	f107 0218 	add.w	r2, r7, #24
 800480a:	3a18      	subs	r2, #24
 800480c:	6812      	ldr	r2, [r2, #0]
 800480e:	60da      	str	r2, [r3, #12]
 8004810:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004814:	3b08      	subs	r3, #8
 8004816:	f107 0218 	add.w	r2, r7, #24
 800481a:	3a18      	subs	r2, #24
 800481c:	6812      	ldr	r2, [r2, #0]
 800481e:	611a      	str	r2, [r3, #16]
 8004820:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004824:	3b08      	subs	r3, #8
 8004826:	f107 0218 	add.w	r2, r7, #24
 800482a:	3a18      	subs	r2, #24
 800482c:	6812      	ldr	r2, [r2, #0]
 800482e:	615a      	str	r2, [r3, #20]
 8004830:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004834:	3b08      	subs	r3, #8
 8004836:	f107 0218 	add.w	r2, r7, #24
 800483a:	3a18      	subs	r2, #24
 800483c:	6812      	ldr	r2, [r2, #0]
 800483e:	619a      	str	r2, [r3, #24]
 8004840:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004844:	3b08      	subs	r3, #8
 8004846:	f107 0218 	add.w	r2, r7, #24
 800484a:	3a18      	subs	r2, #24
 800484c:	6812      	ldr	r2, [r2, #0]
 800484e:	61da      	str	r2, [r3, #28]
 8004850:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004854:	3b08      	subs	r3, #8
 8004856:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800485a:	f102 0208 	add.w	r2, r2, #8
 800485e:	6812      	ldr	r2, [r2, #0]
 8004860:	621a      	str	r2, [r3, #32]
 8004862:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004866:	3b08      	subs	r3, #8
 8004868:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800486c:	f102 0208 	add.w	r2, r2, #8
 8004870:	6812      	ldr	r2, [r2, #0]
 8004872:	625a      	str	r2, [r3, #36]	; 0x24
 8004874:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004878:	3b08      	subs	r3, #8
 800487a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800487e:	f102 0208 	add.w	r2, r2, #8
 8004882:	6812      	ldr	r2, [r2, #0]
 8004884:	629a      	str	r2, [r3, #40]	; 0x28
 8004886:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800488a:	3b08      	subs	r3, #8
 800488c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004890:	f102 0208 	add.w	r2, r2, #8
 8004894:	6812      	ldr	r2, [r2, #0]
 8004896:	62da      	str	r2, [r3, #44]	; 0x2c
 8004898:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800489c:	3b08      	subs	r3, #8
 800489e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80048a2:	f102 0208 	add.w	r2, r2, #8
 80048a6:	6812      	ldr	r2, [r2, #0]
 80048a8:	631a      	str	r2, [r3, #48]	; 0x30
 80048aa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80048ae:	3b08      	subs	r3, #8
 80048b0:	f107 0218 	add.w	r2, r7, #24
 80048b4:	3a18      	subs	r2, #24
 80048b6:	6812      	ldr	r2, [r2, #0]
 80048b8:	635a      	str	r2, [r3, #52]	; 0x34
 80048ba:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80048be:	3b08      	subs	r3, #8
 80048c0:	f107 0218 	add.w	r2, r7, #24
 80048c4:	3a18      	subs	r2, #24
 80048c6:	6812      	ldr	r2, [r2, #0]
 80048c8:	639a      	str	r2, [r3, #56]	; 0x38
 80048ca:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80048ce:	3b08      	subs	r3, #8
 80048d0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80048d4:	f102 0208 	add.w	r2, r2, #8
 80048d8:	6812      	ldr	r2, [r2, #0]
 80048da:	63da      	str	r2, [r3, #60]	; 0x3c
 80048dc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80048e0:	3b08      	subs	r3, #8
 80048e2:	f107 0218 	add.w	r2, r7, #24
 80048e6:	3a18      	subs	r2, #24
 80048e8:	6812      	ldr	r2, [r2, #0]
 80048ea:	641a      	str	r2, [r3, #64]	; 0x40
 80048ec:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80048f0:	3b08      	subs	r3, #8
 80048f2:	f107 0218 	add.w	r2, r7, #24
 80048f6:	3a18      	subs	r2, #24
 80048f8:	6812      	ldr	r2, [r2, #0]
 80048fa:	645a      	str	r2, [r3, #68]	; 0x44
 80048fc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004900:	3b08      	subs	r3, #8
 8004902:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004906:	f102 0208 	add.w	r2, r2, #8
 800490a:	6812      	ldr	r2, [r2, #0]
 800490c:	649a      	str	r2, [r3, #72]	; 0x48
 800490e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004912:	3b08      	subs	r3, #8
 8004914:	f107 0218 	add.w	r2, r7, #24
 8004918:	3a18      	subs	r2, #24
 800491a:	6812      	ldr	r2, [r2, #0]
 800491c:	64da      	str	r2, [r3, #76]	; 0x4c
 800491e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004922:	3b08      	subs	r3, #8
 8004924:	f107 0218 	add.w	r2, r7, #24
 8004928:	3a18      	subs	r2, #24
 800492a:	6812      	ldr	r2, [r2, #0]
 800492c:	651a      	str	r2, [r3, #80]	; 0x50
 800492e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004932:	3b08      	subs	r3, #8
 8004934:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004938:	f102 0208 	add.w	r2, r2, #8
 800493c:	6812      	ldr	r2, [r2, #0]
 800493e:	655a      	str	r2, [r3, #84]	; 0x54
 8004940:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004944:	3b08      	subs	r3, #8
 8004946:	f107 0218 	add.w	r2, r7, #24
 800494a:	3a18      	subs	r2, #24
 800494c:	6812      	ldr	r2, [r2, #0]
 800494e:	659a      	str	r2, [r3, #88]	; 0x58
 8004950:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004954:	3b08      	subs	r3, #8
 8004956:	f107 0218 	add.w	r2, r7, #24
 800495a:	3a18      	subs	r2, #24
 800495c:	6812      	ldr	r2, [r2, #0]
 800495e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004960:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004964:	3b08      	subs	r3, #8
 8004966:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800496a:	f102 0208 	add.w	r2, r2, #8
 800496e:	6812      	ldr	r2, [r2, #0]
 8004970:	661a      	str	r2, [r3, #96]	; 0x60
 8004972:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004976:	3b08      	subs	r3, #8
 8004978:	f107 0218 	add.w	r2, r7, #24
 800497c:	3a18      	subs	r2, #24
 800497e:	6812      	ldr	r2, [r2, #0]
 8004980:	665a      	str	r2, [r3, #100]	; 0x64
 8004982:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004986:	3b08      	subs	r3, #8
 8004988:	f107 0218 	add.w	r2, r7, #24
 800498c:	3a18      	subs	r2, #24
 800498e:	6812      	ldr	r2, [r2, #0]
 8004990:	669a      	str	r2, [r3, #104]	; 0x68
 8004992:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004996:	3b08      	subs	r3, #8
 8004998:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800499c:	f102 0208 	add.w	r2, r2, #8
 80049a0:	6812      	ldr	r2, [r2, #0]
 80049a2:	66da      	str	r2, [r3, #108]	; 0x6c
 80049a4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80049a8:	3b08      	subs	r3, #8
 80049aa:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80049ae:	f102 0208 	add.w	r2, r2, #8
 80049b2:	6812      	ldr	r2, [r2, #0]
 80049b4:	671a      	str	r2, [r3, #112]	; 0x70
 80049b6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80049ba:	3b08      	subs	r3, #8
 80049bc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80049c0:	f102 0208 	add.w	r2, r2, #8
 80049c4:	6812      	ldr	r2, [r2, #0]
 80049c6:	675a      	str	r2, [r3, #116]	; 0x74
 80049c8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80049cc:	3b08      	subs	r3, #8
 80049ce:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80049d2:	f102 0208 	add.w	r2, r2, #8
 80049d6:	6812      	ldr	r2, [r2, #0]
 80049d8:	679a      	str	r2, [r3, #120]	; 0x78
 80049da:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80049de:	3b08      	subs	r3, #8
 80049e0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80049e4:	f102 0208 	add.w	r2, r2, #8
 80049e8:	6812      	ldr	r2, [r2, #0]
 80049ea:	67da      	str	r2, [r3, #124]	; 0x7c
 80049ec:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80049f0:	3b08      	subs	r3, #8
 80049f2:	f107 0218 	add.w	r2, r7, #24
 80049f6:	3a18      	subs	r2, #24
 80049f8:	6812      	ldr	r2, [r2, #0]
 80049fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80049fe:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004a02:	3b08      	subs	r3, #8
 8004a04:	f107 0218 	add.w	r2, r7, #24
 8004a08:	3a18      	subs	r2, #24
 8004a0a:	6812      	ldr	r2, [r2, #0]
 8004a0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8004a10:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004a14:	3b08      	subs	r3, #8
 8004a16:	f107 0218 	add.w	r2, r7, #24
 8004a1a:	3a18      	subs	r2, #24
 8004a1c:	6812      	ldr	r2, [r2, #0]
 8004a1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8004a22:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004a26:	3b08      	subs	r3, #8
 8004a28:	f107 0218 	add.w	r2, r7, #24
 8004a2c:	3a18      	subs	r2, #24
 8004a2e:	6812      	ldr	r2, [r2, #0]
 8004a30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004a34:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004a38:	3b08      	subs	r3, #8
 8004a3a:	f107 0218 	add.w	r2, r7, #24
 8004a3e:	3a18      	subs	r2, #24
 8004a40:	6812      	ldr	r2, [r2, #0]
 8004a42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004a46:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004a4a:	3b08      	subs	r3, #8
 8004a4c:	f107 0218 	add.w	r2, r7, #24
 8004a50:	3a18      	subs	r2, #24
 8004a52:	6812      	ldr	r2, [r2, #0]
 8004a54:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004a58:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004a5c:	3b08      	subs	r3, #8
 8004a5e:	f107 0218 	add.w	r2, r7, #24
 8004a62:	3a18      	subs	r2, #24
 8004a64:	6812      	ldr	r2, [r2, #0]
 8004a66:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004a6a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004a6e:	3b08      	subs	r3, #8
 8004a70:	f107 0218 	add.w	r2, r7, #24
 8004a74:	3a18      	subs	r2, #24
 8004a76:	6812      	ldr	r2, [r2, #0]
 8004a78:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			  textcolor, backcolor, backcolor, textcolor,  //@..@
			  textcolor, textcolor, textcolor, textcolor,  //@@@@
			  backcolor, backcolor, backcolor, backcolor,  //....
			  backcolor, backcolor, backcolor, backcolor,  //....
	};
	int spatie[10][4] = {
 8004a7c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004a80:	3b08      	subs	r3, #8
 8004a82:	f107 0218 	add.w	r2, r7, #24
 8004a86:	3a18      	subs	r2, #24
 8004a88:	6812      	ldr	r2, [r2, #0]
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004a90:	3b08      	subs	r3, #8
 8004a92:	f107 0218 	add.w	r2, r7, #24
 8004a96:	3a18      	subs	r2, #24
 8004a98:	6812      	ldr	r2, [r2, #0]
 8004a9a:	605a      	str	r2, [r3, #4]
 8004a9c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004aa0:	3b08      	subs	r3, #8
 8004aa2:	f107 0218 	add.w	r2, r7, #24
 8004aa6:	3a18      	subs	r2, #24
 8004aa8:	6812      	ldr	r2, [r2, #0]
 8004aaa:	609a      	str	r2, [r3, #8]
 8004aac:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004ab0:	3b08      	subs	r3, #8
 8004ab2:	f107 0218 	add.w	r2, r7, #24
 8004ab6:	3a18      	subs	r2, #24
 8004ab8:	6812      	ldr	r2, [r2, #0]
 8004aba:	60da      	str	r2, [r3, #12]
 8004abc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004ac0:	3b08      	subs	r3, #8
 8004ac2:	f107 0218 	add.w	r2, r7, #24
 8004ac6:	3a18      	subs	r2, #24
 8004ac8:	6812      	ldr	r2, [r2, #0]
 8004aca:	611a      	str	r2, [r3, #16]
 8004acc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004ad0:	3b08      	subs	r3, #8
 8004ad2:	f107 0218 	add.w	r2, r7, #24
 8004ad6:	3a18      	subs	r2, #24
 8004ad8:	6812      	ldr	r2, [r2, #0]
 8004ada:	615a      	str	r2, [r3, #20]
 8004adc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004ae0:	3b08      	subs	r3, #8
 8004ae2:	f107 0218 	add.w	r2, r7, #24
 8004ae6:	3a18      	subs	r2, #24
 8004ae8:	6812      	ldr	r2, [r2, #0]
 8004aea:	619a      	str	r2, [r3, #24]
 8004aec:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004af0:	3b08      	subs	r3, #8
 8004af2:	f107 0218 	add.w	r2, r7, #24
 8004af6:	3a18      	subs	r2, #24
 8004af8:	6812      	ldr	r2, [r2, #0]
 8004afa:	61da      	str	r2, [r3, #28]
 8004afc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004b00:	3b08      	subs	r3, #8
 8004b02:	f107 0218 	add.w	r2, r7, #24
 8004b06:	3a18      	subs	r2, #24
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	621a      	str	r2, [r3, #32]
 8004b0c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004b10:	3b08      	subs	r3, #8
 8004b12:	f107 0218 	add.w	r2, r7, #24
 8004b16:	3a18      	subs	r2, #24
 8004b18:	6812      	ldr	r2, [r2, #0]
 8004b1a:	625a      	str	r2, [r3, #36]	; 0x24
 8004b1c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004b20:	3b08      	subs	r3, #8
 8004b22:	f107 0218 	add.w	r2, r7, #24
 8004b26:	3a18      	subs	r2, #24
 8004b28:	6812      	ldr	r2, [r2, #0]
 8004b2a:	629a      	str	r2, [r3, #40]	; 0x28
 8004b2c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004b30:	3b08      	subs	r3, #8
 8004b32:	f107 0218 	add.w	r2, r7, #24
 8004b36:	3a18      	subs	r2, #24
 8004b38:	6812      	ldr	r2, [r2, #0]
 8004b3a:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b3c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004b40:	3b08      	subs	r3, #8
 8004b42:	f107 0218 	add.w	r2, r7, #24
 8004b46:	3a18      	subs	r2, #24
 8004b48:	6812      	ldr	r2, [r2, #0]
 8004b4a:	631a      	str	r2, [r3, #48]	; 0x30
 8004b4c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004b50:	3b08      	subs	r3, #8
 8004b52:	f107 0218 	add.w	r2, r7, #24
 8004b56:	3a18      	subs	r2, #24
 8004b58:	6812      	ldr	r2, [r2, #0]
 8004b5a:	635a      	str	r2, [r3, #52]	; 0x34
 8004b5c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004b60:	3b08      	subs	r3, #8
 8004b62:	f107 0218 	add.w	r2, r7, #24
 8004b66:	3a18      	subs	r2, #24
 8004b68:	6812      	ldr	r2, [r2, #0]
 8004b6a:	639a      	str	r2, [r3, #56]	; 0x38
 8004b6c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004b70:	3b08      	subs	r3, #8
 8004b72:	f107 0218 	add.w	r2, r7, #24
 8004b76:	3a18      	subs	r2, #24
 8004b78:	6812      	ldr	r2, [r2, #0]
 8004b7a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b7c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004b80:	3b08      	subs	r3, #8
 8004b82:	f107 0218 	add.w	r2, r7, #24
 8004b86:	3a18      	subs	r2, #24
 8004b88:	6812      	ldr	r2, [r2, #0]
 8004b8a:	641a      	str	r2, [r3, #64]	; 0x40
 8004b8c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004b90:	3b08      	subs	r3, #8
 8004b92:	f107 0218 	add.w	r2, r7, #24
 8004b96:	3a18      	subs	r2, #24
 8004b98:	6812      	ldr	r2, [r2, #0]
 8004b9a:	645a      	str	r2, [r3, #68]	; 0x44
 8004b9c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004ba0:	3b08      	subs	r3, #8
 8004ba2:	f107 0218 	add.w	r2, r7, #24
 8004ba6:	3a18      	subs	r2, #24
 8004ba8:	6812      	ldr	r2, [r2, #0]
 8004baa:	649a      	str	r2, [r3, #72]	; 0x48
 8004bac:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004bb0:	3b08      	subs	r3, #8
 8004bb2:	f107 0218 	add.w	r2, r7, #24
 8004bb6:	3a18      	subs	r2, #24
 8004bb8:	6812      	ldr	r2, [r2, #0]
 8004bba:	64da      	str	r2, [r3, #76]	; 0x4c
 8004bbc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004bc0:	3b08      	subs	r3, #8
 8004bc2:	f107 0218 	add.w	r2, r7, #24
 8004bc6:	3a18      	subs	r2, #24
 8004bc8:	6812      	ldr	r2, [r2, #0]
 8004bca:	651a      	str	r2, [r3, #80]	; 0x50
 8004bcc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004bd0:	3b08      	subs	r3, #8
 8004bd2:	f107 0218 	add.w	r2, r7, #24
 8004bd6:	3a18      	subs	r2, #24
 8004bd8:	6812      	ldr	r2, [r2, #0]
 8004bda:	655a      	str	r2, [r3, #84]	; 0x54
 8004bdc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004be0:	3b08      	subs	r3, #8
 8004be2:	f107 0218 	add.w	r2, r7, #24
 8004be6:	3a18      	subs	r2, #24
 8004be8:	6812      	ldr	r2, [r2, #0]
 8004bea:	659a      	str	r2, [r3, #88]	; 0x58
 8004bec:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004bf0:	3b08      	subs	r3, #8
 8004bf2:	f107 0218 	add.w	r2, r7, #24
 8004bf6:	3a18      	subs	r2, #24
 8004bf8:	6812      	ldr	r2, [r2, #0]
 8004bfa:	65da      	str	r2, [r3, #92]	; 0x5c
 8004bfc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004c00:	3b08      	subs	r3, #8
 8004c02:	f107 0218 	add.w	r2, r7, #24
 8004c06:	3a18      	subs	r2, #24
 8004c08:	6812      	ldr	r2, [r2, #0]
 8004c0a:	661a      	str	r2, [r3, #96]	; 0x60
 8004c0c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004c10:	3b08      	subs	r3, #8
 8004c12:	f107 0218 	add.w	r2, r7, #24
 8004c16:	3a18      	subs	r2, #24
 8004c18:	6812      	ldr	r2, [r2, #0]
 8004c1a:	665a      	str	r2, [r3, #100]	; 0x64
 8004c1c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004c20:	3b08      	subs	r3, #8
 8004c22:	f107 0218 	add.w	r2, r7, #24
 8004c26:	3a18      	subs	r2, #24
 8004c28:	6812      	ldr	r2, [r2, #0]
 8004c2a:	669a      	str	r2, [r3, #104]	; 0x68
 8004c2c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004c30:	3b08      	subs	r3, #8
 8004c32:	f107 0218 	add.w	r2, r7, #24
 8004c36:	3a18      	subs	r2, #24
 8004c38:	6812      	ldr	r2, [r2, #0]
 8004c3a:	66da      	str	r2, [r3, #108]	; 0x6c
 8004c3c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004c40:	3b08      	subs	r3, #8
 8004c42:	f107 0218 	add.w	r2, r7, #24
 8004c46:	3a18      	subs	r2, #24
 8004c48:	6812      	ldr	r2, [r2, #0]
 8004c4a:	671a      	str	r2, [r3, #112]	; 0x70
 8004c4c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004c50:	3b08      	subs	r3, #8
 8004c52:	f107 0218 	add.w	r2, r7, #24
 8004c56:	3a18      	subs	r2, #24
 8004c58:	6812      	ldr	r2, [r2, #0]
 8004c5a:	675a      	str	r2, [r3, #116]	; 0x74
 8004c5c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004c60:	3b08      	subs	r3, #8
 8004c62:	f107 0218 	add.w	r2, r7, #24
 8004c66:	3a18      	subs	r2, #24
 8004c68:	6812      	ldr	r2, [r2, #0]
 8004c6a:	679a      	str	r2, [r3, #120]	; 0x78
 8004c6c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004c70:	3b08      	subs	r3, #8
 8004c72:	f107 0218 	add.w	r2, r7, #24
 8004c76:	3a18      	subs	r2, #24
 8004c78:	6812      	ldr	r2, [r2, #0]
 8004c7a:	67da      	str	r2, [r3, #124]	; 0x7c
 8004c7c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004c80:	3b08      	subs	r3, #8
 8004c82:	f107 0218 	add.w	r2, r7, #24
 8004c86:	3a18      	subs	r2, #24
 8004c88:	6812      	ldr	r2, [r2, #0]
 8004c8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004c8e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004c92:	3b08      	subs	r3, #8
 8004c94:	f107 0218 	add.w	r2, r7, #24
 8004c98:	3a18      	subs	r2, #24
 8004c9a:	6812      	ldr	r2, [r2, #0]
 8004c9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8004ca0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004ca4:	3b08      	subs	r3, #8
 8004ca6:	f107 0218 	add.w	r2, r7, #24
 8004caa:	3a18      	subs	r2, #24
 8004cac:	6812      	ldr	r2, [r2, #0]
 8004cae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8004cb2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004cb6:	3b08      	subs	r3, #8
 8004cb8:	f107 0218 	add.w	r2, r7, #24
 8004cbc:	3a18      	subs	r2, #24
 8004cbe:	6812      	ldr	r2, [r2, #0]
 8004cc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004cc4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004cc8:	3b08      	subs	r3, #8
 8004cca:	f107 0218 	add.w	r2, r7, #24
 8004cce:	3a18      	subs	r2, #24
 8004cd0:	6812      	ldr	r2, [r2, #0]
 8004cd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004cd6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004cda:	3b08      	subs	r3, #8
 8004cdc:	f107 0218 	add.w	r2, r7, #24
 8004ce0:	3a18      	subs	r2, #24
 8004ce2:	6812      	ldr	r2, [r2, #0]
 8004ce4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004ce8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004cec:	3b08      	subs	r3, #8
 8004cee:	f107 0218 	add.w	r2, r7, #24
 8004cf2:	3a18      	subs	r2, #24
 8004cf4:	6812      	ldr	r2, [r2, #0]
 8004cf6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004cfa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004cfe:	3b08      	subs	r3, #8
 8004d00:	f107 0218 	add.w	r2, r7, #24
 8004d04:	3a18      	subs	r2, #24
 8004d06:	6812      	ldr	r2, [r2, #0]
 8004d08:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
			  backcolor, backcolor, backcolor, backcolor,  //....
			  backcolor, backcolor, backcolor, backcolor,  //....
			  backcolor, backcolor, backcolor, backcolor,  //....
			  backcolor, backcolor, backcolor, backcolor,  //....
	};
	int komma[13][3]={
 8004d0c:	f107 0318 	add.w	r3, r7, #24
 8004d10:	3b04      	subs	r3, #4
 8004d12:	f107 0218 	add.w	r2, r7, #24
 8004d16:	3a18      	subs	r2, #24
 8004d18:	6812      	ldr	r2, [r2, #0]
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	f107 0318 	add.w	r3, r7, #24
 8004d20:	3b04      	subs	r3, #4
 8004d22:	f107 0218 	add.w	r2, r7, #24
 8004d26:	3a18      	subs	r2, #24
 8004d28:	6812      	ldr	r2, [r2, #0]
 8004d2a:	605a      	str	r2, [r3, #4]
 8004d2c:	f107 0318 	add.w	r3, r7, #24
 8004d30:	3b04      	subs	r3, #4
 8004d32:	f107 0218 	add.w	r2, r7, #24
 8004d36:	3a18      	subs	r2, #24
 8004d38:	6812      	ldr	r2, [r2, #0]
 8004d3a:	609a      	str	r2, [r3, #8]
 8004d3c:	f107 0318 	add.w	r3, r7, #24
 8004d40:	3b04      	subs	r3, #4
 8004d42:	f107 0218 	add.w	r2, r7, #24
 8004d46:	3a18      	subs	r2, #24
 8004d48:	6812      	ldr	r2, [r2, #0]
 8004d4a:	60da      	str	r2, [r3, #12]
 8004d4c:	f107 0318 	add.w	r3, r7, #24
 8004d50:	3b04      	subs	r3, #4
 8004d52:	f107 0218 	add.w	r2, r7, #24
 8004d56:	3a18      	subs	r2, #24
 8004d58:	6812      	ldr	r2, [r2, #0]
 8004d5a:	611a      	str	r2, [r3, #16]
 8004d5c:	f107 0318 	add.w	r3, r7, #24
 8004d60:	3b04      	subs	r3, #4
 8004d62:	f107 0218 	add.w	r2, r7, #24
 8004d66:	3a18      	subs	r2, #24
 8004d68:	6812      	ldr	r2, [r2, #0]
 8004d6a:	615a      	str	r2, [r3, #20]
 8004d6c:	f107 0318 	add.w	r3, r7, #24
 8004d70:	3b04      	subs	r3, #4
 8004d72:	f107 0218 	add.w	r2, r7, #24
 8004d76:	3a18      	subs	r2, #24
 8004d78:	6812      	ldr	r2, [r2, #0]
 8004d7a:	619a      	str	r2, [r3, #24]
 8004d7c:	f107 0318 	add.w	r3, r7, #24
 8004d80:	3b04      	subs	r3, #4
 8004d82:	f107 0218 	add.w	r2, r7, #24
 8004d86:	3a18      	subs	r2, #24
 8004d88:	6812      	ldr	r2, [r2, #0]
 8004d8a:	61da      	str	r2, [r3, #28]
 8004d8c:	f107 0318 	add.w	r3, r7, #24
 8004d90:	3b04      	subs	r3, #4
 8004d92:	f107 0218 	add.w	r2, r7, #24
 8004d96:	3a18      	subs	r2, #24
 8004d98:	6812      	ldr	r2, [r2, #0]
 8004d9a:	621a      	str	r2, [r3, #32]
 8004d9c:	f107 0318 	add.w	r3, r7, #24
 8004da0:	3b04      	subs	r3, #4
 8004da2:	f107 0218 	add.w	r2, r7, #24
 8004da6:	3a18      	subs	r2, #24
 8004da8:	6812      	ldr	r2, [r2, #0]
 8004daa:	625a      	str	r2, [r3, #36]	; 0x24
 8004dac:	f107 0318 	add.w	r3, r7, #24
 8004db0:	3b04      	subs	r3, #4
 8004db2:	f107 0218 	add.w	r2, r7, #24
 8004db6:	3a18      	subs	r2, #24
 8004db8:	6812      	ldr	r2, [r2, #0]
 8004dba:	629a      	str	r2, [r3, #40]	; 0x28
 8004dbc:	f107 0318 	add.w	r3, r7, #24
 8004dc0:	3b04      	subs	r3, #4
 8004dc2:	f107 0218 	add.w	r2, r7, #24
 8004dc6:	3a18      	subs	r2, #24
 8004dc8:	6812      	ldr	r2, [r2, #0]
 8004dca:	62da      	str	r2, [r3, #44]	; 0x2c
 8004dcc:	f107 0318 	add.w	r3, r7, #24
 8004dd0:	3b04      	subs	r3, #4
 8004dd2:	f107 0218 	add.w	r2, r7, #24
 8004dd6:	3a18      	subs	r2, #24
 8004dd8:	6812      	ldr	r2, [r2, #0]
 8004dda:	631a      	str	r2, [r3, #48]	; 0x30
 8004ddc:	f107 0318 	add.w	r3, r7, #24
 8004de0:	3b04      	subs	r3, #4
 8004de2:	f107 0218 	add.w	r2, r7, #24
 8004de6:	3a18      	subs	r2, #24
 8004de8:	6812      	ldr	r2, [r2, #0]
 8004dea:	635a      	str	r2, [r3, #52]	; 0x34
 8004dec:	f107 0318 	add.w	r3, r7, #24
 8004df0:	3b04      	subs	r3, #4
 8004df2:	f107 0218 	add.w	r2, r7, #24
 8004df6:	3a18      	subs	r2, #24
 8004df8:	6812      	ldr	r2, [r2, #0]
 8004dfa:	639a      	str	r2, [r3, #56]	; 0x38
 8004dfc:	f107 0318 	add.w	r3, r7, #24
 8004e00:	3b04      	subs	r3, #4
 8004e02:	f107 0218 	add.w	r2, r7, #24
 8004e06:	3a18      	subs	r2, #24
 8004e08:	6812      	ldr	r2, [r2, #0]
 8004e0a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e0c:	f107 0318 	add.w	r3, r7, #24
 8004e10:	3b04      	subs	r3, #4
 8004e12:	f107 0218 	add.w	r2, r7, #24
 8004e16:	3a18      	subs	r2, #24
 8004e18:	6812      	ldr	r2, [r2, #0]
 8004e1a:	641a      	str	r2, [r3, #64]	; 0x40
 8004e1c:	f107 0318 	add.w	r3, r7, #24
 8004e20:	3b04      	subs	r3, #4
 8004e22:	f107 0218 	add.w	r2, r7, #24
 8004e26:	3a18      	subs	r2, #24
 8004e28:	6812      	ldr	r2, [r2, #0]
 8004e2a:	645a      	str	r2, [r3, #68]	; 0x44
 8004e2c:	f107 0318 	add.w	r3, r7, #24
 8004e30:	3b04      	subs	r3, #4
 8004e32:	f107 0218 	add.w	r2, r7, #24
 8004e36:	3a18      	subs	r2, #24
 8004e38:	6812      	ldr	r2, [r2, #0]
 8004e3a:	649a      	str	r2, [r3, #72]	; 0x48
 8004e3c:	f107 0318 	add.w	r3, r7, #24
 8004e40:	3b04      	subs	r3, #4
 8004e42:	f107 0218 	add.w	r2, r7, #24
 8004e46:	3a18      	subs	r2, #24
 8004e48:	6812      	ldr	r2, [r2, #0]
 8004e4a:	64da      	str	r2, [r3, #76]	; 0x4c
 8004e4c:	f107 0318 	add.w	r3, r7, #24
 8004e50:	3b04      	subs	r3, #4
 8004e52:	f107 0218 	add.w	r2, r7, #24
 8004e56:	3a18      	subs	r2, #24
 8004e58:	6812      	ldr	r2, [r2, #0]
 8004e5a:	651a      	str	r2, [r3, #80]	; 0x50
 8004e5c:	f107 0318 	add.w	r3, r7, #24
 8004e60:	3b04      	subs	r3, #4
 8004e62:	f107 0218 	add.w	r2, r7, #24
 8004e66:	3a18      	subs	r2, #24
 8004e68:	6812      	ldr	r2, [r2, #0]
 8004e6a:	655a      	str	r2, [r3, #84]	; 0x54
 8004e6c:	f107 0318 	add.w	r3, r7, #24
 8004e70:	3b04      	subs	r3, #4
 8004e72:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004e76:	f102 0208 	add.w	r2, r2, #8
 8004e7a:	6812      	ldr	r2, [r2, #0]
 8004e7c:	659a      	str	r2, [r3, #88]	; 0x58
 8004e7e:	f107 0318 	add.w	r3, r7, #24
 8004e82:	3b04      	subs	r3, #4
 8004e84:	f107 0218 	add.w	r2, r7, #24
 8004e88:	3a18      	subs	r2, #24
 8004e8a:	6812      	ldr	r2, [r2, #0]
 8004e8c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e8e:	f107 0318 	add.w	r3, r7, #24
 8004e92:	3b04      	subs	r3, #4
 8004e94:	f107 0218 	add.w	r2, r7, #24
 8004e98:	3a18      	subs	r2, #24
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	661a      	str	r2, [r3, #96]	; 0x60
 8004e9e:	f107 0318 	add.w	r3, r7, #24
 8004ea2:	3b04      	subs	r3, #4
 8004ea4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004ea8:	f102 0208 	add.w	r2, r2, #8
 8004eac:	6812      	ldr	r2, [r2, #0]
 8004eae:	665a      	str	r2, [r3, #100]	; 0x64
 8004eb0:	f107 0318 	add.w	r3, r7, #24
 8004eb4:	3b04      	subs	r3, #4
 8004eb6:	f107 0218 	add.w	r2, r7, #24
 8004eba:	3a18      	subs	r2, #24
 8004ebc:	6812      	ldr	r2, [r2, #0]
 8004ebe:	669a      	str	r2, [r3, #104]	; 0x68
 8004ec0:	f107 0318 	add.w	r3, r7, #24
 8004ec4:	3b04      	subs	r3, #4
 8004ec6:	f107 0218 	add.w	r2, r7, #24
 8004eca:	3a18      	subs	r2, #24
 8004ecc:	6812      	ldr	r2, [r2, #0]
 8004ece:	66da      	str	r2, [r3, #108]	; 0x6c
 8004ed0:	f107 0318 	add.w	r3, r7, #24
 8004ed4:	3b04      	subs	r3, #4
 8004ed6:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004eda:	f102 0208 	add.w	r2, r2, #8
 8004ede:	6812      	ldr	r2, [r2, #0]
 8004ee0:	671a      	str	r2, [r3, #112]	; 0x70
 8004ee2:	f107 0318 	add.w	r3, r7, #24
 8004ee6:	3b04      	subs	r3, #4
 8004ee8:	f107 0218 	add.w	r2, r7, #24
 8004eec:	3a18      	subs	r2, #24
 8004eee:	6812      	ldr	r2, [r2, #0]
 8004ef0:	675a      	str	r2, [r3, #116]	; 0x74
 8004ef2:	f107 0318 	add.w	r3, r7, #24
 8004ef6:	3b04      	subs	r3, #4
 8004ef8:	f107 0218 	add.w	r2, r7, #24
 8004efc:	3a18      	subs	r2, #24
 8004efe:	6812      	ldr	r2, [r2, #0]
 8004f00:	679a      	str	r2, [r3, #120]	; 0x78
 8004f02:	f107 0318 	add.w	r3, r7, #24
 8004f06:	3b04      	subs	r3, #4
 8004f08:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004f0c:	f102 0208 	add.w	r2, r2, #8
 8004f10:	6812      	ldr	r2, [r2, #0]
 8004f12:	67da      	str	r2, [r3, #124]	; 0x7c
 8004f14:	f107 0318 	add.w	r3, r7, #24
 8004f18:	3b04      	subs	r3, #4
 8004f1a:	f107 0218 	add.w	r2, r7, #24
 8004f1e:	3a18      	subs	r2, #24
 8004f20:	6812      	ldr	r2, [r2, #0]
 8004f22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004f26:	f107 0318 	add.w	r3, r7, #24
 8004f2a:	3b04      	subs	r3, #4
 8004f2c:	f107 0218 	add.w	r2, r7, #24
 8004f30:	3a18      	subs	r2, #24
 8004f32:	6812      	ldr	r2, [r2, #0]
 8004f34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8004f38:	f107 0318 	add.w	r3, r7, #24
 8004f3c:	3b04      	subs	r3, #4
 8004f3e:	f107 0218 	add.w	r2, r7, #24
 8004f42:	3a18      	subs	r2, #24
 8004f44:	6812      	ldr	r2, [r2, #0]
 8004f46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8004f4a:	f107 0318 	add.w	r3, r7, #24
 8004f4e:	3b04      	subs	r3, #4
 8004f50:	f107 0218 	add.w	r2, r7, #24
 8004f54:	3a18      	subs	r2, #24
 8004f56:	6812      	ldr	r2, [r2, #0]
 8004f58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004f5c:	f107 0318 	add.w	r3, r7, #24
 8004f60:	3b04      	subs	r3, #4
 8004f62:	f107 0218 	add.w	r2, r7, #24
 8004f66:	3a18      	subs	r2, #24
 8004f68:	6812      	ldr	r2, [r2, #0]
 8004f6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004f6e:	f107 0318 	add.w	r3, r7, #24
 8004f72:	3b04      	subs	r3, #4
 8004f74:	f107 0218 	add.w	r2, r7, #24
 8004f78:	3a18      	subs	r2, #24
 8004f7a:	6812      	ldr	r2, [r2, #0]
 8004f7c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004f80:	f107 0318 	add.w	r3, r7, #24
 8004f84:	3b04      	subs	r3, #4
 8004f86:	f107 0218 	add.w	r2, r7, #24
 8004f8a:	3a18      	subs	r2, #24
 8004f8c:	6812      	ldr	r2, [r2, #0]
 8004f8e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98



	//____________________________________SWITCH VOOR LETTER KEUZE_________________________________________

	switch (letter)
 8004f92:	f107 0318 	add.w	r3, r7, #24
 8004f96:	3b11      	subs	r3, #17
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	3b20      	subs	r3, #32
 8004f9c:	2b5a      	cmp	r3, #90	; 0x5a
 8004f9e:	f201 84e3 	bhi.w	8006968 <letter_select+0x5ecc>
 8004fa2:	a201      	add	r2, pc, #4	; (adr r2, 8004fa8 <letter_select+0x450c>)
 8004fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa8:	080067b9 	.word	0x080067b9
 8004fac:	08006969 	.word	0x08006969
 8004fb0:	08006969 	.word	0x08006969
 8004fb4:	08006969 	.word	0x08006969
 8004fb8:	08006969 	.word	0x08006969
 8004fbc:	08006969 	.word	0x08006969
 8004fc0:	08006969 	.word	0x08006969
 8004fc4:	08006969 	.word	0x08006969
 8004fc8:	08006969 	.word	0x08006969
 8004fcc:	08006969 	.word	0x08006969
 8004fd0:	08006969 	.word	0x08006969
 8004fd4:	08006969 	.word	0x08006969
 8004fd8:	0800687f 	.word	0x0800687f
 8004fdc:	08006969 	.word	0x08006969
 8004fe0:	08006969 	.word	0x08006969
 8004fe4:	08006969 	.word	0x08006969
 8004fe8:	08006969 	.word	0x08006969
 8004fec:	08006969 	.word	0x08006969
 8004ff0:	08006969 	.word	0x08006969
 8004ff4:	08006969 	.word	0x08006969
 8004ff8:	08006969 	.word	0x08006969
 8004ffc:	08006969 	.word	0x08006969
 8005000:	08006969 	.word	0x08006969
 8005004:	08006969 	.word	0x08006969
 8005008:	08006969 	.word	0x08006969
 800500c:	08006969 	.word	0x08006969
 8005010:	08006969 	.word	0x08006969
 8005014:	08006969 	.word	0x08006969
 8005018:	08006969 	.word	0x08006969
 800501c:	08006969 	.word	0x08006969
 8005020:	08006969 	.word	0x08006969
 8005024:	08006969 	.word	0x08006969
 8005028:	08006969 	.word	0x08006969
 800502c:	08006969 	.word	0x08006969
 8005030:	08006969 	.word	0x08006969
 8005034:	08006969 	.word	0x08006969
 8005038:	08006969 	.word	0x08006969
 800503c:	08006969 	.word	0x08006969
 8005040:	08006969 	.word	0x08006969
 8005044:	08006969 	.word	0x08006969
 8005048:	08006969 	.word	0x08006969
 800504c:	08006969 	.word	0x08006969
 8005050:	08006969 	.word	0x08006969
 8005054:	08006969 	.word	0x08006969
 8005058:	08006969 	.word	0x08006969
 800505c:	08006969 	.word	0x08006969
 8005060:	08006969 	.word	0x08006969
 8005064:	08006969 	.word	0x08006969
 8005068:	08006969 	.word	0x08006969
 800506c:	08006969 	.word	0x08006969
 8005070:	08006969 	.word	0x08006969
 8005074:	08006969 	.word	0x08006969
 8005078:	08006969 	.word	0x08006969
 800507c:	08006969 	.word	0x08006969
 8005080:	08006969 	.word	0x08006969
 8005084:	08006969 	.word	0x08006969
 8005088:	08006969 	.word	0x08006969
 800508c:	08006969 	.word	0x08006969
 8005090:	08006969 	.word	0x08006969
 8005094:	08006969 	.word	0x08006969
 8005098:	08006969 	.word	0x08006969
 800509c:	08006969 	.word	0x08006969
 80050a0:	08006969 	.word	0x08006969
 80050a4:	08006969 	.word	0x08006969
 80050a8:	08006969 	.word	0x08006969
 80050ac:	08005115 	.word	0x08005115
 80050b0:	080051ff 	.word	0x080051ff
 80050b4:	080052e9 	.word	0x080052e9
 80050b8:	080053af 	.word	0x080053af
 80050bc:	08005495 	.word	0x08005495
 80050c0:	0800557b 	.word	0x0800557b
 80050c4:	08005661 	.word	0x08005661
 80050c8:	08005727 	.word	0x08005727
 80050cc:	0800580d 	.word	0x0800580d
 80050d0:	080058f7 	.word	0x080058f7
 80050d4:	080059dd 	.word	0x080059dd
 80050d8:	08005aa3 	.word	0x08005aa3
 80050dc:	08005b89 	.word	0x08005b89
 80050e0:	08005c6f 	.word	0x08005c6f
 80050e4:	08005d55 	.word	0x08005d55
 80050e8:	08005e1b 	.word	0x08005e1b
 80050ec:	08005f01 	.word	0x08005f01
 80050f0:	08005fe7 	.word	0x08005fe7
 80050f4:	080060cd 	.word	0x080060cd
 80050f8:	08006191 	.word	0x08006191
 80050fc:	08006279 	.word	0x08006279
 8005100:	0800635d 	.word	0x0800635d
 8005104:	08006441 	.word	0x08006441
 8005108:	08006505 	.word	0x08006505
 800510c:	080065e9 	.word	0x080065e9
 8005110:	080066d3 	.word	0x080066d3
	{
	case 'a':
	for (int i=0; i<10; i++) {
 8005114:	2300      	movs	r3, #0
 8005116:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800511a:	f102 0214 	add.w	r2, r2, #20
 800511e:	6013      	str	r3, [r2, #0]
 8005120:	e064      	b.n	80051ec <letter_select+0x4750>
		for (int j=0; j<4; j++) {
 8005122:	2300      	movs	r3, #0
 8005124:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8005128:	f102 0210 	add.w	r2, r2, #16
 800512c:	6013      	str	r3, [r2, #0]
 800512e:	e04b      	b.n	80051c8 <letter_select+0x472c>

			int x_pos = j + x;
 8005130:	f107 0318 	add.w	r3, r7, #24
 8005134:	3b0c      	subs	r3, #12
 8005136:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800513a:	f102 0210 	add.w	r2, r2, #16
 800513e:	6812      	ldr	r2, [r2, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4413      	add	r3, r2
 8005144:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8005148:	f102 0214 	add.w	r2, r2, #20
 800514c:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 800514e:	f107 0318 	add.w	r3, r7, #24
 8005152:	3b10      	subs	r3, #16
 8005154:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8005158:	f102 0214 	add.w	r2, r2, #20
 800515c:	6812      	ldr	r2, [r2, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4413      	add	r3, r2
 8005162:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8005166:	f102 0210 	add.w	r2, r2, #16
 800516a:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_A[i][j]);
 800516c:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8005170:	f103 0314 	add.w	r3, r3, #20
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	b298      	uxth	r0, r3
 8005178:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 800517c:	f103 0310 	add.w	r3, r3, #16
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	b29c      	uxth	r4, r3
 8005184:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8005188:	f103 0318 	add.w	r3, r3, #24
 800518c:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8005190:	f102 0214 	add.w	r2, r2, #20
 8005194:	6812      	ldr	r2, [r2, #0]
 8005196:	0091      	lsls	r1, r2, #2
 8005198:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800519c:	f102 0210 	add.w	r2, r2, #16
 80051a0:	6812      	ldr	r2, [r2, #0]
 80051a2:	440a      	add	r2, r1
 80051a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	461a      	mov	r2, r3
 80051ac:	4621      	mov	r1, r4
 80051ae:	f002 ff97 	bl	80080e0 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 80051b2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80051b6:	f103 0310 	add.w	r3, r3, #16
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	3301      	adds	r3, #1
 80051be:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 80051c2:	f102 0210 	add.w	r2, r2, #16
 80051c6:	6013      	str	r3, [r2, #0]
 80051c8:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80051cc:	f103 0310 	add.w	r3, r3, #16
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b03      	cmp	r3, #3
 80051d4:	ddac      	ble.n	8005130 <letter_select+0x4694>
	for (int i=0; i<10; i++) {
 80051d6:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80051da:	f103 0314 	add.w	r3, r3, #20
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3301      	adds	r3, #1
 80051e2:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 80051e6:	f102 0214 	add.w	r2, r2, #20
 80051ea:	6013      	str	r3, [r2, #0]
 80051ec:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80051f0:	f103 0314 	add.w	r3, r3, #20
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2b09      	cmp	r3, #9
 80051f8:	dd93      	ble.n	8005122 <letter_select+0x4686>
		}
	}
	break;
 80051fa:	f001 bbb8 	b.w	800696e <letter_select+0x5ed2>


	case 'b':
	for (int i=0; i<10; i++) {
 80051fe:	2300      	movs	r3, #0
 8005200:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8005204:	f102 020c 	add.w	r2, r2, #12
 8005208:	6013      	str	r3, [r2, #0]
 800520a:	e064      	b.n	80052d6 <letter_select+0x483a>
		for (int j=0; j<4; j++) {
 800520c:	2300      	movs	r3, #0
 800520e:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8005212:	f102 0208 	add.w	r2, r2, #8
 8005216:	6013      	str	r3, [r2, #0]
 8005218:	e04b      	b.n	80052b2 <letter_select+0x4816>

			int x_pos = j + x;
 800521a:	f107 0318 	add.w	r3, r7, #24
 800521e:	3b0c      	subs	r3, #12
 8005220:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8005224:	f102 0208 	add.w	r2, r2, #8
 8005228:	6812      	ldr	r2, [r2, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4413      	add	r3, r2
 800522e:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8005232:	f102 020c 	add.w	r2, r2, #12
 8005236:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8005238:	f107 0318 	add.w	r3, r7, #24
 800523c:	3b10      	subs	r3, #16
 800523e:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8005242:	f102 020c 	add.w	r2, r2, #12
 8005246:	6812      	ldr	r2, [r2, #0]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4413      	add	r3, r2
 800524c:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8005250:	f102 0208 	add.w	r2, r2, #8
 8005254:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_B[i][j]);
 8005256:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 800525a:	f103 030c 	add.w	r3, r3, #12
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	b298      	uxth	r0, r3
 8005262:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8005266:	f103 0308 	add.w	r3, r3, #8
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	b29c      	uxth	r4, r3
 800526e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8005272:	f103 0318 	add.w	r3, r3, #24
 8005276:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800527a:	f102 020c 	add.w	r2, r2, #12
 800527e:	6812      	ldr	r2, [r2, #0]
 8005280:	0091      	lsls	r1, r2, #2
 8005282:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8005286:	f102 0208 	add.w	r2, r2, #8
 800528a:	6812      	ldr	r2, [r2, #0]
 800528c:	440a      	add	r2, r1
 800528e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005292:	b2db      	uxtb	r3, r3
 8005294:	461a      	mov	r2, r3
 8005296:	4621      	mov	r1, r4
 8005298:	f002 ff22 	bl	80080e0 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 800529c:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80052a0:	f103 0308 	add.w	r3, r3, #8
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3301      	adds	r3, #1
 80052a8:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 80052ac:	f102 0208 	add.w	r2, r2, #8
 80052b0:	6013      	str	r3, [r2, #0]
 80052b2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80052b6:	f103 0308 	add.w	r3, r3, #8
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b03      	cmp	r3, #3
 80052be:	ddac      	ble.n	800521a <letter_select+0x477e>
	for (int i=0; i<10; i++) {
 80052c0:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80052c4:	f103 030c 	add.w	r3, r3, #12
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	3301      	adds	r3, #1
 80052cc:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 80052d0:	f102 020c 	add.w	r2, r2, #12
 80052d4:	6013      	str	r3, [r2, #0]
 80052d6:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80052da:	f103 030c 	add.w	r3, r3, #12
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b09      	cmp	r3, #9
 80052e2:	dd93      	ble.n	800520c <letter_select+0x4770>
		}
	}
	break;
 80052e4:	f001 bb43 	b.w	800696e <letter_select+0x5ed2>


	case 'c':
	for (int i=0; i<10; i++) {
 80052e8:	2300      	movs	r3, #0
 80052ea:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 80052ee:	f102 0204 	add.w	r2, r2, #4
 80052f2:	6013      	str	r3, [r2, #0]
 80052f4:	e052      	b.n	800539c <letter_select+0x4900>
		for (int j=0; j<4; j++) {
 80052f6:	2300      	movs	r3, #0
 80052f8:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 80052fc:	6013      	str	r3, [r2, #0]
 80052fe:	e03d      	b.n	800537c <letter_select+0x48e0>

			int x_pos = j + x;
 8005300:	f107 0318 	add.w	r3, r7, #24
 8005304:	3b0c      	subs	r3, #12
 8005306:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800530a:	6812      	ldr	r2, [r2, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4413      	add	r3, r2
 8005310:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8005314:	f102 0204 	add.w	r2, r2, #4
 8005318:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 800531a:	f107 0318 	add.w	r3, r7, #24
 800531e:	3b10      	subs	r3, #16
 8005320:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8005324:	f102 0204 	add.w	r2, r2, #4
 8005328:	6812      	ldr	r2, [r2, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4413      	add	r3, r2
 800532e:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8005332:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_C[i][j]);
 8005334:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8005338:	f103 0304 	add.w	r3, r3, #4
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	b298      	uxth	r0, r3
 8005340:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	b29c      	uxth	r4, r3
 8005348:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 800534c:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8005350:	f102 0204 	add.w	r2, r2, #4
 8005354:	6812      	ldr	r2, [r2, #0]
 8005356:	0091      	lsls	r1, r2, #2
 8005358:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800535c:	6812      	ldr	r2, [r2, #0]
 800535e:	440a      	add	r2, r1
 8005360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005364:	b2db      	uxtb	r3, r3
 8005366:	461a      	mov	r2, r3
 8005368:	4621      	mov	r1, r4
 800536a:	f002 feb9 	bl	80080e0 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 800536e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3301      	adds	r3, #1
 8005376:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	2b03      	cmp	r3, #3
 8005384:	ddbc      	ble.n	8005300 <letter_select+0x4864>
	for (int i=0; i<10; i++) {
 8005386:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800538a:	f103 0304 	add.w	r3, r3, #4
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3301      	adds	r3, #1
 8005392:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8005396:	f102 0204 	add.w	r2, r2, #4
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80053a0:	f103 0304 	add.w	r3, r3, #4
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b09      	cmp	r3, #9
 80053a8:	dda5      	ble.n	80052f6 <letter_select+0x485a>
		}
	}
	break;
 80053aa:	f001 bae0 	b.w	800696e <letter_select+0x5ed2>


	case 'd':
	for (int i=0; i<10; i++) {
 80053ae:	2300      	movs	r3, #0
 80053b0:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80053b4:	f102 021c 	add.w	r2, r2, #28
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	e062      	b.n	8005482 <letter_select+0x49e6>
		for (int j=0; j<4; j++) {
 80053bc:	2300      	movs	r3, #0
 80053be:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80053c2:	f102 0218 	add.w	r2, r2, #24
 80053c6:	6013      	str	r3, [r2, #0]
 80053c8:	e049      	b.n	800545e <letter_select+0x49c2>

			int x_pos = j + x;
 80053ca:	f107 0318 	add.w	r3, r7, #24
 80053ce:	3b0c      	subs	r3, #12
 80053d0:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80053d4:	f102 0218 	add.w	r2, r2, #24
 80053d8:	6812      	ldr	r2, [r2, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4413      	add	r3, r2
 80053de:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 80053e2:	f102 021c 	add.w	r2, r2, #28
 80053e6:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80053e8:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 80053ec:	f102 0218 	add.w	r2, r2, #24
 80053f0:	f107 0318 	add.w	r3, r7, #24
 80053f4:	3b10      	subs	r3, #16
 80053f6:	f507 519a 	add.w	r1, r7, #4928	; 0x1340
 80053fa:	f101 011c 	add.w	r1, r1, #28
 80053fe:	6809      	ldr	r1, [r1, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	440b      	add	r3, r1
 8005404:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_D[i][j]);
 8005406:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800540a:	f103 031c 	add.w	r3, r3, #28
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	b298      	uxth	r0, r3
 8005412:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8005416:	f103 0318 	add.w	r3, r3, #24
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	b29c      	uxth	r4, r3
 800541e:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 8005422:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8005426:	f102 021c 	add.w	r2, r2, #28
 800542a:	6812      	ldr	r2, [r2, #0]
 800542c:	0091      	lsls	r1, r2, #2
 800542e:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8005432:	f102 0218 	add.w	r2, r2, #24
 8005436:	6812      	ldr	r2, [r2, #0]
 8005438:	440a      	add	r2, r1
 800543a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800543e:	b2db      	uxtb	r3, r3
 8005440:	461a      	mov	r2, r3
 8005442:	4621      	mov	r1, r4
 8005444:	f002 fe4c 	bl	80080e0 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8005448:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800544c:	f103 0318 	add.w	r3, r3, #24
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3301      	adds	r3, #1
 8005454:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8005458:	f102 0218 	add.w	r2, r2, #24
 800545c:	6013      	str	r3, [r2, #0]
 800545e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8005462:	f103 0318 	add.w	r3, r3, #24
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b03      	cmp	r3, #3
 800546a:	ddae      	ble.n	80053ca <letter_select+0x492e>
	for (int i=0; i<10; i++) {
 800546c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8005470:	f103 031c 	add.w	r3, r3, #28
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	3301      	adds	r3, #1
 8005478:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800547c:	f102 021c 	add.w	r2, r2, #28
 8005480:	6013      	str	r3, [r2, #0]
 8005482:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8005486:	f103 031c 	add.w	r3, r3, #28
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2b09      	cmp	r3, #9
 800548e:	dd95      	ble.n	80053bc <letter_select+0x4920>
		}
	}
	break;
 8005490:	f001 ba6d 	b.w	800696e <letter_select+0x5ed2>


	case 'e':
	for (int i=0; i<10; i++) {
 8005494:	2300      	movs	r3, #0
 8005496:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800549a:	f102 0214 	add.w	r2, r2, #20
 800549e:	6013      	str	r3, [r2, #0]
 80054a0:	e062      	b.n	8005568 <letter_select+0x4acc>
		for (int j=0; j<4; j++) {
 80054a2:	2300      	movs	r3, #0
 80054a4:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80054a8:	f102 0210 	add.w	r2, r2, #16
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	e049      	b.n	8005544 <letter_select+0x4aa8>

			int x_pos = j + x;
 80054b0:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 80054b4:	f102 0214 	add.w	r2, r2, #20
 80054b8:	f107 0318 	add.w	r3, r7, #24
 80054bc:	3b0c      	subs	r3, #12
 80054be:	f507 519a 	add.w	r1, r7, #4928	; 0x1340
 80054c2:	f101 0110 	add.w	r1, r1, #16
 80054c6:	6809      	ldr	r1, [r1, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	440b      	add	r3, r1
 80054cc:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80054ce:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 80054d2:	f102 0210 	add.w	r2, r2, #16
 80054d6:	f107 0318 	add.w	r3, r7, #24
 80054da:	3b10      	subs	r3, #16
 80054dc:	f507 519a 	add.w	r1, r7, #4928	; 0x1340
 80054e0:	f101 0114 	add.w	r1, r1, #20
 80054e4:	6809      	ldr	r1, [r1, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	440b      	add	r3, r1
 80054ea:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_E[i][j]);
 80054ec:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 80054f0:	f103 0314 	add.w	r3, r3, #20
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	b298      	uxth	r0, r3
 80054f8:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 80054fc:	f103 0310 	add.w	r3, r3, #16
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	b29c      	uxth	r4, r3
 8005504:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8005508:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800550c:	f102 0214 	add.w	r2, r2, #20
 8005510:	6812      	ldr	r2, [r2, #0]
 8005512:	0091      	lsls	r1, r2, #2
 8005514:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8005518:	f102 0210 	add.w	r2, r2, #16
 800551c:	6812      	ldr	r2, [r2, #0]
 800551e:	440a      	add	r2, r1
 8005520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005524:	b2db      	uxtb	r3, r3
 8005526:	461a      	mov	r2, r3
 8005528:	4621      	mov	r1, r4
 800552a:	f002 fdd9 	bl	80080e0 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 800552e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8005532:	f103 0310 	add.w	r3, r3, #16
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	3301      	adds	r3, #1
 800553a:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800553e:	f102 0210 	add.w	r2, r2, #16
 8005542:	6013      	str	r3, [r2, #0]
 8005544:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8005548:	f103 0310 	add.w	r3, r3, #16
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b03      	cmp	r3, #3
 8005550:	ddae      	ble.n	80054b0 <letter_select+0x4a14>
	for (int i=0; i<10; i++) {
 8005552:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8005556:	f103 0314 	add.w	r3, r3, #20
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3301      	adds	r3, #1
 800555e:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8005562:	f102 0214 	add.w	r2, r2, #20
 8005566:	6013      	str	r3, [r2, #0]
 8005568:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800556c:	f103 0314 	add.w	r3, r3, #20
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	2b09      	cmp	r3, #9
 8005574:	dd95      	ble.n	80054a2 <letter_select+0x4a06>
		}
	}
	break;
 8005576:	f001 b9fa 	b.w	800696e <letter_select+0x5ed2>


	case 'f':
	for (int i=0; i<10; i++) {
 800557a:	2300      	movs	r3, #0
 800557c:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8005580:	f102 020c 	add.w	r2, r2, #12
 8005584:	6013      	str	r3, [r2, #0]
 8005586:	e062      	b.n	800564e <letter_select+0x4bb2>
		for (int j=0; j<4; j++) {
 8005588:	2300      	movs	r3, #0
 800558a:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800558e:	f102 0208 	add.w	r2, r2, #8
 8005592:	6013      	str	r3, [r2, #0]
 8005594:	e049      	b.n	800562a <letter_select+0x4b8e>

			int x_pos = j + x;
 8005596:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800559a:	f102 020c 	add.w	r2, r2, #12
 800559e:	f107 0318 	add.w	r3, r7, #24
 80055a2:	3b0c      	subs	r3, #12
 80055a4:	f507 519a 	add.w	r1, r7, #4928	; 0x1340
 80055a8:	f101 0108 	add.w	r1, r1, #8
 80055ac:	6809      	ldr	r1, [r1, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	440b      	add	r3, r1
 80055b2:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80055b4:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 80055b8:	f102 0208 	add.w	r2, r2, #8
 80055bc:	f107 0318 	add.w	r3, r7, #24
 80055c0:	3b10      	subs	r3, #16
 80055c2:	f507 519a 	add.w	r1, r7, #4928	; 0x1340
 80055c6:	f101 010c 	add.w	r1, r1, #12
 80055ca:	6809      	ldr	r1, [r1, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	440b      	add	r3, r1
 80055d0:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_F[i][j]);
 80055d2:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 80055d6:	f103 030c 	add.w	r3, r3, #12
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	b298      	uxth	r0, r3
 80055de:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 80055e2:	f103 0308 	add.w	r3, r3, #8
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	b29c      	uxth	r4, r3
 80055ea:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80055ee:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80055f2:	f102 020c 	add.w	r2, r2, #12
 80055f6:	6812      	ldr	r2, [r2, #0]
 80055f8:	0091      	lsls	r1, r2, #2
 80055fa:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80055fe:	f102 0208 	add.w	r2, r2, #8
 8005602:	6812      	ldr	r2, [r2, #0]
 8005604:	440a      	add	r2, r1
 8005606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800560a:	b2db      	uxtb	r3, r3
 800560c:	461a      	mov	r2, r3
 800560e:	4621      	mov	r1, r4
 8005610:	f002 fd66 	bl	80080e0 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8005614:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8005618:	f103 0308 	add.w	r3, r3, #8
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	3301      	adds	r3, #1
 8005620:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8005624:	f102 0208 	add.w	r2, r2, #8
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800562e:	f103 0308 	add.w	r3, r3, #8
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2b03      	cmp	r3, #3
 8005636:	ddae      	ble.n	8005596 <letter_select+0x4afa>
	for (int i=0; i<10; i++) {
 8005638:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800563c:	f103 030c 	add.w	r3, r3, #12
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	3301      	adds	r3, #1
 8005644:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8005648:	f102 020c 	add.w	r2, r2, #12
 800564c:	6013      	str	r3, [r2, #0]
 800564e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8005652:	f103 030c 	add.w	r3, r3, #12
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b09      	cmp	r3, #9
 800565a:	dd95      	ble.n	8005588 <letter_select+0x4aec>
		}
	}
	break;
 800565c:	f001 b987 	b.w	800696e <letter_select+0x5ed2>


	case 'g':
	for (int i=0; i<10; i++) {
 8005660:	2300      	movs	r3, #0
 8005662:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8005666:	f102 0204 	add.w	r2, r2, #4
 800566a:	6013      	str	r3, [r2, #0]
 800566c:	e052      	b.n	8005714 <letter_select+0x4c78>
		for (int j=0; j<4; j++) {
 800566e:	2300      	movs	r3, #0
 8005670:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8005674:	6013      	str	r3, [r2, #0]
 8005676:	e03d      	b.n	80056f4 <letter_select+0x4c58>

			int x_pos = j + x;
 8005678:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800567c:	f102 0204 	add.w	r2, r2, #4
 8005680:	f107 0318 	add.w	r3, r7, #24
 8005684:	3b0c      	subs	r3, #12
 8005686:	f507 519a 	add.w	r1, r7, #4928	; 0x1340
 800568a:	6809      	ldr	r1, [r1, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	440b      	add	r3, r1
 8005690:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8005692:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8005696:	f107 0318 	add.w	r3, r7, #24
 800569a:	3b10      	subs	r3, #16
 800569c:	f507 519a 	add.w	r1, r7, #4928	; 0x1340
 80056a0:	f101 0104 	add.w	r1, r1, #4
 80056a4:	6809      	ldr	r1, [r1, #0]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	440b      	add	r3, r1
 80056aa:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_G[i][j]);
 80056ac:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 80056b0:	f103 0304 	add.w	r3, r3, #4
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	b298      	uxth	r0, r3
 80056b8:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	b29c      	uxth	r4, r3
 80056c0:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 80056c4:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80056c8:	f102 0204 	add.w	r2, r2, #4
 80056cc:	6812      	ldr	r2, [r2, #0]
 80056ce:	0091      	lsls	r1, r2, #2
 80056d0:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80056d4:	6812      	ldr	r2, [r2, #0]
 80056d6:	440a      	add	r2, r1
 80056d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	461a      	mov	r2, r3
 80056e0:	4621      	mov	r1, r4
 80056e2:	f002 fcfd 	bl	80080e0 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 80056e6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	3301      	adds	r3, #1
 80056ee:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80056f2:	6013      	str	r3, [r2, #0]
 80056f4:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b03      	cmp	r3, #3
 80056fc:	ddbc      	ble.n	8005678 <letter_select+0x4bdc>
	for (int i=0; i<10; i++) {
 80056fe:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8005702:	f103 0304 	add.w	r3, r3, #4
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	3301      	adds	r3, #1
 800570a:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800570e:	f102 0204 	add.w	r2, r2, #4
 8005712:	6013      	str	r3, [r2, #0]
 8005714:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8005718:	f103 0304 	add.w	r3, r3, #4
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b09      	cmp	r3, #9
 8005720:	dda5      	ble.n	800566e <letter_select+0x4bd2>
		}
	}
	break;
 8005722:	f001 b924 	b.w	800696e <letter_select+0x5ed2>


	case 'h':
	for (int i=0; i<10; i++) {
 8005726:	2300      	movs	r3, #0
 8005728:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 800572c:	f102 021c 	add.w	r2, r2, #28
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	e062      	b.n	80057fa <letter_select+0x4d5e>
		for (int j=0; j<4; j++) {
 8005734:	2300      	movs	r3, #0
 8005736:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 800573a:	f102 0218 	add.w	r2, r2, #24
 800573e:	6013      	str	r3, [r2, #0]
 8005740:	e049      	b.n	80057d6 <letter_select+0x4d3a>

			int x_pos = j + x;
 8005742:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8005746:	f102 021c 	add.w	r2, r2, #28
 800574a:	f107 0318 	add.w	r3, r7, #24
 800574e:	3b0c      	subs	r3, #12
 8005750:	f507 5199 	add.w	r1, r7, #4896	; 0x1320
 8005754:	f101 0118 	add.w	r1, r1, #24
 8005758:	6809      	ldr	r1, [r1, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	440b      	add	r3, r1
 800575e:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8005760:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8005764:	f102 0218 	add.w	r2, r2, #24
 8005768:	f107 0318 	add.w	r3, r7, #24
 800576c:	3b10      	subs	r3, #16
 800576e:	f507 5199 	add.w	r1, r7, #4896	; 0x1320
 8005772:	f101 011c 	add.w	r1, r1, #28
 8005776:	6809      	ldr	r1, [r1, #0]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	440b      	add	r3, r1
 800577c:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_H[i][j]);
 800577e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8005782:	f103 031c 	add.w	r3, r3, #28
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	b298      	uxth	r0, r3
 800578a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800578e:	f103 0318 	add.w	r3, r3, #24
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	b29c      	uxth	r4, r3
 8005796:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 800579a:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 800579e:	f102 021c 	add.w	r2, r2, #28
 80057a2:	6812      	ldr	r2, [r2, #0]
 80057a4:	0091      	lsls	r1, r2, #2
 80057a6:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80057aa:	f102 0218 	add.w	r2, r2, #24
 80057ae:	6812      	ldr	r2, [r2, #0]
 80057b0:	440a      	add	r2, r1
 80057b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	461a      	mov	r2, r3
 80057ba:	4621      	mov	r1, r4
 80057bc:	f002 fc90 	bl	80080e0 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 80057c0:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80057c4:	f103 0318 	add.w	r3, r3, #24
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3301      	adds	r3, #1
 80057cc:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80057d0:	f102 0218 	add.w	r2, r2, #24
 80057d4:	6013      	str	r3, [r2, #0]
 80057d6:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80057da:	f103 0318 	add.w	r3, r3, #24
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2b03      	cmp	r3, #3
 80057e2:	ddae      	ble.n	8005742 <letter_select+0x4ca6>
	for (int i=0; i<10; i++) {
 80057e4:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80057e8:	f103 031c 	add.w	r3, r3, #28
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	3301      	adds	r3, #1
 80057f0:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80057f4:	f102 021c 	add.w	r2, r2, #28
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80057fe:	f103 031c 	add.w	r3, r3, #28
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b09      	cmp	r3, #9
 8005806:	dd95      	ble.n	8005734 <letter_select+0x4c98>
		}
	}
	break;
 8005808:	f001 b8b1 	b.w	800696e <letter_select+0x5ed2>


	case 'i':
	for (int i=0; i<10; i++) {
 800580c:	2300      	movs	r3, #0
 800580e:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005812:	f102 0214 	add.w	r2, r2, #20
 8005816:	6013      	str	r3, [r2, #0]
 8005818:	e064      	b.n	80058e4 <letter_select+0x4e48>
		for (int j=0; j<3; j++) {
 800581a:	2300      	movs	r3, #0
 800581c:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005820:	f102 0210 	add.w	r2, r2, #16
 8005824:	6013      	str	r3, [r2, #0]
 8005826:	e04b      	b.n	80058c0 <letter_select+0x4e24>

			int x_pos = j + x;
 8005828:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 800582c:	f102 0214 	add.w	r2, r2, #20
 8005830:	f107 0318 	add.w	r3, r7, #24
 8005834:	3b0c      	subs	r3, #12
 8005836:	f507 5199 	add.w	r1, r7, #4896	; 0x1320
 800583a:	f101 0110 	add.w	r1, r1, #16
 800583e:	6809      	ldr	r1, [r1, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	440b      	add	r3, r1
 8005844:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8005846:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 800584a:	f102 0210 	add.w	r2, r2, #16
 800584e:	f107 0318 	add.w	r3, r7, #24
 8005852:	3b10      	subs	r3, #16
 8005854:	f507 5199 	add.w	r1, r7, #4896	; 0x1320
 8005858:	f101 0114 	add.w	r1, r1, #20
 800585c:	6809      	ldr	r1, [r1, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	440b      	add	r3, r1
 8005862:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_I[i][j]);
 8005864:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8005868:	f103 0314 	add.w	r3, r3, #20
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	b298      	uxth	r0, r3
 8005870:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8005874:	f103 0310 	add.w	r3, r3, #16
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	b29c      	uxth	r4, r3
 800587c:	f507 6144 	add.w	r1, r7, #3136	; 0xc40
 8005880:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005884:	f103 0314 	add.w	r3, r3, #20
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	4613      	mov	r3, r2
 800588c:	005b      	lsls	r3, r3, #1
 800588e:	4413      	add	r3, r2
 8005890:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005894:	f102 0210 	add.w	r2, r2, #16
 8005898:	6812      	ldr	r2, [r2, #0]
 800589a:	4413      	add	r3, r2
 800589c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	461a      	mov	r2, r3
 80058a4:	4621      	mov	r1, r4
 80058a6:	f002 fc1b 	bl	80080e0 <UB_VGA_SetPixel>
		for (int j=0; j<3; j++) {
 80058aa:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80058ae:	f103 0310 	add.w	r3, r3, #16
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	3301      	adds	r3, #1
 80058b6:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80058ba:	f102 0210 	add.w	r2, r2, #16
 80058be:	6013      	str	r3, [r2, #0]
 80058c0:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80058c4:	f103 0310 	add.w	r3, r3, #16
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	ddac      	ble.n	8005828 <letter_select+0x4d8c>
	for (int i=0; i<10; i++) {
 80058ce:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80058d2:	f103 0314 	add.w	r3, r3, #20
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3301      	adds	r3, #1
 80058da:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80058de:	f102 0214 	add.w	r2, r2, #20
 80058e2:	6013      	str	r3, [r2, #0]
 80058e4:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80058e8:	f103 0314 	add.w	r3, r3, #20
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2b09      	cmp	r3, #9
 80058f0:	dd93      	ble.n	800581a <letter_select+0x4d7e>
		}
	}
	break;
 80058f2:	f001 b83c 	b.w	800696e <letter_select+0x5ed2>


	case 'j':
	for (int i=0; i<10; i++) {
 80058f6:	2300      	movs	r3, #0
 80058f8:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80058fc:	f102 020c 	add.w	r2, r2, #12
 8005900:	6013      	str	r3, [r2, #0]
 8005902:	e062      	b.n	80059ca <letter_select+0x4f2e>
		for (int j=0; j<4; j++) {
 8005904:	2300      	movs	r3, #0
 8005906:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 800590a:	f102 0208 	add.w	r2, r2, #8
 800590e:	6013      	str	r3, [r2, #0]
 8005910:	e049      	b.n	80059a6 <letter_select+0x4f0a>

			int x_pos = j + x;
 8005912:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8005916:	f102 020c 	add.w	r2, r2, #12
 800591a:	f107 0318 	add.w	r3, r7, #24
 800591e:	3b0c      	subs	r3, #12
 8005920:	f507 5199 	add.w	r1, r7, #4896	; 0x1320
 8005924:	f101 0108 	add.w	r1, r1, #8
 8005928:	6809      	ldr	r1, [r1, #0]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	440b      	add	r3, r1
 800592e:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8005930:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8005934:	f102 0208 	add.w	r2, r2, #8
 8005938:	f107 0318 	add.w	r3, r7, #24
 800593c:	3b10      	subs	r3, #16
 800593e:	f507 5199 	add.w	r1, r7, #4896	; 0x1320
 8005942:	f101 010c 	add.w	r1, r1, #12
 8005946:	6809      	ldr	r1, [r1, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	440b      	add	r3, r1
 800594c:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_J[i][j]);
 800594e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8005952:	f103 030c 	add.w	r3, r3, #12
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	b298      	uxth	r0, r3
 800595a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800595e:	f103 0308 	add.w	r3, r3, #8
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	b29c      	uxth	r4, r3
 8005966:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 800596a:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 800596e:	f102 020c 	add.w	r2, r2, #12
 8005972:	6812      	ldr	r2, [r2, #0]
 8005974:	0091      	lsls	r1, r2, #2
 8005976:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 800597a:	f102 0208 	add.w	r2, r2, #8
 800597e:	6812      	ldr	r2, [r2, #0]
 8005980:	440a      	add	r2, r1
 8005982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005986:	b2db      	uxtb	r3, r3
 8005988:	461a      	mov	r2, r3
 800598a:	4621      	mov	r1, r4
 800598c:	f002 fba8 	bl	80080e0 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8005990:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005994:	f103 0308 	add.w	r3, r3, #8
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3301      	adds	r3, #1
 800599c:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80059a0:	f102 0208 	add.w	r2, r2, #8
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80059aa:	f103 0308 	add.w	r3, r3, #8
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b03      	cmp	r3, #3
 80059b2:	ddae      	ble.n	8005912 <letter_select+0x4e76>
	for (int i=0; i<10; i++) {
 80059b4:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80059b8:	f103 030c 	add.w	r3, r3, #12
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	3301      	adds	r3, #1
 80059c0:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80059c4:	f102 020c 	add.w	r2, r2, #12
 80059c8:	6013      	str	r3, [r2, #0]
 80059ca:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80059ce:	f103 030c 	add.w	r3, r3, #12
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	2b09      	cmp	r3, #9
 80059d6:	dd95      	ble.n	8005904 <letter_select+0x4e68>
		}
	}
	break;
 80059d8:	f000 bfc9 	b.w	800696e <letter_select+0x5ed2>


	case 'k':
	for (int i=0; i<10; i++) {
 80059dc:	2300      	movs	r3, #0
 80059de:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80059e2:	f102 0204 	add.w	r2, r2, #4
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	e052      	b.n	8005a90 <letter_select+0x4ff4>
		for (int j=0; j<4; j++) {
 80059ea:	2300      	movs	r3, #0
 80059ec:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 80059f0:	6013      	str	r3, [r2, #0]
 80059f2:	e03d      	b.n	8005a70 <letter_select+0x4fd4>

			int x_pos = j + x;
 80059f4:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 80059f8:	f102 0204 	add.w	r2, r2, #4
 80059fc:	f107 0318 	add.w	r3, r7, #24
 8005a00:	3b0c      	subs	r3, #12
 8005a02:	f507 5199 	add.w	r1, r7, #4896	; 0x1320
 8005a06:	6809      	ldr	r1, [r1, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	440b      	add	r3, r1
 8005a0c:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8005a0e:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8005a12:	f107 0318 	add.w	r3, r7, #24
 8005a16:	3b10      	subs	r3, #16
 8005a18:	f507 5199 	add.w	r1, r7, #4896	; 0x1320
 8005a1c:	f101 0104 	add.w	r1, r1, #4
 8005a20:	6809      	ldr	r1, [r1, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	440b      	add	r3, r1
 8005a26:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_K[i][j]);
 8005a28:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8005a2c:	f103 0304 	add.w	r3, r3, #4
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	b298      	uxth	r0, r3
 8005a34:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	b29c      	uxth	r4, r3
 8005a3c:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8005a40:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005a44:	f102 0204 	add.w	r2, r2, #4
 8005a48:	6812      	ldr	r2, [r2, #0]
 8005a4a:	0091      	lsls	r1, r2, #2
 8005a4c:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005a50:	6812      	ldr	r2, [r2, #0]
 8005a52:	440a      	add	r2, r1
 8005a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	4621      	mov	r1, r4
 8005a5e:	f002 fb3f 	bl	80080e0 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8005a62:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005a6e:	6013      	str	r3, [r2, #0]
 8005a70:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b03      	cmp	r3, #3
 8005a78:	ddbc      	ble.n	80059f4 <letter_select+0x4f58>
	for (int i=0; i<10; i++) {
 8005a7a:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005a7e:	f103 0304 	add.w	r3, r3, #4
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3301      	adds	r3, #1
 8005a86:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005a8a:	f102 0204 	add.w	r2, r2, #4
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005a94:	f103 0304 	add.w	r3, r3, #4
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b09      	cmp	r3, #9
 8005a9c:	dda5      	ble.n	80059ea <letter_select+0x4f4e>
		}
	}
	break;
 8005a9e:	f000 bf66 	b.w	800696e <letter_select+0x5ed2>


	case 'l':
	for (int i=0; i<10; i++) {
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005aa8:	f102 021c 	add.w	r2, r2, #28
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	e062      	b.n	8005b76 <letter_select+0x50da>
		for (int j=0; j<4; j++) {
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005ab6:	f102 0218 	add.w	r2, r2, #24
 8005aba:	6013      	str	r3, [r2, #0]
 8005abc:	e049      	b.n	8005b52 <letter_select+0x50b6>

			int x_pos = j + x;
 8005abe:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8005ac2:	f102 021c 	add.w	r2, r2, #28
 8005ac6:	f107 0318 	add.w	r3, r7, #24
 8005aca:	3b0c      	subs	r3, #12
 8005acc:	f507 5198 	add.w	r1, r7, #4864	; 0x1300
 8005ad0:	f101 0118 	add.w	r1, r1, #24
 8005ad4:	6809      	ldr	r1, [r1, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	440b      	add	r3, r1
 8005ada:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8005adc:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8005ae0:	f102 0218 	add.w	r2, r2, #24
 8005ae4:	f107 0318 	add.w	r3, r7, #24
 8005ae8:	3b10      	subs	r3, #16
 8005aea:	f507 5198 	add.w	r1, r7, #4864	; 0x1300
 8005aee:	f101 011c 	add.w	r1, r1, #28
 8005af2:	6809      	ldr	r1, [r1, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	440b      	add	r3, r1
 8005af8:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_L[i][j]);
 8005afa:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8005afe:	f103 031c 	add.w	r3, r3, #28
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	b298      	uxth	r0, r3
 8005b06:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8005b0a:	f103 0318 	add.w	r3, r3, #24
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	b29c      	uxth	r4, r3
 8005b12:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8005b16:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005b1a:	f102 021c 	add.w	r2, r2, #28
 8005b1e:	6812      	ldr	r2, [r2, #0]
 8005b20:	0091      	lsls	r1, r2, #2
 8005b22:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005b26:	f102 0218 	add.w	r2, r2, #24
 8005b2a:	6812      	ldr	r2, [r2, #0]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	461a      	mov	r2, r3
 8005b36:	4621      	mov	r1, r4
 8005b38:	f002 fad2 	bl	80080e0 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8005b3c:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8005b40:	f103 0318 	add.w	r3, r3, #24
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	3301      	adds	r3, #1
 8005b48:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005b4c:	f102 0218 	add.w	r2, r2, #24
 8005b50:	6013      	str	r3, [r2, #0]
 8005b52:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8005b56:	f103 0318 	add.w	r3, r3, #24
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2b03      	cmp	r3, #3
 8005b5e:	ddae      	ble.n	8005abe <letter_select+0x5022>
	for (int i=0; i<10; i++) {
 8005b60:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8005b64:	f103 031c 	add.w	r3, r3, #28
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005b70:	f102 021c 	add.w	r2, r2, #28
 8005b74:	6013      	str	r3, [r2, #0]
 8005b76:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8005b7a:	f103 031c 	add.w	r3, r3, #28
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b09      	cmp	r3, #9
 8005b82:	dd95      	ble.n	8005ab0 <letter_select+0x5014>
		}
	}
	break;
 8005b84:	f000 bef3 	b.w	800696e <letter_select+0x5ed2>


	case 'm':
	for (int i=0; i<10; i++) {
 8005b88:	2300      	movs	r3, #0
 8005b8a:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005b8e:	f102 0214 	add.w	r2, r2, #20
 8005b92:	6013      	str	r3, [r2, #0]
 8005b94:	e062      	b.n	8005c5c <letter_select+0x51c0>
		for (int j=0; j<4; j++) {
 8005b96:	2300      	movs	r3, #0
 8005b98:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005b9c:	f102 0210 	add.w	r2, r2, #16
 8005ba0:	6013      	str	r3, [r2, #0]
 8005ba2:	e049      	b.n	8005c38 <letter_select+0x519c>

			int x_pos = j + x;
 8005ba4:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8005ba8:	f102 0214 	add.w	r2, r2, #20
 8005bac:	f107 0318 	add.w	r3, r7, #24
 8005bb0:	3b0c      	subs	r3, #12
 8005bb2:	f507 5198 	add.w	r1, r7, #4864	; 0x1300
 8005bb6:	f101 0110 	add.w	r1, r1, #16
 8005bba:	6809      	ldr	r1, [r1, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	440b      	add	r3, r1
 8005bc0:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8005bc2:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8005bc6:	f102 0210 	add.w	r2, r2, #16
 8005bca:	f107 0318 	add.w	r3, r7, #24
 8005bce:	3b10      	subs	r3, #16
 8005bd0:	f507 5198 	add.w	r1, r7, #4864	; 0x1300
 8005bd4:	f101 0114 	add.w	r1, r1, #20
 8005bd8:	6809      	ldr	r1, [r1, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	440b      	add	r3, r1
 8005bde:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_M[i][j]);
 8005be0:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8005be4:	f103 0314 	add.w	r3, r3, #20
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	b298      	uxth	r0, r3
 8005bec:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8005bf0:	f103 0310 	add.w	r3, r3, #16
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	b29c      	uxth	r4, r3
 8005bf8:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8005bfc:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005c00:	f102 0214 	add.w	r2, r2, #20
 8005c04:	6812      	ldr	r2, [r2, #0]
 8005c06:	0091      	lsls	r1, r2, #2
 8005c08:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005c0c:	f102 0210 	add.w	r2, r2, #16
 8005c10:	6812      	ldr	r2, [r2, #0]
 8005c12:	440a      	add	r2, r1
 8005c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	461a      	mov	r2, r3
 8005c1c:	4621      	mov	r1, r4
 8005c1e:	f002 fa5f 	bl	80080e0 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8005c22:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8005c26:	f103 0310 	add.w	r3, r3, #16
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005c32:	f102 0210 	add.w	r2, r2, #16
 8005c36:	6013      	str	r3, [r2, #0]
 8005c38:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8005c3c:	f103 0310 	add.w	r3, r3, #16
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b03      	cmp	r3, #3
 8005c44:	ddae      	ble.n	8005ba4 <letter_select+0x5108>
	for (int i=0; i<10; i++) {
 8005c46:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8005c4a:	f103 0314 	add.w	r3, r3, #20
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	3301      	adds	r3, #1
 8005c52:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005c56:	f102 0214 	add.w	r2, r2, #20
 8005c5a:	6013      	str	r3, [r2, #0]
 8005c5c:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8005c60:	f103 0314 	add.w	r3, r3, #20
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2b09      	cmp	r3, #9
 8005c68:	dd95      	ble.n	8005b96 <letter_select+0x50fa>
		}
	}
	break;
 8005c6a:	f000 be80 	b.w	800696e <letter_select+0x5ed2>


	case 'n':
	for (int i=0; i<10; i++) {
 8005c6e:	2300      	movs	r3, #0
 8005c70:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005c74:	f102 020c 	add.w	r2, r2, #12
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	e062      	b.n	8005d42 <letter_select+0x52a6>
		for (int j=0; j<4; j++) {
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005c82:	f102 0208 	add.w	r2, r2, #8
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	e049      	b.n	8005d1e <letter_select+0x5282>

			int x_pos = j + x;
 8005c8a:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8005c8e:	f102 020c 	add.w	r2, r2, #12
 8005c92:	f107 0318 	add.w	r3, r7, #24
 8005c96:	3b0c      	subs	r3, #12
 8005c98:	f507 5198 	add.w	r1, r7, #4864	; 0x1300
 8005c9c:	f101 0108 	add.w	r1, r1, #8
 8005ca0:	6809      	ldr	r1, [r1, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	440b      	add	r3, r1
 8005ca6:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8005ca8:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8005cac:	f102 0208 	add.w	r2, r2, #8
 8005cb0:	f107 0318 	add.w	r3, r7, #24
 8005cb4:	3b10      	subs	r3, #16
 8005cb6:	f507 5198 	add.w	r1, r7, #4864	; 0x1300
 8005cba:	f101 010c 	add.w	r1, r1, #12
 8005cbe:	6809      	ldr	r1, [r1, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	440b      	add	r3, r1
 8005cc4:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_N[i][j]);
 8005cc6:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8005cca:	f103 030c 	add.w	r3, r3, #12
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	b298      	uxth	r0, r3
 8005cd2:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8005cd6:	f103 0308 	add.w	r3, r3, #8
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	b29c      	uxth	r4, r3
 8005cde:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8005ce2:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005ce6:	f102 020c 	add.w	r2, r2, #12
 8005cea:	6812      	ldr	r2, [r2, #0]
 8005cec:	0091      	lsls	r1, r2, #2
 8005cee:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005cf2:	f102 0208 	add.w	r2, r2, #8
 8005cf6:	6812      	ldr	r2, [r2, #0]
 8005cf8:	440a      	add	r2, r1
 8005cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	461a      	mov	r2, r3
 8005d02:	4621      	mov	r1, r4
 8005d04:	f002 f9ec 	bl	80080e0 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8005d08:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8005d0c:	f103 0308 	add.w	r3, r3, #8
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	3301      	adds	r3, #1
 8005d14:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005d18:	f102 0208 	add.w	r2, r2, #8
 8005d1c:	6013      	str	r3, [r2, #0]
 8005d1e:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8005d22:	f103 0308 	add.w	r3, r3, #8
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2b03      	cmp	r3, #3
 8005d2a:	ddae      	ble.n	8005c8a <letter_select+0x51ee>
	for (int i=0; i<10; i++) {
 8005d2c:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8005d30:	f103 030c 	add.w	r3, r3, #12
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	3301      	adds	r3, #1
 8005d38:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005d3c:	f102 020c 	add.w	r2, r2, #12
 8005d40:	6013      	str	r3, [r2, #0]
 8005d42:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8005d46:	f103 030c 	add.w	r3, r3, #12
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b09      	cmp	r3, #9
 8005d4e:	dd95      	ble.n	8005c7c <letter_select+0x51e0>
		}
	}
	break;
 8005d50:	f000 be0d 	b.w	800696e <letter_select+0x5ed2>


	case 'o':
	for (int i=0; i<10; i++) {
 8005d54:	2300      	movs	r3, #0
 8005d56:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005d5a:	f102 0204 	add.w	r2, r2, #4
 8005d5e:	6013      	str	r3, [r2, #0]
 8005d60:	e052      	b.n	8005e08 <letter_select+0x536c>
		for (int j=0; j<4; j++) {
 8005d62:	2300      	movs	r3, #0
 8005d64:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005d68:	6013      	str	r3, [r2, #0]
 8005d6a:	e03d      	b.n	8005de8 <letter_select+0x534c>

			int x_pos = j + x;
 8005d6c:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8005d70:	f102 0204 	add.w	r2, r2, #4
 8005d74:	f107 0318 	add.w	r3, r7, #24
 8005d78:	3b0c      	subs	r3, #12
 8005d7a:	f507 5198 	add.w	r1, r7, #4864	; 0x1300
 8005d7e:	6809      	ldr	r1, [r1, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	440b      	add	r3, r1
 8005d84:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8005d86:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8005d8a:	f107 0318 	add.w	r3, r7, #24
 8005d8e:	3b10      	subs	r3, #16
 8005d90:	f507 5198 	add.w	r1, r7, #4864	; 0x1300
 8005d94:	f101 0104 	add.w	r1, r1, #4
 8005d98:	6809      	ldr	r1, [r1, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	440b      	add	r3, r1
 8005d9e:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_O[i][j]);
 8005da0:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8005da4:	f103 0304 	add.w	r3, r3, #4
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	b298      	uxth	r0, r3
 8005dac:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	b29c      	uxth	r4, r3
 8005db4:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8005db8:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005dbc:	f102 0204 	add.w	r2, r2, #4
 8005dc0:	6812      	ldr	r2, [r2, #0]
 8005dc2:	0091      	lsls	r1, r2, #2
 8005dc4:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005dc8:	6812      	ldr	r2, [r2, #0]
 8005dca:	440a      	add	r2, r1
 8005dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	4621      	mov	r1, r4
 8005dd6:	f002 f983 	bl	80080e0 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8005dda:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3301      	adds	r3, #1
 8005de2:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	2b03      	cmp	r3, #3
 8005df0:	ddbc      	ble.n	8005d6c <letter_select+0x52d0>
	for (int i=0; i<10; i++) {
 8005df2:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8005df6:	f103 0304 	add.w	r3, r3, #4
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	3301      	adds	r3, #1
 8005dfe:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005e02:	f102 0204 	add.w	r2, r2, #4
 8005e06:	6013      	str	r3, [r2, #0]
 8005e08:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8005e0c:	f103 0304 	add.w	r3, r3, #4
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b09      	cmp	r3, #9
 8005e14:	dda5      	ble.n	8005d62 <letter_select+0x52c6>
		}
	}
	break;
 8005e16:	f000 bdaa 	b.w	800696e <letter_select+0x5ed2>


	case 'p':
	for (int i=0; i<10; i++) {
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8005e20:	f102 021c 	add.w	r2, r2, #28
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	e062      	b.n	8005eee <letter_select+0x5452>
		for (int j=0; j<4; j++) {
 8005e28:	2300      	movs	r3, #0
 8005e2a:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8005e2e:	f102 0218 	add.w	r2, r2, #24
 8005e32:	6013      	str	r3, [r2, #0]
 8005e34:	e049      	b.n	8005eca <letter_select+0x542e>

			int x_pos = j + x;
 8005e36:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8005e3a:	f102 021c 	add.w	r2, r2, #28
 8005e3e:	f107 0318 	add.w	r3, r7, #24
 8005e42:	3b0c      	subs	r3, #12
 8005e44:	f507 5197 	add.w	r1, r7, #4832	; 0x12e0
 8005e48:	f101 0118 	add.w	r1, r1, #24
 8005e4c:	6809      	ldr	r1, [r1, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	440b      	add	r3, r1
 8005e52:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8005e54:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8005e58:	f102 0218 	add.w	r2, r2, #24
 8005e5c:	f107 0318 	add.w	r3, r7, #24
 8005e60:	3b10      	subs	r3, #16
 8005e62:	f507 5197 	add.w	r1, r7, #4832	; 0x12e0
 8005e66:	f101 011c 	add.w	r1, r1, #28
 8005e6a:	6809      	ldr	r1, [r1, #0]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	440b      	add	r3, r1
 8005e70:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_P[i][j]);
 8005e72:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8005e76:	f103 031c 	add.w	r3, r3, #28
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	b298      	uxth	r0, r3
 8005e7e:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8005e82:	f103 0318 	add.w	r3, r3, #24
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	b29c      	uxth	r4, r3
 8005e8a:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8005e8e:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8005e92:	f102 021c 	add.w	r2, r2, #28
 8005e96:	6812      	ldr	r2, [r2, #0]
 8005e98:	0091      	lsls	r1, r2, #2
 8005e9a:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8005e9e:	f102 0218 	add.w	r2, r2, #24
 8005ea2:	6812      	ldr	r2, [r2, #0]
 8005ea4:	440a      	add	r2, r1
 8005ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	461a      	mov	r2, r3
 8005eae:	4621      	mov	r1, r4
 8005eb0:	f002 f916 	bl	80080e0 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8005eb4:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8005eb8:	f103 0318 	add.w	r3, r3, #24
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8005ec4:	f102 0218 	add.w	r2, r2, #24
 8005ec8:	6013      	str	r3, [r2, #0]
 8005eca:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8005ece:	f103 0318 	add.w	r3, r3, #24
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2b03      	cmp	r3, #3
 8005ed6:	ddae      	ble.n	8005e36 <letter_select+0x539a>
	for (int i=0; i<10; i++) {
 8005ed8:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8005edc:	f103 031c 	add.w	r3, r3, #28
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8005ee8:	f102 021c 	add.w	r2, r2, #28
 8005eec:	6013      	str	r3, [r2, #0]
 8005eee:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8005ef2:	f103 031c 	add.w	r3, r3, #28
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b09      	cmp	r3, #9
 8005efa:	dd95      	ble.n	8005e28 <letter_select+0x538c>
		}
	}
	break;
 8005efc:	f000 bd37 	b.w	800696e <letter_select+0x5ed2>


	case 'q':
	for (int i=0; i<10; i++) {
 8005f00:	2300      	movs	r3, #0
 8005f02:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8005f06:	f102 0214 	add.w	r2, r2, #20
 8005f0a:	6013      	str	r3, [r2, #0]
 8005f0c:	e062      	b.n	8005fd4 <letter_select+0x5538>
		for (int j=0; j<4; j++) {
 8005f0e:	2300      	movs	r3, #0
 8005f10:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8005f14:	f102 0210 	add.w	r2, r2, #16
 8005f18:	6013      	str	r3, [r2, #0]
 8005f1a:	e049      	b.n	8005fb0 <letter_select+0x5514>

			int x_pos = j + x;
 8005f1c:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8005f20:	f102 0214 	add.w	r2, r2, #20
 8005f24:	f107 0318 	add.w	r3, r7, #24
 8005f28:	3b0c      	subs	r3, #12
 8005f2a:	f507 5197 	add.w	r1, r7, #4832	; 0x12e0
 8005f2e:	f101 0110 	add.w	r1, r1, #16
 8005f32:	6809      	ldr	r1, [r1, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	440b      	add	r3, r1
 8005f38:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8005f3a:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8005f3e:	f102 0210 	add.w	r2, r2, #16
 8005f42:	f107 0318 	add.w	r3, r7, #24
 8005f46:	3b10      	subs	r3, #16
 8005f48:	f507 5197 	add.w	r1, r7, #4832	; 0x12e0
 8005f4c:	f101 0114 	add.w	r1, r1, #20
 8005f50:	6809      	ldr	r1, [r1, #0]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	440b      	add	r3, r1
 8005f56:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_Q[i][j]);
 8005f58:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8005f5c:	f103 0314 	add.w	r3, r3, #20
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	b298      	uxth	r0, r3
 8005f64:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8005f68:	f103 0310 	add.w	r3, r3, #16
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	b29c      	uxth	r4, r3
 8005f70:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8005f74:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8005f78:	f102 0214 	add.w	r2, r2, #20
 8005f7c:	6812      	ldr	r2, [r2, #0]
 8005f7e:	0091      	lsls	r1, r2, #2
 8005f80:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8005f84:	f102 0210 	add.w	r2, r2, #16
 8005f88:	6812      	ldr	r2, [r2, #0]
 8005f8a:	440a      	add	r2, r1
 8005f8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f90:	b2db      	uxtb	r3, r3
 8005f92:	461a      	mov	r2, r3
 8005f94:	4621      	mov	r1, r4
 8005f96:	f002 f8a3 	bl	80080e0 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8005f9a:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8005f9e:	f103 0310 	add.w	r3, r3, #16
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8005faa:	f102 0210 	add.w	r2, r2, #16
 8005fae:	6013      	str	r3, [r2, #0]
 8005fb0:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8005fb4:	f103 0310 	add.w	r3, r3, #16
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b03      	cmp	r3, #3
 8005fbc:	ddae      	ble.n	8005f1c <letter_select+0x5480>
	for (int i=0; i<10; i++) {
 8005fbe:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8005fc2:	f103 0314 	add.w	r3, r3, #20
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8005fce:	f102 0214 	add.w	r2, r2, #20
 8005fd2:	6013      	str	r3, [r2, #0]
 8005fd4:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8005fd8:	f103 0314 	add.w	r3, r3, #20
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b09      	cmp	r3, #9
 8005fe0:	dd95      	ble.n	8005f0e <letter_select+0x5472>
		}
	}
	break;
 8005fe2:	f000 bcc4 	b.w	800696e <letter_select+0x5ed2>


	case 'r':
	for (int i=0; i<10; i++) {
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8005fec:	f102 020c 	add.w	r2, r2, #12
 8005ff0:	6013      	str	r3, [r2, #0]
 8005ff2:	e062      	b.n	80060ba <letter_select+0x561e>
		for (int j=0; j<4; j++) {
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8005ffa:	f102 0208 	add.w	r2, r2, #8
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	e049      	b.n	8006096 <letter_select+0x55fa>

			int x_pos = j + x;
 8006002:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8006006:	f102 020c 	add.w	r2, r2, #12
 800600a:	f107 0318 	add.w	r3, r7, #24
 800600e:	3b0c      	subs	r3, #12
 8006010:	f507 5197 	add.w	r1, r7, #4832	; 0x12e0
 8006014:	f101 0108 	add.w	r1, r1, #8
 8006018:	6809      	ldr	r1, [r1, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	440b      	add	r3, r1
 800601e:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8006020:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8006024:	f102 0208 	add.w	r2, r2, #8
 8006028:	f107 0318 	add.w	r3, r7, #24
 800602c:	3b10      	subs	r3, #16
 800602e:	f507 5197 	add.w	r1, r7, #4832	; 0x12e0
 8006032:	f101 010c 	add.w	r1, r1, #12
 8006036:	6809      	ldr	r1, [r1, #0]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	440b      	add	r3, r1
 800603c:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_R[i][j]);
 800603e:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8006042:	f103 030c 	add.w	r3, r3, #12
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	b298      	uxth	r0, r3
 800604a:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 800604e:	f103 0308 	add.w	r3, r3, #8
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	b29c      	uxth	r4, r3
 8006056:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800605a:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 800605e:	f102 020c 	add.w	r2, r2, #12
 8006062:	6812      	ldr	r2, [r2, #0]
 8006064:	0091      	lsls	r1, r2, #2
 8006066:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 800606a:	f102 0208 	add.w	r2, r2, #8
 800606e:	6812      	ldr	r2, [r2, #0]
 8006070:	440a      	add	r2, r1
 8006072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006076:	b2db      	uxtb	r3, r3
 8006078:	461a      	mov	r2, r3
 800607a:	4621      	mov	r1, r4
 800607c:	f002 f830 	bl	80080e0 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8006080:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8006084:	f103 0308 	add.w	r3, r3, #8
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3301      	adds	r3, #1
 800608c:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8006090:	f102 0208 	add.w	r2, r2, #8
 8006094:	6013      	str	r3, [r2, #0]
 8006096:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800609a:	f103 0308 	add.w	r3, r3, #8
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	2b03      	cmp	r3, #3
 80060a2:	ddae      	ble.n	8006002 <letter_select+0x5566>
	for (int i=0; i<10; i++) {
 80060a4:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 80060a8:	f103 030c 	add.w	r3, r3, #12
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	3301      	adds	r3, #1
 80060b0:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 80060b4:	f102 020c 	add.w	r2, r2, #12
 80060b8:	6013      	str	r3, [r2, #0]
 80060ba:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 80060be:	f103 030c 	add.w	r3, r3, #12
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2b09      	cmp	r3, #9
 80060c6:	dd95      	ble.n	8005ff4 <letter_select+0x5558>
		}
	}
	break;
 80060c8:	f000 bc51 	b.w	800696e <letter_select+0x5ed2>


	case 's':
	for (int i=0; i<10; i++) {
 80060cc:	2300      	movs	r3, #0
 80060ce:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 80060d2:	f102 0204 	add.w	r2, r2, #4
 80060d6:	6013      	str	r3, [r2, #0]
 80060d8:	e052      	b.n	8006180 <letter_select+0x56e4>
		for (int j=0; j<4; j++) {
 80060da:	2300      	movs	r3, #0
 80060dc:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 80060e0:	6013      	str	r3, [r2, #0]
 80060e2:	e03d      	b.n	8006160 <letter_select+0x56c4>

			int x_pos = j + x;
 80060e4:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80060e8:	f102 0204 	add.w	r2, r2, #4
 80060ec:	f107 0318 	add.w	r3, r7, #24
 80060f0:	3b0c      	subs	r3, #12
 80060f2:	f507 5197 	add.w	r1, r7, #4832	; 0x12e0
 80060f6:	6809      	ldr	r1, [r1, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	440b      	add	r3, r1
 80060fc:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80060fe:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8006102:	f107 0318 	add.w	r3, r7, #24
 8006106:	3b10      	subs	r3, #16
 8006108:	f507 5197 	add.w	r1, r7, #4832	; 0x12e0
 800610c:	f101 0104 	add.w	r1, r1, #4
 8006110:	6809      	ldr	r1, [r1, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	440b      	add	r3, r1
 8006116:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_S[i][j]);
 8006118:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 800611c:	f103 0304 	add.w	r3, r3, #4
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	b298      	uxth	r0, r3
 8006124:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	b29c      	uxth	r4, r3
 800612c:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8006130:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8006134:	f102 0204 	add.w	r2, r2, #4
 8006138:	6812      	ldr	r2, [r2, #0]
 800613a:	0091      	lsls	r1, r2, #2
 800613c:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8006140:	6812      	ldr	r2, [r2, #0]
 8006142:	440a      	add	r2, r1
 8006144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006148:	b2db      	uxtb	r3, r3
 800614a:	461a      	mov	r2, r3
 800614c:	4621      	mov	r1, r4
 800614e:	f001 ffc7 	bl	80080e0 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8006152:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	3301      	adds	r3, #1
 800615a:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 800615e:	6013      	str	r3, [r2, #0]
 8006160:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b03      	cmp	r3, #3
 8006168:	ddbc      	ble.n	80060e4 <letter_select+0x5648>
	for (int i=0; i<10; i++) {
 800616a:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800616e:	f103 0304 	add.w	r3, r3, #4
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	3301      	adds	r3, #1
 8006176:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 800617a:	f102 0204 	add.w	r2, r2, #4
 800617e:	6013      	str	r3, [r2, #0]
 8006180:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8006184:	f103 0304 	add.w	r3, r3, #4
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b09      	cmp	r3, #9
 800618c:	dda5      	ble.n	80060da <letter_select+0x563e>
		}
	}
	break;
 800618e:	e3ee      	b.n	800696e <letter_select+0x5ed2>


	case 't':
	for (int i=0; i<10; i++) {
 8006190:	2300      	movs	r3, #0
 8006192:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8006196:	f102 021c 	add.w	r2, r2, #28
 800619a:	6013      	str	r3, [r2, #0]
 800619c:	e064      	b.n	8006268 <letter_select+0x57cc>
		for (int j=0; j<5; j++) {
 800619e:	2300      	movs	r3, #0
 80061a0:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80061a4:	f102 0218 	add.w	r2, r2, #24
 80061a8:	6013      	str	r3, [r2, #0]
 80061aa:	e04b      	b.n	8006244 <letter_select+0x57a8>

			int x_pos = j + x;
 80061ac:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80061b0:	f102 021c 	add.w	r2, r2, #28
 80061b4:	f107 0318 	add.w	r3, r7, #24
 80061b8:	3b0c      	subs	r3, #12
 80061ba:	f507 5196 	add.w	r1, r7, #4800	; 0x12c0
 80061be:	f101 0118 	add.w	r1, r1, #24
 80061c2:	6809      	ldr	r1, [r1, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	440b      	add	r3, r1
 80061c8:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80061ca:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80061ce:	f102 0218 	add.w	r2, r2, #24
 80061d2:	f107 0318 	add.w	r3, r7, #24
 80061d6:	3b10      	subs	r3, #16
 80061d8:	f507 5196 	add.w	r1, r7, #4800	; 0x12c0
 80061dc:	f101 011c 	add.w	r1, r1, #28
 80061e0:	6809      	ldr	r1, [r1, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	440b      	add	r3, r1
 80061e6:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_T[i][j]);
 80061e8:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 80061ec:	f103 031c 	add.w	r3, r3, #28
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	b298      	uxth	r0, r3
 80061f4:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 80061f8:	f103 0318 	add.w	r3, r3, #24
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	b29c      	uxth	r4, r3
 8006200:	f507 61a7 	add.w	r1, r7, #1336	; 0x538
 8006204:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8006208:	f103 031c 	add.w	r3, r3, #28
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	4613      	mov	r3, r2
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	4413      	add	r3, r2
 8006214:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8006218:	f102 0218 	add.w	r2, r2, #24
 800621c:	6812      	ldr	r2, [r2, #0]
 800621e:	4413      	add	r3, r2
 8006220:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006224:	b2db      	uxtb	r3, r3
 8006226:	461a      	mov	r2, r3
 8006228:	4621      	mov	r1, r4
 800622a:	f001 ff59 	bl	80080e0 <UB_VGA_SetPixel>
		for (int j=0; j<5; j++) {
 800622e:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8006232:	f103 0318 	add.w	r3, r3, #24
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	3301      	adds	r3, #1
 800623a:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800623e:	f102 0218 	add.w	r2, r2, #24
 8006242:	6013      	str	r3, [r2, #0]
 8006244:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8006248:	f103 0318 	add.w	r3, r3, #24
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	2b04      	cmp	r3, #4
 8006250:	ddac      	ble.n	80061ac <letter_select+0x5710>
	for (int i=0; i<10; i++) {
 8006252:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8006256:	f103 031c 	add.w	r3, r3, #28
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	3301      	adds	r3, #1
 800625e:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8006262:	f102 021c 	add.w	r2, r2, #28
 8006266:	6013      	str	r3, [r2, #0]
 8006268:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800626c:	f103 031c 	add.w	r3, r3, #28
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2b09      	cmp	r3, #9
 8006274:	dd93      	ble.n	800619e <letter_select+0x5702>
		}
	}
	break;
 8006276:	e37a      	b.n	800696e <letter_select+0x5ed2>


	case 'u':
	for (int i=0; i<10; i++) {
 8006278:	2300      	movs	r3, #0
 800627a:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800627e:	f102 0214 	add.w	r2, r2, #20
 8006282:	6013      	str	r3, [r2, #0]
 8006284:	e062      	b.n	800634c <letter_select+0x58b0>
		for (int j=0; j<4; j++) {
 8006286:	2300      	movs	r3, #0
 8006288:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800628c:	f102 0210 	add.w	r2, r2, #16
 8006290:	6013      	str	r3, [r2, #0]
 8006292:	e049      	b.n	8006328 <letter_select+0x588c>

			int x_pos = j + x;
 8006294:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8006298:	f102 0214 	add.w	r2, r2, #20
 800629c:	f107 0318 	add.w	r3, r7, #24
 80062a0:	3b0c      	subs	r3, #12
 80062a2:	f507 5196 	add.w	r1, r7, #4800	; 0x12c0
 80062a6:	f101 0110 	add.w	r1, r1, #16
 80062aa:	6809      	ldr	r1, [r1, #0]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	440b      	add	r3, r1
 80062b0:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80062b2:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80062b6:	f102 0210 	add.w	r2, r2, #16
 80062ba:	f107 0318 	add.w	r3, r7, #24
 80062be:	3b10      	subs	r3, #16
 80062c0:	f507 5196 	add.w	r1, r7, #4800	; 0x12c0
 80062c4:	f101 0114 	add.w	r1, r1, #20
 80062c8:	6809      	ldr	r1, [r1, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	440b      	add	r3, r1
 80062ce:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_U[i][j]);
 80062d0:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 80062d4:	f103 0314 	add.w	r3, r3, #20
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	b298      	uxth	r0, r3
 80062dc:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 80062e0:	f103 0310 	add.w	r3, r3, #16
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	b29c      	uxth	r4, r3
 80062e8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80062ec:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80062f0:	f102 0214 	add.w	r2, r2, #20
 80062f4:	6812      	ldr	r2, [r2, #0]
 80062f6:	0091      	lsls	r1, r2, #2
 80062f8:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80062fc:	f102 0210 	add.w	r2, r2, #16
 8006300:	6812      	ldr	r2, [r2, #0]
 8006302:	440a      	add	r2, r1
 8006304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006308:	b2db      	uxtb	r3, r3
 800630a:	461a      	mov	r2, r3
 800630c:	4621      	mov	r1, r4
 800630e:	f001 fee7 	bl	80080e0 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8006312:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8006316:	f103 0310 	add.w	r3, r3, #16
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	3301      	adds	r3, #1
 800631e:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8006322:	f102 0210 	add.w	r2, r2, #16
 8006326:	6013      	str	r3, [r2, #0]
 8006328:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800632c:	f103 0310 	add.w	r3, r3, #16
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b03      	cmp	r3, #3
 8006334:	ddae      	ble.n	8006294 <letter_select+0x57f8>
	for (int i=0; i<10; i++) {
 8006336:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800633a:	f103 0314 	add.w	r3, r3, #20
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3301      	adds	r3, #1
 8006342:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8006346:	f102 0214 	add.w	r2, r2, #20
 800634a:	6013      	str	r3, [r2, #0]
 800634c:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8006350:	f103 0314 	add.w	r3, r3, #20
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b09      	cmp	r3, #9
 8006358:	dd95      	ble.n	8006286 <letter_select+0x57ea>
		}
	}
	break;
 800635a:	e308      	b.n	800696e <letter_select+0x5ed2>


	case 'v':
	for (int i=0; i<10; i++) {
 800635c:	2300      	movs	r3, #0
 800635e:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8006362:	f102 020c 	add.w	r2, r2, #12
 8006366:	6013      	str	r3, [r2, #0]
 8006368:	e062      	b.n	8006430 <letter_select+0x5994>
		for (int j=0; j<4; j++) {
 800636a:	2300      	movs	r3, #0
 800636c:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8006370:	f102 0208 	add.w	r2, r2, #8
 8006374:	6013      	str	r3, [r2, #0]
 8006376:	e049      	b.n	800640c <letter_select+0x5970>

			int x_pos = j + x;
 8006378:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 800637c:	f102 020c 	add.w	r2, r2, #12
 8006380:	f107 0318 	add.w	r3, r7, #24
 8006384:	3b0c      	subs	r3, #12
 8006386:	f507 5196 	add.w	r1, r7, #4800	; 0x12c0
 800638a:	f101 0108 	add.w	r1, r1, #8
 800638e:	6809      	ldr	r1, [r1, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	440b      	add	r3, r1
 8006394:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8006396:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 800639a:	f102 0208 	add.w	r2, r2, #8
 800639e:	f107 0318 	add.w	r3, r7, #24
 80063a2:	3b10      	subs	r3, #16
 80063a4:	f507 5196 	add.w	r1, r7, #4800	; 0x12c0
 80063a8:	f101 010c 	add.w	r1, r1, #12
 80063ac:	6809      	ldr	r1, [r1, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	440b      	add	r3, r1
 80063b2:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_V[i][j]);
 80063b4:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 80063b8:	f103 030c 	add.w	r3, r3, #12
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	b298      	uxth	r0, r3
 80063c0:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 80063c4:	f103 0308 	add.w	r3, r3, #8
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	b29c      	uxth	r4, r3
 80063cc:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80063d0:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80063d4:	f102 020c 	add.w	r2, r2, #12
 80063d8:	6812      	ldr	r2, [r2, #0]
 80063da:	0091      	lsls	r1, r2, #2
 80063dc:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80063e0:	f102 0208 	add.w	r2, r2, #8
 80063e4:	6812      	ldr	r2, [r2, #0]
 80063e6:	440a      	add	r2, r1
 80063e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	461a      	mov	r2, r3
 80063f0:	4621      	mov	r1, r4
 80063f2:	f001 fe75 	bl	80080e0 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 80063f6:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80063fa:	f103 0308 	add.w	r3, r3, #8
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3301      	adds	r3, #1
 8006402:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8006406:	f102 0208 	add.w	r2, r2, #8
 800640a:	6013      	str	r3, [r2, #0]
 800640c:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8006410:	f103 0308 	add.w	r3, r3, #8
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b03      	cmp	r3, #3
 8006418:	ddae      	ble.n	8006378 <letter_select+0x58dc>
	for (int i=0; i<10; i++) {
 800641a:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800641e:	f103 030c 	add.w	r3, r3, #12
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3301      	adds	r3, #1
 8006426:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800642a:	f102 020c 	add.w	r2, r2, #12
 800642e:	6013      	str	r3, [r2, #0]
 8006430:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8006434:	f103 030c 	add.w	r3, r3, #12
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2b09      	cmp	r3, #9
 800643c:	dd95      	ble.n	800636a <letter_select+0x58ce>
		}
	}
	break;
 800643e:	e296      	b.n	800696e <letter_select+0x5ed2>


	case 'w':
	for (int i=0; i<10; i++) {
 8006440:	2300      	movs	r3, #0
 8006442:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8006446:	f102 0204 	add.w	r2, r2, #4
 800644a:	6013      	str	r3, [r2, #0]
 800644c:	e052      	b.n	80064f4 <letter_select+0x5a58>
		for (int j=0; j<4; j++) {
 800644e:	2300      	movs	r3, #0
 8006450:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8006454:	6013      	str	r3, [r2, #0]
 8006456:	e03d      	b.n	80064d4 <letter_select+0x5a38>

			int x_pos = j + x;
 8006458:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 800645c:	f102 0204 	add.w	r2, r2, #4
 8006460:	f107 0318 	add.w	r3, r7, #24
 8006464:	3b0c      	subs	r3, #12
 8006466:	f507 5196 	add.w	r1, r7, #4800	; 0x12c0
 800646a:	6809      	ldr	r1, [r1, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	440b      	add	r3, r1
 8006470:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8006472:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8006476:	f107 0318 	add.w	r3, r7, #24
 800647a:	3b10      	subs	r3, #16
 800647c:	f507 5196 	add.w	r1, r7, #4800	; 0x12c0
 8006480:	f101 0104 	add.w	r1, r1, #4
 8006484:	6809      	ldr	r1, [r1, #0]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	440b      	add	r3, r1
 800648a:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_W[i][j]);
 800648c:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8006490:	f103 0304 	add.w	r3, r3, #4
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	b298      	uxth	r0, r3
 8006498:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	b29c      	uxth	r4, r3
 80064a0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80064a4:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80064a8:	f102 0204 	add.w	r2, r2, #4
 80064ac:	6812      	ldr	r2, [r2, #0]
 80064ae:	0091      	lsls	r1, r2, #2
 80064b0:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80064b4:	6812      	ldr	r2, [r2, #0]
 80064b6:	440a      	add	r2, r1
 80064b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	461a      	mov	r2, r3
 80064c0:	4621      	mov	r1, r4
 80064c2:	f001 fe0d 	bl	80080e0 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 80064c6:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3301      	adds	r3, #1
 80064ce:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80064d2:	6013      	str	r3, [r2, #0]
 80064d4:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b03      	cmp	r3, #3
 80064dc:	ddbc      	ble.n	8006458 <letter_select+0x59bc>
	for (int i=0; i<10; i++) {
 80064de:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80064e2:	f103 0304 	add.w	r3, r3, #4
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3301      	adds	r3, #1
 80064ea:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80064ee:	f102 0204 	add.w	r2, r2, #4
 80064f2:	6013      	str	r3, [r2, #0]
 80064f4:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80064f8:	f103 0304 	add.w	r3, r3, #4
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b09      	cmp	r3, #9
 8006500:	dda5      	ble.n	800644e <letter_select+0x59b2>
		}
	}
	break;
 8006502:	e234      	b.n	800696e <letter_select+0x5ed2>


	case 'x':
	for (int i=0; i<10; i++) {
 8006504:	2300      	movs	r3, #0
 8006506:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800650a:	f102 021c 	add.w	r2, r2, #28
 800650e:	6013      	str	r3, [r2, #0]
 8006510:	e062      	b.n	80065d8 <letter_select+0x5b3c>
		for (int j=0; j<4; j++) {
 8006512:	2300      	movs	r3, #0
 8006514:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8006518:	f102 0218 	add.w	r2, r2, #24
 800651c:	6013      	str	r3, [r2, #0]
 800651e:	e049      	b.n	80065b4 <letter_select+0x5b18>

			int x_pos = j + x;
 8006520:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8006524:	f102 021c 	add.w	r2, r2, #28
 8006528:	f107 0318 	add.w	r3, r7, #24
 800652c:	3b0c      	subs	r3, #12
 800652e:	f507 5195 	add.w	r1, r7, #4768	; 0x12a0
 8006532:	f101 0118 	add.w	r1, r1, #24
 8006536:	6809      	ldr	r1, [r1, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	440b      	add	r3, r1
 800653c:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 800653e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8006542:	f102 0218 	add.w	r2, r2, #24
 8006546:	f107 0318 	add.w	r3, r7, #24
 800654a:	3b10      	subs	r3, #16
 800654c:	f507 5195 	add.w	r1, r7, #4768	; 0x12a0
 8006550:	f101 011c 	add.w	r1, r1, #28
 8006554:	6809      	ldr	r1, [r1, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	440b      	add	r3, r1
 800655a:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_X[i][j]);
 800655c:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8006560:	f103 031c 	add.w	r3, r3, #28
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	b298      	uxth	r0, r3
 8006568:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800656c:	f103 0318 	add.w	r3, r3, #24
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	b29c      	uxth	r4, r3
 8006574:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8006578:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800657c:	f102 021c 	add.w	r2, r2, #28
 8006580:	6812      	ldr	r2, [r2, #0]
 8006582:	0091      	lsls	r1, r2, #2
 8006584:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8006588:	f102 0218 	add.w	r2, r2, #24
 800658c:	6812      	ldr	r2, [r2, #0]
 800658e:	440a      	add	r2, r1
 8006590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006594:	b2db      	uxtb	r3, r3
 8006596:	461a      	mov	r2, r3
 8006598:	4621      	mov	r1, r4
 800659a:	f001 fda1 	bl	80080e0 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 800659e:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80065a2:	f103 0318 	add.w	r3, r3, #24
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3301      	adds	r3, #1
 80065aa:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80065ae:	f102 0218 	add.w	r2, r2, #24
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80065b8:	f103 0318 	add.w	r3, r3, #24
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b03      	cmp	r3, #3
 80065c0:	ddae      	ble.n	8006520 <letter_select+0x5a84>
	for (int i=0; i<10; i++) {
 80065c2:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80065c6:	f103 031c 	add.w	r3, r3, #28
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	3301      	adds	r3, #1
 80065ce:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80065d2:	f102 021c 	add.w	r2, r2, #28
 80065d6:	6013      	str	r3, [r2, #0]
 80065d8:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80065dc:	f103 031c 	add.w	r3, r3, #28
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	2b09      	cmp	r3, #9
 80065e4:	dd95      	ble.n	8006512 <letter_select+0x5a76>
		}
	}
	break;
 80065e6:	e1c2      	b.n	800696e <letter_select+0x5ed2>


	case 'y':
	for (int i=0; i<10; i++) {
 80065e8:	2300      	movs	r3, #0
 80065ea:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80065ee:	f102 0214 	add.w	r2, r2, #20
 80065f2:	6013      	str	r3, [r2, #0]
 80065f4:	e065      	b.n	80066c2 <letter_select+0x5c26>
		for (int j=0; j<5; j++) {
 80065f6:	2300      	movs	r3, #0
 80065f8:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80065fc:	f102 0210 	add.w	r2, r2, #16
 8006600:	6013      	str	r3, [r2, #0]
 8006602:	e04c      	b.n	800669e <letter_select+0x5c02>

			int x_pos = j + x;
 8006604:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8006608:	f102 0214 	add.w	r2, r2, #20
 800660c:	f107 0318 	add.w	r3, r7, #24
 8006610:	3b0c      	subs	r3, #12
 8006612:	f507 5195 	add.w	r1, r7, #4768	; 0x12a0
 8006616:	f101 0110 	add.w	r1, r1, #16
 800661a:	6809      	ldr	r1, [r1, #0]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	440b      	add	r3, r1
 8006620:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8006622:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8006626:	f102 0210 	add.w	r2, r2, #16
 800662a:	f107 0318 	add.w	r3, r7, #24
 800662e:	3b10      	subs	r3, #16
 8006630:	f507 5195 	add.w	r1, r7, #4768	; 0x12a0
 8006634:	f101 0114 	add.w	r1, r1, #20
 8006638:	6809      	ldr	r1, [r1, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	440b      	add	r3, r1
 800663e:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_Y[i][j]);
 8006640:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8006644:	f103 0314 	add.w	r3, r3, #20
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	b298      	uxth	r0, r3
 800664c:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8006650:	f103 0310 	add.w	r3, r3, #16
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	b29c      	uxth	r4, r3
 8006658:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 800665c:	3a08      	subs	r2, #8
 800665e:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8006662:	f103 0314 	add.w	r3, r3, #20
 8006666:	6819      	ldr	r1, [r3, #0]
 8006668:	460b      	mov	r3, r1
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	440b      	add	r3, r1
 800666e:	f507 5195 	add.w	r1, r7, #4768	; 0x12a0
 8006672:	f101 0110 	add.w	r1, r1, #16
 8006676:	6809      	ldr	r1, [r1, #0]
 8006678:	440b      	add	r3, r1
 800667a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800667e:	b2db      	uxtb	r3, r3
 8006680:	461a      	mov	r2, r3
 8006682:	4621      	mov	r1, r4
 8006684:	f001 fd2c 	bl	80080e0 <UB_VGA_SetPixel>
		for (int j=0; j<5; j++) {
 8006688:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800668c:	f103 0310 	add.w	r3, r3, #16
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3301      	adds	r3, #1
 8006694:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8006698:	f102 0210 	add.w	r2, r2, #16
 800669c:	6013      	str	r3, [r2, #0]
 800669e:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80066a2:	f103 0310 	add.w	r3, r3, #16
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2b04      	cmp	r3, #4
 80066aa:	ddab      	ble.n	8006604 <letter_select+0x5b68>
	for (int i=0; i<10; i++) {
 80066ac:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80066b0:	f103 0314 	add.w	r3, r3, #20
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	3301      	adds	r3, #1
 80066b8:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80066bc:	f102 0214 	add.w	r2, r2, #20
 80066c0:	6013      	str	r3, [r2, #0]
 80066c2:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80066c6:	f103 0314 	add.w	r3, r3, #20
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2b09      	cmp	r3, #9
 80066ce:	dd92      	ble.n	80065f6 <letter_select+0x5b5a>
		}
	}
	break;
 80066d0:	e14d      	b.n	800696e <letter_select+0x5ed2>


	case 'z':
	for (int i=0; i<10; i++) {
 80066d2:	2300      	movs	r3, #0
 80066d4:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80066d8:	f102 020c 	add.w	r2, r2, #12
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	e063      	b.n	80067a8 <letter_select+0x5d0c>
		for (int j=0; j<4; j++) {
 80066e0:	2300      	movs	r3, #0
 80066e2:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80066e6:	f102 0208 	add.w	r2, r2, #8
 80066ea:	6013      	str	r3, [r2, #0]
 80066ec:	e04a      	b.n	8006784 <letter_select+0x5ce8>

			int x_pos = j + x;
 80066ee:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80066f2:	f102 020c 	add.w	r2, r2, #12
 80066f6:	f107 0318 	add.w	r3, r7, #24
 80066fa:	3b0c      	subs	r3, #12
 80066fc:	f507 5195 	add.w	r1, r7, #4768	; 0x12a0
 8006700:	f101 0108 	add.w	r1, r1, #8
 8006704:	6809      	ldr	r1, [r1, #0]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	440b      	add	r3, r1
 800670a:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 800670c:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8006710:	f102 0208 	add.w	r2, r2, #8
 8006714:	f107 0318 	add.w	r3, r7, #24
 8006718:	3b10      	subs	r3, #16
 800671a:	f507 5195 	add.w	r1, r7, #4768	; 0x12a0
 800671e:	f101 010c 	add.w	r1, r1, #12
 8006722:	6809      	ldr	r1, [r1, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	440b      	add	r3, r1
 8006728:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_Z[i][j]);
 800672a:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800672e:	f103 030c 	add.w	r3, r3, #12
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	b298      	uxth	r0, r3
 8006736:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800673a:	f103 0308 	add.w	r3, r3, #8
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	b29c      	uxth	r4, r3
 8006742:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8006746:	3b08      	subs	r3, #8
 8006748:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800674c:	f102 020c 	add.w	r2, r2, #12
 8006750:	6812      	ldr	r2, [r2, #0]
 8006752:	0091      	lsls	r1, r2, #2
 8006754:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8006758:	f102 0208 	add.w	r2, r2, #8
 800675c:	6812      	ldr	r2, [r2, #0]
 800675e:	440a      	add	r2, r1
 8006760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006764:	b2db      	uxtb	r3, r3
 8006766:	461a      	mov	r2, r3
 8006768:	4621      	mov	r1, r4
 800676a:	f001 fcb9 	bl	80080e0 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 800676e:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8006772:	f103 0308 	add.w	r3, r3, #8
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3301      	adds	r3, #1
 800677a:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800677e:	f102 0208 	add.w	r2, r2, #8
 8006782:	6013      	str	r3, [r2, #0]
 8006784:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8006788:	f103 0308 	add.w	r3, r3, #8
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b03      	cmp	r3, #3
 8006790:	ddad      	ble.n	80066ee <letter_select+0x5c52>
	for (int i=0; i<10; i++) {
 8006792:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8006796:	f103 030c 	add.w	r3, r3, #12
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	3301      	adds	r3, #1
 800679e:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80067a2:	f102 020c 	add.w	r2, r2, #12
 80067a6:	6013      	str	r3, [r2, #0]
 80067a8:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80067ac:	f103 030c 	add.w	r3, r3, #12
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2b09      	cmp	r3, #9
 80067b4:	dd94      	ble.n	80066e0 <letter_select+0x5c44>
		}
	}
	break;
 80067b6:	e0da      	b.n	800696e <letter_select+0x5ed2>


	case ' ':
	for (int i=0; i<10; i++) {
 80067b8:	2300      	movs	r3, #0
 80067ba:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80067be:	f102 0204 	add.w	r2, r2, #4
 80067c2:	6013      	str	r3, [r2, #0]
 80067c4:	e053      	b.n	800686e <letter_select+0x5dd2>
		for (int j=0; j<4; j++) {
 80067c6:	2300      	movs	r3, #0
 80067c8:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	e03e      	b.n	800684e <letter_select+0x5db2>

			int x_pos = j + x;
 80067d0:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80067d4:	f102 0204 	add.w	r2, r2, #4
 80067d8:	f107 0318 	add.w	r3, r7, #24
 80067dc:	3b0c      	subs	r3, #12
 80067de:	f507 5195 	add.w	r1, r7, #4768	; 0x12a0
 80067e2:	6809      	ldr	r1, [r1, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	440b      	add	r3, r1
 80067e8:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80067ea:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80067ee:	f107 0318 	add.w	r3, r7, #24
 80067f2:	3b10      	subs	r3, #16
 80067f4:	f507 5195 	add.w	r1, r7, #4768	; 0x12a0
 80067f8:	f101 0104 	add.w	r1, r1, #4
 80067fc:	6809      	ldr	r1, [r1, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	440b      	add	r3, r1
 8006802:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, spatie[i][j]);
 8006804:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8006808:	f103 0304 	add.w	r3, r3, #4
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	b298      	uxth	r0, r3
 8006810:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	b29c      	uxth	r4, r3
 8006818:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800681c:	3b08      	subs	r3, #8
 800681e:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8006822:	f102 0204 	add.w	r2, r2, #4
 8006826:	6812      	ldr	r2, [r2, #0]
 8006828:	0091      	lsls	r1, r2, #2
 800682a:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800682e:	6812      	ldr	r2, [r2, #0]
 8006830:	440a      	add	r2, r1
 8006832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006836:	b2db      	uxtb	r3, r3
 8006838:	461a      	mov	r2, r3
 800683a:	4621      	mov	r1, r4
 800683c:	f001 fc50 	bl	80080e0 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8006840:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	3301      	adds	r3, #1
 8006848:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800684c:	6013      	str	r3, [r2, #0]
 800684e:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	2b03      	cmp	r3, #3
 8006856:	ddbb      	ble.n	80067d0 <letter_select+0x5d34>
	for (int i=0; i<10; i++) {
 8006858:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800685c:	f103 0304 	add.w	r3, r3, #4
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	3301      	adds	r3, #1
 8006864:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8006868:	f102 0204 	add.w	r2, r2, #4
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8006872:	f103 0304 	add.w	r3, r3, #4
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2b09      	cmp	r3, #9
 800687a:	dda4      	ble.n	80067c6 <letter_select+0x5d2a>
		}
	}
	break;
 800687c:	e077      	b.n	800696e <letter_select+0x5ed2>

	case ',':
	for (int i=0; i<13; i++) {
 800687e:	2300      	movs	r3, #0
 8006880:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8006884:	f102 021c 	add.w	r2, r2, #28
 8006888:	6013      	str	r3, [r2, #0]
 800688a:	e065      	b.n	8006958 <letter_select+0x5ebc>
		for (int j=0; j<3; j++) {
 800688c:	2300      	movs	r3, #0
 800688e:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8006892:	f102 0218 	add.w	r2, r2, #24
 8006896:	6013      	str	r3, [r2, #0]
 8006898:	e04c      	b.n	8006934 <letter_select+0x5e98>

			int x_pos = j + x;
 800689a:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 800689e:	f102 021c 	add.w	r2, r2, #28
 80068a2:	f107 0318 	add.w	r3, r7, #24
 80068a6:	3b0c      	subs	r3, #12
 80068a8:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 80068ac:	f101 0118 	add.w	r1, r1, #24
 80068b0:	6809      	ldr	r1, [r1, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	440b      	add	r3, r1
 80068b6:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80068b8:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 80068bc:	f102 0218 	add.w	r2, r2, #24
 80068c0:	f107 0318 	add.w	r3, r7, #24
 80068c4:	3b10      	subs	r3, #16
 80068c6:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 80068ca:	f101 011c 	add.w	r1, r1, #28
 80068ce:	6809      	ldr	r1, [r1, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	440b      	add	r3, r1
 80068d4:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, komma[i][j]);
 80068d6:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80068da:	f103 031c 	add.w	r3, r3, #28
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	b298      	uxth	r0, r3
 80068e2:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80068e6:	f103 0318 	add.w	r3, r3, #24
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	b29c      	uxth	r4, r3
 80068ee:	f107 0218 	add.w	r2, r7, #24
 80068f2:	3a04      	subs	r2, #4
 80068f4:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 80068f8:	f103 031c 	add.w	r3, r3, #28
 80068fc:	6819      	ldr	r1, [r3, #0]
 80068fe:	460b      	mov	r3, r1
 8006900:	005b      	lsls	r3, r3, #1
 8006902:	440b      	add	r3, r1
 8006904:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 8006908:	f101 0118 	add.w	r1, r1, #24
 800690c:	6809      	ldr	r1, [r1, #0]
 800690e:	440b      	add	r3, r1
 8006910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006914:	b2db      	uxtb	r3, r3
 8006916:	461a      	mov	r2, r3
 8006918:	4621      	mov	r1, r4
 800691a:	f001 fbe1 	bl	80080e0 <UB_VGA_SetPixel>
		for (int j=0; j<3; j++) {
 800691e:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8006922:	f103 0318 	add.w	r3, r3, #24
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	3301      	adds	r3, #1
 800692a:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 800692e:	f102 0218 	add.w	r2, r2, #24
 8006932:	6013      	str	r3, [r2, #0]
 8006934:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8006938:	f103 0318 	add.w	r3, r3, #24
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	2b02      	cmp	r3, #2
 8006940:	ddab      	ble.n	800689a <letter_select+0x5dfe>
	for (int i=0; i<13; i++) {
 8006942:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8006946:	f103 031c 	add.w	r3, r3, #28
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	3301      	adds	r3, #1
 800694e:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8006952:	f102 021c 	add.w	r2, r2, #28
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 800695c:	f103 031c 	add.w	r3, r3, #28
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b0c      	cmp	r3, #12
 8006964:	dd92      	ble.n	800688c <letter_select+0x5df0>
		}
	}
	break;
 8006966:	e002      	b.n	800696e <letter_select+0x5ed2>


	default:
		UB_VGA_FillScreen(wit);
 8006968:	20ff      	movs	r0, #255	; 0xff
 800696a:	f001 fb97 	bl	800809c <UB_VGA_FillScreen>
	}




}
 800696e:	bf00      	nop
 8006970:	f507 579b 	add.w	r7, r7, #4960	; 0x1360
 8006974:	371c      	adds	r7, #28
 8006976:	46bd      	mov	sp, r7
 8006978:	bd90      	pop	{r4, r7, pc}
 800697a:	bf00      	nop

0800697c <draw_line>:

#include "line.h"


void draw_line(int x1, int y1, int x2, int y2, int tn, int color)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b094      	sub	sp, #80	; 0x50
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
 8006988:	603b      	str	r3, [r7, #0]

	int i,dx,dy,sdx,sdy,dxabs,dyabs,x,y,px,py;
	uint8_t stn,tn_draw;

	dx=x2-x1;      /* the horizontal distance of the line */
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	62bb      	str	r3, [r7, #40]	; 0x28
	dy=y2-y1;      /* the vertical distance of the line */
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	627b      	str	r3, [r7, #36]	; 0x24
	dxabs=abs(dx);
 800699a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800699c:	2b00      	cmp	r3, #0
 800699e:	bfb8      	it	lt
 80069a0:	425b      	neglt	r3, r3
 80069a2:	623b      	str	r3, [r7, #32]
	dyabs=abs(dy);
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	bfb8      	it	lt
 80069aa:	425b      	neglt	r3, r3
 80069ac:	61fb      	str	r3, [r7, #28]
	sdx=sgn(dx);
 80069ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	db06      	blt.n	80069c2 <draw_line+0x46>
 80069b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	bfcc      	ite	gt
 80069ba:	2301      	movgt	r3, #1
 80069bc:	2300      	movle	r3, #0
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	e001      	b.n	80069c6 <draw_line+0x4a>
 80069c2:	f04f 33ff 	mov.w	r3, #4294967295
 80069c6:	61bb      	str	r3, [r7, #24]
	sdy=sgn(dy);
 80069c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	db06      	blt.n	80069dc <draw_line+0x60>
 80069ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	bfcc      	ite	gt
 80069d4:	2301      	movgt	r3, #1
 80069d6:	2300      	movle	r3, #0
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	e001      	b.n	80069e0 <draw_line+0x64>
 80069dc:	f04f 33ff 	mov.w	r3, #4294967295
 80069e0:	617b      	str	r3, [r7, #20]
	x=dyabs>>1;
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	105b      	asrs	r3, r3, #1
 80069e6:	64bb      	str	r3, [r7, #72]	; 0x48
	y=dxabs>>1;
 80069e8:	6a3b      	ldr	r3, [r7, #32]
 80069ea:	105b      	asrs	r3, r3, #1
 80069ec:	647b      	str	r3, [r7, #68]	; 0x44
	px=x1;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	643b      	str	r3, [r7, #64]	; 0x40
	py=y1;
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	63fb      	str	r3, [r7, #60]	; 0x3c

	stn = ((tn%2)==0)? 1:0;  /* even of oneven lijndikte */
 80069f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069f8:	f003 0301 	and.w	r3, r3, #1
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	bf0c      	ite	eq
 8006a00:	2301      	moveq	r3, #1
 8006a02:	2300      	movne	r3, #0
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	74fb      	strb	r3, [r7, #19]
	tn_draw = tn>>1;
 8006a08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a0a:	105b      	asrs	r3, r3, #1
 8006a0c:	74bb      	strb	r3, [r7, #18]

	if (dxabs>=dyabs) 	/* the line is more horizontal than vertical */
 8006a0e:	6a3a      	ldr	r2, [r7, #32]
 8006a10:	69fb      	ldr	r3, [r7, #28]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	f2c0 80c5 	blt.w	8006ba2 <draw_line+0x226>
	{
		if(stn==1) /* even line thickness */
 8006a18:	7cfb      	ldrb	r3, [r7, #19]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d15e      	bne.n	8006adc <draw_line+0x160>
		{
			px=x1;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	643b      	str	r3, [r7, #64]	; 0x40
			py=y1;
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8006a26:	2300      	movs	r3, #0
 8006a28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a2a:	e052      	b.n	8006ad2 <draw_line+0x156>
			{
				y+=dyabs;										/* adding dyabs for drawing vertical pixel */
 8006a2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	4413      	add	r3, r2
 8006a32:	647b      	str	r3, [r7, #68]	; 0x44
				if (y>=dxabs)									/* y is higher than the dxabs of line, so py counting -1/0/1 */
 8006a34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	429a      	cmp	r2, r3
 8006a3a:	db07      	blt.n	8006a4c <draw_line+0xd0>
				{
					y-=dxabs;									/* substracting dxabs of y so counting is reset */
 8006a3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	1ad3      	subs	r3, r2, r3
 8006a42:	647b      	str	r3, [r7, #68]	; 0x44
					py+=sdy;
 8006a44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	4413      	add	r3, r2
 8006a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				for(int k=-tn_draw;k<tn_draw;k++)
 8006a4c:	7cbb      	ldrb	r3, [r7, #18]
 8006a4e:	425b      	negs	r3, r3
 8006a50:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a52:	e033      	b.n	8006abc <draw_line+0x140>
				{
					if(px>=0 && px <= 320 && py>=0 && py <= 240)	/* pixels inside range VGA screen will be drawn */
 8006a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	db2d      	blt.n	8006ab6 <draw_line+0x13a>
 8006a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a5c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006a60:	dc29      	bgt.n	8006ab6 <draw_line+0x13a>
 8006a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	db26      	blt.n	8006ab6 <draw_line+0x13a>
 8006a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a6a:	2bf0      	cmp	r3, #240	; 0xf0
 8006a6c:	dc23      	bgt.n	8006ab6 <draw_line+0x13a>
					{
						UB_VGA_SetPixel(px+k,py-k,color);
 8006a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	4413      	add	r3, r2
 8006a78:	b298      	uxth	r0, r3
 8006a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a88:	b2d2      	uxtb	r2, r2
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	f001 fb28 	bl	80080e0 <UB_VGA_SetPixel>
						UB_VGA_SetPixel(px+k,py-k-1,color);
 8006a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	4413      	add	r3, r2
 8006a9a:	b298      	uxth	r0, r3
 8006a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006aae:	b2d2      	uxtb	r2, r2
 8006ab0:	4619      	mov	r1, r3
 8006ab2:	f001 fb15 	bl	80080e0 <UB_VGA_SetPixel>
				for(int k=-tn_draw;k<tn_draw;k++)
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab8:	3301      	adds	r3, #1
 8006aba:	63bb      	str	r3, [r7, #56]	; 0x38
 8006abc:	7cba      	ldrb	r2, [r7, #18]
 8006abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	dcc7      	bgt.n	8006a54 <draw_line+0xd8>
					}
				}
				px+=sdx; 										/* -1/0/1 counting pixel */
 8006ac4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	4413      	add	r3, r2
 8006aca:	643b      	str	r3, [r7, #64]	; 0x40
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8006acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ace:	3301      	adds	r3, #1
 8006ad0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ad2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	dda8      	ble.n	8006a2c <draw_line+0xb0>
				}
				py+=sdy; 										/* -1/0/1 counting pixel */
			}
		}
	}
}
 8006ada:	e125      	b.n	8006d28 <draw_line+0x3ac>
		else if(stn==0)	/* odd line thickness */
 8006adc:	7cfb      	ldrb	r3, [r7, #19]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f040 8122 	bne.w	8006d28 <draw_line+0x3ac>
			px=x1;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	643b      	str	r3, [r7, #64]	; 0x40
			py=y1;
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8006aec:	2300      	movs	r3, #0
 8006aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006af0:	e052      	b.n	8006b98 <draw_line+0x21c>
				y+=dyabs;										/* adding dyabs for drawing vertical pixel */
 8006af2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	4413      	add	r3, r2
 8006af8:	647b      	str	r3, [r7, #68]	; 0x44
				if (y>=dxabs)									/* y is higher than the dxabs of line, so py counting -1/0/1 */
 8006afa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006afc:	6a3b      	ldr	r3, [r7, #32]
 8006afe:	429a      	cmp	r2, r3
 8006b00:	db07      	blt.n	8006b12 <draw_line+0x196>
					y-=dxabs;									/* substracting dxabs of y so counting is reset */
 8006b02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	647b      	str	r3, [r7, #68]	; 0x44
					py+=sdy;
 8006b0a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	4413      	add	r3, r2
 8006b10:	63fb      	str	r3, [r7, #60]	; 0x3c
				for(int h=0-tn_draw;h<=tn_draw;h++)
 8006b12:	7cbb      	ldrb	r3, [r7, #18]
 8006b14:	425b      	negs	r3, r3
 8006b16:	637b      	str	r3, [r7, #52]	; 0x34
 8006b18:	e033      	b.n	8006b82 <draw_line+0x206>
					if(px>=0 && px <= 320 && py>=0 && py <= 240)	/* pixels inside range VGA screen will be drawn */
 8006b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	db2d      	blt.n	8006b7c <draw_line+0x200>
 8006b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b22:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006b26:	dc29      	bgt.n	8006b7c <draw_line+0x200>
 8006b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	db26      	blt.n	8006b7c <draw_line+0x200>
 8006b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b30:	2bf0      	cmp	r3, #240	; 0xf0
 8006b32:	dc23      	bgt.n	8006b7c <draw_line+0x200>
						UB_VGA_SetPixel(px+h,py-h,color);
 8006b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	4413      	add	r3, r2
 8006b3e:	b298      	uxth	r0, r3
 8006b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b42:	b29a      	uxth	r2, r3
 8006b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b46:	b29b      	uxth	r3, r3
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b4e:	b2d2      	uxtb	r2, r2
 8006b50:	4619      	mov	r1, r3
 8006b52:	f001 fac5 	bl	80080e0 <UB_VGA_SetPixel>
						UB_VGA_SetPixel(px+h,py-h-1,color);
 8006b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	4413      	add	r3, r2
 8006b60:	b298      	uxth	r0, r3
 8006b62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	1ad3      	subs	r3, r2, r3
 8006b6c:	b29b      	uxth	r3, r3
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006b74:	b2d2      	uxtb	r2, r2
 8006b76:	4619      	mov	r1, r3
 8006b78:	f001 fab2 	bl	80080e0 <UB_VGA_SetPixel>
				for(int h=0-tn_draw;h<=tn_draw;h++)
 8006b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b7e:	3301      	adds	r3, #1
 8006b80:	637b      	str	r3, [r7, #52]	; 0x34
 8006b82:	7cba      	ldrb	r2, [r7, #18]
 8006b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b86:	429a      	cmp	r2, r3
 8006b88:	dac7      	bge.n	8006b1a <draw_line+0x19e>
				px+=sdx; 										/* -1/0/1 counting pixel */
 8006b8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b8c:	69bb      	ldr	r3, [r7, #24]
 8006b8e:	4413      	add	r3, r2
 8006b90:	643b      	str	r3, [r7, #64]	; 0x40
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8006b92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b94:	3301      	adds	r3, #1
 8006b96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	dda8      	ble.n	8006af2 <draw_line+0x176>
}
 8006ba0:	e0c2      	b.n	8006d28 <draw_line+0x3ac>
		if(stn==1) /* even line thickness */
 8006ba2:	7cfb      	ldrb	r3, [r7, #19]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d15e      	bne.n	8006c66 <draw_line+0x2ea>
			px=x1;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	643b      	str	r3, [r7, #64]	; 0x40
			py=y1;
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bb4:	e052      	b.n	8006c5c <draw_line+0x2e0>
				y+=dyabs;										/* adding dyabs for drawing vertical pixel */
 8006bb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	4413      	add	r3, r2
 8006bbc:	647b      	str	r3, [r7, #68]	; 0x44
				if (y>=dxabs)									/* y is higher than the dxabs of line, so py counting -1/0/1 */
 8006bbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bc0:	6a3b      	ldr	r3, [r7, #32]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	db07      	blt.n	8006bd6 <draw_line+0x25a>
					y-=dxabs;									/* substracting dxabs of y so counting is reset */
 8006bc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bc8:	6a3b      	ldr	r3, [r7, #32]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	647b      	str	r3, [r7, #68]	; 0x44
					py+=sdy;
 8006bce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	4413      	add	r3, r2
 8006bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
				for(int k=0-tn_draw;k<tn_draw;k++)
 8006bd6:	7cbb      	ldrb	r3, [r7, #18]
 8006bd8:	425b      	negs	r3, r3
 8006bda:	633b      	str	r3, [r7, #48]	; 0x30
 8006bdc:	e033      	b.n	8006c46 <draw_line+0x2ca>
					if(px>=0 && px <= 320 && py>=0 && py <= 240)	/* pixels inside range VGA screen will be drawn */
 8006bde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	db2d      	blt.n	8006c40 <draw_line+0x2c4>
 8006be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006be6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006bea:	dc29      	bgt.n	8006c40 <draw_line+0x2c4>
 8006bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	db26      	blt.n	8006c40 <draw_line+0x2c4>
 8006bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bf4:	2bf0      	cmp	r3, #240	; 0xf0
 8006bf6:	dc23      	bgt.n	8006c40 <draw_line+0x2c4>
						UB_VGA_SetPixel(px+k,py-k,color);
 8006bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bfa:	b29a      	uxth	r2, r3
 8006bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	4413      	add	r3, r2
 8006c02:	b298      	uxth	r0, r3
 8006c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c06:	b29a      	uxth	r2, r3
 8006c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c12:	b2d2      	uxtb	r2, r2
 8006c14:	4619      	mov	r1, r3
 8006c16:	f001 fa63 	bl	80080e0 <UB_VGA_SetPixel>
						UB_VGA_SetPixel(px+k,py-k-1,color);
 8006c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	4413      	add	r3, r2
 8006c24:	b298      	uxth	r0, r3
 8006c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c28:	b29a      	uxth	r2, r3
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	3b01      	subs	r3, #1
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006c38:	b2d2      	uxtb	r2, r2
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	f001 fa50 	bl	80080e0 <UB_VGA_SetPixel>
				for(int k=0-tn_draw;k<tn_draw;k++)
 8006c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c42:	3301      	adds	r3, #1
 8006c44:	633b      	str	r3, [r7, #48]	; 0x30
 8006c46:	7cba      	ldrb	r2, [r7, #18]
 8006c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	dcc7      	bgt.n	8006bde <draw_line+0x262>
				px+=sdx; 										/* -1/0/1 counting pixel */
 8006c4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	4413      	add	r3, r2
 8006c54:	643b      	str	r3, [r7, #64]	; 0x40
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8006c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c58:	3301      	adds	r3, #1
 8006c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c5e:	6a3b      	ldr	r3, [r7, #32]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	dda8      	ble.n	8006bb6 <draw_line+0x23a>
}
 8006c64:	e060      	b.n	8006d28 <draw_line+0x3ac>
		else if(stn==0)	/* odd line thickness */
 8006c66:	7cfb      	ldrb	r3, [r7, #19]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d15d      	bne.n	8006d28 <draw_line+0x3ac>
			px=x1;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	643b      	str	r3, [r7, #64]	; 0x40
			py=y1;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dyabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8006c74:	2300      	movs	r3, #0
 8006c76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c78:	e052      	b.n	8006d20 <draw_line+0x3a4>
				x+=dxabs;										/* adding dyabs for drawing vertical pixel */
 8006c7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c7c:	6a3b      	ldr	r3, [r7, #32]
 8006c7e:	4413      	add	r3, r2
 8006c80:	64bb      	str	r3, [r7, #72]	; 0x48
				if (x>=dyabs)									/* y is higher than the dxabs of line, so py counting -1/0/1 */
 8006c82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	db07      	blt.n	8006c9a <draw_line+0x31e>
					x-=dyabs;									/* substracting dxabs of y so counting is reset */
 8006c8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	64bb      	str	r3, [r7, #72]	; 0x48
					px+=sdx;
 8006c92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	4413      	add	r3, r2
 8006c98:	643b      	str	r3, [r7, #64]	; 0x40
				for(int h=0-tn_draw;h<=tn_draw;h++)
 8006c9a:	7cbb      	ldrb	r3, [r7, #18]
 8006c9c:	425b      	negs	r3, r3
 8006c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ca0:	e033      	b.n	8006d0a <draw_line+0x38e>
					if(px>=0 && px <= 320 && py>=0 && py <= 240)	/* pixels inside range VGA screen will be drawn */
 8006ca2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	db2d      	blt.n	8006d04 <draw_line+0x388>
 8006ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006caa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006cae:	dc29      	bgt.n	8006d04 <draw_line+0x388>
 8006cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	db26      	blt.n	8006d04 <draw_line+0x388>
 8006cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cb8:	2bf0      	cmp	r3, #240	; 0xf0
 8006cba:	dc23      	bgt.n	8006d04 <draw_line+0x388>
						UB_VGA_SetPixel(px+h,py-h,color);
 8006cbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	4413      	add	r3, r2
 8006cc6:	b298      	uxth	r0, r3
 8006cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006cd6:	b2d2      	uxtb	r2, r2
 8006cd8:	4619      	mov	r1, r3
 8006cda:	f001 fa01 	bl	80080e0 <UB_VGA_SetPixel>
						UB_VGA_SetPixel(px+h,py-h-1,color);
 8006cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ce0:	b29a      	uxth	r2, r3
 8006ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	4413      	add	r3, r2
 8006ce8:	b298      	uxth	r0, r3
 8006cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	1ad3      	subs	r3, r2, r3
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006cfc:	b2d2      	uxtb	r2, r2
 8006cfe:	4619      	mov	r1, r3
 8006d00:	f001 f9ee 	bl	80080e0 <UB_VGA_SetPixel>
				for(int h=0-tn_draw;h<=tn_draw;h++)
 8006d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d06:	3301      	adds	r3, #1
 8006d08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d0a:	7cba      	ldrb	r2, [r7, #18]
 8006d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	dac7      	bge.n	8006ca2 <draw_line+0x326>
				py+=sdy; 										/* -1/0/1 counting pixel */
 8006d12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	4413      	add	r3, r2
 8006d18:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dyabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8006d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	dda8      	ble.n	8006c7a <draw_line+0x2fe>
}
 8006d28:	bf00      	nop
 8006d2a:	3750      	adds	r7, #80	; 0x50
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <draw_rectangle>:

#include "rectangle.h"


void draw_rectangle (int x1, int y1, int x2, int y2, int color)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
 8006d3c:	603b      	str	r3, [r7, #0]
	for(int i=y1;i<=y2;i++)
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	617b      	str	r3, [r7, #20]
 8006d42:	e015      	b.n	8006d70 <draw_rectangle+0x40>
	{
		for(int j=x1;j<=x2;j++)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	613b      	str	r3, [r7, #16]
 8006d48:	e00b      	b.n	8006d62 <draw_rectangle+0x32>
			UB_VGA_SetPixel(j,i,color);
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	b29b      	uxth	r3, r3
 8006d4e:	697a      	ldr	r2, [r7, #20]
 8006d50:	b291      	uxth	r1, r2
 8006d52:	6a3a      	ldr	r2, [r7, #32]
 8006d54:	b2d2      	uxtb	r2, r2
 8006d56:	4618      	mov	r0, r3
 8006d58:	f001 f9c2 	bl	80080e0 <UB_VGA_SetPixel>
		for(int j=x1;j<=x2;j++)
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	613b      	str	r3, [r7, #16]
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	ddef      	ble.n	8006d4a <draw_rectangle+0x1a>
	for(int i=y1;i<=y2;i++)
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	3301      	adds	r3, #1
 8006d6e:	617b      	str	r3, [r7, #20]
 8006d70:	697a      	ldr	r2, [r7, #20]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	dde5      	ble.n	8006d44 <draw_rectangle+0x14>
	}
}
 8006d78:	bf00      	nop
 8006d7a:	3718      	adds	r7, #24
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <draw_text>:

#include "text.h"



void draw_text (int x, int y, char text[], int backcolor, int textcolor) { //functie voor het schrijven van tekst
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b088      	sub	sp, #32
 8006d84:	af02      	add	r7, sp, #8
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
 8006d8c:	603b      	str	r3, [r7, #0]

	for(int i=0;i<strlen(text);i++) //uit de "text" string individuele letters en kleuren halen
 8006d8e:	2300      	movs	r3, #0
 8006d90:	617b      	str	r3, [r7, #20]
 8006d92:	e010      	b.n	8006db6 <draw_text+0x36>
	{
		letter_select(x,y,text[i], backcolor, textcolor);
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	4413      	add	r3, r2
 8006d9a:	781a      	ldrb	r2, [r3, #0]
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	9300      	str	r3, [sp, #0]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	68b9      	ldr	r1, [r7, #8]
 8006da4:	68f8      	ldr	r0, [r7, #12]
 8006da6:	f7f9 fe79 	bl	8000a9c <letter_select>
		x = x + 5;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	3305      	adds	r3, #5
 8006dae:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<strlen(text);i++) //uit de "text" string individuele letters en kleuren halen
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	3301      	adds	r3, #1
 8006db4:	617b      	str	r3, [r7, #20]
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7f9 fa10 	bl	80001dc <strlen>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d8e7      	bhi.n	8006d94 <draw_text+0x14>
	}
}
 8006dc4:	bf00      	nop
 8006dc6:	3718      	adds	r7, #24
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}

08006dcc <draw_triangle>:
#include "stm32_ub_vga_screen.h"
#include <stdlib.h>
#include "includes.h"

void draw_triangle(int x1,int y1,int x2,int y2,int xtop,int ytop, int color)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b086      	sub	sp, #24
 8006dd0:	af02      	add	r7, sp, #8
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
 8006dd8:	603b      	str	r3, [r7, #0]
//	dx=x2-x1;      /* the horizontal distance of the line */
//	dy=y2-y1;      /* the vertical distance of the line */
//	dxabs=abs(dx);
//	dyabs=abs(dy);

	draw_line(x1,y1,x2,y2,1,color);
 8006dda:	6a3b      	ldr	r3, [r7, #32]
 8006ddc:	9301      	str	r3, [sp, #4]
 8006dde:	2301      	movs	r3, #1
 8006de0:	9300      	str	r3, [sp, #0]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	68b9      	ldr	r1, [r7, #8]
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f7ff fdc7 	bl	800697c <draw_line>
	draw_line(x1,y1,xtop,ytop,1,color);
 8006dee:	6a3b      	ldr	r3, [r7, #32]
 8006df0:	9301      	str	r3, [sp, #4]
 8006df2:	2301      	movs	r3, #1
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	69ba      	ldr	r2, [r7, #24]
 8006dfa:	68b9      	ldr	r1, [r7, #8]
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f7ff fdbd 	bl	800697c <draw_line>
	draw_line(xtop,ytop,x2,y2,1,color);
 8006e02:	6a3b      	ldr	r3, [r7, #32]
 8006e04:	9301      	str	r3, [sp, #4]
 8006e06:	2301      	movs	r3, #1
 8006e08:	9300      	str	r3, [sp, #0]
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	687a      	ldr	r2, [r7, #4]
 8006e0e:	69f9      	ldr	r1, [r7, #28]
 8006e10:	69b8      	ldr	r0, [r7, #24]
 8006e12:	f7ff fdb3 	bl	800697c <draw_line>



//	for(int i=x1;i<=x2;i++)
//		draw_line(i,y2,xtop,ytop,color,1);
}
 8006e16:	bf00      	nop
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <wait_ms>:
 */

#include "wait_ms.h"

void wait_ms(int time_ms)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b082      	sub	sp, #8
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
	DELAY_ms(time_ms);	// Delay in ms
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f001 f8d9 	bl	8007fe0 <DELAY_ms>
}
 8006e2e:	bf00      	nop
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
	...

08006e38 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b085      	sub	sp, #20
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8006e40:	2300      	movs	r3, #0
 8006e42:	73fb      	strb	r3, [r7, #15]
 8006e44:	2300      	movs	r3, #0
 8006e46:	73bb      	strb	r3, [r7, #14]
 8006e48:	230f      	movs	r3, #15
 8006e4a:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	78db      	ldrb	r3, [r3, #3]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d039      	beq.n	8006ec8 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8006e54:	4b27      	ldr	r3, [pc, #156]	; (8006ef4 <NVIC_Init+0xbc>)
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	43db      	mvns	r3, r3
 8006e5a:	0a1b      	lsrs	r3, r3, #8
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	f003 0307 	and.w	r3, r3, #7
 8006e62:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
 8006e66:	f1c3 0304 	rsb	r3, r3, #4
 8006e6a:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8006e6c:	7b7a      	ldrb	r2, [r7, #13]
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
 8006e70:	fa42 f303 	asr.w	r3, r2, r3
 8006e74:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	785b      	ldrb	r3, [r3, #1]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	7bbb      	ldrb	r3, [r7, #14]
 8006e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006e82:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	789a      	ldrb	r2, [r3, #2]
 8006e88:	7b7b      	ldrb	r3, [r7, #13]
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	7bfb      	ldrb	r3, [r7, #15]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8006e94:	7bfb      	ldrb	r3, [r7, #15]
 8006e96:	011b      	lsls	r3, r3, #4
 8006e98:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8006e9a:	4a17      	ldr	r2, [pc, #92]	; (8006ef8 <NVIC_Init+0xc0>)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	7bfa      	ldrb	r2, [r7, #15]
 8006ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8006ea8:	4a13      	ldr	r2, [pc, #76]	; (8006ef8 <NVIC_Init+0xc0>)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	095b      	lsrs	r3, r3, #5
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	f003 031f 	and.w	r3, r3, #31
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8006ec2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8006ec6:	e00f      	b.n	8006ee8 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8006ec8:	490b      	ldr	r1, [pc, #44]	; (8006ef8 <NVIC_Init+0xc0>)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	095b      	lsrs	r3, r3, #5
 8006ed0:	b2db      	uxtb	r3, r3
 8006ed2:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	f003 031f 	and.w	r3, r3, #31
 8006edc:	2201      	movs	r2, #1
 8006ede:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8006ee0:	f100 0320 	add.w	r3, r0, #32
 8006ee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006ee8:	bf00      	nop
 8006eea:	3714      	adds	r7, #20
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr
 8006ef4:	e000ed00 	.word	0xe000ed00
 8006ef8:	e000e100 	.word	0xe000e100

08006efc <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f023 0201 	bic.w	r2, r3, #1
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2221      	movs	r2, #33	; 0x21
 8006f32:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a46      	ldr	r2, [pc, #280]	; (8007050 <DMA_DeInit+0x154>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d103      	bne.n	8006f44 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8006f3c:	4b45      	ldr	r3, [pc, #276]	; (8007054 <DMA_DeInit+0x158>)
 8006f3e:	223d      	movs	r2, #61	; 0x3d
 8006f40:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8006f42:	e07e      	b.n	8007042 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	4a44      	ldr	r2, [pc, #272]	; (8007058 <DMA_DeInit+0x15c>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d104      	bne.n	8006f56 <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8006f4c:	4b41      	ldr	r3, [pc, #260]	; (8007054 <DMA_DeInit+0x158>)
 8006f4e:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8006f52:	609a      	str	r2, [r3, #8]
}
 8006f54:	e075      	b.n	8007042 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a40      	ldr	r2, [pc, #256]	; (800705c <DMA_DeInit+0x160>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d104      	bne.n	8006f68 <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8006f5e:	4b3d      	ldr	r3, [pc, #244]	; (8007054 <DMA_DeInit+0x158>)
 8006f60:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8006f64:	609a      	str	r2, [r3, #8]
}
 8006f66:	e06c      	b.n	8007042 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a3d      	ldr	r2, [pc, #244]	; (8007060 <DMA_DeInit+0x164>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d104      	bne.n	8006f7a <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8006f70:	4b38      	ldr	r3, [pc, #224]	; (8007054 <DMA_DeInit+0x158>)
 8006f72:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8006f76:	609a      	str	r2, [r3, #8]
}
 8006f78:	e063      	b.n	8007042 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4a39      	ldr	r2, [pc, #228]	; (8007064 <DMA_DeInit+0x168>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d103      	bne.n	8006f8a <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8006f82:	4b34      	ldr	r3, [pc, #208]	; (8007054 <DMA_DeInit+0x158>)
 8006f84:	4a38      	ldr	r2, [pc, #224]	; (8007068 <DMA_DeInit+0x16c>)
 8006f86:	60da      	str	r2, [r3, #12]
}
 8006f88:	e05b      	b.n	8007042 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a37      	ldr	r2, [pc, #220]	; (800706c <DMA_DeInit+0x170>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d103      	bne.n	8006f9a <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8006f92:	4b30      	ldr	r3, [pc, #192]	; (8007054 <DMA_DeInit+0x158>)
 8006f94:	4a36      	ldr	r2, [pc, #216]	; (8007070 <DMA_DeInit+0x174>)
 8006f96:	60da      	str	r2, [r3, #12]
}
 8006f98:	e053      	b.n	8007042 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4a35      	ldr	r2, [pc, #212]	; (8007074 <DMA_DeInit+0x178>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d103      	bne.n	8006faa <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8006fa2:	4b2c      	ldr	r3, [pc, #176]	; (8007054 <DMA_DeInit+0x158>)
 8006fa4:	4a34      	ldr	r2, [pc, #208]	; (8007078 <DMA_DeInit+0x17c>)
 8006fa6:	60da      	str	r2, [r3, #12]
}
 8006fa8:	e04b      	b.n	8007042 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	4a33      	ldr	r2, [pc, #204]	; (800707c <DMA_DeInit+0x180>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d104      	bne.n	8006fbc <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8006fb2:	4b28      	ldr	r3, [pc, #160]	; (8007054 <DMA_DeInit+0x158>)
 8006fb4:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8006fb8:	60da      	str	r2, [r3, #12]
}
 8006fba:	e042      	b.n	8007042 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a30      	ldr	r2, [pc, #192]	; (8007080 <DMA_DeInit+0x184>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d103      	bne.n	8006fcc <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8006fc4:	4b2f      	ldr	r3, [pc, #188]	; (8007084 <DMA_DeInit+0x188>)
 8006fc6:	223d      	movs	r2, #61	; 0x3d
 8006fc8:	609a      	str	r2, [r3, #8]
}
 8006fca:	e03a      	b.n	8007042 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a2e      	ldr	r2, [pc, #184]	; (8007088 <DMA_DeInit+0x18c>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d104      	bne.n	8006fde <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8006fd4:	4b2b      	ldr	r3, [pc, #172]	; (8007084 <DMA_DeInit+0x188>)
 8006fd6:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8006fda:	609a      	str	r2, [r3, #8]
}
 8006fdc:	e031      	b.n	8007042 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a2a      	ldr	r2, [pc, #168]	; (800708c <DMA_DeInit+0x190>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d104      	bne.n	8006ff0 <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8006fe6:	4b27      	ldr	r3, [pc, #156]	; (8007084 <DMA_DeInit+0x188>)
 8006fe8:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8006fec:	609a      	str	r2, [r3, #8]
}
 8006fee:	e028      	b.n	8007042 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a27      	ldr	r2, [pc, #156]	; (8007090 <DMA_DeInit+0x194>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d104      	bne.n	8007002 <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8006ff8:	4b22      	ldr	r3, [pc, #136]	; (8007084 <DMA_DeInit+0x188>)
 8006ffa:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8006ffe:	609a      	str	r2, [r3, #8]
}
 8007000:	e01f      	b.n	8007042 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a23      	ldr	r2, [pc, #140]	; (8007094 <DMA_DeInit+0x198>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d103      	bne.n	8007012 <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 800700a:	4b1e      	ldr	r3, [pc, #120]	; (8007084 <DMA_DeInit+0x188>)
 800700c:	4a16      	ldr	r2, [pc, #88]	; (8007068 <DMA_DeInit+0x16c>)
 800700e:	60da      	str	r2, [r3, #12]
}
 8007010:	e017      	b.n	8007042 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a20      	ldr	r2, [pc, #128]	; (8007098 <DMA_DeInit+0x19c>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d103      	bne.n	8007022 <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 800701a:	4b1a      	ldr	r3, [pc, #104]	; (8007084 <DMA_DeInit+0x188>)
 800701c:	4a14      	ldr	r2, [pc, #80]	; (8007070 <DMA_DeInit+0x174>)
 800701e:	60da      	str	r2, [r3, #12]
}
 8007020:	e00f      	b.n	8007042 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a1d      	ldr	r2, [pc, #116]	; (800709c <DMA_DeInit+0x1a0>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d103      	bne.n	8007032 <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 800702a:	4b16      	ldr	r3, [pc, #88]	; (8007084 <DMA_DeInit+0x188>)
 800702c:	4a12      	ldr	r2, [pc, #72]	; (8007078 <DMA_DeInit+0x17c>)
 800702e:	60da      	str	r2, [r3, #12]
}
 8007030:	e007      	b.n	8007042 <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a1a      	ldr	r2, [pc, #104]	; (80070a0 <DMA_DeInit+0x1a4>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d103      	bne.n	8007042 <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 800703a:	4b12      	ldr	r3, [pc, #72]	; (8007084 <DMA_DeInit+0x188>)
 800703c:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8007040:	60da      	str	r2, [r3, #12]
}
 8007042:	bf00      	nop
 8007044:	370c      	adds	r7, #12
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	40026010 	.word	0x40026010
 8007054:	40026000 	.word	0x40026000
 8007058:	40026028 	.word	0x40026028
 800705c:	40026040 	.word	0x40026040
 8007060:	40026058 	.word	0x40026058
 8007064:	40026070 	.word	0x40026070
 8007068:	2000003d 	.word	0x2000003d
 800706c:	40026088 	.word	0x40026088
 8007070:	20000f40 	.word	0x20000f40
 8007074:	400260a0 	.word	0x400260a0
 8007078:	203d0000 	.word	0x203d0000
 800707c:	400260b8 	.word	0x400260b8
 8007080:	40026410 	.word	0x40026410
 8007084:	40026400 	.word	0x40026400
 8007088:	40026428 	.word	0x40026428
 800708c:	40026440 	.word	0x40026440
 8007090:	40026458 	.word	0x40026458
 8007094:	40026470 	.word	0x40026470
 8007098:	40026488 	.word	0x40026488
 800709c:	400264a0 	.word	0x400264a0
 80070a0:	400264b8 	.word	0x400264b8

080070a4 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80070ae:	2300      	movs	r3, #0
 80070b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	4b25      	ldr	r3, [pc, #148]	; (8007150 <DMA_Init+0xac>)
 80070bc:	4013      	ands	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80070ce:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80070da:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	6a1b      	ldr	r3, [r3, #32]
 80070e0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80070e6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ec:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80070f2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f8:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	4313      	orrs	r3, r2
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	68fa      	ldr	r2, [r7, #12]
 8007104:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f023 0307 	bic.w	r3, r3, #7
 8007112:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711c:	4313      	orrs	r3, r2
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	4313      	orrs	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	691a      	ldr	r2, [r3, #16]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	685a      	ldr	r2, [r3, #4]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	689a      	ldr	r2, [r3, #8]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	60da      	str	r2, [r3, #12]
}
 8007142:	bf00      	nop
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	f01c803f 	.word	0xf01c803f

08007154 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	460b      	mov	r3, r1
 800715e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007160:	78fb      	ldrb	r3, [r7, #3]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d006      	beq.n	8007174 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f043 0201 	orr.w	r2, r3, #1
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8007172:	e005      	b.n	8007180 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f023 0201 	bic.w	r2, r3, #1
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	601a      	str	r2, [r3, #0]
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	4613      	mov	r3, r2
 8007198:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d00f      	beq.n	80071c4 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 80071a4:	79fb      	ldrb	r3, [r7, #7]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d006      	beq.n	80071b8 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	615a      	str	r2, [r3, #20]
 80071b6:	e005      	b.n	80071c4 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	2b80      	cmp	r3, #128	; 0x80
 80071c8:	d014      	beq.n	80071f4 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 80071ca:	79fb      	ldrb	r3, [r7, #7]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d008      	beq.n	80071e2 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	f003 031e 	and.w	r3, r3, #30
 80071da:	431a      	orrs	r2, r3
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 80071e0:	e008      	b.n	80071f4 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	f003 031e 	and.w	r3, r3, #30
 80071ec:	43db      	mvns	r3, r3
 80071ee:	401a      	ands	r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	601a      	str	r2, [r3, #0]
}
 80071f4:	bf00      	nop
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8007200:	b480      	push	{r7}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800720a:	2300      	movs	r3, #0
 800720c:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 800720e:	2300      	movs	r3, #0
 8007210:	60fb      	str	r3, [r7, #12]
 8007212:	2300      	movs	r3, #0
 8007214:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a22      	ldr	r2, [pc, #136]	; (80072a4 <DMA_GetITStatus+0xa4>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d802      	bhi.n	8007224 <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800721e:	4b22      	ldr	r3, [pc, #136]	; (80072a8 <DMA_GetITStatus+0xa8>)
 8007220:	613b      	str	r3, [r7, #16]
 8007222:	e001      	b.n	8007228 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8007224:	4b21      	ldr	r3, [pc, #132]	; (80072ac <DMA_GetITStatus+0xac>)
 8007226:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800722e:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	0adb      	lsrs	r3, r3, #11
 800723a:	f003 031e 	and.w	r3, r3, #30
 800723e:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	4013      	ands	r3, r2
 8007248:	60bb      	str	r3, [r7, #8]
 800724a:	e004      	b.n	8007256 <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	695b      	ldr	r3, [r3, #20]
 8007250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007254:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800725c:	2b00      	cmp	r3, #0
 800725e:	d003      	beq.n	8007268 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	60fb      	str	r3, [r7, #12]
 8007266:	e002      	b.n	800726e <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8007268:	693b      	ldr	r3, [r7, #16]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8007274:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8007278:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800727a:	68fa      	ldr	r2, [r7, #12]
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	4013      	ands	r3, r2
 8007280:	2b00      	cmp	r3, #0
 8007282:	d005      	beq.n	8007290 <DMA_GetITStatus+0x90>
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d002      	beq.n	8007290 <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 800728a:	2301      	movs	r3, #1
 800728c:	75fb      	strb	r3, [r7, #23]
 800728e:	e001      	b.n	8007294 <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8007290:	2300      	movs	r3, #0
 8007292:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8007294:	7dfb      	ldrb	r3, [r7, #23]
}
 8007296:	4618      	mov	r0, r3
 8007298:	371c      	adds	r7, #28
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	4002640f 	.word	0x4002640f
 80072a8:	40026000 	.word	0x40026000
 80072ac:	40026400 	.word	0x40026400

080072b0 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a10      	ldr	r2, [pc, #64]	; (8007300 <DMA_ClearITPendingBit+0x50>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d802      	bhi.n	80072c8 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80072c2:	4b10      	ldr	r3, [pc, #64]	; (8007304 <DMA_ClearITPendingBit+0x54>)
 80072c4:	60fb      	str	r3, [r7, #12]
 80072c6:	e001      	b.n	80072cc <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80072c8:	4b0f      	ldr	r3, [pc, #60]	; (8007308 <DMA_ClearITPendingBit+0x58>)
 80072ca:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d007      	beq.n	80072e6 <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80072dc:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 80072e4:	e006      	b.n	80072f4 <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80072ec:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80072f0:	68fa      	ldr	r2, [r7, #12]
 80072f2:	6093      	str	r3, [r2, #8]
}
 80072f4:	bf00      	nop
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	4002640f 	.word	0x4002640f
 8007304:	40026000 	.word	0x40026000
 8007308:	40026400 	.word	0x40026400

0800730c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800730c:	b480      	push	{r7}
 800730e:	b087      	sub	sp, #28
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8007316:	2300      	movs	r3, #0
 8007318:	617b      	str	r3, [r7, #20]
 800731a:	2300      	movs	r3, #0
 800731c:	613b      	str	r3, [r7, #16]
 800731e:	2300      	movs	r3, #0
 8007320:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8007322:	2300      	movs	r3, #0
 8007324:	617b      	str	r3, [r7, #20]
 8007326:	e076      	b.n	8007416 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8007328:	2201      	movs	r2, #1
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	fa02 f303 	lsl.w	r3, r2, r3
 8007330:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	4013      	ands	r3, r2
 800733a:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	429a      	cmp	r2, r3
 8007342:	d165      	bne.n	8007410 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	005b      	lsls	r3, r3, #1
 800734c:	2103      	movs	r1, #3
 800734e:	fa01 f303 	lsl.w	r3, r1, r3
 8007352:	43db      	mvns	r3, r3
 8007354:	401a      	ands	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	791b      	ldrb	r3, [r3, #4]
 8007362:	4619      	mov	r1, r3
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	005b      	lsls	r3, r3, #1
 8007368:	fa01 f303 	lsl.w	r3, r1, r3
 800736c:	431a      	orrs	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	791b      	ldrb	r3, [r3, #4]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d003      	beq.n	8007382 <GPIO_Init+0x76>
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	791b      	ldrb	r3, [r3, #4]
 800737e:	2b02      	cmp	r3, #2
 8007380:	d12e      	bne.n	80073e0 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	689a      	ldr	r2, [r3, #8]
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	005b      	lsls	r3, r3, #1
 800738a:	2103      	movs	r1, #3
 800738c:	fa01 f303 	lsl.w	r3, r1, r3
 8007390:	43db      	mvns	r3, r3
 8007392:	401a      	ands	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	689a      	ldr	r2, [r3, #8]
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	795b      	ldrb	r3, [r3, #5]
 80073a0:	4619      	mov	r1, r3
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	005b      	lsls	r3, r3, #1
 80073a6:	fa01 f303 	lsl.w	r3, r1, r3
 80073aa:	431a      	orrs	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	4619      	mov	r1, r3
 80073ba:	2301      	movs	r3, #1
 80073bc:	408b      	lsls	r3, r1
 80073be:	43db      	mvns	r3, r3
 80073c0:	401a      	ands	r2, r3
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	7992      	ldrb	r2, [r2, #6]
 80073ce:	4611      	mov	r1, r2
 80073d0:	697a      	ldr	r2, [r7, #20]
 80073d2:	b292      	uxth	r2, r2
 80073d4:	fa01 f202 	lsl.w	r2, r1, r2
 80073d8:	b292      	uxth	r2, r2
 80073da:	431a      	orrs	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	68da      	ldr	r2, [r3, #12]
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	005b      	lsls	r3, r3, #1
 80073ea:	2103      	movs	r1, #3
 80073ec:	fa01 f303 	lsl.w	r3, r1, r3
 80073f0:	43db      	mvns	r3, r3
 80073f2:	401a      	ands	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	68da      	ldr	r2, [r3, #12]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	79db      	ldrb	r3, [r3, #7]
 8007400:	4619      	mov	r1, r3
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	005b      	lsls	r3, r3, #1
 8007406:	fa01 f303 	lsl.w	r3, r1, r3
 800740a:	431a      	orrs	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	3301      	adds	r3, #1
 8007414:	617b      	str	r3, [r7, #20]
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	2b0f      	cmp	r3, #15
 800741a:	d985      	bls.n	8007328 <GPIO_Init+0x1c>
    }
  }
}
 800741c:	bf00      	nop
 800741e:	371c      	adds	r7, #28
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	460b      	mov	r3, r1
 8007432:	807b      	strh	r3, [r7, #2]
 8007434:	4613      	mov	r3, r2
 8007436:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8007438:	2300      	movs	r3, #0
 800743a:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800743c:	2300      	movs	r3, #0
 800743e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8007440:	787a      	ldrb	r2, [r7, #1]
 8007442:	887b      	ldrh	r3, [r7, #2]
 8007444:	f003 0307 	and.w	r3, r3, #7
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	fa02 f303 	lsl.w	r3, r2, r3
 800744e:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8007450:	887b      	ldrh	r3, [r7, #2]
 8007452:	08db      	lsrs	r3, r3, #3
 8007454:	b29b      	uxth	r3, r3
 8007456:	4618      	mov	r0, r3
 8007458:	887b      	ldrh	r3, [r7, #2]
 800745a:	08db      	lsrs	r3, r3, #3
 800745c:	b29b      	uxth	r3, r3
 800745e:	461a      	mov	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	3208      	adds	r2, #8
 8007464:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007468:	887b      	ldrh	r3, [r7, #2]
 800746a:	f003 0307 	and.w	r3, r3, #7
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	210f      	movs	r1, #15
 8007472:	fa01 f303 	lsl.w	r3, r1, r3
 8007476:	43db      	mvns	r3, r3
 8007478:	ea02 0103 	and.w	r1, r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f100 0208 	add.w	r2, r0, #8
 8007482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8007486:	887b      	ldrh	r3, [r7, #2]
 8007488:	08db      	lsrs	r3, r3, #3
 800748a:	b29b      	uxth	r3, r3
 800748c:	461a      	mov	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	3208      	adds	r2, #8
 8007492:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	4313      	orrs	r3, r2
 800749a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800749c:	887b      	ldrh	r3, [r7, #2]
 800749e:	08db      	lsrs	r3, r3, #3
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	461a      	mov	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	3208      	adds	r2, #8
 80074a8:	68b9      	ldr	r1, [r7, #8]
 80074aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80074ae:	bf00      	nop
 80074b0:	3714      	adds	r7, #20
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr
	...

080074bc <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80074bc:	b480      	push	{r7}
 80074be:	b089      	sub	sp, #36	; 0x24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80074c4:	2300      	movs	r3, #0
 80074c6:	61bb      	str	r3, [r7, #24]
 80074c8:	2300      	movs	r3, #0
 80074ca:	617b      	str	r3, [r7, #20]
 80074cc:	2300      	movs	r3, #0
 80074ce:	61fb      	str	r3, [r7, #28]
 80074d0:	2302      	movs	r3, #2
 80074d2:	613b      	str	r3, [r7, #16]
 80074d4:	2300      	movs	r3, #0
 80074d6:	60fb      	str	r3, [r7, #12]
 80074d8:	2302      	movs	r3, #2
 80074da:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80074dc:	4b47      	ldr	r3, [pc, #284]	; (80075fc <RCC_GetClocksFreq+0x140>)
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f003 030c 	and.w	r3, r3, #12
 80074e4:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	2b04      	cmp	r3, #4
 80074ea:	d007      	beq.n	80074fc <RCC_GetClocksFreq+0x40>
 80074ec:	2b08      	cmp	r3, #8
 80074ee:	d009      	beq.n	8007504 <RCC_GetClocksFreq+0x48>
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d13d      	bne.n	8007570 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a42      	ldr	r2, [pc, #264]	; (8007600 <RCC_GetClocksFreq+0x144>)
 80074f8:	601a      	str	r2, [r3, #0]
      break;
 80074fa:	e03d      	b.n	8007578 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a41      	ldr	r2, [pc, #260]	; (8007604 <RCC_GetClocksFreq+0x148>)
 8007500:	601a      	str	r2, [r3, #0]
      break;
 8007502:	e039      	b.n	8007578 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8007504:	4b3d      	ldr	r3, [pc, #244]	; (80075fc <RCC_GetClocksFreq+0x140>)
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	0d9b      	lsrs	r3, r3, #22
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007510:	4b3a      	ldr	r3, [pc, #232]	; (80075fc <RCC_GetClocksFreq+0x140>)
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007518:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00c      	beq.n	800753a <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8007520:	4a38      	ldr	r2, [pc, #224]	; (8007604 <RCC_GetClocksFreq+0x148>)
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	fbb2 f3f3 	udiv	r3, r2, r3
 8007528:	4a34      	ldr	r2, [pc, #208]	; (80075fc <RCC_GetClocksFreq+0x140>)
 800752a:	6852      	ldr	r2, [r2, #4]
 800752c:	0992      	lsrs	r2, r2, #6
 800752e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007532:	fb02 f303 	mul.w	r3, r2, r3
 8007536:	61fb      	str	r3, [r7, #28]
 8007538:	e00b      	b.n	8007552 <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800753a:	4a31      	ldr	r2, [pc, #196]	; (8007600 <RCC_GetClocksFreq+0x144>)
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007542:	4a2e      	ldr	r2, [pc, #184]	; (80075fc <RCC_GetClocksFreq+0x140>)
 8007544:	6852      	ldr	r2, [r2, #4]
 8007546:	0992      	lsrs	r2, r2, #6
 8007548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800754c:	fb02 f303 	mul.w	r3, r2, r3
 8007550:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8007552:	4b2a      	ldr	r3, [pc, #168]	; (80075fc <RCC_GetClocksFreq+0x140>)
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	0c1b      	lsrs	r3, r3, #16
 8007558:	f003 0303 	and.w	r3, r3, #3
 800755c:	3301      	adds	r3, #1
 800755e:	005b      	lsls	r3, r3, #1
 8007560:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8007562:	69fa      	ldr	r2, [r7, #28]
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	fbb2 f2f3 	udiv	r2, r2, r3
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	601a      	str	r2, [r3, #0]
      break;
 800756e:	e003      	b.n	8007578 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a23      	ldr	r2, [pc, #140]	; (8007600 <RCC_GetClocksFreq+0x144>)
 8007574:	601a      	str	r2, [r3, #0]
      break;
 8007576:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8007578:	4b20      	ldr	r3, [pc, #128]	; (80075fc <RCC_GetClocksFreq+0x140>)
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007580:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	091b      	lsrs	r3, r3, #4
 8007586:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8007588:	4a1f      	ldr	r2, [pc, #124]	; (8007608 <RCC_GetClocksFreq+0x14c>)
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	4413      	add	r3, r2
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	b2db      	uxtb	r3, r3
 8007592:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	40da      	lsrs	r2, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80075a0:	4b16      	ldr	r3, [pc, #88]	; (80075fc <RCC_GetClocksFreq+0x140>)
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80075a8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	0a9b      	lsrs	r3, r3, #10
 80075ae:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80075b0:	4a15      	ldr	r2, [pc, #84]	; (8007608 <RCC_GetClocksFreq+0x14c>)
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	4413      	add	r3, r2
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	685a      	ldr	r2, [r3, #4]
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	40da      	lsrs	r2, r3
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80075c8:	4b0c      	ldr	r3, [pc, #48]	; (80075fc <RCC_GetClocksFreq+0x140>)
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80075d0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	0b5b      	lsrs	r3, r3, #13
 80075d6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80075d8:	4a0b      	ldr	r2, [pc, #44]	; (8007608 <RCC_GetClocksFreq+0x14c>)
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	4413      	add	r3, r2
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	685a      	ldr	r2, [r3, #4]
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	40da      	lsrs	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	60da      	str	r2, [r3, #12]
}
 80075f0:	bf00      	nop
 80075f2:	3724      	adds	r7, #36	; 0x24
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr
 80075fc:	40023800 	.word	0x40023800
 8007600:	00f42400 	.word	0x00f42400
 8007604:	007a1200 	.word	0x007a1200
 8007608:	20000000 	.word	0x20000000

0800760c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800760c:	b480      	push	{r7}
 800760e:	b083      	sub	sp, #12
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	460b      	mov	r3, r1
 8007616:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007618:	78fb      	ldrb	r3, [r7, #3]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d006      	beq.n	800762c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800761e:	490a      	ldr	r1, [pc, #40]	; (8007648 <RCC_AHB1PeriphClockCmd+0x3c>)
 8007620:	4b09      	ldr	r3, [pc, #36]	; (8007648 <RCC_AHB1PeriphClockCmd+0x3c>)
 8007622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4313      	orrs	r3, r2
 8007628:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800762a:	e006      	b.n	800763a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800762c:	4906      	ldr	r1, [pc, #24]	; (8007648 <RCC_AHB1PeriphClockCmd+0x3c>)
 800762e:	4b06      	ldr	r3, [pc, #24]	; (8007648 <RCC_AHB1PeriphClockCmd+0x3c>)
 8007630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	43db      	mvns	r3, r3
 8007636:	4013      	ands	r3, r2
 8007638:	630b      	str	r3, [r1, #48]	; 0x30
}
 800763a:	bf00      	nop
 800763c:	370c      	adds	r7, #12
 800763e:	46bd      	mov	sp, r7
 8007640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007644:	4770      	bx	lr
 8007646:	bf00      	nop
 8007648:	40023800 	.word	0x40023800

0800764c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	460b      	mov	r3, r1
 8007656:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007658:	78fb      	ldrb	r3, [r7, #3]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d006      	beq.n	800766c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800765e:	490a      	ldr	r1, [pc, #40]	; (8007688 <RCC_APB1PeriphClockCmd+0x3c>)
 8007660:	4b09      	ldr	r3, [pc, #36]	; (8007688 <RCC_APB1PeriphClockCmd+0x3c>)
 8007662:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	4313      	orrs	r3, r2
 8007668:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800766a:	e006      	b.n	800767a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800766c:	4906      	ldr	r1, [pc, #24]	; (8007688 <RCC_APB1PeriphClockCmd+0x3c>)
 800766e:	4b06      	ldr	r3, [pc, #24]	; (8007688 <RCC_APB1PeriphClockCmd+0x3c>)
 8007670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	43db      	mvns	r3, r3
 8007676:	4013      	ands	r3, r2
 8007678:	640b      	str	r3, [r1, #64]	; 0x40
}
 800767a:	bf00      	nop
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	40023800 	.word	0x40023800

0800768c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800768c:	b480      	push	{r7}
 800768e:	b083      	sub	sp, #12
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	460b      	mov	r3, r1
 8007696:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007698:	78fb      	ldrb	r3, [r7, #3]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d006      	beq.n	80076ac <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800769e:	490a      	ldr	r1, [pc, #40]	; (80076c8 <RCC_APB2PeriphClockCmd+0x3c>)
 80076a0:	4b09      	ldr	r3, [pc, #36]	; (80076c8 <RCC_APB2PeriphClockCmd+0x3c>)
 80076a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80076aa:	e006      	b.n	80076ba <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80076ac:	4906      	ldr	r1, [pc, #24]	; (80076c8 <RCC_APB2PeriphClockCmd+0x3c>)
 80076ae:	4b06      	ldr	r3, [pc, #24]	; (80076c8 <RCC_APB2PeriphClockCmd+0x3c>)
 80076b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	43db      	mvns	r3, r3
 80076b6:	4013      	ands	r3, r2
 80076b8:	644b      	str	r3, [r1, #68]	; 0x44
}
 80076ba:	bf00      	nop
 80076bc:	370c      	adds	r7, #12
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	40023800 	.word	0x40023800

080076cc <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80076d6:	2300      	movs	r3, #0
 80076d8:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	881b      	ldrh	r3, [r3, #0]
 80076de:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a29      	ldr	r2, [pc, #164]	; (8007788 <TIM_TimeBaseInit+0xbc>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d013      	beq.n	8007710 <TIM_TimeBaseInit+0x44>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a28      	ldr	r2, [pc, #160]	; (800778c <TIM_TimeBaseInit+0xc0>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d00f      	beq.n	8007710 <TIM_TimeBaseInit+0x44>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076f6:	d00b      	beq.n	8007710 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a25      	ldr	r2, [pc, #148]	; (8007790 <TIM_TimeBaseInit+0xc4>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d007      	beq.n	8007710 <TIM_TimeBaseInit+0x44>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a24      	ldr	r2, [pc, #144]	; (8007794 <TIM_TimeBaseInit+0xc8>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d003      	beq.n	8007710 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4a23      	ldr	r2, [pc, #140]	; (8007798 <TIM_TimeBaseInit+0xcc>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d108      	bne.n	8007722 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8007710:	89fb      	ldrh	r3, [r7, #14]
 8007712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007716:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	885a      	ldrh	r2, [r3, #2]
 800771c:	89fb      	ldrh	r3, [r7, #14]
 800771e:	4313      	orrs	r3, r2
 8007720:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a1d      	ldr	r2, [pc, #116]	; (800779c <TIM_TimeBaseInit+0xd0>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d00c      	beq.n	8007744 <TIM_TimeBaseInit+0x78>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a1c      	ldr	r2, [pc, #112]	; (80077a0 <TIM_TimeBaseInit+0xd4>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d008      	beq.n	8007744 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8007732:	89fb      	ldrh	r3, [r7, #14]
 8007734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007738:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	891a      	ldrh	r2, [r3, #8]
 800773e:	89fb      	ldrh	r3, [r7, #14]
 8007740:	4313      	orrs	r3, r2
 8007742:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	89fa      	ldrh	r2, [r7, #14]
 8007748:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	685a      	ldr	r2, [r3, #4]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	881a      	ldrh	r2, [r3, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a0a      	ldr	r2, [pc, #40]	; (8007788 <TIM_TimeBaseInit+0xbc>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d003      	beq.n	800776a <TIM_TimeBaseInit+0x9e>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	4a09      	ldr	r2, [pc, #36]	; (800778c <TIM_TimeBaseInit+0xc0>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d104      	bne.n	8007774 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	7a9b      	ldrb	r3, [r3, #10]
 800776e:	b29a      	uxth	r2, r3
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	829a      	strh	r2, [r3, #20]
}
 800777a:	bf00      	nop
 800777c:	3714      	adds	r7, #20
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	40010000 	.word	0x40010000
 800778c:	40010400 	.word	0x40010400
 8007790:	40000400 	.word	0x40000400
 8007794:	40000800 	.word	0x40000800
 8007798:	40000c00 	.word	0x40000c00
 800779c:	40001000 	.word	0x40001000
 80077a0:	40001400 	.word	0x40001400

080077a4 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	460b      	mov	r3, r1
 80077ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80077b0:	78fb      	ldrb	r3, [r7, #3]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d008      	beq.n	80077c8 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	881b      	ldrh	r3, [r3, #0]
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077c0:	b29a      	uxth	r2, r3
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 80077c6:	e007      	b.n	80077d8 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	881b      	ldrh	r3, [r3, #0]
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077d2:	b29a      	uxth	r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	801a      	strh	r2, [r3, #0]
}
 80077d8:	bf00      	nop
 80077da:	370c      	adds	r7, #12
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b083      	sub	sp, #12
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	460b      	mov	r3, r1
 80077ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80077f0:	78fb      	ldrb	r3, [r7, #3]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d008      	beq.n	8007808 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	881b      	ldrh	r3, [r3, #0]
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	f043 0301 	orr.w	r3, r3, #1
 8007800:	b29a      	uxth	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8007806:	e007      	b.n	8007818 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	881b      	ldrh	r3, [r3, #0]
 800780c:	b29b      	uxth	r3, r3
 800780e:	f023 0301 	bic.w	r3, r3, #1
 8007812:	b29a      	uxth	r2, r3
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	801a      	strh	r2, [r3, #0]
}
 8007818:	bf00      	nop
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
 800782c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800782e:	2300      	movs	r3, #0
 8007830:	817b      	strh	r3, [r7, #10]
 8007832:	2300      	movs	r3, #0
 8007834:	81fb      	strh	r3, [r7, #14]
 8007836:	2300      	movs	r3, #0
 8007838:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	8c1b      	ldrh	r3, [r3, #32]
 800783e:	b29b      	uxth	r3, r3
 8007840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007844:	b29a      	uxth	r2, r3
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	8c1b      	ldrh	r3, [r3, #32]
 800784e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	889b      	ldrh	r3, [r3, #4]
 8007854:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	8b9b      	ldrh	r3, [r3, #28]
 800785a:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 800785c:	897b      	ldrh	r3, [r7, #10]
 800785e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007862:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8007864:	897b      	ldrh	r3, [r7, #10]
 8007866:	f023 0303 	bic.w	r3, r3, #3
 800786a:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	881a      	ldrh	r2, [r3, #0]
 8007870:	897b      	ldrh	r3, [r7, #10]
 8007872:	4313      	orrs	r3, r2
 8007874:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8007876:	89fb      	ldrh	r3, [r7, #14]
 8007878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800787c:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	899b      	ldrh	r3, [r3, #12]
 8007882:	021b      	lsls	r3, r3, #8
 8007884:	b29a      	uxth	r2, r3
 8007886:	89fb      	ldrh	r3, [r7, #14]
 8007888:	4313      	orrs	r3, r2
 800788a:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	885b      	ldrh	r3, [r3, #2]
 8007890:	021b      	lsls	r3, r3, #8
 8007892:	b29a      	uxth	r2, r3
 8007894:	89fb      	ldrh	r3, [r7, #14]
 8007896:	4313      	orrs	r3, r2
 8007898:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a22      	ldr	r2, [pc, #136]	; (8007928 <TIM_OC3Init+0x104>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d003      	beq.n	80078aa <TIM_OC3Init+0x86>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a21      	ldr	r2, [pc, #132]	; (800792c <TIM_OC3Init+0x108>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d12b      	bne.n	8007902 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80078aa:	89fb      	ldrh	r3, [r7, #14]
 80078ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078b0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	89db      	ldrh	r3, [r3, #14]
 80078b6:	021b      	lsls	r3, r3, #8
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	89fb      	ldrh	r3, [r7, #14]
 80078bc:	4313      	orrs	r3, r2
 80078be:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 80078c0:	89fb      	ldrh	r3, [r7, #14]
 80078c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078c6:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	889b      	ldrh	r3, [r3, #4]
 80078cc:	021b      	lsls	r3, r3, #8
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	89fb      	ldrh	r3, [r7, #14]
 80078d2:	4313      	orrs	r3, r2
 80078d4:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 80078d6:	89bb      	ldrh	r3, [r7, #12]
 80078d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078dc:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80078de:	89bb      	ldrh	r3, [r7, #12]
 80078e0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078e4:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	8a1b      	ldrh	r3, [r3, #16]
 80078ea:	011b      	lsls	r3, r3, #4
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	89bb      	ldrh	r3, [r7, #12]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	8a5b      	ldrh	r3, [r3, #18]
 80078f8:	011b      	lsls	r3, r3, #4
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	89bb      	ldrh	r3, [r7, #12]
 80078fe:	4313      	orrs	r3, r2
 8007900:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	89ba      	ldrh	r2, [r7, #12]
 8007906:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	897a      	ldrh	r2, [r7, #10]
 800790c:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	689a      	ldr	r2, [r3, #8]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	89fa      	ldrh	r2, [r7, #14]
 800791a:	841a      	strh	r2, [r3, #32]
}
 800791c:	bf00      	nop
 800791e:	3714      	adds	r7, #20
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr
 8007928:	40010000 	.word	0x40010000
 800792c:	40010400 	.word	0x40010400

08007930 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800793a:	2300      	movs	r3, #0
 800793c:	81bb      	strh	r3, [r7, #12]
 800793e:	2300      	movs	r3, #0
 8007940:	817b      	strh	r3, [r7, #10]
 8007942:	2300      	movs	r3, #0
 8007944:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	8c1b      	ldrh	r3, [r3, #32]
 800794a:	b29b      	uxth	r3, r3
 800794c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007950:	b29a      	uxth	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	8c1b      	ldrh	r3, [r3, #32]
 800795a:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	889b      	ldrh	r3, [r3, #4]
 8007960:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	8b9b      	ldrh	r3, [r3, #28]
 8007966:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8007968:	89bb      	ldrh	r3, [r7, #12]
 800796a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800796e:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8007970:	89bb      	ldrh	r3, [r7, #12]
 8007972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007976:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	881b      	ldrh	r3, [r3, #0]
 800797c:	021b      	lsls	r3, r3, #8
 800797e:	b29a      	uxth	r2, r3
 8007980:	89bb      	ldrh	r3, [r7, #12]
 8007982:	4313      	orrs	r3, r2
 8007984:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8007986:	897b      	ldrh	r3, [r7, #10]
 8007988:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800798c:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	899b      	ldrh	r3, [r3, #12]
 8007992:	031b      	lsls	r3, r3, #12
 8007994:	b29a      	uxth	r2, r3
 8007996:	897b      	ldrh	r3, [r7, #10]
 8007998:	4313      	orrs	r3, r2
 800799a:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	885b      	ldrh	r3, [r3, #2]
 80079a0:	031b      	lsls	r3, r3, #12
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	897b      	ldrh	r3, [r7, #10]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a12      	ldr	r2, [pc, #72]	; (80079f8 <TIM_OC4Init+0xc8>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d003      	beq.n	80079ba <TIM_OC4Init+0x8a>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	4a11      	ldr	r2, [pc, #68]	; (80079fc <TIM_OC4Init+0xcc>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d10a      	bne.n	80079d0 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 80079ba:	89fb      	ldrh	r3, [r7, #14]
 80079bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079c0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	8a1b      	ldrh	r3, [r3, #16]
 80079c6:	019b      	lsls	r3, r3, #6
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	89fb      	ldrh	r3, [r7, #14]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	89fa      	ldrh	r2, [r7, #14]
 80079d4:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	89ba      	ldrh	r2, [r7, #12]
 80079da:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	689a      	ldr	r2, [r3, #8]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	897a      	ldrh	r2, [r7, #10]
 80079e8:	841a      	strh	r2, [r3, #32]
}
 80079ea:	bf00      	nop
 80079ec:	3714      	adds	r7, #20
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	40010000 	.word	0x40010000
 80079fc:	40010400 	.word	0x40010400

08007a00 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	8b9b      	ldrh	r3, [r3, #28]
 8007a14:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8007a16:	89fb      	ldrh	r3, [r7, #14]
 8007a18:	f023 0308 	bic.w	r3, r3, #8
 8007a1c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8007a1e:	89fa      	ldrh	r2, [r7, #14]
 8007a20:	887b      	ldrh	r3, [r7, #2]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	89fa      	ldrh	r2, [r7, #14]
 8007a2a:	839a      	strh	r2, [r3, #28]
}
 8007a2c:	bf00      	nop
 8007a2e:	3714      	adds	r7, #20
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
 8007a40:	460b      	mov	r3, r1
 8007a42:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8007a44:	2300      	movs	r3, #0
 8007a46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	8b9b      	ldrh	r3, [r3, #28]
 8007a4c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8007a4e:	89fb      	ldrh	r3, [r7, #14]
 8007a50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a54:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8007a56:	887b      	ldrh	r3, [r7, #2]
 8007a58:	021b      	lsls	r3, r3, #8
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	89fb      	ldrh	r3, [r7, #14]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	89fa      	ldrh	r2, [r7, #14]
 8007a66:	839a      	strh	r2, [r3, #28]
}
 8007a68:	bf00      	nop
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	807b      	strh	r3, [r7, #2]
 8007a80:	4613      	mov	r3, r2
 8007a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8007a84:	787b      	ldrb	r3, [r7, #1]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d008      	beq.n	8007a9c <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	899b      	ldrh	r3, [r3, #12]
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	887b      	ldrh	r3, [r7, #2]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8007a9a:	e009      	b.n	8007ab0 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	899b      	ldrh	r3, [r3, #12]
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	887b      	ldrh	r3, [r7, #2]
 8007aa4:	43db      	mvns	r3, r3
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	b29a      	uxth	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	819a      	strh	r2, [r3, #12]
}
 8007ab0:	bf00      	nop
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8007ac8:	887b      	ldrh	r3, [r7, #2]
 8007aca:	43db      	mvns	r3, r3
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	821a      	strh	r2, [r3, #16]
}
 8007ad2:	bf00      	nop
 8007ad4:	370c      	adds	r7, #12
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr

08007ade <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8007ade:	b480      	push	{r7}
 8007ae0:	b083      	sub	sp, #12
 8007ae2:	af00      	add	r7, sp, #0
 8007ae4:	6078      	str	r0, [r7, #4]
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	807b      	strh	r3, [r7, #2]
 8007aea:	4613      	mov	r3, r2
 8007aec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8007aee:	787b      	ldrb	r3, [r7, #1]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d008      	beq.n	8007b06 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	899b      	ldrh	r3, [r3, #12]
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	887b      	ldrh	r3, [r7, #2]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	b29a      	uxth	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
 8007b04:	e009      	b.n	8007b1a <TIM_DMACmd+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	899b      	ldrh	r3, [r3, #12]
 8007b0a:	b29a      	uxth	r2, r3
 8007b0c:	887b      	ldrh	r3, [r7, #2]
 8007b0e:	43db      	mvns	r3, r3
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	4013      	ands	r3, r2
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	819a      	strh	r2, [r3, #12]
}
 8007b1a:	bf00      	nop
 8007b1c:	370c      	adds	r7, #12
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b24:	4770      	bx	lr
	...

08007b28 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b08a      	sub	sp, #40	; 0x28
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8007b32:	2300      	movs	r3, #0
 8007b34:	627b      	str	r3, [r7, #36]	; 0x24
 8007b36:	2300      	movs	r3, #0
 8007b38:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	8a1b      	ldrh	r3, [r3, #16]
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8007b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007b50:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	88db      	ldrh	r3, [r3, #6]
 8007b56:	461a      	mov	r2, r3
 8007b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	899b      	ldrh	r3, [r3, #12]
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8007b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b70:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007b74:	f023 030c 	bic.w	r3, r3, #12
 8007b78:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	889a      	ldrh	r2, [r3, #4]
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	891b      	ldrh	r3, [r3, #8]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	461a      	mov	r2, r3
 8007b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b92:	4313      	orrs	r3, r2
 8007b94:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8007b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b98:	b29a      	uxth	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	8a9b      	ldrh	r3, [r3, #20]
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8007ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	899b      	ldrh	r3, [r3, #12]
 8007bb2:	461a      	mov	r2, r3
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8007bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8007bc2:	f107 0308 	add.w	r3, r7, #8
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7ff fc78 	bl	80074bc <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a30      	ldr	r2, [pc, #192]	; (8007c90 <USART_Init+0x168>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d003      	beq.n	8007bdc <USART_Init+0xb4>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a2f      	ldr	r2, [pc, #188]	; (8007c94 <USART_Init+0x16c>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d102      	bne.n	8007be2 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	623b      	str	r3, [r7, #32]
 8007be0:	e001      	b.n	8007be6 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	899b      	ldrh	r3, [r3, #12]
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	b21b      	sxth	r3, r3
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	da0c      	bge.n	8007c0c <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8007bf2:	6a3a      	ldr	r2, [r7, #32]
 8007bf4:	4613      	mov	r3, r2
 8007bf6:	009b      	lsls	r3, r3, #2
 8007bf8:	4413      	add	r3, r2
 8007bfa:	009a      	lsls	r2, r3, #2
 8007bfc:	441a      	add	r2, r3
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	005b      	lsls	r3, r3, #1
 8007c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c08:	61fb      	str	r3, [r7, #28]
 8007c0a:	e00b      	b.n	8007c24 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8007c0c:	6a3a      	ldr	r2, [r7, #32]
 8007c0e:	4613      	mov	r3, r2
 8007c10:	009b      	lsls	r3, r3, #2
 8007c12:	4413      	add	r3, r2
 8007c14:	009a      	lsls	r2, r3, #2
 8007c16:	441a      	add	r2, r3
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c22:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	4a1c      	ldr	r2, [pc, #112]	; (8007c98 <USART_Init+0x170>)
 8007c28:	fba2 2303 	umull	r2, r3, r2, r3
 8007c2c:	095b      	lsrs	r3, r3, #5
 8007c2e:	011b      	lsls	r3, r3, #4
 8007c30:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8007c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c34:	091b      	lsrs	r3, r3, #4
 8007c36:	2264      	movs	r2, #100	; 0x64
 8007c38:	fb02 f303 	mul.w	r3, r2, r3
 8007c3c:	69fa      	ldr	r2, [r7, #28]
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	899b      	ldrh	r3, [r3, #12]
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	b21b      	sxth	r3, r3
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	da0c      	bge.n	8007c68 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	00db      	lsls	r3, r3, #3
 8007c52:	3332      	adds	r3, #50	; 0x32
 8007c54:	4a10      	ldr	r2, [pc, #64]	; (8007c98 <USART_Init+0x170>)
 8007c56:	fba2 2303 	umull	r2, r3, r2, r3
 8007c5a:	095b      	lsrs	r3, r3, #5
 8007c5c:	f003 0307 	and.w	r3, r3, #7
 8007c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c62:	4313      	orrs	r3, r2
 8007c64:	627b      	str	r3, [r7, #36]	; 0x24
 8007c66:	e00b      	b.n	8007c80 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	011b      	lsls	r3, r3, #4
 8007c6c:	3332      	adds	r3, #50	; 0x32
 8007c6e:	4a0a      	ldr	r2, [pc, #40]	; (8007c98 <USART_Init+0x170>)
 8007c70:	fba2 2303 	umull	r2, r3, r2, r3
 8007c74:	095b      	lsrs	r3, r3, #5
 8007c76:	f003 030f 	and.w	r3, r3, #15
 8007c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	811a      	strh	r2, [r3, #8]
}
 8007c88:	bf00      	nop
 8007c8a:	3728      	adds	r7, #40	; 0x28
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	40011000 	.word	0x40011000
 8007c94:	40011400 	.word	0x40011400
 8007c98:	51eb851f 	.word	0x51eb851f

08007c9c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	460b      	mov	r3, r1
 8007ca6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8007ca8:	78fb      	ldrb	r3, [r7, #3]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d008      	beq.n	8007cc0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	899b      	ldrh	r3, [r3, #12]
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8007cbe:	e007      	b.n	8007cd0 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	899b      	ldrh	r3, [r3, #12]
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	819a      	strh	r2, [r3, #12]
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8007ce8:	887b      	ldrh	r3, [r7, #2]
 8007cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cee:	b29a      	uxth	r2, r3
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	809a      	strh	r2, [r3, #4]
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b087      	sub	sp, #28
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	807b      	strh	r3, [r7, #2]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8007d10:	2300      	movs	r3, #0
 8007d12:	613b      	str	r3, [r7, #16]
 8007d14:	2300      	movs	r3, #0
 8007d16:	60fb      	str	r3, [r7, #12]
 8007d18:	2300      	movs	r3, #0
 8007d1a:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8007d24:	887b      	ldrh	r3, [r7, #2]
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	095b      	lsrs	r3, r3, #5
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8007d2e:	887b      	ldrh	r3, [r7, #2]
 8007d30:	f003 031f 	and.w	r3, r3, #31
 8007d34:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8007d36:	2201      	movs	r2, #1
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d3e:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d103      	bne.n	8007d4e <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	330c      	adds	r3, #12
 8007d4a:	617b      	str	r3, [r7, #20]
 8007d4c:	e009      	b.n	8007d62 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d103      	bne.n	8007d5c <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	3310      	adds	r3, #16
 8007d58:	617b      	str	r3, [r7, #20]
 8007d5a:	e002      	b.n	8007d62 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	3314      	adds	r3, #20
 8007d60:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8007d62:	787b      	ldrb	r3, [r7, #1]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d006      	beq.n	8007d76 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	697a      	ldr	r2, [r7, #20]
 8007d6c:	6811      	ldr	r1, [r2, #0]
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	430a      	orrs	r2, r1
 8007d72:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8007d74:	e006      	b.n	8007d84 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	697a      	ldr	r2, [r7, #20]
 8007d7a:	6811      	ldr	r1, [r2, #0]
 8007d7c:	68ba      	ldr	r2, [r7, #8]
 8007d7e:	43d2      	mvns	r2, r2
 8007d80:	400a      	ands	r2, r1
 8007d82:	601a      	str	r2, [r3, #0]
}
 8007d84:	bf00      	nop
 8007d86:	371c      	adds	r7, #28
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	881b      	ldrh	r3, [r3, #0]
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	887b      	ldrh	r3, [r7, #2]
 8007da8:	4013      	ands	r3, r2
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d002      	beq.n	8007db6 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8007db0:	2301      	movs	r3, #1
 8007db2:	73fb      	strb	r3, [r7, #15]
 8007db4:	e001      	b.n	8007dba <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8007db6:	2300      	movs	r3, #0
 8007db8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3714      	adds	r7, #20
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b087      	sub	sp, #28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	60fb      	str	r3, [r7, #12]
 8007dd8:	2300      	movs	r3, #0
 8007dda:	617b      	str	r3, [r7, #20]
 8007ddc:	2300      	movs	r3, #0
 8007dde:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8007de0:	2300      	movs	r3, #0
 8007de2:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8007de4:	887b      	ldrh	r3, [r7, #2]
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	095b      	lsrs	r3, r3, #5
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8007dee:	887b      	ldrh	r3, [r7, #2]
 8007df0:	f003 031f 	and.w	r3, r3, #31
 8007df4:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8007df6:	2201      	movs	r2, #1
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8007dfe:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d107      	bne.n	8007e16 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	899b      	ldrh	r3, [r3, #12]
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	4013      	ands	r3, r2
 8007e12:	617b      	str	r3, [r7, #20]
 8007e14:	e011      	b.n	8007e3a <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	2b02      	cmp	r3, #2
 8007e1a:	d107      	bne.n	8007e2c <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	8a1b      	ldrh	r3, [r3, #16]
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	461a      	mov	r2, r3
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	4013      	ands	r3, r2
 8007e28:	617b      	str	r3, [r7, #20]
 8007e2a:	e006      	b.n	8007e3a <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	8a9b      	ldrh	r3, [r3, #20]
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	461a      	mov	r2, r3
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	4013      	ands	r3, r2
 8007e38:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8007e3a:	887b      	ldrh	r3, [r7, #2]
 8007e3c:	0a1b      	lsrs	r3, r3, #8
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8007e42:	2201      	movs	r2, #1
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	fa02 f303 	lsl.w	r3, r2, r3
 8007e4a:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	881b      	ldrh	r3, [r3, #0]
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	461a      	mov	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	4013      	ands	r3, r2
 8007e58:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d005      	beq.n	8007e6c <USART_GetITStatus+0xa4>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d002      	beq.n	8007e6c <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8007e66:	2301      	movs	r3, #1
 8007e68:	74fb      	strb	r3, [r7, #19]
 8007e6a:	e001      	b.n	8007e70 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8007e70:	7cfb      	ldrb	r3, [r7, #19]
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	371c      	adds	r7, #28
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b085      	sub	sp, #20
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	460b      	mov	r3, r1
 8007e88:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	81fb      	strh	r3, [r7, #14]
 8007e8e:	2300      	movs	r3, #0
 8007e90:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8007e92:	887b      	ldrh	r3, [r7, #2]
 8007e94:	0a1b      	lsrs	r3, r3, #8
 8007e96:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8007e98:	89fb      	ldrh	r3, [r7, #14]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea0:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8007ea2:	89bb      	ldrh	r3, [r7, #12]
 8007ea4:	43db      	mvns	r3, r3
 8007ea6:	b29a      	uxth	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	801a      	strh	r2, [r3, #0]
}
 8007eac:	bf00      	nop
 8007eae:	3714      	adds	r7, #20
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <DELAY_init>:
uint32_t D_mS; // Global variable (ms)
uint32_t D_S; // Global variable (s)


void DELAY_init(void)
{
 8007eb8:	b590      	push	{r4, r7, lr}
 8007eba:	b085      	sub	sp, #20
 8007ebc:	af00      	add	r7, sp, #0
	RCC_ClocksTypeDef Clocks;
	RCC_GetClocksFreq(&Clocks);
 8007ebe:	463b      	mov	r3, r7
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7ff fafb 	bl	80074bc <RCC_GetClocksFreq>
	G_CLK = Clocks.SYSCLK_Frequency;	// Read the systemclock
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	4a3f      	ldr	r2, [pc, #252]	; (8007fc8 <DELAY_init+0x110>)
 8007eca:	6013      	str	r3, [r2, #0]
	D_S  = (G_CLK*1.25)/9/2;	// Number of instructions in one second
 8007ecc:	4b3e      	ldr	r3, [pc, #248]	; (8007fc8 <DELAY_init+0x110>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7f8 facd 	bl	8000470 <__aeabi_ui2d>
 8007ed6:	f04f 0200 	mov.w	r2, #0
 8007eda:	4b3c      	ldr	r3, [pc, #240]	; (8007fcc <DELAY_init+0x114>)
 8007edc:	f7f8 fb3e 	bl	800055c <__aeabi_dmul>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	4621      	mov	r1, r4
 8007ee8:	f04f 0200 	mov.w	r2, #0
 8007eec:	4b38      	ldr	r3, [pc, #224]	; (8007fd0 <DELAY_init+0x118>)
 8007eee:	f7f8 fc5f 	bl	80007b0 <__aeabi_ddiv>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	460c      	mov	r4, r1
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	4621      	mov	r1, r4
 8007efa:	f04f 0200 	mov.w	r2, #0
 8007efe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f02:	f7f8 fc55 	bl	80007b0 <__aeabi_ddiv>
 8007f06:	4603      	mov	r3, r0
 8007f08:	460c      	mov	r4, r1
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	4621      	mov	r1, r4
 8007f0e:	f7f8 fd37 	bl	8000980 <__aeabi_d2uiz>
 8007f12:	4602      	mov	r2, r0
 8007f14:	4b2f      	ldr	r3, [pc, #188]	; (8007fd4 <DELAY_init+0x11c>)
 8007f16:	601a      	str	r2, [r3, #0]
	D_mS = (G_CLK*1.25)/9000/2; // Number of instructions in one millisecond
 8007f18:	4b2b      	ldr	r3, [pc, #172]	; (8007fc8 <DELAY_init+0x110>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7f8 faa7 	bl	8000470 <__aeabi_ui2d>
 8007f22:	f04f 0200 	mov.w	r2, #0
 8007f26:	4b29      	ldr	r3, [pc, #164]	; (8007fcc <DELAY_init+0x114>)
 8007f28:	f7f8 fb18 	bl	800055c <__aeabi_dmul>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	460c      	mov	r4, r1
 8007f30:	4618      	mov	r0, r3
 8007f32:	4621      	mov	r1, r4
 8007f34:	a320      	add	r3, pc, #128	; (adr r3, 8007fb8 <DELAY_init+0x100>)
 8007f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3a:	f7f8 fc39 	bl	80007b0 <__aeabi_ddiv>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	460c      	mov	r4, r1
 8007f42:	4618      	mov	r0, r3
 8007f44:	4621      	mov	r1, r4
 8007f46:	f04f 0200 	mov.w	r2, #0
 8007f4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f4e:	f7f8 fc2f 	bl	80007b0 <__aeabi_ddiv>
 8007f52:	4603      	mov	r3, r0
 8007f54:	460c      	mov	r4, r1
 8007f56:	4618      	mov	r0, r3
 8007f58:	4621      	mov	r1, r4
 8007f5a:	f7f8 fd11 	bl	8000980 <__aeabi_d2uiz>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	4b1d      	ldr	r3, [pc, #116]	; (8007fd8 <DELAY_init+0x120>)
 8007f62:	601a      	str	r2, [r3, #0]
	D_uS = (G_CLK*1.25)/9000000/2; // Number of instructions in one microsecond, largest rounding error
 8007f64:	4b18      	ldr	r3, [pc, #96]	; (8007fc8 <DELAY_init+0x110>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7f8 fa81 	bl	8000470 <__aeabi_ui2d>
 8007f6e:	f04f 0200 	mov.w	r2, #0
 8007f72:	4b16      	ldr	r3, [pc, #88]	; (8007fcc <DELAY_init+0x114>)
 8007f74:	f7f8 faf2 	bl	800055c <__aeabi_dmul>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	460c      	mov	r4, r1
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	4621      	mov	r1, r4
 8007f80:	a30f      	add	r3, pc, #60	; (adr r3, 8007fc0 <DELAY_init+0x108>)
 8007f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f86:	f7f8 fc13 	bl	80007b0 <__aeabi_ddiv>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	460c      	mov	r4, r1
 8007f8e:	4618      	mov	r0, r3
 8007f90:	4621      	mov	r1, r4
 8007f92:	f04f 0200 	mov.w	r2, #0
 8007f96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f9a:	f7f8 fc09 	bl	80007b0 <__aeabi_ddiv>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	460c      	mov	r4, r1
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	f7f8 fceb 	bl	8000980 <__aeabi_d2uiz>
 8007faa:	4602      	mov	r2, r0
 8007fac:	4b0b      	ldr	r3, [pc, #44]	; (8007fdc <DELAY_init+0x124>)
 8007fae:	601a      	str	r2, [r3, #0]
}
 8007fb0:	bf00      	nop
 8007fb2:	3714      	adds	r7, #20
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd90      	pop	{r4, r7, pc}
 8007fb8:	00000000 	.word	0x00000000
 8007fbc:	40c19400 	.word	0x40c19400
 8007fc0:	00000000 	.word	0x00000000
 8007fc4:	41612a88 	.word	0x41612a88
 8007fc8:	2001388c 	.word	0x2001388c
 8007fcc:	3ff40000 	.word	0x3ff40000
 8007fd0:	40220000 	.word	0x40220000
 8007fd4:	20013890 	.word	0x20013890
 8007fd8:	20013898 	.word	0x20013898
 8007fdc:	20013894 	.word	0x20013894

08007fe0 <DELAY_ms>:
        time--;
    }
}

void DELAY_ms(volatile unsigned int time)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b085      	sub	sp, #20
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
    volatile unsigned int i;

    while(time>0)		// Run x times 1 millisecond
 8007fe8:	e00d      	b.n	8008006 <DELAY_ms+0x26>
    {
        for(i=0;i<D_mS;i++);
 8007fea:	2300      	movs	r3, #0
 8007fec:	60fb      	str	r3, [r7, #12]
 8007fee:	e002      	b.n	8007ff6 <DELAY_ms+0x16>
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	60fb      	str	r3, [r7, #12]
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	4b07      	ldr	r3, [pc, #28]	; (8008018 <DELAY_ms+0x38>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d3f7      	bcc.n	8007ff0 <DELAY_ms+0x10>
        time--;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	3b01      	subs	r3, #1
 8008004:	607b      	str	r3, [r7, #4]
    while(time>0)		// Run x times 1 millisecond
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1ee      	bne.n	8007fea <DELAY_ms+0xa>
    }
}
 800800c:	bf00      	nop
 800800e:	3714      	adds	r7, #20
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	20013898 	.word	0x20013898

0800801c <UB_VGA_Screen_Init>:

//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
  uint16_t xp,yp;

  VGA.hsync_cnt=0;
 8008022:	4b1b      	ldr	r3, [pc, #108]	; (8008090 <UB_VGA_Screen_Init+0x74>)
 8008024:	2200      	movs	r2, #0
 8008026:	801a      	strh	r2, [r3, #0]
  VGA.start_adr=0;
 8008028:	4b19      	ldr	r3, [pc, #100]	; (8008090 <UB_VGA_Screen_Init+0x74>)
 800802a:	2200      	movs	r2, #0
 800802c:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg=0;
 800802e:	4b18      	ldr	r3, [pc, #96]	; (8008090 <UB_VGA_Screen_Init+0x74>)
 8008030:	2200      	movs	r2, #0
 8008032:	609a      	str	r2, [r3, #8]

  // RAM init total black
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8008034:	2300      	movs	r3, #0
 8008036:	80bb      	strh	r3, [r7, #4]
 8008038:	e017      	b.n	800806a <UB_VGA_Screen_Init+0x4e>
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 800803a:	2300      	movs	r3, #0
 800803c:	80fb      	strh	r3, [r7, #6]
 800803e:	e00d      	b.n	800805c <UB_VGA_Screen_Init+0x40>
      VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=0;
 8008040:	88ba      	ldrh	r2, [r7, #4]
 8008042:	4613      	mov	r3, r2
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	4413      	add	r3, r2
 8008048:	019b      	lsls	r3, r3, #6
 800804a:	441a      	add	r2, r3
 800804c:	88fb      	ldrh	r3, [r7, #6]
 800804e:	4413      	add	r3, r2
 8008050:	4a10      	ldr	r2, [pc, #64]	; (8008094 <UB_VGA_Screen_Init+0x78>)
 8008052:	2100      	movs	r1, #0
 8008054:	54d1      	strb	r1, [r2, r3]
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 8008056:	88fb      	ldrh	r3, [r7, #6]
 8008058:	3301      	adds	r3, #1
 800805a:	80fb      	strh	r3, [r7, #6]
 800805c:	88fb      	ldrh	r3, [r7, #6]
 800805e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008062:	d9ed      	bls.n	8008040 <UB_VGA_Screen_Init+0x24>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8008064:	88bb      	ldrh	r3, [r7, #4]
 8008066:	3301      	adds	r3, #1
 8008068:	80bb      	strh	r3, [r7, #4]
 800806a:	88bb      	ldrh	r3, [r7, #4]
 800806c:	2bef      	cmp	r3, #239	; 0xef
 800806e:	d9e4      	bls.n	800803a <UB_VGA_Screen_Init+0x1e>
    }
  }

  // init IO-Pins
  P_VGA_InitIO();
 8008070:	f000 f85e 	bl	8008130 <P_VGA_InitIO>
  // init Timer
  P_VGA_InitTIM();
 8008074:	f000 f8b0 	bl	80081d8 <P_VGA_InitTIM>
  // init DMA
  P_VGA_InitDMA();
 8008078:	f000 f940 	bl	80082fc <P_VGA_InitDMA>
  // init Interrupts
  P_VGA_InitINT();
 800807c:	f000 f912 	bl	80082a4 <P_VGA_InitINT>

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg=DMA2_Stream5->CR;
 8008080:	4b05      	ldr	r3, [pc, #20]	; (8008098 <UB_VGA_Screen_Init+0x7c>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a02      	ldr	r2, [pc, #8]	; (8008090 <UB_VGA_Screen_Init+0x74>)
 8008086:	6093      	str	r3, [r2, #8]
}
 8008088:	bf00      	nop
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}
 8008090:	200006f0 	.word	0x200006f0
 8008094:	20000790 	.word	0x20000790
 8008098:	40026488 	.word	0x40026488

0800809c <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	4603      	mov	r3, r0
 80080a4:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 80080a6:	2300      	movs	r3, #0
 80080a8:	81bb      	strh	r3, [r7, #12]
 80080aa:	e012      	b.n	80080d2 <UB_VGA_FillScreen+0x36>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 80080ac:	2300      	movs	r3, #0
 80080ae:	81fb      	strh	r3, [r7, #14]
 80080b0:	e008      	b.n	80080c4 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp,yp,color);
 80080b2:	79fa      	ldrb	r2, [r7, #7]
 80080b4:	89b9      	ldrh	r1, [r7, #12]
 80080b6:	89fb      	ldrh	r3, [r7, #14]
 80080b8:	4618      	mov	r0, r3
 80080ba:	f000 f811 	bl	80080e0 <UB_VGA_SetPixel>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 80080be:	89fb      	ldrh	r3, [r7, #14]
 80080c0:	3301      	adds	r3, #1
 80080c2:	81fb      	strh	r3, [r7, #14]
 80080c4:	89fb      	ldrh	r3, [r7, #14]
 80080c6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80080ca:	d3f2      	bcc.n	80080b2 <UB_VGA_FillScreen+0x16>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 80080cc:	89bb      	ldrh	r3, [r7, #12]
 80080ce:	3301      	adds	r3, #1
 80080d0:	81bb      	strh	r3, [r7, #12]
 80080d2:	89bb      	ldrh	r3, [r7, #12]
 80080d4:	2bef      	cmp	r3, #239	; 0xef
 80080d6:	d9e9      	bls.n	80080ac <UB_VGA_FillScreen+0x10>
    }
  }
}
 80080d8:	bf00      	nop
 80080da:	3710      	adds	r7, #16
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}

080080e0 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b083      	sub	sp, #12
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	4603      	mov	r3, r0
 80080e8:	80fb      	strh	r3, [r7, #6]
 80080ea:	460b      	mov	r3, r1
 80080ec:	80bb      	strh	r3, [r7, #4]
 80080ee:	4613      	mov	r3, r2
 80080f0:	70fb      	strb	r3, [r7, #3]
  if(xp>=VGA_DISPLAY_X) xp=0;
 80080f2:	88fb      	ldrh	r3, [r7, #6]
 80080f4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80080f8:	d301      	bcc.n	80080fe <UB_VGA_SetPixel+0x1e>
 80080fa:	2300      	movs	r3, #0
 80080fc:	80fb      	strh	r3, [r7, #6]
  if(yp>=VGA_DISPLAY_Y) yp=0;
 80080fe:	88bb      	ldrh	r3, [r7, #4]
 8008100:	2bef      	cmp	r3, #239	; 0xef
 8008102:	d901      	bls.n	8008108 <UB_VGA_SetPixel+0x28>
 8008104:	2300      	movs	r3, #0
 8008106:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=color;
 8008108:	88ba      	ldrh	r2, [r7, #4]
 800810a:	4613      	mov	r3, r2
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	4413      	add	r3, r2
 8008110:	019b      	lsls	r3, r3, #6
 8008112:	441a      	add	r2, r3
 8008114:	88fb      	ldrh	r3, [r7, #6]
 8008116:	4413      	add	r3, r2
 8008118:	4904      	ldr	r1, [pc, #16]	; (800812c <UB_VGA_SetPixel+0x4c>)
 800811a:	78fa      	ldrb	r2, [r7, #3]
 800811c:	54ca      	strb	r2, [r1, r3]
}
 800811e:	bf00      	nop
 8008120:	370c      	adds	r7, #12
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	20000790 	.word	0x20000790

08008130 <P_VGA_InitIO>:
//--------------------------------------------------------------
// interne Funktionen
// init aller IO-Pins
//--------------------------------------------------------------
void P_VGA_InitIO(void)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
  // init RGB-Pins (PE8 - PE15)
  // as normal GPIOs
  //---------------------------------------------
 
  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8008136:	2101      	movs	r1, #1
 8008138:	2010      	movs	r0, #16
 800813a:	f7ff fa67 	bl	800760c <RCC_AHB1PeriphClockCmd>

  // Config as Digital output
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 |
 800813e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8008142:	603b      	str	r3, [r7, #0]
        GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8008144:	2301      	movs	r3, #1
 8008146:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8008148:	2300      	movs	r3, #0
 800814a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800814c:	2301      	movs	r3, #1
 800814e:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8008150:	2303      	movs	r3, #3
 8008152:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOE, &GPIO_InitStructure);
 8008154:	463b      	mov	r3, r7
 8008156:	4619      	mov	r1, r3
 8008158:	481d      	ldr	r0, [pc, #116]	; (80081d0 <P_VGA_InitIO+0xa0>)
 800815a:	f7ff f8d7 	bl	800730c <GPIO_Init>

  GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 800815e:	4b1c      	ldr	r3, [pc, #112]	; (80081d0 <P_VGA_InitIO+0xa0>)
 8008160:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8008164:	835a      	strh	r2, [r3, #26]
  // init of the H-Sync Pin (PB11)
  // using Timer2 and CH4
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8008166:	2101      	movs	r1, #1
 8008168:	2002      	movs	r0, #2
 800816a:	f7ff fa4f 	bl	800760c <RCC_AHB1PeriphClockCmd>

  // Config Pins as Digital-out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 800816e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008172:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8008174:	2302      	movs	r3, #2
 8008176:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8008178:	2303      	movs	r3, #3
 800817a:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800817c:	2300      	movs	r3, #0
 800817e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8008180:	2301      	movs	r3, #1
 8008182:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8008184:	463b      	mov	r3, r7
 8008186:	4619      	mov	r1, r3
 8008188:	4812      	ldr	r0, [pc, #72]	; (80081d4 <P_VGA_InitIO+0xa4>)
 800818a:	f7ff f8bf 	bl	800730c <GPIO_Init>

  // alternative function connect with IO
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_TIM2);
 800818e:	2201      	movs	r2, #1
 8008190:	210b      	movs	r1, #11
 8008192:	4810      	ldr	r0, [pc, #64]	; (80081d4 <P_VGA_InitIO+0xa4>)
 8008194:	f7ff f948 	bl	8007428 <GPIO_PinAFConfig>
  // init of V-Sync Pin (PB12)
  // using GPIO
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8008198:	2101      	movs	r1, #1
 800819a:	2002      	movs	r0, #2
 800819c:	f7ff fa36 	bl	800760c <RCC_AHB1PeriphClockCmd>

  // Config of the Pins as Digital out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 80081a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081a4:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80081a6:	2301      	movs	r3, #1
 80081a8:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80081aa:	2300      	movs	r3, #0
 80081ac:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80081ae:	2301      	movs	r3, #1
 80081b0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80081b2:	2303      	movs	r3, #3
 80081b4:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 80081b6:	463b      	mov	r3, r7
 80081b8:	4619      	mov	r1, r3
 80081ba:	4806      	ldr	r0, [pc, #24]	; (80081d4 <P_VGA_InitIO+0xa4>)
 80081bc:	f7ff f8a6 	bl	800730c <GPIO_Init>

  GPIOB->BSRRL = GPIO_Pin_12;
 80081c0:	4b04      	ldr	r3, [pc, #16]	; (80081d4 <P_VGA_InitIO+0xa4>)
 80081c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80081c6:	831a      	strh	r2, [r3, #24]
}
 80081c8:	bf00      	nop
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}
 80081d0:	40021000 	.word	0x40021000
 80081d4:	40020400 	.word	0x40020400

080081d8 <P_VGA_InitTIM>:
//--------------------------------------------------------------
// internal Function
// init Timer
//--------------------------------------------------------------
void P_VGA_InitTIM(void)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b088      	sub	sp, #32
 80081dc:	af00      	add	r7, sp, #0
  // init of Timer1 for
  // Pixeldata via DMA
  //---------------------------------------------

  // Clock enable
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 80081de:	2101      	movs	r1, #1
 80081e0:	2001      	movs	r0, #1
 80081e2:	f7ff fa53 	bl	800768c <RCC_APB2PeriphClockCmd>

  // Timer1 init
  TIM_TimeBaseStructure.TIM_Period =  VGA_TIM1_PERIODE;
 80081e6:	230b      	movs	r3, #11
 80081e8:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM1_PRESCALE;
 80081ea:	2300      	movs	r3, #0
 80081ec:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80081ee:	2300      	movs	r3, #0
 80081f0:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80081f2:	2300      	movs	r3, #0
 80081f4:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 80081f6:	f107 0314 	add.w	r3, r7, #20
 80081fa:	4619      	mov	r1, r3
 80081fc:	4828      	ldr	r0, [pc, #160]	; (80082a0 <P_VGA_InitTIM+0xc8>)
 80081fe:	f7ff fa65 	bl	80076cc <TIM_TimeBaseInit>
  // CH4 for HSYNC-Signal
  // CH3 for DMA Trigger start
  //---------------------------------------------

  // Clock enable
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8008202:	2101      	movs	r1, #1
 8008204:	2001      	movs	r0, #1
 8008206:	f7ff fa21 	bl	800764c <RCC_APB1PeriphClockCmd>

  // Timer2 init
  TIM_TimeBaseStructure.TIM_Period = VGA_TIM2_HSYNC_PERIODE;
 800820a:	f640 236b 	movw	r3, #2667	; 0xa6b
 800820e:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8008210:	2300      	movs	r3, #0
 8008212:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8008214:	2300      	movs	r3, #0
 8008216:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8008218:	2300      	movs	r3, #0
 800821a:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 800821c:	f107 0314 	add.w	r3, r7, #20
 8008220:	4619      	mov	r1, r3
 8008222:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008226:	f7ff fa51 	bl	80076cc <TIM_TimeBaseInit>

  // Timer2 Channel 3 ( for DMA Trigger start)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 800822a:	2360      	movs	r3, #96	; 0x60
 800822c:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800822e:	2301      	movs	r3, #1
 8008230:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HTRIGGER_START-VGA_TIM2_DMA_DELAY;
 8008232:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8008236:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8008238:	2302      	movs	r3, #2
 800823a:	81bb      	strh	r3, [r7, #12]
  TIM_OC3Init(TIM2, &TIM_OCInitStructure);
 800823c:	463b      	mov	r3, r7
 800823e:	4619      	mov	r1, r3
 8008240:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008244:	f7ff faee 	bl	8007824 <TIM_OC3Init>
  TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8008248:	2108      	movs	r1, #8
 800824a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800824e:	f7ff fbd7 	bl	8007a00 <TIM_OC3PreloadConfig>

  // Timer2 Channel 4 (for HSYNC)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8008252:	2360      	movs	r3, #96	; 0x60
 8008254:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8008256:	2301      	movs	r3, #1
 8008258:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HSYNC_IMP;
 800825a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800825e:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8008260:	2302      	movs	r3, #2
 8008262:	81bb      	strh	r3, [r7, #12]
  TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 8008264:	463b      	mov	r3, r7
 8008266:	4619      	mov	r1, r3
 8008268:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800826c:	f7ff fb60 	bl	8007930 <TIM_OC4Init>
  TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8008270:	2108      	movs	r1, #8
 8008272:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008276:	f7ff fbdf 	bl	8007a38 <TIM_OC4PreloadConfig>
  //---------------------------------------------
  // enable all Timers
  //---------------------------------------------

  // Timer1 enable
  TIM_ARRPreloadConfig(TIM1, ENABLE);
 800827a:	2101      	movs	r1, #1
 800827c:	4808      	ldr	r0, [pc, #32]	; (80082a0 <P_VGA_InitTIM+0xc8>)
 800827e:	f7ff fa91 	bl	80077a4 <TIM_ARRPreloadConfig>

  // Timer2 enable
  TIM_ARRPreloadConfig(TIM2, ENABLE);
 8008282:	2101      	movs	r1, #1
 8008284:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008288:	f7ff fa8c 	bl	80077a4 <TIM_ARRPreloadConfig>
  TIM_Cmd(TIM2, ENABLE);
 800828c:	2101      	movs	r1, #1
 800828e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008292:	f7ff faa7 	bl	80077e4 <TIM_Cmd>

}
 8008296:	bf00      	nop
 8008298:	3720      	adds	r7, #32
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	40010000 	.word	0x40010000

080082a4 <P_VGA_InitINT>:
//--------------------------------------------------------------
// internal Function
// init Interrupts
//--------------------------------------------------------------
void P_VGA_InitINT(void)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
  // init from DMA Interrupt
  // for TransferComplete Interrupt
  // DMA2, Stream5, Channel6
  //---------------------------------------------

  DMA_ITConfig(DMA2_Stream5, DMA_IT_TC, ENABLE);
 80082aa:	2201      	movs	r2, #1
 80082ac:	2110      	movs	r1, #16
 80082ae:	4812      	ldr	r0, [pc, #72]	; (80082f8 <P_VGA_InitINT+0x54>)
 80082b0:	f7fe ff6c 	bl	800718c <DMA_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream5_IRQn;
 80082b4:	2344      	movs	r3, #68	; 0x44
 80082b6:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80082b8:	2300      	movs	r3, #0
 80082ba:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80082bc:	2300      	movs	r3, #0
 80082be:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80082c0:	2301      	movs	r3, #1
 80082c2:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 80082c4:	1d3b      	adds	r3, r7, #4
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7fe fdb6 	bl	8006e38 <NVIC_Init>
  // init of Timer2 Interrupt
  // for HSync-Counter using Update
  // for DMA Trigger START using CH3
  //---------------------------------------------

  TIM_ITConfig(TIM2,TIM_IT_CC3,ENABLE);
 80082cc:	2201      	movs	r2, #1
 80082ce:	2108      	movs	r1, #8
 80082d0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80082d4:	f7ff fbce 	bl	8007a74 <TIM_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80082d8:	231c      	movs	r3, #28
 80082da:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80082dc:	2300      	movs	r3, #0
 80082de:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80082e0:	2300      	movs	r3, #0
 80082e2:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80082e4:	2301      	movs	r3, #1
 80082e6:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 80082e8:	1d3b      	adds	r3, r7, #4
 80082ea:	4618      	mov	r0, r3
 80082ec:	f7fe fda4 	bl	8006e38 <NVIC_Init>
}
 80082f0:	bf00      	nop
 80082f2:	3708      	adds	r7, #8
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	40026488 	.word	0x40026488

080082fc <P_VGA_InitDMA>:
//--------------------------------------------------------------
// internal Function
// init DMA
//--------------------------------------------------------------
void P_VGA_InitDMA(void)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b090      	sub	sp, #64	; 0x40
 8008300:	af00      	add	r7, sp, #0
  // (look at page 217 of the Ref Manual)
  // DMA=2, Channel=6, Stream=5
  //---------------------------------------------

  // Clock Enable (DMA)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 8008302:	2101      	movs	r1, #1
 8008304:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8008308:	f7ff f980 	bl	800760c <RCC_AHB1PeriphClockCmd>

  // DMA init (DMA2, Channel6, Stream5)
  DMA_Cmd(DMA2_Stream5, DISABLE);
 800830c:	2100      	movs	r1, #0
 800830e:	481b      	ldr	r0, [pc, #108]	; (800837c <P_VGA_InitDMA+0x80>)
 8008310:	f7fe ff20 	bl	8007154 <DMA_Cmd>
  DMA_DeInit(DMA2_Stream5);
 8008314:	4819      	ldr	r0, [pc, #100]	; (800837c <P_VGA_InitDMA+0x80>)
 8008316:	f7fe fdf1 	bl	8006efc <DMA_DeInit>
  DMA_InitStructure.DMA_Channel = DMA_Channel_6;
 800831a:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800831e:	607b      	str	r3, [r7, #4]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)VGA_GPIOE_ODR_ADDRESS;
 8008320:	4b17      	ldr	r3, [pc, #92]	; (8008380 <P_VGA_InitDMA+0x84>)
 8008322:	60bb      	str	r3, [r7, #8]
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&VGA_RAM1;
 8008324:	4b17      	ldr	r3, [pc, #92]	; (8008384 <P_VGA_InitDMA+0x88>)
 8008326:	60fb      	str	r3, [r7, #12]
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8008328:	2340      	movs	r3, #64	; 0x40
 800832a:	613b      	str	r3, [r7, #16]
  DMA_InitStructure.DMA_BufferSize = VGA_DISPLAY_X+1;
 800832c:	f240 1341 	movw	r3, #321	; 0x141
 8008330:	617b      	str	r3, [r7, #20]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8008332:	2300      	movs	r3, #0
 8008334:	61bb      	str	r3, [r7, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8008336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800833a:	61fb      	str	r3, [r7, #28]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800833c:	2300      	movs	r3, #0
 800833e:	623b      	str	r3, [r7, #32]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8008340:	2300      	movs	r3, #0
 8008342:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8008344:	2300      	movs	r3, #0
 8008346:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8008348:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800834c:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 800834e:	2300      	movs	r3, #0
 8008350:	633b      	str	r3, [r7, #48]	; 0x30
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 8008352:	2301      	movs	r3, #1
 8008354:	637b      	str	r3, [r7, #52]	; 0x34
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8008356:	2300      	movs	r3, #0
 8008358:	63bb      	str	r3, [r7, #56]	; 0x38
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800835a:	2300      	movs	r3, #0
 800835c:	63fb      	str	r3, [r7, #60]	; 0x3c
  DMA_Init(DMA2_Stream5, &DMA_InitStructure);
 800835e:	1d3b      	adds	r3, r7, #4
 8008360:	4619      	mov	r1, r3
 8008362:	4806      	ldr	r0, [pc, #24]	; (800837c <P_VGA_InitDMA+0x80>)
 8008364:	f7fe fe9e 	bl	80070a4 <DMA_Init>

  // DMA-Timer1 enable
  TIM_DMACmd(TIM1,TIM_DMA_Update,ENABLE);
 8008368:	2201      	movs	r2, #1
 800836a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800836e:	4806      	ldr	r0, [pc, #24]	; (8008388 <P_VGA_InitDMA+0x8c>)
 8008370:	f7ff fbb5 	bl	8007ade <TIM_DMACmd>
}
 8008374:	bf00      	nop
 8008376:	3740      	adds	r7, #64	; 0x40
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	40026488 	.word	0x40026488
 8008380:	40021015 	.word	0x40021015
 8008384:	20000790 	.word	0x20000790
 8008388:	40010000 	.word	0x40010000

0800838c <TIM2_IRQHandler>:
//
//   CC3-Interrupt    -> starts from DMA
// Watch it.. higher troughput when interrupt flag is left alone
//--------------------------------------------------------------
void TIM2_IRQHandler(void)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	af00      	add	r7, sp, #0

  // Interrupt of Timer2 CH3 occurred (for Trigger start)
  TIM_ClearITPendingBit(TIM2, TIM_IT_CC3);
 8008390:	2108      	movs	r1, #8
 8008392:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008396:	f7ff fb91 	bl	8007abc <TIM_ClearITPendingBit>

  VGA.hsync_cnt++;
 800839a:	4b26      	ldr	r3, [pc, #152]	; (8008434 <TIM2_IRQHandler+0xa8>)
 800839c:	881b      	ldrh	r3, [r3, #0]
 800839e:	3301      	adds	r3, #1
 80083a0:	b29a      	uxth	r2, r3
 80083a2:	4b24      	ldr	r3, [pc, #144]	; (8008434 <TIM2_IRQHandler+0xa8>)
 80083a4:	801a      	strh	r2, [r3, #0]
  if(VGA.hsync_cnt>=VGA_VSYNC_PERIODE) {
 80083a6:	4b23      	ldr	r3, [pc, #140]	; (8008434 <TIM2_IRQHandler+0xa8>)
 80083a8:	881b      	ldrh	r3, [r3, #0]
 80083aa:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 80083ae:	d905      	bls.n	80083bc <TIM2_IRQHandler+0x30>
    // -----------
    VGA.hsync_cnt=0;
 80083b0:	4b20      	ldr	r3, [pc, #128]	; (8008434 <TIM2_IRQHandler+0xa8>)
 80083b2:	2200      	movs	r2, #0
 80083b4:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr=(uint32_t)(&VGA_RAM1[0]);
 80083b6:	4a20      	ldr	r2, [pc, #128]	; (8008438 <TIM2_IRQHandler+0xac>)
 80083b8:	4b1e      	ldr	r3, [pc, #120]	; (8008434 <TIM2_IRQHandler+0xa8>)
 80083ba:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  if(VGA.hsync_cnt<VGA_VSYNC_IMP) {
 80083bc:	4b1d      	ldr	r3, [pc, #116]	; (8008434 <TIM2_IRQHandler+0xa8>)
 80083be:	881b      	ldrh	r3, [r3, #0]
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	d804      	bhi.n	80083ce <TIM2_IRQHandler+0x42>
    // HSync low
    GPIOB->BSRRH = GPIO_Pin_12;
 80083c4:	4b1d      	ldr	r3, [pc, #116]	; (800843c <TIM2_IRQHandler+0xb0>)
 80083c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80083ca:	835a      	strh	r2, [r3, #26]
 80083cc:	e003      	b.n	80083d6 <TIM2_IRQHandler+0x4a>
  }
  else {
    // HSync High
    GPIOB->BSRRL = GPIO_Pin_12;
 80083ce:	4b1b      	ldr	r3, [pc, #108]	; (800843c <TIM2_IRQHandler+0xb0>)
 80083d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80083d4:	831a      	strh	r2, [r3, #24]
  }

  // Test for DMA start
  if((VGA.hsync_cnt>=VGA_VSYNC_BILD_START) && (VGA.hsync_cnt<=VGA_VSYNC_BILD_STOP)) {
 80083d6:	4b17      	ldr	r3, [pc, #92]	; (8008434 <TIM2_IRQHandler+0xa8>)
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	2b23      	cmp	r3, #35	; 0x23
 80083dc:	d927      	bls.n	800842e <TIM2_IRQHandler+0xa2>
 80083de:	4b15      	ldr	r3, [pc, #84]	; (8008434 <TIM2_IRQHandler+0xa8>)
 80083e0:	881b      	ldrh	r3, [r3, #0]
 80083e2:	f240 2202 	movw	r2, #514	; 0x202
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d821      	bhi.n	800842e <TIM2_IRQHandler+0xa2>
    // after FP start => DMA Transfer

    // DMA2 init
	DMA2_Stream5->CR=VGA.dma2_cr_reg;
 80083ea:	4a15      	ldr	r2, [pc, #84]	; (8008440 <TIM2_IRQHandler+0xb4>)
 80083ec:	4b11      	ldr	r3, [pc, #68]	; (8008434 <TIM2_IRQHandler+0xa8>)
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR=VGA.start_adr;
 80083f2:	4a13      	ldr	r2, [pc, #76]	; (8008440 <TIM2_IRQHandler+0xb4>)
 80083f4:	4b0f      	ldr	r3, [pc, #60]	; (8008434 <TIM2_IRQHandler+0xa8>)
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1|=TIM_CR1_CEN;
 80083fa:	4a12      	ldr	r2, [pc, #72]	; (8008444 <TIM2_IRQHandler+0xb8>)
 80083fc:	4b11      	ldr	r3, [pc, #68]	; (8008444 <TIM2_IRQHandler+0xb8>)
 80083fe:	881b      	ldrh	r3, [r3, #0]
 8008400:	b29b      	uxth	r3, r3
 8008402:	f043 0301 	orr.w	r3, r3, #1
 8008406:	b29b      	uxth	r3, r3
 8008408:	8013      	strh	r3, [r2, #0]
    // DMA2 enable
    DMA2_Stream5->CR|=DMA_SxCR_EN;
 800840a:	4a0d      	ldr	r2, [pc, #52]	; (8008440 <TIM2_IRQHandler+0xb4>)
 800840c:	4b0c      	ldr	r3, [pc, #48]	; (8008440 <TIM2_IRQHandler+0xb4>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f043 0301 	orr.w	r3, r3, #1
 8008414:	6013      	str	r3, [r2, #0]

    // Test Adrespointer for high
    if((VGA.hsync_cnt & 0x01)!=0) {
 8008416:	4b07      	ldr	r3, [pc, #28]	; (8008434 <TIM2_IRQHandler+0xa8>)
 8008418:	881b      	ldrh	r3, [r3, #0]
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	2b00      	cmp	r3, #0
 8008420:	d005      	beq.n	800842e <TIM2_IRQHandler+0xa2>
      // inc after Hsync
      VGA.start_adr+=(VGA_DISPLAY_X+1);
 8008422:	4b04      	ldr	r3, [pc, #16]	; (8008434 <TIM2_IRQHandler+0xa8>)
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	f203 1341 	addw	r3, r3, #321	; 0x141
 800842a:	4a02      	ldr	r2, [pc, #8]	; (8008434 <TIM2_IRQHandler+0xa8>)
 800842c:	6053      	str	r3, [r2, #4]
    }
  }
}
 800842e:	bf00      	nop
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	200006f0 	.word	0x200006f0
 8008438:	20000790 	.word	0x20000790
 800843c:	40020400 	.word	0x40020400
 8008440:	40026488 	.word	0x40026488
 8008444:	40010000 	.word	0x40010000

08008448 <DMA2_Stream5_IRQHandler>:
//   after TransferCompleteInterrupt -> stop DMA
//
// still a bit buggy
//--------------------------------------------------------------
void DMA2_Stream5_IRQHandler(void)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	af00      	add	r7, sp, #0
  if(DMA_GetITStatus(DMA2_Stream5, DMA_IT_TCIF5))
 800844c:	490d      	ldr	r1, [pc, #52]	; (8008484 <DMA2_Stream5_IRQHandler+0x3c>)
 800844e:	480e      	ldr	r0, [pc, #56]	; (8008488 <DMA2_Stream5_IRQHandler+0x40>)
 8008450:	f7fe fed6 	bl	8007200 <DMA_GetITStatus>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d012      	beq.n	8008480 <DMA2_Stream5_IRQHandler+0x38>
  {
    // TransferInterruptComplete Interrupt from DMA2
    DMA_ClearITPendingBit(DMA2_Stream5, DMA_IT_TCIF5);
 800845a:	490a      	ldr	r1, [pc, #40]	; (8008484 <DMA2_Stream5_IRQHandler+0x3c>)
 800845c:	480a      	ldr	r0, [pc, #40]	; (8008488 <DMA2_Stream5_IRQHandler+0x40>)
 800845e:	f7fe ff27 	bl	80072b0 <DMA_ClearITPendingBit>
    // stop after all pixels => DMA Transfer stop

    // Timer1 stop
    TIM1->CR1&=~TIM_CR1_CEN;
 8008462:	4a0a      	ldr	r2, [pc, #40]	; (800848c <DMA2_Stream5_IRQHandler+0x44>)
 8008464:	4b09      	ldr	r3, [pc, #36]	; (800848c <DMA2_Stream5_IRQHandler+0x44>)
 8008466:	881b      	ldrh	r3, [r3, #0]
 8008468:	b29b      	uxth	r3, r3
 800846a:	f023 0301 	bic.w	r3, r3, #1
 800846e:	b29b      	uxth	r3, r3
 8008470:	8013      	strh	r3, [r2, #0]
    // DMA2 disable
    DMA2_Stream5->CR=0;
 8008472:	4b05      	ldr	r3, [pc, #20]	; (8008488 <DMA2_Stream5_IRQHandler+0x40>)
 8008474:	2200      	movs	r2, #0
 8008476:	601a      	str	r2, [r3, #0]
    // switch on black
    GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 8008478:	4b05      	ldr	r3, [pc, #20]	; (8008490 <DMA2_Stream5_IRQHandler+0x48>)
 800847a:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 800847e:	835a      	strh	r2, [r3, #26]
  }
}
 8008480:	bf00      	nop
 8008482:	bd80      	pop	{r7, pc}
 8008484:	20008800 	.word	0x20008800
 8008488:	40026488 	.word	0x40026488
 800848c:	40010000 	.word	0x40010000
 8008490:	40021000 	.word	0x40021000

08008494 <UART_init>:

char string[100];
int charcounter = 0;

void UART_init(void)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b086      	sub	sp, #24
 8008498:	af00      	add	r7, sp, #0

  /* --------------------------- System Clocks Configuration -----------------*/
  /* USART2 clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 800849a:	2101      	movs	r1, #1
 800849c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80084a0:	f7ff f8d4 	bl	800764c <RCC_APB1PeriphClockCmd>

  /* GPIOA clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80084a4:	2101      	movs	r1, #1
 80084a6:	2001      	movs	r0, #1
 80084a8:	f7ff f8b0 	bl	800760c <RCC_AHB1PeriphClockCmd>

  GPIO_InitTypeDef GPIO_InitStructure;

  /*-------------------------- GPIO Configuration ----------------------------*/
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 80084ac:	230c      	movs	r3, #12
 80084ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80084b0:	2302      	movs	r3, #2
 80084b2:	753b      	strb	r3, [r7, #20]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80084b4:	2300      	movs	r3, #0
 80084b6:	75bb      	strb	r3, [r7, #22]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80084b8:	2301      	movs	r3, #1
 80084ba:	75fb      	strb	r3, [r7, #23]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80084bc:	2302      	movs	r3, #2
 80084be:	757b      	strb	r3, [r7, #21]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 80084c0:	f107 0310 	add.w	r3, r7, #16
 80084c4:	4619      	mov	r1, r3
 80084c6:	4816      	ldr	r0, [pc, #88]	; (8008520 <UART_init+0x8c>)
 80084c8:	f7fe ff20 	bl	800730c <GPIO_Init>

  /* Connect USART pins to AF */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);   // USART2_TX
 80084cc:	2207      	movs	r2, #7
 80084ce:	2102      	movs	r1, #2
 80084d0:	4813      	ldr	r0, [pc, #76]	; (8008520 <UART_init+0x8c>)
 80084d2:	f7fe ffa9 	bl	8007428 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);  // USART2_RX
 80084d6:	2207      	movs	r2, #7
 80084d8:	2103      	movs	r1, #3
 80084da:	4811      	ldr	r0, [pc, #68]	; (8008520 <UART_init+0x8c>)
 80084dc:	f7fe ffa4 	bl	8007428 <GPIO_PinAFConfig>
      - One Stop Bit
      - No parity
      - Hardware flow control disabled (RTS and CTS signals)
      - Receive and transmit enabled
*/
USART_InitStructure.USART_BaudRate = 115200;
 80084e0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80084e4:	603b      	str	r3, [r7, #0]
USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80084e6:	2300      	movs	r3, #0
 80084e8:	80bb      	strh	r3, [r7, #4]
USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80084ea:	2300      	movs	r3, #0
 80084ec:	80fb      	strh	r3, [r7, #6]
USART_InitStructure.USART_Parity = USART_Parity_No;
 80084ee:	2300      	movs	r3, #0
 80084f0:	813b      	strh	r3, [r7, #8]
USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80084f2:	2300      	movs	r3, #0
 80084f4:	81bb      	strh	r3, [r7, #12]

USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80084f6:	230c      	movs	r3, #12
 80084f8:	817b      	strh	r3, [r7, #10]

USART_Init(USART2, &USART_InitStructure);
 80084fa:	463b      	mov	r3, r7
 80084fc:	4619      	mov	r1, r3
 80084fe:	4809      	ldr	r0, [pc, #36]	; (8008524 <UART_init+0x90>)
 8008500:	f7ff fb12 	bl	8007b28 <USART_Init>
USART_ITConfig(USART2,USART_IT_RXNE,ENABLE);
 8008504:	2201      	movs	r2, #1
 8008506:	f240 5125 	movw	r1, #1317	; 0x525
 800850a:	4806      	ldr	r0, [pc, #24]	; (8008524 <UART_init+0x90>)
 800850c:	f7ff fbf8 	bl	8007d00 <USART_ITConfig>

USART_Cmd(USART2, ENABLE);
 8008510:	2101      	movs	r1, #1
 8008512:	4804      	ldr	r0, [pc, #16]	; (8008524 <UART_init+0x90>)
 8008514:	f7ff fbc2 	bl	8007c9c <USART_Cmd>

}
 8008518:	bf00      	nop
 800851a:	3718      	adds	r7, #24
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}
 8008520:	40020000 	.word	0x40020000
 8008524:	40004400 	.word	0x40004400

08008528 <UART_putchar>:

void UART_putchar(char c)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	4603      	mov	r3, r0
 8008530:	71fb      	strb	r3, [r7, #7]
		while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET); // Wait for Empty
 8008532:	bf00      	nop
 8008534:	2180      	movs	r1, #128	; 0x80
 8008536:	4808      	ldr	r0, [pc, #32]	; (8008558 <UART_putchar+0x30>)
 8008538:	f7ff fc2a 	bl	8007d90 <USART_GetFlagStatus>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d0f8      	beq.n	8008534 <UART_putchar+0xc>
		USART_SendData(USART2, c);
 8008542:	79fb      	ldrb	r3, [r7, #7]
 8008544:	b29b      	uxth	r3, r3
 8008546:	4619      	mov	r1, r3
 8008548:	4803      	ldr	r0, [pc, #12]	; (8008558 <UART_putchar+0x30>)
 800854a:	f7ff fbc7 	bl	8007cdc <USART_SendData>

}
 800854e:	bf00      	nop
 8008550:	3708      	adds	r7, #8
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	40004400 	.word	0x40004400

0800855c <UART_puts>:

void UART_puts(char *s)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
	volatile unsigned int i;
	for (i=0; s[i]; i++)
 8008564:	2300      	movs	r3, #0
 8008566:	60fb      	str	r3, [r7, #12]
 8008568:	e009      	b.n	800857e <UART_puts+0x22>
	{
		UART_putchar(s[i]);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	4413      	add	r3, r2
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	4618      	mov	r0, r3
 8008574:	f7ff ffd8 	bl	8008528 <UART_putchar>
	for (i=0; s[i]; i++)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	3301      	adds	r3, #1
 800857c:	60fb      	str	r3, [r7, #12]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	4413      	add	r3, r2
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d1ef      	bne.n	800856a <UART_puts+0xe>
		//while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET); // Wait for Empty
		//USART_SendData(USART2, s[i]);
	}
}
 800858a:	bf00      	nop
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
	...

08008594 <USART2_IRQHandler>:
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
}

void USART2_IRQHandler(void)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b082      	sub	sp, #8
 8008598:	af00      	add	r7, sp, #0
	// check if the USART2 receive interrupt flag was set
	if( USART_GetITStatus(USART2, USART_IT_RXNE))
 800859a:	f240 5125 	movw	r1, #1317	; 0x525
 800859e:	4827      	ldr	r0, [pc, #156]	; (800863c <USART2_IRQHandler+0xa8>)
 80085a0:	f7ff fc12 	bl	8007dc8 <USART_GetITStatus>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d044      	beq.n	8008634 <USART2_IRQHandler+0xa0>
	{
		USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 80085aa:	f240 5125 	movw	r1, #1317	; 0x525
 80085ae:	4823      	ldr	r0, [pc, #140]	; (800863c <USART2_IRQHandler+0xa8>)
 80085b0:	f7ff fc65 	bl	8007e7e <USART_ClearITPendingBit>
		int i;
		char c = USART2->DR & 0xFF;
 80085b4:	4b21      	ldr	r3, [pc, #132]	; (800863c <USART2_IRQHandler+0xa8>)
 80085b6:	889b      	ldrh	r3, [r3, #4]
 80085b8:	b29b      	uxth	r3, r3
 80085ba:	70fb      	strb	r3, [r7, #3]
//		LCD_XY(10,1);
//		LCD_put("UART:   ");
//		LCD_XY(15,1);
//		LCD_putchar(c);

		if(c > 64 && c < 91)
 80085bc:	78fb      	ldrb	r3, [r7, #3]
 80085be:	2b40      	cmp	r3, #64	; 0x40
 80085c0:	d905      	bls.n	80085ce <USART2_IRQHandler+0x3a>
 80085c2:	78fb      	ldrb	r3, [r7, #3]
 80085c4:	2b5a      	cmp	r3, #90	; 0x5a
 80085c6:	d802      	bhi.n	80085ce <USART2_IRQHandler+0x3a>
			c += 32;
 80085c8:	78fb      	ldrb	r3, [r7, #3]
 80085ca:	3320      	adds	r3, #32
 80085cc:	70fb      	strb	r3, [r7, #3]
		if(c <= 13)
 80085ce:	78fb      	ldrb	r3, [r7, #3]
 80085d0:	2b0d      	cmp	r3, #13
 80085d2:	d81d      	bhi.n	8008610 <USART2_IRQHandler+0x7c>
		{
			for(i=0;i<charcounter;i++)
 80085d4:	2300      	movs	r3, #0
 80085d6:	607b      	str	r3, [r7, #4]
 80085d8:	e00b      	b.n	80085f2 <USART2_IRQHandler+0x5e>
			{
				USART_SendData(USART2, string[i]); // Echo Char
 80085da:	4a19      	ldr	r2, [pc, #100]	; (8008640 <USART2_IRQHandler+0xac>)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	4413      	add	r3, r2
 80085e0:	781b      	ldrb	r3, [r3, #0]
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	4619      	mov	r1, r3
 80085e6:	4815      	ldr	r0, [pc, #84]	; (800863c <USART2_IRQHandler+0xa8>)
 80085e8:	f7ff fb78 	bl	8007cdc <USART_SendData>
			for(i=0;i<charcounter;i++)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	3301      	adds	r3, #1
 80085f0:	607b      	str	r3, [r7, #4]
 80085f2:	4b14      	ldr	r3, [pc, #80]	; (8008644 <USART2_IRQHandler+0xb0>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	dbee      	blt.n	80085da <USART2_IRQHandler+0x46>
			}
			charcounter = 0;
 80085fc:	4b11      	ldr	r3, [pc, #68]	; (8008644 <USART2_IRQHandler+0xb0>)
 80085fe:	2200      	movs	r2, #0
 8008600:	601a      	str	r2, [r3, #0]
			USART_SendData(USART2, c); // Echo Char
 8008602:	78fb      	ldrb	r3, [r7, #3]
 8008604:	b29b      	uxth	r3, r3
 8008606:	4619      	mov	r1, r3
 8008608:	480c      	ldr	r0, [pc, #48]	; (800863c <USART2_IRQHandler+0xa8>)
 800860a:	f7ff fb67 	bl	8007cdc <USART_SendData>
 800860e:	e009      	b.n	8008624 <USART2_IRQHandler+0x90>
		}
		else
		{
			string[charcounter] = c;
 8008610:	4b0c      	ldr	r3, [pc, #48]	; (8008644 <USART2_IRQHandler+0xb0>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	490a      	ldr	r1, [pc, #40]	; (8008640 <USART2_IRQHandler+0xac>)
 8008616:	78fa      	ldrb	r2, [r7, #3]
 8008618:	54ca      	strb	r2, [r1, r3]
			charcounter++;
 800861a:	4b0a      	ldr	r3, [pc, #40]	; (8008644 <USART2_IRQHandler+0xb0>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	3301      	adds	r3, #1
 8008620:	4a08      	ldr	r2, [pc, #32]	; (8008644 <USART2_IRQHandler+0xb0>)
 8008622:	6013      	str	r3, [r2, #0]
		}


		while (USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET); // Wait for Empty
 8008624:	bf00      	nop
 8008626:	2140      	movs	r1, #64	; 0x40
 8008628:	4804      	ldr	r0, [pc, #16]	; (800863c <USART2_IRQHandler+0xa8>)
 800862a:	f7ff fbb1 	bl	8007d90 <USART_GetFlagStatus>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d0f8      	beq.n	8008626 <USART2_IRQHandler+0x92>

	}
}
 8008634:	bf00      	nop
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	40004400 	.word	0x40004400
 8008640:	2001389c 	.word	0x2001389c
 8008644:	2000069c 	.word	0x2000069c

08008648 <UART_get>:

// Ontvang een karakter via de UART
// niet echt nodig als routine maar als wrapper voor compatabiliteit. Let op geen -1 als er geen char is ontvangen!

char UART_get(void)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b082      	sub	sp, #8
 800864c:	af00      	add	r7, sp, #0
    char uart_char = -1;
 800864e:	23ff      	movs	r3, #255	; 0xff
 8008650:	71fb      	strb	r3, [r7, #7]
    if (USART_GetFlagStatus(USART2, USART_FLAG_RXNE)== SET)  // check for data available
 8008652:	2120      	movs	r1, #32
 8008654:	4807      	ldr	r0, [pc, #28]	; (8008674 <UART_get+0x2c>)
 8008656:	f7ff fb9b 	bl	8007d90 <USART_GetFlagStatus>
 800865a:	4603      	mov	r3, r0
 800865c:	2b01      	cmp	r3, #1
 800865e:	d103      	bne.n	8008668 <UART_get+0x20>
    	 uart_char= USART2->DR & 0xFF; // and read the data from peripheral
 8008660:	4b04      	ldr	r3, [pc, #16]	; (8008674 <UART_get+0x2c>)
 8008662:	889b      	ldrh	r3, [r3, #4]
 8008664:	b29b      	uxth	r3, r3
 8008666:	71fb      	strb	r3, [r7, #7]
    return uart_char;
 8008668:	79fb      	ldrb	r3, [r7, #7]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	40004400 	.word	0x40004400

08008678 <UART_gets>:
// args: char *readbuffer
//       int   echo, when TRUE, send read-char to UART
// remark: ARM sends -1 if buffer is empty
//         LF is cleared if set in terminal-program
void UART_gets(char *s, int echo)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
	while (TRUE)
	{
	 	*s = UART_get();
 8008682:	f7ff ffe1 	bl	8008648 <UART_get>
 8008686:	4603      	mov	r3, r0
 8008688:	461a      	mov	r2, r3
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	701a      	strb	r2, [r3, #0]

	 	if (*s==-1)             // check for data available
	 		continue;

	 	if (*s==0xff || *s==LF) // if no data or LF, continue
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	2bff      	cmp	r3, #255	; 0xff
 8008694:	d017      	beq.n	80086c6 <UART_gets+0x4e>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	781b      	ldrb	r3, [r3, #0]
 800869a:	2b0a      	cmp	r3, #10
 800869c:	d013      	beq.n	80086c6 <UART_gets+0x4e>
			continue;


		if (echo)              // if output-flag set
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d004      	beq.n	80086ae <UART_gets+0x36>
			UART_putchar(*s);  // to read what u entered
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	4618      	mov	r0, r3
 80086aa:	f7ff ff3d 	bl	8008528 <UART_putchar>


		if (*s==CR)            // if enter pressed
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	2b0d      	cmp	r3, #13
 80086b4:	d103      	bne.n	80086be <UART_gets+0x46>
		{
			*s = '\0';         // ignore char and close string
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	701a      	strb	r2, [r3, #0]
		    return;            // buf ready, exit loop
 80086bc:	e005      	b.n	80086ca <UART_gets+0x52>
		}
		s++;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	3301      	adds	r3, #1
 80086c2:	607b      	str	r3, [r7, #4]
 80086c4:	e7dd      	b.n	8008682 <UART_gets+0xa>
			continue;
 80086c6:	bf00      	nop
	 	*s = UART_get();
 80086c8:	e7db      	b.n	8008682 <UART_gets+0xa>
	}
}
 80086ca:	3708      	adds	r7, #8
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd80      	pop	{r7, pc}

080086d0 <IO_Init>:
 *      Author: Milan Dammingh
 */
#include "IO_layer.h"

void IO_Init()
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	af00      	add	r7, sp, #0
	UB_VGA_Screen_Init(); // Init VGA-Screen
 80086d4:	f7ff fca2 	bl	800801c <UB_VGA_Screen_Init>
	UART_init();
 80086d8:	f7ff fedc 	bl	8008494 <UART_init>
	DELAY_init();
 80086dc:	f7ff fbec 	bl	8007eb8 <DELAY_init>
}
 80086e0:	bf00      	nop
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <input_uart>:
 *      Author: Milan Dammingh
 */
#include "front_layer.h"

void input_uart()
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	af00      	add	r7, sp, #0
	UART_gets(parameters,TRUE);		// Get data from terminal
 80086e8:	2101      	movs	r1, #1
 80086ea:	480a      	ldr	r0, [pc, #40]	; (8008714 <input_uart+0x30>)
 80086ec:	f7ff ffc4 	bl	8008678 <UART_gets>
	fl_token = strtok (parameters,",");	// Put first argument in fl_token
 80086f0:	4909      	ldr	r1, [pc, #36]	; (8008718 <input_uart+0x34>)
 80086f2:	4808      	ldr	r0, [pc, #32]	; (8008714 <input_uart+0x30>)
 80086f4:	f000 ff2a 	bl	800954c <strtok>
 80086f8:	4602      	mov	r2, r0
 80086fa:	4b08      	ldr	r3, [pc, #32]	; (800871c <input_uart+0x38>)
 80086fc:	601a      	str	r2, [r3, #0]
	strcpy(func_input,fl_token);
 80086fe:	4b07      	ldr	r3, [pc, #28]	; (800871c <input_uart+0x38>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4619      	mov	r1, r3
 8008704:	4806      	ldr	r0, [pc, #24]	; (8008720 <input_uart+0x3c>)
 8008706:	f000 ff19 	bl	800953c <strcpy>

	split_string(parameters);
 800870a:	4802      	ldr	r0, [pc, #8]	; (8008714 <input_uart+0x30>)
 800870c:	f000 f80a 	bl	8008724 <split_string>
}
 8008710:	bf00      	nop
 8008712:	bd80      	pop	{r7, pc}
 8008714:	20013918 	.word	0x20013918
 8008718:	08009e2c 	.word	0x08009e2c
 800871c:	20013900 	.word	0x20013900
 8008720:	20013904 	.word	0x20013904

08008724 <split_string>:

void split_string()
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
	int fill;
	ll_token = strtok (parameters,",");	// Put first argument in ll_token
 800872a:	49ab      	ldr	r1, [pc, #684]	; (80089d8 <split_string+0x2b4>)
 800872c:	48ab      	ldr	r0, [pc, #684]	; (80089dc <split_string+0x2b8>)
 800872e:	f000 ff0d 	bl	800954c <strtok>
 8008732:	4602      	mov	r2, r0
 8008734:	4baa      	ldr	r3, [pc, #680]	; (80089e0 <split_string+0x2bc>)
 8008736:	601a      	str	r2, [r3, #0]
	strcpy(functions,ll_token);			// String compare to functions
 8008738:	4ba9      	ldr	r3, [pc, #676]	; (80089e0 <split_string+0x2bc>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4619      	mov	r1, r3
 800873e:	48a9      	ldr	r0, [pc, #676]	; (80089e4 <split_string+0x2c0>)
 8008740:	f000 fefc 	bl	800953c <strcpy>

	if(strcmp(functions, "clearscherm")==0)	// Function is clearscreen
 8008744:	49a8      	ldr	r1, [pc, #672]	; (80089e8 <split_string+0x2c4>)
 8008746:	48a7      	ldr	r0, [pc, #668]	; (80089e4 <split_string+0x2c0>)
 8008748:	f7f7 fd3e 	bl	80001c8 <strcmp>
 800874c:	4603      	mov	r3, r0
 800874e:	2b00      	cmp	r3, #0
 8008750:	d127      	bne.n	80087a2 <split_string+0x7e>
	{
		fill=0;
 8008752:	2300      	movs	r3, #0
 8008754:	607b      	str	r3, [r7, #4]
		while(ll_token != NULL)				// While something in ll_token execute code below
 8008756:	e01d      	b.n	8008794 <split_string+0x70>
		{
		  switch(fill)						// Fill char string with each parameter
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d002      	beq.n	8008764 <split_string+0x40>
 800875e:	2b01      	cmp	r3, #1
 8008760:	d007      	beq.n	8008772 <split_string+0x4e>
 8008762:	e00d      	b.n	8008780 <split_string+0x5c>
		  {
			case 0:
			  strcpy(clearscrn_args.function,ll_token);
 8008764:	4b9e      	ldr	r3, [pc, #632]	; (80089e0 <split_string+0x2bc>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4619      	mov	r1, r3
 800876a:	48a0      	ldr	r0, [pc, #640]	; (80089ec <split_string+0x2c8>)
 800876c:	f000 fee6 	bl	800953c <strcpy>
			  break;
 8008770:	e006      	b.n	8008780 <split_string+0x5c>
			case 1:
			  strcpy(clearscrn_args.color,ll_token);
 8008772:	4b9b      	ldr	r3, [pc, #620]	; (80089e0 <split_string+0x2bc>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4619      	mov	r1, r3
 8008778:	489d      	ldr	r0, [pc, #628]	; (80089f0 <split_string+0x2cc>)
 800877a:	f000 fedf 	bl	800953c <strcpy>
			  break;
 800877e:	bf00      	nop
		  }
		  fill++;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	3301      	adds	r3, #1
 8008784:	607b      	str	r3, [r7, #4]
		  ll_token = strtok (NULL, ",");
 8008786:	4994      	ldr	r1, [pc, #592]	; (80089d8 <split_string+0x2b4>)
 8008788:	2000      	movs	r0, #0
 800878a:	f000 fedf 	bl	800954c <strtok>
 800878e:	4602      	mov	r2, r0
 8008790:	4b93      	ldr	r3, [pc, #588]	; (80089e0 <split_string+0x2bc>)
 8008792:	601a      	str	r2, [r3, #0]
		while(ll_token != NULL)				// While something in ll_token execute code below
 8008794:	4b92      	ldr	r3, [pc, #584]	; (80089e0 <split_string+0x2bc>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1dd      	bne.n	8008758 <split_string+0x34>
		}
		func_chooser();
 800879c:	f000 fb6a 	bl	8008e74 <func_chooser>
			fill++;
			ll_token = strtok (NULL, ",");
		}
		func_chooser();
	}
}
 80087a0:	e277      	b.n	8008c92 <split_string+0x56e>
	else if(strcmp(functions, "lijn")==0)
 80087a2:	4994      	ldr	r1, [pc, #592]	; (80089f4 <split_string+0x2d0>)
 80087a4:	488f      	ldr	r0, [pc, #572]	; (80089e4 <split_string+0x2c0>)
 80087a6:	f7f7 fd0f 	bl	80001c8 <strcmp>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d159      	bne.n	8008864 <split_string+0x140>
		fill=0;
 80087b0:	2300      	movs	r3, #0
 80087b2:	607b      	str	r3, [r7, #4]
		while(ll_token!= NULL)
 80087b4:	e04f      	b.n	8008856 <split_string+0x132>
			switch(fill)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	2b06      	cmp	r3, #6
 80087ba:	d842      	bhi.n	8008842 <split_string+0x11e>
 80087bc:	a201      	add	r2, pc, #4	; (adr r2, 80087c4 <split_string+0xa0>)
 80087be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c2:	bf00      	nop
 80087c4:	080087e1 	.word	0x080087e1
 80087c8:	080087ef 	.word	0x080087ef
 80087cc:	080087fd 	.word	0x080087fd
 80087d0:	0800880b 	.word	0x0800880b
 80087d4:	08008819 	.word	0x08008819
 80087d8:	08008827 	.word	0x08008827
 80087dc:	08008835 	.word	0x08008835
					strcpy(line_args.function,ll_token);
 80087e0:	4b7f      	ldr	r3, [pc, #508]	; (80089e0 <split_string+0x2bc>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4619      	mov	r1, r3
 80087e6:	4884      	ldr	r0, [pc, #528]	; (80089f8 <split_string+0x2d4>)
 80087e8:	f000 fea8 	bl	800953c <strcpy>
					break;
 80087ec:	e029      	b.n	8008842 <split_string+0x11e>
					strcpy(line_args.x1,ll_token);
 80087ee:	4b7c      	ldr	r3, [pc, #496]	; (80089e0 <split_string+0x2bc>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4619      	mov	r1, r3
 80087f4:	4881      	ldr	r0, [pc, #516]	; (80089fc <split_string+0x2d8>)
 80087f6:	f000 fea1 	bl	800953c <strcpy>
					break;
 80087fa:	e022      	b.n	8008842 <split_string+0x11e>
					strcpy(line_args.y1,ll_token);
 80087fc:	4b78      	ldr	r3, [pc, #480]	; (80089e0 <split_string+0x2bc>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4619      	mov	r1, r3
 8008802:	487f      	ldr	r0, [pc, #508]	; (8008a00 <split_string+0x2dc>)
 8008804:	f000 fe9a 	bl	800953c <strcpy>
					break;
 8008808:	e01b      	b.n	8008842 <split_string+0x11e>
					strcpy(line_args.x2,ll_token);
 800880a:	4b75      	ldr	r3, [pc, #468]	; (80089e0 <split_string+0x2bc>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4619      	mov	r1, r3
 8008810:	487c      	ldr	r0, [pc, #496]	; (8008a04 <split_string+0x2e0>)
 8008812:	f000 fe93 	bl	800953c <strcpy>
					break;
 8008816:	e014      	b.n	8008842 <split_string+0x11e>
					strcpy(line_args.y2,ll_token);
 8008818:	4b71      	ldr	r3, [pc, #452]	; (80089e0 <split_string+0x2bc>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4619      	mov	r1, r3
 800881e:	487a      	ldr	r0, [pc, #488]	; (8008a08 <split_string+0x2e4>)
 8008820:	f000 fe8c 	bl	800953c <strcpy>
					break;
 8008824:	e00d      	b.n	8008842 <split_string+0x11e>
					strcpy(line_args.thickness,ll_token);
 8008826:	4b6e      	ldr	r3, [pc, #440]	; (80089e0 <split_string+0x2bc>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4619      	mov	r1, r3
 800882c:	4877      	ldr	r0, [pc, #476]	; (8008a0c <split_string+0x2e8>)
 800882e:	f000 fe85 	bl	800953c <strcpy>
					break;
 8008832:	e006      	b.n	8008842 <split_string+0x11e>
					strcpy(line_args.color,ll_token);
 8008834:	4b6a      	ldr	r3, [pc, #424]	; (80089e0 <split_string+0x2bc>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4619      	mov	r1, r3
 800883a:	4875      	ldr	r0, [pc, #468]	; (8008a10 <split_string+0x2ec>)
 800883c:	f000 fe7e 	bl	800953c <strcpy>
					break;
 8008840:	bf00      	nop
			fill++;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	3301      	adds	r3, #1
 8008846:	607b      	str	r3, [r7, #4]
			ll_token = strtok (NULL, ",");
 8008848:	4963      	ldr	r1, [pc, #396]	; (80089d8 <split_string+0x2b4>)
 800884a:	2000      	movs	r0, #0
 800884c:	f000 fe7e 	bl	800954c <strtok>
 8008850:	4602      	mov	r2, r0
 8008852:	4b63      	ldr	r3, [pc, #396]	; (80089e0 <split_string+0x2bc>)
 8008854:	601a      	str	r2, [r3, #0]
		while(ll_token!= NULL)
 8008856:	4b62      	ldr	r3, [pc, #392]	; (80089e0 <split_string+0x2bc>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d1ab      	bne.n	80087b6 <split_string+0x92>
		func_chooser();
 800885e:	f000 fb09 	bl	8008e74 <func_chooser>
}
 8008862:	e216      	b.n	8008c92 <split_string+0x56e>
	else if(strcmp(functions, "ellips")==0)
 8008864:	496b      	ldr	r1, [pc, #428]	; (8008a14 <split_string+0x2f0>)
 8008866:	485f      	ldr	r0, [pc, #380]	; (80089e4 <split_string+0x2c0>)
 8008868:	f7f7 fcae 	bl	80001c8 <strcmp>
 800886c:	4603      	mov	r3, r0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d14f      	bne.n	8008912 <split_string+0x1ee>
		fill=0;
 8008872:	2300      	movs	r3, #0
 8008874:	607b      	str	r3, [r7, #4]
		while(ll_token != NULL)
 8008876:	e045      	b.n	8008904 <split_string+0x1e0>
			switch(fill)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2b05      	cmp	r3, #5
 800887c:	d838      	bhi.n	80088f0 <split_string+0x1cc>
 800887e:	a201      	add	r2, pc, #4	; (adr r2, 8008884 <split_string+0x160>)
 8008880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008884:	0800889d 	.word	0x0800889d
 8008888:	080088ab 	.word	0x080088ab
 800888c:	080088b9 	.word	0x080088b9
 8008890:	080088c7 	.word	0x080088c7
 8008894:	080088d5 	.word	0x080088d5
 8008898:	080088e3 	.word	0x080088e3
					strcpy(ellips_args.function,ll_token);
 800889c:	4b50      	ldr	r3, [pc, #320]	; (80089e0 <split_string+0x2bc>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4619      	mov	r1, r3
 80088a2:	485d      	ldr	r0, [pc, #372]	; (8008a18 <split_string+0x2f4>)
 80088a4:	f000 fe4a 	bl	800953c <strcpy>
					break;
 80088a8:	e022      	b.n	80088f0 <split_string+0x1cc>
					strcpy(ellips_args.x_center,ll_token);
 80088aa:	4b4d      	ldr	r3, [pc, #308]	; (80089e0 <split_string+0x2bc>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4619      	mov	r1, r3
 80088b0:	485a      	ldr	r0, [pc, #360]	; (8008a1c <split_string+0x2f8>)
 80088b2:	f000 fe43 	bl	800953c <strcpy>
					break;
 80088b6:	e01b      	b.n	80088f0 <split_string+0x1cc>
					strcpy(ellips_args.y_center,ll_token);
 80088b8:	4b49      	ldr	r3, [pc, #292]	; (80089e0 <split_string+0x2bc>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4619      	mov	r1, r3
 80088be:	4858      	ldr	r0, [pc, #352]	; (8008a20 <split_string+0x2fc>)
 80088c0:	f000 fe3c 	bl	800953c <strcpy>
					break;
 80088c4:	e014      	b.n	80088f0 <split_string+0x1cc>
					strcpy(ellips_args.x_rad,ll_token);
 80088c6:	4b46      	ldr	r3, [pc, #280]	; (80089e0 <split_string+0x2bc>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	4619      	mov	r1, r3
 80088cc:	4855      	ldr	r0, [pc, #340]	; (8008a24 <split_string+0x300>)
 80088ce:	f000 fe35 	bl	800953c <strcpy>
					break;
 80088d2:	e00d      	b.n	80088f0 <split_string+0x1cc>
					strcpy(ellips_args.y_rad,ll_token);
 80088d4:	4b42      	ldr	r3, [pc, #264]	; (80089e0 <split_string+0x2bc>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4619      	mov	r1, r3
 80088da:	4853      	ldr	r0, [pc, #332]	; (8008a28 <split_string+0x304>)
 80088dc:	f000 fe2e 	bl	800953c <strcpy>
					break;
 80088e0:	e006      	b.n	80088f0 <split_string+0x1cc>
					strcpy(ellips_args.color,ll_token);
 80088e2:	4b3f      	ldr	r3, [pc, #252]	; (80089e0 <split_string+0x2bc>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4619      	mov	r1, r3
 80088e8:	4850      	ldr	r0, [pc, #320]	; (8008a2c <split_string+0x308>)
 80088ea:	f000 fe27 	bl	800953c <strcpy>
					break;
 80088ee:	bf00      	nop
			fill++;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	3301      	adds	r3, #1
 80088f4:	607b      	str	r3, [r7, #4]
			ll_token = strtok (NULL, ",");
 80088f6:	4938      	ldr	r1, [pc, #224]	; (80089d8 <split_string+0x2b4>)
 80088f8:	2000      	movs	r0, #0
 80088fa:	f000 fe27 	bl	800954c <strtok>
 80088fe:	4602      	mov	r2, r0
 8008900:	4b37      	ldr	r3, [pc, #220]	; (80089e0 <split_string+0x2bc>)
 8008902:	601a      	str	r2, [r3, #0]
		while(ll_token != NULL)
 8008904:	4b36      	ldr	r3, [pc, #216]	; (80089e0 <split_string+0x2bc>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1b5      	bne.n	8008878 <split_string+0x154>
		func_chooser();
 800890c:	f000 fab2 	bl	8008e74 <func_chooser>
}
 8008910:	e1bf      	b.n	8008c92 <split_string+0x56e>
	else if(strcmp(functions, "rechthoek")==0)
 8008912:	4947      	ldr	r1, [pc, #284]	; (8008a30 <split_string+0x30c>)
 8008914:	4833      	ldr	r0, [pc, #204]	; (80089e4 <split_string+0x2c0>)
 8008916:	f7f7 fc57 	bl	80001c8 <strcmp>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d150      	bne.n	80089c2 <split_string+0x29e>
		fill=0;
 8008920:	2300      	movs	r3, #0
 8008922:	607b      	str	r3, [r7, #4]
		while(ll_token != NULL)
 8008924:	e046      	b.n	80089b4 <split_string+0x290>
			switch(fill)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2b05      	cmp	r3, #5
 800892a:	d839      	bhi.n	80089a0 <split_string+0x27c>
 800892c:	a201      	add	r2, pc, #4	; (adr r2, 8008934 <split_string+0x210>)
 800892e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008932:	bf00      	nop
 8008934:	0800894d 	.word	0x0800894d
 8008938:	0800895b 	.word	0x0800895b
 800893c:	08008969 	.word	0x08008969
 8008940:	08008977 	.word	0x08008977
 8008944:	08008985 	.word	0x08008985
 8008948:	08008993 	.word	0x08008993
					strcpy(rectangle_args.function,ll_token);
 800894c:	4b24      	ldr	r3, [pc, #144]	; (80089e0 <split_string+0x2bc>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4619      	mov	r1, r3
 8008952:	4838      	ldr	r0, [pc, #224]	; (8008a34 <split_string+0x310>)
 8008954:	f000 fdf2 	bl	800953c <strcpy>
					break;
 8008958:	e022      	b.n	80089a0 <split_string+0x27c>
					strcpy(rectangle_args.x1,ll_token);
 800895a:	4b21      	ldr	r3, [pc, #132]	; (80089e0 <split_string+0x2bc>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4619      	mov	r1, r3
 8008960:	4835      	ldr	r0, [pc, #212]	; (8008a38 <split_string+0x314>)
 8008962:	f000 fdeb 	bl	800953c <strcpy>
					break;
 8008966:	e01b      	b.n	80089a0 <split_string+0x27c>
					strcpy(rectangle_args.y1,ll_token);
 8008968:	4b1d      	ldr	r3, [pc, #116]	; (80089e0 <split_string+0x2bc>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4619      	mov	r1, r3
 800896e:	4833      	ldr	r0, [pc, #204]	; (8008a3c <split_string+0x318>)
 8008970:	f000 fde4 	bl	800953c <strcpy>
					break;
 8008974:	e014      	b.n	80089a0 <split_string+0x27c>
					strcpy(rectangle_args.x2,ll_token);
 8008976:	4b1a      	ldr	r3, [pc, #104]	; (80089e0 <split_string+0x2bc>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4619      	mov	r1, r3
 800897c:	4830      	ldr	r0, [pc, #192]	; (8008a40 <split_string+0x31c>)
 800897e:	f000 fddd 	bl	800953c <strcpy>
					break;
 8008982:	e00d      	b.n	80089a0 <split_string+0x27c>
					strcpy(rectangle_args.y2,ll_token);
 8008984:	4b16      	ldr	r3, [pc, #88]	; (80089e0 <split_string+0x2bc>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4619      	mov	r1, r3
 800898a:	482e      	ldr	r0, [pc, #184]	; (8008a44 <split_string+0x320>)
 800898c:	f000 fdd6 	bl	800953c <strcpy>
					break;
 8008990:	e006      	b.n	80089a0 <split_string+0x27c>
					strcpy(rectangle_args.color,ll_token);
 8008992:	4b13      	ldr	r3, [pc, #76]	; (80089e0 <split_string+0x2bc>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4619      	mov	r1, r3
 8008998:	482b      	ldr	r0, [pc, #172]	; (8008a48 <split_string+0x324>)
 800899a:	f000 fdcf 	bl	800953c <strcpy>
					break;
 800899e:	bf00      	nop
			fill++;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	3301      	adds	r3, #1
 80089a4:	607b      	str	r3, [r7, #4]
			ll_token = strtok (NULL, ",");
 80089a6:	490c      	ldr	r1, [pc, #48]	; (80089d8 <split_string+0x2b4>)
 80089a8:	2000      	movs	r0, #0
 80089aa:	f000 fdcf 	bl	800954c <strtok>
 80089ae:	4602      	mov	r2, r0
 80089b0:	4b0b      	ldr	r3, [pc, #44]	; (80089e0 <split_string+0x2bc>)
 80089b2:	601a      	str	r2, [r3, #0]
		while(ll_token != NULL)
 80089b4:	4b0a      	ldr	r3, [pc, #40]	; (80089e0 <split_string+0x2bc>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1b4      	bne.n	8008926 <split_string+0x202>
		func_chooser();
 80089bc:	f000 fa5a 	bl	8008e74 <func_chooser>
}
 80089c0:	e167      	b.n	8008c92 <split_string+0x56e>
	else if(strcmp(functions, "driehoek")==0)
 80089c2:	4922      	ldr	r1, [pc, #136]	; (8008a4c <split_string+0x328>)
 80089c4:	4807      	ldr	r0, [pc, #28]	; (80089e4 <split_string+0x2c0>)
 80089c6:	f7f7 fbff 	bl	80001c8 <strcmp>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f040 809e 	bne.w	8008b0e <split_string+0x3ea>
		fill=0;
 80089d2:	2300      	movs	r3, #0
 80089d4:	607b      	str	r3, [r7, #4]
		while(ll_token != NULL)
 80089d6:	e093      	b.n	8008b00 <split_string+0x3dc>
 80089d8:	08009e2c 	.word	0x08009e2c
 80089dc:	20013918 	.word	0x20013918
 80089e0:	200006d8 	.word	0x200006d8
 80089e4:	200006dc 	.word	0x200006dc
 80089e8:	08009e30 	.word	0x08009e30
 80089ec:	200006fc 	.word	0x200006fc
 80089f0:	20000779 	.word	0x20000779
 80089f4:	08009e3c 	.word	0x08009e3c
 80089f8:	200135a8 	.word	0x200135a8
 80089fc:	200135b2 	.word	0x200135b2
 8008a00:	200135b7 	.word	0x200135b7
 8008a04:	200135bc 	.word	0x200135bc
 8008a08:	200135c1 	.word	0x200135c1
 8008a0c:	200135e4 	.word	0x200135e4
 8008a10:	20013625 	.word	0x20013625
 8008a14:	08009e44 	.word	0x08009e44
 8008a18:	200137f8 	.word	0x200137f8
 8008a1c:	20013820 	.word	0x20013820
 8008a20:	20013825 	.word	0x20013825
 8008a24:	2001382a 	.word	0x2001382a
 8008a28:	2001382f 	.word	0x2001382f
 8008a2c:	20013875 	.word	0x20013875
 8008a30:	08009e4c 	.word	0x08009e4c
 8008a34:	20013480 	.word	0x20013480
 8008a38:	2001348a 	.word	0x2001348a
 8008a3c:	2001348f 	.word	0x2001348f
 8008a40:	20013494 	.word	0x20013494
 8008a44:	20013499 	.word	0x20013499
 8008a48:	200134fd 	.word	0x200134fd
 8008a4c:	08009e58 	.word	0x08009e58
			switch(fill)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2b07      	cmp	r3, #7
 8008a54:	d84a      	bhi.n	8008aec <split_string+0x3c8>
 8008a56:	a201      	add	r2, pc, #4	; (adr r2, 8008a5c <split_string+0x338>)
 8008a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a5c:	08008a7d 	.word	0x08008a7d
 8008a60:	08008a8b 	.word	0x08008a8b
 8008a64:	08008a99 	.word	0x08008a99
 8008a68:	08008aa7 	.word	0x08008aa7
 8008a6c:	08008ab5 	.word	0x08008ab5
 8008a70:	08008ac3 	.word	0x08008ac3
 8008a74:	08008ad1 	.word	0x08008ad1
 8008a78:	08008adf 	.word	0x08008adf
					strcpy(triangle_args.function,ll_token);
 8008a7c:	4b87      	ldr	r3, [pc, #540]	; (8008c9c <split_string+0x578>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4619      	mov	r1, r3
 8008a82:	4887      	ldr	r0, [pc, #540]	; (8008ca0 <split_string+0x57c>)
 8008a84:	f000 fd5a 	bl	800953c <strcpy>
					break;
 8008a88:	e030      	b.n	8008aec <split_string+0x3c8>
					strcpy(triangle_args.x1,ll_token);
 8008a8a:	4b84      	ldr	r3, [pc, #528]	; (8008c9c <split_string+0x578>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4619      	mov	r1, r3
 8008a90:	4884      	ldr	r0, [pc, #528]	; (8008ca4 <split_string+0x580>)
 8008a92:	f000 fd53 	bl	800953c <strcpy>
					break;
 8008a96:	e029      	b.n	8008aec <split_string+0x3c8>
					strcpy(triangle_args.y1,ll_token);
 8008a98:	4b80      	ldr	r3, [pc, #512]	; (8008c9c <split_string+0x578>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4619      	mov	r1, r3
 8008a9e:	4882      	ldr	r0, [pc, #520]	; (8008ca8 <split_string+0x584>)
 8008aa0:	f000 fd4c 	bl	800953c <strcpy>
					break;
 8008aa4:	e022      	b.n	8008aec <split_string+0x3c8>
					strcpy(triangle_args.x2,ll_token);
 8008aa6:	4b7d      	ldr	r3, [pc, #500]	; (8008c9c <split_string+0x578>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4619      	mov	r1, r3
 8008aac:	487f      	ldr	r0, [pc, #508]	; (8008cac <split_string+0x588>)
 8008aae:	f000 fd45 	bl	800953c <strcpy>
					break;
 8008ab2:	e01b      	b.n	8008aec <split_string+0x3c8>
					strcpy(triangle_args.y2,ll_token);
 8008ab4:	4b79      	ldr	r3, [pc, #484]	; (8008c9c <split_string+0x578>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	4619      	mov	r1, r3
 8008aba:	487d      	ldr	r0, [pc, #500]	; (8008cb0 <split_string+0x58c>)
 8008abc:	f000 fd3e 	bl	800953c <strcpy>
					break;
 8008ac0:	e014      	b.n	8008aec <split_string+0x3c8>
					strcpy(triangle_args.xtop,ll_token);
 8008ac2:	4b76      	ldr	r3, [pc, #472]	; (8008c9c <split_string+0x578>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	487a      	ldr	r0, [pc, #488]	; (8008cb4 <split_string+0x590>)
 8008aca:	f000 fd37 	bl	800953c <strcpy>
					break;
 8008ace:	e00d      	b.n	8008aec <split_string+0x3c8>
					strcpy(triangle_args.ytop,ll_token);
 8008ad0:	4b72      	ldr	r3, [pc, #456]	; (8008c9c <split_string+0x578>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	4878      	ldr	r0, [pc, #480]	; (8008cb8 <split_string+0x594>)
 8008ad8:	f000 fd30 	bl	800953c <strcpy>
					break;
 8008adc:	e006      	b.n	8008aec <split_string+0x3c8>
					strcpy(triangle_args.color,ll_token);
 8008ade:	4b6f      	ldr	r3, [pc, #444]	; (8008c9c <split_string+0x578>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	4875      	ldr	r0, [pc, #468]	; (8008cbc <split_string+0x598>)
 8008ae6:	f000 fd29 	bl	800953c <strcpy>
					break;
 8008aea:	bf00      	nop
			fill++;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	3301      	adds	r3, #1
 8008af0:	607b      	str	r3, [r7, #4]
			ll_token = strtok (NULL, ",");
 8008af2:	4973      	ldr	r1, [pc, #460]	; (8008cc0 <split_string+0x59c>)
 8008af4:	2000      	movs	r0, #0
 8008af6:	f000 fd29 	bl	800954c <strtok>
 8008afa:	4602      	mov	r2, r0
 8008afc:	4b67      	ldr	r3, [pc, #412]	; (8008c9c <split_string+0x578>)
 8008afe:	601a      	str	r2, [r3, #0]
		while(ll_token != NULL)
 8008b00:	4b66      	ldr	r3, [pc, #408]	; (8008c9c <split_string+0x578>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d1a3      	bne.n	8008a50 <split_string+0x32c>
		func_chooser();
 8008b08:	f000 f9b4 	bl	8008e74 <func_chooser>
}
 8008b0c:	e0c1      	b.n	8008c92 <split_string+0x56e>
	else if(strcmp(functions, "tekst")==0)
 8008b0e:	496d      	ldr	r1, [pc, #436]	; (8008cc4 <split_string+0x5a0>)
 8008b10:	486d      	ldr	r0, [pc, #436]	; (8008cc8 <split_string+0x5a4>)
 8008b12:	f7f7 fb59 	bl	80001c8 <strcmp>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d147      	bne.n	8008bac <split_string+0x488>
		fill=0;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	607b      	str	r3, [r7, #4]
		while(ll_token != NULL)
 8008b20:	e03d      	b.n	8008b9e <split_string+0x47a>
			switch(fill)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2b04      	cmp	r3, #4
 8008b26:	d830      	bhi.n	8008b8a <split_string+0x466>
 8008b28:	a201      	add	r2, pc, #4	; (adr r2, 8008b30 <split_string+0x40c>)
 8008b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2e:	bf00      	nop
 8008b30:	08008b45 	.word	0x08008b45
 8008b34:	08008b53 	.word	0x08008b53
 8008b38:	08008b61 	.word	0x08008b61
 8008b3c:	08008b6f 	.word	0x08008b6f
 8008b40:	08008b7d 	.word	0x08008b7d
					strcpy(text_args.function,ll_token);
 8008b44:	4b55      	ldr	r3, [pc, #340]	; (8008c9c <split_string+0x578>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4619      	mov	r1, r3
 8008b4a:	4860      	ldr	r0, [pc, #384]	; (8008ccc <split_string+0x5a8>)
 8008b4c:	f000 fcf6 	bl	800953c <strcpy>
					break;
 8008b50:	e01b      	b.n	8008b8a <split_string+0x466>
					strcpy(text_args.x1,ll_token);
 8008b52:	4b52      	ldr	r3, [pc, #328]	; (8008c9c <split_string+0x578>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4619      	mov	r1, r3
 8008b58:	485d      	ldr	r0, [pc, #372]	; (8008cd0 <split_string+0x5ac>)
 8008b5a:	f000 fcef 	bl	800953c <strcpy>
					break;
 8008b5e:	e014      	b.n	8008b8a <split_string+0x466>
					strcpy(text_args.y1,ll_token);
 8008b60:	4b4e      	ldr	r3, [pc, #312]	; (8008c9c <split_string+0x578>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4619      	mov	r1, r3
 8008b66:	485b      	ldr	r0, [pc, #364]	; (8008cd4 <split_string+0x5b0>)
 8008b68:	f000 fce8 	bl	800953c <strcpy>
					break;
 8008b6c:	e00d      	b.n	8008b8a <split_string+0x466>
					strcpy(text_args.text_in,ll_token);
 8008b6e:	4b4b      	ldr	r3, [pc, #300]	; (8008c9c <split_string+0x578>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	4619      	mov	r1, r3
 8008b74:	4858      	ldr	r0, [pc, #352]	; (8008cd8 <split_string+0x5b4>)
 8008b76:	f000 fce1 	bl	800953c <strcpy>
					break;
 8008b7a:	e006      	b.n	8008b8a <split_string+0x466>
					strcpy(text_args.color,ll_token);
 8008b7c:	4b47      	ldr	r3, [pc, #284]	; (8008c9c <split_string+0x578>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4619      	mov	r1, r3
 8008b82:	4856      	ldr	r0, [pc, #344]	; (8008cdc <split_string+0x5b8>)
 8008b84:	f000 fcda 	bl	800953c <strcpy>
					break;
 8008b88:	bf00      	nop
			fill++;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	3301      	adds	r3, #1
 8008b8e:	607b      	str	r3, [r7, #4]
			ll_token = strtok (NULL, ",");
 8008b90:	494b      	ldr	r1, [pc, #300]	; (8008cc0 <split_string+0x59c>)
 8008b92:	2000      	movs	r0, #0
 8008b94:	f000 fcda 	bl	800954c <strtok>
 8008b98:	4602      	mov	r2, r0
 8008b9a:	4b40      	ldr	r3, [pc, #256]	; (8008c9c <split_string+0x578>)
 8008b9c:	601a      	str	r2, [r3, #0]
		while(ll_token != NULL)
 8008b9e:	4b3f      	ldr	r3, [pc, #252]	; (8008c9c <split_string+0x578>)
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d1bd      	bne.n	8008b22 <split_string+0x3fe>
		func_chooser();
 8008ba6:	f000 f965 	bl	8008e74 <func_chooser>
}
 8008baa:	e072      	b.n	8008c92 <split_string+0x56e>
	else if(strcmp(functions, "bitmap")==0)
 8008bac:	494c      	ldr	r1, [pc, #304]	; (8008ce0 <split_string+0x5bc>)
 8008bae:	4846      	ldr	r0, [pc, #280]	; (8008cc8 <split_string+0x5a4>)
 8008bb0:	f7f7 fb0a 	bl	80001c8 <strcmp>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d13d      	bne.n	8008c36 <split_string+0x512>
		fill=0;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	607b      	str	r3, [r7, #4]
		while(ll_token != NULL)
 8008bbe:	e033      	b.n	8008c28 <split_string+0x504>
			switch(fill)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2b03      	cmp	r3, #3
 8008bc4:	d826      	bhi.n	8008c14 <split_string+0x4f0>
 8008bc6:	a201      	add	r2, pc, #4	; (adr r2, 8008bcc <split_string+0x4a8>)
 8008bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bcc:	08008bdd 	.word	0x08008bdd
 8008bd0:	08008beb 	.word	0x08008beb
 8008bd4:	08008bf9 	.word	0x08008bf9
 8008bd8:	08008c07 	.word	0x08008c07
					strcpy(bitmap_args.function,ll_token);
 8008bdc:	4b2f      	ldr	r3, [pc, #188]	; (8008c9c <split_string+0x578>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4619      	mov	r1, r3
 8008be2:	4840      	ldr	r0, [pc, #256]	; (8008ce4 <split_string+0x5c0>)
 8008be4:	f000 fcaa 	bl	800953c <strcpy>
					break;
 8008be8:	e014      	b.n	8008c14 <split_string+0x4f0>
					strcpy(bitmap_args.bitmap_nr,ll_token);
 8008bea:	4b2c      	ldr	r3, [pc, #176]	; (8008c9c <split_string+0x578>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	4619      	mov	r1, r3
 8008bf0:	483d      	ldr	r0, [pc, #244]	; (8008ce8 <split_string+0x5c4>)
 8008bf2:	f000 fca3 	bl	800953c <strcpy>
					break;
 8008bf6:	e00d      	b.n	8008c14 <split_string+0x4f0>
					strcpy(bitmap_args.x1,ll_token);
 8008bf8:	4b28      	ldr	r3, [pc, #160]	; (8008c9c <split_string+0x578>)
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	483b      	ldr	r0, [pc, #236]	; (8008cec <split_string+0x5c8>)
 8008c00:	f000 fc9c 	bl	800953c <strcpy>
					break;
 8008c04:	e006      	b.n	8008c14 <split_string+0x4f0>
					strcpy(bitmap_args.y1,ll_token);
 8008c06:	4b25      	ldr	r3, [pc, #148]	; (8008c9c <split_string+0x578>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	4838      	ldr	r0, [pc, #224]	; (8008cf0 <split_string+0x5cc>)
 8008c0e:	f000 fc95 	bl	800953c <strcpy>
					break;
 8008c12:	bf00      	nop
			fill++;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	3301      	adds	r3, #1
 8008c18:	607b      	str	r3, [r7, #4]
			ll_token = strtok (NULL, ",");
 8008c1a:	4929      	ldr	r1, [pc, #164]	; (8008cc0 <split_string+0x59c>)
 8008c1c:	2000      	movs	r0, #0
 8008c1e:	f000 fc95 	bl	800954c <strtok>
 8008c22:	4602      	mov	r2, r0
 8008c24:	4b1d      	ldr	r3, [pc, #116]	; (8008c9c <split_string+0x578>)
 8008c26:	601a      	str	r2, [r3, #0]
		while(ll_token != NULL)
 8008c28:	4b1c      	ldr	r3, [pc, #112]	; (8008c9c <split_string+0x578>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d1c7      	bne.n	8008bc0 <split_string+0x49c>
		func_chooser();
 8008c30:	f000 f920 	bl	8008e74 <func_chooser>
}
 8008c34:	e02d      	b.n	8008c92 <split_string+0x56e>
	else if(strcmp(functions, "wacht")==0)
 8008c36:	492f      	ldr	r1, [pc, #188]	; (8008cf4 <split_string+0x5d0>)
 8008c38:	4823      	ldr	r0, [pc, #140]	; (8008cc8 <split_string+0x5a4>)
 8008c3a:	f7f7 fac5 	bl	80001c8 <strcmp>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d126      	bne.n	8008c92 <split_string+0x56e>
		fill=0;
 8008c44:	2300      	movs	r3, #0
 8008c46:	607b      	str	r3, [r7, #4]
		while(ll_token != NULL)
 8008c48:	e01d      	b.n	8008c86 <split_string+0x562>
			switch(fill)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d002      	beq.n	8008c56 <split_string+0x532>
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d007      	beq.n	8008c64 <split_string+0x540>
 8008c54:	e00d      	b.n	8008c72 <split_string+0x54e>
				strcpy(wait_args.function,ll_token);
 8008c56:	4b11      	ldr	r3, [pc, #68]	; (8008c9c <split_string+0x578>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	4826      	ldr	r0, [pc, #152]	; (8008cf8 <split_string+0x5d4>)
 8008c5e:	f000 fc6d 	bl	800953c <strcpy>
				break;
 8008c62:	e006      	b.n	8008c72 <split_string+0x54e>
				strcpy(wait_args.time_ms,ll_token);
 8008c64:	4b0d      	ldr	r3, [pc, #52]	; (8008c9c <split_string+0x578>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4619      	mov	r1, r3
 8008c6a:	4824      	ldr	r0, [pc, #144]	; (8008cfc <split_string+0x5d8>)
 8008c6c:	f000 fc66 	bl	800953c <strcpy>
				break;
 8008c70:	bf00      	nop
			fill++;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	3301      	adds	r3, #1
 8008c76:	607b      	str	r3, [r7, #4]
			ll_token = strtok (NULL, ",");
 8008c78:	4911      	ldr	r1, [pc, #68]	; (8008cc0 <split_string+0x59c>)
 8008c7a:	2000      	movs	r0, #0
 8008c7c:	f000 fc66 	bl	800954c <strtok>
 8008c80:	4602      	mov	r2, r0
 8008c82:	4b06      	ldr	r3, [pc, #24]	; (8008c9c <split_string+0x578>)
 8008c84:	601a      	str	r2, [r3, #0]
		while(ll_token != NULL)
 8008c86:	4b05      	ldr	r3, [pc, #20]	; (8008c9c <split_string+0x578>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1dd      	bne.n	8008c4a <split_string+0x526>
		func_chooser();
 8008c8e:	f000 f8f1 	bl	8008e74 <func_chooser>
}
 8008c92:	bf00      	nop
 8008c94:	3708      	adds	r7, #8
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	200006d8 	.word	0x200006d8
 8008ca0:	20013514 	.word	0x20013514
 8008ca4:	2001351e 	.word	0x2001351e
 8008ca8:	20013523 	.word	0x20013523
 8008cac:	20013528 	.word	0x20013528
 8008cb0:	2001352d 	.word	0x2001352d
 8008cb4:	20013532 	.word	0x20013532
 8008cb8:	20013537 	.word	0x20013537
 8008cbc:	20013591 	.word	0x20013591
 8008cc0:	08009e2c 	.word	0x08009e2c
 8008cc4:	08009e64 	.word	0x08009e64
 8008cc8:	200006dc 	.word	0x200006dc
 8008ccc:	200136d0 	.word	0x200136d0
 8008cd0:	200136da 	.word	0x200136da
 8008cd4:	200136df 	.word	0x200136df
 8008cd8:	20013711 	.word	0x20013711
 8008cdc:	2001374d 	.word	0x2001374d
 8008ce0:	08009e6c 	.word	0x08009e6c
 8008ce4:	2001363c 	.word	0x2001363c
 8008ce8:	200136af 	.word	0x200136af
 8008cec:	20013646 	.word	0x20013646
 8008cf0:	2001364b 	.word	0x2001364b
 8008cf4:	08009e74 	.word	0x08009e74
 8008cf8:	20013764 	.word	0x20013764
 8008cfc:	200137dc 	.word	0x200137dc

08008d00 <color>:
#include "logic_layer.h"



int color(char *color_input)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
	if(strcmp(color_input, "zwart")==0) return zwart;
 8008d08:	494a      	ldr	r1, [pc, #296]	; (8008e34 <color+0x134>)
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7f7 fa5c 	bl	80001c8 <strcmp>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d101      	bne.n	8008d1a <color+0x1a>
 8008d16:	2300      	movs	r3, #0
 8008d18:	e087      	b.n	8008e2a <color+0x12a>
	else if(strcmp(color_input, "blauw")==0) return blauw;
 8008d1a:	4947      	ldr	r1, [pc, #284]	; (8008e38 <color+0x138>)
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f7f7 fa53 	bl	80001c8 <strcmp>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d101      	bne.n	8008d2c <color+0x2c>
 8008d28:	2303      	movs	r3, #3
 8008d2a:	e07e      	b.n	8008e2a <color+0x12a>
	else if(strcmp(color_input, "lichtblauw")==0) return lichtblauw;
 8008d2c:	4943      	ldr	r1, [pc, #268]	; (8008e3c <color+0x13c>)
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f7f7 fa4a 	bl	80001c8 <strcmp>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d101      	bne.n	8008d3e <color+0x3e>
 8008d3a:	2373      	movs	r3, #115	; 0x73
 8008d3c:	e075      	b.n	8008e2a <color+0x12a>
	else if(strcmp(color_input, "groen")==0) return groen;
 8008d3e:	4940      	ldr	r1, [pc, #256]	; (8008e40 <color+0x140>)
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f7f7 fa41 	bl	80001c8 <strcmp>
 8008d46:	4603      	mov	r3, r0
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d101      	bne.n	8008d50 <color+0x50>
 8008d4c:	231c      	movs	r3, #28
 8008d4e:	e06c      	b.n	8008e2a <color+0x12a>
	else if(strcmp(color_input, "lichtgroen")==0) return lichtgroen;
 8008d50:	493c      	ldr	r1, [pc, #240]	; (8008e44 <color+0x144>)
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f7f7 fa38 	bl	80001c8 <strcmp>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d101      	bne.n	8008d62 <color+0x62>
 8008d5e:	235c      	movs	r3, #92	; 0x5c
 8008d60:	e063      	b.n	8008e2a <color+0x12a>
	else if(strcmp(color_input, "rood")==0) return rood;
 8008d62:	4939      	ldr	r1, [pc, #228]	; (8008e48 <color+0x148>)
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f7f7 fa2f 	bl	80001c8 <strcmp>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d101      	bne.n	8008d74 <color+0x74>
 8008d70:	23e0      	movs	r3, #224	; 0xe0
 8008d72:	e05a      	b.n	8008e2a <color+0x12a>
	else if(strcmp(color_input, "lichtrood")==0) return lichtrood;
 8008d74:	4935      	ldr	r1, [pc, #212]	; (8008e4c <color+0x14c>)
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f7f7 fa26 	bl	80001c8 <strcmp>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d101      	bne.n	8008d86 <color+0x86>
 8008d82:	23e9      	movs	r3, #233	; 0xe9
 8008d84:	e051      	b.n	8008e2a <color+0x12a>
	else if(strcmp(color_input, "wit")==0) return wit;
 8008d86:	4932      	ldr	r1, [pc, #200]	; (8008e50 <color+0x150>)
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f7f7 fa1d 	bl	80001c8 <strcmp>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d101      	bne.n	8008d98 <color+0x98>
 8008d94:	23ff      	movs	r3, #255	; 0xff
 8008d96:	e048      	b.n	8008e2a <color+0x12a>
	else if(strcmp(color_input, "cyaan")==0) return cyaan;
 8008d98:	492e      	ldr	r1, [pc, #184]	; (8008e54 <color+0x154>)
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f7f7 fa14 	bl	80001c8 <strcmp>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d101      	bne.n	8008daa <color+0xaa>
 8008da6:	231f      	movs	r3, #31
 8008da8:	e03f      	b.n	8008e2a <color+0x12a>
	else if(strcmp(color_input, "lichtcyaan")==0) return lichtcyaan;
 8008daa:	492b      	ldr	r1, [pc, #172]	; (8008e58 <color+0x158>)
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f7f7 fa0b 	bl	80001c8 <strcmp>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d101      	bne.n	8008dbc <color+0xbc>
 8008db8:	237f      	movs	r3, #127	; 0x7f
 8008dba:	e036      	b.n	8008e2a <color+0x12a>
	else if(strcmp(color_input, "magenta")==0) return magenta;
 8008dbc:	4927      	ldr	r1, [pc, #156]	; (8008e5c <color+0x15c>)
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f7f7 fa02 	bl	80001c8 <strcmp>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d101      	bne.n	8008dce <color+0xce>
 8008dca:	23e3      	movs	r3, #227	; 0xe3
 8008dcc:	e02d      	b.n	8008e2a <color+0x12a>
	else if(strcmp(color_input, "lichtmagenta")==0) return lichtmagenta;
 8008dce:	4924      	ldr	r1, [pc, #144]	; (8008e60 <color+0x160>)
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f7f7 f9f9 	bl	80001c8 <strcmp>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d101      	bne.n	8008de0 <color+0xe0>
 8008ddc:	23e2      	movs	r3, #226	; 0xe2
 8008dde:	e024      	b.n	8008e2a <color+0x12a>
	else if(strcmp(color_input, "geel")==0) return geel;
 8008de0:	4920      	ldr	r1, [pc, #128]	; (8008e64 <color+0x164>)
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f7f7 f9f0 	bl	80001c8 <strcmp>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <color+0xf2>
 8008dee:	23fc      	movs	r3, #252	; 0xfc
 8008df0:	e01b      	b.n	8008e2a <color+0x12a>
	else if(strcmp(color_input, "bruin")==0) return bruin;
 8008df2:	491d      	ldr	r1, [pc, #116]	; (8008e68 <color+0x168>)
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f7f7 f9e7 	bl	80001c8 <strcmp>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d101      	bne.n	8008e04 <color+0x104>
 8008e00:	2388      	movs	r3, #136	; 0x88
 8008e02:	e012      	b.n	8008e2a <color+0x12a>
	else if(strcmp(color_input, "grijs")==0) return grijs;
 8008e04:	4919      	ldr	r1, [pc, #100]	; (8008e6c <color+0x16c>)
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f7f7 f9de 	bl	80001c8 <strcmp>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d101      	bne.n	8008e16 <color+0x116>
 8008e12:	23e6      	movs	r3, #230	; 0xe6
 8008e14:	e009      	b.n	8008e2a <color+0x12a>
	else if(strcmp(color_input, "paars")==0) return paars;
 8008e16:	4916      	ldr	r1, [pc, #88]	; (8008e70 <color+0x170>)
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f7f7 f9d5 	bl	80001c8 <strcmp>
 8008e1e:	4603      	mov	r3, r0
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d101      	bne.n	8008e28 <color+0x128>
 8008e24:	2350      	movs	r3, #80	; 0x50
 8008e26:	e000      	b.n	8008e2a <color+0x12a>
	else return paars;
 8008e28:	2350      	movs	r3, #80	; 0x50
};
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	08009eb8 	.word	0x08009eb8
 8008e38:	08009ec0 	.word	0x08009ec0
 8008e3c:	08009ec8 	.word	0x08009ec8
 8008e40:	08009ed4 	.word	0x08009ed4
 8008e44:	08009edc 	.word	0x08009edc
 8008e48:	08009ee8 	.word	0x08009ee8
 8008e4c:	08009ef0 	.word	0x08009ef0
 8008e50:	08009efc 	.word	0x08009efc
 8008e54:	08009f00 	.word	0x08009f00
 8008e58:	08009f08 	.word	0x08009f08
 8008e5c:	08009f14 	.word	0x08009f14
 8008e60:	08009f1c 	.word	0x08009f1c
 8008e64:	08009f2c 	.word	0x08009f2c
 8008e68:	08009f34 	.word	0x08009f34
 8008e6c:	08009f3c 	.word	0x08009f3c
 8008e70:	08009f44 	.word	0x08009f44

08008e74 <func_chooser>:


void func_chooser()
{
 8008e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e78:	b08c      	sub	sp, #48	; 0x30
 8008e7a:	af04      	add	r7, sp, #16
	if(!strcmp(clearscrn_args.function,"clearscherm"))
 8008e7c:	49aa      	ldr	r1, [pc, #680]	; (8009128 <func_chooser+0x2b4>)
 8008e7e:	48ab      	ldr	r0, [pc, #684]	; (800912c <func_chooser+0x2b8>)
 8008e80:	f7f7 f9a2 	bl	80001c8 <strcmp>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d11f      	bne.n	8008eca <func_chooser+0x56>
	{
		UART_puts("function = "); UART_puts(clearscrn_args.function); UART_puts("\r");
 8008e8a:	48a9      	ldr	r0, [pc, #676]	; (8009130 <func_chooser+0x2bc>)
 8008e8c:	f7ff fb66 	bl	800855c <UART_puts>
 8008e90:	48a6      	ldr	r0, [pc, #664]	; (800912c <func_chooser+0x2b8>)
 8008e92:	f7ff fb63 	bl	800855c <UART_puts>
 8008e96:	48a7      	ldr	r0, [pc, #668]	; (8009134 <func_chooser+0x2c0>)
 8008e98:	f7ff fb60 	bl	800855c <UART_puts>
		clr_screen(color(clearscrn_args.color));
 8008e9c:	48a6      	ldr	r0, [pc, #664]	; (8009138 <func_chooser+0x2c4>)
 8008e9e:	f7ff ff2f 	bl	8008d00 <color>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f7f7 fd97 	bl	80009da <clr_screen>

		for(int i=0;i<sizeof(clearscrn_args.function);i++)
 8008eac:	2300      	movs	r3, #0
 8008eae:	61fb      	str	r3, [r7, #28]
 8008eb0:	e007      	b.n	8008ec2 <func_chooser+0x4e>
			clearscrn_args.function[i] = 0;
 8008eb2:	4a9e      	ldr	r2, [pc, #632]	; (800912c <func_chooser+0x2b8>)
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	2200      	movs	r2, #0
 8008eba:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<sizeof(clearscrn_args.function);i++)
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	61fb      	str	r3, [r7, #28]
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	2b09      	cmp	r3, #9
 8008ec6:	d9f4      	bls.n	8008eb2 <func_chooser+0x3e>
	else
	{
		// Error handling
		UART_puts("error handling");
	}
}
 8008ec8:	e1df      	b.n	800928a <func_chooser+0x416>
	else if(!strcmp(line_args.function,"lijn"))
 8008eca:	499c      	ldr	r1, [pc, #624]	; (800913c <func_chooser+0x2c8>)
 8008ecc:	489c      	ldr	r0, [pc, #624]	; (8009140 <func_chooser+0x2cc>)
 8008ece:	f7f7 f97b 	bl	80001c8 <strcmp>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d137      	bne.n	8008f48 <func_chooser+0xd4>
		UART_puts("function = "); UART_puts(line_args.function); UART_puts("\r");
 8008ed8:	4895      	ldr	r0, [pc, #596]	; (8009130 <func_chooser+0x2bc>)
 8008eda:	f7ff fb3f 	bl	800855c <UART_puts>
 8008ede:	4898      	ldr	r0, [pc, #608]	; (8009140 <func_chooser+0x2cc>)
 8008ee0:	f7ff fb3c 	bl	800855c <UART_puts>
 8008ee4:	4893      	ldr	r0, [pc, #588]	; (8009134 <func_chooser+0x2c0>)
 8008ee6:	f7ff fb39 	bl	800855c <UART_puts>
		draw_line(atoi(line_args.x1),atoi(line_args.y1),atoi(line_args.x2),atoi(line_args.y2),atoi(line_args.thickness),color(line_args.color));
 8008eea:	4896      	ldr	r0, [pc, #600]	; (8009144 <func_chooser+0x2d0>)
 8008eec:	f000 fafe 	bl	80094ec <atoi>
 8008ef0:	4605      	mov	r5, r0
 8008ef2:	4895      	ldr	r0, [pc, #596]	; (8009148 <func_chooser+0x2d4>)
 8008ef4:	f000 fafa 	bl	80094ec <atoi>
 8008ef8:	4606      	mov	r6, r0
 8008efa:	4894      	ldr	r0, [pc, #592]	; (800914c <func_chooser+0x2d8>)
 8008efc:	f000 faf6 	bl	80094ec <atoi>
 8008f00:	4680      	mov	r8, r0
 8008f02:	4893      	ldr	r0, [pc, #588]	; (8009150 <func_chooser+0x2dc>)
 8008f04:	f000 faf2 	bl	80094ec <atoi>
 8008f08:	4681      	mov	r9, r0
 8008f0a:	4892      	ldr	r0, [pc, #584]	; (8009154 <func_chooser+0x2e0>)
 8008f0c:	f000 faee 	bl	80094ec <atoi>
 8008f10:	4604      	mov	r4, r0
 8008f12:	4891      	ldr	r0, [pc, #580]	; (8009158 <func_chooser+0x2e4>)
 8008f14:	f7ff fef4 	bl	8008d00 <color>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	9301      	str	r3, [sp, #4]
 8008f1c:	9400      	str	r4, [sp, #0]
 8008f1e:	464b      	mov	r3, r9
 8008f20:	4642      	mov	r2, r8
 8008f22:	4631      	mov	r1, r6
 8008f24:	4628      	mov	r0, r5
 8008f26:	f7fd fd29 	bl	800697c <draw_line>
		for(int i=0;i<sizeof(line_args.function);i++)
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	61bb      	str	r3, [r7, #24]
 8008f2e:	e007      	b.n	8008f40 <func_chooser+0xcc>
			line_args.function[i] = 0;
 8008f30:	4a83      	ldr	r2, [pc, #524]	; (8009140 <func_chooser+0x2cc>)
 8008f32:	69bb      	ldr	r3, [r7, #24]
 8008f34:	4413      	add	r3, r2
 8008f36:	2200      	movs	r2, #0
 8008f38:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<sizeof(line_args.function);i++)
 8008f3a:	69bb      	ldr	r3, [r7, #24]
 8008f3c:	3301      	adds	r3, #1
 8008f3e:	61bb      	str	r3, [r7, #24]
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	2b09      	cmp	r3, #9
 8008f44:	d9f4      	bls.n	8008f30 <func_chooser+0xbc>
}
 8008f46:	e1a0      	b.n	800928a <func_chooser+0x416>
	else if(!strcmp(ellips_args.function,"ellips"))
 8008f48:	4984      	ldr	r1, [pc, #528]	; (800915c <func_chooser+0x2e8>)
 8008f4a:	4885      	ldr	r0, [pc, #532]	; (8009160 <func_chooser+0x2ec>)
 8008f4c:	f7f7 f93c 	bl	80001c8 <strcmp>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d132      	bne.n	8008fbc <func_chooser+0x148>
		UART_puts("function = "); UART_puts(ellips_args.function); UART_puts("\r");
 8008f56:	4876      	ldr	r0, [pc, #472]	; (8009130 <func_chooser+0x2bc>)
 8008f58:	f7ff fb00 	bl	800855c <UART_puts>
 8008f5c:	4880      	ldr	r0, [pc, #512]	; (8009160 <func_chooser+0x2ec>)
 8008f5e:	f7ff fafd 	bl	800855c <UART_puts>
 8008f62:	4874      	ldr	r0, [pc, #464]	; (8009134 <func_chooser+0x2c0>)
 8008f64:	f7ff fafa 	bl	800855c <UART_puts>
		draw_ellips(atoi(ellips_args.x_center),atoi(ellips_args.y_center),atoi(ellips_args.x_rad),atoi(ellips_args.y_rad),color(ellips_args.color));
 8008f68:	487e      	ldr	r0, [pc, #504]	; (8009164 <func_chooser+0x2f0>)
 8008f6a:	f000 fabf 	bl	80094ec <atoi>
 8008f6e:	4604      	mov	r4, r0
 8008f70:	487d      	ldr	r0, [pc, #500]	; (8009168 <func_chooser+0x2f4>)
 8008f72:	f000 fabb 	bl	80094ec <atoi>
 8008f76:	4605      	mov	r5, r0
 8008f78:	487c      	ldr	r0, [pc, #496]	; (800916c <func_chooser+0x2f8>)
 8008f7a:	f000 fab7 	bl	80094ec <atoi>
 8008f7e:	4606      	mov	r6, r0
 8008f80:	487b      	ldr	r0, [pc, #492]	; (8009170 <func_chooser+0x2fc>)
 8008f82:	f000 fab3 	bl	80094ec <atoi>
 8008f86:	4680      	mov	r8, r0
 8008f88:	487a      	ldr	r0, [pc, #488]	; (8009174 <func_chooser+0x300>)
 8008f8a:	f7ff feb9 	bl	8008d00 <color>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	9300      	str	r3, [sp, #0]
 8008f92:	4643      	mov	r3, r8
 8008f94:	4632      	mov	r2, r6
 8008f96:	4629      	mov	r1, r5
 8008f98:	4620      	mov	r0, r4
 8008f9a:	f7f7 fd2b 	bl	80009f4 <draw_ellips>
		for(int i=0;i<sizeof(ellips_args.function);i++)
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	617b      	str	r3, [r7, #20]
 8008fa2:	e007      	b.n	8008fb4 <func_chooser+0x140>
			ellips_args.function[i] = 0;
 8008fa4:	4a6e      	ldr	r2, [pc, #440]	; (8009160 <func_chooser+0x2ec>)
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	4413      	add	r3, r2
 8008faa:	2200      	movs	r2, #0
 8008fac:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<sizeof(ellips_args.function);i++)
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	3301      	adds	r3, #1
 8008fb2:	617b      	str	r3, [r7, #20]
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	2b09      	cmp	r3, #9
 8008fb8:	d9f4      	bls.n	8008fa4 <func_chooser+0x130>
}
 8008fba:	e166      	b.n	800928a <func_chooser+0x416>
	else if(!strcmp(rectangle_args.function,"rechthoek"))
 8008fbc:	496e      	ldr	r1, [pc, #440]	; (8009178 <func_chooser+0x304>)
 8008fbe:	486f      	ldr	r0, [pc, #444]	; (800917c <func_chooser+0x308>)
 8008fc0:	f7f7 f902 	bl	80001c8 <strcmp>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d132      	bne.n	8009030 <func_chooser+0x1bc>
		UART_puts("function = "); UART_puts(rectangle_args.function); UART_puts("\r");
 8008fca:	4859      	ldr	r0, [pc, #356]	; (8009130 <func_chooser+0x2bc>)
 8008fcc:	f7ff fac6 	bl	800855c <UART_puts>
 8008fd0:	486a      	ldr	r0, [pc, #424]	; (800917c <func_chooser+0x308>)
 8008fd2:	f7ff fac3 	bl	800855c <UART_puts>
 8008fd6:	4857      	ldr	r0, [pc, #348]	; (8009134 <func_chooser+0x2c0>)
 8008fd8:	f7ff fac0 	bl	800855c <UART_puts>
		draw_rectangle(atoi(rectangle_args.x1),atoi(rectangle_args.y1),atoi(rectangle_args.x2),atoi(rectangle_args.y2),color(rectangle_args.color));
 8008fdc:	4868      	ldr	r0, [pc, #416]	; (8009180 <func_chooser+0x30c>)
 8008fde:	f000 fa85 	bl	80094ec <atoi>
 8008fe2:	4604      	mov	r4, r0
 8008fe4:	4867      	ldr	r0, [pc, #412]	; (8009184 <func_chooser+0x310>)
 8008fe6:	f000 fa81 	bl	80094ec <atoi>
 8008fea:	4605      	mov	r5, r0
 8008fec:	4866      	ldr	r0, [pc, #408]	; (8009188 <func_chooser+0x314>)
 8008fee:	f000 fa7d 	bl	80094ec <atoi>
 8008ff2:	4606      	mov	r6, r0
 8008ff4:	4865      	ldr	r0, [pc, #404]	; (800918c <func_chooser+0x318>)
 8008ff6:	f000 fa79 	bl	80094ec <atoi>
 8008ffa:	4680      	mov	r8, r0
 8008ffc:	4864      	ldr	r0, [pc, #400]	; (8009190 <func_chooser+0x31c>)
 8008ffe:	f7ff fe7f 	bl	8008d00 <color>
 8009002:	4603      	mov	r3, r0
 8009004:	9300      	str	r3, [sp, #0]
 8009006:	4643      	mov	r3, r8
 8009008:	4632      	mov	r2, r6
 800900a:	4629      	mov	r1, r5
 800900c:	4620      	mov	r0, r4
 800900e:	f7fd fe8f 	bl	8006d30 <draw_rectangle>
		for(int i=0;i<sizeof(rectangle_args.function);i++)
 8009012:	2300      	movs	r3, #0
 8009014:	613b      	str	r3, [r7, #16]
 8009016:	e007      	b.n	8009028 <func_chooser+0x1b4>
			rectangle_args.function[i] = 0;
 8009018:	4a58      	ldr	r2, [pc, #352]	; (800917c <func_chooser+0x308>)
 800901a:	693b      	ldr	r3, [r7, #16]
 800901c:	4413      	add	r3, r2
 800901e:	2200      	movs	r2, #0
 8009020:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<sizeof(rectangle_args.function);i++)
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	3301      	adds	r3, #1
 8009026:	613b      	str	r3, [r7, #16]
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	2b09      	cmp	r3, #9
 800902c:	d9f4      	bls.n	8009018 <func_chooser+0x1a4>
}
 800902e:	e12c      	b.n	800928a <func_chooser+0x416>
	else if(!strcmp(triangle_args.function,"driehoek"))
 8009030:	4958      	ldr	r1, [pc, #352]	; (8009194 <func_chooser+0x320>)
 8009032:	4859      	ldr	r0, [pc, #356]	; (8009198 <func_chooser+0x324>)
 8009034:	f7f7 f8c8 	bl	80001c8 <strcmp>
 8009038:	4603      	mov	r3, r0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d13c      	bne.n	80090b8 <func_chooser+0x244>
		UART_puts("function = "); UART_puts(triangle_args.function); UART_puts("\r");
 800903e:	483c      	ldr	r0, [pc, #240]	; (8009130 <func_chooser+0x2bc>)
 8009040:	f7ff fa8c 	bl	800855c <UART_puts>
 8009044:	4854      	ldr	r0, [pc, #336]	; (8009198 <func_chooser+0x324>)
 8009046:	f7ff fa89 	bl	800855c <UART_puts>
 800904a:	483a      	ldr	r0, [pc, #232]	; (8009134 <func_chooser+0x2c0>)
 800904c:	f7ff fa86 	bl	800855c <UART_puts>
		draw_triangle(atoi(triangle_args.x1),atoi(triangle_args.y1),atoi(triangle_args.x2),atoi(triangle_args.y2),atoi(triangle_args.xtop),atoi(triangle_args.ytop),color(triangle_args.color));
 8009050:	4852      	ldr	r0, [pc, #328]	; (800919c <func_chooser+0x328>)
 8009052:	f000 fa4b 	bl	80094ec <atoi>
 8009056:	4606      	mov	r6, r0
 8009058:	4851      	ldr	r0, [pc, #324]	; (80091a0 <func_chooser+0x32c>)
 800905a:	f000 fa47 	bl	80094ec <atoi>
 800905e:	4680      	mov	r8, r0
 8009060:	4850      	ldr	r0, [pc, #320]	; (80091a4 <func_chooser+0x330>)
 8009062:	f000 fa43 	bl	80094ec <atoi>
 8009066:	4681      	mov	r9, r0
 8009068:	484f      	ldr	r0, [pc, #316]	; (80091a8 <func_chooser+0x334>)
 800906a:	f000 fa3f 	bl	80094ec <atoi>
 800906e:	4682      	mov	sl, r0
 8009070:	484e      	ldr	r0, [pc, #312]	; (80091ac <func_chooser+0x338>)
 8009072:	f000 fa3b 	bl	80094ec <atoi>
 8009076:	4604      	mov	r4, r0
 8009078:	484d      	ldr	r0, [pc, #308]	; (80091b0 <func_chooser+0x33c>)
 800907a:	f000 fa37 	bl	80094ec <atoi>
 800907e:	4605      	mov	r5, r0
 8009080:	484c      	ldr	r0, [pc, #304]	; (80091b4 <func_chooser+0x340>)
 8009082:	f7ff fe3d 	bl	8008d00 <color>
 8009086:	4603      	mov	r3, r0
 8009088:	9302      	str	r3, [sp, #8]
 800908a:	9501      	str	r5, [sp, #4]
 800908c:	9400      	str	r4, [sp, #0]
 800908e:	4653      	mov	r3, sl
 8009090:	464a      	mov	r2, r9
 8009092:	4641      	mov	r1, r8
 8009094:	4630      	mov	r0, r6
 8009096:	f7fd fe99 	bl	8006dcc <draw_triangle>
		for(int i=0;i<sizeof(triangle_args.function);i++)
 800909a:	2300      	movs	r3, #0
 800909c:	60fb      	str	r3, [r7, #12]
 800909e:	e007      	b.n	80090b0 <func_chooser+0x23c>
			triangle_args.function[i] = 0;
 80090a0:	4a3d      	ldr	r2, [pc, #244]	; (8009198 <func_chooser+0x324>)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	4413      	add	r3, r2
 80090a6:	2200      	movs	r2, #0
 80090a8:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<sizeof(triangle_args.function);i++)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	3301      	adds	r3, #1
 80090ae:	60fb      	str	r3, [r7, #12]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2b09      	cmp	r3, #9
 80090b4:	d9f4      	bls.n	80090a0 <func_chooser+0x22c>
}
 80090b6:	e0e8      	b.n	800928a <func_chooser+0x416>
	else if(!strcmp(text_args.function,"tekst"))
 80090b8:	493f      	ldr	r1, [pc, #252]	; (80091b8 <func_chooser+0x344>)
 80090ba:	4840      	ldr	r0, [pc, #256]	; (80091bc <func_chooser+0x348>)
 80090bc:	f7f7 f884 	bl	80001c8 <strcmp>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f040 8084 	bne.w	80091d0 <func_chooser+0x35c>
		UART_puts("function = "); UART_puts(text_args.function); UART_puts("\r");
 80090c8:	4819      	ldr	r0, [pc, #100]	; (8009130 <func_chooser+0x2bc>)
 80090ca:	f7ff fa47 	bl	800855c <UART_puts>
 80090ce:	483b      	ldr	r0, [pc, #236]	; (80091bc <func_chooser+0x348>)
 80090d0:	f7ff fa44 	bl	800855c <UART_puts>
 80090d4:	4817      	ldr	r0, [pc, #92]	; (8009134 <func_chooser+0x2c0>)
 80090d6:	f7ff fa41 	bl	800855c <UART_puts>
		for(int i=0;i<sizeof(text_args.function);i++)
 80090da:	2300      	movs	r3, #0
 80090dc:	60bb      	str	r3, [r7, #8]
 80090de:	e007      	b.n	80090f0 <func_chooser+0x27c>
			text_args.function[i] = 0;
 80090e0:	4a36      	ldr	r2, [pc, #216]	; (80091bc <func_chooser+0x348>)
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	4413      	add	r3, r2
 80090e6:	2200      	movs	r2, #0
 80090e8:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<sizeof(text_args.function);i++)
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	3301      	adds	r3, #1
 80090ee:	60bb      	str	r3, [r7, #8]
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	2b09      	cmp	r3, #9
 80090f4:	d9f4      	bls.n	80090e0 <func_chooser+0x26c>
		draw_text(atoi(text_args.x1),atoi(text_args.y1),text_args.text_in,color(clearscrn_args.color),color(text_args.color));
 80090f6:	4832      	ldr	r0, [pc, #200]	; (80091c0 <func_chooser+0x34c>)
 80090f8:	f000 f9f8 	bl	80094ec <atoi>
 80090fc:	4604      	mov	r4, r0
 80090fe:	4831      	ldr	r0, [pc, #196]	; (80091c4 <func_chooser+0x350>)
 8009100:	f000 f9f4 	bl	80094ec <atoi>
 8009104:	4605      	mov	r5, r0
 8009106:	480c      	ldr	r0, [pc, #48]	; (8009138 <func_chooser+0x2c4>)
 8009108:	f7ff fdfa 	bl	8008d00 <color>
 800910c:	4606      	mov	r6, r0
 800910e:	482e      	ldr	r0, [pc, #184]	; (80091c8 <func_chooser+0x354>)
 8009110:	f7ff fdf6 	bl	8008d00 <color>
 8009114:	4603      	mov	r3, r0
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	4633      	mov	r3, r6
 800911a:	4a2c      	ldr	r2, [pc, #176]	; (80091cc <func_chooser+0x358>)
 800911c:	4629      	mov	r1, r5
 800911e:	4620      	mov	r0, r4
 8009120:	f7fd fe2e 	bl	8006d80 <draw_text>
}
 8009124:	e0b1      	b.n	800928a <func_chooser+0x416>
 8009126:	bf00      	nop
 8009128:	08009f4c 	.word	0x08009f4c
 800912c:	200006fc 	.word	0x200006fc
 8009130:	08009f58 	.word	0x08009f58
 8009134:	08009f64 	.word	0x08009f64
 8009138:	20000779 	.word	0x20000779
 800913c:	08009f68 	.word	0x08009f68
 8009140:	200135a8 	.word	0x200135a8
 8009144:	200135b2 	.word	0x200135b2
 8009148:	200135b7 	.word	0x200135b7
 800914c:	200135bc 	.word	0x200135bc
 8009150:	200135c1 	.word	0x200135c1
 8009154:	200135e4 	.word	0x200135e4
 8009158:	20013625 	.word	0x20013625
 800915c:	08009f70 	.word	0x08009f70
 8009160:	200137f8 	.word	0x200137f8
 8009164:	20013820 	.word	0x20013820
 8009168:	20013825 	.word	0x20013825
 800916c:	2001382a 	.word	0x2001382a
 8009170:	2001382f 	.word	0x2001382f
 8009174:	20013875 	.word	0x20013875
 8009178:	08009f78 	.word	0x08009f78
 800917c:	20013480 	.word	0x20013480
 8009180:	2001348a 	.word	0x2001348a
 8009184:	2001348f 	.word	0x2001348f
 8009188:	20013494 	.word	0x20013494
 800918c:	20013499 	.word	0x20013499
 8009190:	200134fd 	.word	0x200134fd
 8009194:	08009f84 	.word	0x08009f84
 8009198:	20013514 	.word	0x20013514
 800919c:	2001351e 	.word	0x2001351e
 80091a0:	20013523 	.word	0x20013523
 80091a4:	20013528 	.word	0x20013528
 80091a8:	2001352d 	.word	0x2001352d
 80091ac:	20013532 	.word	0x20013532
 80091b0:	20013537 	.word	0x20013537
 80091b4:	20013591 	.word	0x20013591
 80091b8:	08009f90 	.word	0x08009f90
 80091bc:	200136d0 	.word	0x200136d0
 80091c0:	200136da 	.word	0x200136da
 80091c4:	200136df 	.word	0x200136df
 80091c8:	2001374d 	.word	0x2001374d
 80091cc:	20013711 	.word	0x20013711
	else if(!strcmp(bitmap_args.function,"bitmap"))
 80091d0:	4930      	ldr	r1, [pc, #192]	; (8009294 <func_chooser+0x420>)
 80091d2:	4831      	ldr	r0, [pc, #196]	; (8009298 <func_chooser+0x424>)
 80091d4:	f7f6 fff8 	bl	80001c8 <strcmp>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d12c      	bne.n	8009238 <func_chooser+0x3c4>
		UART_puts("function = "); UART_puts(bitmap_args.function); UART_puts("\r");
 80091de:	482f      	ldr	r0, [pc, #188]	; (800929c <func_chooser+0x428>)
 80091e0:	f7ff f9bc 	bl	800855c <UART_puts>
 80091e4:	482c      	ldr	r0, [pc, #176]	; (8009298 <func_chooser+0x424>)
 80091e6:	f7ff f9b9 	bl	800855c <UART_puts>
 80091ea:	482d      	ldr	r0, [pc, #180]	; (80092a0 <func_chooser+0x42c>)
 80091ec:	f7ff f9b6 	bl	800855c <UART_puts>
		draw_bitmap(atoi(bitmap_args.bitmap_nr),atoi(bitmap_args.x1),atoi(bitmap_args.y1),color(clearscrn_args.color));
 80091f0:	482c      	ldr	r0, [pc, #176]	; (80092a4 <func_chooser+0x430>)
 80091f2:	f000 f97b 	bl	80094ec <atoi>
 80091f6:	4604      	mov	r4, r0
 80091f8:	482b      	ldr	r0, [pc, #172]	; (80092a8 <func_chooser+0x434>)
 80091fa:	f000 f977 	bl	80094ec <atoi>
 80091fe:	4605      	mov	r5, r0
 8009200:	482a      	ldr	r0, [pc, #168]	; (80092ac <func_chooser+0x438>)
 8009202:	f000 f973 	bl	80094ec <atoi>
 8009206:	4606      	mov	r6, r0
 8009208:	4829      	ldr	r0, [pc, #164]	; (80092b0 <func_chooser+0x43c>)
 800920a:	f7ff fd79 	bl	8008d00 <color>
 800920e:	4603      	mov	r3, r0
 8009210:	4632      	mov	r2, r6
 8009212:	4629      	mov	r1, r5
 8009214:	4620      	mov	r0, r4
 8009216:	f7f7 fbd3 	bl	80009c0 <draw_bitmap>
		for(int i=0;i<sizeof(bitmap_args.function);i++)
 800921a:	2300      	movs	r3, #0
 800921c:	607b      	str	r3, [r7, #4]
 800921e:	e007      	b.n	8009230 <func_chooser+0x3bc>
			bitmap_args.function[i] = 0;
 8009220:	4a1d      	ldr	r2, [pc, #116]	; (8009298 <func_chooser+0x424>)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4413      	add	r3, r2
 8009226:	2200      	movs	r2, #0
 8009228:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<sizeof(bitmap_args.function);i++)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	3301      	adds	r3, #1
 800922e:	607b      	str	r3, [r7, #4]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2b09      	cmp	r3, #9
 8009234:	d9f4      	bls.n	8009220 <func_chooser+0x3ac>
}
 8009236:	e028      	b.n	800928a <func_chooser+0x416>
	else if(!strcmp(wait_args.function,"wacht"))
 8009238:	491e      	ldr	r1, [pc, #120]	; (80092b4 <func_chooser+0x440>)
 800923a:	481f      	ldr	r0, [pc, #124]	; (80092b8 <func_chooser+0x444>)
 800923c:	f7f6 ffc4 	bl	80001c8 <strcmp>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d11e      	bne.n	8009284 <func_chooser+0x410>
		UART_puts("function = "); UART_puts(wait_args.function); UART_puts("\r");
 8009246:	4815      	ldr	r0, [pc, #84]	; (800929c <func_chooser+0x428>)
 8009248:	f7ff f988 	bl	800855c <UART_puts>
 800924c:	481a      	ldr	r0, [pc, #104]	; (80092b8 <func_chooser+0x444>)
 800924e:	f7ff f985 	bl	800855c <UART_puts>
 8009252:	4813      	ldr	r0, [pc, #76]	; (80092a0 <func_chooser+0x42c>)
 8009254:	f7ff f982 	bl	800855c <UART_puts>
		for(int i=0;i<sizeof(wait_args.function);i++)
 8009258:	2300      	movs	r3, #0
 800925a:	603b      	str	r3, [r7, #0]
 800925c:	e007      	b.n	800926e <func_chooser+0x3fa>
			wait_args.function[i] = 0;
 800925e:	4a16      	ldr	r2, [pc, #88]	; (80092b8 <func_chooser+0x444>)
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	4413      	add	r3, r2
 8009264:	2200      	movs	r2, #0
 8009266:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<sizeof(wait_args.function);i++)
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	3301      	adds	r3, #1
 800926c:	603b      	str	r3, [r7, #0]
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	2b09      	cmp	r3, #9
 8009272:	d9f4      	bls.n	800925e <func_chooser+0x3ea>
		wait_ms(atoi(wait_args.time_ms));
 8009274:	4811      	ldr	r0, [pc, #68]	; (80092bc <func_chooser+0x448>)
 8009276:	f000 f939 	bl	80094ec <atoi>
 800927a:	4603      	mov	r3, r0
 800927c:	4618      	mov	r0, r3
 800927e:	f7fd fdce 	bl	8006e1e <wait_ms>
}
 8009282:	e002      	b.n	800928a <func_chooser+0x416>
		UART_puts("error handling");
 8009284:	480e      	ldr	r0, [pc, #56]	; (80092c0 <func_chooser+0x44c>)
 8009286:	f7ff f969 	bl	800855c <UART_puts>
}
 800928a:	bf00      	nop
 800928c:	3720      	adds	r7, #32
 800928e:	46bd      	mov	sp, r7
 8009290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009294:	08009f98 	.word	0x08009f98
 8009298:	2001363c 	.word	0x2001363c
 800929c:	08009f58 	.word	0x08009f58
 80092a0:	08009f64 	.word	0x08009f64
 80092a4:	200136af 	.word	0x200136af
 80092a8:	20013646 	.word	0x20013646
 80092ac:	2001364b 	.word	0x2001364b
 80092b0:	20000779 	.word	0x20000779
 80092b4:	08009fa0 	.word	0x08009fa0
 80092b8:	20013764 	.word	0x20013764
 80092bc:	200137dc 	.word	0x200137dc
 80092c0:	08009fa8 	.word	0x08009fa8

080092c4 <main>:
//--------------------------------------------------------------

#include "main.h"

int main(void)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	af00      	add	r7, sp, #0
	//_____________________________INIT______________________________________________
	SystemInit(); // System speed to 168MHz
 80092c8:	f000 f85e 	bl	8009388 <SystemInit>
	IO_Init();
 80092cc:	f7ff fa00 	bl	80086d0 <IO_Init>

	while(1)
	{
		input_uart();
 80092d0:	f7ff fa08 	bl	80086e4 <input_uart>
 80092d4:	e7fc      	b.n	80092d0 <main+0xc>
	...

080092d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80092d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009310 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80092dc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80092de:	e003      	b.n	80092e8 <LoopCopyDataInit>

080092e0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80092e0:	4b0c      	ldr	r3, [pc, #48]	; (8009314 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80092e2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80092e4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80092e6:	3104      	adds	r1, #4

080092e8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80092e8:	480b      	ldr	r0, [pc, #44]	; (8009318 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80092ea:	4b0c      	ldr	r3, [pc, #48]	; (800931c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80092ec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80092ee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80092f0:	d3f6      	bcc.n	80092e0 <CopyDataInit>
  ldr  r2, =_sbss
 80092f2:	4a0b      	ldr	r2, [pc, #44]	; (8009320 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80092f4:	e002      	b.n	80092fc <LoopFillZerobss>

080092f6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80092f6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80092f8:	f842 3b04 	str.w	r3, [r2], #4

080092fc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80092fc:	4b09      	ldr	r3, [pc, #36]	; (8009324 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80092fe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009300:	d3f9      	bcc.n	80092f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009302:	f000 f841 	bl	8009388 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009306:	f000 f8f5 	bl	80094f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800930a:	f7ff ffdb 	bl	80092c4 <main>
  bx  lr    
 800930e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8009310:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8009314:	0800a0cc 	.word	0x0800a0cc
  ldr  r0, =_sdata
 8009318:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800931c:	20000680 	.word	0x20000680
  ldr  r2, =_sbss
 8009320:	20000680 	.word	0x20000680
  ldr  r3, = _ebss
 8009324:	2001398c 	.word	0x2001398c

08009328 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009328:	e7fe      	b.n	8009328 <ADC_IRQHandler>

0800932a <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800932a:	b480      	push	{r7}
 800932c:	af00      	add	r7, sp, #0
}
 800932e:	bf00      	nop
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8009338:	b480      	push	{r7}
 800933a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800933c:	e7fe      	b.n	800933c <HardFault_Handler+0x4>

0800933e <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800933e:	b480      	push	{r7}
 8009340:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8009342:	e7fe      	b.n	8009342 <MemManage_Handler+0x4>

08009344 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8009344:	b480      	push	{r7}
 8009346:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8009348:	e7fe      	b.n	8009348 <BusFault_Handler+0x4>

0800934a <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800934a:	b480      	push	{r7}
 800934c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800934e:	e7fe      	b.n	800934e <UsageFault_Handler+0x4>

08009350 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8009350:	b480      	push	{r7}
 8009352:	af00      	add	r7, sp, #0
}
 8009354:	bf00      	nop
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr

0800935e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800935e:	b480      	push	{r7}
 8009360:	af00      	add	r7, sp, #0
}
 8009362:	bf00      	nop
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800936c:	b480      	push	{r7}
 800936e:	af00      	add	r7, sp, #0
}
 8009370:	bf00      	nop
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr

0800937a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800937a:	b480      	push	{r7}
 800937c:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800937e:	bf00      	nop
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800938c:	4a16      	ldr	r2, [pc, #88]	; (80093e8 <SystemInit+0x60>)
 800938e:	4b16      	ldr	r3, [pc, #88]	; (80093e8 <SystemInit+0x60>)
 8009390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009398:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800939c:	4a13      	ldr	r2, [pc, #76]	; (80093ec <SystemInit+0x64>)
 800939e:	4b13      	ldr	r3, [pc, #76]	; (80093ec <SystemInit+0x64>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f043 0301 	orr.w	r3, r3, #1
 80093a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80093a8:	4b10      	ldr	r3, [pc, #64]	; (80093ec <SystemInit+0x64>)
 80093aa:	2200      	movs	r2, #0
 80093ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80093ae:	4a0f      	ldr	r2, [pc, #60]	; (80093ec <SystemInit+0x64>)
 80093b0:	4b0e      	ldr	r3, [pc, #56]	; (80093ec <SystemInit+0x64>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80093b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093bc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80093be:	4b0b      	ldr	r3, [pc, #44]	; (80093ec <SystemInit+0x64>)
 80093c0:	4a0b      	ldr	r2, [pc, #44]	; (80093f0 <SystemInit+0x68>)
 80093c2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80093c4:	4a09      	ldr	r2, [pc, #36]	; (80093ec <SystemInit+0x64>)
 80093c6:	4b09      	ldr	r3, [pc, #36]	; (80093ec <SystemInit+0x64>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80093ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80093d0:	4b06      	ldr	r3, [pc, #24]	; (80093ec <SystemInit+0x64>)
 80093d2:	2200      	movs	r2, #0
 80093d4:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80093d6:	f000 f80d 	bl	80093f4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80093da:	4b03      	ldr	r3, [pc, #12]	; (80093e8 <SystemInit+0x60>)
 80093dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80093e0:	609a      	str	r2, [r3, #8]
#endif
}
 80093e2:	bf00      	nop
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	e000ed00 	.word	0xe000ed00
 80093ec:	40023800 	.word	0x40023800
 80093f0:	24003010 	.word	0x24003010

080093f4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80093fa:	2300      	movs	r3, #0
 80093fc:	607b      	str	r3, [r7, #4]
 80093fe:	2300      	movs	r3, #0
 8009400:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8009402:	4a36      	ldr	r2, [pc, #216]	; (80094dc <SetSysClock+0xe8>)
 8009404:	4b35      	ldr	r3, [pc, #212]	; (80094dc <SetSysClock+0xe8>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800940c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800940e:	4b33      	ldr	r3, [pc, #204]	; (80094dc <SetSysClock+0xe8>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009416:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	3301      	adds	r3, #1
 800941c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d103      	bne.n	800942c <SetSysClock+0x38>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800942a:	d1f0      	bne.n	800940e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800942c:	4b2b      	ldr	r3, [pc, #172]	; (80094dc <SetSysClock+0xe8>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009434:	2b00      	cmp	r3, #0
 8009436:	d002      	beq.n	800943e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8009438:	2301      	movs	r3, #1
 800943a:	603b      	str	r3, [r7, #0]
 800943c:	e001      	b.n	8009442 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800943e:	2300      	movs	r3, #0
 8009440:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d142      	bne.n	80094ce <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8009448:	4a24      	ldr	r2, [pc, #144]	; (80094dc <SetSysClock+0xe8>)
 800944a:	4b24      	ldr	r3, [pc, #144]	; (80094dc <SetSysClock+0xe8>)
 800944c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800944e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009452:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8009454:	4a22      	ldr	r2, [pc, #136]	; (80094e0 <SetSysClock+0xec>)
 8009456:	4b22      	ldr	r3, [pc, #136]	; (80094e0 <SetSysClock+0xec>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800945e:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8009460:	4a1e      	ldr	r2, [pc, #120]	; (80094dc <SetSysClock+0xe8>)
 8009462:	4b1e      	ldr	r3, [pc, #120]	; (80094dc <SetSysClock+0xe8>)
 8009464:	689b      	ldr	r3, [r3, #8]
 8009466:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8009468:	4a1c      	ldr	r2, [pc, #112]	; (80094dc <SetSysClock+0xe8>)
 800946a:	4b1c      	ldr	r3, [pc, #112]	; (80094dc <SetSysClock+0xe8>)
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009472:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8009474:	4a19      	ldr	r2, [pc, #100]	; (80094dc <SetSysClock+0xe8>)
 8009476:	4b19      	ldr	r3, [pc, #100]	; (80094dc <SetSysClock+0xe8>)
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800947e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8009480:	4b16      	ldr	r3, [pc, #88]	; (80094dc <SetSysClock+0xe8>)
 8009482:	4a18      	ldr	r2, [pc, #96]	; (80094e4 <SetSysClock+0xf0>)
 8009484:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8009486:	4a15      	ldr	r2, [pc, #84]	; (80094dc <SetSysClock+0xe8>)
 8009488:	4b14      	ldr	r3, [pc, #80]	; (80094dc <SetSysClock+0xe8>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009490:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8009492:	bf00      	nop
 8009494:	4b11      	ldr	r3, [pc, #68]	; (80094dc <SetSysClock+0xe8>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800949c:	2b00      	cmp	r3, #0
 800949e:	d0f9      	beq.n	8009494 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80094a0:	4b11      	ldr	r3, [pc, #68]	; (80094e8 <SetSysClock+0xf4>)
 80094a2:	f240 7205 	movw	r2, #1797	; 0x705
 80094a6:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80094a8:	4a0c      	ldr	r2, [pc, #48]	; (80094dc <SetSysClock+0xe8>)
 80094aa:	4b0c      	ldr	r3, [pc, #48]	; (80094dc <SetSysClock+0xe8>)
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	f023 0303 	bic.w	r3, r3, #3
 80094b2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80094b4:	4a09      	ldr	r2, [pc, #36]	; (80094dc <SetSysClock+0xe8>)
 80094b6:	4b09      	ldr	r3, [pc, #36]	; (80094dc <SetSysClock+0xe8>)
 80094b8:	689b      	ldr	r3, [r3, #8]
 80094ba:	f043 0302 	orr.w	r3, r3, #2
 80094be:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80094c0:	bf00      	nop
 80094c2:	4b06      	ldr	r3, [pc, #24]	; (80094dc <SetSysClock+0xe8>)
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	f003 030c 	and.w	r3, r3, #12
 80094ca:	2b08      	cmp	r3, #8
 80094cc:	d1f9      	bne.n	80094c2 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80094ce:	bf00      	nop
 80094d0:	370c      	adds	r7, #12
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop
 80094dc:	40023800 	.word	0x40023800
 80094e0:	40007000 	.word	0x40007000
 80094e4:	07405419 	.word	0x07405419
 80094e8:	40023c00 	.word	0x40023c00

080094ec <atoi>:
 80094ec:	220a      	movs	r2, #10
 80094ee:	2100      	movs	r1, #0
 80094f0:	f000 b902 	b.w	80096f8 <strtol>

080094f4 <__libc_init_array>:
 80094f4:	b570      	push	{r4, r5, r6, lr}
 80094f6:	4e0d      	ldr	r6, [pc, #52]	; (800952c <__libc_init_array+0x38>)
 80094f8:	4c0d      	ldr	r4, [pc, #52]	; (8009530 <__libc_init_array+0x3c>)
 80094fa:	1ba4      	subs	r4, r4, r6
 80094fc:	10a4      	asrs	r4, r4, #2
 80094fe:	2500      	movs	r5, #0
 8009500:	42a5      	cmp	r5, r4
 8009502:	d109      	bne.n	8009518 <__libc_init_array+0x24>
 8009504:	4e0b      	ldr	r6, [pc, #44]	; (8009534 <__libc_init_array+0x40>)
 8009506:	4c0c      	ldr	r4, [pc, #48]	; (8009538 <__libc_init_array+0x44>)
 8009508:	f000 fc84 	bl	8009e14 <_init>
 800950c:	1ba4      	subs	r4, r4, r6
 800950e:	10a4      	asrs	r4, r4, #2
 8009510:	2500      	movs	r5, #0
 8009512:	42a5      	cmp	r5, r4
 8009514:	d105      	bne.n	8009522 <__libc_init_array+0x2e>
 8009516:	bd70      	pop	{r4, r5, r6, pc}
 8009518:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800951c:	4798      	blx	r3
 800951e:	3501      	adds	r5, #1
 8009520:	e7ee      	b.n	8009500 <__libc_init_array+0xc>
 8009522:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009526:	4798      	blx	r3
 8009528:	3501      	adds	r5, #1
 800952a:	e7f2      	b.n	8009512 <__libc_init_array+0x1e>
 800952c:	0800a0c4 	.word	0x0800a0c4
 8009530:	0800a0c4 	.word	0x0800a0c4
 8009534:	0800a0c4 	.word	0x0800a0c4
 8009538:	0800a0c8 	.word	0x0800a0c8

0800953c <strcpy>:
 800953c:	4603      	mov	r3, r0
 800953e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009542:	f803 2b01 	strb.w	r2, [r3], #1
 8009546:	2a00      	cmp	r2, #0
 8009548:	d1f9      	bne.n	800953e <strcpy+0x2>
 800954a:	4770      	bx	lr

0800954c <strtok>:
 800954c:	4b14      	ldr	r3, [pc, #80]	; (80095a0 <strtok+0x54>)
 800954e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009552:	681d      	ldr	r5, [r3, #0]
 8009554:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
 8009558:	4606      	mov	r6, r0
 800955a:	460f      	mov	r7, r1
 800955c:	b9bc      	cbnz	r4, 800958e <strtok+0x42>
 800955e:	2050      	movs	r0, #80	; 0x50
 8009560:	f000 f8e4 	bl	800972c <malloc>
 8009564:	f8c5 00e8 	str.w	r0, [r5, #232]	; 0xe8
 8009568:	6004      	str	r4, [r0, #0]
 800956a:	6044      	str	r4, [r0, #4]
 800956c:	6084      	str	r4, [r0, #8]
 800956e:	60c4      	str	r4, [r0, #12]
 8009570:	6104      	str	r4, [r0, #16]
 8009572:	6144      	str	r4, [r0, #20]
 8009574:	6184      	str	r4, [r0, #24]
 8009576:	6284      	str	r4, [r0, #40]	; 0x28
 8009578:	62c4      	str	r4, [r0, #44]	; 0x2c
 800957a:	6304      	str	r4, [r0, #48]	; 0x30
 800957c:	6344      	str	r4, [r0, #52]	; 0x34
 800957e:	6384      	str	r4, [r0, #56]	; 0x38
 8009580:	63c4      	str	r4, [r0, #60]	; 0x3c
 8009582:	6404      	str	r4, [r0, #64]	; 0x40
 8009584:	6444      	str	r4, [r0, #68]	; 0x44
 8009586:	6484      	str	r4, [r0, #72]	; 0x48
 8009588:	64c4      	str	r4, [r0, #76]	; 0x4c
 800958a:	7704      	strb	r4, [r0, #28]
 800958c:	6244      	str	r4, [r0, #36]	; 0x24
 800958e:	f8d5 20e8 	ldr.w	r2, [r5, #232]	; 0xe8
 8009592:	4639      	mov	r1, r7
 8009594:	4630      	mov	r0, r6
 8009596:	2301      	movs	r3, #1
 8009598:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800959c:	f000 b802 	b.w	80095a4 <__strtok_r>
 80095a0:	20000010 	.word	0x20000010

080095a4 <__strtok_r>:
 80095a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095a6:	b918      	cbnz	r0, 80095b0 <__strtok_r+0xc>
 80095a8:	6810      	ldr	r0, [r2, #0]
 80095aa:	b908      	cbnz	r0, 80095b0 <__strtok_r+0xc>
 80095ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095ae:	4620      	mov	r0, r4
 80095b0:	4604      	mov	r4, r0
 80095b2:	460f      	mov	r7, r1
 80095b4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80095b8:	f817 6b01 	ldrb.w	r6, [r7], #1
 80095bc:	b91e      	cbnz	r6, 80095c6 <__strtok_r+0x22>
 80095be:	b965      	cbnz	r5, 80095da <__strtok_r+0x36>
 80095c0:	6015      	str	r5, [r2, #0]
 80095c2:	4628      	mov	r0, r5
 80095c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095c6:	42b5      	cmp	r5, r6
 80095c8:	d1f6      	bne.n	80095b8 <__strtok_r+0x14>
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d1ef      	bne.n	80095ae <__strtok_r+0xa>
 80095ce:	6014      	str	r4, [r2, #0]
 80095d0:	7003      	strb	r3, [r0, #0]
 80095d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095d4:	461c      	mov	r4, r3
 80095d6:	e00c      	b.n	80095f2 <__strtok_r+0x4e>
 80095d8:	b915      	cbnz	r5, 80095e0 <__strtok_r+0x3c>
 80095da:	f814 3b01 	ldrb.w	r3, [r4], #1
 80095de:	460e      	mov	r6, r1
 80095e0:	f816 5b01 	ldrb.w	r5, [r6], #1
 80095e4:	42ab      	cmp	r3, r5
 80095e6:	d1f7      	bne.n	80095d8 <__strtok_r+0x34>
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d0f3      	beq.n	80095d4 <__strtok_r+0x30>
 80095ec:	2300      	movs	r3, #0
 80095ee:	f804 3c01 	strb.w	r3, [r4, #-1]
 80095f2:	6014      	str	r4, [r2, #0]
 80095f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080095f6 <_strtol_l.isra.0>:
 80095f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095fa:	4680      	mov	r8, r0
 80095fc:	4689      	mov	r9, r1
 80095fe:	4692      	mov	sl, r2
 8009600:	461f      	mov	r7, r3
 8009602:	468b      	mov	fp, r1
 8009604:	465d      	mov	r5, fp
 8009606:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009608:	f815 4b01 	ldrb.w	r4, [r5], #1
 800960c:	f000 f88a 	bl	8009724 <__locale_ctype_ptr_l>
 8009610:	4420      	add	r0, r4
 8009612:	7846      	ldrb	r6, [r0, #1]
 8009614:	f016 0608 	ands.w	r6, r6, #8
 8009618:	d10b      	bne.n	8009632 <_strtol_l.isra.0+0x3c>
 800961a:	2c2d      	cmp	r4, #45	; 0x2d
 800961c:	d10b      	bne.n	8009636 <_strtol_l.isra.0+0x40>
 800961e:	782c      	ldrb	r4, [r5, #0]
 8009620:	2601      	movs	r6, #1
 8009622:	f10b 0502 	add.w	r5, fp, #2
 8009626:	b167      	cbz	r7, 8009642 <_strtol_l.isra.0+0x4c>
 8009628:	2f10      	cmp	r7, #16
 800962a:	d114      	bne.n	8009656 <_strtol_l.isra.0+0x60>
 800962c:	2c30      	cmp	r4, #48	; 0x30
 800962e:	d00a      	beq.n	8009646 <_strtol_l.isra.0+0x50>
 8009630:	e011      	b.n	8009656 <_strtol_l.isra.0+0x60>
 8009632:	46ab      	mov	fp, r5
 8009634:	e7e6      	b.n	8009604 <_strtol_l.isra.0+0xe>
 8009636:	2c2b      	cmp	r4, #43	; 0x2b
 8009638:	bf04      	itt	eq
 800963a:	782c      	ldrbeq	r4, [r5, #0]
 800963c:	f10b 0502 	addeq.w	r5, fp, #2
 8009640:	e7f1      	b.n	8009626 <_strtol_l.isra.0+0x30>
 8009642:	2c30      	cmp	r4, #48	; 0x30
 8009644:	d127      	bne.n	8009696 <_strtol_l.isra.0+0xa0>
 8009646:	782b      	ldrb	r3, [r5, #0]
 8009648:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800964c:	2b58      	cmp	r3, #88	; 0x58
 800964e:	d14b      	bne.n	80096e8 <_strtol_l.isra.0+0xf2>
 8009650:	786c      	ldrb	r4, [r5, #1]
 8009652:	2710      	movs	r7, #16
 8009654:	3502      	adds	r5, #2
 8009656:	2e00      	cmp	r6, #0
 8009658:	bf0c      	ite	eq
 800965a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800965e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009662:	2200      	movs	r2, #0
 8009664:	fbb1 fef7 	udiv	lr, r1, r7
 8009668:	4610      	mov	r0, r2
 800966a:	fb07 1c1e 	mls	ip, r7, lr, r1
 800966e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009672:	2b09      	cmp	r3, #9
 8009674:	d811      	bhi.n	800969a <_strtol_l.isra.0+0xa4>
 8009676:	461c      	mov	r4, r3
 8009678:	42a7      	cmp	r7, r4
 800967a:	dd1d      	ble.n	80096b8 <_strtol_l.isra.0+0xc2>
 800967c:	1c53      	adds	r3, r2, #1
 800967e:	d007      	beq.n	8009690 <_strtol_l.isra.0+0x9a>
 8009680:	4586      	cmp	lr, r0
 8009682:	d316      	bcc.n	80096b2 <_strtol_l.isra.0+0xbc>
 8009684:	d101      	bne.n	800968a <_strtol_l.isra.0+0x94>
 8009686:	45a4      	cmp	ip, r4
 8009688:	db13      	blt.n	80096b2 <_strtol_l.isra.0+0xbc>
 800968a:	fb00 4007 	mla	r0, r0, r7, r4
 800968e:	2201      	movs	r2, #1
 8009690:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009694:	e7eb      	b.n	800966e <_strtol_l.isra.0+0x78>
 8009696:	270a      	movs	r7, #10
 8009698:	e7dd      	b.n	8009656 <_strtol_l.isra.0+0x60>
 800969a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800969e:	2b19      	cmp	r3, #25
 80096a0:	d801      	bhi.n	80096a6 <_strtol_l.isra.0+0xb0>
 80096a2:	3c37      	subs	r4, #55	; 0x37
 80096a4:	e7e8      	b.n	8009678 <_strtol_l.isra.0+0x82>
 80096a6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80096aa:	2b19      	cmp	r3, #25
 80096ac:	d804      	bhi.n	80096b8 <_strtol_l.isra.0+0xc2>
 80096ae:	3c57      	subs	r4, #87	; 0x57
 80096b0:	e7e2      	b.n	8009678 <_strtol_l.isra.0+0x82>
 80096b2:	f04f 32ff 	mov.w	r2, #4294967295
 80096b6:	e7eb      	b.n	8009690 <_strtol_l.isra.0+0x9a>
 80096b8:	1c53      	adds	r3, r2, #1
 80096ba:	d108      	bne.n	80096ce <_strtol_l.isra.0+0xd8>
 80096bc:	2322      	movs	r3, #34	; 0x22
 80096be:	f8c8 3000 	str.w	r3, [r8]
 80096c2:	4608      	mov	r0, r1
 80096c4:	f1ba 0f00 	cmp.w	sl, #0
 80096c8:	d107      	bne.n	80096da <_strtol_l.isra.0+0xe4>
 80096ca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ce:	b106      	cbz	r6, 80096d2 <_strtol_l.isra.0+0xdc>
 80096d0:	4240      	negs	r0, r0
 80096d2:	f1ba 0f00 	cmp.w	sl, #0
 80096d6:	d00c      	beq.n	80096f2 <_strtol_l.isra.0+0xfc>
 80096d8:	b122      	cbz	r2, 80096e4 <_strtol_l.isra.0+0xee>
 80096da:	3d01      	subs	r5, #1
 80096dc:	f8ca 5000 	str.w	r5, [sl]
 80096e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096e4:	464d      	mov	r5, r9
 80096e6:	e7f9      	b.n	80096dc <_strtol_l.isra.0+0xe6>
 80096e8:	2430      	movs	r4, #48	; 0x30
 80096ea:	2f00      	cmp	r7, #0
 80096ec:	d1b3      	bne.n	8009656 <_strtol_l.isra.0+0x60>
 80096ee:	2708      	movs	r7, #8
 80096f0:	e7b1      	b.n	8009656 <_strtol_l.isra.0+0x60>
 80096f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080096f8 <strtol>:
 80096f8:	4b08      	ldr	r3, [pc, #32]	; (800971c <strtol+0x24>)
 80096fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096fc:	681c      	ldr	r4, [r3, #0]
 80096fe:	4d08      	ldr	r5, [pc, #32]	; (8009720 <strtol+0x28>)
 8009700:	6a23      	ldr	r3, [r4, #32]
 8009702:	2b00      	cmp	r3, #0
 8009704:	bf08      	it	eq
 8009706:	462b      	moveq	r3, r5
 8009708:	9300      	str	r3, [sp, #0]
 800970a:	4613      	mov	r3, r2
 800970c:	460a      	mov	r2, r1
 800970e:	4601      	mov	r1, r0
 8009710:	4620      	mov	r0, r4
 8009712:	f7ff ff70 	bl	80095f6 <_strtol_l.isra.0>
 8009716:	b003      	add	sp, #12
 8009718:	bd30      	pop	{r4, r5, pc}
 800971a:	bf00      	nop
 800971c:	20000010 	.word	0x20000010
 8009720:	20000104 	.word	0x20000104

08009724 <__locale_ctype_ptr_l>:
 8009724:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009728:	4770      	bx	lr
	...

0800972c <malloc>:
 800972c:	4b02      	ldr	r3, [pc, #8]	; (8009738 <malloc+0xc>)
 800972e:	4601      	mov	r1, r0
 8009730:	6818      	ldr	r0, [r3, #0]
 8009732:	f000 b803 	b.w	800973c <_malloc_r>
 8009736:	bf00      	nop
 8009738:	20000010 	.word	0x20000010

0800973c <_malloc_r>:
 800973c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009740:	f101 040b 	add.w	r4, r1, #11
 8009744:	2c16      	cmp	r4, #22
 8009746:	4681      	mov	r9, r0
 8009748:	d907      	bls.n	800975a <_malloc_r+0x1e>
 800974a:	f034 0407 	bics.w	r4, r4, #7
 800974e:	d505      	bpl.n	800975c <_malloc_r+0x20>
 8009750:	230c      	movs	r3, #12
 8009752:	f8c9 3000 	str.w	r3, [r9]
 8009756:	2600      	movs	r6, #0
 8009758:	e131      	b.n	80099be <_malloc_r+0x282>
 800975a:	2410      	movs	r4, #16
 800975c:	428c      	cmp	r4, r1
 800975e:	d3f7      	bcc.n	8009750 <_malloc_r+0x14>
 8009760:	4648      	mov	r0, r9
 8009762:	f000 fa0b 	bl	8009b7c <__malloc_lock>
 8009766:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800976a:	4d9c      	ldr	r5, [pc, #624]	; (80099dc <_malloc_r+0x2a0>)
 800976c:	d236      	bcs.n	80097dc <_malloc_r+0xa0>
 800976e:	f104 0208 	add.w	r2, r4, #8
 8009772:	442a      	add	r2, r5
 8009774:	f1a2 0108 	sub.w	r1, r2, #8
 8009778:	6856      	ldr	r6, [r2, #4]
 800977a:	428e      	cmp	r6, r1
 800977c:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8009780:	d102      	bne.n	8009788 <_malloc_r+0x4c>
 8009782:	68d6      	ldr	r6, [r2, #12]
 8009784:	42b2      	cmp	r2, r6
 8009786:	d010      	beq.n	80097aa <_malloc_r+0x6e>
 8009788:	6873      	ldr	r3, [r6, #4]
 800978a:	68f2      	ldr	r2, [r6, #12]
 800978c:	68b1      	ldr	r1, [r6, #8]
 800978e:	f023 0303 	bic.w	r3, r3, #3
 8009792:	60ca      	str	r2, [r1, #12]
 8009794:	4433      	add	r3, r6
 8009796:	6091      	str	r1, [r2, #8]
 8009798:	685a      	ldr	r2, [r3, #4]
 800979a:	f042 0201 	orr.w	r2, r2, #1
 800979e:	605a      	str	r2, [r3, #4]
 80097a0:	4648      	mov	r0, r9
 80097a2:	f000 f9f1 	bl	8009b88 <__malloc_unlock>
 80097a6:	3608      	adds	r6, #8
 80097a8:	e109      	b.n	80099be <_malloc_r+0x282>
 80097aa:	3302      	adds	r3, #2
 80097ac:	4a8c      	ldr	r2, [pc, #560]	; (80099e0 <_malloc_r+0x2a4>)
 80097ae:	692e      	ldr	r6, [r5, #16]
 80097b0:	4296      	cmp	r6, r2
 80097b2:	4611      	mov	r1, r2
 80097b4:	d06d      	beq.n	8009892 <_malloc_r+0x156>
 80097b6:	6870      	ldr	r0, [r6, #4]
 80097b8:	f020 0003 	bic.w	r0, r0, #3
 80097bc:	1b07      	subs	r7, r0, r4
 80097be:	2f0f      	cmp	r7, #15
 80097c0:	dd47      	ble.n	8009852 <_malloc_r+0x116>
 80097c2:	1933      	adds	r3, r6, r4
 80097c4:	f044 0401 	orr.w	r4, r4, #1
 80097c8:	6074      	str	r4, [r6, #4]
 80097ca:	616b      	str	r3, [r5, #20]
 80097cc:	612b      	str	r3, [r5, #16]
 80097ce:	60da      	str	r2, [r3, #12]
 80097d0:	609a      	str	r2, [r3, #8]
 80097d2:	f047 0201 	orr.w	r2, r7, #1
 80097d6:	605a      	str	r2, [r3, #4]
 80097d8:	5037      	str	r7, [r6, r0]
 80097da:	e7e1      	b.n	80097a0 <_malloc_r+0x64>
 80097dc:	0a63      	lsrs	r3, r4, #9
 80097de:	d02a      	beq.n	8009836 <_malloc_r+0xfa>
 80097e0:	2b04      	cmp	r3, #4
 80097e2:	d812      	bhi.n	800980a <_malloc_r+0xce>
 80097e4:	09a3      	lsrs	r3, r4, #6
 80097e6:	3338      	adds	r3, #56	; 0x38
 80097e8:	1c5a      	adds	r2, r3, #1
 80097ea:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80097ee:	f1a2 0008 	sub.w	r0, r2, #8
 80097f2:	6856      	ldr	r6, [r2, #4]
 80097f4:	4286      	cmp	r6, r0
 80097f6:	d006      	beq.n	8009806 <_malloc_r+0xca>
 80097f8:	6872      	ldr	r2, [r6, #4]
 80097fa:	f022 0203 	bic.w	r2, r2, #3
 80097fe:	1b11      	subs	r1, r2, r4
 8009800:	290f      	cmp	r1, #15
 8009802:	dd1c      	ble.n	800983e <_malloc_r+0x102>
 8009804:	3b01      	subs	r3, #1
 8009806:	3301      	adds	r3, #1
 8009808:	e7d0      	b.n	80097ac <_malloc_r+0x70>
 800980a:	2b14      	cmp	r3, #20
 800980c:	d801      	bhi.n	8009812 <_malloc_r+0xd6>
 800980e:	335b      	adds	r3, #91	; 0x5b
 8009810:	e7ea      	b.n	80097e8 <_malloc_r+0xac>
 8009812:	2b54      	cmp	r3, #84	; 0x54
 8009814:	d802      	bhi.n	800981c <_malloc_r+0xe0>
 8009816:	0b23      	lsrs	r3, r4, #12
 8009818:	336e      	adds	r3, #110	; 0x6e
 800981a:	e7e5      	b.n	80097e8 <_malloc_r+0xac>
 800981c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8009820:	d802      	bhi.n	8009828 <_malloc_r+0xec>
 8009822:	0be3      	lsrs	r3, r4, #15
 8009824:	3377      	adds	r3, #119	; 0x77
 8009826:	e7df      	b.n	80097e8 <_malloc_r+0xac>
 8009828:	f240 5254 	movw	r2, #1364	; 0x554
 800982c:	4293      	cmp	r3, r2
 800982e:	d804      	bhi.n	800983a <_malloc_r+0xfe>
 8009830:	0ca3      	lsrs	r3, r4, #18
 8009832:	337c      	adds	r3, #124	; 0x7c
 8009834:	e7d8      	b.n	80097e8 <_malloc_r+0xac>
 8009836:	233f      	movs	r3, #63	; 0x3f
 8009838:	e7d6      	b.n	80097e8 <_malloc_r+0xac>
 800983a:	237e      	movs	r3, #126	; 0x7e
 800983c:	e7d4      	b.n	80097e8 <_malloc_r+0xac>
 800983e:	2900      	cmp	r1, #0
 8009840:	68f1      	ldr	r1, [r6, #12]
 8009842:	db04      	blt.n	800984e <_malloc_r+0x112>
 8009844:	68b3      	ldr	r3, [r6, #8]
 8009846:	60d9      	str	r1, [r3, #12]
 8009848:	608b      	str	r3, [r1, #8]
 800984a:	18b3      	adds	r3, r6, r2
 800984c:	e7a4      	b.n	8009798 <_malloc_r+0x5c>
 800984e:	460e      	mov	r6, r1
 8009850:	e7d0      	b.n	80097f4 <_malloc_r+0xb8>
 8009852:	2f00      	cmp	r7, #0
 8009854:	616a      	str	r2, [r5, #20]
 8009856:	612a      	str	r2, [r5, #16]
 8009858:	db05      	blt.n	8009866 <_malloc_r+0x12a>
 800985a:	4430      	add	r0, r6
 800985c:	6843      	ldr	r3, [r0, #4]
 800985e:	f043 0301 	orr.w	r3, r3, #1
 8009862:	6043      	str	r3, [r0, #4]
 8009864:	e79c      	b.n	80097a0 <_malloc_r+0x64>
 8009866:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800986a:	d244      	bcs.n	80098f6 <_malloc_r+0x1ba>
 800986c:	08c0      	lsrs	r0, r0, #3
 800986e:	1087      	asrs	r7, r0, #2
 8009870:	2201      	movs	r2, #1
 8009872:	fa02 f707 	lsl.w	r7, r2, r7
 8009876:	686a      	ldr	r2, [r5, #4]
 8009878:	3001      	adds	r0, #1
 800987a:	433a      	orrs	r2, r7
 800987c:	606a      	str	r2, [r5, #4]
 800987e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8009882:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8009886:	60b7      	str	r7, [r6, #8]
 8009888:	3a08      	subs	r2, #8
 800988a:	60f2      	str	r2, [r6, #12]
 800988c:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8009890:	60fe      	str	r6, [r7, #12]
 8009892:	2001      	movs	r0, #1
 8009894:	109a      	asrs	r2, r3, #2
 8009896:	fa00 f202 	lsl.w	r2, r0, r2
 800989a:	6868      	ldr	r0, [r5, #4]
 800989c:	4282      	cmp	r2, r0
 800989e:	f200 80a1 	bhi.w	80099e4 <_malloc_r+0x2a8>
 80098a2:	4202      	tst	r2, r0
 80098a4:	d106      	bne.n	80098b4 <_malloc_r+0x178>
 80098a6:	f023 0303 	bic.w	r3, r3, #3
 80098aa:	0052      	lsls	r2, r2, #1
 80098ac:	4202      	tst	r2, r0
 80098ae:	f103 0304 	add.w	r3, r3, #4
 80098b2:	d0fa      	beq.n	80098aa <_malloc_r+0x16e>
 80098b4:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 80098b8:	46e0      	mov	r8, ip
 80098ba:	469e      	mov	lr, r3
 80098bc:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80098c0:	4546      	cmp	r6, r8
 80098c2:	d153      	bne.n	800996c <_malloc_r+0x230>
 80098c4:	f10e 0e01 	add.w	lr, lr, #1
 80098c8:	f01e 0f03 	tst.w	lr, #3
 80098cc:	f108 0808 	add.w	r8, r8, #8
 80098d0:	d1f4      	bne.n	80098bc <_malloc_r+0x180>
 80098d2:	0798      	lsls	r0, r3, #30
 80098d4:	d179      	bne.n	80099ca <_malloc_r+0x28e>
 80098d6:	686b      	ldr	r3, [r5, #4]
 80098d8:	ea23 0302 	bic.w	r3, r3, r2
 80098dc:	606b      	str	r3, [r5, #4]
 80098de:	6868      	ldr	r0, [r5, #4]
 80098e0:	0052      	lsls	r2, r2, #1
 80098e2:	4282      	cmp	r2, r0
 80098e4:	d87e      	bhi.n	80099e4 <_malloc_r+0x2a8>
 80098e6:	2a00      	cmp	r2, #0
 80098e8:	d07c      	beq.n	80099e4 <_malloc_r+0x2a8>
 80098ea:	4673      	mov	r3, lr
 80098ec:	4202      	tst	r2, r0
 80098ee:	d1e1      	bne.n	80098b4 <_malloc_r+0x178>
 80098f0:	3304      	adds	r3, #4
 80098f2:	0052      	lsls	r2, r2, #1
 80098f4:	e7fa      	b.n	80098ec <_malloc_r+0x1b0>
 80098f6:	0a42      	lsrs	r2, r0, #9
 80098f8:	2a04      	cmp	r2, #4
 80098fa:	d815      	bhi.n	8009928 <_malloc_r+0x1ec>
 80098fc:	0982      	lsrs	r2, r0, #6
 80098fe:	3238      	adds	r2, #56	; 0x38
 8009900:	1c57      	adds	r7, r2, #1
 8009902:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8009906:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800990a:	45be      	cmp	lr, r7
 800990c:	d126      	bne.n	800995c <_malloc_r+0x220>
 800990e:	2001      	movs	r0, #1
 8009910:	1092      	asrs	r2, r2, #2
 8009912:	fa00 f202 	lsl.w	r2, r0, r2
 8009916:	6868      	ldr	r0, [r5, #4]
 8009918:	4310      	orrs	r0, r2
 800991a:	6068      	str	r0, [r5, #4]
 800991c:	f8c6 e00c 	str.w	lr, [r6, #12]
 8009920:	60b7      	str	r7, [r6, #8]
 8009922:	f8ce 6008 	str.w	r6, [lr, #8]
 8009926:	e7b3      	b.n	8009890 <_malloc_r+0x154>
 8009928:	2a14      	cmp	r2, #20
 800992a:	d801      	bhi.n	8009930 <_malloc_r+0x1f4>
 800992c:	325b      	adds	r2, #91	; 0x5b
 800992e:	e7e7      	b.n	8009900 <_malloc_r+0x1c4>
 8009930:	2a54      	cmp	r2, #84	; 0x54
 8009932:	d802      	bhi.n	800993a <_malloc_r+0x1fe>
 8009934:	0b02      	lsrs	r2, r0, #12
 8009936:	326e      	adds	r2, #110	; 0x6e
 8009938:	e7e2      	b.n	8009900 <_malloc_r+0x1c4>
 800993a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800993e:	d802      	bhi.n	8009946 <_malloc_r+0x20a>
 8009940:	0bc2      	lsrs	r2, r0, #15
 8009942:	3277      	adds	r2, #119	; 0x77
 8009944:	e7dc      	b.n	8009900 <_malloc_r+0x1c4>
 8009946:	f240 5754 	movw	r7, #1364	; 0x554
 800994a:	42ba      	cmp	r2, r7
 800994c:	bf9a      	itte	ls
 800994e:	0c82      	lsrls	r2, r0, #18
 8009950:	327c      	addls	r2, #124	; 0x7c
 8009952:	227e      	movhi	r2, #126	; 0x7e
 8009954:	e7d4      	b.n	8009900 <_malloc_r+0x1c4>
 8009956:	68bf      	ldr	r7, [r7, #8]
 8009958:	45be      	cmp	lr, r7
 800995a:	d004      	beq.n	8009966 <_malloc_r+0x22a>
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	f022 0203 	bic.w	r2, r2, #3
 8009962:	4290      	cmp	r0, r2
 8009964:	d3f7      	bcc.n	8009956 <_malloc_r+0x21a>
 8009966:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800996a:	e7d7      	b.n	800991c <_malloc_r+0x1e0>
 800996c:	6870      	ldr	r0, [r6, #4]
 800996e:	68f7      	ldr	r7, [r6, #12]
 8009970:	f020 0003 	bic.w	r0, r0, #3
 8009974:	eba0 0a04 	sub.w	sl, r0, r4
 8009978:	f1ba 0f0f 	cmp.w	sl, #15
 800997c:	dd10      	ble.n	80099a0 <_malloc_r+0x264>
 800997e:	68b2      	ldr	r2, [r6, #8]
 8009980:	1933      	adds	r3, r6, r4
 8009982:	f044 0401 	orr.w	r4, r4, #1
 8009986:	6074      	str	r4, [r6, #4]
 8009988:	60d7      	str	r7, [r2, #12]
 800998a:	60ba      	str	r2, [r7, #8]
 800998c:	f04a 0201 	orr.w	r2, sl, #1
 8009990:	616b      	str	r3, [r5, #20]
 8009992:	612b      	str	r3, [r5, #16]
 8009994:	60d9      	str	r1, [r3, #12]
 8009996:	6099      	str	r1, [r3, #8]
 8009998:	605a      	str	r2, [r3, #4]
 800999a:	f846 a000 	str.w	sl, [r6, r0]
 800999e:	e6ff      	b.n	80097a0 <_malloc_r+0x64>
 80099a0:	f1ba 0f00 	cmp.w	sl, #0
 80099a4:	db0f      	blt.n	80099c6 <_malloc_r+0x28a>
 80099a6:	4430      	add	r0, r6
 80099a8:	6843      	ldr	r3, [r0, #4]
 80099aa:	f043 0301 	orr.w	r3, r3, #1
 80099ae:	6043      	str	r3, [r0, #4]
 80099b0:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80099b4:	4648      	mov	r0, r9
 80099b6:	60df      	str	r7, [r3, #12]
 80099b8:	60bb      	str	r3, [r7, #8]
 80099ba:	f000 f8e5 	bl	8009b88 <__malloc_unlock>
 80099be:	4630      	mov	r0, r6
 80099c0:	b003      	add	sp, #12
 80099c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099c6:	463e      	mov	r6, r7
 80099c8:	e77a      	b.n	80098c0 <_malloc_r+0x184>
 80099ca:	f85c 0908 	ldr.w	r0, [ip], #-8
 80099ce:	4584      	cmp	ip, r0
 80099d0:	f103 33ff 	add.w	r3, r3, #4294967295
 80099d4:	f43f af7d 	beq.w	80098d2 <_malloc_r+0x196>
 80099d8:	e781      	b.n	80098de <_malloc_r+0x1a2>
 80099da:	bf00      	nop
 80099dc:	20000270 	.word	0x20000270
 80099e0:	20000278 	.word	0x20000278
 80099e4:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80099e8:	f8db 6004 	ldr.w	r6, [fp, #4]
 80099ec:	f026 0603 	bic.w	r6, r6, #3
 80099f0:	42b4      	cmp	r4, r6
 80099f2:	d803      	bhi.n	80099fc <_malloc_r+0x2c0>
 80099f4:	1b33      	subs	r3, r6, r4
 80099f6:	2b0f      	cmp	r3, #15
 80099f8:	f300 8096 	bgt.w	8009b28 <_malloc_r+0x3ec>
 80099fc:	4a4f      	ldr	r2, [pc, #316]	; (8009b3c <_malloc_r+0x400>)
 80099fe:	6817      	ldr	r7, [r2, #0]
 8009a00:	4a4f      	ldr	r2, [pc, #316]	; (8009b40 <_malloc_r+0x404>)
 8009a02:	6811      	ldr	r1, [r2, #0]
 8009a04:	3710      	adds	r7, #16
 8009a06:	3101      	adds	r1, #1
 8009a08:	eb0b 0306 	add.w	r3, fp, r6
 8009a0c:	4427      	add	r7, r4
 8009a0e:	d005      	beq.n	8009a1c <_malloc_r+0x2e0>
 8009a10:	494c      	ldr	r1, [pc, #304]	; (8009b44 <_malloc_r+0x408>)
 8009a12:	3901      	subs	r1, #1
 8009a14:	440f      	add	r7, r1
 8009a16:	3101      	adds	r1, #1
 8009a18:	4249      	negs	r1, r1
 8009a1a:	400f      	ands	r7, r1
 8009a1c:	4639      	mov	r1, r7
 8009a1e:	4648      	mov	r0, r9
 8009a20:	9201      	str	r2, [sp, #4]
 8009a22:	9300      	str	r3, [sp, #0]
 8009a24:	f000 f8b6 	bl	8009b94 <_sbrk_r>
 8009a28:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009a2c:	4680      	mov	r8, r0
 8009a2e:	d056      	beq.n	8009ade <_malloc_r+0x3a2>
 8009a30:	9b00      	ldr	r3, [sp, #0]
 8009a32:	9a01      	ldr	r2, [sp, #4]
 8009a34:	4283      	cmp	r3, r0
 8009a36:	d901      	bls.n	8009a3c <_malloc_r+0x300>
 8009a38:	45ab      	cmp	fp, r5
 8009a3a:	d150      	bne.n	8009ade <_malloc_r+0x3a2>
 8009a3c:	4842      	ldr	r0, [pc, #264]	; (8009b48 <_malloc_r+0x40c>)
 8009a3e:	6801      	ldr	r1, [r0, #0]
 8009a40:	4543      	cmp	r3, r8
 8009a42:	eb07 0e01 	add.w	lr, r7, r1
 8009a46:	f8c0 e000 	str.w	lr, [r0]
 8009a4a:	4940      	ldr	r1, [pc, #256]	; (8009b4c <_malloc_r+0x410>)
 8009a4c:	4682      	mov	sl, r0
 8009a4e:	d113      	bne.n	8009a78 <_malloc_r+0x33c>
 8009a50:	420b      	tst	r3, r1
 8009a52:	d111      	bne.n	8009a78 <_malloc_r+0x33c>
 8009a54:	68ab      	ldr	r3, [r5, #8]
 8009a56:	443e      	add	r6, r7
 8009a58:	f046 0601 	orr.w	r6, r6, #1
 8009a5c:	605e      	str	r6, [r3, #4]
 8009a5e:	4a3c      	ldr	r2, [pc, #240]	; (8009b50 <_malloc_r+0x414>)
 8009a60:	f8da 3000 	ldr.w	r3, [sl]
 8009a64:	6811      	ldr	r1, [r2, #0]
 8009a66:	428b      	cmp	r3, r1
 8009a68:	bf88      	it	hi
 8009a6a:	6013      	strhi	r3, [r2, #0]
 8009a6c:	4a39      	ldr	r2, [pc, #228]	; (8009b54 <_malloc_r+0x418>)
 8009a6e:	6811      	ldr	r1, [r2, #0]
 8009a70:	428b      	cmp	r3, r1
 8009a72:	bf88      	it	hi
 8009a74:	6013      	strhi	r3, [r2, #0]
 8009a76:	e032      	b.n	8009ade <_malloc_r+0x3a2>
 8009a78:	6810      	ldr	r0, [r2, #0]
 8009a7a:	3001      	adds	r0, #1
 8009a7c:	bf1b      	ittet	ne
 8009a7e:	eba8 0303 	subne.w	r3, r8, r3
 8009a82:	4473      	addne	r3, lr
 8009a84:	f8c2 8000 	streq.w	r8, [r2]
 8009a88:	f8ca 3000 	strne.w	r3, [sl]
 8009a8c:	f018 0007 	ands.w	r0, r8, #7
 8009a90:	bf1c      	itt	ne
 8009a92:	f1c0 0008 	rsbne	r0, r0, #8
 8009a96:	4480      	addne	r8, r0
 8009a98:	4b2a      	ldr	r3, [pc, #168]	; (8009b44 <_malloc_r+0x408>)
 8009a9a:	4447      	add	r7, r8
 8009a9c:	4418      	add	r0, r3
 8009a9e:	400f      	ands	r7, r1
 8009aa0:	1bc7      	subs	r7, r0, r7
 8009aa2:	4639      	mov	r1, r7
 8009aa4:	4648      	mov	r0, r9
 8009aa6:	f000 f875 	bl	8009b94 <_sbrk_r>
 8009aaa:	1c43      	adds	r3, r0, #1
 8009aac:	bf08      	it	eq
 8009aae:	4640      	moveq	r0, r8
 8009ab0:	f8da 3000 	ldr.w	r3, [sl]
 8009ab4:	f8c5 8008 	str.w	r8, [r5, #8]
 8009ab8:	bf08      	it	eq
 8009aba:	2700      	moveq	r7, #0
 8009abc:	eba0 0008 	sub.w	r0, r0, r8
 8009ac0:	443b      	add	r3, r7
 8009ac2:	4407      	add	r7, r0
 8009ac4:	f047 0701 	orr.w	r7, r7, #1
 8009ac8:	45ab      	cmp	fp, r5
 8009aca:	f8ca 3000 	str.w	r3, [sl]
 8009ace:	f8c8 7004 	str.w	r7, [r8, #4]
 8009ad2:	d0c4      	beq.n	8009a5e <_malloc_r+0x322>
 8009ad4:	2e0f      	cmp	r6, #15
 8009ad6:	d810      	bhi.n	8009afa <_malloc_r+0x3be>
 8009ad8:	2301      	movs	r3, #1
 8009ada:	f8c8 3004 	str.w	r3, [r8, #4]
 8009ade:	68ab      	ldr	r3, [r5, #8]
 8009ae0:	685a      	ldr	r2, [r3, #4]
 8009ae2:	f022 0203 	bic.w	r2, r2, #3
 8009ae6:	4294      	cmp	r4, r2
 8009ae8:	eba2 0304 	sub.w	r3, r2, r4
 8009aec:	d801      	bhi.n	8009af2 <_malloc_r+0x3b6>
 8009aee:	2b0f      	cmp	r3, #15
 8009af0:	dc1a      	bgt.n	8009b28 <_malloc_r+0x3ec>
 8009af2:	4648      	mov	r0, r9
 8009af4:	f000 f848 	bl	8009b88 <__malloc_unlock>
 8009af8:	e62d      	b.n	8009756 <_malloc_r+0x1a>
 8009afa:	f8db 3004 	ldr.w	r3, [fp, #4]
 8009afe:	3e0c      	subs	r6, #12
 8009b00:	f026 0607 	bic.w	r6, r6, #7
 8009b04:	f003 0301 	and.w	r3, r3, #1
 8009b08:	4333      	orrs	r3, r6
 8009b0a:	f8cb 3004 	str.w	r3, [fp, #4]
 8009b0e:	eb0b 0306 	add.w	r3, fp, r6
 8009b12:	2205      	movs	r2, #5
 8009b14:	2e0f      	cmp	r6, #15
 8009b16:	605a      	str	r2, [r3, #4]
 8009b18:	609a      	str	r2, [r3, #8]
 8009b1a:	d9a0      	bls.n	8009a5e <_malloc_r+0x322>
 8009b1c:	f10b 0108 	add.w	r1, fp, #8
 8009b20:	4648      	mov	r0, r9
 8009b22:	f000 f8ab 	bl	8009c7c <_free_r>
 8009b26:	e79a      	b.n	8009a5e <_malloc_r+0x322>
 8009b28:	68ae      	ldr	r6, [r5, #8]
 8009b2a:	f044 0201 	orr.w	r2, r4, #1
 8009b2e:	4434      	add	r4, r6
 8009b30:	f043 0301 	orr.w	r3, r3, #1
 8009b34:	6072      	str	r2, [r6, #4]
 8009b36:	60ac      	str	r4, [r5, #8]
 8009b38:	6063      	str	r3, [r4, #4]
 8009b3a:	e631      	b.n	80097a0 <_malloc_r+0x64>
 8009b3c:	200006d0 	.word	0x200006d0
 8009b40:	20000678 	.word	0x20000678
 8009b44:	00000080 	.word	0x00000080
 8009b48:	200006a0 	.word	0x200006a0
 8009b4c:	0000007f 	.word	0x0000007f
 8009b50:	200006c8 	.word	0x200006c8
 8009b54:	200006cc 	.word	0x200006cc

08009b58 <__ascii_mbtowc>:
 8009b58:	b082      	sub	sp, #8
 8009b5a:	b901      	cbnz	r1, 8009b5e <__ascii_mbtowc+0x6>
 8009b5c:	a901      	add	r1, sp, #4
 8009b5e:	b142      	cbz	r2, 8009b72 <__ascii_mbtowc+0x1a>
 8009b60:	b14b      	cbz	r3, 8009b76 <__ascii_mbtowc+0x1e>
 8009b62:	7813      	ldrb	r3, [r2, #0]
 8009b64:	600b      	str	r3, [r1, #0]
 8009b66:	7812      	ldrb	r2, [r2, #0]
 8009b68:	1c10      	adds	r0, r2, #0
 8009b6a:	bf18      	it	ne
 8009b6c:	2001      	movne	r0, #1
 8009b6e:	b002      	add	sp, #8
 8009b70:	4770      	bx	lr
 8009b72:	4610      	mov	r0, r2
 8009b74:	e7fb      	b.n	8009b6e <__ascii_mbtowc+0x16>
 8009b76:	f06f 0001 	mvn.w	r0, #1
 8009b7a:	e7f8      	b.n	8009b6e <__ascii_mbtowc+0x16>

08009b7c <__malloc_lock>:
 8009b7c:	4801      	ldr	r0, [pc, #4]	; (8009b84 <__malloc_lock+0x8>)
 8009b7e:	f000 b939 	b.w	8009df4 <__retarget_lock_acquire_recursive>
 8009b82:	bf00      	nop
 8009b84:	20013980 	.word	0x20013980

08009b88 <__malloc_unlock>:
 8009b88:	4801      	ldr	r0, [pc, #4]	; (8009b90 <__malloc_unlock+0x8>)
 8009b8a:	f000 b934 	b.w	8009df6 <__retarget_lock_release_recursive>
 8009b8e:	bf00      	nop
 8009b90:	20013980 	.word	0x20013980

08009b94 <_sbrk_r>:
 8009b94:	b538      	push	{r3, r4, r5, lr}
 8009b96:	4c06      	ldr	r4, [pc, #24]	; (8009bb0 <_sbrk_r+0x1c>)
 8009b98:	2300      	movs	r3, #0
 8009b9a:	4605      	mov	r5, r0
 8009b9c:	4608      	mov	r0, r1
 8009b9e:	6023      	str	r3, [r4, #0]
 8009ba0:	f000 f92a 	bl	8009df8 <_sbrk>
 8009ba4:	1c43      	adds	r3, r0, #1
 8009ba6:	d102      	bne.n	8009bae <_sbrk_r+0x1a>
 8009ba8:	6823      	ldr	r3, [r4, #0]
 8009baa:	b103      	cbz	r3, 8009bae <_sbrk_r+0x1a>
 8009bac:	602b      	str	r3, [r5, #0]
 8009bae:	bd38      	pop	{r3, r4, r5, pc}
 8009bb0:	20013988 	.word	0x20013988

08009bb4 <__ascii_wctomb>:
 8009bb4:	b149      	cbz	r1, 8009bca <__ascii_wctomb+0x16>
 8009bb6:	2aff      	cmp	r2, #255	; 0xff
 8009bb8:	bf85      	ittet	hi
 8009bba:	238a      	movhi	r3, #138	; 0x8a
 8009bbc:	6003      	strhi	r3, [r0, #0]
 8009bbe:	700a      	strbls	r2, [r1, #0]
 8009bc0:	f04f 30ff 	movhi.w	r0, #4294967295
 8009bc4:	bf98      	it	ls
 8009bc6:	2001      	movls	r0, #1
 8009bc8:	4770      	bx	lr
 8009bca:	4608      	mov	r0, r1
 8009bcc:	4770      	bx	lr
	...

08009bd0 <_malloc_trim_r>:
 8009bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bd4:	4f25      	ldr	r7, [pc, #148]	; (8009c6c <_malloc_trim_r+0x9c>)
 8009bd6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8009c78 <_malloc_trim_r+0xa8>
 8009bda:	4689      	mov	r9, r1
 8009bdc:	4606      	mov	r6, r0
 8009bde:	f7ff ffcd 	bl	8009b7c <__malloc_lock>
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	685d      	ldr	r5, [r3, #4]
 8009be6:	f1a8 0411 	sub.w	r4, r8, #17
 8009bea:	f025 0503 	bic.w	r5, r5, #3
 8009bee:	eba4 0409 	sub.w	r4, r4, r9
 8009bf2:	442c      	add	r4, r5
 8009bf4:	fbb4 f4f8 	udiv	r4, r4, r8
 8009bf8:	3c01      	subs	r4, #1
 8009bfa:	fb08 f404 	mul.w	r4, r8, r4
 8009bfe:	4544      	cmp	r4, r8
 8009c00:	da05      	bge.n	8009c0e <_malloc_trim_r+0x3e>
 8009c02:	4630      	mov	r0, r6
 8009c04:	f7ff ffc0 	bl	8009b88 <__malloc_unlock>
 8009c08:	2000      	movs	r0, #0
 8009c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c0e:	2100      	movs	r1, #0
 8009c10:	4630      	mov	r0, r6
 8009c12:	f7ff ffbf 	bl	8009b94 <_sbrk_r>
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	442b      	add	r3, r5
 8009c1a:	4298      	cmp	r0, r3
 8009c1c:	d1f1      	bne.n	8009c02 <_malloc_trim_r+0x32>
 8009c1e:	4261      	negs	r1, r4
 8009c20:	4630      	mov	r0, r6
 8009c22:	f7ff ffb7 	bl	8009b94 <_sbrk_r>
 8009c26:	3001      	adds	r0, #1
 8009c28:	d110      	bne.n	8009c4c <_malloc_trim_r+0x7c>
 8009c2a:	2100      	movs	r1, #0
 8009c2c:	4630      	mov	r0, r6
 8009c2e:	f7ff ffb1 	bl	8009b94 <_sbrk_r>
 8009c32:	68ba      	ldr	r2, [r7, #8]
 8009c34:	1a83      	subs	r3, r0, r2
 8009c36:	2b0f      	cmp	r3, #15
 8009c38:	dde3      	ble.n	8009c02 <_malloc_trim_r+0x32>
 8009c3a:	490d      	ldr	r1, [pc, #52]	; (8009c70 <_malloc_trim_r+0xa0>)
 8009c3c:	6809      	ldr	r1, [r1, #0]
 8009c3e:	1a40      	subs	r0, r0, r1
 8009c40:	490c      	ldr	r1, [pc, #48]	; (8009c74 <_malloc_trim_r+0xa4>)
 8009c42:	f043 0301 	orr.w	r3, r3, #1
 8009c46:	6008      	str	r0, [r1, #0]
 8009c48:	6053      	str	r3, [r2, #4]
 8009c4a:	e7da      	b.n	8009c02 <_malloc_trim_r+0x32>
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	4a09      	ldr	r2, [pc, #36]	; (8009c74 <_malloc_trim_r+0xa4>)
 8009c50:	1b2d      	subs	r5, r5, r4
 8009c52:	f045 0501 	orr.w	r5, r5, #1
 8009c56:	605d      	str	r5, [r3, #4]
 8009c58:	6813      	ldr	r3, [r2, #0]
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	1b1c      	subs	r4, r3, r4
 8009c5e:	6014      	str	r4, [r2, #0]
 8009c60:	f7ff ff92 	bl	8009b88 <__malloc_unlock>
 8009c64:	2001      	movs	r0, #1
 8009c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c6a:	bf00      	nop
 8009c6c:	20000270 	.word	0x20000270
 8009c70:	20000678 	.word	0x20000678
 8009c74:	200006a0 	.word	0x200006a0
 8009c78:	00000080 	.word	0x00000080

08009c7c <_free_r>:
 8009c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c80:	4604      	mov	r4, r0
 8009c82:	4688      	mov	r8, r1
 8009c84:	2900      	cmp	r1, #0
 8009c86:	f000 80ab 	beq.w	8009de0 <_free_r+0x164>
 8009c8a:	f7ff ff77 	bl	8009b7c <__malloc_lock>
 8009c8e:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8009c92:	4d54      	ldr	r5, [pc, #336]	; (8009de4 <_free_r+0x168>)
 8009c94:	f022 0001 	bic.w	r0, r2, #1
 8009c98:	f1a8 0308 	sub.w	r3, r8, #8
 8009c9c:	181f      	adds	r7, r3, r0
 8009c9e:	68a9      	ldr	r1, [r5, #8]
 8009ca0:	687e      	ldr	r6, [r7, #4]
 8009ca2:	428f      	cmp	r7, r1
 8009ca4:	f026 0603 	bic.w	r6, r6, #3
 8009ca8:	f002 0201 	and.w	r2, r2, #1
 8009cac:	d11b      	bne.n	8009ce6 <_free_r+0x6a>
 8009cae:	4430      	add	r0, r6
 8009cb0:	b93a      	cbnz	r2, 8009cc2 <_free_r+0x46>
 8009cb2:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8009cb6:	1a9b      	subs	r3, r3, r2
 8009cb8:	4410      	add	r0, r2
 8009cba:	6899      	ldr	r1, [r3, #8]
 8009cbc:	68da      	ldr	r2, [r3, #12]
 8009cbe:	60ca      	str	r2, [r1, #12]
 8009cc0:	6091      	str	r1, [r2, #8]
 8009cc2:	f040 0201 	orr.w	r2, r0, #1
 8009cc6:	605a      	str	r2, [r3, #4]
 8009cc8:	60ab      	str	r3, [r5, #8]
 8009cca:	4b47      	ldr	r3, [pc, #284]	; (8009de8 <_free_r+0x16c>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4298      	cmp	r0, r3
 8009cd0:	d304      	bcc.n	8009cdc <_free_r+0x60>
 8009cd2:	4b46      	ldr	r3, [pc, #280]	; (8009dec <_free_r+0x170>)
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	6819      	ldr	r1, [r3, #0]
 8009cd8:	f7ff ff7a 	bl	8009bd0 <_malloc_trim_r>
 8009cdc:	4620      	mov	r0, r4
 8009cde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ce2:	f7ff bf51 	b.w	8009b88 <__malloc_unlock>
 8009ce6:	607e      	str	r6, [r7, #4]
 8009ce8:	2a00      	cmp	r2, #0
 8009cea:	d139      	bne.n	8009d60 <_free_r+0xe4>
 8009cec:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8009cf0:	1a5b      	subs	r3, r3, r1
 8009cf2:	4408      	add	r0, r1
 8009cf4:	6899      	ldr	r1, [r3, #8]
 8009cf6:	f105 0e08 	add.w	lr, r5, #8
 8009cfa:	4571      	cmp	r1, lr
 8009cfc:	d032      	beq.n	8009d64 <_free_r+0xe8>
 8009cfe:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8009d02:	f8c1 e00c 	str.w	lr, [r1, #12]
 8009d06:	f8ce 1008 	str.w	r1, [lr, #8]
 8009d0a:	19b9      	adds	r1, r7, r6
 8009d0c:	6849      	ldr	r1, [r1, #4]
 8009d0e:	07c9      	lsls	r1, r1, #31
 8009d10:	d40a      	bmi.n	8009d28 <_free_r+0xac>
 8009d12:	4430      	add	r0, r6
 8009d14:	68b9      	ldr	r1, [r7, #8]
 8009d16:	bb3a      	cbnz	r2, 8009d68 <_free_r+0xec>
 8009d18:	4e35      	ldr	r6, [pc, #212]	; (8009df0 <_free_r+0x174>)
 8009d1a:	42b1      	cmp	r1, r6
 8009d1c:	d124      	bne.n	8009d68 <_free_r+0xec>
 8009d1e:	616b      	str	r3, [r5, #20]
 8009d20:	612b      	str	r3, [r5, #16]
 8009d22:	2201      	movs	r2, #1
 8009d24:	60d9      	str	r1, [r3, #12]
 8009d26:	6099      	str	r1, [r3, #8]
 8009d28:	f040 0101 	orr.w	r1, r0, #1
 8009d2c:	6059      	str	r1, [r3, #4]
 8009d2e:	5018      	str	r0, [r3, r0]
 8009d30:	2a00      	cmp	r2, #0
 8009d32:	d1d3      	bne.n	8009cdc <_free_r+0x60>
 8009d34:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009d38:	d21a      	bcs.n	8009d70 <_free_r+0xf4>
 8009d3a:	08c0      	lsrs	r0, r0, #3
 8009d3c:	1081      	asrs	r1, r0, #2
 8009d3e:	2201      	movs	r2, #1
 8009d40:	408a      	lsls	r2, r1
 8009d42:	6869      	ldr	r1, [r5, #4]
 8009d44:	3001      	adds	r0, #1
 8009d46:	430a      	orrs	r2, r1
 8009d48:	606a      	str	r2, [r5, #4]
 8009d4a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8009d4e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8009d52:	6099      	str	r1, [r3, #8]
 8009d54:	3a08      	subs	r2, #8
 8009d56:	60da      	str	r2, [r3, #12]
 8009d58:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8009d5c:	60cb      	str	r3, [r1, #12]
 8009d5e:	e7bd      	b.n	8009cdc <_free_r+0x60>
 8009d60:	2200      	movs	r2, #0
 8009d62:	e7d2      	b.n	8009d0a <_free_r+0x8e>
 8009d64:	2201      	movs	r2, #1
 8009d66:	e7d0      	b.n	8009d0a <_free_r+0x8e>
 8009d68:	68fe      	ldr	r6, [r7, #12]
 8009d6a:	60ce      	str	r6, [r1, #12]
 8009d6c:	60b1      	str	r1, [r6, #8]
 8009d6e:	e7db      	b.n	8009d28 <_free_r+0xac>
 8009d70:	0a42      	lsrs	r2, r0, #9
 8009d72:	2a04      	cmp	r2, #4
 8009d74:	d813      	bhi.n	8009d9e <_free_r+0x122>
 8009d76:	0982      	lsrs	r2, r0, #6
 8009d78:	3238      	adds	r2, #56	; 0x38
 8009d7a:	1c51      	adds	r1, r2, #1
 8009d7c:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8009d80:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8009d84:	428e      	cmp	r6, r1
 8009d86:	d124      	bne.n	8009dd2 <_free_r+0x156>
 8009d88:	2001      	movs	r0, #1
 8009d8a:	1092      	asrs	r2, r2, #2
 8009d8c:	fa00 f202 	lsl.w	r2, r0, r2
 8009d90:	6868      	ldr	r0, [r5, #4]
 8009d92:	4302      	orrs	r2, r0
 8009d94:	606a      	str	r2, [r5, #4]
 8009d96:	60de      	str	r6, [r3, #12]
 8009d98:	6099      	str	r1, [r3, #8]
 8009d9a:	60b3      	str	r3, [r6, #8]
 8009d9c:	e7de      	b.n	8009d5c <_free_r+0xe0>
 8009d9e:	2a14      	cmp	r2, #20
 8009da0:	d801      	bhi.n	8009da6 <_free_r+0x12a>
 8009da2:	325b      	adds	r2, #91	; 0x5b
 8009da4:	e7e9      	b.n	8009d7a <_free_r+0xfe>
 8009da6:	2a54      	cmp	r2, #84	; 0x54
 8009da8:	d802      	bhi.n	8009db0 <_free_r+0x134>
 8009daa:	0b02      	lsrs	r2, r0, #12
 8009dac:	326e      	adds	r2, #110	; 0x6e
 8009dae:	e7e4      	b.n	8009d7a <_free_r+0xfe>
 8009db0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009db4:	d802      	bhi.n	8009dbc <_free_r+0x140>
 8009db6:	0bc2      	lsrs	r2, r0, #15
 8009db8:	3277      	adds	r2, #119	; 0x77
 8009dba:	e7de      	b.n	8009d7a <_free_r+0xfe>
 8009dbc:	f240 5154 	movw	r1, #1364	; 0x554
 8009dc0:	428a      	cmp	r2, r1
 8009dc2:	bf9a      	itte	ls
 8009dc4:	0c82      	lsrls	r2, r0, #18
 8009dc6:	327c      	addls	r2, #124	; 0x7c
 8009dc8:	227e      	movhi	r2, #126	; 0x7e
 8009dca:	e7d6      	b.n	8009d7a <_free_r+0xfe>
 8009dcc:	6889      	ldr	r1, [r1, #8]
 8009dce:	428e      	cmp	r6, r1
 8009dd0:	d004      	beq.n	8009ddc <_free_r+0x160>
 8009dd2:	684a      	ldr	r2, [r1, #4]
 8009dd4:	f022 0203 	bic.w	r2, r2, #3
 8009dd8:	4290      	cmp	r0, r2
 8009dda:	d3f7      	bcc.n	8009dcc <_free_r+0x150>
 8009ddc:	68ce      	ldr	r6, [r1, #12]
 8009dde:	e7da      	b.n	8009d96 <_free_r+0x11a>
 8009de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009de4:	20000270 	.word	0x20000270
 8009de8:	2000067c 	.word	0x2000067c
 8009dec:	200006d0 	.word	0x200006d0
 8009df0:	20000278 	.word	0x20000278

08009df4 <__retarget_lock_acquire_recursive>:
 8009df4:	4770      	bx	lr

08009df6 <__retarget_lock_release_recursive>:
 8009df6:	4770      	bx	lr

08009df8 <_sbrk>:
 8009df8:	4b04      	ldr	r3, [pc, #16]	; (8009e0c <_sbrk+0x14>)
 8009dfa:	6819      	ldr	r1, [r3, #0]
 8009dfc:	4602      	mov	r2, r0
 8009dfe:	b909      	cbnz	r1, 8009e04 <_sbrk+0xc>
 8009e00:	4903      	ldr	r1, [pc, #12]	; (8009e10 <_sbrk+0x18>)
 8009e02:	6019      	str	r1, [r3, #0]
 8009e04:	6818      	ldr	r0, [r3, #0]
 8009e06:	4402      	add	r2, r0
 8009e08:	601a      	str	r2, [r3, #0]
 8009e0a:	4770      	bx	lr
 8009e0c:	200006d4 	.word	0x200006d4
 8009e10:	2001398c 	.word	0x2001398c

08009e14 <_init>:
 8009e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e16:	bf00      	nop
 8009e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e1a:	bc08      	pop	{r3}
 8009e1c:	469e      	mov	lr, r3
 8009e1e:	4770      	bx	lr

08009e20 <_fini>:
 8009e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e22:	bf00      	nop
 8009e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e26:	bc08      	pop	{r3}
 8009e28:	469e      	mov	lr, r3
 8009e2a:	4770      	bx	lr
