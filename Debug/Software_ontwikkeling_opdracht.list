
Software_ontwikkeling_opdracht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059cc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b24  08005b54  08005b54  00015b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08008678  08008678  00018678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800867c  0800867c  0001867c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000680  20000000  08008680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020680  2**0
                  CONTENTS
  7 .bss          00013294  20000680  20000680  00020680  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20013914  20013914  00020680  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020680  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000e3eb  00000000  00000000  000206b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002237  00000000  00000000  0002ea9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009b8  00000000  00000000  00030cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000880  00000000  00000000  00031690  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000536a  00000000  00000000  00031f10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000031b8  00000000  00000000  0003727a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003a432  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002d68  00000000  00000000  0003a4b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0003d218  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000680 	.word	0x20000680
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b3c 	.word	0x08005b3c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000684 	.word	0x20000684
 80001c4:	08005b3c 	.word	0x08005b3c

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032a:	f1a4 0401 	sub.w	r4, r4, #1
 800032e:	d1e9      	bne.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f092 0f00 	teq	r2, #0
 80004d6:	bf14      	ite	ne
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	e720      	b.n	8000330 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_ul2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f04f 0500 	mov.w	r5, #0
 80004fe:	e00a      	b.n	8000516 <__aeabi_l2d+0x16>

08000500 <__aeabi_l2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050e:	d502      	bpl.n	8000516 <__aeabi_l2d+0x16>
 8000510:	4240      	negs	r0, r0
 8000512:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000516:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000522:	f43f aedc 	beq.w	80002de <__adddf3+0xe6>
 8000526:	f04f 0203 	mov.w	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053e:	f1c2 0320 	rsb	r3, r2, #32
 8000542:	fa00 fc03 	lsl.w	ip, r0, r3
 8000546:	fa20 f002 	lsr.w	r0, r0, r2
 800054a:	fa01 fe03 	lsl.w	lr, r1, r3
 800054e:	ea40 000e 	orr.w	r0, r0, lr
 8000552:	fa21 f102 	lsr.w	r1, r1, r2
 8000556:	4414      	add	r4, r2
 8000558:	e6c1      	b.n	80002de <__adddf3+0xe6>
 800055a:	bf00      	nop

0800055c <__aeabi_dmul>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000562:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000566:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056a:	bf1d      	ittte	ne
 800056c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000570:	ea94 0f0c 	teqne	r4, ip
 8000574:	ea95 0f0c 	teqne	r5, ip
 8000578:	f000 f8de 	bleq	8000738 <__aeabi_dmul+0x1dc>
 800057c:	442c      	add	r4, r5
 800057e:	ea81 0603 	eor.w	r6, r1, r3
 8000582:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000586:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058e:	bf18      	it	ne
 8000590:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800059c:	d038      	beq.n	8000610 <__aeabi_dmul+0xb4>
 800059e:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a2:	f04f 0500 	mov.w	r5, #0
 80005a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b2:	f04f 0600 	mov.w	r6, #0
 80005b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ba:	f09c 0f00 	teq	ip, #0
 80005be:	bf18      	it	ne
 80005c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d0:	d204      	bcs.n	80005dc <__aeabi_dmul+0x80>
 80005d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d6:	416d      	adcs	r5, r5
 80005d8:	eb46 0606 	adc.w	r6, r6, r6
 80005dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f4:	bf88      	it	hi
 80005f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fa:	d81e      	bhi.n	800063a <__aeabi_dmul+0xde>
 80005fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000614:	ea46 0101 	orr.w	r1, r6, r1
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	ea81 0103 	eor.w	r1, r1, r3
 8000620:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000624:	bfc2      	ittt	gt
 8000626:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062e:	bd70      	popgt	{r4, r5, r6, pc}
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f04f 0e00 	mov.w	lr, #0
 8000638:	3c01      	subs	r4, #1
 800063a:	f300 80ab 	bgt.w	8000794 <__aeabi_dmul+0x238>
 800063e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000642:	bfde      	ittt	le
 8000644:	2000      	movle	r0, #0
 8000646:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064a:	bd70      	pople	{r4, r5, r6, pc}
 800064c:	f1c4 0400 	rsb	r4, r4, #0
 8000650:	3c20      	subs	r4, #32
 8000652:	da35      	bge.n	80006c0 <__aeabi_dmul+0x164>
 8000654:	340c      	adds	r4, #12
 8000656:	dc1b      	bgt.n	8000690 <__aeabi_dmul+0x134>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f305 	lsl.w	r3, r0, r5
 8000664:	fa20 f004 	lsr.w	r0, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800067c:	fa21 f604 	lsr.w	r6, r1, r4
 8000680:	eb42 0106 	adc.w	r1, r2, r6
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f1c4 040c 	rsb	r4, r4, #12
 8000694:	f1c4 0520 	rsb	r5, r4, #32
 8000698:	fa00 f304 	lsl.w	r3, r0, r4
 800069c:	fa20 f005 	lsr.w	r0, r0, r5
 80006a0:	fa01 f204 	lsl.w	r2, r1, r4
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	f141 0100 	adc.w	r1, r1, #0
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f205 	lsl.w	r2, r0, r5
 80006c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006cc:	fa20 f304 	lsr.w	r3, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea43 0302 	orr.w	r3, r3, r2
 80006d8:	fa21 f004 	lsr.w	r0, r1, r4
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	fa21 f204 	lsr.w	r2, r1, r4
 80006e4:	ea20 0002 	bic.w	r0, r0, r2
 80006e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f094 0f00 	teq	r4, #0
 80006fc:	d10f      	bne.n	800071e <__aeabi_dmul+0x1c2>
 80006fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000702:	0040      	lsls	r0, r0, #1
 8000704:	eb41 0101 	adc.w	r1, r1, r1
 8000708:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800070c:	bf08      	it	eq
 800070e:	3c01      	subeq	r4, #1
 8000710:	d0f7      	beq.n	8000702 <__aeabi_dmul+0x1a6>
 8000712:	ea41 0106 	orr.w	r1, r1, r6
 8000716:	f095 0f00 	teq	r5, #0
 800071a:	bf18      	it	ne
 800071c:	4770      	bxne	lr
 800071e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	eb43 0303 	adc.w	r3, r3, r3
 8000728:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3d01      	subeq	r5, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1c6>
 8000732:	ea43 0306 	orr.w	r3, r3, r6
 8000736:	4770      	bx	lr
 8000738:	ea94 0f0c 	teq	r4, ip
 800073c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000740:	bf18      	it	ne
 8000742:	ea95 0f0c 	teqne	r5, ip
 8000746:	d00c      	beq.n	8000762 <__aeabi_dmul+0x206>
 8000748:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074c:	bf18      	it	ne
 800074e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000752:	d1d1      	bne.n	80006f8 <__aeabi_dmul+0x19c>
 8000754:	ea81 0103 	eor.w	r1, r1, r3
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000766:	bf06      	itte	eq
 8000768:	4610      	moveq	r0, r2
 800076a:	4619      	moveq	r1, r3
 800076c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000770:	d019      	beq.n	80007a6 <__aeabi_dmul+0x24a>
 8000772:	ea94 0f0c 	teq	r4, ip
 8000776:	d102      	bne.n	800077e <__aeabi_dmul+0x222>
 8000778:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800077c:	d113      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 800077e:	ea95 0f0c 	teq	r5, ip
 8000782:	d105      	bne.n	8000790 <__aeabi_dmul+0x234>
 8000784:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000788:	bf1c      	itt	ne
 800078a:	4610      	movne	r0, r2
 800078c:	4619      	movne	r1, r3
 800078e:	d10a      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ae:	bd70      	pop	{r4, r5, r6, pc}

080007b0 <__aeabi_ddiv>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007be:	bf1d      	ittte	ne
 80007c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c4:	ea94 0f0c 	teqne	r4, ip
 80007c8:	ea95 0f0c 	teqne	r5, ip
 80007cc:	f000 f8a7 	bleq	800091e <__aeabi_ddiv+0x16e>
 80007d0:	eba4 0405 	sub.w	r4, r4, r5
 80007d4:	ea81 0e03 	eor.w	lr, r1, r3
 80007d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e0:	f000 8088 	beq.w	80008f4 <__aeabi_ddiv+0x144>
 80007e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000800:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000804:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000808:	429d      	cmp	r5, r3
 800080a:	bf08      	it	eq
 800080c:	4296      	cmpeq	r6, r2
 800080e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000812:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000816:	d202      	bcs.n	800081e <__aeabi_ddiv+0x6e>
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	1ab6      	subs	r6, r6, r2
 8000820:	eb65 0503 	sbc.w	r5, r5, r3
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 000c 	orrcs.w	r0, r0, ip
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800088c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000890:	d018      	beq.n	80008c4 <__aeabi_ddiv+0x114>
 8000892:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000896:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ae:	d1c0      	bne.n	8000832 <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	d10b      	bne.n	80008ce <__aeabi_ddiv+0x11e>
 80008b6:	ea41 0100 	orr.w	r1, r1, r0
 80008ba:	f04f 0000 	mov.w	r0, #0
 80008be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c2:	e7b6      	b.n	8000832 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf04      	itt	eq
 80008ca:	4301      	orreq	r1, r0
 80008cc:	2000      	moveq	r0, #0
 80008ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d2:	bf88      	it	hi
 80008d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d8:	f63f aeaf 	bhi.w	800063a <__aeabi_dmul+0xde>
 80008dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e0:	bf04      	itt	eq
 80008e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ea:	f150 0000 	adcs.w	r0, r0, #0
 80008ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000900:	bfc2      	ittt	gt
 8000902:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000906:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090a:	bd70      	popgt	{r4, r5, r6, pc}
 800090c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000910:	f04f 0e00 	mov.w	lr, #0
 8000914:	3c01      	subs	r4, #1
 8000916:	e690      	b.n	800063a <__aeabi_dmul+0xde>
 8000918:	ea45 0e06 	orr.w	lr, r5, r6
 800091c:	e68d      	b.n	800063a <__aeabi_dmul+0xde>
 800091e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000922:	ea94 0f0c 	teq	r4, ip
 8000926:	bf08      	it	eq
 8000928:	ea95 0f0c 	teqeq	r5, ip
 800092c:	f43f af3b 	beq.w	80007a6 <__aeabi_dmul+0x24a>
 8000930:	ea94 0f0c 	teq	r4, ip
 8000934:	d10a      	bne.n	800094c <__aeabi_ddiv+0x19c>
 8000936:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093a:	f47f af34 	bne.w	80007a6 <__aeabi_dmul+0x24a>
 800093e:	ea95 0f0c 	teq	r5, ip
 8000942:	f47f af25 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e72c      	b.n	80007a6 <__aeabi_dmul+0x24a>
 800094c:	ea95 0f0c 	teq	r5, ip
 8000950:	d106      	bne.n	8000960 <__aeabi_ddiv+0x1b0>
 8000952:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000956:	f43f aefd 	beq.w	8000754 <__aeabi_dmul+0x1f8>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e722      	b.n	80007a6 <__aeabi_dmul+0x24a>
 8000960:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096a:	f47f aec5 	bne.w	80006f8 <__aeabi_dmul+0x19c>
 800096e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000972:	f47f af0d 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000976:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097a:	f47f aeeb 	bne.w	8000754 <__aeabi_dmul+0x1f8>
 800097e:	e712      	b.n	80007a6 <__aeabi_dmul+0x24a>

08000980 <__aeabi_d2uiz>:
 8000980:	004a      	lsls	r2, r1, #1
 8000982:	d211      	bcs.n	80009a8 <__aeabi_d2uiz+0x28>
 8000984:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000988:	d211      	bcs.n	80009ae <__aeabi_d2uiz+0x2e>
 800098a:	d50d      	bpl.n	80009a8 <__aeabi_d2uiz+0x28>
 800098c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000990:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000994:	d40e      	bmi.n	80009b4 <__aeabi_d2uiz+0x34>
 8000996:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009a2:	fa23 f002 	lsr.w	r0, r3, r2
 80009a6:	4770      	bx	lr
 80009a8:	f04f 0000 	mov.w	r0, #0
 80009ac:	4770      	bx	lr
 80009ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b2:	d102      	bne.n	80009ba <__aeabi_d2uiz+0x3a>
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295
 80009b8:	4770      	bx	lr
 80009ba:	f04f 0000 	mov.w	r0, #0
 80009be:	4770      	bx	lr

080009c0 <draw_bitmap>:
#include <stdio.h>
#include <stdlib.h>


//Bitmap function
void draw_bitmap (int x, int y) {
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	f5ad 5dc8 	sub.w	sp, sp, #6400	; 0x1900
 80009c6:	b087      	sub	sp, #28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	f107 0318 	add.w	r3, r7, #24
 80009ce:	3b14      	subs	r3, #20
 80009d0:	6018      	str	r0, [r3, #0]
 80009d2:	f107 0318 	add.w	r3, r7, #24
 80009d6:	3b18      	subs	r3, #24
 80009d8:	6019      	str	r1, [r3, #0]

//const int size = 50;

int bitmap [40][40] = {
 80009da:	f107 0318 	add.w	r3, r7, #24
 80009de:	3b10      	subs	r3, #16
 80009e0:	4a41      	ldr	r2, [pc, #260]	; (8000ae8 <draw_bitmap+0x128>)
 80009e2:	4618      	mov	r0, r3
 80009e4:	4611      	mov	r1, r2
 80009e6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80009ea:	461a      	mov	r2, r3
 80009ec:	f004 fc26 	bl	800523c <memcpy>
		,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
		,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
		,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff

};
	for (int i=0; i<40; i++) {
 80009f0:	2300      	movs	r3, #0
 80009f2:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 80009f6:	f102 0214 	add.w	r2, r2, #20
 80009fa:	6013      	str	r3, [r2, #0]
 80009fc:	e066      	b.n	8000acc <draw_bitmap+0x10c>
		for (int j=0; j<40; j++) {
 80009fe:	2300      	movs	r3, #0
 8000a00:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 8000a04:	f102 0210 	add.w	r2, r2, #16
 8000a08:	6013      	str	r3, [r2, #0]
 8000a0a:	e04d      	b.n	8000aa8 <draw_bitmap+0xe8>

			int x_pos = j + x;
 8000a0c:	f107 0318 	add.w	r3, r7, #24
 8000a10:	3b14      	subs	r3, #20
 8000a12:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 8000a16:	f102 0210 	add.w	r2, r2, #16
 8000a1a:	6812      	ldr	r2, [r2, #0]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 8000a24:	f102 020c 	add.w	r2, r2, #12
 8000a28:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8000a2a:	f107 0318 	add.w	r3, r7, #24
 8000a2e:	3b18      	subs	r3, #24
 8000a30:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 8000a34:	f102 0214 	add.w	r2, r2, #20
 8000a38:	6812      	ldr	r2, [r2, #0]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 8000a42:	f102 0208 	add.w	r2, r2, #8
 8000a46:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, bitmap[i][j]);
 8000a48:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000a4c:	f103 030c 	add.w	r3, r3, #12
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	b298      	uxth	r0, r3
 8000a54:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000a58:	f103 0308 	add.w	r3, r3, #8
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	b29c      	uxth	r4, r3
 8000a60:	f107 0218 	add.w	r2, r7, #24
 8000a64:	3a10      	subs	r2, #16
 8000a66:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000a6a:	f103 0314 	add.w	r3, r3, #20
 8000a6e:	6819      	ldr	r1, [r3, #0]
 8000a70:	460b      	mov	r3, r1
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	440b      	add	r3, r1
 8000a76:	00db      	lsls	r3, r3, #3
 8000a78:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000a7c:	f101 0110 	add.w	r1, r1, #16
 8000a80:	6809      	ldr	r1, [r1, #0]
 8000a82:	440b      	add	r3, r1
 8000a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4621      	mov	r1, r4
 8000a8e:	f003 f9a5 	bl	8003ddc <UB_VGA_SetPixel>
		for (int j=0; j<40; j++) {
 8000a92:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000a96:	f103 0310 	add.w	r3, r3, #16
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 8000aa2:	f102 0210 	add.w	r2, r2, #16
 8000aa6:	6013      	str	r3, [r2, #0]
 8000aa8:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000aac:	f103 0310 	add.w	r3, r3, #16
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b27      	cmp	r3, #39	; 0x27
 8000ab4:	ddaa      	ble.n	8000a0c <draw_bitmap+0x4c>
	for (int i=0; i<40; i++) {
 8000ab6:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000aba:	f103 0314 	add.w	r3, r3, #20
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 8000ac6:	f102 0214 	add.w	r2, r2, #20
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000ad0:	f103 0314 	add.w	r3, r3, #20
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2b27      	cmp	r3, #39	; 0x27
 8000ad8:	dd91      	ble.n	80009fe <draw_bitmap+0x3e>
		}
	}
}
 8000ada:	bf00      	nop
 8000adc:	f507 57c8 	add.w	r7, r7, #6400	; 0x1900
 8000ae0:	371c      	adds	r7, #28
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd90      	pop	{r4, r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	08005b54 	.word	0x08005b54

08000aec <draw_ellips>:

#include "stm32_ub_vga_screen.h"


void draw_ellips (int x_center,int y_center, int x_rad, int y_rad, int color)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b086      	sub	sp, #24
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	60f8      	str	r0, [r7, #12]
 8000af4:	60b9      	str	r1, [r7, #8]
 8000af6:	607a      	str	r2, [r7, #4]
 8000af8:	603b      	str	r3, [r7, #0]
	for(int y=-y_rad; y<=y_rad; y++) {
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	425b      	negs	r3, r3
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	e03f      	b.n	8000b82 <draw_ellips+0x96>
	    for(int x=-x_rad; x<=x_rad; x++) {
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	425b      	negs	r3, r3
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	e034      	b.n	8000b74 <draw_ellips+0x88>
	        if(x*x*y_rad*y_rad+y*y*x_rad*x_rad <= y_rad*y_rad*x_rad*x_rad)
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	fb02 f303 	mul.w	r3, r2, r3
 8000b12:	683a      	ldr	r2, [r7, #0]
 8000b14:	fb02 f303 	mul.w	r3, r2, r3
 8000b18:	683a      	ldr	r2, [r7, #0]
 8000b1a:	fb02 f203 	mul.w	r2, r2, r3
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	6979      	ldr	r1, [r7, #20]
 8000b22:	fb01 f303 	mul.w	r3, r1, r3
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	fb01 f303 	mul.w	r3, r1, r3
 8000b2c:	6879      	ldr	r1, [r7, #4]
 8000b2e:	fb01 f303 	mul.w	r3, r1, r3
 8000b32:	441a      	add	r2, r3
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	6839      	ldr	r1, [r7, #0]
 8000b38:	fb01 f303 	mul.w	r3, r1, r3
 8000b3c:	6879      	ldr	r1, [r7, #4]
 8000b3e:	fb01 f303 	mul.w	r3, r1, r3
 8000b42:	6879      	ldr	r1, [r7, #4]
 8000b44:	fb01 f303 	mul.w	r3, r1, r3
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	dc10      	bgt.n	8000b6e <draw_ellips+0x82>
	        	UB_VGA_SetPixel(x_center+x,y_center+y,color);
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	693b      	ldr	r3, [r7, #16]
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	4413      	add	r3, r2
 8000b56:	b298      	uxth	r0, r3
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	b29a      	uxth	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	4413      	add	r3, r2
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	6a3a      	ldr	r2, [r7, #32]
 8000b66:	b2d2      	uxtb	r2, r2
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f003 f937 	bl	8003ddc <UB_VGA_SetPixel>
	    for(int x=-x_rad; x<=x_rad; x++) {
 8000b6e:	693b      	ldr	r3, [r7, #16]
 8000b70:	3301      	adds	r3, #1
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	ddc6      	ble.n	8000b0a <draw_ellips+0x1e>
	for(int y=-y_rad; y<=y_rad; y++) {
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	697a      	ldr	r2, [r7, #20]
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	429a      	cmp	r2, r3
 8000b88:	ddbb      	ble.n	8000b02 <draw_ellips+0x16>
	    }
	}
}
 8000b8a:	bf00      	nop
 8000b8c:	3718      	adds	r7, #24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <draw_line>:

#include <stdio.h>
#include <stdlib.h>

void draw_line(int x1, int y1, int x2, int y2, int tn, int color)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b094      	sub	sp, #80	; 0x50
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	60f8      	str	r0, [r7, #12]
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
 8000b9e:	603b      	str	r3, [r7, #0]

	int i,dx,dy,sdx,sdy,dxabs,dyabs,x,y,px,py;
	uint8_t stn,tn_draw;

	dx=x2-x1;      /* the horizontal distance of the line */
 8000ba0:	687a      	ldr	r2, [r7, #4]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	62bb      	str	r3, [r7, #40]	; 0x28
	dy=y2-y1;      /* the vertical distance of the line */
 8000ba8:	683a      	ldr	r2, [r7, #0]
 8000baa:	68bb      	ldr	r3, [r7, #8]
 8000bac:	1ad3      	subs	r3, r2, r3
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
	dxabs=abs(dx);
 8000bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	bfb8      	it	lt
 8000bb6:	425b      	neglt	r3, r3
 8000bb8:	623b      	str	r3, [r7, #32]
	dyabs=abs(dy);
 8000bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	bfb8      	it	lt
 8000bc0:	425b      	neglt	r3, r3
 8000bc2:	61fb      	str	r3, [r7, #28]
	sdx=sgn(dx);
 8000bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	db06      	blt.n	8000bd8 <draw_line+0x46>
 8000bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	bfcc      	ite	gt
 8000bd0:	2301      	movgt	r3, #1
 8000bd2:	2300      	movle	r3, #0
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	e001      	b.n	8000bdc <draw_line+0x4a>
 8000bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bdc:	61bb      	str	r3, [r7, #24]
	sdy=sgn(dy);
 8000bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db06      	blt.n	8000bf2 <draw_line+0x60>
 8000be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	bfcc      	ite	gt
 8000bea:	2301      	movgt	r3, #1
 8000bec:	2300      	movle	r3, #0
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	e001      	b.n	8000bf6 <draw_line+0x64>
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf6:	617b      	str	r3, [r7, #20]
	x=dyabs>>1;
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	105b      	asrs	r3, r3, #1
 8000bfc:	64bb      	str	r3, [r7, #72]	; 0x48
	y=dxabs>>1;
 8000bfe:	6a3b      	ldr	r3, [r7, #32]
 8000c00:	105b      	asrs	r3, r3, #1
 8000c02:	647b      	str	r3, [r7, #68]	; 0x44
	px=x1;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	643b      	str	r3, [r7, #64]	; 0x40
	py=y1;
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	63fb      	str	r3, [r7, #60]	; 0x3c

	stn = ((tn%2)==0)? 1:0;  /* even of oneven lijndikte */
 8000c0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	bf0c      	ite	eq
 8000c16:	2301      	moveq	r3, #1
 8000c18:	2300      	movne	r3, #0
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	74fb      	strb	r3, [r7, #19]
	tn_draw = tn>>1;
 8000c1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c20:	105b      	asrs	r3, r3, #1
 8000c22:	74bb      	strb	r3, [r7, #18]

	if (dxabs>=dyabs) 	/* the line is more horizontal than vertical */
 8000c24:	6a3a      	ldr	r2, [r7, #32]
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	f2c0 80c5 	blt.w	8000db8 <draw_line+0x226>
	{
		if(stn==1) /* even line thickness */
 8000c2e:	7cfb      	ldrb	r3, [r7, #19]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d15e      	bne.n	8000cf2 <draw_line+0x160>
		{
			px=x1;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	643b      	str	r3, [r7, #64]	; 0x40
			py=y1;
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c40:	e052      	b.n	8000ce8 <draw_line+0x156>
			{
				y+=dyabs;										/* adding dyabs for drawing vertical pixel */
 8000c42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	4413      	add	r3, r2
 8000c48:	647b      	str	r3, [r7, #68]	; 0x44
				if (y>=dxabs)									/* y is higher than the dxabs of line, so py counting -1/0/1 */
 8000c4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c4c:	6a3b      	ldr	r3, [r7, #32]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	db07      	blt.n	8000c62 <draw_line+0xd0>
				{
					y-=dxabs;									/* substracting dxabs of y so counting is reset */
 8000c52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c54:	6a3b      	ldr	r3, [r7, #32]
 8000c56:	1ad3      	subs	r3, r2, r3
 8000c58:	647b      	str	r3, [r7, #68]	; 0x44
					py+=sdy;
 8000c5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	4413      	add	r3, r2
 8000c60:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				for(int k=-tn_draw;k<tn_draw;k++)
 8000c62:	7cbb      	ldrb	r3, [r7, #18]
 8000c64:	425b      	negs	r3, r3
 8000c66:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c68:	e033      	b.n	8000cd2 <draw_line+0x140>
				{
					if(px>=0 && px <= 320 && py>=0 && py <= 240)	/* pixels inside range VGA screen will be drawn */
 8000c6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	db2d      	blt.n	8000ccc <draw_line+0x13a>
 8000c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c72:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000c76:	dc29      	bgt.n	8000ccc <draw_line+0x13a>
 8000c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	db26      	blt.n	8000ccc <draw_line+0x13a>
 8000c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c80:	2bf0      	cmp	r3, #240	; 0xf0
 8000c82:	dc23      	bgt.n	8000ccc <draw_line+0x13a>
					{
						UB_VGA_SetPixel(px+k,py-k,color);
 8000c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	4413      	add	r3, r2
 8000c8e:	b298      	uxth	r0, r3
 8000c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000c96:	b29b      	uxth	r3, r3
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	f003 f89b 	bl	8003ddc <UB_VGA_SetPixel>
						UB_VGA_SetPixel(px+k,py-k-1,color);
 8000ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	4413      	add	r3, r2
 8000cb0:	b298      	uxth	r0, r3
 8000cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cb8:	b29b      	uxth	r3, r3
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000cc4:	b2d2      	uxtb	r2, r2
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f003 f888 	bl	8003ddc <UB_VGA_SetPixel>
				for(int k=-tn_draw;k<tn_draw;k++)
 8000ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cce:	3301      	adds	r3, #1
 8000cd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8000cd2:	7cba      	ldrb	r2, [r7, #18]
 8000cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	dcc7      	bgt.n	8000c6a <draw_line+0xd8>
					}
				}
				px+=sdx; 										/* -1/0/1 counting pixel */
 8000cda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	4413      	add	r3, r2
 8000ce0:	643b      	str	r3, [r7, #64]	; 0x40
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000ce2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ce8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000cea:	6a3b      	ldr	r3, [r7, #32]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	dda8      	ble.n	8000c42 <draw_line+0xb0>
				}
				py+=sdy; 										/* -1/0/1 counting pixel */
			}
		}
	}
}
 8000cf0:	e125      	b.n	8000f3e <draw_line+0x3ac>
		else if(stn==0)	/* odd line thickness */
 8000cf2:	7cfb      	ldrb	r3, [r7, #19]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f040 8122 	bne.w	8000f3e <draw_line+0x3ac>
			px=x1;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	643b      	str	r3, [r7, #64]	; 0x40
			py=y1;
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000d02:	2300      	movs	r3, #0
 8000d04:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d06:	e052      	b.n	8000dae <draw_line+0x21c>
				y+=dyabs;										/* adding dyabs for drawing vertical pixel */
 8000d08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	647b      	str	r3, [r7, #68]	; 0x44
				if (y>=dxabs)									/* y is higher than the dxabs of line, so py counting -1/0/1 */
 8000d10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d12:	6a3b      	ldr	r3, [r7, #32]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	db07      	blt.n	8000d28 <draw_line+0x196>
					y-=dxabs;									/* substracting dxabs of y so counting is reset */
 8000d18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d1a:	6a3b      	ldr	r3, [r7, #32]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	647b      	str	r3, [r7, #68]	; 0x44
					py+=sdy;
 8000d20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	4413      	add	r3, r2
 8000d26:	63fb      	str	r3, [r7, #60]	; 0x3c
				for(int h=0-tn_draw;h<=tn_draw;h++)
 8000d28:	7cbb      	ldrb	r3, [r7, #18]
 8000d2a:	425b      	negs	r3, r3
 8000d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8000d2e:	e033      	b.n	8000d98 <draw_line+0x206>
					if(px>=0 && px <= 320 && py>=0 && py <= 240)	/* pixels inside range VGA screen will be drawn */
 8000d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	db2d      	blt.n	8000d92 <draw_line+0x200>
 8000d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d38:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000d3c:	dc29      	bgt.n	8000d92 <draw_line+0x200>
 8000d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	db26      	blt.n	8000d92 <draw_line+0x200>
 8000d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d46:	2bf0      	cmp	r3, #240	; 0xf0
 8000d48:	dc23      	bgt.n	8000d92 <draw_line+0x200>
						UB_VGA_SetPixel(px+h,py-h,color);
 8000d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	4413      	add	r3, r2
 8000d54:	b298      	uxth	r0, r3
 8000d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d58:	b29a      	uxth	r2, r3
 8000d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	1ad3      	subs	r3, r2, r3
 8000d60:	b29b      	uxth	r3, r3
 8000d62:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000d64:	b2d2      	uxtb	r2, r2
 8000d66:	4619      	mov	r1, r3
 8000d68:	f003 f838 	bl	8003ddc <UB_VGA_SetPixel>
						UB_VGA_SetPixel(px+h,py-h-1,color);
 8000d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	4413      	add	r3, r2
 8000d76:	b298      	uxth	r0, r3
 8000d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	3b01      	subs	r3, #1
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f003 f825 	bl	8003ddc <UB_VGA_SetPixel>
				for(int h=0-tn_draw;h<=tn_draw;h++)
 8000d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d94:	3301      	adds	r3, #1
 8000d96:	637b      	str	r3, [r7, #52]	; 0x34
 8000d98:	7cba      	ldrb	r2, [r7, #18]
 8000d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	dac7      	bge.n	8000d30 <draw_line+0x19e>
				px+=sdx; 										/* -1/0/1 counting pixel */
 8000da0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000da2:	69bb      	ldr	r3, [r7, #24]
 8000da4:	4413      	add	r3, r2
 8000da6:	643b      	str	r3, [r7, #64]	; 0x40
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000daa:	3301      	adds	r3, #1
 8000dac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000dae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000db0:	6a3b      	ldr	r3, [r7, #32]
 8000db2:	429a      	cmp	r2, r3
 8000db4:	dda8      	ble.n	8000d08 <draw_line+0x176>
}
 8000db6:	e0c2      	b.n	8000f3e <draw_line+0x3ac>
		if(stn==1) /* even line thickness */
 8000db8:	7cfb      	ldrb	r3, [r7, #19]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	d15e      	bne.n	8000e7c <draw_line+0x2ea>
			px=x1;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	643b      	str	r3, [r7, #64]	; 0x40
			py=y1;
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000dca:	e052      	b.n	8000e72 <draw_line+0x2e0>
				y+=dyabs;										/* adding dyabs for drawing vertical pixel */
 8000dcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	647b      	str	r3, [r7, #68]	; 0x44
				if (y>=dxabs)									/* y is higher than the dxabs of line, so py counting -1/0/1 */
 8000dd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000dd6:	6a3b      	ldr	r3, [r7, #32]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	db07      	blt.n	8000dec <draw_line+0x25a>
					y-=dxabs;									/* substracting dxabs of y so counting is reset */
 8000ddc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000dde:	6a3b      	ldr	r3, [r7, #32]
 8000de0:	1ad3      	subs	r3, r2, r3
 8000de2:	647b      	str	r3, [r7, #68]	; 0x44
					py+=sdy;
 8000de4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	4413      	add	r3, r2
 8000dea:	63fb      	str	r3, [r7, #60]	; 0x3c
				for(int k=0-tn_draw;k<tn_draw;k++)
 8000dec:	7cbb      	ldrb	r3, [r7, #18]
 8000dee:	425b      	negs	r3, r3
 8000df0:	633b      	str	r3, [r7, #48]	; 0x30
 8000df2:	e033      	b.n	8000e5c <draw_line+0x2ca>
					if(px>=0 && px <= 320 && py>=0 && py <= 240)	/* pixels inside range VGA screen will be drawn */
 8000df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	db2d      	blt.n	8000e56 <draw_line+0x2c4>
 8000dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dfc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000e00:	dc29      	bgt.n	8000e56 <draw_line+0x2c4>
 8000e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	db26      	blt.n	8000e56 <draw_line+0x2c4>
 8000e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e0a:	2bf0      	cmp	r3, #240	; 0xf0
 8000e0c:	dc23      	bgt.n	8000e56 <draw_line+0x2c4>
						UB_VGA_SetPixel(px+k,py-k,color);
 8000e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	4413      	add	r3, r2
 8000e18:	b298      	uxth	r0, r3
 8000e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f002 ffd6 	bl	8003ddc <UB_VGA_SetPixel>
						UB_VGA_SetPixel(px+k,py-k-1,color);
 8000e30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e32:	b29a      	uxth	r2, r3
 8000e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	4413      	add	r3, r2
 8000e3a:	b298      	uxth	r0, r3
 8000e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e3e:	b29a      	uxth	r2, r3
 8000e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e42:	b29b      	uxth	r3, r3
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	4619      	mov	r1, r3
 8000e52:	f002 ffc3 	bl	8003ddc <UB_VGA_SetPixel>
				for(int k=0-tn_draw;k<tn_draw;k++)
 8000e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e58:	3301      	adds	r3, #1
 8000e5a:	633b      	str	r3, [r7, #48]	; 0x30
 8000e5c:	7cba      	ldrb	r2, [r7, #18]
 8000e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e60:	429a      	cmp	r2, r3
 8000e62:	dcc7      	bgt.n	8000df4 <draw_line+0x262>
				px+=sdx; 										/* -1/0/1 counting pixel */
 8000e64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	4413      	add	r3, r2
 8000e6a:	643b      	str	r3, [r7, #64]	; 0x40
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e6e:	3301      	adds	r3, #1
 8000e70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e74:	6a3b      	ldr	r3, [r7, #32]
 8000e76:	429a      	cmp	r2, r3
 8000e78:	dda8      	ble.n	8000dcc <draw_line+0x23a>
}
 8000e7a:	e060      	b.n	8000f3e <draw_line+0x3ac>
		else if(stn==0)	/* odd line thickness */
 8000e7c:	7cfb      	ldrb	r3, [r7, #19]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d15d      	bne.n	8000f3e <draw_line+0x3ac>
			px=x1;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	643b      	str	r3, [r7, #64]	; 0x40
			py=y1;
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dyabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e8e:	e052      	b.n	8000f36 <draw_line+0x3a4>
				x+=dxabs;										/* adding dyabs for drawing vertical pixel */
 8000e90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e92:	6a3b      	ldr	r3, [r7, #32]
 8000e94:	4413      	add	r3, r2
 8000e96:	64bb      	str	r3, [r7, #72]	; 0x48
				if (x>=dyabs)									/* y is higher than the dxabs of line, so py counting -1/0/1 */
 8000e98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	db07      	blt.n	8000eb0 <draw_line+0x31e>
					x-=dyabs;									/* substracting dxabs of y so counting is reset */
 8000ea0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	64bb      	str	r3, [r7, #72]	; 0x48
					px+=sdx;
 8000ea8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	4413      	add	r3, r2
 8000eae:	643b      	str	r3, [r7, #64]	; 0x40
				for(int h=0-tn_draw;h<=tn_draw;h++)
 8000eb0:	7cbb      	ldrb	r3, [r7, #18]
 8000eb2:	425b      	negs	r3, r3
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000eb6:	e033      	b.n	8000f20 <draw_line+0x38e>
					if(px>=0 && px <= 320 && py>=0 && py <= 240)	/* pixels inside range VGA screen will be drawn */
 8000eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	db2d      	blt.n	8000f1a <draw_line+0x388>
 8000ebe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ec0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000ec4:	dc29      	bgt.n	8000f1a <draw_line+0x388>
 8000ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	db26      	blt.n	8000f1a <draw_line+0x388>
 8000ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ece:	2bf0      	cmp	r3, #240	; 0xf0
 8000ed0:	dc23      	bgt.n	8000f1a <draw_line+0x388>
						UB_VGA_SetPixel(px+h,py-h,color);
 8000ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	4413      	add	r3, r2
 8000edc:	b298      	uxth	r0, r3
 8000ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ee0:	b29a      	uxth	r2, r3
 8000ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	4619      	mov	r1, r3
 8000ef0:	f002 ff74 	bl	8003ddc <UB_VGA_SetPixel>
						UB_VGA_SetPixel(px+h,py-h-1,color);
 8000ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ef6:	b29a      	uxth	r2, r3
 8000ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	4413      	add	r3, r2
 8000efe:	b298      	uxth	r0, r3
 8000f00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000f12:	b2d2      	uxtb	r2, r2
 8000f14:	4619      	mov	r1, r3
 8000f16:	f002 ff61 	bl	8003ddc <UB_VGA_SetPixel>
				for(int h=0-tn_draw;h<=tn_draw;h++)
 8000f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f20:	7cba      	ldrb	r2, [r7, #18]
 8000f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f24:	429a      	cmp	r2, r3
 8000f26:	dac7      	bge.n	8000eb8 <draw_line+0x326>
				py+=sdy; 										/* -1/0/1 counting pixel */
 8000f28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dyabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f32:	3301      	adds	r3, #1
 8000f34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	dda8      	ble.n	8000e90 <draw_line+0x2fe>
}
 8000f3e:	bf00      	nop
 8000f40:	3750      	adds	r7, #80	; 0x50
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <draw_rectangle>:

#include "rectangle.h"
#include "line.h"

void draw_rectangle (int x1, int y1, int x2, int y2, int color)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b086      	sub	sp, #24
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	60f8      	str	r0, [r7, #12]
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
 8000f52:	603b      	str	r3, [r7, #0]
	for(int i=y1;i<=y2;i++)
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	617b      	str	r3, [r7, #20]
 8000f58:	e015      	b.n	8000f86 <draw_rectangle+0x40>
	{
		for(int j=x1;j<=x2;j++)
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	e00b      	b.n	8000f78 <draw_rectangle+0x32>
			UB_VGA_SetPixel(j,i,color);
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	b291      	uxth	r1, r2
 8000f68:	6a3a      	ldr	r2, [r7, #32]
 8000f6a:	b2d2      	uxtb	r2, r2
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f002 ff35 	bl	8003ddc <UB_VGA_SetPixel>
		for(int j=x1;j<=x2;j++)
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	3301      	adds	r3, #1
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	ddef      	ble.n	8000f60 <draw_rectangle+0x1a>
	for(int i=y1;i<=y2;i++)
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	3301      	adds	r3, #1
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	697a      	ldr	r2, [r7, #20]
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	dde5      	ble.n	8000f5a <draw_rectangle+0x14>
	}
}
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <draw_text>:

#include <stdio.h>
#include <stdlib.h>


void draw_text (int x, int y, char text[]) {
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b086      	sub	sp, #24
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	60f8      	str	r0, [r7, #12]
 8000f9e:	60b9      	str	r1, [r7, #8]
 8000fa0:	607a      	str	r2, [r7, #4]

	for(int i=0;i<strlen(text);i++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	e00e      	b.n	8000fc6 <draw_text+0x30>
	{
		letter_select(x,y,text[i]);
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	68b9      	ldr	r1, [r7, #8]
 8000fb4:	68f8      	ldr	r0, [r7, #12]
 8000fb6:	f000 f811 	bl	8000fdc <letter_select>
		x = x + 5;
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	3305      	adds	r3, #5
 8000fbe:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<strlen(text);i++)
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	617b      	str	r3, [r7, #20]
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff f908 	bl	80001dc <strlen>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d8e9      	bhi.n	8000fa8 <draw_text+0x12>
	}
}
 8000fd4:	bf00      	nop
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <letter_select>:

void letter_select(int x, int y, char letter){
 8000fdc:	b590      	push	{r4, r7, lr}
 8000fde:	f5ad 5d96 	sub.w	sp, sp, #4800	; 0x12c0
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fea:	3b1c      	subs	r3, #28
 8000fec:	6018      	str	r0, [r3, #0]
 8000fee:	f107 0308 	add.w	r3, r7, #8
 8000ff2:	6019      	str	r1, [r3, #0]
 8000ff4:	f107 0308 	add.w	r3, r7, #8
 8000ff8:	3b01      	subs	r3, #1
 8000ffa:	701a      	strb	r2, [r3, #0]

	//____________________________________ALFABET IN C ARRAY_________________________________________

	int letter_A[10][4] = {
 8000ffc:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001000:	f103 0318 	add.w	r3, r3, #24
 8001004:	4ae1      	ldr	r2, [pc, #900]	; (800138c <letter_select+0x3b0>)
 8001006:	4618      	mov	r0, r3
 8001008:	4611      	mov	r1, r2
 800100a:	23a0      	movs	r3, #160	; 0xa0
 800100c:	461a      	mov	r2, r3
 800100e:	f004 f915 	bl	800523c <memcpy>
			  0xff, 0xff, 0xff, 0xff,  //@@@@
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00
	};
	int letter_B[10][4] = {
 8001012:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8001016:	4ade      	ldr	r2, [pc, #888]	; (8001390 <letter_select+0x3b4>)
 8001018:	4618      	mov	r0, r3
 800101a:	4611      	mov	r1, r2
 800101c:	23a0      	movs	r3, #160	; 0xa0
 800101e:	461a      	mov	r2, r3
 8001020:	f004 f90c 	bl	800523c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0xff, 0xff, 0x00,  //@@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_C[10][4] = {
 8001024:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 8001028:	4ada      	ldr	r2, [pc, #872]	; (8001394 <letter_select+0x3b8>)
 800102a:	4618      	mov	r0, r3
 800102c:	4611      	mov	r1, r2
 800102e:	23a0      	movs	r3, #160	; 0xa0
 8001030:	461a      	mov	r2, r3
 8001032:	f004 f903 	bl	800523c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_D[10][4] = {
 8001036:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 800103a:	4ad7      	ldr	r2, [pc, #860]	; (8001398 <letter_select+0x3bc>)
 800103c:	4618      	mov	r0, r3
 800103e:	4611      	mov	r1, r2
 8001040:	23a0      	movs	r3, #160	; 0xa0
 8001042:	461a      	mov	r2, r3
 8001044:	f004 f8fa 	bl	800523c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0xff, 0xff, 0x00,  //@@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_E[10][4] = {
 8001048:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800104c:	4ad3      	ldr	r2, [pc, #844]	; (800139c <letter_select+0x3c0>)
 800104e:	4618      	mov	r0, r3
 8001050:	4611      	mov	r1, r2
 8001052:	23a0      	movs	r3, #160	; 0xa0
 8001054:	461a      	mov	r2, r3
 8001056:	f004 f8f1 	bl	800523c <memcpy>
			  0xff, 0x00, 0x00, 0x00,  //@...
			  0xff, 0xff, 0xff, 0xff,  //@@@@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_F[10][4] = {
 800105a:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 800105e:	4ad0      	ldr	r2, [pc, #832]	; (80013a0 <letter_select+0x3c4>)
 8001060:	4618      	mov	r0, r3
 8001062:	4611      	mov	r1, r2
 8001064:	23a0      	movs	r3, #160	; 0xa0
 8001066:	461a      	mov	r2, r3
 8001068:	f004 f8e8 	bl	800523c <memcpy>
			  0xff, 0x00, 0x00, 0x00,  //@...
			  0xff, 0x00, 0x00, 0x00,  //@...
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_G[10][4] = {
 800106c:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8001070:	4acc      	ldr	r2, [pc, #816]	; (80013a4 <letter_select+0x3c8>)
 8001072:	4618      	mov	r0, r3
 8001074:	4611      	mov	r1, r2
 8001076:	23a0      	movs	r3, #160	; 0xa0
 8001078:	461a      	mov	r2, r3
 800107a:	f004 f8df 	bl	800523c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_H[10][4] = {
 800107e:	f607 4318 	addw	r3, r7, #3096	; 0xc18
 8001082:	4ac9      	ldr	r2, [pc, #804]	; (80013a8 <letter_select+0x3cc>)
 8001084:	4618      	mov	r0, r3
 8001086:	4611      	mov	r1, r2
 8001088:	23a0      	movs	r3, #160	; 0xa0
 800108a:	461a      	mov	r2, r3
 800108c:	f004 f8d6 	bl	800523c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_I[10][3] = {
 8001090:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8001094:	4ac5      	ldr	r2, [pc, #788]	; (80013ac <letter_select+0x3d0>)
 8001096:	4618      	mov	r0, r3
 8001098:	4611      	mov	r1, r2
 800109a:	2378      	movs	r3, #120	; 0x78
 800109c:	461a      	mov	r2, r3
 800109e:	f004 f8cd 	bl	800523c <memcpy>
			  0x00, 0xff, 0x00,  //.@.
			  0xff, 0xff, 0xff,  //@@@
			  0x00, 0x00, 0x00,  //...
			  0x00, 0x00, 0x00,  //...
	};
	int letter_J[10][4] = {
 80010a2:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80010a6:	4618      	mov	r0, r3
 80010a8:	23a0      	movs	r3, #160	; 0xa0
 80010aa:	461a      	mov	r2, r3
 80010ac:	2100      	movs	r1, #0
 80010ae:	f004 f8d0 	bl	8005252 <memset>
 80010b2:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80010b6:	22ff      	movs	r2, #255	; 0xff
 80010b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80010ba:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80010be:	22ff      	movs	r2, #255	; 0xff
 80010c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80010c2:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80010c6:	22ff      	movs	r2, #255	; 0xff
 80010c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80010ca:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80010ce:	22ff      	movs	r2, #255	; 0xff
 80010d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80010d2:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80010d6:	22ff      	movs	r2, #255	; 0xff
 80010d8:	661a      	str	r2, [r3, #96]	; 0x60
 80010da:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80010de:	22ff      	movs	r2, #255	; 0xff
 80010e0:	66da      	str	r2, [r3, #108]	; 0x6c
 80010e2:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80010e6:	22ff      	movs	r2, #255	; 0xff
 80010e8:	675a      	str	r2, [r3, #116]	; 0x74
 80010ea:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80010ee:	22ff      	movs	r2, #255	; 0xff
 80010f0:	679a      	str	r2, [r3, #120]	; 0x78
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_K[10][4] = {
 80010f2:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80010f6:	4aae      	ldr	r2, [pc, #696]	; (80013b0 <letter_select+0x3d4>)
 80010f8:	4618      	mov	r0, r3
 80010fa:	4611      	mov	r1, r2
 80010fc:	23a0      	movs	r3, #160	; 0xa0
 80010fe:	461a      	mov	r2, r3
 8001100:	f004 f89c 	bl	800523c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_L[10][4] = {
 8001104:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8001108:	4618      	mov	r0, r3
 800110a:	23a0      	movs	r3, #160	; 0xa0
 800110c:	461a      	mov	r2, r3
 800110e:	2100      	movs	r1, #0
 8001110:	f004 f89f 	bl	8005252 <memset>
 8001114:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8001118:	22ff      	movs	r2, #255	; 0xff
 800111a:	621a      	str	r2, [r3, #32]
 800111c:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8001120:	22ff      	movs	r2, #255	; 0xff
 8001122:	631a      	str	r2, [r3, #48]	; 0x30
 8001124:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8001128:	22ff      	movs	r2, #255	; 0xff
 800112a:	641a      	str	r2, [r3, #64]	; 0x40
 800112c:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8001130:	22ff      	movs	r2, #255	; 0xff
 8001132:	651a      	str	r2, [r3, #80]	; 0x50
 8001134:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8001138:	22ff      	movs	r2, #255	; 0xff
 800113a:	661a      	str	r2, [r3, #96]	; 0x60
 800113c:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8001140:	22ff      	movs	r2, #255	; 0xff
 8001142:	671a      	str	r2, [r3, #112]	; 0x70
 8001144:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8001148:	22ff      	movs	r2, #255	; 0xff
 800114a:	675a      	str	r2, [r3, #116]	; 0x74
 800114c:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8001150:	22ff      	movs	r2, #255	; 0xff
 8001152:	679a      	str	r2, [r3, #120]	; 0x78
 8001154:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8001158:	22ff      	movs	r2, #255	; 0xff
 800115a:	67da      	str	r2, [r3, #124]	; 0x7c
			  0xff, 0x00, 0x00, 0x00,  //@...
			  0xff, 0xff, 0xff, 0xff,  //@@@@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_M[10][4] = {
 800115c:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8001160:	4a94      	ldr	r2, [pc, #592]	; (80013b4 <letter_select+0x3d8>)
 8001162:	4618      	mov	r0, r3
 8001164:	4611      	mov	r1, r2
 8001166:	23a0      	movs	r3, #160	; 0xa0
 8001168:	461a      	mov	r2, r3
 800116a:	f004 f867 	bl	800523c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_N[10][4] = {
 800116e:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001172:	4a91      	ldr	r2, [pc, #580]	; (80013b8 <letter_select+0x3dc>)
 8001174:	4618      	mov	r0, r3
 8001176:	4611      	mov	r1, r2
 8001178:	23a0      	movs	r3, #160	; 0xa0
 800117a:	461a      	mov	r2, r3
 800117c:	f004 f85e 	bl	800523c <memcpy>
			  0xff, 0x00, 0xff, 0xff,  //@.@@
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_O[10][4] = {
 8001180:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8001184:	4a8d      	ldr	r2, [pc, #564]	; (80013bc <letter_select+0x3e0>)
 8001186:	4618      	mov	r0, r3
 8001188:	4611      	mov	r1, r2
 800118a:	23a0      	movs	r3, #160	; 0xa0
 800118c:	461a      	mov	r2, r3
 800118e:	f004 f855 	bl	800523c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_P[10][4] = {
 8001192:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8001196:	4a8a      	ldr	r2, [pc, #552]	; (80013c0 <letter_select+0x3e4>)
 8001198:	4618      	mov	r0, r3
 800119a:	4611      	mov	r1, r2
 800119c:	23a0      	movs	r3, #160	; 0xa0
 800119e:	461a      	mov	r2, r3
 80011a0:	f004 f84c 	bl	800523c <memcpy>
			  0xff, 0x00, 0x00, 0x00,  //@...
			  0xff, 0x00, 0x00, 0x00,  //@...
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_Q[10][4] = {
 80011a4:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80011a8:	4a86      	ldr	r2, [pc, #536]	; (80013c4 <letter_select+0x3e8>)
 80011aa:	4618      	mov	r0, r3
 80011ac:	4611      	mov	r1, r2
 80011ae:	23a0      	movs	r3, #160	; 0xa0
 80011b0:	461a      	mov	r2, r3
 80011b2:	f004 f843 	bl	800523c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0x00, 0xff, 0x00,  //..@.
			  0x00, 0x00, 0x00, 0xff,  //...@
	};
	int letter_R[10][4] = {
 80011b6:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80011ba:	4a83      	ldr	r2, [pc, #524]	; (80013c8 <letter_select+0x3ec>)
 80011bc:	4618      	mov	r0, r3
 80011be:	4611      	mov	r1, r2
 80011c0:	23a0      	movs	r3, #160	; 0xa0
 80011c2:	461a      	mov	r2, r3
 80011c4:	f004 f83a 	bl	800523c <memcpy>
			  0xff, 0x00, 0xff, 0x00,  //@.@.
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_S[10][4] = {
 80011c8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80011cc:	4a7f      	ldr	r2, [pc, #508]	; (80013cc <letter_select+0x3f0>)
 80011ce:	4618      	mov	r0, r3
 80011d0:	4611      	mov	r1, r2
 80011d2:	23a0      	movs	r3, #160	; 0xa0
 80011d4:	461a      	mov	r2, r3
 80011d6:	f004 f831 	bl	800523c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0xff, 0xff, 0x00,  //@@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_T[10][5] = {
 80011da:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80011de:	4a7c      	ldr	r2, [pc, #496]	; (80013d0 <letter_select+0x3f4>)
 80011e0:	4618      	mov	r0, r3
 80011e2:	4611      	mov	r1, r2
 80011e4:	23c8      	movs	r3, #200	; 0xc8
 80011e6:	461a      	mov	r2, r3
 80011e8:	f004 f828 	bl	800523c <memcpy>
			  0x00, 0x00, 0xff, 0x00, 0x00,  //..@..
			  0x00, 0xff, 0xff, 0xff, 0x00,  //.@@@.
			  0x00, 0x00, 0x00, 0x00, 0x00,  //.....
			  0x00, 0x00, 0x00, 0x00, 0x00,  //.....
	};
	int letter_U[10][4] = {
 80011ec:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80011f0:	4a78      	ldr	r2, [pc, #480]	; (80013d4 <letter_select+0x3f8>)
 80011f2:	4618      	mov	r0, r3
 80011f4:	4611      	mov	r1, r2
 80011f6:	23a0      	movs	r3, #160	; 0xa0
 80011f8:	461a      	mov	r2, r3
 80011fa:	f004 f81f 	bl	800523c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_V[10][4] = {
 80011fe:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8001202:	4a75      	ldr	r2, [pc, #468]	; (80013d8 <letter_select+0x3fc>)
 8001204:	4618      	mov	r0, r3
 8001206:	4611      	mov	r1, r2
 8001208:	23a0      	movs	r3, #160	; 0xa0
 800120a:	461a      	mov	r2, r3
 800120c:	f004 f816 	bl	800523c <memcpy>
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_W[10][4] = {
 8001210:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8001214:	3b10      	subs	r3, #16
 8001216:	4a71      	ldr	r2, [pc, #452]	; (80013dc <letter_select+0x400>)
 8001218:	4618      	mov	r0, r3
 800121a:	4611      	mov	r1, r2
 800121c:	23a0      	movs	r3, #160	; 0xa0
 800121e:	461a      	mov	r2, r3
 8001220:	f004 f80c 	bl	800523c <memcpy>
			  0xff, 0xff, 0xff, 0xff,  //@@@@
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_X[10][4] = {
 8001224:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001228:	3b10      	subs	r3, #16
 800122a:	4a6d      	ldr	r2, [pc, #436]	; (80013e0 <letter_select+0x404>)
 800122c:	4618      	mov	r0, r3
 800122e:	4611      	mov	r1, r2
 8001230:	23a0      	movs	r3, #160	; 0xa0
 8001232:	461a      	mov	r2, r3
 8001234:	f004 f802 	bl	800523c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_Y[10][5] = {
 8001238:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 800123c:	3b18      	subs	r3, #24
 800123e:	4a69      	ldr	r2, [pc, #420]	; (80013e4 <letter_select+0x408>)
 8001240:	4618      	mov	r0, r3
 8001242:	4611      	mov	r1, r2
 8001244:	23c8      	movs	r3, #200	; 0xc8
 8001246:	461a      	mov	r2, r3
 8001248:	f003 fff8 	bl	800523c <memcpy>
			  0x00, 0x00, 0xff, 0x00, 0x00,  //..@..
			  0x00, 0xff, 0xff, 0xff, 0x00,  //.@@@.
			  0x00, 0x00, 0x00, 0x00, 0x00,  //.....
			  0x00, 0x00, 0x00, 0x00, 0x00,  //.....
	};
	int letter_Z[10][4] = {
 800124c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001250:	3b18      	subs	r3, #24
 8001252:	4a65      	ldr	r2, [pc, #404]	; (80013e8 <letter_select+0x40c>)
 8001254:	4618      	mov	r0, r3
 8001256:	4611      	mov	r1, r2
 8001258:	23a0      	movs	r3, #160	; 0xa0
 800125a:	461a      	mov	r2, r3
 800125c:	f003 ffee 	bl	800523c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0xff, 0xff, 0xff,  //@@@@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int spatie[10][4] = {
 8001260:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001264:	3b18      	subs	r3, #24
 8001266:	4618      	mov	r0, r3
 8001268:	23a0      	movs	r3, #160	; 0xa0
 800126a:	461a      	mov	r2, r3
 800126c:	2100      	movs	r1, #0
 800126e:	f003 fff0 	bl	8005252 <memset>
	};


	//____________________________________SWITCH_________________________________________

	switch (letter)
 8001272:	f107 0308 	add.w	r3, r7, #8
 8001276:	3b01      	subs	r3, #1
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	3b20      	subs	r3, #32
 800127c:	2b3a      	cmp	r3, #58	; 0x3a
 800127e:	f201 8443 	bhi.w	8002b08 <letter_select+0x1b2c>
 8001282:	a201      	add	r2, pc, #4	; (adr r2, 8001288 <letter_select+0x2ac>)
 8001284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001288:	08002a25 	.word	0x08002a25
 800128c:	08002b09 	.word	0x08002b09
 8001290:	08002b09 	.word	0x08002b09
 8001294:	08002b09 	.word	0x08002b09
 8001298:	08002b09 	.word	0x08002b09
 800129c:	08002b09 	.word	0x08002b09
 80012a0:	08002b09 	.word	0x08002b09
 80012a4:	08002b09 	.word	0x08002b09
 80012a8:	08002b09 	.word	0x08002b09
 80012ac:	08002b09 	.word	0x08002b09
 80012b0:	08002b09 	.word	0x08002b09
 80012b4:	08002b09 	.word	0x08002b09
 80012b8:	08002b09 	.word	0x08002b09
 80012bc:	08002b09 	.word	0x08002b09
 80012c0:	08002b09 	.word	0x08002b09
 80012c4:	08002b09 	.word	0x08002b09
 80012c8:	08002b09 	.word	0x08002b09
 80012cc:	08002b09 	.word	0x08002b09
 80012d0:	08002b09 	.word	0x08002b09
 80012d4:	08002b09 	.word	0x08002b09
 80012d8:	08002b09 	.word	0x08002b09
 80012dc:	08002b09 	.word	0x08002b09
 80012e0:	08002b09 	.word	0x08002b09
 80012e4:	08002b09 	.word	0x08002b09
 80012e8:	08002b09 	.word	0x08002b09
 80012ec:	08002b09 	.word	0x08002b09
 80012f0:	08002b09 	.word	0x08002b09
 80012f4:	08002b09 	.word	0x08002b09
 80012f8:	08002b09 	.word	0x08002b09
 80012fc:	08002b09 	.word	0x08002b09
 8001300:	08002b09 	.word	0x08002b09
 8001304:	08002b09 	.word	0x08002b09
 8001308:	08002b09 	.word	0x08002b09
 800130c:	08001375 	.word	0x08001375
 8001310:	080014a7 	.word	0x080014a7
 8001314:	08001583 	.word	0x08001583
 8001318:	08001667 	.word	0x08001667
 800131c:	0800174b 	.word	0x0800174b
 8001320:	08001817 	.word	0x08001817
 8001324:	080018f3 	.word	0x080018f3
 8001328:	080019d7 	.word	0x080019d7
 800132c:	08001abb 	.word	0x08001abb
 8001330:	08001b8b 	.word	0x08001b8b
 8001334:	08001c67 	.word	0x08001c67
 8001338:	08001d4b 	.word	0x08001d4b
 800133c:	08001e2f 	.word	0x08001e2f
 8001340:	08001efb 	.word	0x08001efb
 8001344:	08001fd7 	.word	0x08001fd7
 8001348:	080020bb 	.word	0x080020bb
 800134c:	0800219f 	.word	0x0800219f
 8001350:	0800226b 	.word	0x0800226b
 8001354:	08002345 	.word	0x08002345
 8001358:	08002427 	.word	0x08002427
 800135c:	0800250d 	.word	0x0800250d
 8001360:	080025d7 	.word	0x080025d7
 8001364:	080026b1 	.word	0x080026b1
 8001368:	08002795 	.word	0x08002795
 800136c:	08002879 	.word	0x08002879
 8001370:	08002949 	.word	0x08002949
	{
	case 'A':
	for (int i=0; i<10; i++) {
 8001374:	2300      	movs	r3, #0
 8001376:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800137a:	f102 0204 	add.w	r2, r2, #4
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	e087      	b.n	8001492 <letter_select+0x4b6>
		for (int j=0; j<4; j++) {
 8001382:	2300      	movs	r3, #0
 8001384:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e072      	b.n	8001472 <letter_select+0x496>
 800138c:	08007454 	.word	0x08007454
 8001390:	080074f4 	.word	0x080074f4
 8001394:	08007594 	.word	0x08007594
 8001398:	08007634 	.word	0x08007634
 800139c:	080076d4 	.word	0x080076d4
 80013a0:	08007774 	.word	0x08007774
 80013a4:	08007814 	.word	0x08007814
 80013a8:	080078b4 	.word	0x080078b4
 80013ac:	08007954 	.word	0x08007954
 80013b0:	080079cc 	.word	0x080079cc
 80013b4:	08007a6c 	.word	0x08007a6c
 80013b8:	08007b0c 	.word	0x08007b0c
 80013bc:	08007bac 	.word	0x08007bac
 80013c0:	08007c4c 	.word	0x08007c4c
 80013c4:	08007cec 	.word	0x08007cec
 80013c8:	08007d8c 	.word	0x08007d8c
 80013cc:	08007e2c 	.word	0x08007e2c
 80013d0:	08007ecc 	.word	0x08007ecc
 80013d4:	08007f94 	.word	0x08007f94
 80013d8:	08008034 	.word	0x08008034
 80013dc:	080080d4 	.word	0x080080d4
 80013e0:	08008174 	.word	0x08008174
 80013e4:	08008214 	.word	0x08008214
 80013e8:	080082dc 	.word	0x080082dc

			int x_pos = j + x;
 80013ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013f0:	3b1c      	subs	r3, #28
 80013f2:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80013f6:	6812      	ldr	r2, [r2, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4413      	add	r3, r2
 80013fc:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8001400:	f102 020c 	add.w	r2, r2, #12
 8001404:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001406:	f107 0308 	add.w	r3, r7, #8
 800140a:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800140e:	f102 0204 	add.w	r2, r2, #4
 8001412:	6812      	ldr	r2, [r2, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4413      	add	r3, r2
 8001418:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 800141c:	f102 0208 	add.w	r2, r2, #8
 8001420:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_A[i][j]);
 8001422:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8001426:	f103 030c 	add.w	r3, r3, #12
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	b298      	uxth	r0, r3
 800142e:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8001432:	f103 0308 	add.w	r3, r3, #8
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	b29c      	uxth	r4, r3
 800143a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800143e:	f103 0318 	add.w	r3, r3, #24
 8001442:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8001446:	f102 0204 	add.w	r2, r2, #4
 800144a:	6812      	ldr	r2, [r2, #0]
 800144c:	0091      	lsls	r1, r2, #2
 800144e:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	440a      	add	r2, r1
 8001456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800145a:	b2db      	uxtb	r3, r3
 800145c:	461a      	mov	r2, r3
 800145e:	4621      	mov	r1, r4
 8001460:	f002 fcbc 	bl	8003ddc <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8001464:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	3301      	adds	r3, #1
 800146c:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b03      	cmp	r3, #3
 800147a:	ddb7      	ble.n	80013ec <letter_select+0x410>
	for (int i=0; i<10; i++) {
 800147c:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8001480:	f103 0304 	add.w	r3, r3, #4
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	3301      	adds	r3, #1
 8001488:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800148c:	f102 0204 	add.w	r2, r2, #4
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8001496:	f103 0304 	add.w	r3, r3, #4
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b09      	cmp	r3, #9
 800149e:	f77f af70 	ble.w	8001382 <letter_select+0x3a6>
		}
	}
	break;
 80014a2:	f001 bb34 	b.w	8002b0e <letter_select+0x1b32>


	case 'B':
	for (int i=0; i<10; i++) {
 80014a6:	2300      	movs	r3, #0
 80014a8:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80014ac:	f102 021c 	add.w	r2, r2, #28
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	e05d      	b.n	8001570 <letter_select+0x594>
		for (int j=0; j<4; j++) {
 80014b4:	2300      	movs	r3, #0
 80014b6:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80014ba:	f102 0218 	add.w	r2, r2, #24
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	e044      	b.n	800154c <letter_select+0x570>

			int x_pos = j + x;
 80014c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014c6:	3b1c      	subs	r3, #28
 80014c8:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80014cc:	f102 0218 	add.w	r2, r2, #24
 80014d0:	6812      	ldr	r2, [r2, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4413      	add	r3, r2
 80014d6:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80014da:	f102 0204 	add.w	r2, r2, #4
 80014de:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80014e0:	f107 0308 	add.w	r3, r7, #8
 80014e4:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80014e8:	f102 021c 	add.w	r2, r2, #28
 80014ec:	6812      	ldr	r2, [r2, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4413      	add	r3, r2
 80014f2:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80014f6:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_B[i][j]);
 80014f8:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 80014fc:	f103 0304 	add.w	r3, r3, #4
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	b298      	uxth	r0, r3
 8001504:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	b29c      	uxth	r4, r3
 800150c:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8001510:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8001514:	f102 021c 	add.w	r2, r2, #28
 8001518:	6812      	ldr	r2, [r2, #0]
 800151a:	0091      	lsls	r1, r2, #2
 800151c:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8001520:	f102 0218 	add.w	r2, r2, #24
 8001524:	6812      	ldr	r2, [r2, #0]
 8001526:	440a      	add	r2, r1
 8001528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	461a      	mov	r2, r3
 8001530:	4621      	mov	r1, r4
 8001532:	f002 fc53 	bl	8003ddc <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8001536:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800153a:	f103 0318 	add.w	r3, r3, #24
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	3301      	adds	r3, #1
 8001542:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8001546:	f102 0218 	add.w	r2, r2, #24
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8001550:	f103 0318 	add.w	r3, r3, #24
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b03      	cmp	r3, #3
 8001558:	ddb3      	ble.n	80014c2 <letter_select+0x4e6>
	for (int i=0; i<10; i++) {
 800155a:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800155e:	f103 031c 	add.w	r3, r3, #28
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	3301      	adds	r3, #1
 8001566:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800156a:	f102 021c 	add.w	r2, r2, #28
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8001574:	f103 031c 	add.w	r3, r3, #28
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b09      	cmp	r3, #9
 800157c:	dd9a      	ble.n	80014b4 <letter_select+0x4d8>
		}
	}
	break;
 800157e:	f001 bac6 	b.w	8002b0e <letter_select+0x1b32>


	case 'C':
	for (int i=0; i<10; i++) {
 8001582:	2300      	movs	r3, #0
 8001584:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8001588:	f102 0214 	add.w	r2, r2, #20
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e061      	b.n	8001654 <letter_select+0x678>
		for (int j=0; j<4; j++) {
 8001590:	2300      	movs	r3, #0
 8001592:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8001596:	f102 0210 	add.w	r2, r2, #16
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	e048      	b.n	8001630 <letter_select+0x654>

			int x_pos = j + x;
 800159e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015a2:	3b1c      	subs	r3, #28
 80015a4:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80015a8:	f102 0210 	add.w	r2, r2, #16
 80015ac:	6812      	ldr	r2, [r2, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4413      	add	r3, r2
 80015b2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80015b6:	f102 021c 	add.w	r2, r2, #28
 80015ba:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80015bc:	f107 0308 	add.w	r3, r7, #8
 80015c0:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80015c4:	f102 0214 	add.w	r2, r2, #20
 80015c8:	6812      	ldr	r2, [r2, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4413      	add	r3, r2
 80015ce:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80015d2:	f102 0218 	add.w	r2, r2, #24
 80015d6:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_C[i][j]);
 80015d8:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80015dc:	f103 031c 	add.w	r3, r3, #28
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	b298      	uxth	r0, r3
 80015e4:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80015e8:	f103 0318 	add.w	r3, r3, #24
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	b29c      	uxth	r4, r3
 80015f0:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 80015f4:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80015f8:	f102 0214 	add.w	r2, r2, #20
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	0091      	lsls	r1, r2, #2
 8001600:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8001604:	f102 0210 	add.w	r2, r2, #16
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	440a      	add	r2, r1
 800160c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	461a      	mov	r2, r3
 8001614:	4621      	mov	r1, r4
 8001616:	f002 fbe1 	bl	8003ddc <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 800161a:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800161e:	f103 0310 	add.w	r3, r3, #16
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	3301      	adds	r3, #1
 8001626:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800162a:	f102 0210 	add.w	r2, r2, #16
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8001634:	f103 0310 	add.w	r3, r3, #16
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b03      	cmp	r3, #3
 800163c:	ddaf      	ble.n	800159e <letter_select+0x5c2>
	for (int i=0; i<10; i++) {
 800163e:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8001642:	f103 0314 	add.w	r3, r3, #20
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	3301      	adds	r3, #1
 800164a:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800164e:	f102 0214 	add.w	r2, r2, #20
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8001658:	f103 0314 	add.w	r3, r3, #20
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b09      	cmp	r3, #9
 8001660:	dd96      	ble.n	8001590 <letter_select+0x5b4>
		}
	}
	break;
 8001662:	f001 ba54 	b.w	8002b0e <letter_select+0x1b32>


	case 'D':
	for (int i=0; i<10; i++) {
 8001666:	2300      	movs	r3, #0
 8001668:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800166c:	f102 020c 	add.w	r2, r2, #12
 8001670:	6013      	str	r3, [r2, #0]
 8001672:	e061      	b.n	8001738 <letter_select+0x75c>
		for (int j=0; j<4; j++) {
 8001674:	2300      	movs	r3, #0
 8001676:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800167a:	f102 0208 	add.w	r2, r2, #8
 800167e:	6013      	str	r3, [r2, #0]
 8001680:	e048      	b.n	8001714 <letter_select+0x738>

			int x_pos = j + x;
 8001682:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001686:	3b1c      	subs	r3, #28
 8001688:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800168c:	f102 0208 	add.w	r2, r2, #8
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4413      	add	r3, r2
 8001696:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800169a:	f102 0214 	add.w	r2, r2, #20
 800169e:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80016a0:	f107 0308 	add.w	r3, r7, #8
 80016a4:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80016a8:	f102 020c 	add.w	r2, r2, #12
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4413      	add	r3, r2
 80016b2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80016b6:	f102 0210 	add.w	r2, r2, #16
 80016ba:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_D[i][j]);
 80016bc:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80016c0:	f103 0314 	add.w	r3, r3, #20
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	b298      	uxth	r0, r3
 80016c8:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80016cc:	f103 0310 	add.w	r3, r3, #16
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	b29c      	uxth	r4, r3
 80016d4:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 80016d8:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80016dc:	f102 020c 	add.w	r2, r2, #12
 80016e0:	6812      	ldr	r2, [r2, #0]
 80016e2:	0091      	lsls	r1, r2, #2
 80016e4:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80016e8:	f102 0208 	add.w	r2, r2, #8
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	440a      	add	r2, r1
 80016f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	461a      	mov	r2, r3
 80016f8:	4621      	mov	r1, r4
 80016fa:	f002 fb6f 	bl	8003ddc <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 80016fe:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8001702:	f103 0308 	add.w	r3, r3, #8
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	3301      	adds	r3, #1
 800170a:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800170e:	f102 0208 	add.w	r2, r2, #8
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8001718:	f103 0308 	add.w	r3, r3, #8
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b03      	cmp	r3, #3
 8001720:	ddaf      	ble.n	8001682 <letter_select+0x6a6>
	for (int i=0; i<10; i++) {
 8001722:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8001726:	f103 030c 	add.w	r3, r3, #12
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	3301      	adds	r3, #1
 800172e:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8001732:	f102 020c 	add.w	r2, r2, #12
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800173c:	f103 030c 	add.w	r3, r3, #12
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	2b09      	cmp	r3, #9
 8001744:	dd96      	ble.n	8001674 <letter_select+0x698>
		}
	}
	break;
 8001746:	f001 b9e2 	b.w	8002b0e <letter_select+0x1b32>


	case 'E':
	for (int i=0; i<10; i++) {
 800174a:	2300      	movs	r3, #0
 800174c:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8001750:	f102 0204 	add.w	r2, r2, #4
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	e055      	b.n	8001804 <letter_select+0x828>
		for (int j=0; j<4; j++) {
 8001758:	2300      	movs	r3, #0
 800175a:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	e040      	b.n	80017e4 <letter_select+0x808>

			int x_pos = j + x;
 8001762:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001766:	3b1c      	subs	r3, #28
 8001768:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800176c:	6812      	ldr	r2, [r2, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4413      	add	r3, r2
 8001772:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001776:	f102 020c 	add.w	r2, r2, #12
 800177a:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 800177c:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8001780:	f103 0308 	add.w	r3, r3, #8
 8001784:	f107 0208 	add.w	r2, r7, #8
 8001788:	f507 5195 	add.w	r1, r7, #4768	; 0x12a0
 800178c:	f101 0104 	add.w	r1, r1, #4
 8001790:	6809      	ldr	r1, [r1, #0]
 8001792:	6812      	ldr	r2, [r2, #0]
 8001794:	440a      	add	r2, r1
 8001796:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_E[i][j]);
 8001798:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800179c:	f103 030c 	add.w	r3, r3, #12
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	b298      	uxth	r0, r3
 80017a4:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80017a8:	f103 0308 	add.w	r3, r3, #8
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	b29c      	uxth	r4, r3
 80017b0:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80017b4:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80017b8:	f102 0204 	add.w	r2, r2, #4
 80017bc:	6812      	ldr	r2, [r2, #0]
 80017be:	0091      	lsls	r1, r2, #2
 80017c0:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80017c4:	6812      	ldr	r2, [r2, #0]
 80017c6:	440a      	add	r2, r1
 80017c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	461a      	mov	r2, r3
 80017d0:	4621      	mov	r1, r4
 80017d2:	f002 fb03 	bl	8003ddc <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 80017d6:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	3301      	adds	r3, #1
 80017de:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80017e2:	6013      	str	r3, [r2, #0]
 80017e4:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	ddb9      	ble.n	8001762 <letter_select+0x786>
	for (int i=0; i<10; i++) {
 80017ee:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80017f2:	f103 0304 	add.w	r3, r3, #4
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	3301      	adds	r3, #1
 80017fa:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80017fe:	f102 0204 	add.w	r2, r2, #4
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8001808:	f103 0304 	add.w	r3, r3, #4
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b09      	cmp	r3, #9
 8001810:	dda2      	ble.n	8001758 <letter_select+0x77c>
		}
	}
	break;
 8001812:	f001 b97c 	b.w	8002b0e <letter_select+0x1b32>


	case 'F':
	for (int i=0; i<10; i++) {
 8001816:	2300      	movs	r3, #0
 8001818:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 800181c:	f102 021c 	add.w	r2, r2, #28
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	e05d      	b.n	80018e0 <letter_select+0x904>
		for (int j=0; j<4; j++) {
 8001824:	2300      	movs	r3, #0
 8001826:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 800182a:	f102 0218 	add.w	r2, r2, #24
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	e044      	b.n	80018bc <letter_select+0x8e0>

			int x_pos = j + x;
 8001832:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001836:	f102 0204 	add.w	r2, r2, #4
 800183a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800183e:	3b1c      	subs	r3, #28
 8001840:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 8001844:	f101 0118 	add.w	r1, r1, #24
 8001848:	6809      	ldr	r1, [r1, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	440b      	add	r3, r1
 800184e:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001850:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8001854:	f107 0208 	add.w	r2, r7, #8
 8001858:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 800185c:	f101 011c 	add.w	r1, r1, #28
 8001860:	6809      	ldr	r1, [r1, #0]
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	440a      	add	r2, r1
 8001866:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_F[i][j]);
 8001868:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800186c:	f103 0304 	add.w	r3, r3, #4
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	b298      	uxth	r0, r3
 8001874:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	b29c      	uxth	r4, r3
 800187c:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001880:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001884:	f102 021c 	add.w	r2, r2, #28
 8001888:	6812      	ldr	r2, [r2, #0]
 800188a:	0091      	lsls	r1, r2, #2
 800188c:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001890:	f102 0218 	add.w	r2, r2, #24
 8001894:	6812      	ldr	r2, [r2, #0]
 8001896:	440a      	add	r2, r1
 8001898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	461a      	mov	r2, r3
 80018a0:	4621      	mov	r1, r4
 80018a2:	f002 fa9b 	bl	8003ddc <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 80018a6:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 80018aa:	f103 0318 	add.w	r3, r3, #24
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	3301      	adds	r3, #1
 80018b2:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80018b6:	f102 0218 	add.w	r2, r2, #24
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 80018c0:	f103 0318 	add.w	r3, r3, #24
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	ddb3      	ble.n	8001832 <letter_select+0x856>
	for (int i=0; i<10; i++) {
 80018ca:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 80018ce:	f103 031c 	add.w	r3, r3, #28
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	3301      	adds	r3, #1
 80018d6:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80018da:	f102 021c 	add.w	r2, r2, #28
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 80018e4:	f103 031c 	add.w	r3, r3, #28
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b09      	cmp	r3, #9
 80018ec:	dd9a      	ble.n	8001824 <letter_select+0x848>
		}
	}
	break;
 80018ee:	f001 b90e 	b.w	8002b0e <letter_select+0x1b32>


	case 'G':
	for (int i=0; i<10; i++) {
 80018f2:	2300      	movs	r3, #0
 80018f4:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80018f8:	f102 0214 	add.w	r2, r2, #20
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	e061      	b.n	80019c4 <letter_select+0x9e8>
		for (int j=0; j<4; j++) {
 8001900:	2300      	movs	r3, #0
 8001902:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001906:	f102 0210 	add.w	r2, r2, #16
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	e048      	b.n	80019a0 <letter_select+0x9c4>

			int x_pos = j + x;
 800190e:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8001912:	f102 021c 	add.w	r2, r2, #28
 8001916:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800191a:	3b1c      	subs	r3, #28
 800191c:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 8001920:	f101 0110 	add.w	r1, r1, #16
 8001924:	6809      	ldr	r1, [r1, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	440b      	add	r3, r1
 800192a:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 800192c:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8001930:	f103 0318 	add.w	r3, r3, #24
 8001934:	f107 0208 	add.w	r2, r7, #8
 8001938:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 800193c:	f101 0114 	add.w	r1, r1, #20
 8001940:	6809      	ldr	r1, [r1, #0]
 8001942:	6812      	ldr	r2, [r2, #0]
 8001944:	440a      	add	r2, r1
 8001946:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_G[i][j]);
 8001948:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 800194c:	f103 031c 	add.w	r3, r3, #28
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	b298      	uxth	r0, r3
 8001954:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8001958:	f103 0318 	add.w	r3, r3, #24
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	b29c      	uxth	r4, r3
 8001960:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8001964:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001968:	f102 0214 	add.w	r2, r2, #20
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	0091      	lsls	r1, r2, #2
 8001970:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001974:	f102 0210 	add.w	r2, r2, #16
 8001978:	6812      	ldr	r2, [r2, #0]
 800197a:	440a      	add	r2, r1
 800197c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001980:	b2db      	uxtb	r3, r3
 8001982:	461a      	mov	r2, r3
 8001984:	4621      	mov	r1, r4
 8001986:	f002 fa29 	bl	8003ddc <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 800198a:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 800198e:	f103 0310 	add.w	r3, r3, #16
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	3301      	adds	r3, #1
 8001996:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 800199a:	f102 0210 	add.w	r2, r2, #16
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 80019a4:	f103 0310 	add.w	r3, r3, #16
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	ddaf      	ble.n	800190e <letter_select+0x932>
	for (int i=0; i<10; i++) {
 80019ae:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 80019b2:	f103 0314 	add.w	r3, r3, #20
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	3301      	adds	r3, #1
 80019ba:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80019be:	f102 0214 	add.w	r2, r2, #20
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 80019c8:	f103 0314 	add.w	r3, r3, #20
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b09      	cmp	r3, #9
 80019d0:	dd96      	ble.n	8001900 <letter_select+0x924>
		}
	}
	break;
 80019d2:	f001 b89c 	b.w	8002b0e <letter_select+0x1b32>


	case 'H':
	for (int i=0; i<10; i++) {
 80019d6:	2300      	movs	r3, #0
 80019d8:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80019dc:	f102 020c 	add.w	r2, r2, #12
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e061      	b.n	8001aa8 <letter_select+0xacc>
		for (int j=0; j<4; j++) {
 80019e4:	2300      	movs	r3, #0
 80019e6:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80019ea:	f102 0208 	add.w	r2, r2, #8
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	e048      	b.n	8001a84 <letter_select+0xaa8>

			int x_pos = j + x;
 80019f2:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 80019f6:	f102 0214 	add.w	r2, r2, #20
 80019fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019fe:	3b1c      	subs	r3, #28
 8001a00:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 8001a04:	f101 0108 	add.w	r1, r1, #8
 8001a08:	6809      	ldr	r1, [r1, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	440b      	add	r3, r1
 8001a0e:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001a10:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8001a14:	f103 0310 	add.w	r3, r3, #16
 8001a18:	f107 0208 	add.w	r2, r7, #8
 8001a1c:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 8001a20:	f101 010c 	add.w	r1, r1, #12
 8001a24:	6809      	ldr	r1, [r1, #0]
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	440a      	add	r2, r1
 8001a2a:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_H[i][j]);
 8001a2c:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8001a30:	f103 0314 	add.w	r3, r3, #20
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	b298      	uxth	r0, r3
 8001a38:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8001a3c:	f103 0310 	add.w	r3, r3, #16
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	b29c      	uxth	r4, r3
 8001a44:	f607 4318 	addw	r3, r7, #3096	; 0xc18
 8001a48:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001a4c:	f102 020c 	add.w	r2, r2, #12
 8001a50:	6812      	ldr	r2, [r2, #0]
 8001a52:	0091      	lsls	r1, r2, #2
 8001a54:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001a58:	f102 0208 	add.w	r2, r2, #8
 8001a5c:	6812      	ldr	r2, [r2, #0]
 8001a5e:	440a      	add	r2, r1
 8001a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	461a      	mov	r2, r3
 8001a68:	4621      	mov	r1, r4
 8001a6a:	f002 f9b7 	bl	8003ddc <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8001a6e:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8001a72:	f103 0308 	add.w	r3, r3, #8
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001a7e:	f102 0208 	add.w	r2, r2, #8
 8001a82:	6013      	str	r3, [r2, #0]
 8001a84:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8001a88:	f103 0308 	add.w	r3, r3, #8
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	ddaf      	ble.n	80019f2 <letter_select+0xa16>
	for (int i=0; i<10; i++) {
 8001a92:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8001a96:	f103 030c 	add.w	r3, r3, #12
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	3301      	adds	r3, #1
 8001a9e:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001aa2:	f102 020c 	add.w	r2, r2, #12
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8001aac:	f103 030c 	add.w	r3, r3, #12
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2b09      	cmp	r3, #9
 8001ab4:	dd96      	ble.n	80019e4 <letter_select+0xa08>
		}
	}
	break;
 8001ab6:	f001 b82a 	b.w	8002b0e <letter_select+0x1b32>


	case 'I':
	for (int i=0; i<10; i++) {
 8001aba:	2300      	movs	r3, #0
 8001abc:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001ac0:	f102 0204 	add.w	r2, r2, #4
 8001ac4:	6013      	str	r3, [r2, #0]
 8001ac6:	e057      	b.n	8001b78 <letter_select+0xb9c>
		for (int j=0; j<3; j++) {
 8001ac8:	2300      	movs	r3, #0
 8001aca:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	e042      	b.n	8001b58 <letter_select+0xb7c>

			int x_pos = j + x;
 8001ad2:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8001ad6:	f102 020c 	add.w	r2, r2, #12
 8001ada:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ade:	3b1c      	subs	r3, #28
 8001ae0:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 8001ae4:	6809      	ldr	r1, [r1, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	440b      	add	r3, r1
 8001aea:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001aec:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8001af0:	f103 0308 	add.w	r3, r3, #8
 8001af4:	f107 0208 	add.w	r2, r7, #8
 8001af8:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 8001afc:	f101 0104 	add.w	r1, r1, #4
 8001b00:	6809      	ldr	r1, [r1, #0]
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	440a      	add	r2, r1
 8001b06:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_I[i][j]);
 8001b08:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8001b0c:	f103 030c 	add.w	r3, r3, #12
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	b298      	uxth	r0, r3
 8001b14:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8001b18:	f103 0308 	add.w	r3, r3, #8
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	b29c      	uxth	r4, r3
 8001b20:	f507 613a 	add.w	r1, r7, #2976	; 0xba0
 8001b24:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8001b28:	f103 0304 	add.w	r3, r3, #4
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	4413      	add	r3, r2
 8001b34:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001b38:	6812      	ldr	r2, [r2, #0]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	461a      	mov	r2, r3
 8001b44:	4621      	mov	r1, r4
 8001b46:	f002 f949 	bl	8003ddc <UB_VGA_SetPixel>
		for (int j=0; j<3; j++) {
 8001b4a:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	3301      	adds	r3, #1
 8001b52:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	ddb7      	ble.n	8001ad2 <letter_select+0xaf6>
	for (int i=0; i<10; i++) {
 8001b62:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8001b66:	f103 0304 	add.w	r3, r3, #4
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001b72:	f102 0204 	add.w	r2, r2, #4
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8001b7c:	f103 0304 	add.w	r3, r3, #4
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b09      	cmp	r3, #9
 8001b84:	dda0      	ble.n	8001ac8 <letter_select+0xaec>
		}
	}
	break;
 8001b86:	f000 bfc2 	b.w	8002b0e <letter_select+0x1b32>


	case 'J':
	for (int i=0; i<10; i++) {
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001b90:	f102 021c 	add.w	r2, r2, #28
 8001b94:	6013      	str	r3, [r2, #0]
 8001b96:	e05d      	b.n	8001c54 <letter_select+0xc78>
		for (int j=0; j<4; j++) {
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001b9e:	f102 0218 	add.w	r2, r2, #24
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	e044      	b.n	8001c30 <letter_select+0xc54>

			int x_pos = j + x;
 8001ba6:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8001baa:	f102 0204 	add.w	r2, r2, #4
 8001bae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bb2:	3b1c      	subs	r3, #28
 8001bb4:	f507 5193 	add.w	r1, r7, #4704	; 0x1260
 8001bb8:	f101 0118 	add.w	r1, r1, #24
 8001bbc:	6809      	ldr	r1, [r1, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	440b      	add	r3, r1
 8001bc2:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001bc4:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8001bc8:	f107 0208 	add.w	r2, r7, #8
 8001bcc:	f507 5193 	add.w	r1, r7, #4704	; 0x1260
 8001bd0:	f101 011c 	add.w	r1, r1, #28
 8001bd4:	6809      	ldr	r1, [r1, #0]
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	440a      	add	r2, r1
 8001bda:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_J[i][j]);
 8001bdc:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8001be0:	f103 0304 	add.w	r3, r3, #4
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	b298      	uxth	r0, r3
 8001be8:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	b29c      	uxth	r4, r3
 8001bf0:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001bf4:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001bf8:	f102 021c 	add.w	r2, r2, #28
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	0091      	lsls	r1, r2, #2
 8001c00:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001c04:	f102 0218 	add.w	r2, r2, #24
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	440a      	add	r2, r1
 8001c0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461a      	mov	r2, r3
 8001c14:	4621      	mov	r1, r4
 8001c16:	f002 f8e1 	bl	8003ddc <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8001c1a:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001c1e:	f103 0318 	add.w	r3, r3, #24
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	3301      	adds	r3, #1
 8001c26:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001c2a:	f102 0218 	add.w	r2, r2, #24
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001c34:	f103 0318 	add.w	r3, r3, #24
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	ddb3      	ble.n	8001ba6 <letter_select+0xbca>
	for (int i=0; i<10; i++) {
 8001c3e:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001c42:	f103 031c 	add.w	r3, r3, #28
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001c4e:	f102 021c 	add.w	r2, r2, #28
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001c58:	f103 031c 	add.w	r3, r3, #28
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	2b09      	cmp	r3, #9
 8001c60:	dd9a      	ble.n	8001b98 <letter_select+0xbbc>
		}
	}
	break;
 8001c62:	f000 bf54 	b.w	8002b0e <letter_select+0x1b32>


	case 'K':
	for (int i=0; i<10; i++) {
 8001c66:	2300      	movs	r3, #0
 8001c68:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001c6c:	f102 0214 	add.w	r2, r2, #20
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	e061      	b.n	8001d38 <letter_select+0xd5c>
		for (int j=0; j<4; j++) {
 8001c74:	2300      	movs	r3, #0
 8001c76:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001c7a:	f102 0210 	add.w	r2, r2, #16
 8001c7e:	6013      	str	r3, [r2, #0]
 8001c80:	e048      	b.n	8001d14 <letter_select+0xd38>

			int x_pos = j + x;
 8001c82:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 8001c86:	f102 021c 	add.w	r2, r2, #28
 8001c8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c8e:	3b1c      	subs	r3, #28
 8001c90:	f507 5193 	add.w	r1, r7, #4704	; 0x1260
 8001c94:	f101 0110 	add.w	r1, r1, #16
 8001c98:	6809      	ldr	r1, [r1, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	440b      	add	r3, r1
 8001c9e:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001ca0:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001ca4:	f103 0318 	add.w	r3, r3, #24
 8001ca8:	f107 0208 	add.w	r2, r7, #8
 8001cac:	f507 5193 	add.w	r1, r7, #4704	; 0x1260
 8001cb0:	f101 0114 	add.w	r1, r1, #20
 8001cb4:	6809      	ldr	r1, [r1, #0]
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	440a      	add	r2, r1
 8001cba:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_K[i][j]);
 8001cbc:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001cc0:	f103 031c 	add.w	r3, r3, #28
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	b298      	uxth	r0, r3
 8001cc8:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001ccc:	f103 0318 	add.w	r3, r3, #24
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	b29c      	uxth	r4, r3
 8001cd4:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8001cd8:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001cdc:	f102 0214 	add.w	r2, r2, #20
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	0091      	lsls	r1, r2, #2
 8001ce4:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001ce8:	f102 0210 	add.w	r2, r2, #16
 8001cec:	6812      	ldr	r2, [r2, #0]
 8001cee:	440a      	add	r2, r1
 8001cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4621      	mov	r1, r4
 8001cfa:	f002 f86f 	bl	8003ddc <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8001cfe:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001d02:	f103 0310 	add.w	r3, r3, #16
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001d0e:	f102 0210 	add.w	r2, r2, #16
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001d18:	f103 0310 	add.w	r3, r3, #16
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b03      	cmp	r3, #3
 8001d20:	ddaf      	ble.n	8001c82 <letter_select+0xca6>
	for (int i=0; i<10; i++) {
 8001d22:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001d26:	f103 0314 	add.w	r3, r3, #20
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001d32:	f102 0214 	add.w	r2, r2, #20
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001d3c:	f103 0314 	add.w	r3, r3, #20
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2b09      	cmp	r3, #9
 8001d44:	dd96      	ble.n	8001c74 <letter_select+0xc98>
		}
	}
	break;
 8001d46:	f000 bee2 	b.w	8002b0e <letter_select+0x1b32>


	case 'L':
	for (int i=0; i<10; i++) {
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001d50:	f102 020c 	add.w	r2, r2, #12
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	e061      	b.n	8001e1c <letter_select+0xe40>
		for (int j=0; j<4; j++) {
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001d5e:	f102 0208 	add.w	r2, r2, #8
 8001d62:	6013      	str	r3, [r2, #0]
 8001d64:	e048      	b.n	8001df8 <letter_select+0xe1c>

			int x_pos = j + x;
 8001d66:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 8001d6a:	f102 0214 	add.w	r2, r2, #20
 8001d6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d72:	3b1c      	subs	r3, #28
 8001d74:	f507 5193 	add.w	r1, r7, #4704	; 0x1260
 8001d78:	f101 0108 	add.w	r1, r1, #8
 8001d7c:	6809      	ldr	r1, [r1, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	440b      	add	r3, r1
 8001d82:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001d84:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001d88:	f103 0310 	add.w	r3, r3, #16
 8001d8c:	f107 0208 	add.w	r2, r7, #8
 8001d90:	f507 5193 	add.w	r1, r7, #4704	; 0x1260
 8001d94:	f101 010c 	add.w	r1, r1, #12
 8001d98:	6809      	ldr	r1, [r1, #0]
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	440a      	add	r2, r1
 8001d9e:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_L[i][j]);
 8001da0:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001da4:	f103 0314 	add.w	r3, r3, #20
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	b298      	uxth	r0, r3
 8001dac:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001db0:	f103 0310 	add.w	r3, r3, #16
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	b29c      	uxth	r4, r3
 8001db8:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8001dbc:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001dc0:	f102 020c 	add.w	r2, r2, #12
 8001dc4:	6812      	ldr	r2, [r2, #0]
 8001dc6:	0091      	lsls	r1, r2, #2
 8001dc8:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001dcc:	f102 0208 	add.w	r2, r2, #8
 8001dd0:	6812      	ldr	r2, [r2, #0]
 8001dd2:	440a      	add	r2, r1
 8001dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4621      	mov	r1, r4
 8001dde:	f001 fffd 	bl	8003ddc <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8001de2:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001de6:	f103 0308 	add.w	r3, r3, #8
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	3301      	adds	r3, #1
 8001dee:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001df2:	f102 0208 	add.w	r2, r2, #8
 8001df6:	6013      	str	r3, [r2, #0]
 8001df8:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001dfc:	f103 0308 	add.w	r3, r3, #8
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2b03      	cmp	r3, #3
 8001e04:	ddaf      	ble.n	8001d66 <letter_select+0xd8a>
	for (int i=0; i<10; i++) {
 8001e06:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001e0a:	f103 030c 	add.w	r3, r3, #12
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	3301      	adds	r3, #1
 8001e12:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001e16:	f102 020c 	add.w	r2, r2, #12
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001e20:	f103 030c 	add.w	r3, r3, #12
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b09      	cmp	r3, #9
 8001e28:	dd96      	ble.n	8001d58 <letter_select+0xd7c>
		}
	}
	break;
 8001e2a:	f000 be70 	b.w	8002b0e <letter_select+0x1b32>


	case 'M':
	for (int i=0; i<10; i++) {
 8001e2e:	2300      	movs	r3, #0
 8001e30:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001e34:	f102 0204 	add.w	r2, r2, #4
 8001e38:	6013      	str	r3, [r2, #0]
 8001e3a:	e055      	b.n	8001ee8 <letter_select+0xf0c>
		for (int j=0; j<4; j++) {
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	e040      	b.n	8001ec8 <letter_select+0xeec>

			int x_pos = j + x;
 8001e46:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 8001e4a:	f102 020c 	add.w	r2, r2, #12
 8001e4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e52:	3b1c      	subs	r3, #28
 8001e54:	f507 5193 	add.w	r1, r7, #4704	; 0x1260
 8001e58:	6809      	ldr	r1, [r1, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	440b      	add	r3, r1
 8001e5e:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001e60:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001e64:	f103 0308 	add.w	r3, r3, #8
 8001e68:	f107 0208 	add.w	r2, r7, #8
 8001e6c:	f507 5193 	add.w	r1, r7, #4704	; 0x1260
 8001e70:	f101 0104 	add.w	r1, r1, #4
 8001e74:	6809      	ldr	r1, [r1, #0]
 8001e76:	6812      	ldr	r2, [r2, #0]
 8001e78:	440a      	add	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_M[i][j]);
 8001e7c:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001e80:	f103 030c 	add.w	r3, r3, #12
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	b298      	uxth	r0, r3
 8001e88:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001e8c:	f103 0308 	add.w	r3, r3, #8
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	b29c      	uxth	r4, r3
 8001e94:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8001e98:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001e9c:	f102 0204 	add.w	r2, r2, #4
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	0091      	lsls	r1, r2, #2
 8001ea4:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	440a      	add	r2, r1
 8001eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4621      	mov	r1, r4
 8001eb6:	f001 ff91 	bl	8003ddc <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8001eba:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	ddb9      	ble.n	8001e46 <letter_select+0xe6a>
	for (int i=0; i<10; i++) {
 8001ed2:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001ed6:	f103 0304 	add.w	r3, r3, #4
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	3301      	adds	r3, #1
 8001ede:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001ee2:	f102 0204 	add.w	r2, r2, #4
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001eec:	f103 0304 	add.w	r3, r3, #4
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2b09      	cmp	r3, #9
 8001ef4:	dda2      	ble.n	8001e3c <letter_select+0xe60>
		}
	}
	break;
 8001ef6:	f000 be0a 	b.w	8002b0e <letter_select+0x1b32>


	case 'N':
	for (int i=0; i<10; i++) {
 8001efa:	2300      	movs	r3, #0
 8001efc:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8001f00:	f102 021c 	add.w	r2, r2, #28
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	e05d      	b.n	8001fc4 <letter_select+0xfe8>
		for (int j=0; j<4; j++) {
 8001f08:	2300      	movs	r3, #0
 8001f0a:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8001f0e:	f102 0218 	add.w	r2, r2, #24
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	e044      	b.n	8001fa0 <letter_select+0xfc4>

			int x_pos = j + x;
 8001f16:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 8001f1a:	f102 0204 	add.w	r2, r2, #4
 8001f1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f22:	3b1c      	subs	r3, #28
 8001f24:	f507 5192 	add.w	r1, r7, #4672	; 0x1240
 8001f28:	f101 0118 	add.w	r1, r1, #24
 8001f2c:	6809      	ldr	r1, [r1, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	440b      	add	r3, r1
 8001f32:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001f34:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001f38:	f107 0208 	add.w	r2, r7, #8
 8001f3c:	f507 5192 	add.w	r1, r7, #4672	; 0x1240
 8001f40:	f101 011c 	add.w	r1, r1, #28
 8001f44:	6809      	ldr	r1, [r1, #0]
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	440a      	add	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_N[i][j]);
 8001f4c:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001f50:	f103 0304 	add.w	r3, r3, #4
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	b298      	uxth	r0, r3
 8001f58:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	b29c      	uxth	r4, r3
 8001f60:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001f64:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8001f68:	f102 021c 	add.w	r2, r2, #28
 8001f6c:	6812      	ldr	r2, [r2, #0]
 8001f6e:	0091      	lsls	r1, r2, #2
 8001f70:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8001f74:	f102 0218 	add.w	r2, r2, #24
 8001f78:	6812      	ldr	r2, [r2, #0]
 8001f7a:	440a      	add	r2, r1
 8001f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	461a      	mov	r2, r3
 8001f84:	4621      	mov	r1, r4
 8001f86:	f001 ff29 	bl	8003ddc <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8001f8a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001f8e:	f103 0318 	add.w	r3, r3, #24
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	3301      	adds	r3, #1
 8001f96:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8001f9a:	f102 0218 	add.w	r2, r2, #24
 8001f9e:	6013      	str	r3, [r2, #0]
 8001fa0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001fa4:	f103 0318 	add.w	r3, r3, #24
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	ddb3      	ble.n	8001f16 <letter_select+0xf3a>
	for (int i=0; i<10; i++) {
 8001fae:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001fb2:	f103 031c 	add.w	r3, r3, #28
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8001fbe:	f102 021c 	add.w	r2, r2, #28
 8001fc2:	6013      	str	r3, [r2, #0]
 8001fc4:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001fc8:	f103 031c 	add.w	r3, r3, #28
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2b09      	cmp	r3, #9
 8001fd0:	dd9a      	ble.n	8001f08 <letter_select+0xf2c>
		}
	}
	break;
 8001fd2:	f000 bd9c 	b.w	8002b0e <letter_select+0x1b32>


	case 'O':
	for (int i=0; i<10; i++) {
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8001fdc:	f102 0214 	add.w	r2, r2, #20
 8001fe0:	6013      	str	r3, [r2, #0]
 8001fe2:	e061      	b.n	80020a8 <letter_select+0x10cc>
		for (int j=0; j<4; j++) {
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8001fea:	f102 0210 	add.w	r2, r2, #16
 8001fee:	6013      	str	r3, [r2, #0]
 8001ff0:	e048      	b.n	8002084 <letter_select+0x10a8>

			int x_pos = j + x;
 8001ff2:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8001ff6:	f102 021c 	add.w	r2, r2, #28
 8001ffa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ffe:	3b1c      	subs	r3, #28
 8002000:	f507 5192 	add.w	r1, r7, #4672	; 0x1240
 8002004:	f101 0110 	add.w	r1, r1, #16
 8002008:	6809      	ldr	r1, [r1, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	440b      	add	r3, r1
 800200e:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8002010:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8002014:	f103 0318 	add.w	r3, r3, #24
 8002018:	f107 0208 	add.w	r2, r7, #8
 800201c:	f507 5192 	add.w	r1, r7, #4672	; 0x1240
 8002020:	f101 0114 	add.w	r1, r1, #20
 8002024:	6809      	ldr	r1, [r1, #0]
 8002026:	6812      	ldr	r2, [r2, #0]
 8002028:	440a      	add	r2, r1
 800202a:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_O[i][j]);
 800202c:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8002030:	f103 031c 	add.w	r3, r3, #28
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	b298      	uxth	r0, r3
 8002038:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 800203c:	f103 0318 	add.w	r3, r3, #24
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	b29c      	uxth	r4, r3
 8002044:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8002048:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 800204c:	f102 0214 	add.w	r2, r2, #20
 8002050:	6812      	ldr	r2, [r2, #0]
 8002052:	0091      	lsls	r1, r2, #2
 8002054:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8002058:	f102 0210 	add.w	r2, r2, #16
 800205c:	6812      	ldr	r2, [r2, #0]
 800205e:	440a      	add	r2, r1
 8002060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002064:	b2db      	uxtb	r3, r3
 8002066:	461a      	mov	r2, r3
 8002068:	4621      	mov	r1, r4
 800206a:	f001 feb7 	bl	8003ddc <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 800206e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002072:	f103 0310 	add.w	r3, r3, #16
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	3301      	adds	r3, #1
 800207a:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 800207e:	f102 0210 	add.w	r2, r2, #16
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002088:	f103 0310 	add.w	r3, r3, #16
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b03      	cmp	r3, #3
 8002090:	ddaf      	ble.n	8001ff2 <letter_select+0x1016>
	for (int i=0; i<10; i++) {
 8002092:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002096:	f103 0314 	add.w	r3, r3, #20
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	3301      	adds	r3, #1
 800209e:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 80020a2:	f102 0214 	add.w	r2, r2, #20
 80020a6:	6013      	str	r3, [r2, #0]
 80020a8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80020ac:	f103 0314 	add.w	r3, r3, #20
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2b09      	cmp	r3, #9
 80020b4:	dd96      	ble.n	8001fe4 <letter_select+0x1008>
		}
	}
	break;
 80020b6:	f000 bd2a 	b.w	8002b0e <letter_select+0x1b32>


	case 'P':
	for (int i=0; i<10; i++) {
 80020ba:	2300      	movs	r3, #0
 80020bc:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 80020c0:	f102 020c 	add.w	r2, r2, #12
 80020c4:	6013      	str	r3, [r2, #0]
 80020c6:	e061      	b.n	800218c <letter_select+0x11b0>
		for (int j=0; j<4; j++) {
 80020c8:	2300      	movs	r3, #0
 80020ca:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 80020ce:	f102 0208 	add.w	r2, r2, #8
 80020d2:	6013      	str	r3, [r2, #0]
 80020d4:	e048      	b.n	8002168 <letter_select+0x118c>

			int x_pos = j + x;
 80020d6:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80020da:	f102 0214 	add.w	r2, r2, #20
 80020de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020e2:	3b1c      	subs	r3, #28
 80020e4:	f507 5192 	add.w	r1, r7, #4672	; 0x1240
 80020e8:	f101 0108 	add.w	r1, r1, #8
 80020ec:	6809      	ldr	r1, [r1, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	440b      	add	r3, r1
 80020f2:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80020f4:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80020f8:	f103 0310 	add.w	r3, r3, #16
 80020fc:	f107 0208 	add.w	r2, r7, #8
 8002100:	f507 5192 	add.w	r1, r7, #4672	; 0x1240
 8002104:	f101 010c 	add.w	r1, r1, #12
 8002108:	6809      	ldr	r1, [r1, #0]
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	440a      	add	r2, r1
 800210e:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_P[i][j]);
 8002110:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8002114:	f103 0314 	add.w	r3, r3, #20
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	b298      	uxth	r0, r3
 800211c:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8002120:	f103 0310 	add.w	r3, r3, #16
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	b29c      	uxth	r4, r3
 8002128:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800212c:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8002130:	f102 020c 	add.w	r2, r2, #12
 8002134:	6812      	ldr	r2, [r2, #0]
 8002136:	0091      	lsls	r1, r2, #2
 8002138:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 800213c:	f102 0208 	add.w	r2, r2, #8
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	440a      	add	r2, r1
 8002144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	461a      	mov	r2, r3
 800214c:	4621      	mov	r1, r4
 800214e:	f001 fe45 	bl	8003ddc <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8002152:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002156:	f103 0308 	add.w	r3, r3, #8
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	3301      	adds	r3, #1
 800215e:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8002162:	f102 0208 	add.w	r2, r2, #8
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800216c:	f103 0308 	add.w	r3, r3, #8
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b03      	cmp	r3, #3
 8002174:	ddaf      	ble.n	80020d6 <letter_select+0x10fa>
	for (int i=0; i<10; i++) {
 8002176:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800217a:	f103 030c 	add.w	r3, r3, #12
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	3301      	adds	r3, #1
 8002182:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8002186:	f102 020c 	add.w	r2, r2, #12
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002190:	f103 030c 	add.w	r3, r3, #12
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b09      	cmp	r3, #9
 8002198:	dd96      	ble.n	80020c8 <letter_select+0x10ec>
		}
	}
	break;
 800219a:	f000 bcb8 	b.w	8002b0e <letter_select+0x1b32>


	case 'Q':
	for (int i=0; i<10; i++) {
 800219e:	2300      	movs	r3, #0
 80021a0:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 80021a4:	f102 0204 	add.w	r2, r2, #4
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	e055      	b.n	8002258 <letter_select+0x127c>
		for (int j=0; j<4; j++) {
 80021ac:	2300      	movs	r3, #0
 80021ae:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	e040      	b.n	8002238 <letter_select+0x125c>

			int x_pos = j + x;
 80021b6:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80021ba:	f102 020c 	add.w	r2, r2, #12
 80021be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021c2:	3b1c      	subs	r3, #28
 80021c4:	f507 5192 	add.w	r1, r7, #4672	; 0x1240
 80021c8:	6809      	ldr	r1, [r1, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	440b      	add	r3, r1
 80021ce:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80021d0:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80021d4:	f103 0308 	add.w	r3, r3, #8
 80021d8:	f107 0208 	add.w	r2, r7, #8
 80021dc:	f507 5192 	add.w	r1, r7, #4672	; 0x1240
 80021e0:	f101 0104 	add.w	r1, r1, #4
 80021e4:	6809      	ldr	r1, [r1, #0]
 80021e6:	6812      	ldr	r2, [r2, #0]
 80021e8:	440a      	add	r2, r1
 80021ea:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_Q[i][j]);
 80021ec:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80021f0:	f103 030c 	add.w	r3, r3, #12
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	b298      	uxth	r0, r3
 80021f8:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80021fc:	f103 0308 	add.w	r3, r3, #8
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	b29c      	uxth	r4, r3
 8002204:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8002208:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 800220c:	f102 0204 	add.w	r2, r2, #4
 8002210:	6812      	ldr	r2, [r2, #0]
 8002212:	0091      	lsls	r1, r2, #2
 8002214:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	440a      	add	r2, r1
 800221c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	461a      	mov	r2, r3
 8002224:	4621      	mov	r1, r4
 8002226:	f001 fdd9 	bl	8003ddc <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 800222a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	3301      	adds	r3, #1
 8002232:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2b03      	cmp	r3, #3
 8002240:	ddb9      	ble.n	80021b6 <letter_select+0x11da>
	for (int i=0; i<10; i++) {
 8002242:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002246:	f103 0304 	add.w	r3, r3, #4
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	3301      	adds	r3, #1
 800224e:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8002252:	f102 0204 	add.w	r2, r2, #4
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800225c:	f103 0304 	add.w	r3, r3, #4
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b09      	cmp	r3, #9
 8002264:	dda2      	ble.n	80021ac <letter_select+0x11d0>
		}
	}
	break;
 8002266:	f000 bc52 	b.w	8002b0e <letter_select+0x1b32>


	case 'R':
	for (int i=0; i<10; i++) {
 800226a:	2300      	movs	r3, #0
 800226c:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8002270:	f102 021c 	add.w	r2, r2, #28
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e05d      	b.n	8002334 <letter_select+0x1358>
		for (int j=0; j<4; j++) {
 8002278:	2300      	movs	r3, #0
 800227a:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 800227e:	f102 0218 	add.w	r2, r2, #24
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	e044      	b.n	8002310 <letter_select+0x1334>

			int x_pos = j + x;
 8002286:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 800228a:	f102 0204 	add.w	r2, r2, #4
 800228e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002292:	3b1c      	subs	r3, #28
 8002294:	f507 5191 	add.w	r1, r7, #4640	; 0x1220
 8002298:	f101 0118 	add.w	r1, r1, #24
 800229c:	6809      	ldr	r1, [r1, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	440b      	add	r3, r1
 80022a2:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80022a4:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80022a8:	f107 0208 	add.w	r2, r7, #8
 80022ac:	f507 5191 	add.w	r1, r7, #4640	; 0x1220
 80022b0:	f101 011c 	add.w	r1, r1, #28
 80022b4:	6809      	ldr	r1, [r1, #0]
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	440a      	add	r2, r1
 80022ba:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_R[i][j]);
 80022bc:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80022c0:	f103 0304 	add.w	r3, r3, #4
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	b298      	uxth	r0, r3
 80022c8:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	b29c      	uxth	r4, r3
 80022d0:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80022d4:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80022d8:	f102 021c 	add.w	r2, r2, #28
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	0091      	lsls	r1, r2, #2
 80022e0:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80022e4:	f102 0218 	add.w	r2, r2, #24
 80022e8:	6812      	ldr	r2, [r2, #0]
 80022ea:	440a      	add	r2, r1
 80022ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	461a      	mov	r2, r3
 80022f4:	4621      	mov	r1, r4
 80022f6:	f001 fd71 	bl	8003ddc <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 80022fa:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 80022fe:	f103 0318 	add.w	r3, r3, #24
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	3301      	adds	r3, #1
 8002306:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 800230a:	f102 0218 	add.w	r2, r2, #24
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8002314:	f103 0318 	add.w	r3, r3, #24
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b03      	cmp	r3, #3
 800231c:	ddb3      	ble.n	8002286 <letter_select+0x12aa>
	for (int i=0; i<10; i++) {
 800231e:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8002322:	f103 031c 	add.w	r3, r3, #28
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	3301      	adds	r3, #1
 800232a:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 800232e:	f102 021c 	add.w	r2, r2, #28
 8002332:	6013      	str	r3, [r2, #0]
 8002334:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8002338:	f103 031c 	add.w	r3, r3, #28
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b09      	cmp	r3, #9
 8002340:	dd9a      	ble.n	8002278 <letter_select+0x129c>
		}
	}
	break;
 8002342:	e3e4      	b.n	8002b0e <letter_select+0x1b32>


	case 'S':
	for (int i=0; i<10; i++) {
 8002344:	2300      	movs	r3, #0
 8002346:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 800234a:	f102 0214 	add.w	r2, r2, #20
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	e061      	b.n	8002416 <letter_select+0x143a>
		for (int j=0; j<4; j++) {
 8002352:	2300      	movs	r3, #0
 8002354:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8002358:	f102 0210 	add.w	r2, r2, #16
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	e048      	b.n	80023f2 <letter_select+0x1416>

			int x_pos = j + x;
 8002360:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8002364:	f102 021c 	add.w	r2, r2, #28
 8002368:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800236c:	3b1c      	subs	r3, #28
 800236e:	f507 5191 	add.w	r1, r7, #4640	; 0x1220
 8002372:	f101 0110 	add.w	r1, r1, #16
 8002376:	6809      	ldr	r1, [r1, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	440b      	add	r3, r1
 800237c:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 800237e:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8002382:	f103 0318 	add.w	r3, r3, #24
 8002386:	f107 0208 	add.w	r2, r7, #8
 800238a:	f507 5191 	add.w	r1, r7, #4640	; 0x1220
 800238e:	f101 0114 	add.w	r1, r1, #20
 8002392:	6809      	ldr	r1, [r1, #0]
 8002394:	6812      	ldr	r2, [r2, #0]
 8002396:	440a      	add	r2, r1
 8002398:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_S[i][j]);
 800239a:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800239e:	f103 031c 	add.w	r3, r3, #28
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	b298      	uxth	r0, r3
 80023a6:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80023aa:	f103 0318 	add.w	r3, r3, #24
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	b29c      	uxth	r4, r3
 80023b2:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80023b6:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80023ba:	f102 0214 	add.w	r2, r2, #20
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	0091      	lsls	r1, r2, #2
 80023c2:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80023c6:	f102 0210 	add.w	r2, r2, #16
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	440a      	add	r2, r1
 80023ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	461a      	mov	r2, r3
 80023d6:	4621      	mov	r1, r4
 80023d8:	f001 fd00 	bl	8003ddc <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 80023dc:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 80023e0:	f103 0310 	add.w	r3, r3, #16
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	3301      	adds	r3, #1
 80023e8:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80023ec:	f102 0210 	add.w	r2, r2, #16
 80023f0:	6013      	str	r3, [r2, #0]
 80023f2:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 80023f6:	f103 0310 	add.w	r3, r3, #16
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	ddaf      	ble.n	8002360 <letter_select+0x1384>
	for (int i=0; i<10; i++) {
 8002400:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8002404:	f103 0314 	add.w	r3, r3, #20
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	3301      	adds	r3, #1
 800240c:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8002410:	f102 0214 	add.w	r2, r2, #20
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 800241a:	f103 0314 	add.w	r3, r3, #20
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2b09      	cmp	r3, #9
 8002422:	dd96      	ble.n	8002352 <letter_select+0x1376>
		}
	}
	break;
 8002424:	e373      	b.n	8002b0e <letter_select+0x1b32>


	case 'T':
	for (int i=0; i<10; i++) {
 8002426:	2300      	movs	r3, #0
 8002428:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 800242c:	f102 020c 	add.w	r2, r2, #12
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	e063      	b.n	80024fc <letter_select+0x1520>
		for (int j=0; j<5; j++) {
 8002434:	2300      	movs	r3, #0
 8002436:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 800243a:	f102 0208 	add.w	r2, r2, #8
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	e04a      	b.n	80024d8 <letter_select+0x14fc>

			int x_pos = j + x;
 8002442:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8002446:	f102 0214 	add.w	r2, r2, #20
 800244a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800244e:	3b1c      	subs	r3, #28
 8002450:	f507 5191 	add.w	r1, r7, #4640	; 0x1220
 8002454:	f101 0108 	add.w	r1, r1, #8
 8002458:	6809      	ldr	r1, [r1, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	440b      	add	r3, r1
 800245e:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8002460:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8002464:	f103 0310 	add.w	r3, r3, #16
 8002468:	f107 0208 	add.w	r2, r7, #8
 800246c:	f507 5191 	add.w	r1, r7, #4640	; 0x1220
 8002470:	f101 010c 	add.w	r1, r1, #12
 8002474:	6809      	ldr	r1, [r1, #0]
 8002476:	6812      	ldr	r2, [r2, #0]
 8002478:	440a      	add	r2, r1
 800247a:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_T[i][j]);
 800247c:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8002480:	f103 0314 	add.w	r3, r3, #20
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	b298      	uxth	r0, r3
 8002488:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800248c:	f103 0310 	add.w	r3, r3, #16
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	b29c      	uxth	r4, r3
 8002494:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 8002498:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 800249c:	f103 030c 	add.w	r3, r3, #12
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80024ac:	f102 0208 	add.w	r2, r2, #8
 80024b0:	6812      	ldr	r2, [r2, #0]
 80024b2:	4413      	add	r3, r2
 80024b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	461a      	mov	r2, r3
 80024bc:	4621      	mov	r1, r4
 80024be:	f001 fc8d 	bl	8003ddc <UB_VGA_SetPixel>
		for (int j=0; j<5; j++) {
 80024c2:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 80024c6:	f103 0308 	add.w	r3, r3, #8
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	3301      	adds	r3, #1
 80024ce:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80024d2:	f102 0208 	add.w	r2, r2, #8
 80024d6:	6013      	str	r3, [r2, #0]
 80024d8:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 80024dc:	f103 0308 	add.w	r3, r3, #8
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	ddad      	ble.n	8002442 <letter_select+0x1466>
	for (int i=0; i<10; i++) {
 80024e6:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 80024ea:	f103 030c 	add.w	r3, r3, #12
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	3301      	adds	r3, #1
 80024f2:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80024f6:	f102 020c 	add.w	r2, r2, #12
 80024fa:	6013      	str	r3, [r2, #0]
 80024fc:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8002500:	f103 030c 	add.w	r3, r3, #12
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	2b09      	cmp	r3, #9
 8002508:	dd94      	ble.n	8002434 <letter_select+0x1458>
		}
	}
	break;
 800250a:	e300      	b.n	8002b0e <letter_select+0x1b32>


	case 'U':
	for (int i=0; i<10; i++) {
 800250c:	2300      	movs	r3, #0
 800250e:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8002512:	f102 0204 	add.w	r2, r2, #4
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	e055      	b.n	80025c6 <letter_select+0x15ea>
		for (int j=0; j<4; j++) {
 800251a:	2300      	movs	r3, #0
 800251c:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8002520:	6013      	str	r3, [r2, #0]
 8002522:	e040      	b.n	80025a6 <letter_select+0x15ca>

			int x_pos = j + x;
 8002524:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8002528:	f102 020c 	add.w	r2, r2, #12
 800252c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002530:	3b1c      	subs	r3, #28
 8002532:	f507 5191 	add.w	r1, r7, #4640	; 0x1220
 8002536:	6809      	ldr	r1, [r1, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	440b      	add	r3, r1
 800253c:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 800253e:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8002542:	f103 0308 	add.w	r3, r3, #8
 8002546:	f107 0208 	add.w	r2, r7, #8
 800254a:	f507 5191 	add.w	r1, r7, #4640	; 0x1220
 800254e:	f101 0104 	add.w	r1, r1, #4
 8002552:	6809      	ldr	r1, [r1, #0]
 8002554:	6812      	ldr	r2, [r2, #0]
 8002556:	440a      	add	r2, r1
 8002558:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_U[i][j]);
 800255a:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800255e:	f103 030c 	add.w	r3, r3, #12
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	b298      	uxth	r0, r3
 8002566:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800256a:	f103 0308 	add.w	r3, r3, #8
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	b29c      	uxth	r4, r3
 8002572:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002576:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 800257a:	f102 0204 	add.w	r2, r2, #4
 800257e:	6812      	ldr	r2, [r2, #0]
 8002580:	0091      	lsls	r1, r2, #2
 8002582:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	440a      	add	r2, r1
 800258a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800258e:	b2db      	uxtb	r3, r3
 8002590:	461a      	mov	r2, r3
 8002592:	4621      	mov	r1, r4
 8002594:	f001 fc22 	bl	8003ddc <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8002598:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	3301      	adds	r3, #1
 80025a0:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b03      	cmp	r3, #3
 80025ae:	ddb9      	ble.n	8002524 <letter_select+0x1548>
	for (int i=0; i<10; i++) {
 80025b0:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 80025b4:	f103 0304 	add.w	r3, r3, #4
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	3301      	adds	r3, #1
 80025bc:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80025c0:	f102 0204 	add.w	r2, r2, #4
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 80025ca:	f103 0304 	add.w	r3, r3, #4
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2b09      	cmp	r3, #9
 80025d2:	dda2      	ble.n	800251a <letter_select+0x153e>
		}
	}
	break;
 80025d4:	e29b      	b.n	8002b0e <letter_select+0x1b32>


	case 'V':
	for (int i=0; i<10; i++) {
 80025d6:	2300      	movs	r3, #0
 80025d8:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80025dc:	f102 021c 	add.w	r2, r2, #28
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	e05d      	b.n	80026a0 <letter_select+0x16c4>
		for (int j=0; j<4; j++) {
 80025e4:	2300      	movs	r3, #0
 80025e6:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80025ea:	f102 0218 	add.w	r2, r2, #24
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	e044      	b.n	800267c <letter_select+0x16a0>

			int x_pos = j + x;
 80025f2:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 80025f6:	f102 0204 	add.w	r2, r2, #4
 80025fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80025fe:	3b1c      	subs	r3, #28
 8002600:	f507 5190 	add.w	r1, r7, #4608	; 0x1200
 8002604:	f101 0118 	add.w	r1, r1, #24
 8002608:	6809      	ldr	r1, [r1, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	440b      	add	r3, r1
 800260e:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8002610:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8002614:	f107 0208 	add.w	r2, r7, #8
 8002618:	f507 5190 	add.w	r1, r7, #4608	; 0x1200
 800261c:	f101 011c 	add.w	r1, r1, #28
 8002620:	6809      	ldr	r1, [r1, #0]
 8002622:	6812      	ldr	r2, [r2, #0]
 8002624:	440a      	add	r2, r1
 8002626:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_V[i][j]);
 8002628:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800262c:	f103 0304 	add.w	r3, r3, #4
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	b298      	uxth	r0, r3
 8002634:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	b29c      	uxth	r4, r3
 800263c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8002640:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8002644:	f102 021c 	add.w	r2, r2, #28
 8002648:	6812      	ldr	r2, [r2, #0]
 800264a:	0091      	lsls	r1, r2, #2
 800264c:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8002650:	f102 0218 	add.w	r2, r2, #24
 8002654:	6812      	ldr	r2, [r2, #0]
 8002656:	440a      	add	r2, r1
 8002658:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	461a      	mov	r2, r3
 8002660:	4621      	mov	r1, r4
 8002662:	f001 fbbb 	bl	8003ddc <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8002666:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 800266a:	f103 0318 	add.w	r3, r3, #24
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	3301      	adds	r3, #1
 8002672:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8002676:	f102 0218 	add.w	r2, r2, #24
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8002680:	f103 0318 	add.w	r3, r3, #24
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b03      	cmp	r3, #3
 8002688:	ddb3      	ble.n	80025f2 <letter_select+0x1616>
	for (int i=0; i<10; i++) {
 800268a:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 800268e:	f103 031c 	add.w	r3, r3, #28
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	3301      	adds	r3, #1
 8002696:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 800269a:	f102 021c 	add.w	r2, r2, #28
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80026a4:	f103 031c 	add.w	r3, r3, #28
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2b09      	cmp	r3, #9
 80026ac:	dd9a      	ble.n	80025e4 <letter_select+0x1608>
		}
	}
	break;
 80026ae:	e22e      	b.n	8002b0e <letter_select+0x1b32>


	case 'W':
	for (int i=0; i<10; i++) {
 80026b0:	2300      	movs	r3, #0
 80026b2:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80026b6:	f102 0214 	add.w	r2, r2, #20
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	e062      	b.n	8002784 <letter_select+0x17a8>
		for (int j=0; j<4; j++) {
 80026be:	2300      	movs	r3, #0
 80026c0:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80026c4:	f102 0210 	add.w	r2, r2, #16
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	e049      	b.n	8002760 <letter_select+0x1784>

			int x_pos = j + x;
 80026cc:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 80026d0:	f102 021c 	add.w	r2, r2, #28
 80026d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026d8:	3b1c      	subs	r3, #28
 80026da:	f507 5190 	add.w	r1, r7, #4608	; 0x1200
 80026de:	f101 0110 	add.w	r1, r1, #16
 80026e2:	6809      	ldr	r1, [r1, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	440b      	add	r3, r1
 80026e8:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80026ea:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80026ee:	f103 0318 	add.w	r3, r3, #24
 80026f2:	f107 0208 	add.w	r2, r7, #8
 80026f6:	f507 5190 	add.w	r1, r7, #4608	; 0x1200
 80026fa:	f101 0114 	add.w	r1, r1, #20
 80026fe:	6809      	ldr	r1, [r1, #0]
 8002700:	6812      	ldr	r2, [r2, #0]
 8002702:	440a      	add	r2, r1
 8002704:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_W[i][j]);
 8002706:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 800270a:	f103 031c 	add.w	r3, r3, #28
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	b298      	uxth	r0, r3
 8002712:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8002716:	f103 0318 	add.w	r3, r3, #24
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	b29c      	uxth	r4, r3
 800271e:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002722:	3b10      	subs	r3, #16
 8002724:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8002728:	f102 0214 	add.w	r2, r2, #20
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	0091      	lsls	r1, r2, #2
 8002730:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8002734:	f102 0210 	add.w	r2, r2, #16
 8002738:	6812      	ldr	r2, [r2, #0]
 800273a:	440a      	add	r2, r1
 800273c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	461a      	mov	r2, r3
 8002744:	4621      	mov	r1, r4
 8002746:	f001 fb49 	bl	8003ddc <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 800274a:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 800274e:	f103 0310 	add.w	r3, r3, #16
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3301      	adds	r3, #1
 8002756:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 800275a:	f102 0210 	add.w	r2, r2, #16
 800275e:	6013      	str	r3, [r2, #0]
 8002760:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8002764:	f103 0310 	add.w	r3, r3, #16
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b03      	cmp	r3, #3
 800276c:	ddae      	ble.n	80026cc <letter_select+0x16f0>
	for (int i=0; i<10; i++) {
 800276e:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8002772:	f103 0314 	add.w	r3, r3, #20
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	3301      	adds	r3, #1
 800277a:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 800277e:	f102 0214 	add.w	r2, r2, #20
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8002788:	f103 0314 	add.w	r3, r3, #20
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b09      	cmp	r3, #9
 8002790:	dd95      	ble.n	80026be <letter_select+0x16e2>
		}
	}
	break;
 8002792:	e1bc      	b.n	8002b0e <letter_select+0x1b32>


	case 'X':
	for (int i=0; i<10; i++) {
 8002794:	2300      	movs	r3, #0
 8002796:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 800279a:	f102 020c 	add.w	r2, r2, #12
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	e062      	b.n	8002868 <letter_select+0x188c>
		for (int j=0; j<4; j++) {
 80027a2:	2300      	movs	r3, #0
 80027a4:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80027a8:	f102 0208 	add.w	r2, r2, #8
 80027ac:	6013      	str	r3, [r2, #0]
 80027ae:	e049      	b.n	8002844 <letter_select+0x1868>

			int x_pos = j + x;
 80027b0:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 80027b4:	f102 0214 	add.w	r2, r2, #20
 80027b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027bc:	3b1c      	subs	r3, #28
 80027be:	f507 5190 	add.w	r1, r7, #4608	; 0x1200
 80027c2:	f101 0108 	add.w	r1, r1, #8
 80027c6:	6809      	ldr	r1, [r1, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	440b      	add	r3, r1
 80027cc:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80027ce:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80027d2:	f103 0310 	add.w	r3, r3, #16
 80027d6:	f107 0208 	add.w	r2, r7, #8
 80027da:	f507 5190 	add.w	r1, r7, #4608	; 0x1200
 80027de:	f101 010c 	add.w	r1, r1, #12
 80027e2:	6809      	ldr	r1, [r1, #0]
 80027e4:	6812      	ldr	r2, [r2, #0]
 80027e6:	440a      	add	r2, r1
 80027e8:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_X[i][j]);
 80027ea:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80027ee:	f103 0314 	add.w	r3, r3, #20
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	b298      	uxth	r0, r3
 80027f6:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80027fa:	f103 0310 	add.w	r3, r3, #16
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	b29c      	uxth	r4, r3
 8002802:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002806:	3b10      	subs	r3, #16
 8002808:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 800280c:	f102 020c 	add.w	r2, r2, #12
 8002810:	6812      	ldr	r2, [r2, #0]
 8002812:	0091      	lsls	r1, r2, #2
 8002814:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8002818:	f102 0208 	add.w	r2, r2, #8
 800281c:	6812      	ldr	r2, [r2, #0]
 800281e:	440a      	add	r2, r1
 8002820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	4621      	mov	r1, r4
 800282a:	f001 fad7 	bl	8003ddc <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 800282e:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8002832:	f103 0308 	add.w	r3, r3, #8
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	3301      	adds	r3, #1
 800283a:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 800283e:	f102 0208 	add.w	r2, r2, #8
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8002848:	f103 0308 	add.w	r3, r3, #8
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b03      	cmp	r3, #3
 8002850:	ddae      	ble.n	80027b0 <letter_select+0x17d4>
	for (int i=0; i<10; i++) {
 8002852:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8002856:	f103 030c 	add.w	r3, r3, #12
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	3301      	adds	r3, #1
 800285e:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8002862:	f102 020c 	add.w	r2, r2, #12
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 800286c:	f103 030c 	add.w	r3, r3, #12
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2b09      	cmp	r3, #9
 8002874:	dd95      	ble.n	80027a2 <letter_select+0x17c6>
		}
	}
	break;
 8002876:	e14a      	b.n	8002b0e <letter_select+0x1b32>


	case 'Y':
	for (int i=0; i<10; i++) {
 8002878:	2300      	movs	r3, #0
 800287a:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 800287e:	f102 0204 	add.w	r2, r2, #4
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	e058      	b.n	8002938 <letter_select+0x195c>
		for (int j=0; j<5; j++) {
 8002886:	2300      	movs	r3, #0
 8002888:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	e043      	b.n	8002918 <letter_select+0x193c>

			int x_pos = j + x;
 8002890:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8002894:	f102 020c 	add.w	r2, r2, #12
 8002898:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800289c:	3b1c      	subs	r3, #28
 800289e:	f507 5190 	add.w	r1, r7, #4608	; 0x1200
 80028a2:	6809      	ldr	r1, [r1, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	440b      	add	r3, r1
 80028a8:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80028aa:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80028ae:	f103 0308 	add.w	r3, r3, #8
 80028b2:	f107 0208 	add.w	r2, r7, #8
 80028b6:	f507 5190 	add.w	r1, r7, #4608	; 0x1200
 80028ba:	f101 0104 	add.w	r1, r1, #4
 80028be:	6809      	ldr	r1, [r1, #0]
 80028c0:	6812      	ldr	r2, [r2, #0]
 80028c2:	440a      	add	r2, r1
 80028c4:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_Y[i][j]);
 80028c6:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80028ca:	f103 030c 	add.w	r3, r3, #12
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	b298      	uxth	r0, r3
 80028d2:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80028d6:	f103 0308 	add.w	r3, r3, #8
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	b29c      	uxth	r4, r3
 80028de:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80028e2:	3a18      	subs	r2, #24
 80028e4:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80028e8:	f103 0304 	add.w	r3, r3, #4
 80028ec:	6819      	ldr	r1, [r3, #0]
 80028ee:	460b      	mov	r3, r1
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	440b      	add	r3, r1
 80028f4:	f507 5190 	add.w	r1, r7, #4608	; 0x1200
 80028f8:	6809      	ldr	r1, [r1, #0]
 80028fa:	440b      	add	r3, r1
 80028fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	4621      	mov	r1, r4
 8002906:	f001 fa69 	bl	8003ddc <UB_VGA_SetPixel>
		for (int j=0; j<5; j++) {
 800290a:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	3301      	adds	r3, #1
 8002912:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8002916:	6013      	str	r3, [r2, #0]
 8002918:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b04      	cmp	r3, #4
 8002920:	ddb6      	ble.n	8002890 <letter_select+0x18b4>
	for (int i=0; i<10; i++) {
 8002922:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8002926:	f103 0304 	add.w	r3, r3, #4
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	3301      	adds	r3, #1
 800292e:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8002932:	f102 0204 	add.w	r2, r2, #4
 8002936:	6013      	str	r3, [r2, #0]
 8002938:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 800293c:	f103 0304 	add.w	r3, r3, #4
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2b09      	cmp	r3, #9
 8002944:	dd9f      	ble.n	8002886 <letter_select+0x18aa>
		}
	}
	break;
 8002946:	e0e2      	b.n	8002b0e <letter_select+0x1b32>


	case 'Z':
	for (int i=0; i<10; i++) {
 8002948:	2300      	movs	r3, #0
 800294a:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 800294e:	f102 021c 	add.w	r2, r2, #28
 8002952:	6013      	str	r3, [r2, #0]
 8002954:	e05e      	b.n	8002a14 <letter_select+0x1a38>
		for (int j=0; j<4; j++) {
 8002956:	2300      	movs	r3, #0
 8002958:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 800295c:	f102 0218 	add.w	r2, r2, #24
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	e045      	b.n	80029f0 <letter_select+0x1a14>

			int x_pos = j + x;
 8002964:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8002968:	f102 0204 	add.w	r2, r2, #4
 800296c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002970:	3b1c      	subs	r3, #28
 8002972:	f507 518f 	add.w	r1, r7, #4576	; 0x11e0
 8002976:	f101 0118 	add.w	r1, r1, #24
 800297a:	6809      	ldr	r1, [r1, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	440b      	add	r3, r1
 8002980:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8002982:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8002986:	f107 0208 	add.w	r2, r7, #8
 800298a:	f507 518f 	add.w	r1, r7, #4576	; 0x11e0
 800298e:	f101 011c 	add.w	r1, r1, #28
 8002992:	6809      	ldr	r1, [r1, #0]
 8002994:	6812      	ldr	r2, [r2, #0]
 8002996:	440a      	add	r2, r1
 8002998:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_Z[i][j]);
 800299a:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 800299e:	f103 0304 	add.w	r3, r3, #4
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	b298      	uxth	r0, r3
 80029a6:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	b29c      	uxth	r4, r3
 80029ae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80029b2:	3b18      	subs	r3, #24
 80029b4:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80029b8:	f102 021c 	add.w	r2, r2, #28
 80029bc:	6812      	ldr	r2, [r2, #0]
 80029be:	0091      	lsls	r1, r2, #2
 80029c0:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80029c4:	f102 0218 	add.w	r2, r2, #24
 80029c8:	6812      	ldr	r2, [r2, #0]
 80029ca:	440a      	add	r2, r1
 80029cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	461a      	mov	r2, r3
 80029d4:	4621      	mov	r1, r4
 80029d6:	f001 fa01 	bl	8003ddc <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 80029da:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 80029de:	f103 0318 	add.w	r3, r3, #24
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	3301      	adds	r3, #1
 80029e6:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80029ea:	f102 0218 	add.w	r2, r2, #24
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 80029f4:	f103 0318 	add.w	r3, r3, #24
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	ddb2      	ble.n	8002964 <letter_select+0x1988>
	for (int i=0; i<10; i++) {
 80029fe:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8002a02:	f103 031c 	add.w	r3, r3, #28
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8002a0e:	f102 021c 	add.w	r2, r2, #28
 8002a12:	6013      	str	r3, [r2, #0]
 8002a14:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8002a18:	f103 031c 	add.w	r3, r3, #28
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b09      	cmp	r3, #9
 8002a20:	dd99      	ble.n	8002956 <letter_select+0x197a>
		}
	}
	break;
 8002a22:	e074      	b.n	8002b0e <letter_select+0x1b32>


	case ' ':
	for (int i=0; i<10; i++) {
 8002a24:	2300      	movs	r3, #0
 8002a26:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8002a2a:	f102 0214 	add.w	r2, r2, #20
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	e062      	b.n	8002af8 <letter_select+0x1b1c>
		for (int j=0; j<4; j++) {
 8002a32:	2300      	movs	r3, #0
 8002a34:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8002a38:	f102 0210 	add.w	r2, r2, #16
 8002a3c:	6013      	str	r3, [r2, #0]
 8002a3e:	e049      	b.n	8002ad4 <letter_select+0x1af8>

			int x_pos = j + x;
 8002a40:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8002a44:	f102 021c 	add.w	r2, r2, #28
 8002a48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a4c:	3b1c      	subs	r3, #28
 8002a4e:	f507 518f 	add.w	r1, r7, #4576	; 0x11e0
 8002a52:	f101 0110 	add.w	r1, r1, #16
 8002a56:	6809      	ldr	r1, [r1, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	440b      	add	r3, r1
 8002a5c:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8002a5e:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8002a62:	f103 0318 	add.w	r3, r3, #24
 8002a66:	f107 0208 	add.w	r2, r7, #8
 8002a6a:	f507 518f 	add.w	r1, r7, #4576	; 0x11e0
 8002a6e:	f101 0114 	add.w	r1, r1, #20
 8002a72:	6809      	ldr	r1, [r1, #0]
 8002a74:	6812      	ldr	r2, [r2, #0]
 8002a76:	440a      	add	r2, r1
 8002a78:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, spatie[i][j]);
 8002a7a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8002a7e:	f103 031c 	add.w	r3, r3, #28
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	b298      	uxth	r0, r3
 8002a86:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8002a8a:	f103 0318 	add.w	r3, r3, #24
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	b29c      	uxth	r4, r3
 8002a92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a96:	3b18      	subs	r3, #24
 8002a98:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8002a9c:	f102 0214 	add.w	r2, r2, #20
 8002aa0:	6812      	ldr	r2, [r2, #0]
 8002aa2:	0091      	lsls	r1, r2, #2
 8002aa4:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8002aa8:	f102 0210 	add.w	r2, r2, #16
 8002aac:	6812      	ldr	r2, [r2, #0]
 8002aae:	440a      	add	r2, r1
 8002ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4621      	mov	r1, r4
 8002aba:	f001 f98f 	bl	8003ddc <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8002abe:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8002ac2:	f103 0310 	add.w	r3, r3, #16
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	3301      	adds	r3, #1
 8002aca:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8002ace:	f102 0210 	add.w	r2, r2, #16
 8002ad2:	6013      	str	r3, [r2, #0]
 8002ad4:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8002ad8:	f103 0310 	add.w	r3, r3, #16
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	ddae      	ble.n	8002a40 <letter_select+0x1a64>
	for (int i=0; i<10; i++) {
 8002ae2:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8002ae6:	f103 0314 	add.w	r3, r3, #20
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	3301      	adds	r3, #1
 8002aee:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8002af2:	f102 0214 	add.w	r2, r2, #20
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8002afc:	f103 0314 	add.w	r3, r3, #20
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2b09      	cmp	r3, #9
 8002b04:	dd95      	ble.n	8002a32 <letter_select+0x1a56>
		}
	}
	break;
 8002b06:	e002      	b.n	8002b0e <letter_select+0x1b32>


	default:
		UB_VGA_FillScreen(rood);
 8002b08:	20e0      	movs	r0, #224	; 0xe0
 8002b0a:	f001 f945 	bl	8003d98 <UB_VGA_FillScreen>
	}




}
 8002b0e:	bf00      	nop
 8002b10:	f507 5796 	add.w	r7, r7, #4800	; 0x12c0
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd90      	pop	{r4, r7, pc}
 8002b1a:	bf00      	nop

08002b1c <draw_triangle>:
#include "stm32_ub_vga_screen.h"
#include <stdlib.h>
#include "includes.h"

void draw_triangle(int x1,int y1,int x2,int y2,int xtop,int ytop, int color)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
 8002b28:	603b      	str	r3, [r7, #0]
//	dx=x2-x1;      /* the horizontal distance of the line */
//	dy=y2-y1;      /* the vertical distance of the line */
//	dxabs=abs(dx);
//	dyabs=abs(dy);

	draw_line(x1,y1,x2,y2,1,color);
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	9301      	str	r3, [sp, #4]
 8002b2e:	2301      	movs	r3, #1
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	68b9      	ldr	r1, [r7, #8]
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f7fe f82a 	bl	8000b92 <draw_line>
	draw_line(x1,y1,xtop,ytop,1,color);
 8002b3e:	6a3b      	ldr	r3, [r7, #32]
 8002b40:	9301      	str	r3, [sp, #4]
 8002b42:	2301      	movs	r3, #1
 8002b44:	9300      	str	r3, [sp, #0]
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	68b9      	ldr	r1, [r7, #8]
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f7fe f820 	bl	8000b92 <draw_line>
	draw_line(xtop,ytop,x2,y2,1,color);
 8002b52:	6a3b      	ldr	r3, [r7, #32]
 8002b54:	9301      	str	r3, [sp, #4]
 8002b56:	2301      	movs	r3, #1
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	69f9      	ldr	r1, [r7, #28]
 8002b60:	69b8      	ldr	r0, [r7, #24]
 8002b62:	f7fe f816 	bl	8000b92 <draw_line>



//	for(int i=x1;i<=x2;i++)
//		draw_line(i,y2,xtop,ytop,color,1);
}
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
	...

08002b70 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b085      	sub	sp, #20
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	73fb      	strb	r3, [r7, #15]
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	73bb      	strb	r3, [r7, #14]
 8002b80:	230f      	movs	r3, #15
 8002b82:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	78db      	ldrb	r3, [r3, #3]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d039      	beq.n	8002c00 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8002b8c:	4b27      	ldr	r3, [pc, #156]	; (8002c2c <NVIC_Init+0xbc>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	0a1b      	lsrs	r3, r3, #8
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	f1c3 0304 	rsb	r3, r3, #4
 8002ba2:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8002ba4:	7b7a      	ldrb	r2, [r7, #13]
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
 8002ba8:	fa42 f303 	asr.w	r3, r2, r3
 8002bac:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	785b      	ldrb	r3, [r3, #1]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	7bbb      	ldrb	r3, [r7, #14]
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	789a      	ldrb	r2, [r3, #2]
 8002bc0:	7b7b      	ldrb	r3, [r7, #13]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
 8002bce:	011b      	lsls	r3, r3, #4
 8002bd0:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8002bd2:	4a17      	ldr	r2, [pc, #92]	; (8002c30 <NVIC_Init+0xc0>)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	4413      	add	r3, r2
 8002bda:	7bfa      	ldrb	r2, [r7, #15]
 8002bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002be0:	4a13      	ldr	r2, [pc, #76]	; (8002c30 <NVIC_Init+0xc0>)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	095b      	lsrs	r3, r3, #5
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	f003 031f 	and.w	r3, r3, #31
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002bfa:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8002bfe:	e00f      	b.n	8002c20 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002c00:	490b      	ldr	r1, [pc, #44]	; (8002c30 <NVIC_Init+0xc0>)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	f003 031f 	and.w	r3, r3, #31
 8002c14:	2201      	movs	r2, #1
 8002c16:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002c18:	f100 0320 	add.w	r3, r0, #32
 8002c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c20:	bf00      	nop
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	e000ed00 	.word	0xe000ed00
 8002c30:	e000e100 	.word	0xe000e100

08002c34 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f023 0201 	bic.w	r2, r3, #1
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2221      	movs	r2, #33	; 0x21
 8002c6a:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a46      	ldr	r2, [pc, #280]	; (8002d88 <DMA_DeInit+0x154>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d103      	bne.n	8002c7c <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8002c74:	4b45      	ldr	r3, [pc, #276]	; (8002d8c <DMA_DeInit+0x158>)
 8002c76:	223d      	movs	r2, #61	; 0x3d
 8002c78:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8002c7a:	e07e      	b.n	8002d7a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	4a44      	ldr	r2, [pc, #272]	; (8002d90 <DMA_DeInit+0x15c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d104      	bne.n	8002c8e <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8002c84:	4b41      	ldr	r3, [pc, #260]	; (8002d8c <DMA_DeInit+0x158>)
 8002c86:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8002c8a:	609a      	str	r2, [r3, #8]
}
 8002c8c:	e075      	b.n	8002d7a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a40      	ldr	r2, [pc, #256]	; (8002d94 <DMA_DeInit+0x160>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d104      	bne.n	8002ca0 <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8002c96:	4b3d      	ldr	r3, [pc, #244]	; (8002d8c <DMA_DeInit+0x158>)
 8002c98:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8002c9c:	609a      	str	r2, [r3, #8]
}
 8002c9e:	e06c      	b.n	8002d7a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a3d      	ldr	r2, [pc, #244]	; (8002d98 <DMA_DeInit+0x164>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d104      	bne.n	8002cb2 <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8002ca8:	4b38      	ldr	r3, [pc, #224]	; (8002d8c <DMA_DeInit+0x158>)
 8002caa:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8002cae:	609a      	str	r2, [r3, #8]
}
 8002cb0:	e063      	b.n	8002d7a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a39      	ldr	r2, [pc, #228]	; (8002d9c <DMA_DeInit+0x168>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d103      	bne.n	8002cc2 <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8002cba:	4b34      	ldr	r3, [pc, #208]	; (8002d8c <DMA_DeInit+0x158>)
 8002cbc:	4a38      	ldr	r2, [pc, #224]	; (8002da0 <DMA_DeInit+0x16c>)
 8002cbe:	60da      	str	r2, [r3, #12]
}
 8002cc0:	e05b      	b.n	8002d7a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a37      	ldr	r2, [pc, #220]	; (8002da4 <DMA_DeInit+0x170>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d103      	bne.n	8002cd2 <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8002cca:	4b30      	ldr	r3, [pc, #192]	; (8002d8c <DMA_DeInit+0x158>)
 8002ccc:	4a36      	ldr	r2, [pc, #216]	; (8002da8 <DMA_DeInit+0x174>)
 8002cce:	60da      	str	r2, [r3, #12]
}
 8002cd0:	e053      	b.n	8002d7a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a35      	ldr	r2, [pc, #212]	; (8002dac <DMA_DeInit+0x178>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d103      	bne.n	8002ce2 <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8002cda:	4b2c      	ldr	r3, [pc, #176]	; (8002d8c <DMA_DeInit+0x158>)
 8002cdc:	4a34      	ldr	r2, [pc, #208]	; (8002db0 <DMA_DeInit+0x17c>)
 8002cde:	60da      	str	r2, [r3, #12]
}
 8002ce0:	e04b      	b.n	8002d7a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a33      	ldr	r2, [pc, #204]	; (8002db4 <DMA_DeInit+0x180>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d104      	bne.n	8002cf4 <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8002cea:	4b28      	ldr	r3, [pc, #160]	; (8002d8c <DMA_DeInit+0x158>)
 8002cec:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8002cf0:	60da      	str	r2, [r3, #12]
}
 8002cf2:	e042      	b.n	8002d7a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	4a30      	ldr	r2, [pc, #192]	; (8002db8 <DMA_DeInit+0x184>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d103      	bne.n	8002d04 <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8002cfc:	4b2f      	ldr	r3, [pc, #188]	; (8002dbc <DMA_DeInit+0x188>)
 8002cfe:	223d      	movs	r2, #61	; 0x3d
 8002d00:	609a      	str	r2, [r3, #8]
}
 8002d02:	e03a      	b.n	8002d7a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a2e      	ldr	r2, [pc, #184]	; (8002dc0 <DMA_DeInit+0x18c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d104      	bne.n	8002d16 <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8002d0c:	4b2b      	ldr	r3, [pc, #172]	; (8002dbc <DMA_DeInit+0x188>)
 8002d0e:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8002d12:	609a      	str	r2, [r3, #8]
}
 8002d14:	e031      	b.n	8002d7a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a2a      	ldr	r2, [pc, #168]	; (8002dc4 <DMA_DeInit+0x190>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d104      	bne.n	8002d28 <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8002d1e:	4b27      	ldr	r3, [pc, #156]	; (8002dbc <DMA_DeInit+0x188>)
 8002d20:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8002d24:	609a      	str	r2, [r3, #8]
}
 8002d26:	e028      	b.n	8002d7a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a27      	ldr	r2, [pc, #156]	; (8002dc8 <DMA_DeInit+0x194>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d104      	bne.n	8002d3a <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8002d30:	4b22      	ldr	r3, [pc, #136]	; (8002dbc <DMA_DeInit+0x188>)
 8002d32:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8002d36:	609a      	str	r2, [r3, #8]
}
 8002d38:	e01f      	b.n	8002d7a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a23      	ldr	r2, [pc, #140]	; (8002dcc <DMA_DeInit+0x198>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d103      	bne.n	8002d4a <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8002d42:	4b1e      	ldr	r3, [pc, #120]	; (8002dbc <DMA_DeInit+0x188>)
 8002d44:	4a16      	ldr	r2, [pc, #88]	; (8002da0 <DMA_DeInit+0x16c>)
 8002d46:	60da      	str	r2, [r3, #12]
}
 8002d48:	e017      	b.n	8002d7a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a20      	ldr	r2, [pc, #128]	; (8002dd0 <DMA_DeInit+0x19c>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d103      	bne.n	8002d5a <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8002d52:	4b1a      	ldr	r3, [pc, #104]	; (8002dbc <DMA_DeInit+0x188>)
 8002d54:	4a14      	ldr	r2, [pc, #80]	; (8002da8 <DMA_DeInit+0x174>)
 8002d56:	60da      	str	r2, [r3, #12]
}
 8002d58:	e00f      	b.n	8002d7a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	4a1d      	ldr	r2, [pc, #116]	; (8002dd4 <DMA_DeInit+0x1a0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d103      	bne.n	8002d6a <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8002d62:	4b16      	ldr	r3, [pc, #88]	; (8002dbc <DMA_DeInit+0x188>)
 8002d64:	4a12      	ldr	r2, [pc, #72]	; (8002db0 <DMA_DeInit+0x17c>)
 8002d66:	60da      	str	r2, [r3, #12]
}
 8002d68:	e007      	b.n	8002d7a <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a1a      	ldr	r2, [pc, #104]	; (8002dd8 <DMA_DeInit+0x1a4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d103      	bne.n	8002d7a <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8002d72:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <DMA_DeInit+0x188>)
 8002d74:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8002d78:	60da      	str	r2, [r3, #12]
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	40026010 	.word	0x40026010
 8002d8c:	40026000 	.word	0x40026000
 8002d90:	40026028 	.word	0x40026028
 8002d94:	40026040 	.word	0x40026040
 8002d98:	40026058 	.word	0x40026058
 8002d9c:	40026070 	.word	0x40026070
 8002da0:	2000003d 	.word	0x2000003d
 8002da4:	40026088 	.word	0x40026088
 8002da8:	20000f40 	.word	0x20000f40
 8002dac:	400260a0 	.word	0x400260a0
 8002db0:	203d0000 	.word	0x203d0000
 8002db4:	400260b8 	.word	0x400260b8
 8002db8:	40026410 	.word	0x40026410
 8002dbc:	40026400 	.word	0x40026400
 8002dc0:	40026428 	.word	0x40026428
 8002dc4:	40026440 	.word	0x40026440
 8002dc8:	40026458 	.word	0x40026458
 8002dcc:	40026470 	.word	0x40026470
 8002dd0:	40026488 	.word	0x40026488
 8002dd4:	400264a0 	.word	0x400264a0
 8002dd8:	400264b8 	.word	0x400264b8

08002ddc <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002df0:	68fa      	ldr	r2, [r7, #12]
 8002df2:	4b25      	ldr	r3, [pc, #148]	; (8002e88 <DMA_Init+0xac>)
 8002df4:	4013      	ands	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002e06:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	699b      	ldr	r3, [r3, #24]
 8002e0c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002e12:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002e1e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e24:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002e2a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e30:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f023 0307 	bic.w	r3, r3, #7
 8002e4a:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e54:	4313      	orrs	r3, r2
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68fa      	ldr	r2, [r7, #12]
 8002e60:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	691a      	ldr	r2, [r3, #16]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	689a      	ldr	r2, [r3, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	60da      	str	r2, [r3, #12]
}
 8002e7a:	bf00      	nop
 8002e7c:	3714      	adds	r7, #20
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	f01c803f 	.word	0xf01c803f

08002e8c <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d006      	beq.n	8002eac <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f043 0201 	orr.w	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8002eaa:	e005      	b.n	8002eb8 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f023 0201 	bic.w	r2, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	601a      	str	r2, [r3, #0]
}
 8002eb8:	bf00      	nop
 8002eba:	370c      	adds	r7, #12
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00f      	beq.n	8002efc <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d006      	beq.n	8002ef0 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	615a      	str	r2, [r3, #20]
 8002eee:	e005      	b.n	8002efc <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	2b80      	cmp	r3, #128	; 0x80
 8002f00:	d014      	beq.n	8002f2c <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d008      	beq.n	8002f1a <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	f003 031e 	and.w	r3, r3, #30
 8002f12:	431a      	orrs	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8002f18:	e008      	b.n	8002f2c <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	f003 031e 	and.w	r3, r3, #30
 8002f24:	43db      	mvns	r3, r3
 8002f26:	401a      	ands	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	601a      	str	r2, [r3, #0]
}
 8002f2c:	bf00      	nop
 8002f2e:	3714      	adds	r7, #20
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8002f42:	2300      	movs	r3, #0
 8002f44:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a22      	ldr	r2, [pc, #136]	; (8002fdc <DMA_GetITStatus+0xa4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d802      	bhi.n	8002f5c <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002f56:	4b22      	ldr	r3, [pc, #136]	; (8002fe0 <DMA_GetITStatus+0xa8>)
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	e001      	b.n	8002f60 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002f5c:	4b21      	ldr	r3, [pc, #132]	; (8002fe4 <DMA_GetITStatus+0xac>)
 8002f5e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002f66:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00a      	beq.n	8002f84 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	0adb      	lsrs	r3, r3, #11
 8002f72:	f003 031e 	and.w	r3, r3, #30
 8002f76:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	60bb      	str	r3, [r7, #8]
 8002f82:	e004      	b.n	8002f8e <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8c:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	60fb      	str	r3, [r7, #12]
 8002f9e:	e002      	b.n	8002fa6 <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002fac:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002fb0:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d005      	beq.n	8002fc8 <DMA_GetITStatus+0x90>
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	75fb      	strb	r3, [r7, #23]
 8002fc6:	e001      	b.n	8002fcc <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8002fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	371c      	adds	r7, #28
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	4002640f 	.word	0x4002640f
 8002fe0:	40026000 	.word	0x40026000
 8002fe4:	40026400 	.word	0x40026400

08002fe8 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a10      	ldr	r2, [pc, #64]	; (8003038 <DMA_ClearITPendingBit+0x50>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d802      	bhi.n	8003000 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002ffa:	4b10      	ldr	r3, [pc, #64]	; (800303c <DMA_ClearITPendingBit+0x54>)
 8002ffc:	60fb      	str	r3, [r7, #12]
 8002ffe:	e001      	b.n	8003004 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8003000:	4b0f      	ldr	r3, [pc, #60]	; (8003040 <DMA_ClearITPendingBit+0x58>)
 8003002:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d007      	beq.n	800301e <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8003014:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 800301c:	e006      	b.n	800302c <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8003024:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	6093      	str	r3, [r2, #8]
}
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	4002640f 	.word	0x4002640f
 800303c:	40026000 	.word	0x40026000
 8003040:	40026400 	.word	0x40026400

08003044 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
 800304c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800304e:	2300      	movs	r3, #0
 8003050:	617b      	str	r3, [r7, #20]
 8003052:	2300      	movs	r3, #0
 8003054:	613b      	str	r3, [r7, #16]
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800305a:	2300      	movs	r3, #0
 800305c:	617b      	str	r3, [r7, #20]
 800305e:	e076      	b.n	800314e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8003060:	2201      	movs	r2, #1
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	4013      	ands	r3, r2
 8003072:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8003074:	68fa      	ldr	r2, [r7, #12]
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	429a      	cmp	r2, r3
 800307a:	d165      	bne.n	8003148 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	2103      	movs	r1, #3
 8003086:	fa01 f303 	lsl.w	r3, r1, r3
 800308a:	43db      	mvns	r3, r3
 800308c:	401a      	ands	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	791b      	ldrb	r3, [r3, #4]
 800309a:	4619      	mov	r1, r3
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	fa01 f303 	lsl.w	r3, r1, r3
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	791b      	ldrb	r3, [r3, #4]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d003      	beq.n	80030ba <GPIO_Init+0x76>
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	791b      	ldrb	r3, [r3, #4]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d12e      	bne.n	8003118 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	2103      	movs	r1, #3
 80030c4:	fa01 f303 	lsl.w	r3, r1, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	401a      	ands	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	795b      	ldrb	r3, [r3, #5]
 80030d8:	4619      	mov	r1, r3
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	fa01 f303 	lsl.w	r3, r1, r3
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	4619      	mov	r1, r3
 80030f2:	2301      	movs	r3, #1
 80030f4:	408b      	lsls	r3, r1
 80030f6:	43db      	mvns	r3, r3
 80030f8:	401a      	ands	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	7992      	ldrb	r2, [r2, #6]
 8003106:	4611      	mov	r1, r2
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	b292      	uxth	r2, r2
 800310c:	fa01 f202 	lsl.w	r2, r1, r2
 8003110:	b292      	uxth	r2, r2
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68da      	ldr	r2, [r3, #12]
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	b29b      	uxth	r3, r3
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	2103      	movs	r1, #3
 8003124:	fa01 f303 	lsl.w	r3, r1, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	401a      	ands	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	79db      	ldrb	r3, [r3, #7]
 8003138:	4619      	mov	r1, r3
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	fa01 f303 	lsl.w	r3, r1, r3
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	3301      	adds	r3, #1
 800314c:	617b      	str	r3, [r7, #20]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2b0f      	cmp	r3, #15
 8003152:	d985      	bls.n	8003060 <GPIO_Init+0x1c>
    }
  }
}
 8003154:	bf00      	nop
 8003156:	371c      	adds	r7, #28
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	807b      	strh	r3, [r7, #2]
 800316c:	4613      	mov	r3, r2
 800316e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8003170:	2300      	movs	r3, #0
 8003172:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8003174:	2300      	movs	r3, #0
 8003176:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003178:	787a      	ldrb	r2, [r7, #1]
 800317a:	887b      	ldrh	r3, [r7, #2]
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8003188:	887b      	ldrh	r3, [r7, #2]
 800318a:	08db      	lsrs	r3, r3, #3
 800318c:	b29b      	uxth	r3, r3
 800318e:	4618      	mov	r0, r3
 8003190:	887b      	ldrh	r3, [r7, #2]
 8003192:	08db      	lsrs	r3, r3, #3
 8003194:	b29b      	uxth	r3, r3
 8003196:	461a      	mov	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3208      	adds	r2, #8
 800319c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80031a0:	887b      	ldrh	r3, [r7, #2]
 80031a2:	f003 0307 	and.w	r3, r3, #7
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	210f      	movs	r1, #15
 80031aa:	fa01 f303 	lsl.w	r3, r1, r3
 80031ae:	43db      	mvns	r3, r3
 80031b0:	ea02 0103 	and.w	r1, r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f100 0208 	add.w	r2, r0, #8
 80031ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80031be:	887b      	ldrh	r3, [r7, #2]
 80031c0:	08db      	lsrs	r3, r3, #3
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	461a      	mov	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3208      	adds	r2, #8
 80031ca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80031d4:	887b      	ldrh	r3, [r7, #2]
 80031d6:	08db      	lsrs	r3, r3, #3
 80031d8:	b29b      	uxth	r3, r3
 80031da:	461a      	mov	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	3208      	adds	r2, #8
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80031e6:	bf00      	nop
 80031e8:	3714      	adds	r7, #20
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
	...

080031f4 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b089      	sub	sp, #36	; 0x24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80031fc:	2300      	movs	r3, #0
 80031fe:	61bb      	str	r3, [r7, #24]
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	2300      	movs	r3, #0
 8003206:	61fb      	str	r3, [r7, #28]
 8003208:	2302      	movs	r3, #2
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	2300      	movs	r3, #0
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	2302      	movs	r3, #2
 8003212:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003214:	4b47      	ldr	r3, [pc, #284]	; (8003334 <RCC_GetClocksFreq+0x140>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 030c 	and.w	r3, r3, #12
 800321c:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	2b04      	cmp	r3, #4
 8003222:	d007      	beq.n	8003234 <RCC_GetClocksFreq+0x40>
 8003224:	2b08      	cmp	r3, #8
 8003226:	d009      	beq.n	800323c <RCC_GetClocksFreq+0x48>
 8003228:	2b00      	cmp	r3, #0
 800322a:	d13d      	bne.n	80032a8 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a42      	ldr	r2, [pc, #264]	; (8003338 <RCC_GetClocksFreq+0x144>)
 8003230:	601a      	str	r2, [r3, #0]
      break;
 8003232:	e03d      	b.n	80032b0 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a41      	ldr	r2, [pc, #260]	; (800333c <RCC_GetClocksFreq+0x148>)
 8003238:	601a      	str	r2, [r3, #0]
      break;
 800323a:	e039      	b.n	80032b0 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800323c:	4b3d      	ldr	r3, [pc, #244]	; (8003334 <RCC_GetClocksFreq+0x140>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	0d9b      	lsrs	r3, r3, #22
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003248:	4b3a      	ldr	r3, [pc, #232]	; (8003334 <RCC_GetClocksFreq+0x140>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003250:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d00c      	beq.n	8003272 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003258:	4a38      	ldr	r2, [pc, #224]	; (800333c <RCC_GetClocksFreq+0x148>)
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	4a34      	ldr	r2, [pc, #208]	; (8003334 <RCC_GetClocksFreq+0x140>)
 8003262:	6852      	ldr	r2, [r2, #4]
 8003264:	0992      	lsrs	r2, r2, #6
 8003266:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800326a:	fb02 f303 	mul.w	r3, r2, r3
 800326e:	61fb      	str	r3, [r7, #28]
 8003270:	e00b      	b.n	800328a <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8003272:	4a31      	ldr	r2, [pc, #196]	; (8003338 <RCC_GetClocksFreq+0x144>)
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	fbb2 f3f3 	udiv	r3, r2, r3
 800327a:	4a2e      	ldr	r2, [pc, #184]	; (8003334 <RCC_GetClocksFreq+0x140>)
 800327c:	6852      	ldr	r2, [r2, #4]
 800327e:	0992      	lsrs	r2, r2, #6
 8003280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003284:	fb02 f303 	mul.w	r3, r2, r3
 8003288:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800328a:	4b2a      	ldr	r3, [pc, #168]	; (8003334 <RCC_GetClocksFreq+0x140>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	0c1b      	lsrs	r3, r3, #16
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	3301      	adds	r3, #1
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800329a:	69fa      	ldr	r2, [r7, #28]
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	fbb2 f2f3 	udiv	r2, r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	601a      	str	r2, [r3, #0]
      break;
 80032a6:	e003      	b.n	80032b0 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a23      	ldr	r2, [pc, #140]	; (8003338 <RCC_GetClocksFreq+0x144>)
 80032ac:	601a      	str	r2, [r3, #0]
      break;
 80032ae:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80032b0:	4b20      	ldr	r3, [pc, #128]	; (8003334 <RCC_GetClocksFreq+0x140>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032b8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80032c0:	4a1f      	ldr	r2, [pc, #124]	; (8003340 <RCC_GetClocksFreq+0x14c>)
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	4413      	add	r3, r2
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	40da      	lsrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 80032d8:	4b16      	ldr	r3, [pc, #88]	; (8003334 <RCC_GetClocksFreq+0x140>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80032e0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	0a9b      	lsrs	r3, r3, #10
 80032e6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80032e8:	4a15      	ldr	r2, [pc, #84]	; (8003340 <RCC_GetClocksFreq+0x14c>)
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	4413      	add	r3, r2
 80032ee:	781b      	ldrb	r3, [r3, #0]
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	40da      	lsrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8003300:	4b0c      	ldr	r3, [pc, #48]	; (8003334 <RCC_GetClocksFreq+0x140>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003308:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	0b5b      	lsrs	r3, r3, #13
 800330e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8003310:	4a0b      	ldr	r2, [pc, #44]	; (8003340 <RCC_GetClocksFreq+0x14c>)
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	4413      	add	r3, r2
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685a      	ldr	r2, [r3, #4]
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	40da      	lsrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	60da      	str	r2, [r3, #12]
}
 8003328:	bf00      	nop
 800332a:	3724      	adds	r7, #36	; 0x24
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	40023800 	.word	0x40023800
 8003338:	00f42400 	.word	0x00f42400
 800333c:	007a1200 	.word	0x007a1200
 8003340:	20000000 	.word	0x20000000

08003344 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	460b      	mov	r3, r1
 800334e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d006      	beq.n	8003364 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8003356:	490a      	ldr	r1, [pc, #40]	; (8003380 <RCC_AHB1PeriphClockCmd+0x3c>)
 8003358:	4b09      	ldr	r3, [pc, #36]	; (8003380 <RCC_AHB1PeriphClockCmd+0x3c>)
 800335a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4313      	orrs	r3, r2
 8003360:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8003362:	e006      	b.n	8003372 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8003364:	4906      	ldr	r1, [pc, #24]	; (8003380 <RCC_AHB1PeriphClockCmd+0x3c>)
 8003366:	4b06      	ldr	r3, [pc, #24]	; (8003380 <RCC_AHB1PeriphClockCmd+0x3c>)
 8003368:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	43db      	mvns	r3, r3
 800336e:	4013      	ands	r3, r2
 8003370:	630b      	str	r3, [r1, #48]	; 0x30
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	40023800 	.word	0x40023800

08003384 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003390:	78fb      	ldrb	r3, [r7, #3]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d006      	beq.n	80033a4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8003396:	490a      	ldr	r1, [pc, #40]	; (80033c0 <RCC_APB1PeriphClockCmd+0x3c>)
 8003398:	4b09      	ldr	r3, [pc, #36]	; (80033c0 <RCC_APB1PeriphClockCmd+0x3c>)
 800339a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4313      	orrs	r3, r2
 80033a0:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80033a2:	e006      	b.n	80033b2 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80033a4:	4906      	ldr	r1, [pc, #24]	; (80033c0 <RCC_APB1PeriphClockCmd+0x3c>)
 80033a6:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <RCC_APB1PeriphClockCmd+0x3c>)
 80033a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	43db      	mvns	r3, r3
 80033ae:	4013      	ands	r3, r2
 80033b0:	640b      	str	r3, [r1, #64]	; 0x40
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40023800 	.word	0x40023800

080033c4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	460b      	mov	r3, r1
 80033ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80033d0:	78fb      	ldrb	r3, [r7, #3]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d006      	beq.n	80033e4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80033d6:	490a      	ldr	r1, [pc, #40]	; (8003400 <RCC_APB2PeriphClockCmd+0x3c>)
 80033d8:	4b09      	ldr	r3, [pc, #36]	; (8003400 <RCC_APB2PeriphClockCmd+0x3c>)
 80033da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4313      	orrs	r3, r2
 80033e0:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80033e2:	e006      	b.n	80033f2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80033e4:	4906      	ldr	r1, [pc, #24]	; (8003400 <RCC_APB2PeriphClockCmd+0x3c>)
 80033e6:	4b06      	ldr	r3, [pc, #24]	; (8003400 <RCC_APB2PeriphClockCmd+0x3c>)
 80033e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	43db      	mvns	r3, r3
 80033ee:	4013      	ands	r3, r2
 80033f0:	644b      	str	r3, [r1, #68]	; 0x44
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40023800 	.word	0x40023800

08003404 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 800340e:	2300      	movs	r3, #0
 8003410:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	881b      	ldrh	r3, [r3, #0]
 8003416:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a29      	ldr	r2, [pc, #164]	; (80034c0 <TIM_TimeBaseInit+0xbc>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d013      	beq.n	8003448 <TIM_TimeBaseInit+0x44>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a28      	ldr	r2, [pc, #160]	; (80034c4 <TIM_TimeBaseInit+0xc0>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d00f      	beq.n	8003448 <TIM_TimeBaseInit+0x44>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800342e:	d00b      	beq.n	8003448 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	4a25      	ldr	r2, [pc, #148]	; (80034c8 <TIM_TimeBaseInit+0xc4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d007      	beq.n	8003448 <TIM_TimeBaseInit+0x44>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a24      	ldr	r2, [pc, #144]	; (80034cc <TIM_TimeBaseInit+0xc8>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d003      	beq.n	8003448 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a23      	ldr	r2, [pc, #140]	; (80034d0 <TIM_TimeBaseInit+0xcc>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d108      	bne.n	800345a <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8003448:	89fb      	ldrh	r3, [r7, #14]
 800344a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800344e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	885a      	ldrh	r2, [r3, #2]
 8003454:	89fb      	ldrh	r3, [r7, #14]
 8003456:	4313      	orrs	r3, r2
 8003458:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a1d      	ldr	r2, [pc, #116]	; (80034d4 <TIM_TimeBaseInit+0xd0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d00c      	beq.n	800347c <TIM_TimeBaseInit+0x78>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a1c      	ldr	r2, [pc, #112]	; (80034d8 <TIM_TimeBaseInit+0xd4>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d008      	beq.n	800347c <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800346a:	89fb      	ldrh	r3, [r7, #14]
 800346c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003470:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	891a      	ldrh	r2, [r3, #8]
 8003476:	89fb      	ldrh	r3, [r7, #14]
 8003478:	4313      	orrs	r3, r2
 800347a:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	89fa      	ldrh	r2, [r7, #14]
 8003480:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685a      	ldr	r2, [r3, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	881a      	ldrh	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a0a      	ldr	r2, [pc, #40]	; (80034c0 <TIM_TimeBaseInit+0xbc>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d003      	beq.n	80034a2 <TIM_TimeBaseInit+0x9e>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a09      	ldr	r2, [pc, #36]	; (80034c4 <TIM_TimeBaseInit+0xc0>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d104      	bne.n	80034ac <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	7a9b      	ldrb	r3, [r3, #10]
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	829a      	strh	r2, [r3, #20]
}
 80034b2:	bf00      	nop
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	40010000 	.word	0x40010000
 80034c4:	40010400 	.word	0x40010400
 80034c8:	40000400 	.word	0x40000400
 80034cc:	40000800 	.word	0x40000800
 80034d0:	40000c00 	.word	0x40000c00
 80034d4:	40001000 	.word	0x40001000
 80034d8:	40001400 	.word	0x40001400

080034dc <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	460b      	mov	r3, r1
 80034e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80034e8:	78fb      	ldrb	r3, [r7, #3]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d008      	beq.n	8003500 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 80034fe:	e007      	b.n	8003510 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	b29b      	uxth	r3, r3
 8003506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800350a:	b29a      	uxth	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	801a      	strh	r2, [r3, #0]
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	460b      	mov	r3, r1
 8003526:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003528:	78fb      	ldrb	r3, [r7, #3]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d008      	beq.n	8003540 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	881b      	ldrh	r3, [r3, #0]
 8003532:	b29b      	uxth	r3, r3
 8003534:	f043 0301 	orr.w	r3, r3, #1
 8003538:	b29a      	uxth	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 800353e:	e007      	b.n	8003550 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	b29b      	uxth	r3, r3
 8003546:	f023 0301 	bic.w	r3, r3, #1
 800354a:	b29a      	uxth	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	801a      	strh	r2, [r3, #0]
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8003566:	2300      	movs	r3, #0
 8003568:	817b      	strh	r3, [r7, #10]
 800356a:	2300      	movs	r3, #0
 800356c:	81fb      	strh	r3, [r7, #14]
 800356e:	2300      	movs	r3, #0
 8003570:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	8c1b      	ldrh	r3, [r3, #32]
 8003576:	b29b      	uxth	r3, r3
 8003578:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800357c:	b29a      	uxth	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	8c1b      	ldrh	r3, [r3, #32]
 8003586:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	889b      	ldrh	r3, [r3, #4]
 800358c:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	8b9b      	ldrh	r3, [r3, #28]
 8003592:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8003594:	897b      	ldrh	r3, [r7, #10]
 8003596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 800359c:	897b      	ldrh	r3, [r7, #10]
 800359e:	f023 0303 	bic.w	r3, r3, #3
 80035a2:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	881a      	ldrh	r2, [r3, #0]
 80035a8:	897b      	ldrh	r3, [r7, #10]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80035ae:	89fb      	ldrh	r3, [r7, #14]
 80035b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035b4:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	899b      	ldrh	r3, [r3, #12]
 80035ba:	021b      	lsls	r3, r3, #8
 80035bc:	b29a      	uxth	r2, r3
 80035be:	89fb      	ldrh	r3, [r7, #14]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	885b      	ldrh	r3, [r3, #2]
 80035c8:	021b      	lsls	r3, r3, #8
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	89fb      	ldrh	r3, [r7, #14]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a22      	ldr	r2, [pc, #136]	; (8003660 <TIM_OC3Init+0x104>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d003      	beq.n	80035e2 <TIM_OC3Init+0x86>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a21      	ldr	r2, [pc, #132]	; (8003664 <TIM_OC3Init+0x108>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d12b      	bne.n	800363a <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80035e2:	89fb      	ldrh	r3, [r7, #14]
 80035e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035e8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	89db      	ldrh	r3, [r3, #14]
 80035ee:	021b      	lsls	r3, r3, #8
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	89fb      	ldrh	r3, [r7, #14]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 80035f8:	89fb      	ldrh	r3, [r7, #14]
 80035fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035fe:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	889b      	ldrh	r3, [r3, #4]
 8003604:	021b      	lsls	r3, r3, #8
 8003606:	b29a      	uxth	r2, r3
 8003608:	89fb      	ldrh	r3, [r7, #14]
 800360a:	4313      	orrs	r3, r2
 800360c:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 800360e:	89bb      	ldrh	r3, [r7, #12]
 8003610:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003614:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8003616:	89bb      	ldrh	r3, [r7, #12]
 8003618:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800361c:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	8a1b      	ldrh	r3, [r3, #16]
 8003622:	011b      	lsls	r3, r3, #4
 8003624:	b29a      	uxth	r2, r3
 8003626:	89bb      	ldrh	r3, [r7, #12]
 8003628:	4313      	orrs	r3, r2
 800362a:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	8a5b      	ldrh	r3, [r3, #18]
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	b29a      	uxth	r2, r3
 8003634:	89bb      	ldrh	r3, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	89ba      	ldrh	r2, [r7, #12]
 800363e:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	897a      	ldrh	r2, [r7, #10]
 8003644:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	89fa      	ldrh	r2, [r7, #14]
 8003652:	841a      	strh	r2, [r3, #32]
}
 8003654:	bf00      	nop
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	40010000 	.word	0x40010000
 8003664:	40010400 	.word	0x40010400

08003668 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8003668:	b480      	push	{r7}
 800366a:	b085      	sub	sp, #20
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8003672:	2300      	movs	r3, #0
 8003674:	81bb      	strh	r3, [r7, #12]
 8003676:	2300      	movs	r3, #0
 8003678:	817b      	strh	r3, [r7, #10]
 800367a:	2300      	movs	r3, #0
 800367c:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	8c1b      	ldrh	r3, [r3, #32]
 8003682:	b29b      	uxth	r3, r3
 8003684:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003688:	b29a      	uxth	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	8c1b      	ldrh	r3, [r3, #32]
 8003692:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	889b      	ldrh	r3, [r3, #4]
 8003698:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	8b9b      	ldrh	r3, [r3, #28]
 800369e:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 80036a0:	89bb      	ldrh	r3, [r7, #12]
 80036a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036a6:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 80036a8:	89bb      	ldrh	r3, [r7, #12]
 80036aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ae:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	021b      	lsls	r3, r3, #8
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	89bb      	ldrh	r3, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80036be:	897b      	ldrh	r3, [r7, #10]
 80036c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036c4:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	899b      	ldrh	r3, [r3, #12]
 80036ca:	031b      	lsls	r3, r3, #12
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	897b      	ldrh	r3, [r7, #10]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	885b      	ldrh	r3, [r3, #2]
 80036d8:	031b      	lsls	r3, r3, #12
 80036da:	b29a      	uxth	r2, r3
 80036dc:	897b      	ldrh	r3, [r7, #10]
 80036de:	4313      	orrs	r3, r2
 80036e0:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a12      	ldr	r2, [pc, #72]	; (8003730 <TIM_OC4Init+0xc8>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d003      	beq.n	80036f2 <TIM_OC4Init+0x8a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a11      	ldr	r2, [pc, #68]	; (8003734 <TIM_OC4Init+0xcc>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d10a      	bne.n	8003708 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 80036f2:	89fb      	ldrh	r3, [r7, #14]
 80036f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036f8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	8a1b      	ldrh	r3, [r3, #16]
 80036fe:	019b      	lsls	r3, r3, #6
 8003700:	b29a      	uxth	r2, r3
 8003702:	89fb      	ldrh	r3, [r7, #14]
 8003704:	4313      	orrs	r3, r2
 8003706:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	89fa      	ldrh	r2, [r7, #14]
 800370c:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	89ba      	ldrh	r2, [r7, #12]
 8003712:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	897a      	ldrh	r2, [r7, #10]
 8003720:	841a      	strh	r2, [r3, #32]
}
 8003722:	bf00      	nop
 8003724:	3714      	adds	r7, #20
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	40010000 	.word	0x40010000
 8003734:	40010400 	.word	0x40010400

08003738 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8003738:	b480      	push	{r7}
 800373a:	b085      	sub	sp, #20
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8003744:	2300      	movs	r3, #0
 8003746:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	8b9b      	ldrh	r3, [r3, #28]
 800374c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 800374e:	89fb      	ldrh	r3, [r7, #14]
 8003750:	f023 0308 	bic.w	r3, r3, #8
 8003754:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8003756:	89fa      	ldrh	r2, [r7, #14]
 8003758:	887b      	ldrh	r3, [r7, #2]
 800375a:	4313      	orrs	r3, r2
 800375c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	89fa      	ldrh	r2, [r7, #14]
 8003762:	839a      	strh	r2, [r3, #28]
}
 8003764:	bf00      	nop
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	460b      	mov	r3, r1
 800377a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800377c:	2300      	movs	r3, #0
 800377e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	8b9b      	ldrh	r3, [r3, #28]
 8003784:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8003786:	89fb      	ldrh	r3, [r7, #14]
 8003788:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800378c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 800378e:	887b      	ldrh	r3, [r7, #2]
 8003790:	021b      	lsls	r3, r3, #8
 8003792:	b29a      	uxth	r2, r3
 8003794:	89fb      	ldrh	r3, [r7, #14]
 8003796:	4313      	orrs	r3, r2
 8003798:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	89fa      	ldrh	r2, [r7, #14]
 800379e:	839a      	strh	r2, [r3, #28]
}
 80037a0:	bf00      	nop
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	460b      	mov	r3, r1
 80037b6:	807b      	strh	r3, [r7, #2]
 80037b8:	4613      	mov	r3, r2
 80037ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80037bc:	787b      	ldrb	r3, [r7, #1]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d008      	beq.n	80037d4 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	899b      	ldrh	r3, [r3, #12]
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	887b      	ldrh	r3, [r7, #2]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80037d2:	e009      	b.n	80037e8 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	899b      	ldrh	r3, [r3, #12]
 80037d8:	b29a      	uxth	r2, r3
 80037da:	887b      	ldrh	r3, [r7, #2]
 80037dc:	43db      	mvns	r3, r3
 80037de:	b29b      	uxth	r3, r3
 80037e0:	4013      	ands	r3, r2
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	819a      	strh	r2, [r3, #12]
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	460b      	mov	r3, r1
 80037fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8003800:	887b      	ldrh	r3, [r7, #2]
 8003802:	43db      	mvns	r3, r3
 8003804:	b29a      	uxth	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	821a      	strh	r2, [r3, #16]
}
 800380a:	bf00      	nop
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8003816:	b480      	push	{r7}
 8003818:	b083      	sub	sp, #12
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
 800381e:	460b      	mov	r3, r1
 8003820:	807b      	strh	r3, [r7, #2]
 8003822:	4613      	mov	r3, r2
 8003824:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003826:	787b      	ldrb	r3, [r7, #1]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d008      	beq.n	800383e <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	899b      	ldrh	r3, [r3, #12]
 8003830:	b29a      	uxth	r2, r3
 8003832:	887b      	ldrh	r3, [r7, #2]
 8003834:	4313      	orrs	r3, r2
 8003836:	b29a      	uxth	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
 800383c:	e009      	b.n	8003852 <TIM_DMACmd+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	899b      	ldrh	r3, [r3, #12]
 8003842:	b29a      	uxth	r2, r3
 8003844:	887b      	ldrh	r3, [r7, #2]
 8003846:	43db      	mvns	r3, r3
 8003848:	b29b      	uxth	r3, r3
 800384a:	4013      	ands	r3, r2
 800384c:	b29a      	uxth	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	819a      	strh	r2, [r3, #12]
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
	...

08003860 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08a      	sub	sp, #40	; 0x28
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800386a:	2300      	movs	r3, #0
 800386c:	627b      	str	r3, [r7, #36]	; 0x24
 800386e:	2300      	movs	r3, #0
 8003870:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8003872:	2300      	movs	r3, #0
 8003874:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8003876:	2300      	movs	r3, #0
 8003878:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	8a1b      	ldrh	r3, [r3, #16]
 800387e:	b29b      	uxth	r3, r3
 8003880:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003888:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	88db      	ldrh	r3, [r3, #6]
 800388e:	461a      	mov	r2, r3
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	4313      	orrs	r3, r2
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	b29a      	uxth	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	899b      	ldrh	r3, [r3, #12]
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80038ac:	f023 030c 	bic.w	r3, r3, #12
 80038b0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	889a      	ldrh	r2, [r3, #4]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	891b      	ldrh	r3, [r3, #8]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80038c2:	4313      	orrs	r3, r2
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	461a      	mov	r2, r3
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	4313      	orrs	r3, r2
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80038ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	8a9b      	ldrh	r3, [r3, #20]
 80038da:	b29b      	uxth	r3, r3
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	899b      	ldrh	r3, [r3, #12]
 80038ea:	461a      	mov	r2, r3
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	4313      	orrs	r3, r2
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80038fa:	f107 0308 	add.w	r3, r7, #8
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff fc78 	bl	80031f4 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a30      	ldr	r2, [pc, #192]	; (80039c8 <USART_Init+0x168>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d003      	beq.n	8003914 <USART_Init+0xb4>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a2f      	ldr	r2, [pc, #188]	; (80039cc <USART_Init+0x16c>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d102      	bne.n	800391a <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	623b      	str	r3, [r7, #32]
 8003918:	e001      	b.n	800391e <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	899b      	ldrh	r3, [r3, #12]
 8003922:	b29b      	uxth	r3, r3
 8003924:	b21b      	sxth	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	da0c      	bge.n	8003944 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800392a:	6a3a      	ldr	r2, [r7, #32]
 800392c:	4613      	mov	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	4413      	add	r3, r2
 8003932:	009a      	lsls	r2, r3, #2
 8003934:	441a      	add	r2, r3
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003940:	61fb      	str	r3, [r7, #28]
 8003942:	e00b      	b.n	800395c <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8003944:	6a3a      	ldr	r2, [r7, #32]
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	009a      	lsls	r2, r3, #2
 800394e:	441a      	add	r2, r3
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	fbb2 f3f3 	udiv	r3, r2, r3
 800395a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	4a1c      	ldr	r2, [pc, #112]	; (80039d0 <USART_Init+0x170>)
 8003960:	fba2 2303 	umull	r2, r3, r2, r3
 8003964:	095b      	lsrs	r3, r3, #5
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800396a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	2264      	movs	r2, #100	; 0x64
 8003970:	fb02 f303 	mul.w	r3, r2, r3
 8003974:	69fa      	ldr	r2, [r7, #28]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	899b      	ldrh	r3, [r3, #12]
 800397e:	b29b      	uxth	r3, r3
 8003980:	b21b      	sxth	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	da0c      	bge.n	80039a0 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	3332      	adds	r3, #50	; 0x32
 800398c:	4a10      	ldr	r2, [pc, #64]	; (80039d0 <USART_Init+0x170>)
 800398e:	fba2 2303 	umull	r2, r3, r2, r3
 8003992:	095b      	lsrs	r3, r3, #5
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800399a:	4313      	orrs	r3, r2
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
 800399e:	e00b      	b.n	80039b8 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	3332      	adds	r3, #50	; 0x32
 80039a6:	4a0a      	ldr	r2, [pc, #40]	; (80039d0 <USART_Init+0x170>)
 80039a8:	fba2 2303 	umull	r2, r3, r2, r3
 80039ac:	095b      	lsrs	r3, r3, #5
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b4:	4313      	orrs	r3, r2
 80039b6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80039b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	811a      	strh	r2, [r3, #8]
}
 80039c0:	bf00      	nop
 80039c2:	3728      	adds	r7, #40	; 0x28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	40011000 	.word	0x40011000
 80039cc:	40011400 	.word	0x40011400
 80039d0:	51eb851f 	.word	0x51eb851f

080039d4 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80039e0:	78fb      	ldrb	r3, [r7, #3]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d008      	beq.n	80039f8 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	899b      	ldrh	r3, [r3, #12]
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 80039f6:	e007      	b.n	8003a08 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	899b      	ldrh	r3, [r3, #12]
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	819a      	strh	r2, [r3, #12]
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8003a20:	887b      	ldrh	r3, [r7, #2]
 8003a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	809a      	strh	r2, [r3, #4]
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	807b      	strh	r3, [r7, #2]
 8003a44:	4613      	mov	r3, r2
 8003a46:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	613b      	str	r3, [r7, #16]
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	2300      	movs	r3, #0
 8003a52:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8003a54:	2300      	movs	r3, #0
 8003a56:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8003a5c:	887b      	ldrh	r3, [r7, #2]
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	095b      	lsrs	r3, r3, #5
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8003a66:	887b      	ldrh	r3, [r7, #2]
 8003a68:	f003 031f 	and.w	r3, r3, #31
 8003a6c:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8003a6e:	2201      	movs	r2, #1
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d103      	bne.n	8003a86 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	330c      	adds	r3, #12
 8003a82:	617b      	str	r3, [r7, #20]
 8003a84:	e009      	b.n	8003a9a <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d103      	bne.n	8003a94 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	3310      	adds	r3, #16
 8003a90:	617b      	str	r3, [r7, #20]
 8003a92:	e002      	b.n	8003a9a <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	3314      	adds	r3, #20
 8003a98:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8003a9a:	787b      	ldrb	r3, [r7, #1]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d006      	beq.n	8003aae <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	6811      	ldr	r1, [r2, #0]
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8003aac:	e006      	b.n	8003abc <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	6811      	ldr	r1, [r2, #0]
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	43d2      	mvns	r2, r2
 8003ab8:	400a      	ands	r2, r1
 8003aba:	601a      	str	r2, [r3, #0]
}
 8003abc:	bf00      	nop
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	881b      	ldrh	r3, [r3, #0]
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	887b      	ldrh	r3, [r7, #2]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d002      	beq.n	8003aee <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	73fb      	strb	r3, [r7, #15]
 8003aec:	e001      	b.n	8003af2 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8003aee:	2300      	movs	r3, #0
 8003af0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3714      	adds	r7, #20
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	2300      	movs	r3, #0
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	2300      	movs	r3, #0
 8003b16:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8003b1c:	887b      	ldrh	r3, [r7, #2]
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	095b      	lsrs	r3, r3, #5
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8003b26:	887b      	ldrh	r3, [r7, #2]
 8003b28:	f003 031f 	and.w	r3, r3, #31
 8003b2c:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8003b2e:	2201      	movs	r2, #1
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d107      	bne.n	8003b4e <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	899b      	ldrh	r3, [r3, #12]
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	461a      	mov	r2, r3
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	e011      	b.n	8003b72 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d107      	bne.n	8003b64 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	8a1b      	ldrh	r3, [r3, #16]
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	617b      	str	r3, [r7, #20]
 8003b62:	e006      	b.n	8003b72 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	8a9b      	ldrh	r3, [r3, #20]
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8003b72:	887b      	ldrh	r3, [r7, #2]
 8003b74:	0a1b      	lsrs	r3, r3, #8
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <USART_GetITStatus+0xa4>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	74fb      	strb	r3, [r7, #19]
 8003ba2:	e001      	b.n	8003ba8 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8003ba8:	7cfb      	ldrb	r3, [r7, #19]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	371c      	adds	r7, #28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8003bb6:	b480      	push	{r7}
 8003bb8:	b085      	sub	sp, #20
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	81fb      	strh	r3, [r7, #14]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8003bca:	887b      	ldrh	r3, [r7, #2]
 8003bcc:	0a1b      	lsrs	r3, r3, #8
 8003bce:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8003bd0:	89fb      	ldrh	r3, [r7, #14]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd8:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8003bda:	89bb      	ldrh	r3, [r7, #12]
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	801a      	strh	r2, [r3, #0]
}
 8003be4:	bf00      	nop
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <DELAY_init>:
uint32_t D_mS; // Global variable (ms)
uint32_t D_S; // Global variable (s)


void DELAY_init(void)
{
 8003bf0:	b590      	push	{r4, r7, lr}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
	RCC_ClocksTypeDef Clocks;
	RCC_GetClocksFreq(&Clocks);
 8003bf6:	463b      	mov	r3, r7
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff fafb 	bl	80031f4 <RCC_GetClocksFreq>
	G_CLK = Clocks.SYSCLK_Frequency;	// Read the systemclock
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	4a3f      	ldr	r2, [pc, #252]	; (8003d00 <DELAY_init+0x110>)
 8003c02:	6013      	str	r3, [r2, #0]
	D_S  = (G_CLK*1.25)/9/2;	// Number of instructions in one second
 8003c04:	4b3e      	ldr	r3, [pc, #248]	; (8003d00 <DELAY_init+0x110>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fc fc31 	bl	8000470 <__aeabi_ui2d>
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	4b3c      	ldr	r3, [pc, #240]	; (8003d04 <DELAY_init+0x114>)
 8003c14:	f7fc fca2 	bl	800055c <__aeabi_dmul>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	460c      	mov	r4, r1
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	4621      	mov	r1, r4
 8003c20:	f04f 0200 	mov.w	r2, #0
 8003c24:	4b38      	ldr	r3, [pc, #224]	; (8003d08 <DELAY_init+0x118>)
 8003c26:	f7fc fdc3 	bl	80007b0 <__aeabi_ddiv>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	460c      	mov	r4, r1
 8003c2e:	4618      	mov	r0, r3
 8003c30:	4621      	mov	r1, r4
 8003c32:	f04f 0200 	mov.w	r2, #0
 8003c36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c3a:	f7fc fdb9 	bl	80007b0 <__aeabi_ddiv>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	460c      	mov	r4, r1
 8003c42:	4618      	mov	r0, r3
 8003c44:	4621      	mov	r1, r4
 8003c46:	f7fc fe9b 	bl	8000980 <__aeabi_d2uiz>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	4b2f      	ldr	r3, [pc, #188]	; (8003d0c <DELAY_init+0x11c>)
 8003c4e:	601a      	str	r2, [r3, #0]
	D_mS = (G_CLK*1.25)/9000/2; // Number of instructions in one millisecond
 8003c50:	4b2b      	ldr	r3, [pc, #172]	; (8003d00 <DELAY_init+0x110>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7fc fc0b 	bl	8000470 <__aeabi_ui2d>
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	4b29      	ldr	r3, [pc, #164]	; (8003d04 <DELAY_init+0x114>)
 8003c60:	f7fc fc7c 	bl	800055c <__aeabi_dmul>
 8003c64:	4603      	mov	r3, r0
 8003c66:	460c      	mov	r4, r1
 8003c68:	4618      	mov	r0, r3
 8003c6a:	4621      	mov	r1, r4
 8003c6c:	a320      	add	r3, pc, #128	; (adr r3, 8003cf0 <DELAY_init+0x100>)
 8003c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c72:	f7fc fd9d 	bl	80007b0 <__aeabi_ddiv>
 8003c76:	4603      	mov	r3, r0
 8003c78:	460c      	mov	r4, r1
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	4621      	mov	r1, r4
 8003c7e:	f04f 0200 	mov.w	r2, #0
 8003c82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c86:	f7fc fd93 	bl	80007b0 <__aeabi_ddiv>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	460c      	mov	r4, r1
 8003c8e:	4618      	mov	r0, r3
 8003c90:	4621      	mov	r1, r4
 8003c92:	f7fc fe75 	bl	8000980 <__aeabi_d2uiz>
 8003c96:	4602      	mov	r2, r0
 8003c98:	4b1d      	ldr	r3, [pc, #116]	; (8003d10 <DELAY_init+0x120>)
 8003c9a:	601a      	str	r2, [r3, #0]
	D_uS = (G_CLK*1.25)/9000000/2; // Number of instructions in one microsecond, largest rounding error
 8003c9c:	4b18      	ldr	r3, [pc, #96]	; (8003d00 <DELAY_init+0x110>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fc fbe5 	bl	8000470 <__aeabi_ui2d>
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	4b16      	ldr	r3, [pc, #88]	; (8003d04 <DELAY_init+0x114>)
 8003cac:	f7fc fc56 	bl	800055c <__aeabi_dmul>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	460c      	mov	r4, r1
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	4621      	mov	r1, r4
 8003cb8:	a30f      	add	r3, pc, #60	; (adr r3, 8003cf8 <DELAY_init+0x108>)
 8003cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cbe:	f7fc fd77 	bl	80007b0 <__aeabi_ddiv>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	460c      	mov	r4, r1
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	4621      	mov	r1, r4
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003cd2:	f7fc fd6d 	bl	80007b0 <__aeabi_ddiv>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	460c      	mov	r4, r1
 8003cda:	4618      	mov	r0, r3
 8003cdc:	4621      	mov	r1, r4
 8003cde:	f7fc fe4f 	bl	8000980 <__aeabi_d2uiz>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <DELAY_init+0x124>)
 8003ce6:	601a      	str	r2, [r3, #0]
}
 8003ce8:	bf00      	nop
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd90      	pop	{r4, r7, pc}
 8003cf0:	00000000 	.word	0x00000000
 8003cf4:	40c19400 	.word	0x40c19400
 8003cf8:	00000000 	.word	0x00000000
 8003cfc:	41612a88 	.word	0x41612a88
 8003d00:	20013890 	.word	0x20013890
 8003d04:	3ff40000 	.word	0x3ff40000
 8003d08:	40220000 	.word	0x40220000
 8003d0c:	20013894 	.word	0x20013894
 8003d10:	2001389c 	.word	0x2001389c
 8003d14:	20013898 	.word	0x20013898

08003d18 <UB_VGA_Screen_Init>:

//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
  uint16_t xp,yp;

  VGA.hsync_cnt=0;
 8003d1e:	4b1b      	ldr	r3, [pc, #108]	; (8003d8c <UB_VGA_Screen_Init+0x74>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	801a      	strh	r2, [r3, #0]
  VGA.start_adr=0;
 8003d24:	4b19      	ldr	r3, [pc, #100]	; (8003d8c <UB_VGA_Screen_Init+0x74>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg=0;
 8003d2a:	4b18      	ldr	r3, [pc, #96]	; (8003d8c <UB_VGA_Screen_Init+0x74>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	609a      	str	r2, [r3, #8]

  // RAM init total black
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8003d30:	2300      	movs	r3, #0
 8003d32:	80bb      	strh	r3, [r7, #4]
 8003d34:	e017      	b.n	8003d66 <UB_VGA_Screen_Init+0x4e>
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 8003d36:	2300      	movs	r3, #0
 8003d38:	80fb      	strh	r3, [r7, #6]
 8003d3a:	e00d      	b.n	8003d58 <UB_VGA_Screen_Init+0x40>
      VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=0;
 8003d3c:	88ba      	ldrh	r2, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	4413      	add	r3, r2
 8003d44:	019b      	lsls	r3, r3, #6
 8003d46:	441a      	add	r2, r3
 8003d48:	88fb      	ldrh	r3, [r7, #6]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	4a10      	ldr	r2, [pc, #64]	; (8003d90 <UB_VGA_Screen_Init+0x78>)
 8003d4e:	2100      	movs	r1, #0
 8003d50:	54d1      	strb	r1, [r2, r3]
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 8003d52:	88fb      	ldrh	r3, [r7, #6]
 8003d54:	3301      	adds	r3, #1
 8003d56:	80fb      	strh	r3, [r7, #6]
 8003d58:	88fb      	ldrh	r3, [r7, #6]
 8003d5a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003d5e:	d9ed      	bls.n	8003d3c <UB_VGA_Screen_Init+0x24>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8003d60:	88bb      	ldrh	r3, [r7, #4]
 8003d62:	3301      	adds	r3, #1
 8003d64:	80bb      	strh	r3, [r7, #4]
 8003d66:	88bb      	ldrh	r3, [r7, #4]
 8003d68:	2bef      	cmp	r3, #239	; 0xef
 8003d6a:	d9e4      	bls.n	8003d36 <UB_VGA_Screen_Init+0x1e>
    }
  }

  // init IO-Pins
  P_VGA_InitIO();
 8003d6c:	f000 f85e 	bl	8003e2c <P_VGA_InitIO>
  // init Timer
  P_VGA_InitTIM();
 8003d70:	f000 f8b0 	bl	8003ed4 <P_VGA_InitTIM>
  // init DMA
  P_VGA_InitDMA();
 8003d74:	f000 f940 	bl	8003ff8 <P_VGA_InitDMA>
  // init Interrupts
  P_VGA_InitINT();
 8003d78:	f000 f912 	bl	8003fa0 <P_VGA_InitINT>

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg=DMA2_Stream5->CR;
 8003d7c:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <UB_VGA_Screen_Init+0x7c>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a02      	ldr	r2, [pc, #8]	; (8003d8c <UB_VGA_Screen_Init+0x74>)
 8003d82:	6093      	str	r3, [r2, #8]
}
 8003d84:	bf00      	nop
 8003d86:	3708      	adds	r7, #8
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}
 8003d8c:	200006ec 	.word	0x200006ec
 8003d90:	20000780 	.word	0x20000780
 8003d94:	40026488 	.word	0x40026488

08003d98 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	4603      	mov	r3, r0
 8003da0:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8003da2:	2300      	movs	r3, #0
 8003da4:	81bb      	strh	r3, [r7, #12]
 8003da6:	e012      	b.n	8003dce <UB_VGA_FillScreen+0x36>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 8003da8:	2300      	movs	r3, #0
 8003daa:	81fb      	strh	r3, [r7, #14]
 8003dac:	e008      	b.n	8003dc0 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp,yp,color);
 8003dae:	79fa      	ldrb	r2, [r7, #7]
 8003db0:	89b9      	ldrh	r1, [r7, #12]
 8003db2:	89fb      	ldrh	r3, [r7, #14]
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 f811 	bl	8003ddc <UB_VGA_SetPixel>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 8003dba:	89fb      	ldrh	r3, [r7, #14]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	81fb      	strh	r3, [r7, #14]
 8003dc0:	89fb      	ldrh	r3, [r7, #14]
 8003dc2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003dc6:	d3f2      	bcc.n	8003dae <UB_VGA_FillScreen+0x16>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8003dc8:	89bb      	ldrh	r3, [r7, #12]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	81bb      	strh	r3, [r7, #12]
 8003dce:	89bb      	ldrh	r3, [r7, #12]
 8003dd0:	2bef      	cmp	r3, #239	; 0xef
 8003dd2:	d9e9      	bls.n	8003da8 <UB_VGA_FillScreen+0x10>
    }
  }
}
 8003dd4:	bf00      	nop
 8003dd6:	3710      	adds	r7, #16
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	4603      	mov	r3, r0
 8003de4:	80fb      	strh	r3, [r7, #6]
 8003de6:	460b      	mov	r3, r1
 8003de8:	80bb      	strh	r3, [r7, #4]
 8003dea:	4613      	mov	r3, r2
 8003dec:	70fb      	strb	r3, [r7, #3]
  if(xp>=VGA_DISPLAY_X) xp=0;
 8003dee:	88fb      	ldrh	r3, [r7, #6]
 8003df0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003df4:	d301      	bcc.n	8003dfa <UB_VGA_SetPixel+0x1e>
 8003df6:	2300      	movs	r3, #0
 8003df8:	80fb      	strh	r3, [r7, #6]
  if(yp>=VGA_DISPLAY_Y) yp=0;
 8003dfa:	88bb      	ldrh	r3, [r7, #4]
 8003dfc:	2bef      	cmp	r3, #239	; 0xef
 8003dfe:	d901      	bls.n	8003e04 <UB_VGA_SetPixel+0x28>
 8003e00:	2300      	movs	r3, #0
 8003e02:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=color;
 8003e04:	88ba      	ldrh	r2, [r7, #4]
 8003e06:	4613      	mov	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	4413      	add	r3, r2
 8003e0c:	019b      	lsls	r3, r3, #6
 8003e0e:	441a      	add	r2, r3
 8003e10:	88fb      	ldrh	r3, [r7, #6]
 8003e12:	4413      	add	r3, r2
 8003e14:	4904      	ldr	r1, [pc, #16]	; (8003e28 <UB_VGA_SetPixel+0x4c>)
 8003e16:	78fa      	ldrb	r2, [r7, #3]
 8003e18:	54ca      	strb	r2, [r1, r3]
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	20000780 	.word	0x20000780

08003e2c <P_VGA_InitIO>:
//--------------------------------------------------------------
// interne Funktionen
// init aller IO-Pins
//--------------------------------------------------------------
void P_VGA_InitIO(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
  // init RGB-Pins (PE8 - PE15)
  // as normal GPIOs
  //---------------------------------------------
 
  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8003e32:	2101      	movs	r1, #1
 8003e34:	2010      	movs	r0, #16
 8003e36:	f7ff fa85 	bl	8003344 <RCC_AHB1PeriphClockCmd>

  // Config as Digital output
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 |
 8003e3a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8003e3e:	603b      	str	r3, [r7, #0]
        GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8003e40:	2301      	movs	r3, #1
 8003e42:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003e44:	2300      	movs	r3, #0
 8003e46:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003e50:	463b      	mov	r3, r7
 8003e52:	4619      	mov	r1, r3
 8003e54:	481d      	ldr	r0, [pc, #116]	; (8003ecc <P_VGA_InitIO+0xa0>)
 8003e56:	f7ff f8f5 	bl	8003044 <GPIO_Init>

  GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 8003e5a:	4b1c      	ldr	r3, [pc, #112]	; (8003ecc <P_VGA_InitIO+0xa0>)
 8003e5c:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8003e60:	835a      	strh	r2, [r3, #26]
  // init of the H-Sync Pin (PB11)
  // using Timer2 and CH4
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8003e62:	2101      	movs	r1, #1
 8003e64:	2002      	movs	r0, #2
 8003e66:	f7ff fa6d 	bl	8003344 <RCC_AHB1PeriphClockCmd>

  // Config Pins as Digital-out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 8003e6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e6e:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8003e70:	2302      	movs	r3, #2
 8003e72:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8003e74:	2303      	movs	r3, #3
 8003e76:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003e80:	463b      	mov	r3, r7
 8003e82:	4619      	mov	r1, r3
 8003e84:	4812      	ldr	r0, [pc, #72]	; (8003ed0 <P_VGA_InitIO+0xa4>)
 8003e86:	f7ff f8dd 	bl	8003044 <GPIO_Init>

  // alternative function connect with IO
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_TIM2);
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	210b      	movs	r1, #11
 8003e8e:	4810      	ldr	r0, [pc, #64]	; (8003ed0 <P_VGA_InitIO+0xa4>)
 8003e90:	f7ff f966 	bl	8003160 <GPIO_PinAFConfig>
  // init of V-Sync Pin (PB12)
  // using GPIO
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8003e94:	2101      	movs	r1, #1
 8003e96:	2002      	movs	r0, #2
 8003e98:	f7ff fa54 	bl	8003344 <RCC_AHB1PeriphClockCmd>

  // Config of the Pins as Digital out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8003e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ea0:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003eb2:	463b      	mov	r3, r7
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	4806      	ldr	r0, [pc, #24]	; (8003ed0 <P_VGA_InitIO+0xa4>)
 8003eb8:	f7ff f8c4 	bl	8003044 <GPIO_Init>

  GPIOB->BSRRL = GPIO_Pin_12;
 8003ebc:	4b04      	ldr	r3, [pc, #16]	; (8003ed0 <P_VGA_InitIO+0xa4>)
 8003ebe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ec2:	831a      	strh	r2, [r3, #24]
}
 8003ec4:	bf00      	nop
 8003ec6:	3708      	adds	r7, #8
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40021000 	.word	0x40021000
 8003ed0:	40020400 	.word	0x40020400

08003ed4 <P_VGA_InitTIM>:
//--------------------------------------------------------------
// internal Function
// init Timer
//--------------------------------------------------------------
void P_VGA_InitTIM(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b088      	sub	sp, #32
 8003ed8:	af00      	add	r7, sp, #0
  // init of Timer1 for
  // Pixeldata via DMA
  //---------------------------------------------

  // Clock enable
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8003eda:	2101      	movs	r1, #1
 8003edc:	2001      	movs	r0, #1
 8003ede:	f7ff fa71 	bl	80033c4 <RCC_APB2PeriphClockCmd>

  // Timer1 init
  TIM_TimeBaseStructure.TIM_Period =  VGA_TIM1_PERIODE;
 8003ee2:	230b      	movs	r3, #11
 8003ee4:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM1_PRESCALE;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8003eea:	2300      	movs	r3, #0
 8003eec:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 8003ef2:	f107 0314 	add.w	r3, r7, #20
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	4828      	ldr	r0, [pc, #160]	; (8003f9c <P_VGA_InitTIM+0xc8>)
 8003efa:	f7ff fa83 	bl	8003404 <TIM_TimeBaseInit>
  // CH4 for HSYNC-Signal
  // CH3 for DMA Trigger start
  //---------------------------------------------

  // Clock enable
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8003efe:	2101      	movs	r1, #1
 8003f00:	2001      	movs	r0, #1
 8003f02:	f7ff fa3f 	bl	8003384 <RCC_APB1PeriphClockCmd>

  // Timer2 init
  TIM_TimeBaseStructure.TIM_Period = VGA_TIM2_HSYNC_PERIODE;
 8003f06:	f640 236b 	movw	r3, #2667	; 0xa6b
 8003f0a:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8003f10:	2300      	movs	r3, #0
 8003f12:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8003f14:	2300      	movs	r3, #0
 8003f16:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8003f18:	f107 0314 	add.w	r3, r7, #20
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003f22:	f7ff fa6f 	bl	8003404 <TIM_TimeBaseInit>

  // Timer2 Channel 3 ( for DMA Trigger start)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8003f26:	2360      	movs	r3, #96	; 0x60
 8003f28:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HTRIGGER_START-VGA_TIM2_DMA_DELAY;
 8003f2e:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8003f32:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8003f34:	2302      	movs	r3, #2
 8003f36:	81bb      	strh	r3, [r7, #12]
  TIM_OC3Init(TIM2, &TIM_OCInitStructure);
 8003f38:	463b      	mov	r3, r7
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003f40:	f7ff fb0c 	bl	800355c <TIM_OC3Init>
  TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8003f44:	2108      	movs	r1, #8
 8003f46:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003f4a:	f7ff fbf5 	bl	8003738 <TIM_OC3PreloadConfig>

  // Timer2 Channel 4 (for HSYNC)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8003f4e:	2360      	movs	r3, #96	; 0x60
 8003f50:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8003f52:	2301      	movs	r3, #1
 8003f54:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HSYNC_IMP;
 8003f56:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003f5a:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	81bb      	strh	r3, [r7, #12]
  TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 8003f60:	463b      	mov	r3, r7
 8003f62:	4619      	mov	r1, r3
 8003f64:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003f68:	f7ff fb7e 	bl	8003668 <TIM_OC4Init>
  TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8003f6c:	2108      	movs	r1, #8
 8003f6e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003f72:	f7ff fbfd 	bl	8003770 <TIM_OC4PreloadConfig>
  //---------------------------------------------
  // enable all Timers
  //---------------------------------------------

  // Timer1 enable
  TIM_ARRPreloadConfig(TIM1, ENABLE);
 8003f76:	2101      	movs	r1, #1
 8003f78:	4808      	ldr	r0, [pc, #32]	; (8003f9c <P_VGA_InitTIM+0xc8>)
 8003f7a:	f7ff faaf 	bl	80034dc <TIM_ARRPreloadConfig>

  // Timer2 enable
  TIM_ARRPreloadConfig(TIM2, ENABLE);
 8003f7e:	2101      	movs	r1, #1
 8003f80:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003f84:	f7ff faaa 	bl	80034dc <TIM_ARRPreloadConfig>
  TIM_Cmd(TIM2, ENABLE);
 8003f88:	2101      	movs	r1, #1
 8003f8a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003f8e:	f7ff fac5 	bl	800351c <TIM_Cmd>

}
 8003f92:	bf00      	nop
 8003f94:	3720      	adds	r7, #32
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	40010000 	.word	0x40010000

08003fa0 <P_VGA_InitINT>:
//--------------------------------------------------------------
// internal Function
// init Interrupts
//--------------------------------------------------------------
void P_VGA_InitINT(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
  // init from DMA Interrupt
  // for TransferComplete Interrupt
  // DMA2, Stream5, Channel6
  //---------------------------------------------

  DMA_ITConfig(DMA2_Stream5, DMA_IT_TC, ENABLE);
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	2110      	movs	r1, #16
 8003faa:	4812      	ldr	r0, [pc, #72]	; (8003ff4 <P_VGA_InitINT+0x54>)
 8003fac:	f7fe ff8a 	bl	8002ec4 <DMA_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream5_IRQn;
 8003fb0:	2344      	movs	r3, #68	; 0x44
 8003fb2:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8003fc0:	1d3b      	adds	r3, r7, #4
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f7fe fdd4 	bl	8002b70 <NVIC_Init>
  // init of Timer2 Interrupt
  // for HSync-Counter using Update
  // for DMA Trigger START using CH3
  //---------------------------------------------

  TIM_ITConfig(TIM2,TIM_IT_CC3,ENABLE);
 8003fc8:	2201      	movs	r2, #1
 8003fca:	2108      	movs	r1, #8
 8003fcc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003fd0:	f7ff fbec 	bl	80037ac <TIM_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8003fd4:	231c      	movs	r3, #28
 8003fd6:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8003fe4:	1d3b      	adds	r3, r7, #4
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fe fdc2 	bl	8002b70 <NVIC_Init>
}
 8003fec:	bf00      	nop
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40026488 	.word	0x40026488

08003ff8 <P_VGA_InitDMA>:
//--------------------------------------------------------------
// internal Function
// init DMA
//--------------------------------------------------------------
void P_VGA_InitDMA(void)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b090      	sub	sp, #64	; 0x40
 8003ffc:	af00      	add	r7, sp, #0
  // (look at page 217 of the Ref Manual)
  // DMA=2, Channel=6, Stream=5
  //---------------------------------------------

  // Clock Enable (DMA)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 8003ffe:	2101      	movs	r1, #1
 8004000:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8004004:	f7ff f99e 	bl	8003344 <RCC_AHB1PeriphClockCmd>

  // DMA init (DMA2, Channel6, Stream5)
  DMA_Cmd(DMA2_Stream5, DISABLE);
 8004008:	2100      	movs	r1, #0
 800400a:	481b      	ldr	r0, [pc, #108]	; (8004078 <P_VGA_InitDMA+0x80>)
 800400c:	f7fe ff3e 	bl	8002e8c <DMA_Cmd>
  DMA_DeInit(DMA2_Stream5);
 8004010:	4819      	ldr	r0, [pc, #100]	; (8004078 <P_VGA_InitDMA+0x80>)
 8004012:	f7fe fe0f 	bl	8002c34 <DMA_DeInit>
  DMA_InitStructure.DMA_Channel = DMA_Channel_6;
 8004016:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800401a:	607b      	str	r3, [r7, #4]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)VGA_GPIOE_ODR_ADDRESS;
 800401c:	4b17      	ldr	r3, [pc, #92]	; (800407c <P_VGA_InitDMA+0x84>)
 800401e:	60bb      	str	r3, [r7, #8]
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&VGA_RAM1;
 8004020:	4b17      	ldr	r3, [pc, #92]	; (8004080 <P_VGA_InitDMA+0x88>)
 8004022:	60fb      	str	r3, [r7, #12]
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8004024:	2340      	movs	r3, #64	; 0x40
 8004026:	613b      	str	r3, [r7, #16]
  DMA_InitStructure.DMA_BufferSize = VGA_DISPLAY_X+1;
 8004028:	f240 1341 	movw	r3, #321	; 0x141
 800402c:	617b      	str	r3, [r7, #20]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800402e:	2300      	movs	r3, #0
 8004030:	61bb      	str	r3, [r7, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8004032:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004036:	61fb      	str	r3, [r7, #28]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8004038:	2300      	movs	r3, #0
 800403a:	623b      	str	r3, [r7, #32]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800403c:	2300      	movs	r3, #0
 800403e:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8004040:	2300      	movs	r3, #0
 8004042:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8004044:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004048:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 800404a:	2300      	movs	r3, #0
 800404c:	633b      	str	r3, [r7, #48]	; 0x30
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 800404e:	2301      	movs	r3, #1
 8004050:	637b      	str	r3, [r7, #52]	; 0x34
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8004052:	2300      	movs	r3, #0
 8004054:	63bb      	str	r3, [r7, #56]	; 0x38
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8004056:	2300      	movs	r3, #0
 8004058:	63fb      	str	r3, [r7, #60]	; 0x3c
  DMA_Init(DMA2_Stream5, &DMA_InitStructure);
 800405a:	1d3b      	adds	r3, r7, #4
 800405c:	4619      	mov	r1, r3
 800405e:	4806      	ldr	r0, [pc, #24]	; (8004078 <P_VGA_InitDMA+0x80>)
 8004060:	f7fe febc 	bl	8002ddc <DMA_Init>

  // DMA-Timer1 enable
  TIM_DMACmd(TIM1,TIM_DMA_Update,ENABLE);
 8004064:	2201      	movs	r2, #1
 8004066:	f44f 7180 	mov.w	r1, #256	; 0x100
 800406a:	4806      	ldr	r0, [pc, #24]	; (8004084 <P_VGA_InitDMA+0x8c>)
 800406c:	f7ff fbd3 	bl	8003816 <TIM_DMACmd>
}
 8004070:	bf00      	nop
 8004072:	3740      	adds	r7, #64	; 0x40
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}
 8004078:	40026488 	.word	0x40026488
 800407c:	40021015 	.word	0x40021015
 8004080:	20000780 	.word	0x20000780
 8004084:	40010000 	.word	0x40010000

08004088 <TIM2_IRQHandler>:
//
//   CC3-Interrupt    -> starts from DMA
// Watch it.. higher troughput when interrupt flag is left alone
//--------------------------------------------------------------
void TIM2_IRQHandler(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0

  // Interrupt of Timer2 CH3 occurred (for Trigger start)
  TIM_ClearITPendingBit(TIM2, TIM_IT_CC3);
 800408c:	2108      	movs	r1, #8
 800408e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004092:	f7ff fbaf 	bl	80037f4 <TIM_ClearITPendingBit>

  VGA.hsync_cnt++;
 8004096:	4b26      	ldr	r3, [pc, #152]	; (8004130 <TIM2_IRQHandler+0xa8>)
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	3301      	adds	r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	4b24      	ldr	r3, [pc, #144]	; (8004130 <TIM2_IRQHandler+0xa8>)
 80040a0:	801a      	strh	r2, [r3, #0]
  if(VGA.hsync_cnt>=VGA_VSYNC_PERIODE) {
 80040a2:	4b23      	ldr	r3, [pc, #140]	; (8004130 <TIM2_IRQHandler+0xa8>)
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 80040aa:	d905      	bls.n	80040b8 <TIM2_IRQHandler+0x30>
    // -----------
    VGA.hsync_cnt=0;
 80040ac:	4b20      	ldr	r3, [pc, #128]	; (8004130 <TIM2_IRQHandler+0xa8>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr=(uint32_t)(&VGA_RAM1[0]);
 80040b2:	4a20      	ldr	r2, [pc, #128]	; (8004134 <TIM2_IRQHandler+0xac>)
 80040b4:	4b1e      	ldr	r3, [pc, #120]	; (8004130 <TIM2_IRQHandler+0xa8>)
 80040b6:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  if(VGA.hsync_cnt<VGA_VSYNC_IMP) {
 80040b8:	4b1d      	ldr	r3, [pc, #116]	; (8004130 <TIM2_IRQHandler+0xa8>)
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d804      	bhi.n	80040ca <TIM2_IRQHandler+0x42>
    // HSync low
    GPIOB->BSRRH = GPIO_Pin_12;
 80040c0:	4b1d      	ldr	r3, [pc, #116]	; (8004138 <TIM2_IRQHandler+0xb0>)
 80040c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040c6:	835a      	strh	r2, [r3, #26]
 80040c8:	e003      	b.n	80040d2 <TIM2_IRQHandler+0x4a>
  }
  else {
    // HSync High
    GPIOB->BSRRL = GPIO_Pin_12;
 80040ca:	4b1b      	ldr	r3, [pc, #108]	; (8004138 <TIM2_IRQHandler+0xb0>)
 80040cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040d0:	831a      	strh	r2, [r3, #24]
  }

  // Test for DMA start
  if((VGA.hsync_cnt>=VGA_VSYNC_BILD_START) && (VGA.hsync_cnt<=VGA_VSYNC_BILD_STOP)) {
 80040d2:	4b17      	ldr	r3, [pc, #92]	; (8004130 <TIM2_IRQHandler+0xa8>)
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	2b23      	cmp	r3, #35	; 0x23
 80040d8:	d927      	bls.n	800412a <TIM2_IRQHandler+0xa2>
 80040da:	4b15      	ldr	r3, [pc, #84]	; (8004130 <TIM2_IRQHandler+0xa8>)
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	f240 2202 	movw	r2, #514	; 0x202
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d821      	bhi.n	800412a <TIM2_IRQHandler+0xa2>
    // after FP start => DMA Transfer

    // DMA2 init
	DMA2_Stream5->CR=VGA.dma2_cr_reg;
 80040e6:	4a15      	ldr	r2, [pc, #84]	; (800413c <TIM2_IRQHandler+0xb4>)
 80040e8:	4b11      	ldr	r3, [pc, #68]	; (8004130 <TIM2_IRQHandler+0xa8>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR=VGA.start_adr;
 80040ee:	4a13      	ldr	r2, [pc, #76]	; (800413c <TIM2_IRQHandler+0xb4>)
 80040f0:	4b0f      	ldr	r3, [pc, #60]	; (8004130 <TIM2_IRQHandler+0xa8>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1|=TIM_CR1_CEN;
 80040f6:	4a12      	ldr	r2, [pc, #72]	; (8004140 <TIM2_IRQHandler+0xb8>)
 80040f8:	4b11      	ldr	r3, [pc, #68]	; (8004140 <TIM2_IRQHandler+0xb8>)
 80040fa:	881b      	ldrh	r3, [r3, #0]
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	f043 0301 	orr.w	r3, r3, #1
 8004102:	b29b      	uxth	r3, r3
 8004104:	8013      	strh	r3, [r2, #0]
    // DMA2 enable
    DMA2_Stream5->CR|=DMA_SxCR_EN;
 8004106:	4a0d      	ldr	r2, [pc, #52]	; (800413c <TIM2_IRQHandler+0xb4>)
 8004108:	4b0c      	ldr	r3, [pc, #48]	; (800413c <TIM2_IRQHandler+0xb4>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f043 0301 	orr.w	r3, r3, #1
 8004110:	6013      	str	r3, [r2, #0]

    // Test Adrespointer for high
    if((VGA.hsync_cnt & 0x01)!=0) {
 8004112:	4b07      	ldr	r3, [pc, #28]	; (8004130 <TIM2_IRQHandler+0xa8>)
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d005      	beq.n	800412a <TIM2_IRQHandler+0xa2>
      // inc after Hsync
      VGA.start_adr+=(VGA_DISPLAY_X+1);
 800411e:	4b04      	ldr	r3, [pc, #16]	; (8004130 <TIM2_IRQHandler+0xa8>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f203 1341 	addw	r3, r3, #321	; 0x141
 8004126:	4a02      	ldr	r2, [pc, #8]	; (8004130 <TIM2_IRQHandler+0xa8>)
 8004128:	6053      	str	r3, [r2, #4]
    }
  }
}
 800412a:	bf00      	nop
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	200006ec 	.word	0x200006ec
 8004134:	20000780 	.word	0x20000780
 8004138:	40020400 	.word	0x40020400
 800413c:	40026488 	.word	0x40026488
 8004140:	40010000 	.word	0x40010000

08004144 <DMA2_Stream5_IRQHandler>:
//   after TransferCompleteInterrupt -> stop DMA
//
// still a bit buggy
//--------------------------------------------------------------
void DMA2_Stream5_IRQHandler(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	af00      	add	r7, sp, #0
  if(DMA_GetITStatus(DMA2_Stream5, DMA_IT_TCIF5))
 8004148:	490d      	ldr	r1, [pc, #52]	; (8004180 <DMA2_Stream5_IRQHandler+0x3c>)
 800414a:	480e      	ldr	r0, [pc, #56]	; (8004184 <DMA2_Stream5_IRQHandler+0x40>)
 800414c:	f7fe fef4 	bl	8002f38 <DMA_GetITStatus>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d012      	beq.n	800417c <DMA2_Stream5_IRQHandler+0x38>
  {
    // TransferInterruptComplete Interrupt from DMA2
    DMA_ClearITPendingBit(DMA2_Stream5, DMA_IT_TCIF5);
 8004156:	490a      	ldr	r1, [pc, #40]	; (8004180 <DMA2_Stream5_IRQHandler+0x3c>)
 8004158:	480a      	ldr	r0, [pc, #40]	; (8004184 <DMA2_Stream5_IRQHandler+0x40>)
 800415a:	f7fe ff45 	bl	8002fe8 <DMA_ClearITPendingBit>
    // stop after all pixels => DMA Transfer stop

    // Timer1 stop
    TIM1->CR1&=~TIM_CR1_CEN;
 800415e:	4a0a      	ldr	r2, [pc, #40]	; (8004188 <DMA2_Stream5_IRQHandler+0x44>)
 8004160:	4b09      	ldr	r3, [pc, #36]	; (8004188 <DMA2_Stream5_IRQHandler+0x44>)
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	b29b      	uxth	r3, r3
 8004166:	f023 0301 	bic.w	r3, r3, #1
 800416a:	b29b      	uxth	r3, r3
 800416c:	8013      	strh	r3, [r2, #0]
    // DMA2 disable
    DMA2_Stream5->CR=0;
 800416e:	4b05      	ldr	r3, [pc, #20]	; (8004184 <DMA2_Stream5_IRQHandler+0x40>)
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]
    // switch on black
    GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 8004174:	4b05      	ldr	r3, [pc, #20]	; (800418c <DMA2_Stream5_IRQHandler+0x48>)
 8004176:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 800417a:	835a      	strh	r2, [r3, #26]
  }
}
 800417c:	bf00      	nop
 800417e:	bd80      	pop	{r7, pc}
 8004180:	20008800 	.word	0x20008800
 8004184:	40026488 	.word	0x40026488
 8004188:	40010000 	.word	0x40010000
 800418c:	40021000 	.word	0x40021000

08004190 <UART_init>:

char string[100];
int charcounter = 0;

void UART_init(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0

  /* --------------------------- System Clocks Configuration -----------------*/
  /* USART2 clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8004196:	2101      	movs	r1, #1
 8004198:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800419c:	f7ff f8f2 	bl	8003384 <RCC_APB1PeriphClockCmd>

  /* GPIOA clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80041a0:	2101      	movs	r1, #1
 80041a2:	2001      	movs	r0, #1
 80041a4:	f7ff f8ce 	bl	8003344 <RCC_AHB1PeriphClockCmd>

  GPIO_InitTypeDef GPIO_InitStructure;

  /*-------------------------- GPIO Configuration ----------------------------*/
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 80041a8:	230c      	movs	r3, #12
 80041aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80041ac:	2302      	movs	r3, #2
 80041ae:	753b      	strb	r3, [r7, #20]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80041b0:	2300      	movs	r3, #0
 80041b2:	75bb      	strb	r3, [r7, #22]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80041b4:	2301      	movs	r3, #1
 80041b6:	75fb      	strb	r3, [r7, #23]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80041b8:	2302      	movs	r3, #2
 80041ba:	757b      	strb	r3, [r7, #21]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 80041bc:	f107 0310 	add.w	r3, r7, #16
 80041c0:	4619      	mov	r1, r3
 80041c2:	4816      	ldr	r0, [pc, #88]	; (800421c <UART_init+0x8c>)
 80041c4:	f7fe ff3e 	bl	8003044 <GPIO_Init>

  /* Connect USART pins to AF */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);   // USART2_TX
 80041c8:	2207      	movs	r2, #7
 80041ca:	2102      	movs	r1, #2
 80041cc:	4813      	ldr	r0, [pc, #76]	; (800421c <UART_init+0x8c>)
 80041ce:	f7fe ffc7 	bl	8003160 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);  // USART2_RX
 80041d2:	2207      	movs	r2, #7
 80041d4:	2103      	movs	r1, #3
 80041d6:	4811      	ldr	r0, [pc, #68]	; (800421c <UART_init+0x8c>)
 80041d8:	f7fe ffc2 	bl	8003160 <GPIO_PinAFConfig>
      - One Stop Bit
      - No parity
      - Hardware flow control disabled (RTS and CTS signals)
      - Receive and transmit enabled
*/
USART_InitStructure.USART_BaudRate = 115200;
 80041dc:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80041e0:	603b      	str	r3, [r7, #0]
USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80041e2:	2300      	movs	r3, #0
 80041e4:	80bb      	strh	r3, [r7, #4]
USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80041e6:	2300      	movs	r3, #0
 80041e8:	80fb      	strh	r3, [r7, #6]
USART_InitStructure.USART_Parity = USART_Parity_No;
 80041ea:	2300      	movs	r3, #0
 80041ec:	813b      	strh	r3, [r7, #8]
USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80041ee:	2300      	movs	r3, #0
 80041f0:	81bb      	strh	r3, [r7, #12]

USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80041f2:	230c      	movs	r3, #12
 80041f4:	817b      	strh	r3, [r7, #10]

USART_Init(USART2, &USART_InitStructure);
 80041f6:	463b      	mov	r3, r7
 80041f8:	4619      	mov	r1, r3
 80041fa:	4809      	ldr	r0, [pc, #36]	; (8004220 <UART_init+0x90>)
 80041fc:	f7ff fb30 	bl	8003860 <USART_Init>
USART_ITConfig(USART2,USART_IT_RXNE,ENABLE);
 8004200:	2201      	movs	r2, #1
 8004202:	f240 5125 	movw	r1, #1317	; 0x525
 8004206:	4806      	ldr	r0, [pc, #24]	; (8004220 <UART_init+0x90>)
 8004208:	f7ff fc16 	bl	8003a38 <USART_ITConfig>

USART_Cmd(USART2, ENABLE);
 800420c:	2101      	movs	r1, #1
 800420e:	4804      	ldr	r0, [pc, #16]	; (8004220 <UART_init+0x90>)
 8004210:	f7ff fbe0 	bl	80039d4 <USART_Cmd>

}
 8004214:	bf00      	nop
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	40020000 	.word	0x40020000
 8004220:	40004400 	.word	0x40004400

08004224 <UART_putchar>:

void UART_putchar(char c)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	4603      	mov	r3, r0
 800422c:	71fb      	strb	r3, [r7, #7]
		while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET); // Wait for Empty
 800422e:	bf00      	nop
 8004230:	2180      	movs	r1, #128	; 0x80
 8004232:	4808      	ldr	r0, [pc, #32]	; (8004254 <UART_putchar+0x30>)
 8004234:	f7ff fc48 	bl	8003ac8 <USART_GetFlagStatus>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0f8      	beq.n	8004230 <UART_putchar+0xc>
		USART_SendData(USART2, c);
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	b29b      	uxth	r3, r3
 8004242:	4619      	mov	r1, r3
 8004244:	4803      	ldr	r0, [pc, #12]	; (8004254 <UART_putchar+0x30>)
 8004246:	f7ff fbe5 	bl	8003a14 <USART_SendData>

}
 800424a:	bf00      	nop
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	40004400 	.word	0x40004400

08004258 <UART_puts>:

void UART_puts(char *s)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b084      	sub	sp, #16
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
	volatile unsigned int i;
	for (i=0; s[i]; i++)
 8004260:	2300      	movs	r3, #0
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	e009      	b.n	800427a <UART_puts+0x22>
	{
		UART_putchar(s[i]);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	4413      	add	r3, r2
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff ffd8 	bl	8004224 <UART_putchar>
	for (i=0; s[i]; i++)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	3301      	adds	r3, #1
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	4413      	add	r3, r2
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1ef      	bne.n	8004266 <UART_puts+0xe>
		//while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET); // Wait for Empty
		//USART_SendData(USART2, s[i]);
	}
}
 8004286:	bf00      	nop
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
	...

08004290 <USART2_IRQHandler>:
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
}

void USART2_IRQHandler(void)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
	// check if the USART2 receive interrupt flag was set
	if( USART_GetITStatus(USART2, USART_IT_RXNE))
 8004296:	f240 5125 	movw	r1, #1317	; 0x525
 800429a:	4827      	ldr	r0, [pc, #156]	; (8004338 <USART2_IRQHandler+0xa8>)
 800429c:	f7ff fc30 	bl	8003b00 <USART_GetITStatus>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d044      	beq.n	8004330 <USART2_IRQHandler+0xa0>
	{
		USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 80042a6:	f240 5125 	movw	r1, #1317	; 0x525
 80042aa:	4823      	ldr	r0, [pc, #140]	; (8004338 <USART2_IRQHandler+0xa8>)
 80042ac:	f7ff fc83 	bl	8003bb6 <USART_ClearITPendingBit>
		int i;
		char c = USART2->DR & 0xFF;
 80042b0:	4b21      	ldr	r3, [pc, #132]	; (8004338 <USART2_IRQHandler+0xa8>)
 80042b2:	889b      	ldrh	r3, [r3, #4]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	70fb      	strb	r3, [r7, #3]
//		LCD_XY(10,1);
//		LCD_put("UART:   ");
//		LCD_XY(15,1);
//		LCD_putchar(c);

		if(c > 64 && c < 91)
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	2b40      	cmp	r3, #64	; 0x40
 80042bc:	d905      	bls.n	80042ca <USART2_IRQHandler+0x3a>
 80042be:	78fb      	ldrb	r3, [r7, #3]
 80042c0:	2b5a      	cmp	r3, #90	; 0x5a
 80042c2:	d802      	bhi.n	80042ca <USART2_IRQHandler+0x3a>
			c += 32;
 80042c4:	78fb      	ldrb	r3, [r7, #3]
 80042c6:	3320      	adds	r3, #32
 80042c8:	70fb      	strb	r3, [r7, #3]
		if(c <= 13)
 80042ca:	78fb      	ldrb	r3, [r7, #3]
 80042cc:	2b0d      	cmp	r3, #13
 80042ce:	d81d      	bhi.n	800430c <USART2_IRQHandler+0x7c>
		{
			for(i=0;i<charcounter;i++)
 80042d0:	2300      	movs	r3, #0
 80042d2:	607b      	str	r3, [r7, #4]
 80042d4:	e00b      	b.n	80042ee <USART2_IRQHandler+0x5e>
			{
				USART_SendData(USART2, string[i]); // Echo Char
 80042d6:	4a19      	ldr	r2, [pc, #100]	; (800433c <USART2_IRQHandler+0xac>)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4413      	add	r3, r2
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	b29b      	uxth	r3, r3
 80042e0:	4619      	mov	r1, r3
 80042e2:	4815      	ldr	r0, [pc, #84]	; (8004338 <USART2_IRQHandler+0xa8>)
 80042e4:	f7ff fb96 	bl	8003a14 <USART_SendData>
			for(i=0;i<charcounter;i++)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	3301      	adds	r3, #1
 80042ec:	607b      	str	r3, [r7, #4]
 80042ee:	4b14      	ldr	r3, [pc, #80]	; (8004340 <USART2_IRQHandler+0xb0>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	dbee      	blt.n	80042d6 <USART2_IRQHandler+0x46>
			}
			charcounter = 0;
 80042f8:	4b11      	ldr	r3, [pc, #68]	; (8004340 <USART2_IRQHandler+0xb0>)
 80042fa:	2200      	movs	r2, #0
 80042fc:	601a      	str	r2, [r3, #0]
			USART_SendData(USART2, c); // Echo Char
 80042fe:	78fb      	ldrb	r3, [r7, #3]
 8004300:	b29b      	uxth	r3, r3
 8004302:	4619      	mov	r1, r3
 8004304:	480c      	ldr	r0, [pc, #48]	; (8004338 <USART2_IRQHandler+0xa8>)
 8004306:	f7ff fb85 	bl	8003a14 <USART_SendData>
 800430a:	e009      	b.n	8004320 <USART2_IRQHandler+0x90>
		}
		else
		{
			string[charcounter] = c;
 800430c:	4b0c      	ldr	r3, [pc, #48]	; (8004340 <USART2_IRQHandler+0xb0>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	490a      	ldr	r1, [pc, #40]	; (800433c <USART2_IRQHandler+0xac>)
 8004312:	78fa      	ldrb	r2, [r7, #3]
 8004314:	54ca      	strb	r2, [r1, r3]
			charcounter++;
 8004316:	4b0a      	ldr	r3, [pc, #40]	; (8004340 <USART2_IRQHandler+0xb0>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	3301      	adds	r3, #1
 800431c:	4a08      	ldr	r2, [pc, #32]	; (8004340 <USART2_IRQHandler+0xb0>)
 800431e:	6013      	str	r3, [r2, #0]
		}


		while (USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET); // Wait for Empty
 8004320:	bf00      	nop
 8004322:	2140      	movs	r1, #64	; 0x40
 8004324:	4804      	ldr	r0, [pc, #16]	; (8004338 <USART2_IRQHandler+0xa8>)
 8004326:	f7ff fbcf 	bl	8003ac8 <USART_GetFlagStatus>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d0f8      	beq.n	8004322 <USART2_IRQHandler+0x92>

	}
}
 8004330:	bf00      	nop
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	40004400 	.word	0x40004400
 800433c:	200138a0 	.word	0x200138a0
 8004340:	2000069c 	.word	0x2000069c

08004344 <UART_get>:

// Ontvang een karakter via de UART
// niet echt nodig als routine maar als wrapper voor compatabiliteit. Let op geen -1 als er geen char is ontvangen!

char UART_get(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
    char uart_char = -1;
 800434a:	23ff      	movs	r3, #255	; 0xff
 800434c:	71fb      	strb	r3, [r7, #7]
    if (USART_GetFlagStatus(USART2, USART_FLAG_RXNE)== SET)  // check for data available
 800434e:	2120      	movs	r1, #32
 8004350:	4807      	ldr	r0, [pc, #28]	; (8004370 <UART_get+0x2c>)
 8004352:	f7ff fbb9 	bl	8003ac8 <USART_GetFlagStatus>
 8004356:	4603      	mov	r3, r0
 8004358:	2b01      	cmp	r3, #1
 800435a:	d103      	bne.n	8004364 <UART_get+0x20>
    	 uart_char= USART2->DR & 0xFF; // and read the data from peripheral
 800435c:	4b04      	ldr	r3, [pc, #16]	; (8004370 <UART_get+0x2c>)
 800435e:	889b      	ldrh	r3, [r3, #4]
 8004360:	b29b      	uxth	r3, r3
 8004362:	71fb      	strb	r3, [r7, #7]
    return uart_char;
 8004364:	79fb      	ldrb	r3, [r7, #7]
}
 8004366:	4618      	mov	r0, r3
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	40004400 	.word	0x40004400

08004374 <UART_gets>:
// args: char *readbuffer
//       int   echo, when TRUE, send read-char to UART
// remark: ARM sends -1 if buffer is empty
//         LF is cleared if set in terminal-program
void UART_gets(char *s, int echo)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b082      	sub	sp, #8
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
	while (TRUE)
	{
	 	*s = UART_get();
 800437e:	f7ff ffe1 	bl	8004344 <UART_get>
 8004382:	4603      	mov	r3, r0
 8004384:	461a      	mov	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	701a      	strb	r2, [r3, #0]

	 	if (*s==-1)             // check for data available
	 		continue;

	 	if (*s==0xff || *s==LF) // if no data or LF, continue
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	2bff      	cmp	r3, #255	; 0xff
 8004390:	d00f      	beq.n	80043b2 <UART_gets+0x3e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b0a      	cmp	r3, #10
 8004398:	d00b      	beq.n	80043b2 <UART_gets+0x3e>

//		if (echo)              // if output-flag set
//			UART_putchar(*s);  // to read what u entered


		if (*s==CR)            // if enter pressed
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	2b0d      	cmp	r3, #13
 80043a0:	d103      	bne.n	80043aa <UART_gets+0x36>
		{
			*s = '\0';         // ignore char and close string
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	701a      	strb	r2, [r3, #0]
		    return;            // buf ready, exit loop
 80043a8:	e005      	b.n	80043b6 <UART_gets+0x42>
		}
		s++;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3301      	adds	r3, #1
 80043ae:	607b      	str	r3, [r7, #4]
 80043b0:	e7e5      	b.n	800437e <UART_gets+0xa>
			continue;
 80043b2:	bf00      	nop
	 	*s = UART_get();
 80043b4:	e7e3      	b.n	800437e <UART_gets+0xa>
	}
}
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <main>:
#include "main.h"
#include "includes.h"


int main(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af04      	add	r7, sp, #16
	//  uint32_t n;

	SystemInit(); // System speed to 168MHz
 80043c2:	f000 f883 	bl	80044cc <SystemInit>
	UART_init();
 80043c6:	f7ff fee3 	bl	8004190 <UART_init>
	DELAY_init();
 80043ca:	f7ff fc11 	bl	8003bf0 <DELAY_init>
	UB_VGA_Screen_Init(); // Init VGA-Screen
 80043ce:	f7ff fca3 	bl	8003d18 <UB_VGA_Screen_Init>

	UB_VGA_FillScreen(zwart);
 80043d2:	2000      	movs	r0, #0
 80043d4:	f7ff fce0 	bl	8003d98 <UB_VGA_FillScreen>
	draw_triangle (50,50,100,50,75,25,groen);
 80043d8:	231c      	movs	r3, #28
 80043da:	9302      	str	r3, [sp, #8]
 80043dc:	2319      	movs	r3, #25
 80043de:	9301      	str	r3, [sp, #4]
 80043e0:	234b      	movs	r3, #75	; 0x4b
 80043e2:	9300      	str	r3, [sp, #0]
 80043e4:	2332      	movs	r3, #50	; 0x32
 80043e6:	2264      	movs	r2, #100	; 0x64
 80043e8:	2132      	movs	r1, #50	; 0x32
 80043ea:	2032      	movs	r0, #50	; 0x32
 80043ec:	f7fe fb96 	bl	8002b1c <draw_triangle>
	draw_line(1,1,100,100,3,blauw);
 80043f0:	2303      	movs	r3, #3
 80043f2:	9301      	str	r3, [sp, #4]
 80043f4:	2303      	movs	r3, #3
 80043f6:	9300      	str	r3, [sp, #0]
 80043f8:	2364      	movs	r3, #100	; 0x64
 80043fa:	2264      	movs	r2, #100	; 0x64
 80043fc:	2101      	movs	r1, #1
 80043fe:	2001      	movs	r0, #1
 8004400:	f7fc fbc7 	bl	8000b92 <draw_line>
	draw_rectangle(10,10,100,100,geel);
 8004404:	23fc      	movs	r3, #252	; 0xfc
 8004406:	9300      	str	r3, [sp, #0]
 8004408:	2364      	movs	r3, #100	; 0x64
 800440a:	2264      	movs	r2, #100	; 0x64
 800440c:	210a      	movs	r1, #10
 800440e:	200a      	movs	r0, #10
 8004410:	f7fc fd99 	bl	8000f46 <draw_rectangle>
	*/


	while(1)
	{
		get_data();
 8004414:	f000 f90c 	bl	8004630 <get_data>
 8004418:	e7fc      	b.n	8004414 <main+0x58>
	...

0800441c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800441c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004454 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004420:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004422:	e003      	b.n	800442c <LoopCopyDataInit>

08004424 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004424:	4b0c      	ldr	r3, [pc, #48]	; (8004458 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004426:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004428:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800442a:	3104      	adds	r1, #4

0800442c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800442c:	480b      	ldr	r0, [pc, #44]	; (800445c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800442e:	4b0c      	ldr	r3, [pc, #48]	; (8004460 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004430:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004432:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004434:	d3f6      	bcc.n	8004424 <CopyDataInit>
  ldr  r2, =_sbss
 8004436:	4a0b      	ldr	r2, [pc, #44]	; (8004464 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004438:	e002      	b.n	8004440 <LoopFillZerobss>

0800443a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800443a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800443c:	f842 3b04 	str.w	r3, [r2], #4

08004440 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004440:	4b09      	ldr	r3, [pc, #36]	; (8004468 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004442:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004444:	d3f9      	bcc.n	800443a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004446:	f000 f841 	bl	80044cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800444a:	f000 fed3 	bl	80051f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800444e:	f7ff ffb5 	bl	80043bc <main>
  bx  lr    
 8004452:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004454:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004458:	08008680 	.word	0x08008680
  ldr  r0, =_sdata
 800445c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004460:	20000680 	.word	0x20000680
  ldr  r2, =_sbss
 8004464:	20000680 	.word	0x20000680
  ldr  r3, = _ebss
 8004468:	20013914 	.word	0x20013914

0800446c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800446c:	e7fe      	b.n	800446c <ADC_IRQHandler>

0800446e <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800446e:	b480      	push	{r7}
 8004470:	af00      	add	r7, sp, #0
}
 8004472:	bf00      	nop
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr

0800447c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800447c:	b480      	push	{r7}
 800447e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8004480:	e7fe      	b.n	8004480 <HardFault_Handler+0x4>

08004482 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8004482:	b480      	push	{r7}
 8004484:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8004486:	e7fe      	b.n	8004486 <MemManage_Handler+0x4>

08004488 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800448c:	e7fe      	b.n	800448c <BusFault_Handler+0x4>

0800448e <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800448e:	b480      	push	{r7}
 8004490:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8004492:	e7fe      	b.n	8004492 <UsageFault_Handler+0x4>

08004494 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
}
 8004498:	bf00      	nop
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80044a2:	b480      	push	{r7}
 80044a4:	af00      	add	r7, sp, #0
}
 80044a6:	bf00      	nop
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	af00      	add	r7, sp, #0
}
 80044b4:	bf00      	nop
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80044be:	b480      	push	{r7}
 80044c0:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80044c2:	bf00      	nop
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80044d0:	4a16      	ldr	r2, [pc, #88]	; (800452c <SystemInit+0x60>)
 80044d2:	4b16      	ldr	r3, [pc, #88]	; (800452c <SystemInit+0x60>)
 80044d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80044e0:	4a13      	ldr	r2, [pc, #76]	; (8004530 <SystemInit+0x64>)
 80044e2:	4b13      	ldr	r3, [pc, #76]	; (8004530 <SystemInit+0x64>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f043 0301 	orr.w	r3, r3, #1
 80044ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80044ec:	4b10      	ldr	r3, [pc, #64]	; (8004530 <SystemInit+0x64>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80044f2:	4a0f      	ldr	r2, [pc, #60]	; (8004530 <SystemInit+0x64>)
 80044f4:	4b0e      	ldr	r3, [pc, #56]	; (8004530 <SystemInit+0x64>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80044fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004500:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004502:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <SystemInit+0x64>)
 8004504:	4a0b      	ldr	r2, [pc, #44]	; (8004534 <SystemInit+0x68>)
 8004506:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004508:	4a09      	ldr	r2, [pc, #36]	; (8004530 <SystemInit+0x64>)
 800450a:	4b09      	ldr	r3, [pc, #36]	; (8004530 <SystemInit+0x64>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004512:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004514:	4b06      	ldr	r3, [pc, #24]	; (8004530 <SystemInit+0x64>)
 8004516:	2200      	movs	r2, #0
 8004518:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800451a:	f000 f80d 	bl	8004538 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800451e:	4b03      	ldr	r3, [pc, #12]	; (800452c <SystemInit+0x60>)
 8004520:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004524:	609a      	str	r2, [r3, #8]
#endif
}
 8004526:	bf00      	nop
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	e000ed00 	.word	0xe000ed00
 8004530:	40023800 	.word	0x40023800
 8004534:	24003010 	.word	0x24003010

08004538 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800453e:	2300      	movs	r3, #0
 8004540:	607b      	str	r3, [r7, #4]
 8004542:	2300      	movs	r3, #0
 8004544:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8004546:	4a36      	ldr	r2, [pc, #216]	; (8004620 <SetSysClock+0xe8>)
 8004548:	4b35      	ldr	r3, [pc, #212]	; (8004620 <SetSysClock+0xe8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004550:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8004552:	4b33      	ldr	r3, [pc, #204]	; (8004620 <SetSysClock+0xe8>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3301      	adds	r3, #1
 8004560:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d103      	bne.n	8004570 <SetSysClock+0x38>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800456e:	d1f0      	bne.n	8004552 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8004570:	4b2b      	ldr	r3, [pc, #172]	; (8004620 <SetSysClock+0xe8>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004578:	2b00      	cmp	r3, #0
 800457a:	d002      	beq.n	8004582 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800457c:	2301      	movs	r3, #1
 800457e:	603b      	str	r3, [r7, #0]
 8004580:	e001      	b.n	8004586 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8004582:	2300      	movs	r3, #0
 8004584:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d142      	bne.n	8004612 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800458c:	4a24      	ldr	r2, [pc, #144]	; (8004620 <SetSysClock+0xe8>)
 800458e:	4b24      	ldr	r3, [pc, #144]	; (8004620 <SetSysClock+0xe8>)
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004596:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8004598:	4a22      	ldr	r2, [pc, #136]	; (8004624 <SetSysClock+0xec>)
 800459a:	4b22      	ldr	r3, [pc, #136]	; (8004624 <SetSysClock+0xec>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045a2:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80045a4:	4a1e      	ldr	r2, [pc, #120]	; (8004620 <SetSysClock+0xe8>)
 80045a6:	4b1e      	ldr	r3, [pc, #120]	; (8004620 <SetSysClock+0xe8>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80045ac:	4a1c      	ldr	r2, [pc, #112]	; (8004620 <SetSysClock+0xe8>)
 80045ae:	4b1c      	ldr	r3, [pc, #112]	; (8004620 <SetSysClock+0xe8>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045b6:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80045b8:	4a19      	ldr	r2, [pc, #100]	; (8004620 <SetSysClock+0xe8>)
 80045ba:	4b19      	ldr	r3, [pc, #100]	; (8004620 <SetSysClock+0xe8>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80045c2:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80045c4:	4b16      	ldr	r3, [pc, #88]	; (8004620 <SetSysClock+0xe8>)
 80045c6:	4a18      	ldr	r2, [pc, #96]	; (8004628 <SetSysClock+0xf0>)
 80045c8:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80045ca:	4a15      	ldr	r2, [pc, #84]	; (8004620 <SetSysClock+0xe8>)
 80045cc:	4b14      	ldr	r3, [pc, #80]	; (8004620 <SetSysClock+0xe8>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045d4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80045d6:	bf00      	nop
 80045d8:	4b11      	ldr	r3, [pc, #68]	; (8004620 <SetSysClock+0xe8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0f9      	beq.n	80045d8 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80045e4:	4b11      	ldr	r3, [pc, #68]	; (800462c <SetSysClock+0xf4>)
 80045e6:	f240 7205 	movw	r2, #1797	; 0x705
 80045ea:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80045ec:	4a0c      	ldr	r2, [pc, #48]	; (8004620 <SetSysClock+0xe8>)
 80045ee:	4b0c      	ldr	r3, [pc, #48]	; (8004620 <SetSysClock+0xe8>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f023 0303 	bic.w	r3, r3, #3
 80045f6:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80045f8:	4a09      	ldr	r2, [pc, #36]	; (8004620 <SetSysClock+0xe8>)
 80045fa:	4b09      	ldr	r3, [pc, #36]	; (8004620 <SetSysClock+0xe8>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f043 0302 	orr.w	r3, r3, #2
 8004602:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8004604:	bf00      	nop
 8004606:	4b06      	ldr	r3, [pc, #24]	; (8004620 <SetSysClock+0xe8>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 030c 	and.w	r3, r3, #12
 800460e:	2b08      	cmp	r3, #8
 8004610:	d1f9      	bne.n	8004606 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8004612:	bf00      	nop
 8004614:	370c      	adds	r7, #12
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	40023800 	.word	0x40023800
 8004624:	40007000 	.word	0x40007000
 8004628:	07405419 	.word	0x07405419
 800462c:	40023c00 	.word	0x40023c00

08004630 <get_data>:
int color(char *color_input);



void get_data() //krijg je hier geen argumenten binnen?
{
 8004630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004634:	b086      	sub	sp, #24
 8004636:	af04      	add	r7, sp, #16
	int fill=0;
 8004638:	2300      	movs	r3, #0
 800463a:	607b      	str	r3, [r7, #4]

	UART_gets(parameters,TRUE);
 800463c:	2101      	movs	r1, #1
 800463e:	48a7      	ldr	r0, [pc, #668]	; (80048dc <get_data+0x2ac>)
 8004640:	f7ff fe98 	bl	8004374 <UART_gets>
	UART_puts("input = "); UART_puts(parameters); UART_puts("\r");
 8004644:	48a6      	ldr	r0, [pc, #664]	; (80048e0 <get_data+0x2b0>)
 8004646:	f7ff fe07 	bl	8004258 <UART_puts>
 800464a:	48a4      	ldr	r0, [pc, #656]	; (80048dc <get_data+0x2ac>)
 800464c:	f7ff fe04 	bl	8004258 <UART_puts>
 8004650:	48a4      	ldr	r0, [pc, #656]	; (80048e4 <get_data+0x2b4>)
 8004652:	f7ff fe01 	bl	8004258 <UART_puts>
	token = strtok (parameters,",");
 8004656:	49a4      	ldr	r1, [pc, #656]	; (80048e8 <get_data+0x2b8>)
 8004658:	48a0      	ldr	r0, [pc, #640]	; (80048dc <get_data+0x2ac>)
 800465a:	f000 fe0b 	bl	8005274 <strtok>
 800465e:	4602      	mov	r2, r0
 8004660:	4ba2      	ldr	r3, [pc, #648]	; (80048ec <get_data+0x2bc>)
 8004662:	601a      	str	r2, [r3, #0]
	strcpy(functions,token);
 8004664:	4ba1      	ldr	r3, [pc, #644]	; (80048ec <get_data+0x2bc>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4619      	mov	r1, r3
 800466a:	48a1      	ldr	r0, [pc, #644]	; (80048f0 <get_data+0x2c0>)
 800466c:	f000 fdf9 	bl	8005262 <strcpy>

	if(strcmp(functions, "clearscherm")==0)
 8004670:	49a0      	ldr	r1, [pc, #640]	; (80048f4 <get_data+0x2c4>)
 8004672:	489f      	ldr	r0, [pc, #636]	; (80048f0 <get_data+0x2c0>)
 8004674:	f7fb fda8 	bl	80001c8 <strcmp>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d132      	bne.n	80046e4 <get_data+0xb4>
	{
		fill=0;
 800467e:	2300      	movs	r3, #0
 8004680:	607b      	str	r3, [r7, #4]
		UART_puts("clearscherm\r");
 8004682:	489d      	ldr	r0, [pc, #628]	; (80048f8 <get_data+0x2c8>)
 8004684:	f7ff fde8 	bl	8004258 <UART_puts>
		while(token != NULL)
 8004688:	e01d      	b.n	80046c6 <get_data+0x96>
		{
		  switch(fill)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d002      	beq.n	8004696 <get_data+0x66>
 8004690:	2b01      	cmp	r3, #1
 8004692:	d007      	beq.n	80046a4 <get_data+0x74>
 8004694:	e00d      	b.n	80046b2 <get_data+0x82>
		  {
			case 0:
			  strcpy(functions,token);
 8004696:	4b95      	ldr	r3, [pc, #596]	; (80048ec <get_data+0x2bc>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4619      	mov	r1, r3
 800469c:	4894      	ldr	r0, [pc, #592]	; (80048f0 <get_data+0x2c0>)
 800469e:	f000 fde0 	bl	8005262 <strcpy>
			  break;
 80046a2:	e006      	b.n	80046b2 <get_data+0x82>
			case 1:
			  strcpy(clearscrn_args.color,token);
 80046a4:	4b91      	ldr	r3, [pc, #580]	; (80048ec <get_data+0x2bc>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4619      	mov	r1, r3
 80046aa:	4894      	ldr	r0, [pc, #592]	; (80048fc <get_data+0x2cc>)
 80046ac:	f000 fdd9 	bl	8005262 <strcpy>
			  break;
 80046b0:	bf00      	nop
		  }
		  fill++;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3301      	adds	r3, #1
 80046b6:	607b      	str	r3, [r7, #4]
		  token = strtok (NULL, ",");
 80046b8:	498b      	ldr	r1, [pc, #556]	; (80048e8 <get_data+0x2b8>)
 80046ba:	2000      	movs	r0, #0
 80046bc:	f000 fdda 	bl	8005274 <strtok>
 80046c0:	4602      	mov	r2, r0
 80046c2:	4b8a      	ldr	r3, [pc, #552]	; (80048ec <get_data+0x2bc>)
 80046c4:	601a      	str	r2, [r3, #0]
		while(token != NULL)
 80046c6:	4b89      	ldr	r3, [pc, #548]	; (80048ec <get_data+0x2bc>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1dd      	bne.n	800468a <get_data+0x5a>
		}
//	    clearscreen(color(clearscrn_args.color));
		UART_puts("color = "); UART_puts(clearscrn_args.color); UART_puts("\r");
 80046ce:	488c      	ldr	r0, [pc, #560]	; (8004900 <get_data+0x2d0>)
 80046d0:	f7ff fdc2 	bl	8004258 <UART_puts>
 80046d4:	4889      	ldr	r0, [pc, #548]	; (80048fc <get_data+0x2cc>)
 80046d6:	f7ff fdbf 	bl	8004258 <UART_puts>
 80046da:	4882      	ldr	r0, [pc, #520]	; (80048e4 <get_data+0x2b4>)
 80046dc:	f7ff fdbc 	bl	8004258 <UART_puts>
		}
//    	wait_ms(atoi(wait_args.time_ms));
		UART_puts("time_ms = "); UART_puts(wait_args.time_ms); UART_puts("\r");
	}

}
 80046e0:	f000 bcad 	b.w	800503e <get_data+0xa0e>
	else if(strcmp(functions, "lijn")==0)
 80046e4:	4987      	ldr	r1, [pc, #540]	; (8004904 <get_data+0x2d4>)
 80046e6:	4882      	ldr	r0, [pc, #520]	; (80048f0 <get_data+0x2c0>)
 80046e8:	f7fb fd6e 	bl	80001c8 <strcmp>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f040 80b0 	bne.w	8004854 <get_data+0x224>
		fill=0;
 80046f4:	2300      	movs	r3, #0
 80046f6:	607b      	str	r3, [r7, #4]
		UART_puts("lijn\r");
 80046f8:	4883      	ldr	r0, [pc, #524]	; (8004908 <get_data+0x2d8>)
 80046fa:	f7ff fdad 	bl	8004258 <UART_puts>
		while(token!= NULL)
 80046fe:	e04e      	b.n	800479e <get_data+0x16e>
			switch(fill)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b06      	cmp	r3, #6
 8004704:	d841      	bhi.n	800478a <get_data+0x15a>
 8004706:	a201      	add	r2, pc, #4	; (adr r2, 800470c <get_data+0xdc>)
 8004708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470c:	08004729 	.word	0x08004729
 8004710:	08004737 	.word	0x08004737
 8004714:	08004745 	.word	0x08004745
 8004718:	08004753 	.word	0x08004753
 800471c:	08004761 	.word	0x08004761
 8004720:	0800476f 	.word	0x0800476f
 8004724:	0800477d 	.word	0x0800477d
					strcpy(functions,token);
 8004728:	4b70      	ldr	r3, [pc, #448]	; (80048ec <get_data+0x2bc>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4619      	mov	r1, r3
 800472e:	4870      	ldr	r0, [pc, #448]	; (80048f0 <get_data+0x2c0>)
 8004730:	f000 fd97 	bl	8005262 <strcpy>
					break;
 8004734:	e029      	b.n	800478a <get_data+0x15a>
					strcpy(line_args.x1,token);
 8004736:	4b6d      	ldr	r3, [pc, #436]	; (80048ec <get_data+0x2bc>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4619      	mov	r1, r3
 800473c:	4873      	ldr	r0, [pc, #460]	; (800490c <get_data+0x2dc>)
 800473e:	f000 fd90 	bl	8005262 <strcpy>
					break;
 8004742:	e022      	b.n	800478a <get_data+0x15a>
					strcpy(line_args.y1,token);
 8004744:	4b69      	ldr	r3, [pc, #420]	; (80048ec <get_data+0x2bc>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4619      	mov	r1, r3
 800474a:	4871      	ldr	r0, [pc, #452]	; (8004910 <get_data+0x2e0>)
 800474c:	f000 fd89 	bl	8005262 <strcpy>
					break;
 8004750:	e01b      	b.n	800478a <get_data+0x15a>
					strcpy(line_args.x2,token);
 8004752:	4b66      	ldr	r3, [pc, #408]	; (80048ec <get_data+0x2bc>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4619      	mov	r1, r3
 8004758:	486e      	ldr	r0, [pc, #440]	; (8004914 <get_data+0x2e4>)
 800475a:	f000 fd82 	bl	8005262 <strcpy>
					break;
 800475e:	e014      	b.n	800478a <get_data+0x15a>
					strcpy(line_args.y2,token);
 8004760:	4b62      	ldr	r3, [pc, #392]	; (80048ec <get_data+0x2bc>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4619      	mov	r1, r3
 8004766:	486c      	ldr	r0, [pc, #432]	; (8004918 <get_data+0x2e8>)
 8004768:	f000 fd7b 	bl	8005262 <strcpy>
					break;
 800476c:	e00d      	b.n	800478a <get_data+0x15a>
					strcpy(line_args.thickness,token);
 800476e:	4b5f      	ldr	r3, [pc, #380]	; (80048ec <get_data+0x2bc>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4619      	mov	r1, r3
 8004774:	4869      	ldr	r0, [pc, #420]	; (800491c <get_data+0x2ec>)
 8004776:	f000 fd74 	bl	8005262 <strcpy>
					break;
 800477a:	e006      	b.n	800478a <get_data+0x15a>
					strcpy(line_args.color,token);
 800477c:	4b5b      	ldr	r3, [pc, #364]	; (80048ec <get_data+0x2bc>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4619      	mov	r1, r3
 8004782:	4867      	ldr	r0, [pc, #412]	; (8004920 <get_data+0x2f0>)
 8004784:	f000 fd6d 	bl	8005262 <strcpy>
					break;
 8004788:	bf00      	nop
			fill++;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	3301      	adds	r3, #1
 800478e:	607b      	str	r3, [r7, #4]
			token = strtok (NULL, ",");
 8004790:	4955      	ldr	r1, [pc, #340]	; (80048e8 <get_data+0x2b8>)
 8004792:	2000      	movs	r0, #0
 8004794:	f000 fd6e 	bl	8005274 <strtok>
 8004798:	4602      	mov	r2, r0
 800479a:	4b54      	ldr	r3, [pc, #336]	; (80048ec <get_data+0x2bc>)
 800479c:	601a      	str	r2, [r3, #0]
		while(token!= NULL)
 800479e:	4b53      	ldr	r3, [pc, #332]	; (80048ec <get_data+0x2bc>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1ac      	bne.n	8004700 <get_data+0xd0>
		draw_line(atoi(line_args.x1),atoi(line_args.y1),atoi(line_args.x2),atoi(line_args.y2),atoi(line_args.thickness),color(line_args.color));
 80047a6:	4859      	ldr	r0, [pc, #356]	; (800490c <get_data+0x2dc>)
 80047a8:	f000 fd20 	bl	80051ec <atoi>
 80047ac:	4605      	mov	r5, r0
 80047ae:	4858      	ldr	r0, [pc, #352]	; (8004910 <get_data+0x2e0>)
 80047b0:	f000 fd1c 	bl	80051ec <atoi>
 80047b4:	4606      	mov	r6, r0
 80047b6:	4857      	ldr	r0, [pc, #348]	; (8004914 <get_data+0x2e4>)
 80047b8:	f000 fd18 	bl	80051ec <atoi>
 80047bc:	4680      	mov	r8, r0
 80047be:	4856      	ldr	r0, [pc, #344]	; (8004918 <get_data+0x2e8>)
 80047c0:	f000 fd14 	bl	80051ec <atoi>
 80047c4:	4681      	mov	r9, r0
 80047c6:	4855      	ldr	r0, [pc, #340]	; (800491c <get_data+0x2ec>)
 80047c8:	f000 fd10 	bl	80051ec <atoi>
 80047cc:	4604      	mov	r4, r0
 80047ce:	4854      	ldr	r0, [pc, #336]	; (8004920 <get_data+0x2f0>)
 80047d0:	f000 fc46 	bl	8005060 <color>
 80047d4:	4603      	mov	r3, r0
 80047d6:	9301      	str	r3, [sp, #4]
 80047d8:	9400      	str	r4, [sp, #0]
 80047da:	464b      	mov	r3, r9
 80047dc:	4642      	mov	r2, r8
 80047de:	4631      	mov	r1, r6
 80047e0:	4628      	mov	r0, r5
 80047e2:	f7fc f9d6 	bl	8000b92 <draw_line>
		UART_puts("x1 = "); UART_puts(line_args.x1); UART_puts("\r");
 80047e6:	484f      	ldr	r0, [pc, #316]	; (8004924 <get_data+0x2f4>)
 80047e8:	f7ff fd36 	bl	8004258 <UART_puts>
 80047ec:	4847      	ldr	r0, [pc, #284]	; (800490c <get_data+0x2dc>)
 80047ee:	f7ff fd33 	bl	8004258 <UART_puts>
 80047f2:	483c      	ldr	r0, [pc, #240]	; (80048e4 <get_data+0x2b4>)
 80047f4:	f7ff fd30 	bl	8004258 <UART_puts>
		UART_puts("y1 = "); UART_puts(line_args.y1); UART_puts("\r");
 80047f8:	484b      	ldr	r0, [pc, #300]	; (8004928 <get_data+0x2f8>)
 80047fa:	f7ff fd2d 	bl	8004258 <UART_puts>
 80047fe:	4844      	ldr	r0, [pc, #272]	; (8004910 <get_data+0x2e0>)
 8004800:	f7ff fd2a 	bl	8004258 <UART_puts>
 8004804:	4837      	ldr	r0, [pc, #220]	; (80048e4 <get_data+0x2b4>)
 8004806:	f7ff fd27 	bl	8004258 <UART_puts>
		UART_puts("x2 = "); UART_puts(line_args.x2); UART_puts("\r");
 800480a:	4848      	ldr	r0, [pc, #288]	; (800492c <get_data+0x2fc>)
 800480c:	f7ff fd24 	bl	8004258 <UART_puts>
 8004810:	4840      	ldr	r0, [pc, #256]	; (8004914 <get_data+0x2e4>)
 8004812:	f7ff fd21 	bl	8004258 <UART_puts>
 8004816:	4833      	ldr	r0, [pc, #204]	; (80048e4 <get_data+0x2b4>)
 8004818:	f7ff fd1e 	bl	8004258 <UART_puts>
		UART_puts("y2 = "); UART_puts(line_args.y2); UART_puts("\r");
 800481c:	4844      	ldr	r0, [pc, #272]	; (8004930 <get_data+0x300>)
 800481e:	f7ff fd1b 	bl	8004258 <UART_puts>
 8004822:	483d      	ldr	r0, [pc, #244]	; (8004918 <get_data+0x2e8>)
 8004824:	f7ff fd18 	bl	8004258 <UART_puts>
 8004828:	482e      	ldr	r0, [pc, #184]	; (80048e4 <get_data+0x2b4>)
 800482a:	f7ff fd15 	bl	8004258 <UART_puts>
		UART_puts("thickness = "); UART_puts(line_args.thickness); UART_puts("\r");
 800482e:	4841      	ldr	r0, [pc, #260]	; (8004934 <get_data+0x304>)
 8004830:	f7ff fd12 	bl	8004258 <UART_puts>
 8004834:	4839      	ldr	r0, [pc, #228]	; (800491c <get_data+0x2ec>)
 8004836:	f7ff fd0f 	bl	8004258 <UART_puts>
 800483a:	482a      	ldr	r0, [pc, #168]	; (80048e4 <get_data+0x2b4>)
 800483c:	f7ff fd0c 	bl	8004258 <UART_puts>
		UART_puts("color = "); UART_puts(line_args.color); UART_puts("\r");
 8004840:	482f      	ldr	r0, [pc, #188]	; (8004900 <get_data+0x2d0>)
 8004842:	f7ff fd09 	bl	8004258 <UART_puts>
 8004846:	4836      	ldr	r0, [pc, #216]	; (8004920 <get_data+0x2f0>)
 8004848:	f7ff fd06 	bl	8004258 <UART_puts>
 800484c:	4825      	ldr	r0, [pc, #148]	; (80048e4 <get_data+0x2b4>)
 800484e:	f7ff fd03 	bl	8004258 <UART_puts>
}
 8004852:	e3f4      	b.n	800503e <get_data+0xa0e>
	else if(strcmp(functions, "ellips")==0)
 8004854:	4938      	ldr	r1, [pc, #224]	; (8004938 <get_data+0x308>)
 8004856:	4826      	ldr	r0, [pc, #152]	; (80048f0 <get_data+0x2c0>)
 8004858:	f7fb fcb6 	bl	80001c8 <strcmp>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	f040 80d5 	bne.w	8004a0e <get_data+0x3de>
		fill=0;
 8004864:	2300      	movs	r3, #0
 8004866:	607b      	str	r3, [r7, #4]
		UART_puts("ellips\r");
 8004868:	4834      	ldr	r0, [pc, #208]	; (800493c <get_data+0x30c>)
 800486a:	f7ff fcf5 	bl	8004258 <UART_puts>
		while(token != NULL)
 800486e:	e080      	b.n	8004972 <get_data+0x342>
			switch(fill)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b05      	cmp	r3, #5
 8004874:	d873      	bhi.n	800495e <get_data+0x32e>
 8004876:	a201      	add	r2, pc, #4	; (adr r2, 800487c <get_data+0x24c>)
 8004878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487c:	08004895 	.word	0x08004895
 8004880:	080048a3 	.word	0x080048a3
 8004884:	080048b1 	.word	0x080048b1
 8004888:	080048bf 	.word	0x080048bf
 800488c:	080048cd 	.word	0x080048cd
 8004890:	08004951 	.word	0x08004951
					strcpy(functions,token);
 8004894:	4b15      	ldr	r3, [pc, #84]	; (80048ec <get_data+0x2bc>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4619      	mov	r1, r3
 800489a:	4815      	ldr	r0, [pc, #84]	; (80048f0 <get_data+0x2c0>)
 800489c:	f000 fce1 	bl	8005262 <strcpy>
					break;
 80048a0:	e05d      	b.n	800495e <get_data+0x32e>
					strcpy(ellips_args.x_center,token);
 80048a2:	4b12      	ldr	r3, [pc, #72]	; (80048ec <get_data+0x2bc>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4619      	mov	r1, r3
 80048a8:	4825      	ldr	r0, [pc, #148]	; (8004940 <get_data+0x310>)
 80048aa:	f000 fcda 	bl	8005262 <strcpy>
					break;
 80048ae:	e056      	b.n	800495e <get_data+0x32e>
					strcpy(ellips_args.y_center,token);
 80048b0:	4b0e      	ldr	r3, [pc, #56]	; (80048ec <get_data+0x2bc>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4619      	mov	r1, r3
 80048b6:	4823      	ldr	r0, [pc, #140]	; (8004944 <get_data+0x314>)
 80048b8:	f000 fcd3 	bl	8005262 <strcpy>
					break;
 80048bc:	e04f      	b.n	800495e <get_data+0x32e>
					strcpy(ellips_args.x_rad,token);
 80048be:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <get_data+0x2bc>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4619      	mov	r1, r3
 80048c4:	4820      	ldr	r0, [pc, #128]	; (8004948 <get_data+0x318>)
 80048c6:	f000 fccc 	bl	8005262 <strcpy>
					break;
 80048ca:	e048      	b.n	800495e <get_data+0x32e>
					strcpy(ellips_args.y_rad,token);
 80048cc:	4b07      	ldr	r3, [pc, #28]	; (80048ec <get_data+0x2bc>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4619      	mov	r1, r3
 80048d2:	481e      	ldr	r0, [pc, #120]	; (800494c <get_data+0x31c>)
 80048d4:	f000 fcc5 	bl	8005262 <strcpy>
					break;
 80048d8:	e041      	b.n	800495e <get_data+0x32e>
 80048da:	bf00      	nop
 80048dc:	20013580 	.word	0x20013580
 80048e0:	0800837c 	.word	0x0800837c
 80048e4:	08008388 	.word	0x08008388
 80048e8:	0800838c 	.word	0x0800838c
 80048ec:	2001388c 	.word	0x2001388c
 80048f0:	200006d8 	.word	0x200006d8
 80048f4:	08008390 	.word	0x08008390
 80048f8:	0800839c 	.word	0x0800839c
 80048fc:	2000076b 	.word	0x2000076b
 8004900:	080083ac 	.word	0x080083ac
 8004904:	080083b8 	.word	0x080083b8
 8004908:	080083c0 	.word	0x080083c0
 800490c:	200135e4 	.word	0x200135e4
 8004910:	200135e9 	.word	0x200135e9
 8004914:	200135ee 	.word	0x200135ee
 8004918:	200135f3 	.word	0x200135f3
 800491c:	20013616 	.word	0x20013616
 8004920:	20013657 	.word	0x20013657
 8004924:	080083c8 	.word	0x080083c8
 8004928:	080083d0 	.word	0x080083d0
 800492c:	080083d8 	.word	0x080083d8
 8004930:	080083e0 	.word	0x080083e0
 8004934:	080083e8 	.word	0x080083e8
 8004938:	080083f8 	.word	0x080083f8
 800493c:	08008400 	.word	0x08008400
 8004940:	20013822 	.word	0x20013822
 8004944:	20013827 	.word	0x20013827
 8004948:	2001382c 	.word	0x2001382c
 800494c:	20013831 	.word	0x20013831
					strcpy(ellips_args.color,token);
 8004950:	4bab      	ldr	r3, [pc, #684]	; (8004c00 <get_data+0x5d0>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4619      	mov	r1, r3
 8004956:	48ab      	ldr	r0, [pc, #684]	; (8004c04 <get_data+0x5d4>)
 8004958:	f000 fc83 	bl	8005262 <strcpy>
					break;
 800495c:	bf00      	nop
			fill++;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3301      	adds	r3, #1
 8004962:	607b      	str	r3, [r7, #4]
			token = strtok (NULL, ",");
 8004964:	49a8      	ldr	r1, [pc, #672]	; (8004c08 <get_data+0x5d8>)
 8004966:	2000      	movs	r0, #0
 8004968:	f000 fc84 	bl	8005274 <strtok>
 800496c:	4602      	mov	r2, r0
 800496e:	4ba4      	ldr	r3, [pc, #656]	; (8004c00 <get_data+0x5d0>)
 8004970:	601a      	str	r2, [r3, #0]
		while(token != NULL)
 8004972:	4ba3      	ldr	r3, [pc, #652]	; (8004c00 <get_data+0x5d0>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	f47f af7a 	bne.w	8004870 <get_data+0x240>
		draw_ellips(atoi(ellips_args.x_center),atoi(ellips_args.y_center),atoi(ellips_args.x_rad),atoi(ellips_args.y_rad),color(ellips_args.color));
 800497c:	48a3      	ldr	r0, [pc, #652]	; (8004c0c <get_data+0x5dc>)
 800497e:	f000 fc35 	bl	80051ec <atoi>
 8004982:	4604      	mov	r4, r0
 8004984:	48a2      	ldr	r0, [pc, #648]	; (8004c10 <get_data+0x5e0>)
 8004986:	f000 fc31 	bl	80051ec <atoi>
 800498a:	4605      	mov	r5, r0
 800498c:	48a1      	ldr	r0, [pc, #644]	; (8004c14 <get_data+0x5e4>)
 800498e:	f000 fc2d 	bl	80051ec <atoi>
 8004992:	4606      	mov	r6, r0
 8004994:	48a0      	ldr	r0, [pc, #640]	; (8004c18 <get_data+0x5e8>)
 8004996:	f000 fc29 	bl	80051ec <atoi>
 800499a:	4680      	mov	r8, r0
 800499c:	4899      	ldr	r0, [pc, #612]	; (8004c04 <get_data+0x5d4>)
 800499e:	f000 fb5f 	bl	8005060 <color>
 80049a2:	4603      	mov	r3, r0
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	4643      	mov	r3, r8
 80049a8:	4632      	mov	r2, r6
 80049aa:	4629      	mov	r1, r5
 80049ac:	4620      	mov	r0, r4
 80049ae:	f7fc f89d 	bl	8000aec <draw_ellips>
		UART_puts("x_center = "); UART_puts(ellips_args.x_center); UART_puts("\r");
 80049b2:	489a      	ldr	r0, [pc, #616]	; (8004c1c <get_data+0x5ec>)
 80049b4:	f7ff fc50 	bl	8004258 <UART_puts>
 80049b8:	4894      	ldr	r0, [pc, #592]	; (8004c0c <get_data+0x5dc>)
 80049ba:	f7ff fc4d 	bl	8004258 <UART_puts>
 80049be:	4898      	ldr	r0, [pc, #608]	; (8004c20 <get_data+0x5f0>)
 80049c0:	f7ff fc4a 	bl	8004258 <UART_puts>
		UART_puts("y_center = "); UART_puts(ellips_args.y_center); UART_puts("\r");
 80049c4:	4897      	ldr	r0, [pc, #604]	; (8004c24 <get_data+0x5f4>)
 80049c6:	f7ff fc47 	bl	8004258 <UART_puts>
 80049ca:	4891      	ldr	r0, [pc, #580]	; (8004c10 <get_data+0x5e0>)
 80049cc:	f7ff fc44 	bl	8004258 <UART_puts>
 80049d0:	4893      	ldr	r0, [pc, #588]	; (8004c20 <get_data+0x5f0>)
 80049d2:	f7ff fc41 	bl	8004258 <UART_puts>
		UART_puts("x_rad = "); UART_puts(ellips_args.x_rad); UART_puts("\r");
 80049d6:	4894      	ldr	r0, [pc, #592]	; (8004c28 <get_data+0x5f8>)
 80049d8:	f7ff fc3e 	bl	8004258 <UART_puts>
 80049dc:	488d      	ldr	r0, [pc, #564]	; (8004c14 <get_data+0x5e4>)
 80049de:	f7ff fc3b 	bl	8004258 <UART_puts>
 80049e2:	488f      	ldr	r0, [pc, #572]	; (8004c20 <get_data+0x5f0>)
 80049e4:	f7ff fc38 	bl	8004258 <UART_puts>
		UART_puts("y_rad = "); UART_puts(ellips_args.y_rad); UART_puts("\r");
 80049e8:	4890      	ldr	r0, [pc, #576]	; (8004c2c <get_data+0x5fc>)
 80049ea:	f7ff fc35 	bl	8004258 <UART_puts>
 80049ee:	488a      	ldr	r0, [pc, #552]	; (8004c18 <get_data+0x5e8>)
 80049f0:	f7ff fc32 	bl	8004258 <UART_puts>
 80049f4:	488a      	ldr	r0, [pc, #552]	; (8004c20 <get_data+0x5f0>)
 80049f6:	f7ff fc2f 	bl	8004258 <UART_puts>
		UART_puts("color = "); UART_puts(ellips_args.color); UART_puts("\r");
 80049fa:	488d      	ldr	r0, [pc, #564]	; (8004c30 <get_data+0x600>)
 80049fc:	f7ff fc2c 	bl	8004258 <UART_puts>
 8004a00:	4880      	ldr	r0, [pc, #512]	; (8004c04 <get_data+0x5d4>)
 8004a02:	f7ff fc29 	bl	8004258 <UART_puts>
 8004a06:	4886      	ldr	r0, [pc, #536]	; (8004c20 <get_data+0x5f0>)
 8004a08:	f7ff fc26 	bl	8004258 <UART_puts>
}
 8004a0c:	e317      	b.n	800503e <get_data+0xa0e>
	else if(strcmp(functions, "rechthoek")==0)
 8004a0e:	4989      	ldr	r1, [pc, #548]	; (8004c34 <get_data+0x604>)
 8004a10:	4889      	ldr	r0, [pc, #548]	; (8004c38 <get_data+0x608>)
 8004a12:	f7fb fbd9 	bl	80001c8 <strcmp>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f040 809a 	bne.w	8004b52 <get_data+0x522>
		fill=0;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	607b      	str	r3, [r7, #4]
		UART_puts("rechthoek\r");
 8004a22:	4886      	ldr	r0, [pc, #536]	; (8004c3c <get_data+0x60c>)
 8004a24:	f7ff fc18 	bl	8004258 <UART_puts>
		while(token != NULL)
 8004a28:	e046      	b.n	8004ab8 <get_data+0x488>
			switch(fill)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b05      	cmp	r3, #5
 8004a2e:	d839      	bhi.n	8004aa4 <get_data+0x474>
 8004a30:	a201      	add	r2, pc, #4	; (adr r2, 8004a38 <get_data+0x408>)
 8004a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a36:	bf00      	nop
 8004a38:	08004a51 	.word	0x08004a51
 8004a3c:	08004a5f 	.word	0x08004a5f
 8004a40:	08004a6d 	.word	0x08004a6d
 8004a44:	08004a7b 	.word	0x08004a7b
 8004a48:	08004a89 	.word	0x08004a89
 8004a4c:	08004a97 	.word	0x08004a97
					strcpy(functions,token);
 8004a50:	4b6b      	ldr	r3, [pc, #428]	; (8004c00 <get_data+0x5d0>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4619      	mov	r1, r3
 8004a56:	4878      	ldr	r0, [pc, #480]	; (8004c38 <get_data+0x608>)
 8004a58:	f000 fc03 	bl	8005262 <strcpy>
					break;
 8004a5c:	e022      	b.n	8004aa4 <get_data+0x474>
					strcpy(rectangle_args.x1,token);
 8004a5e:	4b68      	ldr	r3, [pc, #416]	; (8004c00 <get_data+0x5d0>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4619      	mov	r1, r3
 8004a64:	4876      	ldr	r0, [pc, #472]	; (8004c40 <get_data+0x610>)
 8004a66:	f000 fbfc 	bl	8005262 <strcpy>
					break;
 8004a6a:	e01b      	b.n	8004aa4 <get_data+0x474>
					strcpy(rectangle_args.y1,token);
 8004a6c:	4b64      	ldr	r3, [pc, #400]	; (8004c00 <get_data+0x5d0>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4619      	mov	r1, r3
 8004a72:	4874      	ldr	r0, [pc, #464]	; (8004c44 <get_data+0x614>)
 8004a74:	f000 fbf5 	bl	8005262 <strcpy>
					break;
 8004a78:	e014      	b.n	8004aa4 <get_data+0x474>
					strcpy(rectangle_args.x2,token);
 8004a7a:	4b61      	ldr	r3, [pc, #388]	; (8004c00 <get_data+0x5d0>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4619      	mov	r1, r3
 8004a80:	4871      	ldr	r0, [pc, #452]	; (8004c48 <get_data+0x618>)
 8004a82:	f000 fbee 	bl	8005262 <strcpy>
					break;
 8004a86:	e00d      	b.n	8004aa4 <get_data+0x474>
					strcpy(rectangle_args.y2,token);
 8004a88:	4b5d      	ldr	r3, [pc, #372]	; (8004c00 <get_data+0x5d0>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	486f      	ldr	r0, [pc, #444]	; (8004c4c <get_data+0x61c>)
 8004a90:	f000 fbe7 	bl	8005262 <strcpy>
					break;
 8004a94:	e006      	b.n	8004aa4 <get_data+0x474>
					strcpy(rectangle_args.color,token);
 8004a96:	4b5a      	ldr	r3, [pc, #360]	; (8004c00 <get_data+0x5d0>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	486c      	ldr	r0, [pc, #432]	; (8004c50 <get_data+0x620>)
 8004a9e:	f000 fbe0 	bl	8005262 <strcpy>
					break;
 8004aa2:	bf00      	nop
			fill++;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	607b      	str	r3, [r7, #4]
			token = strtok (NULL, ",");
 8004aaa:	4957      	ldr	r1, [pc, #348]	; (8004c08 <get_data+0x5d8>)
 8004aac:	2000      	movs	r0, #0
 8004aae:	f000 fbe1 	bl	8005274 <strtok>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	4b52      	ldr	r3, [pc, #328]	; (8004c00 <get_data+0x5d0>)
 8004ab6:	601a      	str	r2, [r3, #0]
		while(token != NULL)
 8004ab8:	4b51      	ldr	r3, [pc, #324]	; (8004c00 <get_data+0x5d0>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d1b4      	bne.n	8004a2a <get_data+0x3fa>
		draw_rectangle(atoi(rectangle_args.x1),atoi(rectangle_args.y1),atoi(rectangle_args.x2),atoi(rectangle_args.y2),color(rectangle_args.color));
 8004ac0:	485f      	ldr	r0, [pc, #380]	; (8004c40 <get_data+0x610>)
 8004ac2:	f000 fb93 	bl	80051ec <atoi>
 8004ac6:	4604      	mov	r4, r0
 8004ac8:	485e      	ldr	r0, [pc, #376]	; (8004c44 <get_data+0x614>)
 8004aca:	f000 fb8f 	bl	80051ec <atoi>
 8004ace:	4605      	mov	r5, r0
 8004ad0:	485d      	ldr	r0, [pc, #372]	; (8004c48 <get_data+0x618>)
 8004ad2:	f000 fb8b 	bl	80051ec <atoi>
 8004ad6:	4606      	mov	r6, r0
 8004ad8:	485c      	ldr	r0, [pc, #368]	; (8004c4c <get_data+0x61c>)
 8004ada:	f000 fb87 	bl	80051ec <atoi>
 8004ade:	4680      	mov	r8, r0
 8004ae0:	485b      	ldr	r0, [pc, #364]	; (8004c50 <get_data+0x620>)
 8004ae2:	f000 fabd 	bl	8005060 <color>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	4643      	mov	r3, r8
 8004aec:	4632      	mov	r2, r6
 8004aee:	4629      	mov	r1, r5
 8004af0:	4620      	mov	r0, r4
 8004af2:	f7fc fa28 	bl	8000f46 <draw_rectangle>
		UART_puts("x1 = "); UART_puts(rectangle_args.x1); UART_puts("\r");
 8004af6:	4857      	ldr	r0, [pc, #348]	; (8004c54 <get_data+0x624>)
 8004af8:	f7ff fbae 	bl	8004258 <UART_puts>
 8004afc:	4850      	ldr	r0, [pc, #320]	; (8004c40 <get_data+0x610>)
 8004afe:	f7ff fbab 	bl	8004258 <UART_puts>
 8004b02:	4847      	ldr	r0, [pc, #284]	; (8004c20 <get_data+0x5f0>)
 8004b04:	f7ff fba8 	bl	8004258 <UART_puts>
		UART_puts("y1 = "); UART_puts(rectangle_args.y1); UART_puts("\r");
 8004b08:	4853      	ldr	r0, [pc, #332]	; (8004c58 <get_data+0x628>)
 8004b0a:	f7ff fba5 	bl	8004258 <UART_puts>
 8004b0e:	484d      	ldr	r0, [pc, #308]	; (8004c44 <get_data+0x614>)
 8004b10:	f7ff fba2 	bl	8004258 <UART_puts>
 8004b14:	4842      	ldr	r0, [pc, #264]	; (8004c20 <get_data+0x5f0>)
 8004b16:	f7ff fb9f 	bl	8004258 <UART_puts>
		UART_puts("x2 = "); UART_puts(rectangle_args.x2); UART_puts("\r");
 8004b1a:	4850      	ldr	r0, [pc, #320]	; (8004c5c <get_data+0x62c>)
 8004b1c:	f7ff fb9c 	bl	8004258 <UART_puts>
 8004b20:	4849      	ldr	r0, [pc, #292]	; (8004c48 <get_data+0x618>)
 8004b22:	f7ff fb99 	bl	8004258 <UART_puts>
 8004b26:	483e      	ldr	r0, [pc, #248]	; (8004c20 <get_data+0x5f0>)
 8004b28:	f7ff fb96 	bl	8004258 <UART_puts>
		UART_puts("y2 = "); UART_puts(rectangle_args.y2); UART_puts("\r");
 8004b2c:	484c      	ldr	r0, [pc, #304]	; (8004c60 <get_data+0x630>)
 8004b2e:	f7ff fb93 	bl	8004258 <UART_puts>
 8004b32:	4846      	ldr	r0, [pc, #280]	; (8004c4c <get_data+0x61c>)
 8004b34:	f7ff fb90 	bl	8004258 <UART_puts>
 8004b38:	4839      	ldr	r0, [pc, #228]	; (8004c20 <get_data+0x5f0>)
 8004b3a:	f7ff fb8d 	bl	8004258 <UART_puts>
		UART_puts("color = "); UART_puts(rectangle_args.color); UART_puts("\r");
 8004b3e:	483c      	ldr	r0, [pc, #240]	; (8004c30 <get_data+0x600>)
 8004b40:	f7ff fb8a 	bl	8004258 <UART_puts>
 8004b44:	4842      	ldr	r0, [pc, #264]	; (8004c50 <get_data+0x620>)
 8004b46:	f7ff fb87 	bl	8004258 <UART_puts>
 8004b4a:	4835      	ldr	r0, [pc, #212]	; (8004c20 <get_data+0x5f0>)
 8004b4c:	f7ff fb84 	bl	8004258 <UART_puts>
}
 8004b50:	e275      	b.n	800503e <get_data+0xa0e>
	else if(strcmp(functions, "driehoek")==0)
 8004b52:	4944      	ldr	r1, [pc, #272]	; (8004c64 <get_data+0x634>)
 8004b54:	4838      	ldr	r0, [pc, #224]	; (8004c38 <get_data+0x608>)
 8004b56:	f7fb fb37 	bl	80001c8 <strcmp>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	f040 810c 	bne.w	8004d7a <get_data+0x74a>
		fill=0;
 8004b62:	2300      	movs	r3, #0
 8004b64:	607b      	str	r3, [r7, #4]
		UART_puts("driehoek\r");
 8004b66:	4840      	ldr	r0, [pc, #256]	; (8004c68 <get_data+0x638>)
 8004b68:	f7ff fb76 	bl	8004258 <UART_puts>
		while(token != NULL)
 8004b6c:	e09b      	b.n	8004ca6 <get_data+0x676>
			switch(fill)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2b07      	cmp	r3, #7
 8004b72:	f200 808e 	bhi.w	8004c92 <get_data+0x662>
 8004b76:	a201      	add	r2, pc, #4	; (adr r2, 8004b7c <get_data+0x54c>)
 8004b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7c:	08004b9d 	.word	0x08004b9d
 8004b80:	08004bab 	.word	0x08004bab
 8004b84:	08004bb9 	.word	0x08004bb9
 8004b88:	08004bc7 	.word	0x08004bc7
 8004b8c:	08004bd5 	.word	0x08004bd5
 8004b90:	08004be3 	.word	0x08004be3
 8004b94:	08004bf1 	.word	0x08004bf1
 8004b98:	08004c85 	.word	0x08004c85
					strcpy(functions,token);
 8004b9c:	4b18      	ldr	r3, [pc, #96]	; (8004c00 <get_data+0x5d0>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4825      	ldr	r0, [pc, #148]	; (8004c38 <get_data+0x608>)
 8004ba4:	f000 fb5d 	bl	8005262 <strcpy>
					break;
 8004ba8:	e073      	b.n	8004c92 <get_data+0x662>
					strcpy(triangle_args.x1,token);
 8004baa:	4b15      	ldr	r3, [pc, #84]	; (8004c00 <get_data+0x5d0>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4619      	mov	r1, r3
 8004bb0:	482e      	ldr	r0, [pc, #184]	; (8004c6c <get_data+0x63c>)
 8004bb2:	f000 fb56 	bl	8005262 <strcpy>
					break;
 8004bb6:	e06c      	b.n	8004c92 <get_data+0x662>
					strcpy(triangle_args.y1,token);
 8004bb8:	4b11      	ldr	r3, [pc, #68]	; (8004c00 <get_data+0x5d0>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	482c      	ldr	r0, [pc, #176]	; (8004c70 <get_data+0x640>)
 8004bc0:	f000 fb4f 	bl	8005262 <strcpy>
					break;
 8004bc4:	e065      	b.n	8004c92 <get_data+0x662>
					strcpy(triangle_args.x2,token);
 8004bc6:	4b0e      	ldr	r3, [pc, #56]	; (8004c00 <get_data+0x5d0>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4619      	mov	r1, r3
 8004bcc:	4829      	ldr	r0, [pc, #164]	; (8004c74 <get_data+0x644>)
 8004bce:	f000 fb48 	bl	8005262 <strcpy>
					break;
 8004bd2:	e05e      	b.n	8004c92 <get_data+0x662>
					strcpy(triangle_args.y2,token);
 8004bd4:	4b0a      	ldr	r3, [pc, #40]	; (8004c00 <get_data+0x5d0>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4827      	ldr	r0, [pc, #156]	; (8004c78 <get_data+0x648>)
 8004bdc:	f000 fb41 	bl	8005262 <strcpy>
					break;
 8004be0:	e057      	b.n	8004c92 <get_data+0x662>
					strcpy(triangle_args.xtop,token);
 8004be2:	4b07      	ldr	r3, [pc, #28]	; (8004c00 <get_data+0x5d0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4619      	mov	r1, r3
 8004be8:	4824      	ldr	r0, [pc, #144]	; (8004c7c <get_data+0x64c>)
 8004bea:	f000 fb3a 	bl	8005262 <strcpy>
					break;
 8004bee:	e050      	b.n	8004c92 <get_data+0x662>
					strcpy(triangle_args.ytop,token);
 8004bf0:	4b03      	ldr	r3, [pc, #12]	; (8004c00 <get_data+0x5d0>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4822      	ldr	r0, [pc, #136]	; (8004c80 <get_data+0x650>)
 8004bf8:	f000 fb33 	bl	8005262 <strcpy>
					break;
 8004bfc:	e049      	b.n	8004c92 <get_data+0x662>
 8004bfe:	bf00      	nop
 8004c00:	2001388c 	.word	0x2001388c
 8004c04:	20013877 	.word	0x20013877
 8004c08:	0800838c 	.word	0x0800838c
 8004c0c:	20013822 	.word	0x20013822
 8004c10:	20013827 	.word	0x20013827
 8004c14:	2001382c 	.word	0x2001382c
 8004c18:	20013831 	.word	0x20013831
 8004c1c:	08008408 	.word	0x08008408
 8004c20:	08008388 	.word	0x08008388
 8004c24:	08008414 	.word	0x08008414
 8004c28:	08008420 	.word	0x08008420
 8004c2c:	0800842c 	.word	0x0800842c
 8004c30:	080083ac 	.word	0x080083ac
 8004c34:	08008438 	.word	0x08008438
 8004c38:	200006d8 	.word	0x200006d8
 8004c3c:	08008444 	.word	0x08008444
 8004c40:	20013470 	.word	0x20013470
 8004c44:	20013475 	.word	0x20013475
 8004c48:	2001347a 	.word	0x2001347a
 8004c4c:	2001347f 	.word	0x2001347f
 8004c50:	200134e3 	.word	0x200134e3
 8004c54:	080083c8 	.word	0x080083c8
 8004c58:	080083d0 	.word	0x080083d0
 8004c5c:	080083d8 	.word	0x080083d8
 8004c60:	080083e0 	.word	0x080083e0
 8004c64:	08008450 	.word	0x08008450
 8004c68:	0800845c 	.word	0x0800845c
 8004c6c:	200134f8 	.word	0x200134f8
 8004c70:	200134fd 	.word	0x200134fd
 8004c74:	20013502 	.word	0x20013502
 8004c78:	20013507 	.word	0x20013507
 8004c7c:	2001350c 	.word	0x2001350c
 8004c80:	20013511 	.word	0x20013511
					strcpy(rectangle_args.color,token);
 8004c84:	4bb4      	ldr	r3, [pc, #720]	; (8004f58 <get_data+0x928>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4619      	mov	r1, r3
 8004c8a:	48b4      	ldr	r0, [pc, #720]	; (8004f5c <get_data+0x92c>)
 8004c8c:	f000 fae9 	bl	8005262 <strcpy>
					break;
 8004c90:	bf00      	nop
			fill++;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3301      	adds	r3, #1
 8004c96:	607b      	str	r3, [r7, #4]
			token = strtok (NULL, ",");
 8004c98:	49b1      	ldr	r1, [pc, #708]	; (8004f60 <get_data+0x930>)
 8004c9a:	2000      	movs	r0, #0
 8004c9c:	f000 faea 	bl	8005274 <strtok>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	4bad      	ldr	r3, [pc, #692]	; (8004f58 <get_data+0x928>)
 8004ca4:	601a      	str	r2, [r3, #0]
		while(token != NULL)
 8004ca6:	4bac      	ldr	r3, [pc, #688]	; (8004f58 <get_data+0x928>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f47f af5f 	bne.w	8004b6e <get_data+0x53e>
		draw_triangle(atoi(triangle_args.x1),atoi(triangle_args.y1),atoi(triangle_args.x2),atoi(triangle_args.y2),atoi(triangle_args.xtop),atoi(triangle_args.ytop),color(triangle_args.color));
 8004cb0:	48ac      	ldr	r0, [pc, #688]	; (8004f64 <get_data+0x934>)
 8004cb2:	f000 fa9b 	bl	80051ec <atoi>
 8004cb6:	4606      	mov	r6, r0
 8004cb8:	48ab      	ldr	r0, [pc, #684]	; (8004f68 <get_data+0x938>)
 8004cba:	f000 fa97 	bl	80051ec <atoi>
 8004cbe:	4680      	mov	r8, r0
 8004cc0:	48aa      	ldr	r0, [pc, #680]	; (8004f6c <get_data+0x93c>)
 8004cc2:	f000 fa93 	bl	80051ec <atoi>
 8004cc6:	4681      	mov	r9, r0
 8004cc8:	48a9      	ldr	r0, [pc, #676]	; (8004f70 <get_data+0x940>)
 8004cca:	f000 fa8f 	bl	80051ec <atoi>
 8004cce:	4682      	mov	sl, r0
 8004cd0:	48a8      	ldr	r0, [pc, #672]	; (8004f74 <get_data+0x944>)
 8004cd2:	f000 fa8b 	bl	80051ec <atoi>
 8004cd6:	4604      	mov	r4, r0
 8004cd8:	48a7      	ldr	r0, [pc, #668]	; (8004f78 <get_data+0x948>)
 8004cda:	f000 fa87 	bl	80051ec <atoi>
 8004cde:	4605      	mov	r5, r0
 8004ce0:	48a6      	ldr	r0, [pc, #664]	; (8004f7c <get_data+0x94c>)
 8004ce2:	f000 f9bd 	bl	8005060 <color>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	9302      	str	r3, [sp, #8]
 8004cea:	9501      	str	r5, [sp, #4]
 8004cec:	9400      	str	r4, [sp, #0]
 8004cee:	4653      	mov	r3, sl
 8004cf0:	464a      	mov	r2, r9
 8004cf2:	4641      	mov	r1, r8
 8004cf4:	4630      	mov	r0, r6
 8004cf6:	f7fd ff11 	bl	8002b1c <draw_triangle>
		UART_puts("x1 = "); UART_puts(rectangle_args.x1); UART_puts("\r");
 8004cfa:	48a1      	ldr	r0, [pc, #644]	; (8004f80 <get_data+0x950>)
 8004cfc:	f7ff faac 	bl	8004258 <UART_puts>
 8004d00:	48a0      	ldr	r0, [pc, #640]	; (8004f84 <get_data+0x954>)
 8004d02:	f7ff faa9 	bl	8004258 <UART_puts>
 8004d06:	48a0      	ldr	r0, [pc, #640]	; (8004f88 <get_data+0x958>)
 8004d08:	f7ff faa6 	bl	8004258 <UART_puts>
		UART_puts("y1 = "); UART_puts(rectangle_args.y1); UART_puts("\r");
 8004d0c:	489f      	ldr	r0, [pc, #636]	; (8004f8c <get_data+0x95c>)
 8004d0e:	f7ff faa3 	bl	8004258 <UART_puts>
 8004d12:	489f      	ldr	r0, [pc, #636]	; (8004f90 <get_data+0x960>)
 8004d14:	f7ff faa0 	bl	8004258 <UART_puts>
 8004d18:	489b      	ldr	r0, [pc, #620]	; (8004f88 <get_data+0x958>)
 8004d1a:	f7ff fa9d 	bl	8004258 <UART_puts>
		UART_puts("x2 = "); UART_puts(rectangle_args.x2); UART_puts("\r");
 8004d1e:	489d      	ldr	r0, [pc, #628]	; (8004f94 <get_data+0x964>)
 8004d20:	f7ff fa9a 	bl	8004258 <UART_puts>
 8004d24:	489c      	ldr	r0, [pc, #624]	; (8004f98 <get_data+0x968>)
 8004d26:	f7ff fa97 	bl	8004258 <UART_puts>
 8004d2a:	4897      	ldr	r0, [pc, #604]	; (8004f88 <get_data+0x958>)
 8004d2c:	f7ff fa94 	bl	8004258 <UART_puts>
		UART_puts("y2 = "); UART_puts(rectangle_args.y2); UART_puts("\r");
 8004d30:	489a      	ldr	r0, [pc, #616]	; (8004f9c <get_data+0x96c>)
 8004d32:	f7ff fa91 	bl	8004258 <UART_puts>
 8004d36:	489a      	ldr	r0, [pc, #616]	; (8004fa0 <get_data+0x970>)
 8004d38:	f7ff fa8e 	bl	8004258 <UART_puts>
 8004d3c:	4892      	ldr	r0, [pc, #584]	; (8004f88 <get_data+0x958>)
 8004d3e:	f7ff fa8b 	bl	8004258 <UART_puts>
		UART_puts("xtop = "); UART_puts(rectangle_args.xtop); UART_puts("\r");
 8004d42:	4898      	ldr	r0, [pc, #608]	; (8004fa4 <get_data+0x974>)
 8004d44:	f7ff fa88 	bl	8004258 <UART_puts>
 8004d48:	4897      	ldr	r0, [pc, #604]	; (8004fa8 <get_data+0x978>)
 8004d4a:	f7ff fa85 	bl	8004258 <UART_puts>
 8004d4e:	488e      	ldr	r0, [pc, #568]	; (8004f88 <get_data+0x958>)
 8004d50:	f7ff fa82 	bl	8004258 <UART_puts>
		UART_puts("ytop = "); UART_puts(rectangle_args.ytop); UART_puts("\r");
 8004d54:	4895      	ldr	r0, [pc, #596]	; (8004fac <get_data+0x97c>)
 8004d56:	f7ff fa7f 	bl	8004258 <UART_puts>
 8004d5a:	4895      	ldr	r0, [pc, #596]	; (8004fb0 <get_data+0x980>)
 8004d5c:	f7ff fa7c 	bl	8004258 <UART_puts>
 8004d60:	4889      	ldr	r0, [pc, #548]	; (8004f88 <get_data+0x958>)
 8004d62:	f7ff fa79 	bl	8004258 <UART_puts>
		UART_puts("color = "); UART_puts(rectangle_args.color); UART_puts("\r");
 8004d66:	4893      	ldr	r0, [pc, #588]	; (8004fb4 <get_data+0x984>)
 8004d68:	f7ff fa76 	bl	8004258 <UART_puts>
 8004d6c:	487b      	ldr	r0, [pc, #492]	; (8004f5c <get_data+0x92c>)
 8004d6e:	f7ff fa73 	bl	8004258 <UART_puts>
 8004d72:	4885      	ldr	r0, [pc, #532]	; (8004f88 <get_data+0x958>)
 8004d74:	f7ff fa70 	bl	8004258 <UART_puts>
}
 8004d78:	e161      	b.n	800503e <get_data+0xa0e>
	else if(strcmp(functions, "tekst")==0)
 8004d7a:	498f      	ldr	r1, [pc, #572]	; (8004fb8 <get_data+0x988>)
 8004d7c:	488f      	ldr	r0, [pc, #572]	; (8004fbc <get_data+0x98c>)
 8004d7e:	f7fb fa23 	bl	80001c8 <strcmp>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d166      	bne.n	8004e56 <get_data+0x826>
		fill=0;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	607b      	str	r3, [r7, #4]
		UART_puts("tekst\r");
 8004d8c:	488c      	ldr	r0, [pc, #560]	; (8004fc0 <get_data+0x990>)
 8004d8e:	f7ff fa63 	bl	8004258 <UART_puts>
		while(token != NULL)
 8004d92:	e033      	b.n	8004dfc <get_data+0x7cc>
			switch(fill)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b03      	cmp	r3, #3
 8004d98:	d826      	bhi.n	8004de8 <get_data+0x7b8>
 8004d9a:	a201      	add	r2, pc, #4	; (adr r2, 8004da0 <get_data+0x770>)
 8004d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da0:	08004db1 	.word	0x08004db1
 8004da4:	08004dbf 	.word	0x08004dbf
 8004da8:	08004dcd 	.word	0x08004dcd
 8004dac:	08004ddb 	.word	0x08004ddb
					strcpy(functions,token);
 8004db0:	4b69      	ldr	r3, [pc, #420]	; (8004f58 <get_data+0x928>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4619      	mov	r1, r3
 8004db6:	4881      	ldr	r0, [pc, #516]	; (8004fbc <get_data+0x98c>)
 8004db8:	f000 fa53 	bl	8005262 <strcpy>
					break;
 8004dbc:	e014      	b.n	8004de8 <get_data+0x7b8>
					strcpy(text_args.x1,token);
 8004dbe:	4b66      	ldr	r3, [pc, #408]	; (8004f58 <get_data+0x928>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	487f      	ldr	r0, [pc, #508]	; (8004fc4 <get_data+0x994>)
 8004dc6:	f000 fa4c 	bl	8005262 <strcpy>
					break;
 8004dca:	e00d      	b.n	8004de8 <get_data+0x7b8>
					strcpy(text_args.y1,token);
 8004dcc:	4b62      	ldr	r3, [pc, #392]	; (8004f58 <get_data+0x928>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	487d      	ldr	r0, [pc, #500]	; (8004fc8 <get_data+0x998>)
 8004dd4:	f000 fa45 	bl	8005262 <strcpy>
					break;
 8004dd8:	e006      	b.n	8004de8 <get_data+0x7b8>
					strcpy(text_args.text_in,token);
 8004dda:	4b5f      	ldr	r3, [pc, #380]	; (8004f58 <get_data+0x928>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4619      	mov	r1, r3
 8004de0:	487a      	ldr	r0, [pc, #488]	; (8004fcc <get_data+0x99c>)
 8004de2:	f000 fa3e 	bl	8005262 <strcpy>
					break;
 8004de6:	bf00      	nop
			fill++;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	3301      	adds	r3, #1
 8004dec:	607b      	str	r3, [r7, #4]
			token = strtok (NULL, ",");
 8004dee:	495c      	ldr	r1, [pc, #368]	; (8004f60 <get_data+0x930>)
 8004df0:	2000      	movs	r0, #0
 8004df2:	f000 fa3f 	bl	8005274 <strtok>
 8004df6:	4602      	mov	r2, r0
 8004df8:	4b57      	ldr	r3, [pc, #348]	; (8004f58 <get_data+0x928>)
 8004dfa:	601a      	str	r2, [r3, #0]
		while(token != NULL)
 8004dfc:	4b56      	ldr	r3, [pc, #344]	; (8004f58 <get_data+0x928>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1c7      	bne.n	8004d94 <get_data+0x764>
		draw_text(atoi(text_args.x1),atoi(text_args.y1),text_args.text_in);
 8004e04:	486f      	ldr	r0, [pc, #444]	; (8004fc4 <get_data+0x994>)
 8004e06:	f000 f9f1 	bl	80051ec <atoi>
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	486e      	ldr	r0, [pc, #440]	; (8004fc8 <get_data+0x998>)
 8004e0e:	f000 f9ed 	bl	80051ec <atoi>
 8004e12:	4603      	mov	r3, r0
 8004e14:	4a6d      	ldr	r2, [pc, #436]	; (8004fcc <get_data+0x99c>)
 8004e16:	4619      	mov	r1, r3
 8004e18:	4620      	mov	r0, r4
 8004e1a:	f7fc f8bc 	bl	8000f96 <draw_text>
		UART_puts("x1 = "); UART_puts(text_args.x1); UART_puts("\r");
 8004e1e:	4858      	ldr	r0, [pc, #352]	; (8004f80 <get_data+0x950>)
 8004e20:	f7ff fa1a 	bl	8004258 <UART_puts>
 8004e24:	4867      	ldr	r0, [pc, #412]	; (8004fc4 <get_data+0x994>)
 8004e26:	f7ff fa17 	bl	8004258 <UART_puts>
 8004e2a:	4857      	ldr	r0, [pc, #348]	; (8004f88 <get_data+0x958>)
 8004e2c:	f7ff fa14 	bl	8004258 <UART_puts>
		UART_puts("y1 = "); UART_puts(text_args.y1); UART_puts("\r");
 8004e30:	4856      	ldr	r0, [pc, #344]	; (8004f8c <get_data+0x95c>)
 8004e32:	f7ff fa11 	bl	8004258 <UART_puts>
 8004e36:	4864      	ldr	r0, [pc, #400]	; (8004fc8 <get_data+0x998>)
 8004e38:	f7ff fa0e 	bl	8004258 <UART_puts>
 8004e3c:	4852      	ldr	r0, [pc, #328]	; (8004f88 <get_data+0x958>)
 8004e3e:	f7ff fa0b 	bl	8004258 <UART_puts>
		UART_puts("text_in = "); UART_puts(text_args.text_in); UART_puts("\r");
 8004e42:	4863      	ldr	r0, [pc, #396]	; (8004fd0 <get_data+0x9a0>)
 8004e44:	f7ff fa08 	bl	8004258 <UART_puts>
 8004e48:	4860      	ldr	r0, [pc, #384]	; (8004fcc <get_data+0x99c>)
 8004e4a:	f7ff fa05 	bl	8004258 <UART_puts>
 8004e4e:	484e      	ldr	r0, [pc, #312]	; (8004f88 <get_data+0x958>)
 8004e50:	f7ff fa02 	bl	8004258 <UART_puts>
}
 8004e54:	e0f3      	b.n	800503e <get_data+0xa0e>
	else if(strcmp(functions, "bitmap")==0)
 8004e56:	495f      	ldr	r1, [pc, #380]	; (8004fd4 <get_data+0x9a4>)
 8004e58:	4858      	ldr	r0, [pc, #352]	; (8004fbc <get_data+0x98c>)
 8004e5a:	f7fb f9b5 	bl	80001c8 <strcmp>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d165      	bne.n	8004f30 <get_data+0x900>
		fill=0;
 8004e64:	2300      	movs	r3, #0
 8004e66:	607b      	str	r3, [r7, #4]
		UART_puts("bitmap\r");
 8004e68:	485b      	ldr	r0, [pc, #364]	; (8004fd8 <get_data+0x9a8>)
 8004e6a:	f7ff f9f5 	bl	8004258 <UART_puts>
		while(token != NULL)
 8004e6e:	e033      	b.n	8004ed8 <get_data+0x8a8>
			switch(fill)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b03      	cmp	r3, #3
 8004e74:	d826      	bhi.n	8004ec4 <get_data+0x894>
 8004e76:	a201      	add	r2, pc, #4	; (adr r2, 8004e7c <get_data+0x84c>)
 8004e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7c:	08004e8d 	.word	0x08004e8d
 8004e80:	08004e9b 	.word	0x08004e9b
 8004e84:	08004ea9 	.word	0x08004ea9
 8004e88:	08004eb7 	.word	0x08004eb7
					strcpy(functions,token);
 8004e8c:	4b32      	ldr	r3, [pc, #200]	; (8004f58 <get_data+0x928>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4619      	mov	r1, r3
 8004e92:	484a      	ldr	r0, [pc, #296]	; (8004fbc <get_data+0x98c>)
 8004e94:	f000 f9e5 	bl	8005262 <strcpy>
					break;
 8004e98:	e014      	b.n	8004ec4 <get_data+0x894>
					strcpy(bitmap_args.bitmap_nr,token);
 8004e9a:	4b2f      	ldr	r3, [pc, #188]	; (8004f58 <get_data+0x928>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	484e      	ldr	r0, [pc, #312]	; (8004fdc <get_data+0x9ac>)
 8004ea2:	f000 f9de 	bl	8005262 <strcpy>
					break;
 8004ea6:	e00d      	b.n	8004ec4 <get_data+0x894>
					strcpy(bitmap_args.x1,token);
 8004ea8:	4b2b      	ldr	r3, [pc, #172]	; (8004f58 <get_data+0x928>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4619      	mov	r1, r3
 8004eae:	484c      	ldr	r0, [pc, #304]	; (8004fe0 <get_data+0x9b0>)
 8004eb0:	f000 f9d7 	bl	8005262 <strcpy>
					break;
 8004eb4:	e006      	b.n	8004ec4 <get_data+0x894>
					strcpy(bitmap_args.y1,token);
 8004eb6:	4b28      	ldr	r3, [pc, #160]	; (8004f58 <get_data+0x928>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4619      	mov	r1, r3
 8004ebc:	4849      	ldr	r0, [pc, #292]	; (8004fe4 <get_data+0x9b4>)
 8004ebe:	f000 f9d0 	bl	8005262 <strcpy>
					break;
 8004ec2:	bf00      	nop
			fill++;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	607b      	str	r3, [r7, #4]
			token = strtok (NULL, ",");
 8004eca:	4925      	ldr	r1, [pc, #148]	; (8004f60 <get_data+0x930>)
 8004ecc:	2000      	movs	r0, #0
 8004ece:	f000 f9d1 	bl	8005274 <strtok>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	4b20      	ldr	r3, [pc, #128]	; (8004f58 <get_data+0x928>)
 8004ed6:	601a      	str	r2, [r3, #0]
		while(token != NULL)
 8004ed8:	4b1f      	ldr	r3, [pc, #124]	; (8004f58 <get_data+0x928>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1c7      	bne.n	8004e70 <get_data+0x840>
		draw_bitmap(/*atoi(bitmap.bitmap_nr),*/atoi(bitmap_args.x1),atoi(bitmap_args.y1));
 8004ee0:	483f      	ldr	r0, [pc, #252]	; (8004fe0 <get_data+0x9b0>)
 8004ee2:	f000 f983 	bl	80051ec <atoi>
 8004ee6:	4604      	mov	r4, r0
 8004ee8:	483e      	ldr	r0, [pc, #248]	; (8004fe4 <get_data+0x9b4>)
 8004eea:	f000 f97f 	bl	80051ec <atoi>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	4620      	mov	r0, r4
 8004ef4:	f7fb fd64 	bl	80009c0 <draw_bitmap>
		UART_puts("x1 = "); UART_puts(bitmap_args.x1); UART_puts("\r");
 8004ef8:	4821      	ldr	r0, [pc, #132]	; (8004f80 <get_data+0x950>)
 8004efa:	f7ff f9ad 	bl	8004258 <UART_puts>
 8004efe:	4838      	ldr	r0, [pc, #224]	; (8004fe0 <get_data+0x9b0>)
 8004f00:	f7ff f9aa 	bl	8004258 <UART_puts>
 8004f04:	4820      	ldr	r0, [pc, #128]	; (8004f88 <get_data+0x958>)
 8004f06:	f7ff f9a7 	bl	8004258 <UART_puts>
		UART_puts("y1 = "); UART_puts(bitmap_args.y1); UART_puts("\r");
 8004f0a:	4820      	ldr	r0, [pc, #128]	; (8004f8c <get_data+0x95c>)
 8004f0c:	f7ff f9a4 	bl	8004258 <UART_puts>
 8004f10:	4834      	ldr	r0, [pc, #208]	; (8004fe4 <get_data+0x9b4>)
 8004f12:	f7ff f9a1 	bl	8004258 <UART_puts>
 8004f16:	481c      	ldr	r0, [pc, #112]	; (8004f88 <get_data+0x958>)
 8004f18:	f7ff f99e 	bl	8004258 <UART_puts>
		UART_puts("bitmap_nr = "); UART_puts(bitmap_args.bitmap_nr); UART_puts("\r");
 8004f1c:	4832      	ldr	r0, [pc, #200]	; (8004fe8 <get_data+0x9b8>)
 8004f1e:	f7ff f99b 	bl	8004258 <UART_puts>
 8004f22:	482e      	ldr	r0, [pc, #184]	; (8004fdc <get_data+0x9ac>)
 8004f24:	f7ff f998 	bl	8004258 <UART_puts>
 8004f28:	4817      	ldr	r0, [pc, #92]	; (8004f88 <get_data+0x958>)
 8004f2a:	f7ff f995 	bl	8004258 <UART_puts>
}
 8004f2e:	e086      	b.n	800503e <get_data+0xa0e>
	else if(strcmp(functions, "wacht")==0)
 8004f30:	492e      	ldr	r1, [pc, #184]	; (8004fec <get_data+0x9bc>)
 8004f32:	4822      	ldr	r0, [pc, #136]	; (8004fbc <get_data+0x98c>)
 8004f34:	f7fb f948 	bl	80001c8 <strcmp>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d17f      	bne.n	800503e <get_data+0xa0e>
		fill=0;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	607b      	str	r3, [r7, #4]
		UART_puts("wacht\r");
 8004f42:	482b      	ldr	r0, [pc, #172]	; (8004ff0 <get_data+0x9c0>)
 8004f44:	f7ff f988 	bl	8004258 <UART_puts>
		while(token != NULL)
 8004f48:	e06c      	b.n	8005024 <get_data+0x9f4>
			switch(fill)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d051      	beq.n	8004ff4 <get_data+0x9c4>
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d056      	beq.n	8005002 <get_data+0x9d2>
 8004f54:	e05c      	b.n	8005010 <get_data+0x9e0>
 8004f56:	bf00      	nop
 8004f58:	2001388c 	.word	0x2001388c
 8004f5c:	200134e3 	.word	0x200134e3
 8004f60:	0800838c 	.word	0x0800838c
 8004f64:	200134f8 	.word	0x200134f8
 8004f68:	200134fd 	.word	0x200134fd
 8004f6c:	20013502 	.word	0x20013502
 8004f70:	20013507 	.word	0x20013507
 8004f74:	2001350c 	.word	0x2001350c
 8004f78:	20013511 	.word	0x20013511
 8004f7c:	2001356b 	.word	0x2001356b
 8004f80:	080083c8 	.word	0x080083c8
 8004f84:	20013470 	.word	0x20013470
 8004f88:	08008388 	.word	0x08008388
 8004f8c:	080083d0 	.word	0x080083d0
 8004f90:	20013475 	.word	0x20013475
 8004f94:	080083d8 	.word	0x080083d8
 8004f98:	2001347a 	.word	0x2001347a
 8004f9c:	080083e0 	.word	0x080083e0
 8004fa0:	2001347f 	.word	0x2001347f
 8004fa4:	08008468 	.word	0x08008468
 8004fa8:	20013484 	.word	0x20013484
 8004fac:	08008470 	.word	0x08008470
 8004fb0:	20013489 	.word	0x20013489
 8004fb4:	080083ac 	.word	0x080083ac
 8004fb8:	08008478 	.word	0x08008478
 8004fbc:	200006d8 	.word	0x200006d8
 8004fc0:	08008480 	.word	0x08008480
 8004fc4:	200136f4 	.word	0x200136f4
 8004fc8:	200136f9 	.word	0x200136f9
 8004fcc:	2001372b 	.word	0x2001372b
 8004fd0:	08008488 	.word	0x08008488
 8004fd4:	08008494 	.word	0x08008494
 8004fd8:	0800849c 	.word	0x0800849c
 8004fdc:	200136d5 	.word	0x200136d5
 8004fe0:	2001366c 	.word	0x2001366c
 8004fe4:	20013671 	.word	0x20013671
 8004fe8:	080084a4 	.word	0x080084a4
 8004fec:	080084b4 	.word	0x080084b4
 8004ff0:	080084bc 	.word	0x080084bc
				strcpy(functions,token);
 8004ff4:	4b14      	ldr	r3, [pc, #80]	; (8005048 <get_data+0xa18>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	4814      	ldr	r0, [pc, #80]	; (800504c <get_data+0xa1c>)
 8004ffc:	f000 f931 	bl	8005262 <strcpy>
				break;
 8005000:	e006      	b.n	8005010 <get_data+0x9e0>
				strcpy(wait_args.time_ms,token);
 8005002:	4b11      	ldr	r3, [pc, #68]	; (8005048 <get_data+0xa18>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4619      	mov	r1, r3
 8005008:	4811      	ldr	r0, [pc, #68]	; (8005050 <get_data+0xa20>)
 800500a:	f000 f92a 	bl	8005262 <strcpy>
				break;
 800500e:	bf00      	nop
			fill++;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3301      	adds	r3, #1
 8005014:	607b      	str	r3, [r7, #4]
			token = strtok (NULL, ",");
 8005016:	490f      	ldr	r1, [pc, #60]	; (8005054 <get_data+0xa24>)
 8005018:	2000      	movs	r0, #0
 800501a:	f000 f92b 	bl	8005274 <strtok>
 800501e:	4602      	mov	r2, r0
 8005020:	4b09      	ldr	r3, [pc, #36]	; (8005048 <get_data+0xa18>)
 8005022:	601a      	str	r2, [r3, #0]
		while(token != NULL)
 8005024:	4b08      	ldr	r3, [pc, #32]	; (8005048 <get_data+0xa18>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d18e      	bne.n	8004f4a <get_data+0x91a>
		UART_puts("time_ms = "); UART_puts(wait_args.time_ms); UART_puts("\r");
 800502c:	480a      	ldr	r0, [pc, #40]	; (8005058 <get_data+0xa28>)
 800502e:	f7ff f913 	bl	8004258 <UART_puts>
 8005032:	4807      	ldr	r0, [pc, #28]	; (8005050 <get_data+0xa20>)
 8005034:	f7ff f910 	bl	8004258 <UART_puts>
 8005038:	4808      	ldr	r0, [pc, #32]	; (800505c <get_data+0xa2c>)
 800503a:	f7ff f90d 	bl	8004258 <UART_puts>
}
 800503e:	bf00      	nop
 8005040:	3708      	adds	r7, #8
 8005042:	46bd      	mov	sp, r7
 8005044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005048:	2001388c 	.word	0x2001388c
 800504c:	200006d8 	.word	0x200006d8
 8005050:	200137ea 	.word	0x200137ea
 8005054:	0800838c 	.word	0x0800838c
 8005058:	080084c4 	.word	0x080084c4
 800505c:	08008388 	.word	0x08008388

08005060 <color>:

int color(char *color_input)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b082      	sub	sp, #8
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
	if(strcmp(line_args.color, "zwart")==0) return zwart;
 8005068:	494e      	ldr	r1, [pc, #312]	; (80051a4 <color+0x144>)
 800506a:	484f      	ldr	r0, [pc, #316]	; (80051a8 <color+0x148>)
 800506c:	f7fb f8ac 	bl	80001c8 <strcmp>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <color+0x1a>
 8005076:	2300      	movs	r3, #0
 8005078:	e090      	b.n	800519c <color+0x13c>
	else if(strcmp(line_args.color, "blauw\r")==0) return blauw;
 800507a:	494c      	ldr	r1, [pc, #304]	; (80051ac <color+0x14c>)
 800507c:	484a      	ldr	r0, [pc, #296]	; (80051a8 <color+0x148>)
 800507e:	f7fb f8a3 	bl	80001c8 <strcmp>
 8005082:	4603      	mov	r3, r0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <color+0x2c>
 8005088:	2303      	movs	r3, #3
 800508a:	e087      	b.n	800519c <color+0x13c>
	else if(strcmp(line_args.color, "lichtblauw")==0) return lichtblauw;
 800508c:	4948      	ldr	r1, [pc, #288]	; (80051b0 <color+0x150>)
 800508e:	4846      	ldr	r0, [pc, #280]	; (80051a8 <color+0x148>)
 8005090:	f7fb f89a 	bl	80001c8 <strcmp>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <color+0x3e>
 800509a:	2373      	movs	r3, #115	; 0x73
 800509c:	e07e      	b.n	800519c <color+0x13c>
	else if(strcmp(line_args.color, "groen")==0) return groen;
 800509e:	4945      	ldr	r1, [pc, #276]	; (80051b4 <color+0x154>)
 80050a0:	4841      	ldr	r0, [pc, #260]	; (80051a8 <color+0x148>)
 80050a2:	f7fb f891 	bl	80001c8 <strcmp>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d101      	bne.n	80050b0 <color+0x50>
 80050ac:	231c      	movs	r3, #28
 80050ae:	e075      	b.n	800519c <color+0x13c>
	else if(strcmp(line_args.color, "groen\r")==0) return groen;
 80050b0:	4941      	ldr	r1, [pc, #260]	; (80051b8 <color+0x158>)
 80050b2:	483d      	ldr	r0, [pc, #244]	; (80051a8 <color+0x148>)
 80050b4:	f7fb f888 	bl	80001c8 <strcmp>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <color+0x62>
 80050be:	231c      	movs	r3, #28
 80050c0:	e06c      	b.n	800519c <color+0x13c>
	else if(strcmp(line_args.color, "lichtgroen")==0) return lichtgroen;
 80050c2:	493e      	ldr	r1, [pc, #248]	; (80051bc <color+0x15c>)
 80050c4:	4838      	ldr	r0, [pc, #224]	; (80051a8 <color+0x148>)
 80050c6:	f7fb f87f 	bl	80001c8 <strcmp>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d101      	bne.n	80050d4 <color+0x74>
 80050d0:	235c      	movs	r3, #92	; 0x5c
 80050d2:	e063      	b.n	800519c <color+0x13c>
	else if(strcmp(line_args.color, "rood")==0) return rood;
 80050d4:	493a      	ldr	r1, [pc, #232]	; (80051c0 <color+0x160>)
 80050d6:	4834      	ldr	r0, [pc, #208]	; (80051a8 <color+0x148>)
 80050d8:	f7fb f876 	bl	80001c8 <strcmp>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <color+0x86>
 80050e2:	23e0      	movs	r3, #224	; 0xe0
 80050e4:	e05a      	b.n	800519c <color+0x13c>
	else if(strcmp(line_args.color, "lichtrood")==0) return lichtrood;
 80050e6:	4937      	ldr	r1, [pc, #220]	; (80051c4 <color+0x164>)
 80050e8:	482f      	ldr	r0, [pc, #188]	; (80051a8 <color+0x148>)
 80050ea:	f7fb f86d 	bl	80001c8 <strcmp>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d101      	bne.n	80050f8 <color+0x98>
 80050f4:	23e9      	movs	r3, #233	; 0xe9
 80050f6:	e051      	b.n	800519c <color+0x13c>
	else if(strcmp(line_args.color, "wit")==0) return wit;
 80050f8:	4933      	ldr	r1, [pc, #204]	; (80051c8 <color+0x168>)
 80050fa:	482b      	ldr	r0, [pc, #172]	; (80051a8 <color+0x148>)
 80050fc:	f7fb f864 	bl	80001c8 <strcmp>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <color+0xaa>
 8005106:	23ff      	movs	r3, #255	; 0xff
 8005108:	e048      	b.n	800519c <color+0x13c>
	else if(strcmp(line_args.color, "cyaan")==0) return cyaan;
 800510a:	4930      	ldr	r1, [pc, #192]	; (80051cc <color+0x16c>)
 800510c:	4826      	ldr	r0, [pc, #152]	; (80051a8 <color+0x148>)
 800510e:	f7fb f85b 	bl	80001c8 <strcmp>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <color+0xbc>
 8005118:	231f      	movs	r3, #31
 800511a:	e03f      	b.n	800519c <color+0x13c>
	else if(strcmp(line_args.color, "lichtcyaan")==0) return lichtcyaan;
 800511c:	492c      	ldr	r1, [pc, #176]	; (80051d0 <color+0x170>)
 800511e:	4822      	ldr	r0, [pc, #136]	; (80051a8 <color+0x148>)
 8005120:	f7fb f852 	bl	80001c8 <strcmp>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d101      	bne.n	800512e <color+0xce>
 800512a:	237f      	movs	r3, #127	; 0x7f
 800512c:	e036      	b.n	800519c <color+0x13c>
	else if(strcmp(line_args.color, "magenta")==0) return magenta;
 800512e:	4929      	ldr	r1, [pc, #164]	; (80051d4 <color+0x174>)
 8005130:	481d      	ldr	r0, [pc, #116]	; (80051a8 <color+0x148>)
 8005132:	f7fb f849 	bl	80001c8 <strcmp>
 8005136:	4603      	mov	r3, r0
 8005138:	2b00      	cmp	r3, #0
 800513a:	d101      	bne.n	8005140 <color+0xe0>
 800513c:	23e3      	movs	r3, #227	; 0xe3
 800513e:	e02d      	b.n	800519c <color+0x13c>
	else if(strcmp(line_args.color, "lichtmagenta")==0) return lichtmagenta;
 8005140:	4925      	ldr	r1, [pc, #148]	; (80051d8 <color+0x178>)
 8005142:	4819      	ldr	r0, [pc, #100]	; (80051a8 <color+0x148>)
 8005144:	f7fb f840 	bl	80001c8 <strcmp>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <color+0xf2>
 800514e:	23e2      	movs	r3, #226	; 0xe2
 8005150:	e024      	b.n	800519c <color+0x13c>
	else if(strcmp(line_args.color, "geel")==0) return geel;
 8005152:	4922      	ldr	r1, [pc, #136]	; (80051dc <color+0x17c>)
 8005154:	4814      	ldr	r0, [pc, #80]	; (80051a8 <color+0x148>)
 8005156:	f7fb f837 	bl	80001c8 <strcmp>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d101      	bne.n	8005164 <color+0x104>
 8005160:	23fc      	movs	r3, #252	; 0xfc
 8005162:	e01b      	b.n	800519c <color+0x13c>
	else if(strcmp(line_args.color, "bruin")==0) return bruin;
 8005164:	491e      	ldr	r1, [pc, #120]	; (80051e0 <color+0x180>)
 8005166:	4810      	ldr	r0, [pc, #64]	; (80051a8 <color+0x148>)
 8005168:	f7fb f82e 	bl	80001c8 <strcmp>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <color+0x116>
 8005172:	2388      	movs	r3, #136	; 0x88
 8005174:	e012      	b.n	800519c <color+0x13c>
	else if(strcmp(line_args.color, "grijs")==0) return grijs;
 8005176:	491b      	ldr	r1, [pc, #108]	; (80051e4 <color+0x184>)
 8005178:	480b      	ldr	r0, [pc, #44]	; (80051a8 <color+0x148>)
 800517a:	f7fb f825 	bl	80001c8 <strcmp>
 800517e:	4603      	mov	r3, r0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <color+0x128>
 8005184:	23e6      	movs	r3, #230	; 0xe6
 8005186:	e009      	b.n	800519c <color+0x13c>
	else if(strcmp(line_args.color, "paars")==0) return paars;
 8005188:	4917      	ldr	r1, [pc, #92]	; (80051e8 <color+0x188>)
 800518a:	4807      	ldr	r0, [pc, #28]	; (80051a8 <color+0x148>)
 800518c:	f7fb f81c 	bl	80001c8 <strcmp>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <color+0x13a>
 8005196:	2350      	movs	r3, #80	; 0x50
 8005198:	e000      	b.n	800519c <color+0x13c>
	else return wit;
 800519a:	23ff      	movs	r3, #255	; 0xff
};
 800519c:	4618      	mov	r0, r3
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	080084d0 	.word	0x080084d0
 80051a8:	20013657 	.word	0x20013657
 80051ac:	080084d8 	.word	0x080084d8
 80051b0:	080084e0 	.word	0x080084e0
 80051b4:	080084ec 	.word	0x080084ec
 80051b8:	080084f4 	.word	0x080084f4
 80051bc:	080084fc 	.word	0x080084fc
 80051c0:	08008508 	.word	0x08008508
 80051c4:	08008510 	.word	0x08008510
 80051c8:	0800851c 	.word	0x0800851c
 80051cc:	08008520 	.word	0x08008520
 80051d0:	08008528 	.word	0x08008528
 80051d4:	08008534 	.word	0x08008534
 80051d8:	0800853c 	.word	0x0800853c
 80051dc:	0800854c 	.word	0x0800854c
 80051e0:	08008554 	.word	0x08008554
 80051e4:	0800855c 	.word	0x0800855c
 80051e8:	08008564 	.word	0x08008564

080051ec <atoi>:
 80051ec:	220a      	movs	r2, #10
 80051ee:	2100      	movs	r1, #0
 80051f0:	f000 b916 	b.w	8005420 <strtol>

080051f4 <__libc_init_array>:
 80051f4:	b570      	push	{r4, r5, r6, lr}
 80051f6:	4e0d      	ldr	r6, [pc, #52]	; (800522c <__libc_init_array+0x38>)
 80051f8:	4c0d      	ldr	r4, [pc, #52]	; (8005230 <__libc_init_array+0x3c>)
 80051fa:	1ba4      	subs	r4, r4, r6
 80051fc:	10a4      	asrs	r4, r4, #2
 80051fe:	2500      	movs	r5, #0
 8005200:	42a5      	cmp	r5, r4
 8005202:	d109      	bne.n	8005218 <__libc_init_array+0x24>
 8005204:	4e0b      	ldr	r6, [pc, #44]	; (8005234 <__libc_init_array+0x40>)
 8005206:	4c0c      	ldr	r4, [pc, #48]	; (8005238 <__libc_init_array+0x44>)
 8005208:	f000 fc98 	bl	8005b3c <_init>
 800520c:	1ba4      	subs	r4, r4, r6
 800520e:	10a4      	asrs	r4, r4, #2
 8005210:	2500      	movs	r5, #0
 8005212:	42a5      	cmp	r5, r4
 8005214:	d105      	bne.n	8005222 <__libc_init_array+0x2e>
 8005216:	bd70      	pop	{r4, r5, r6, pc}
 8005218:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800521c:	4798      	blx	r3
 800521e:	3501      	adds	r5, #1
 8005220:	e7ee      	b.n	8005200 <__libc_init_array+0xc>
 8005222:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005226:	4798      	blx	r3
 8005228:	3501      	adds	r5, #1
 800522a:	e7f2      	b.n	8005212 <__libc_init_array+0x1e>
 800522c:	08008678 	.word	0x08008678
 8005230:	08008678 	.word	0x08008678
 8005234:	08008678 	.word	0x08008678
 8005238:	0800867c 	.word	0x0800867c

0800523c <memcpy>:
 800523c:	b510      	push	{r4, lr}
 800523e:	1e43      	subs	r3, r0, #1
 8005240:	440a      	add	r2, r1
 8005242:	4291      	cmp	r1, r2
 8005244:	d100      	bne.n	8005248 <memcpy+0xc>
 8005246:	bd10      	pop	{r4, pc}
 8005248:	f811 4b01 	ldrb.w	r4, [r1], #1
 800524c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005250:	e7f7      	b.n	8005242 <memcpy+0x6>

08005252 <memset>:
 8005252:	4402      	add	r2, r0
 8005254:	4603      	mov	r3, r0
 8005256:	4293      	cmp	r3, r2
 8005258:	d100      	bne.n	800525c <memset+0xa>
 800525a:	4770      	bx	lr
 800525c:	f803 1b01 	strb.w	r1, [r3], #1
 8005260:	e7f9      	b.n	8005256 <memset+0x4>

08005262 <strcpy>:
 8005262:	4603      	mov	r3, r0
 8005264:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005268:	f803 2b01 	strb.w	r2, [r3], #1
 800526c:	2a00      	cmp	r2, #0
 800526e:	d1f9      	bne.n	8005264 <strcpy+0x2>
 8005270:	4770      	bx	lr
	...

08005274 <strtok>:
 8005274:	4b14      	ldr	r3, [pc, #80]	; (80052c8 <strtok+0x54>)
 8005276:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800527a:	681d      	ldr	r5, [r3, #0]
 800527c:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
 8005280:	4606      	mov	r6, r0
 8005282:	460f      	mov	r7, r1
 8005284:	b9bc      	cbnz	r4, 80052b6 <strtok+0x42>
 8005286:	2050      	movs	r0, #80	; 0x50
 8005288:	f000 f8e4 	bl	8005454 <malloc>
 800528c:	f8c5 00e8 	str.w	r0, [r5, #232]	; 0xe8
 8005290:	6004      	str	r4, [r0, #0]
 8005292:	6044      	str	r4, [r0, #4]
 8005294:	6084      	str	r4, [r0, #8]
 8005296:	60c4      	str	r4, [r0, #12]
 8005298:	6104      	str	r4, [r0, #16]
 800529a:	6144      	str	r4, [r0, #20]
 800529c:	6184      	str	r4, [r0, #24]
 800529e:	6284      	str	r4, [r0, #40]	; 0x28
 80052a0:	62c4      	str	r4, [r0, #44]	; 0x2c
 80052a2:	6304      	str	r4, [r0, #48]	; 0x30
 80052a4:	6344      	str	r4, [r0, #52]	; 0x34
 80052a6:	6384      	str	r4, [r0, #56]	; 0x38
 80052a8:	63c4      	str	r4, [r0, #60]	; 0x3c
 80052aa:	6404      	str	r4, [r0, #64]	; 0x40
 80052ac:	6444      	str	r4, [r0, #68]	; 0x44
 80052ae:	6484      	str	r4, [r0, #72]	; 0x48
 80052b0:	64c4      	str	r4, [r0, #76]	; 0x4c
 80052b2:	7704      	strb	r4, [r0, #28]
 80052b4:	6244      	str	r4, [r0, #36]	; 0x24
 80052b6:	f8d5 20e8 	ldr.w	r2, [r5, #232]	; 0xe8
 80052ba:	4639      	mov	r1, r7
 80052bc:	4630      	mov	r0, r6
 80052be:	2301      	movs	r3, #1
 80052c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052c4:	f000 b802 	b.w	80052cc <__strtok_r>
 80052c8:	20000010 	.word	0x20000010

080052cc <__strtok_r>:
 80052cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ce:	b918      	cbnz	r0, 80052d8 <__strtok_r+0xc>
 80052d0:	6810      	ldr	r0, [r2, #0]
 80052d2:	b908      	cbnz	r0, 80052d8 <__strtok_r+0xc>
 80052d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052d6:	4620      	mov	r0, r4
 80052d8:	4604      	mov	r4, r0
 80052da:	460f      	mov	r7, r1
 80052dc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80052e0:	f817 6b01 	ldrb.w	r6, [r7], #1
 80052e4:	b91e      	cbnz	r6, 80052ee <__strtok_r+0x22>
 80052e6:	b965      	cbnz	r5, 8005302 <__strtok_r+0x36>
 80052e8:	6015      	str	r5, [r2, #0]
 80052ea:	4628      	mov	r0, r5
 80052ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052ee:	42b5      	cmp	r5, r6
 80052f0:	d1f6      	bne.n	80052e0 <__strtok_r+0x14>
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1ef      	bne.n	80052d6 <__strtok_r+0xa>
 80052f6:	6014      	str	r4, [r2, #0]
 80052f8:	7003      	strb	r3, [r0, #0]
 80052fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052fc:	461c      	mov	r4, r3
 80052fe:	e00c      	b.n	800531a <__strtok_r+0x4e>
 8005300:	b915      	cbnz	r5, 8005308 <__strtok_r+0x3c>
 8005302:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005306:	460e      	mov	r6, r1
 8005308:	f816 5b01 	ldrb.w	r5, [r6], #1
 800530c:	42ab      	cmp	r3, r5
 800530e:	d1f7      	bne.n	8005300 <__strtok_r+0x34>
 8005310:	2b00      	cmp	r3, #0
 8005312:	d0f3      	beq.n	80052fc <__strtok_r+0x30>
 8005314:	2300      	movs	r3, #0
 8005316:	f804 3c01 	strb.w	r3, [r4, #-1]
 800531a:	6014      	str	r4, [r2, #0]
 800531c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800531e <_strtol_l.isra.0>:
 800531e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005322:	4680      	mov	r8, r0
 8005324:	4689      	mov	r9, r1
 8005326:	4692      	mov	sl, r2
 8005328:	461f      	mov	r7, r3
 800532a:	468b      	mov	fp, r1
 800532c:	465d      	mov	r5, fp
 800532e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005330:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005334:	f000 f88a 	bl	800544c <__locale_ctype_ptr_l>
 8005338:	4420      	add	r0, r4
 800533a:	7846      	ldrb	r6, [r0, #1]
 800533c:	f016 0608 	ands.w	r6, r6, #8
 8005340:	d10b      	bne.n	800535a <_strtol_l.isra.0+0x3c>
 8005342:	2c2d      	cmp	r4, #45	; 0x2d
 8005344:	d10b      	bne.n	800535e <_strtol_l.isra.0+0x40>
 8005346:	782c      	ldrb	r4, [r5, #0]
 8005348:	2601      	movs	r6, #1
 800534a:	f10b 0502 	add.w	r5, fp, #2
 800534e:	b167      	cbz	r7, 800536a <_strtol_l.isra.0+0x4c>
 8005350:	2f10      	cmp	r7, #16
 8005352:	d114      	bne.n	800537e <_strtol_l.isra.0+0x60>
 8005354:	2c30      	cmp	r4, #48	; 0x30
 8005356:	d00a      	beq.n	800536e <_strtol_l.isra.0+0x50>
 8005358:	e011      	b.n	800537e <_strtol_l.isra.0+0x60>
 800535a:	46ab      	mov	fp, r5
 800535c:	e7e6      	b.n	800532c <_strtol_l.isra.0+0xe>
 800535e:	2c2b      	cmp	r4, #43	; 0x2b
 8005360:	bf04      	itt	eq
 8005362:	782c      	ldrbeq	r4, [r5, #0]
 8005364:	f10b 0502 	addeq.w	r5, fp, #2
 8005368:	e7f1      	b.n	800534e <_strtol_l.isra.0+0x30>
 800536a:	2c30      	cmp	r4, #48	; 0x30
 800536c:	d127      	bne.n	80053be <_strtol_l.isra.0+0xa0>
 800536e:	782b      	ldrb	r3, [r5, #0]
 8005370:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005374:	2b58      	cmp	r3, #88	; 0x58
 8005376:	d14b      	bne.n	8005410 <_strtol_l.isra.0+0xf2>
 8005378:	786c      	ldrb	r4, [r5, #1]
 800537a:	2710      	movs	r7, #16
 800537c:	3502      	adds	r5, #2
 800537e:	2e00      	cmp	r6, #0
 8005380:	bf0c      	ite	eq
 8005382:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005386:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800538a:	2200      	movs	r2, #0
 800538c:	fbb1 fef7 	udiv	lr, r1, r7
 8005390:	4610      	mov	r0, r2
 8005392:	fb07 1c1e 	mls	ip, r7, lr, r1
 8005396:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800539a:	2b09      	cmp	r3, #9
 800539c:	d811      	bhi.n	80053c2 <_strtol_l.isra.0+0xa4>
 800539e:	461c      	mov	r4, r3
 80053a0:	42a7      	cmp	r7, r4
 80053a2:	dd1d      	ble.n	80053e0 <_strtol_l.isra.0+0xc2>
 80053a4:	1c53      	adds	r3, r2, #1
 80053a6:	d007      	beq.n	80053b8 <_strtol_l.isra.0+0x9a>
 80053a8:	4586      	cmp	lr, r0
 80053aa:	d316      	bcc.n	80053da <_strtol_l.isra.0+0xbc>
 80053ac:	d101      	bne.n	80053b2 <_strtol_l.isra.0+0x94>
 80053ae:	45a4      	cmp	ip, r4
 80053b0:	db13      	blt.n	80053da <_strtol_l.isra.0+0xbc>
 80053b2:	fb00 4007 	mla	r0, r0, r7, r4
 80053b6:	2201      	movs	r2, #1
 80053b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80053bc:	e7eb      	b.n	8005396 <_strtol_l.isra.0+0x78>
 80053be:	270a      	movs	r7, #10
 80053c0:	e7dd      	b.n	800537e <_strtol_l.isra.0+0x60>
 80053c2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80053c6:	2b19      	cmp	r3, #25
 80053c8:	d801      	bhi.n	80053ce <_strtol_l.isra.0+0xb0>
 80053ca:	3c37      	subs	r4, #55	; 0x37
 80053cc:	e7e8      	b.n	80053a0 <_strtol_l.isra.0+0x82>
 80053ce:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80053d2:	2b19      	cmp	r3, #25
 80053d4:	d804      	bhi.n	80053e0 <_strtol_l.isra.0+0xc2>
 80053d6:	3c57      	subs	r4, #87	; 0x57
 80053d8:	e7e2      	b.n	80053a0 <_strtol_l.isra.0+0x82>
 80053da:	f04f 32ff 	mov.w	r2, #4294967295
 80053de:	e7eb      	b.n	80053b8 <_strtol_l.isra.0+0x9a>
 80053e0:	1c53      	adds	r3, r2, #1
 80053e2:	d108      	bne.n	80053f6 <_strtol_l.isra.0+0xd8>
 80053e4:	2322      	movs	r3, #34	; 0x22
 80053e6:	f8c8 3000 	str.w	r3, [r8]
 80053ea:	4608      	mov	r0, r1
 80053ec:	f1ba 0f00 	cmp.w	sl, #0
 80053f0:	d107      	bne.n	8005402 <_strtol_l.isra.0+0xe4>
 80053f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f6:	b106      	cbz	r6, 80053fa <_strtol_l.isra.0+0xdc>
 80053f8:	4240      	negs	r0, r0
 80053fa:	f1ba 0f00 	cmp.w	sl, #0
 80053fe:	d00c      	beq.n	800541a <_strtol_l.isra.0+0xfc>
 8005400:	b122      	cbz	r2, 800540c <_strtol_l.isra.0+0xee>
 8005402:	3d01      	subs	r5, #1
 8005404:	f8ca 5000 	str.w	r5, [sl]
 8005408:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800540c:	464d      	mov	r5, r9
 800540e:	e7f9      	b.n	8005404 <_strtol_l.isra.0+0xe6>
 8005410:	2430      	movs	r4, #48	; 0x30
 8005412:	2f00      	cmp	r7, #0
 8005414:	d1b3      	bne.n	800537e <_strtol_l.isra.0+0x60>
 8005416:	2708      	movs	r7, #8
 8005418:	e7b1      	b.n	800537e <_strtol_l.isra.0+0x60>
 800541a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005420 <strtol>:
 8005420:	4b08      	ldr	r3, [pc, #32]	; (8005444 <strtol+0x24>)
 8005422:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005424:	681c      	ldr	r4, [r3, #0]
 8005426:	4d08      	ldr	r5, [pc, #32]	; (8005448 <strtol+0x28>)
 8005428:	6a23      	ldr	r3, [r4, #32]
 800542a:	2b00      	cmp	r3, #0
 800542c:	bf08      	it	eq
 800542e:	462b      	moveq	r3, r5
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	4613      	mov	r3, r2
 8005434:	460a      	mov	r2, r1
 8005436:	4601      	mov	r1, r0
 8005438:	4620      	mov	r0, r4
 800543a:	f7ff ff70 	bl	800531e <_strtol_l.isra.0>
 800543e:	b003      	add	sp, #12
 8005440:	bd30      	pop	{r4, r5, pc}
 8005442:	bf00      	nop
 8005444:	20000010 	.word	0x20000010
 8005448:	20000104 	.word	0x20000104

0800544c <__locale_ctype_ptr_l>:
 800544c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005450:	4770      	bx	lr
	...

08005454 <malloc>:
 8005454:	4b02      	ldr	r3, [pc, #8]	; (8005460 <malloc+0xc>)
 8005456:	4601      	mov	r1, r0
 8005458:	6818      	ldr	r0, [r3, #0]
 800545a:	f000 b803 	b.w	8005464 <_malloc_r>
 800545e:	bf00      	nop
 8005460:	20000010 	.word	0x20000010

08005464 <_malloc_r>:
 8005464:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005468:	f101 040b 	add.w	r4, r1, #11
 800546c:	2c16      	cmp	r4, #22
 800546e:	4681      	mov	r9, r0
 8005470:	d907      	bls.n	8005482 <_malloc_r+0x1e>
 8005472:	f034 0407 	bics.w	r4, r4, #7
 8005476:	d505      	bpl.n	8005484 <_malloc_r+0x20>
 8005478:	230c      	movs	r3, #12
 800547a:	f8c9 3000 	str.w	r3, [r9]
 800547e:	2600      	movs	r6, #0
 8005480:	e131      	b.n	80056e6 <_malloc_r+0x282>
 8005482:	2410      	movs	r4, #16
 8005484:	428c      	cmp	r4, r1
 8005486:	d3f7      	bcc.n	8005478 <_malloc_r+0x14>
 8005488:	4648      	mov	r0, r9
 800548a:	f000 fa0b 	bl	80058a4 <__malloc_lock>
 800548e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8005492:	4d9c      	ldr	r5, [pc, #624]	; (8005704 <_malloc_r+0x2a0>)
 8005494:	d236      	bcs.n	8005504 <_malloc_r+0xa0>
 8005496:	f104 0208 	add.w	r2, r4, #8
 800549a:	442a      	add	r2, r5
 800549c:	f1a2 0108 	sub.w	r1, r2, #8
 80054a0:	6856      	ldr	r6, [r2, #4]
 80054a2:	428e      	cmp	r6, r1
 80054a4:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 80054a8:	d102      	bne.n	80054b0 <_malloc_r+0x4c>
 80054aa:	68d6      	ldr	r6, [r2, #12]
 80054ac:	42b2      	cmp	r2, r6
 80054ae:	d010      	beq.n	80054d2 <_malloc_r+0x6e>
 80054b0:	6873      	ldr	r3, [r6, #4]
 80054b2:	68f2      	ldr	r2, [r6, #12]
 80054b4:	68b1      	ldr	r1, [r6, #8]
 80054b6:	f023 0303 	bic.w	r3, r3, #3
 80054ba:	60ca      	str	r2, [r1, #12]
 80054bc:	4433      	add	r3, r6
 80054be:	6091      	str	r1, [r2, #8]
 80054c0:	685a      	ldr	r2, [r3, #4]
 80054c2:	f042 0201 	orr.w	r2, r2, #1
 80054c6:	605a      	str	r2, [r3, #4]
 80054c8:	4648      	mov	r0, r9
 80054ca:	f000 f9f1 	bl	80058b0 <__malloc_unlock>
 80054ce:	3608      	adds	r6, #8
 80054d0:	e109      	b.n	80056e6 <_malloc_r+0x282>
 80054d2:	3302      	adds	r3, #2
 80054d4:	4a8c      	ldr	r2, [pc, #560]	; (8005708 <_malloc_r+0x2a4>)
 80054d6:	692e      	ldr	r6, [r5, #16]
 80054d8:	4296      	cmp	r6, r2
 80054da:	4611      	mov	r1, r2
 80054dc:	d06d      	beq.n	80055ba <_malloc_r+0x156>
 80054de:	6870      	ldr	r0, [r6, #4]
 80054e0:	f020 0003 	bic.w	r0, r0, #3
 80054e4:	1b07      	subs	r7, r0, r4
 80054e6:	2f0f      	cmp	r7, #15
 80054e8:	dd47      	ble.n	800557a <_malloc_r+0x116>
 80054ea:	1933      	adds	r3, r6, r4
 80054ec:	f044 0401 	orr.w	r4, r4, #1
 80054f0:	6074      	str	r4, [r6, #4]
 80054f2:	616b      	str	r3, [r5, #20]
 80054f4:	612b      	str	r3, [r5, #16]
 80054f6:	60da      	str	r2, [r3, #12]
 80054f8:	609a      	str	r2, [r3, #8]
 80054fa:	f047 0201 	orr.w	r2, r7, #1
 80054fe:	605a      	str	r2, [r3, #4]
 8005500:	5037      	str	r7, [r6, r0]
 8005502:	e7e1      	b.n	80054c8 <_malloc_r+0x64>
 8005504:	0a63      	lsrs	r3, r4, #9
 8005506:	d02a      	beq.n	800555e <_malloc_r+0xfa>
 8005508:	2b04      	cmp	r3, #4
 800550a:	d812      	bhi.n	8005532 <_malloc_r+0xce>
 800550c:	09a3      	lsrs	r3, r4, #6
 800550e:	3338      	adds	r3, #56	; 0x38
 8005510:	1c5a      	adds	r2, r3, #1
 8005512:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005516:	f1a2 0008 	sub.w	r0, r2, #8
 800551a:	6856      	ldr	r6, [r2, #4]
 800551c:	4286      	cmp	r6, r0
 800551e:	d006      	beq.n	800552e <_malloc_r+0xca>
 8005520:	6872      	ldr	r2, [r6, #4]
 8005522:	f022 0203 	bic.w	r2, r2, #3
 8005526:	1b11      	subs	r1, r2, r4
 8005528:	290f      	cmp	r1, #15
 800552a:	dd1c      	ble.n	8005566 <_malloc_r+0x102>
 800552c:	3b01      	subs	r3, #1
 800552e:	3301      	adds	r3, #1
 8005530:	e7d0      	b.n	80054d4 <_malloc_r+0x70>
 8005532:	2b14      	cmp	r3, #20
 8005534:	d801      	bhi.n	800553a <_malloc_r+0xd6>
 8005536:	335b      	adds	r3, #91	; 0x5b
 8005538:	e7ea      	b.n	8005510 <_malloc_r+0xac>
 800553a:	2b54      	cmp	r3, #84	; 0x54
 800553c:	d802      	bhi.n	8005544 <_malloc_r+0xe0>
 800553e:	0b23      	lsrs	r3, r4, #12
 8005540:	336e      	adds	r3, #110	; 0x6e
 8005542:	e7e5      	b.n	8005510 <_malloc_r+0xac>
 8005544:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005548:	d802      	bhi.n	8005550 <_malloc_r+0xec>
 800554a:	0be3      	lsrs	r3, r4, #15
 800554c:	3377      	adds	r3, #119	; 0x77
 800554e:	e7df      	b.n	8005510 <_malloc_r+0xac>
 8005550:	f240 5254 	movw	r2, #1364	; 0x554
 8005554:	4293      	cmp	r3, r2
 8005556:	d804      	bhi.n	8005562 <_malloc_r+0xfe>
 8005558:	0ca3      	lsrs	r3, r4, #18
 800555a:	337c      	adds	r3, #124	; 0x7c
 800555c:	e7d8      	b.n	8005510 <_malloc_r+0xac>
 800555e:	233f      	movs	r3, #63	; 0x3f
 8005560:	e7d6      	b.n	8005510 <_malloc_r+0xac>
 8005562:	237e      	movs	r3, #126	; 0x7e
 8005564:	e7d4      	b.n	8005510 <_malloc_r+0xac>
 8005566:	2900      	cmp	r1, #0
 8005568:	68f1      	ldr	r1, [r6, #12]
 800556a:	db04      	blt.n	8005576 <_malloc_r+0x112>
 800556c:	68b3      	ldr	r3, [r6, #8]
 800556e:	60d9      	str	r1, [r3, #12]
 8005570:	608b      	str	r3, [r1, #8]
 8005572:	18b3      	adds	r3, r6, r2
 8005574:	e7a4      	b.n	80054c0 <_malloc_r+0x5c>
 8005576:	460e      	mov	r6, r1
 8005578:	e7d0      	b.n	800551c <_malloc_r+0xb8>
 800557a:	2f00      	cmp	r7, #0
 800557c:	616a      	str	r2, [r5, #20]
 800557e:	612a      	str	r2, [r5, #16]
 8005580:	db05      	blt.n	800558e <_malloc_r+0x12a>
 8005582:	4430      	add	r0, r6
 8005584:	6843      	ldr	r3, [r0, #4]
 8005586:	f043 0301 	orr.w	r3, r3, #1
 800558a:	6043      	str	r3, [r0, #4]
 800558c:	e79c      	b.n	80054c8 <_malloc_r+0x64>
 800558e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005592:	d244      	bcs.n	800561e <_malloc_r+0x1ba>
 8005594:	08c0      	lsrs	r0, r0, #3
 8005596:	1087      	asrs	r7, r0, #2
 8005598:	2201      	movs	r2, #1
 800559a:	fa02 f707 	lsl.w	r7, r2, r7
 800559e:	686a      	ldr	r2, [r5, #4]
 80055a0:	3001      	adds	r0, #1
 80055a2:	433a      	orrs	r2, r7
 80055a4:	606a      	str	r2, [r5, #4]
 80055a6:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80055aa:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 80055ae:	60b7      	str	r7, [r6, #8]
 80055b0:	3a08      	subs	r2, #8
 80055b2:	60f2      	str	r2, [r6, #12]
 80055b4:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 80055b8:	60fe      	str	r6, [r7, #12]
 80055ba:	2001      	movs	r0, #1
 80055bc:	109a      	asrs	r2, r3, #2
 80055be:	fa00 f202 	lsl.w	r2, r0, r2
 80055c2:	6868      	ldr	r0, [r5, #4]
 80055c4:	4282      	cmp	r2, r0
 80055c6:	f200 80a1 	bhi.w	800570c <_malloc_r+0x2a8>
 80055ca:	4202      	tst	r2, r0
 80055cc:	d106      	bne.n	80055dc <_malloc_r+0x178>
 80055ce:	f023 0303 	bic.w	r3, r3, #3
 80055d2:	0052      	lsls	r2, r2, #1
 80055d4:	4202      	tst	r2, r0
 80055d6:	f103 0304 	add.w	r3, r3, #4
 80055da:	d0fa      	beq.n	80055d2 <_malloc_r+0x16e>
 80055dc:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 80055e0:	46e0      	mov	r8, ip
 80055e2:	469e      	mov	lr, r3
 80055e4:	f8d8 600c 	ldr.w	r6, [r8, #12]
 80055e8:	4546      	cmp	r6, r8
 80055ea:	d153      	bne.n	8005694 <_malloc_r+0x230>
 80055ec:	f10e 0e01 	add.w	lr, lr, #1
 80055f0:	f01e 0f03 	tst.w	lr, #3
 80055f4:	f108 0808 	add.w	r8, r8, #8
 80055f8:	d1f4      	bne.n	80055e4 <_malloc_r+0x180>
 80055fa:	0798      	lsls	r0, r3, #30
 80055fc:	d179      	bne.n	80056f2 <_malloc_r+0x28e>
 80055fe:	686b      	ldr	r3, [r5, #4]
 8005600:	ea23 0302 	bic.w	r3, r3, r2
 8005604:	606b      	str	r3, [r5, #4]
 8005606:	6868      	ldr	r0, [r5, #4]
 8005608:	0052      	lsls	r2, r2, #1
 800560a:	4282      	cmp	r2, r0
 800560c:	d87e      	bhi.n	800570c <_malloc_r+0x2a8>
 800560e:	2a00      	cmp	r2, #0
 8005610:	d07c      	beq.n	800570c <_malloc_r+0x2a8>
 8005612:	4673      	mov	r3, lr
 8005614:	4202      	tst	r2, r0
 8005616:	d1e1      	bne.n	80055dc <_malloc_r+0x178>
 8005618:	3304      	adds	r3, #4
 800561a:	0052      	lsls	r2, r2, #1
 800561c:	e7fa      	b.n	8005614 <_malloc_r+0x1b0>
 800561e:	0a42      	lsrs	r2, r0, #9
 8005620:	2a04      	cmp	r2, #4
 8005622:	d815      	bhi.n	8005650 <_malloc_r+0x1ec>
 8005624:	0982      	lsrs	r2, r0, #6
 8005626:	3238      	adds	r2, #56	; 0x38
 8005628:	1c57      	adds	r7, r2, #1
 800562a:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800562e:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8005632:	45be      	cmp	lr, r7
 8005634:	d126      	bne.n	8005684 <_malloc_r+0x220>
 8005636:	2001      	movs	r0, #1
 8005638:	1092      	asrs	r2, r2, #2
 800563a:	fa00 f202 	lsl.w	r2, r0, r2
 800563e:	6868      	ldr	r0, [r5, #4]
 8005640:	4310      	orrs	r0, r2
 8005642:	6068      	str	r0, [r5, #4]
 8005644:	f8c6 e00c 	str.w	lr, [r6, #12]
 8005648:	60b7      	str	r7, [r6, #8]
 800564a:	f8ce 6008 	str.w	r6, [lr, #8]
 800564e:	e7b3      	b.n	80055b8 <_malloc_r+0x154>
 8005650:	2a14      	cmp	r2, #20
 8005652:	d801      	bhi.n	8005658 <_malloc_r+0x1f4>
 8005654:	325b      	adds	r2, #91	; 0x5b
 8005656:	e7e7      	b.n	8005628 <_malloc_r+0x1c4>
 8005658:	2a54      	cmp	r2, #84	; 0x54
 800565a:	d802      	bhi.n	8005662 <_malloc_r+0x1fe>
 800565c:	0b02      	lsrs	r2, r0, #12
 800565e:	326e      	adds	r2, #110	; 0x6e
 8005660:	e7e2      	b.n	8005628 <_malloc_r+0x1c4>
 8005662:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005666:	d802      	bhi.n	800566e <_malloc_r+0x20a>
 8005668:	0bc2      	lsrs	r2, r0, #15
 800566a:	3277      	adds	r2, #119	; 0x77
 800566c:	e7dc      	b.n	8005628 <_malloc_r+0x1c4>
 800566e:	f240 5754 	movw	r7, #1364	; 0x554
 8005672:	42ba      	cmp	r2, r7
 8005674:	bf9a      	itte	ls
 8005676:	0c82      	lsrls	r2, r0, #18
 8005678:	327c      	addls	r2, #124	; 0x7c
 800567a:	227e      	movhi	r2, #126	; 0x7e
 800567c:	e7d4      	b.n	8005628 <_malloc_r+0x1c4>
 800567e:	68bf      	ldr	r7, [r7, #8]
 8005680:	45be      	cmp	lr, r7
 8005682:	d004      	beq.n	800568e <_malloc_r+0x22a>
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	f022 0203 	bic.w	r2, r2, #3
 800568a:	4290      	cmp	r0, r2
 800568c:	d3f7      	bcc.n	800567e <_malloc_r+0x21a>
 800568e:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8005692:	e7d7      	b.n	8005644 <_malloc_r+0x1e0>
 8005694:	6870      	ldr	r0, [r6, #4]
 8005696:	68f7      	ldr	r7, [r6, #12]
 8005698:	f020 0003 	bic.w	r0, r0, #3
 800569c:	eba0 0a04 	sub.w	sl, r0, r4
 80056a0:	f1ba 0f0f 	cmp.w	sl, #15
 80056a4:	dd10      	ble.n	80056c8 <_malloc_r+0x264>
 80056a6:	68b2      	ldr	r2, [r6, #8]
 80056a8:	1933      	adds	r3, r6, r4
 80056aa:	f044 0401 	orr.w	r4, r4, #1
 80056ae:	6074      	str	r4, [r6, #4]
 80056b0:	60d7      	str	r7, [r2, #12]
 80056b2:	60ba      	str	r2, [r7, #8]
 80056b4:	f04a 0201 	orr.w	r2, sl, #1
 80056b8:	616b      	str	r3, [r5, #20]
 80056ba:	612b      	str	r3, [r5, #16]
 80056bc:	60d9      	str	r1, [r3, #12]
 80056be:	6099      	str	r1, [r3, #8]
 80056c0:	605a      	str	r2, [r3, #4]
 80056c2:	f846 a000 	str.w	sl, [r6, r0]
 80056c6:	e6ff      	b.n	80054c8 <_malloc_r+0x64>
 80056c8:	f1ba 0f00 	cmp.w	sl, #0
 80056cc:	db0f      	blt.n	80056ee <_malloc_r+0x28a>
 80056ce:	4430      	add	r0, r6
 80056d0:	6843      	ldr	r3, [r0, #4]
 80056d2:	f043 0301 	orr.w	r3, r3, #1
 80056d6:	6043      	str	r3, [r0, #4]
 80056d8:	f856 3f08 	ldr.w	r3, [r6, #8]!
 80056dc:	4648      	mov	r0, r9
 80056de:	60df      	str	r7, [r3, #12]
 80056e0:	60bb      	str	r3, [r7, #8]
 80056e2:	f000 f8e5 	bl	80058b0 <__malloc_unlock>
 80056e6:	4630      	mov	r0, r6
 80056e8:	b003      	add	sp, #12
 80056ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ee:	463e      	mov	r6, r7
 80056f0:	e77a      	b.n	80055e8 <_malloc_r+0x184>
 80056f2:	f85c 0908 	ldr.w	r0, [ip], #-8
 80056f6:	4584      	cmp	ip, r0
 80056f8:	f103 33ff 	add.w	r3, r3, #4294967295
 80056fc:	f43f af7d 	beq.w	80055fa <_malloc_r+0x196>
 8005700:	e781      	b.n	8005606 <_malloc_r+0x1a2>
 8005702:	bf00      	nop
 8005704:	20000270 	.word	0x20000270
 8005708:	20000278 	.word	0x20000278
 800570c:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8005710:	f8db 6004 	ldr.w	r6, [fp, #4]
 8005714:	f026 0603 	bic.w	r6, r6, #3
 8005718:	42b4      	cmp	r4, r6
 800571a:	d803      	bhi.n	8005724 <_malloc_r+0x2c0>
 800571c:	1b33      	subs	r3, r6, r4
 800571e:	2b0f      	cmp	r3, #15
 8005720:	f300 8096 	bgt.w	8005850 <_malloc_r+0x3ec>
 8005724:	4a4f      	ldr	r2, [pc, #316]	; (8005864 <_malloc_r+0x400>)
 8005726:	6817      	ldr	r7, [r2, #0]
 8005728:	4a4f      	ldr	r2, [pc, #316]	; (8005868 <_malloc_r+0x404>)
 800572a:	6811      	ldr	r1, [r2, #0]
 800572c:	3710      	adds	r7, #16
 800572e:	3101      	adds	r1, #1
 8005730:	eb0b 0306 	add.w	r3, fp, r6
 8005734:	4427      	add	r7, r4
 8005736:	d005      	beq.n	8005744 <_malloc_r+0x2e0>
 8005738:	494c      	ldr	r1, [pc, #304]	; (800586c <_malloc_r+0x408>)
 800573a:	3901      	subs	r1, #1
 800573c:	440f      	add	r7, r1
 800573e:	3101      	adds	r1, #1
 8005740:	4249      	negs	r1, r1
 8005742:	400f      	ands	r7, r1
 8005744:	4639      	mov	r1, r7
 8005746:	4648      	mov	r0, r9
 8005748:	9201      	str	r2, [sp, #4]
 800574a:	9300      	str	r3, [sp, #0]
 800574c:	f000 f8b6 	bl	80058bc <_sbrk_r>
 8005750:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005754:	4680      	mov	r8, r0
 8005756:	d056      	beq.n	8005806 <_malloc_r+0x3a2>
 8005758:	9b00      	ldr	r3, [sp, #0]
 800575a:	9a01      	ldr	r2, [sp, #4]
 800575c:	4283      	cmp	r3, r0
 800575e:	d901      	bls.n	8005764 <_malloc_r+0x300>
 8005760:	45ab      	cmp	fp, r5
 8005762:	d150      	bne.n	8005806 <_malloc_r+0x3a2>
 8005764:	4842      	ldr	r0, [pc, #264]	; (8005870 <_malloc_r+0x40c>)
 8005766:	6801      	ldr	r1, [r0, #0]
 8005768:	4543      	cmp	r3, r8
 800576a:	eb07 0e01 	add.w	lr, r7, r1
 800576e:	f8c0 e000 	str.w	lr, [r0]
 8005772:	4940      	ldr	r1, [pc, #256]	; (8005874 <_malloc_r+0x410>)
 8005774:	4682      	mov	sl, r0
 8005776:	d113      	bne.n	80057a0 <_malloc_r+0x33c>
 8005778:	420b      	tst	r3, r1
 800577a:	d111      	bne.n	80057a0 <_malloc_r+0x33c>
 800577c:	68ab      	ldr	r3, [r5, #8]
 800577e:	443e      	add	r6, r7
 8005780:	f046 0601 	orr.w	r6, r6, #1
 8005784:	605e      	str	r6, [r3, #4]
 8005786:	4a3c      	ldr	r2, [pc, #240]	; (8005878 <_malloc_r+0x414>)
 8005788:	f8da 3000 	ldr.w	r3, [sl]
 800578c:	6811      	ldr	r1, [r2, #0]
 800578e:	428b      	cmp	r3, r1
 8005790:	bf88      	it	hi
 8005792:	6013      	strhi	r3, [r2, #0]
 8005794:	4a39      	ldr	r2, [pc, #228]	; (800587c <_malloc_r+0x418>)
 8005796:	6811      	ldr	r1, [r2, #0]
 8005798:	428b      	cmp	r3, r1
 800579a:	bf88      	it	hi
 800579c:	6013      	strhi	r3, [r2, #0]
 800579e:	e032      	b.n	8005806 <_malloc_r+0x3a2>
 80057a0:	6810      	ldr	r0, [r2, #0]
 80057a2:	3001      	adds	r0, #1
 80057a4:	bf1b      	ittet	ne
 80057a6:	eba8 0303 	subne.w	r3, r8, r3
 80057aa:	4473      	addne	r3, lr
 80057ac:	f8c2 8000 	streq.w	r8, [r2]
 80057b0:	f8ca 3000 	strne.w	r3, [sl]
 80057b4:	f018 0007 	ands.w	r0, r8, #7
 80057b8:	bf1c      	itt	ne
 80057ba:	f1c0 0008 	rsbne	r0, r0, #8
 80057be:	4480      	addne	r8, r0
 80057c0:	4b2a      	ldr	r3, [pc, #168]	; (800586c <_malloc_r+0x408>)
 80057c2:	4447      	add	r7, r8
 80057c4:	4418      	add	r0, r3
 80057c6:	400f      	ands	r7, r1
 80057c8:	1bc7      	subs	r7, r0, r7
 80057ca:	4639      	mov	r1, r7
 80057cc:	4648      	mov	r0, r9
 80057ce:	f000 f875 	bl	80058bc <_sbrk_r>
 80057d2:	1c43      	adds	r3, r0, #1
 80057d4:	bf08      	it	eq
 80057d6:	4640      	moveq	r0, r8
 80057d8:	f8da 3000 	ldr.w	r3, [sl]
 80057dc:	f8c5 8008 	str.w	r8, [r5, #8]
 80057e0:	bf08      	it	eq
 80057e2:	2700      	moveq	r7, #0
 80057e4:	eba0 0008 	sub.w	r0, r0, r8
 80057e8:	443b      	add	r3, r7
 80057ea:	4407      	add	r7, r0
 80057ec:	f047 0701 	orr.w	r7, r7, #1
 80057f0:	45ab      	cmp	fp, r5
 80057f2:	f8ca 3000 	str.w	r3, [sl]
 80057f6:	f8c8 7004 	str.w	r7, [r8, #4]
 80057fa:	d0c4      	beq.n	8005786 <_malloc_r+0x322>
 80057fc:	2e0f      	cmp	r6, #15
 80057fe:	d810      	bhi.n	8005822 <_malloc_r+0x3be>
 8005800:	2301      	movs	r3, #1
 8005802:	f8c8 3004 	str.w	r3, [r8, #4]
 8005806:	68ab      	ldr	r3, [r5, #8]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	f022 0203 	bic.w	r2, r2, #3
 800580e:	4294      	cmp	r4, r2
 8005810:	eba2 0304 	sub.w	r3, r2, r4
 8005814:	d801      	bhi.n	800581a <_malloc_r+0x3b6>
 8005816:	2b0f      	cmp	r3, #15
 8005818:	dc1a      	bgt.n	8005850 <_malloc_r+0x3ec>
 800581a:	4648      	mov	r0, r9
 800581c:	f000 f848 	bl	80058b0 <__malloc_unlock>
 8005820:	e62d      	b.n	800547e <_malloc_r+0x1a>
 8005822:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005826:	3e0c      	subs	r6, #12
 8005828:	f026 0607 	bic.w	r6, r6, #7
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	4333      	orrs	r3, r6
 8005832:	f8cb 3004 	str.w	r3, [fp, #4]
 8005836:	eb0b 0306 	add.w	r3, fp, r6
 800583a:	2205      	movs	r2, #5
 800583c:	2e0f      	cmp	r6, #15
 800583e:	605a      	str	r2, [r3, #4]
 8005840:	609a      	str	r2, [r3, #8]
 8005842:	d9a0      	bls.n	8005786 <_malloc_r+0x322>
 8005844:	f10b 0108 	add.w	r1, fp, #8
 8005848:	4648      	mov	r0, r9
 800584a:	f000 f8ab 	bl	80059a4 <_free_r>
 800584e:	e79a      	b.n	8005786 <_malloc_r+0x322>
 8005850:	68ae      	ldr	r6, [r5, #8]
 8005852:	f044 0201 	orr.w	r2, r4, #1
 8005856:	4434      	add	r4, r6
 8005858:	f043 0301 	orr.w	r3, r3, #1
 800585c:	6072      	str	r2, [r6, #4]
 800585e:	60ac      	str	r4, [r5, #8]
 8005860:	6063      	str	r3, [r4, #4]
 8005862:	e631      	b.n	80054c8 <_malloc_r+0x64>
 8005864:	200006d0 	.word	0x200006d0
 8005868:	20000678 	.word	0x20000678
 800586c:	00000080 	.word	0x00000080
 8005870:	200006a0 	.word	0x200006a0
 8005874:	0000007f 	.word	0x0000007f
 8005878:	200006c8 	.word	0x200006c8
 800587c:	200006cc 	.word	0x200006cc

08005880 <__ascii_mbtowc>:
 8005880:	b082      	sub	sp, #8
 8005882:	b901      	cbnz	r1, 8005886 <__ascii_mbtowc+0x6>
 8005884:	a901      	add	r1, sp, #4
 8005886:	b142      	cbz	r2, 800589a <__ascii_mbtowc+0x1a>
 8005888:	b14b      	cbz	r3, 800589e <__ascii_mbtowc+0x1e>
 800588a:	7813      	ldrb	r3, [r2, #0]
 800588c:	600b      	str	r3, [r1, #0]
 800588e:	7812      	ldrb	r2, [r2, #0]
 8005890:	1c10      	adds	r0, r2, #0
 8005892:	bf18      	it	ne
 8005894:	2001      	movne	r0, #1
 8005896:	b002      	add	sp, #8
 8005898:	4770      	bx	lr
 800589a:	4610      	mov	r0, r2
 800589c:	e7fb      	b.n	8005896 <__ascii_mbtowc+0x16>
 800589e:	f06f 0001 	mvn.w	r0, #1
 80058a2:	e7f8      	b.n	8005896 <__ascii_mbtowc+0x16>

080058a4 <__malloc_lock>:
 80058a4:	4801      	ldr	r0, [pc, #4]	; (80058ac <__malloc_lock+0x8>)
 80058a6:	f000 b939 	b.w	8005b1c <__retarget_lock_acquire_recursive>
 80058aa:	bf00      	nop
 80058ac:	20013908 	.word	0x20013908

080058b0 <__malloc_unlock>:
 80058b0:	4801      	ldr	r0, [pc, #4]	; (80058b8 <__malloc_unlock+0x8>)
 80058b2:	f000 b934 	b.w	8005b1e <__retarget_lock_release_recursive>
 80058b6:	bf00      	nop
 80058b8:	20013908 	.word	0x20013908

080058bc <_sbrk_r>:
 80058bc:	b538      	push	{r3, r4, r5, lr}
 80058be:	4c06      	ldr	r4, [pc, #24]	; (80058d8 <_sbrk_r+0x1c>)
 80058c0:	2300      	movs	r3, #0
 80058c2:	4605      	mov	r5, r0
 80058c4:	4608      	mov	r0, r1
 80058c6:	6023      	str	r3, [r4, #0]
 80058c8:	f000 f92a 	bl	8005b20 <_sbrk>
 80058cc:	1c43      	adds	r3, r0, #1
 80058ce:	d102      	bne.n	80058d6 <_sbrk_r+0x1a>
 80058d0:	6823      	ldr	r3, [r4, #0]
 80058d2:	b103      	cbz	r3, 80058d6 <_sbrk_r+0x1a>
 80058d4:	602b      	str	r3, [r5, #0]
 80058d6:	bd38      	pop	{r3, r4, r5, pc}
 80058d8:	20013910 	.word	0x20013910

080058dc <__ascii_wctomb>:
 80058dc:	b149      	cbz	r1, 80058f2 <__ascii_wctomb+0x16>
 80058de:	2aff      	cmp	r2, #255	; 0xff
 80058e0:	bf85      	ittet	hi
 80058e2:	238a      	movhi	r3, #138	; 0x8a
 80058e4:	6003      	strhi	r3, [r0, #0]
 80058e6:	700a      	strbls	r2, [r1, #0]
 80058e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80058ec:	bf98      	it	ls
 80058ee:	2001      	movls	r0, #1
 80058f0:	4770      	bx	lr
 80058f2:	4608      	mov	r0, r1
 80058f4:	4770      	bx	lr
	...

080058f8 <_malloc_trim_r>:
 80058f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058fc:	4f25      	ldr	r7, [pc, #148]	; (8005994 <_malloc_trim_r+0x9c>)
 80058fe:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80059a0 <_malloc_trim_r+0xa8>
 8005902:	4689      	mov	r9, r1
 8005904:	4606      	mov	r6, r0
 8005906:	f7ff ffcd 	bl	80058a4 <__malloc_lock>
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	685d      	ldr	r5, [r3, #4]
 800590e:	f1a8 0411 	sub.w	r4, r8, #17
 8005912:	f025 0503 	bic.w	r5, r5, #3
 8005916:	eba4 0409 	sub.w	r4, r4, r9
 800591a:	442c      	add	r4, r5
 800591c:	fbb4 f4f8 	udiv	r4, r4, r8
 8005920:	3c01      	subs	r4, #1
 8005922:	fb08 f404 	mul.w	r4, r8, r4
 8005926:	4544      	cmp	r4, r8
 8005928:	da05      	bge.n	8005936 <_malloc_trim_r+0x3e>
 800592a:	4630      	mov	r0, r6
 800592c:	f7ff ffc0 	bl	80058b0 <__malloc_unlock>
 8005930:	2000      	movs	r0, #0
 8005932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005936:	2100      	movs	r1, #0
 8005938:	4630      	mov	r0, r6
 800593a:	f7ff ffbf 	bl	80058bc <_sbrk_r>
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	442b      	add	r3, r5
 8005942:	4298      	cmp	r0, r3
 8005944:	d1f1      	bne.n	800592a <_malloc_trim_r+0x32>
 8005946:	4261      	negs	r1, r4
 8005948:	4630      	mov	r0, r6
 800594a:	f7ff ffb7 	bl	80058bc <_sbrk_r>
 800594e:	3001      	adds	r0, #1
 8005950:	d110      	bne.n	8005974 <_malloc_trim_r+0x7c>
 8005952:	2100      	movs	r1, #0
 8005954:	4630      	mov	r0, r6
 8005956:	f7ff ffb1 	bl	80058bc <_sbrk_r>
 800595a:	68ba      	ldr	r2, [r7, #8]
 800595c:	1a83      	subs	r3, r0, r2
 800595e:	2b0f      	cmp	r3, #15
 8005960:	dde3      	ble.n	800592a <_malloc_trim_r+0x32>
 8005962:	490d      	ldr	r1, [pc, #52]	; (8005998 <_malloc_trim_r+0xa0>)
 8005964:	6809      	ldr	r1, [r1, #0]
 8005966:	1a40      	subs	r0, r0, r1
 8005968:	490c      	ldr	r1, [pc, #48]	; (800599c <_malloc_trim_r+0xa4>)
 800596a:	f043 0301 	orr.w	r3, r3, #1
 800596e:	6008      	str	r0, [r1, #0]
 8005970:	6053      	str	r3, [r2, #4]
 8005972:	e7da      	b.n	800592a <_malloc_trim_r+0x32>
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	4a09      	ldr	r2, [pc, #36]	; (800599c <_malloc_trim_r+0xa4>)
 8005978:	1b2d      	subs	r5, r5, r4
 800597a:	f045 0501 	orr.w	r5, r5, #1
 800597e:	605d      	str	r5, [r3, #4]
 8005980:	6813      	ldr	r3, [r2, #0]
 8005982:	4630      	mov	r0, r6
 8005984:	1b1c      	subs	r4, r3, r4
 8005986:	6014      	str	r4, [r2, #0]
 8005988:	f7ff ff92 	bl	80058b0 <__malloc_unlock>
 800598c:	2001      	movs	r0, #1
 800598e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005992:	bf00      	nop
 8005994:	20000270 	.word	0x20000270
 8005998:	20000678 	.word	0x20000678
 800599c:	200006a0 	.word	0x200006a0
 80059a0:	00000080 	.word	0x00000080

080059a4 <_free_r>:
 80059a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059a8:	4604      	mov	r4, r0
 80059aa:	4688      	mov	r8, r1
 80059ac:	2900      	cmp	r1, #0
 80059ae:	f000 80ab 	beq.w	8005b08 <_free_r+0x164>
 80059b2:	f7ff ff77 	bl	80058a4 <__malloc_lock>
 80059b6:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80059ba:	4d54      	ldr	r5, [pc, #336]	; (8005b0c <_free_r+0x168>)
 80059bc:	f022 0001 	bic.w	r0, r2, #1
 80059c0:	f1a8 0308 	sub.w	r3, r8, #8
 80059c4:	181f      	adds	r7, r3, r0
 80059c6:	68a9      	ldr	r1, [r5, #8]
 80059c8:	687e      	ldr	r6, [r7, #4]
 80059ca:	428f      	cmp	r7, r1
 80059cc:	f026 0603 	bic.w	r6, r6, #3
 80059d0:	f002 0201 	and.w	r2, r2, #1
 80059d4:	d11b      	bne.n	8005a0e <_free_r+0x6a>
 80059d6:	4430      	add	r0, r6
 80059d8:	b93a      	cbnz	r2, 80059ea <_free_r+0x46>
 80059da:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80059de:	1a9b      	subs	r3, r3, r2
 80059e0:	4410      	add	r0, r2
 80059e2:	6899      	ldr	r1, [r3, #8]
 80059e4:	68da      	ldr	r2, [r3, #12]
 80059e6:	60ca      	str	r2, [r1, #12]
 80059e8:	6091      	str	r1, [r2, #8]
 80059ea:	f040 0201 	orr.w	r2, r0, #1
 80059ee:	605a      	str	r2, [r3, #4]
 80059f0:	60ab      	str	r3, [r5, #8]
 80059f2:	4b47      	ldr	r3, [pc, #284]	; (8005b10 <_free_r+0x16c>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4298      	cmp	r0, r3
 80059f8:	d304      	bcc.n	8005a04 <_free_r+0x60>
 80059fa:	4b46      	ldr	r3, [pc, #280]	; (8005b14 <_free_r+0x170>)
 80059fc:	4620      	mov	r0, r4
 80059fe:	6819      	ldr	r1, [r3, #0]
 8005a00:	f7ff ff7a 	bl	80058f8 <_malloc_trim_r>
 8005a04:	4620      	mov	r0, r4
 8005a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a0a:	f7ff bf51 	b.w	80058b0 <__malloc_unlock>
 8005a0e:	607e      	str	r6, [r7, #4]
 8005a10:	2a00      	cmp	r2, #0
 8005a12:	d139      	bne.n	8005a88 <_free_r+0xe4>
 8005a14:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8005a18:	1a5b      	subs	r3, r3, r1
 8005a1a:	4408      	add	r0, r1
 8005a1c:	6899      	ldr	r1, [r3, #8]
 8005a1e:	f105 0e08 	add.w	lr, r5, #8
 8005a22:	4571      	cmp	r1, lr
 8005a24:	d032      	beq.n	8005a8c <_free_r+0xe8>
 8005a26:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8005a2a:	f8c1 e00c 	str.w	lr, [r1, #12]
 8005a2e:	f8ce 1008 	str.w	r1, [lr, #8]
 8005a32:	19b9      	adds	r1, r7, r6
 8005a34:	6849      	ldr	r1, [r1, #4]
 8005a36:	07c9      	lsls	r1, r1, #31
 8005a38:	d40a      	bmi.n	8005a50 <_free_r+0xac>
 8005a3a:	4430      	add	r0, r6
 8005a3c:	68b9      	ldr	r1, [r7, #8]
 8005a3e:	bb3a      	cbnz	r2, 8005a90 <_free_r+0xec>
 8005a40:	4e35      	ldr	r6, [pc, #212]	; (8005b18 <_free_r+0x174>)
 8005a42:	42b1      	cmp	r1, r6
 8005a44:	d124      	bne.n	8005a90 <_free_r+0xec>
 8005a46:	616b      	str	r3, [r5, #20]
 8005a48:	612b      	str	r3, [r5, #16]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	60d9      	str	r1, [r3, #12]
 8005a4e:	6099      	str	r1, [r3, #8]
 8005a50:	f040 0101 	orr.w	r1, r0, #1
 8005a54:	6059      	str	r1, [r3, #4]
 8005a56:	5018      	str	r0, [r3, r0]
 8005a58:	2a00      	cmp	r2, #0
 8005a5a:	d1d3      	bne.n	8005a04 <_free_r+0x60>
 8005a5c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005a60:	d21a      	bcs.n	8005a98 <_free_r+0xf4>
 8005a62:	08c0      	lsrs	r0, r0, #3
 8005a64:	1081      	asrs	r1, r0, #2
 8005a66:	2201      	movs	r2, #1
 8005a68:	408a      	lsls	r2, r1
 8005a6a:	6869      	ldr	r1, [r5, #4]
 8005a6c:	3001      	adds	r0, #1
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	606a      	str	r2, [r5, #4]
 8005a72:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8005a76:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8005a7a:	6099      	str	r1, [r3, #8]
 8005a7c:	3a08      	subs	r2, #8
 8005a7e:	60da      	str	r2, [r3, #12]
 8005a80:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8005a84:	60cb      	str	r3, [r1, #12]
 8005a86:	e7bd      	b.n	8005a04 <_free_r+0x60>
 8005a88:	2200      	movs	r2, #0
 8005a8a:	e7d2      	b.n	8005a32 <_free_r+0x8e>
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	e7d0      	b.n	8005a32 <_free_r+0x8e>
 8005a90:	68fe      	ldr	r6, [r7, #12]
 8005a92:	60ce      	str	r6, [r1, #12]
 8005a94:	60b1      	str	r1, [r6, #8]
 8005a96:	e7db      	b.n	8005a50 <_free_r+0xac>
 8005a98:	0a42      	lsrs	r2, r0, #9
 8005a9a:	2a04      	cmp	r2, #4
 8005a9c:	d813      	bhi.n	8005ac6 <_free_r+0x122>
 8005a9e:	0982      	lsrs	r2, r0, #6
 8005aa0:	3238      	adds	r2, #56	; 0x38
 8005aa2:	1c51      	adds	r1, r2, #1
 8005aa4:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8005aa8:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005aac:	428e      	cmp	r6, r1
 8005aae:	d124      	bne.n	8005afa <_free_r+0x156>
 8005ab0:	2001      	movs	r0, #1
 8005ab2:	1092      	asrs	r2, r2, #2
 8005ab4:	fa00 f202 	lsl.w	r2, r0, r2
 8005ab8:	6868      	ldr	r0, [r5, #4]
 8005aba:	4302      	orrs	r2, r0
 8005abc:	606a      	str	r2, [r5, #4]
 8005abe:	60de      	str	r6, [r3, #12]
 8005ac0:	6099      	str	r1, [r3, #8]
 8005ac2:	60b3      	str	r3, [r6, #8]
 8005ac4:	e7de      	b.n	8005a84 <_free_r+0xe0>
 8005ac6:	2a14      	cmp	r2, #20
 8005ac8:	d801      	bhi.n	8005ace <_free_r+0x12a>
 8005aca:	325b      	adds	r2, #91	; 0x5b
 8005acc:	e7e9      	b.n	8005aa2 <_free_r+0xfe>
 8005ace:	2a54      	cmp	r2, #84	; 0x54
 8005ad0:	d802      	bhi.n	8005ad8 <_free_r+0x134>
 8005ad2:	0b02      	lsrs	r2, r0, #12
 8005ad4:	326e      	adds	r2, #110	; 0x6e
 8005ad6:	e7e4      	b.n	8005aa2 <_free_r+0xfe>
 8005ad8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005adc:	d802      	bhi.n	8005ae4 <_free_r+0x140>
 8005ade:	0bc2      	lsrs	r2, r0, #15
 8005ae0:	3277      	adds	r2, #119	; 0x77
 8005ae2:	e7de      	b.n	8005aa2 <_free_r+0xfe>
 8005ae4:	f240 5154 	movw	r1, #1364	; 0x554
 8005ae8:	428a      	cmp	r2, r1
 8005aea:	bf9a      	itte	ls
 8005aec:	0c82      	lsrls	r2, r0, #18
 8005aee:	327c      	addls	r2, #124	; 0x7c
 8005af0:	227e      	movhi	r2, #126	; 0x7e
 8005af2:	e7d6      	b.n	8005aa2 <_free_r+0xfe>
 8005af4:	6889      	ldr	r1, [r1, #8]
 8005af6:	428e      	cmp	r6, r1
 8005af8:	d004      	beq.n	8005b04 <_free_r+0x160>
 8005afa:	684a      	ldr	r2, [r1, #4]
 8005afc:	f022 0203 	bic.w	r2, r2, #3
 8005b00:	4290      	cmp	r0, r2
 8005b02:	d3f7      	bcc.n	8005af4 <_free_r+0x150>
 8005b04:	68ce      	ldr	r6, [r1, #12]
 8005b06:	e7da      	b.n	8005abe <_free_r+0x11a>
 8005b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b0c:	20000270 	.word	0x20000270
 8005b10:	2000067c 	.word	0x2000067c
 8005b14:	200006d0 	.word	0x200006d0
 8005b18:	20000278 	.word	0x20000278

08005b1c <__retarget_lock_acquire_recursive>:
 8005b1c:	4770      	bx	lr

08005b1e <__retarget_lock_release_recursive>:
 8005b1e:	4770      	bx	lr

08005b20 <_sbrk>:
 8005b20:	4b04      	ldr	r3, [pc, #16]	; (8005b34 <_sbrk+0x14>)
 8005b22:	6819      	ldr	r1, [r3, #0]
 8005b24:	4602      	mov	r2, r0
 8005b26:	b909      	cbnz	r1, 8005b2c <_sbrk+0xc>
 8005b28:	4903      	ldr	r1, [pc, #12]	; (8005b38 <_sbrk+0x18>)
 8005b2a:	6019      	str	r1, [r3, #0]
 8005b2c:	6818      	ldr	r0, [r3, #0]
 8005b2e:	4402      	add	r2, r0
 8005b30:	601a      	str	r2, [r3, #0]
 8005b32:	4770      	bx	lr
 8005b34:	200006d4 	.word	0x200006d4
 8005b38:	20013914 	.word	0x20013914

08005b3c <_init>:
 8005b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b3e:	bf00      	nop
 8005b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b42:	bc08      	pop	{r3}
 8005b44:	469e      	mov	lr, r3
 8005b46:	4770      	bx	lr

08005b48 <_fini>:
 8005b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4a:	bf00      	nop
 8005b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b4e:	bc08      	pop	{r3}
 8005b50:	469e      	mov	lr, r3
 8005b52:	4770      	bx	lr
