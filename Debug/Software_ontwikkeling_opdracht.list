
Software_ontwikkeling_opdracht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000138c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08001514  0800151c  0001151c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08001514  08001514  00011514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001518  08001518  00011518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  0001151c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0001151c  2**0
                  CONTENTS
  7 .bss          00012d18  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20012d18  20012d18  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0001151c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000058dc  00000000  00000000  0001154c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000dd8  00000000  00000000  00016e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000728  00000000  00000000  00017c00  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000690  00000000  00000000  00018328  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000266f  00000000  00000000  000189b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000028c5  00000000  00000000  0001b027  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0001d8ec  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001e9c  00000000  00000000  0001d968  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0001f804  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080014fc 	.word	0x080014fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	080014fc 	.word	0x080014fc

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d039      	beq.n	8000258 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	0a1b      	lsrs	r3, r3, #8
 80001ec:	b2db      	uxtb	r3, r3
 80001ee:	f003 0307 	and.w	r3, r3, #7
 80001f2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f4:	7bfb      	ldrb	r3, [r7, #15]
 80001f6:	f1c3 0304 	rsb	r3, r3, #4
 80001fa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fc:	7b7a      	ldrb	r2, [r7, #13]
 80001fe:	7bfb      	ldrb	r3, [r7, #15]
 8000200:	fa42 f303 	asr.w	r3, r2, r3
 8000204:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	785b      	ldrb	r3, [r3, #1]
 800020a:	461a      	mov	r2, r3
 800020c:	7bbb      	ldrb	r3, [r7, #14]
 800020e:	fa02 f303 	lsl.w	r3, r2, r3
 8000212:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	789a      	ldrb	r2, [r3, #2]
 8000218:	7b7b      	ldrb	r3, [r7, #13]
 800021a:	4013      	ands	r3, r2
 800021c:	b2da      	uxtb	r2, r3
 800021e:	7bfb      	ldrb	r3, [r7, #15]
 8000220:	4313      	orrs	r3, r2
 8000222:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	011b      	lsls	r3, r3, #4
 8000228:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800022a:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	781b      	ldrb	r3, [r3, #0]
 8000230:	4413      	add	r3, r2
 8000232:	7bfa      	ldrb	r2, [r7, #15]
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000238:	4a13      	ldr	r2, [pc, #76]	; (8000288 <NVIC_Init+0xc0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	095b      	lsrs	r3, r3, #5
 8000240:	b2db      	uxtb	r3, r3
 8000242:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	f003 031f 	and.w	r3, r3, #31
 800024c:	2101      	movs	r1, #1
 800024e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000252:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000256:	e00f      	b.n	8000278 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000258:	490b      	ldr	r1, [pc, #44]	; (8000288 <NVIC_Init+0xc0>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	095b      	lsrs	r3, r3, #5
 8000260:	b2db      	uxtb	r3, r3
 8000262:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	f003 031f 	and.w	r3, r3, #31
 800026c:	2201      	movs	r2, #1
 800026e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000270:	f100 0320 	add.w	r3, r0, #32
 8000274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000278:	bf00      	nop
 800027a:	3714      	adds	r7, #20
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 800028c:	b480      	push	{r7}
 800028e:	b083      	sub	sp, #12
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	f023 0201 	bic.w	r2, r3, #1
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2200      	movs	r2, #0
 80002a4:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2200      	movs	r2, #0
 80002aa:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2200      	movs	r2, #0
 80002b0:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2200      	movs	r2, #0
 80002b6:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2200      	movs	r2, #0
 80002bc:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	2221      	movs	r2, #33	; 0x21
 80002c2:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	4a46      	ldr	r2, [pc, #280]	; (80003e0 <DMA_DeInit+0x154>)
 80002c8:	4293      	cmp	r3, r2
 80002ca:	d103      	bne.n	80002d4 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 80002cc:	4b45      	ldr	r3, [pc, #276]	; (80003e4 <DMA_DeInit+0x158>)
 80002ce:	223d      	movs	r2, #61	; 0x3d
 80002d0:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 80002d2:	e07e      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	4a44      	ldr	r2, [pc, #272]	; (80003e8 <DMA_DeInit+0x15c>)
 80002d8:	4293      	cmp	r3, r2
 80002da:	d104      	bne.n	80002e6 <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 80002dc:	4b41      	ldr	r3, [pc, #260]	; (80003e4 <DMA_DeInit+0x158>)
 80002de:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 80002e2:	609a      	str	r2, [r3, #8]
}
 80002e4:	e075      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	4a40      	ldr	r2, [pc, #256]	; (80003ec <DMA_DeInit+0x160>)
 80002ea:	4293      	cmp	r3, r2
 80002ec:	d104      	bne.n	80002f8 <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 80002ee:	4b3d      	ldr	r3, [pc, #244]	; (80003e4 <DMA_DeInit+0x158>)
 80002f0:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80002f4:	609a      	str	r2, [r3, #8]
}
 80002f6:	e06c      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4a3d      	ldr	r2, [pc, #244]	; (80003f0 <DMA_DeInit+0x164>)
 80002fc:	4293      	cmp	r3, r2
 80002fe:	d104      	bne.n	800030a <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8000300:	4b38      	ldr	r3, [pc, #224]	; (80003e4 <DMA_DeInit+0x158>)
 8000302:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000306:	609a      	str	r2, [r3, #8]
}
 8000308:	e063      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4a39      	ldr	r2, [pc, #228]	; (80003f4 <DMA_DeInit+0x168>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d103      	bne.n	800031a <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8000312:	4b34      	ldr	r3, [pc, #208]	; (80003e4 <DMA_DeInit+0x158>)
 8000314:	4a38      	ldr	r2, [pc, #224]	; (80003f8 <DMA_DeInit+0x16c>)
 8000316:	60da      	str	r2, [r3, #12]
}
 8000318:	e05b      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4a37      	ldr	r2, [pc, #220]	; (80003fc <DMA_DeInit+0x170>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d103      	bne.n	800032a <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8000322:	4b30      	ldr	r3, [pc, #192]	; (80003e4 <DMA_DeInit+0x158>)
 8000324:	4a36      	ldr	r2, [pc, #216]	; (8000400 <DMA_DeInit+0x174>)
 8000326:	60da      	str	r2, [r3, #12]
}
 8000328:	e053      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a35      	ldr	r2, [pc, #212]	; (8000404 <DMA_DeInit+0x178>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d103      	bne.n	800033a <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8000332:	4b2c      	ldr	r3, [pc, #176]	; (80003e4 <DMA_DeInit+0x158>)
 8000334:	4a34      	ldr	r2, [pc, #208]	; (8000408 <DMA_DeInit+0x17c>)
 8000336:	60da      	str	r2, [r3, #12]
}
 8000338:	e04b      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a33      	ldr	r2, [pc, #204]	; (800040c <DMA_DeInit+0x180>)
 800033e:	4293      	cmp	r3, r2
 8000340:	d104      	bne.n	800034c <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8000342:	4b28      	ldr	r3, [pc, #160]	; (80003e4 <DMA_DeInit+0x158>)
 8000344:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8000348:	60da      	str	r2, [r3, #12]
}
 800034a:	e042      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	4a30      	ldr	r2, [pc, #192]	; (8000410 <DMA_DeInit+0x184>)
 8000350:	4293      	cmp	r3, r2
 8000352:	d103      	bne.n	800035c <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8000354:	4b2f      	ldr	r3, [pc, #188]	; (8000414 <DMA_DeInit+0x188>)
 8000356:	223d      	movs	r2, #61	; 0x3d
 8000358:	609a      	str	r2, [r3, #8]
}
 800035a:	e03a      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a2e      	ldr	r2, [pc, #184]	; (8000418 <DMA_DeInit+0x18c>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d104      	bne.n	800036e <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8000364:	4b2b      	ldr	r3, [pc, #172]	; (8000414 <DMA_DeInit+0x188>)
 8000366:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 800036a:	609a      	str	r2, [r3, #8]
}
 800036c:	e031      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	4a2a      	ldr	r2, [pc, #168]	; (800041c <DMA_DeInit+0x190>)
 8000372:	4293      	cmp	r3, r2
 8000374:	d104      	bne.n	8000380 <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8000376:	4b27      	ldr	r3, [pc, #156]	; (8000414 <DMA_DeInit+0x188>)
 8000378:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800037c:	609a      	str	r2, [r3, #8]
}
 800037e:	e028      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	4a27      	ldr	r2, [pc, #156]	; (8000420 <DMA_DeInit+0x194>)
 8000384:	4293      	cmp	r3, r2
 8000386:	d104      	bne.n	8000392 <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8000388:	4b22      	ldr	r3, [pc, #136]	; (8000414 <DMA_DeInit+0x188>)
 800038a:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800038e:	609a      	str	r2, [r3, #8]
}
 8000390:	e01f      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4a23      	ldr	r2, [pc, #140]	; (8000424 <DMA_DeInit+0x198>)
 8000396:	4293      	cmp	r3, r2
 8000398:	d103      	bne.n	80003a2 <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 800039a:	4b1e      	ldr	r3, [pc, #120]	; (8000414 <DMA_DeInit+0x188>)
 800039c:	4a16      	ldr	r2, [pc, #88]	; (80003f8 <DMA_DeInit+0x16c>)
 800039e:	60da      	str	r2, [r3, #12]
}
 80003a0:	e017      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a20      	ldr	r2, [pc, #128]	; (8000428 <DMA_DeInit+0x19c>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d103      	bne.n	80003b2 <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 80003aa:	4b1a      	ldr	r3, [pc, #104]	; (8000414 <DMA_DeInit+0x188>)
 80003ac:	4a14      	ldr	r2, [pc, #80]	; (8000400 <DMA_DeInit+0x174>)
 80003ae:	60da      	str	r2, [r3, #12]
}
 80003b0:	e00f      	b.n	80003d2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a1d      	ldr	r2, [pc, #116]	; (800042c <DMA_DeInit+0x1a0>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d103      	bne.n	80003c2 <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 80003ba:	4b16      	ldr	r3, [pc, #88]	; (8000414 <DMA_DeInit+0x188>)
 80003bc:	4a12      	ldr	r2, [pc, #72]	; (8000408 <DMA_DeInit+0x17c>)
 80003be:	60da      	str	r2, [r3, #12]
}
 80003c0:	e007      	b.n	80003d2 <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4a1a      	ldr	r2, [pc, #104]	; (8000430 <DMA_DeInit+0x1a4>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d103      	bne.n	80003d2 <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 80003ca:	4b12      	ldr	r3, [pc, #72]	; (8000414 <DMA_DeInit+0x188>)
 80003cc:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80003d0:	60da      	str	r2, [r3, #12]
}
 80003d2:	bf00      	nop
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	40026010 	.word	0x40026010
 80003e4:	40026000 	.word	0x40026000
 80003e8:	40026028 	.word	0x40026028
 80003ec:	40026040 	.word	0x40026040
 80003f0:	40026058 	.word	0x40026058
 80003f4:	40026070 	.word	0x40026070
 80003f8:	2000003d 	.word	0x2000003d
 80003fc:	40026088 	.word	0x40026088
 8000400:	20000f40 	.word	0x20000f40
 8000404:	400260a0 	.word	0x400260a0
 8000408:	203d0000 	.word	0x203d0000
 800040c:	400260b8 	.word	0x400260b8
 8000410:	40026410 	.word	0x40026410
 8000414:	40026400 	.word	0x40026400
 8000418:	40026428 	.word	0x40026428
 800041c:	40026440 	.word	0x40026440
 8000420:	40026458 	.word	0x40026458
 8000424:	40026470 	.word	0x40026470
 8000428:	40026488 	.word	0x40026488
 800042c:	400264a0 	.word	0x400264a0
 8000430:	400264b8 	.word	0x400264b8

08000434 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800043e:	2300      	movs	r3, #0
 8000440:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000448:	68fa      	ldr	r2, [r7, #12]
 800044a:	4b25      	ldr	r3, [pc, #148]	; (80004e0 <DMA_Init+0xac>)
 800044c:	4013      	ands	r3, r2
 800044e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	681a      	ldr	r2, [r3, #0]
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	68db      	ldr	r3, [r3, #12]
 8000458:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800045e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800046a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	6a1b      	ldr	r3, [r3, #32]
 8000470:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000476:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800047c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000482:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000488:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800048a:	68fa      	ldr	r2, [r7, #12]
 800048c:	4313      	orrs	r3, r2
 800048e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	68fa      	ldr	r2, [r7, #12]
 8000494:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	695b      	ldr	r3, [r3, #20]
 800049a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	f023 0307 	bic.w	r3, r3, #7
 80004a2:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ac:	4313      	orrs	r3, r2
 80004ae:	68fa      	ldr	r2, [r7, #12]
 80004b0:	4313      	orrs	r3, r2
 80004b2:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	68fa      	ldr	r2, [r7, #12]
 80004b8:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	691a      	ldr	r2, [r3, #16]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	685a      	ldr	r2, [r3, #4]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	689a      	ldr	r2, [r3, #8]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	60da      	str	r2, [r3, #12]
}
 80004d2:	bf00      	nop
 80004d4:	3714      	adds	r7, #20
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	f01c803f 	.word	0xf01c803f

080004e4 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	460b      	mov	r3, r1
 80004ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80004f0:	78fb      	ldrb	r3, [r7, #3]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d006      	beq.n	8000504 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	681b      	ldr	r3, [r3, #0]
 80004fa:	f043 0201 	orr.w	r2, r3, #1
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8000502:	e005      	b.n	8000510 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f023 0201 	bic.w	r2, r3, #1
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	601a      	str	r2, [r3, #0]
}
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 800051c:	b480      	push	{r7}
 800051e:	b085      	sub	sp, #20
 8000520:	af00      	add	r7, sp, #0
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	4613      	mov	r3, r2
 8000528:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 800052a:	68bb      	ldr	r3, [r7, #8]
 800052c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000530:	2b00      	cmp	r3, #0
 8000532:	d00f      	beq.n	8000554 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	2b00      	cmp	r3, #0
 8000538:	d006      	beq.n	8000548 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	615a      	str	r2, [r3, #20]
 8000546:	e005      	b.n	8000554 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	695b      	ldr	r3, [r3, #20]
 800054c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	2b80      	cmp	r3, #128	; 0x80
 8000558:	d014      	beq.n	8000584 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d008      	beq.n	8000572 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	681a      	ldr	r2, [r3, #0]
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	f003 031e 	and.w	r3, r3, #30
 800056a:	431a      	orrs	r2, r3
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8000570:	e008      	b.n	8000584 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	68bb      	ldr	r3, [r7, #8]
 8000578:	f003 031e 	and.w	r3, r3, #30
 800057c:	43db      	mvns	r3, r3
 800057e:	401a      	ands	r2, r3
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	601a      	str	r2, [r3, #0]
}
 8000584:	bf00      	nop
 8000586:	3714      	adds	r7, #20
 8000588:	46bd      	mov	sp, r7
 800058a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058e:	4770      	bx	lr

08000590 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8000590:	b480      	push	{r7}
 8000592:	b087      	sub	sp, #28
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800059a:	2300      	movs	r3, #0
 800059c:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	2300      	movs	r3, #0
 80005a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4a22      	ldr	r2, [pc, #136]	; (8000634 <DMA_GetITStatus+0xa4>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d802      	bhi.n	80005b4 <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80005ae:	4b22      	ldr	r3, [pc, #136]	; (8000638 <DMA_GetITStatus+0xa8>)
 80005b0:	613b      	str	r3, [r7, #16]
 80005b2:	e001      	b.n	80005b8 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80005b4:	4b21      	ldr	r3, [pc, #132]	; (800063c <DMA_GetITStatus+0xac>)
 80005b6:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80005be:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d00a      	beq.n	80005dc <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	0adb      	lsrs	r3, r3, #11
 80005ca:	f003 031e 	and.w	r3, r3, #30
 80005ce:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	4013      	ands	r3, r2
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	e004      	b.n	80005e6 <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	695b      	ldr	r3, [r3, #20]
 80005e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e4:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d003      	beq.n	80005f8 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 80005f0:	693b      	ldr	r3, [r7, #16]
 80005f2:	685b      	ldr	r3, [r3, #4]
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	e002      	b.n	80005fe <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 80005f8:	693b      	ldr	r3, [r7, #16]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000604:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000608:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800060a:	68fa      	ldr	r2, [r7, #12]
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	4013      	ands	r3, r2
 8000610:	2b00      	cmp	r3, #0
 8000612:	d005      	beq.n	8000620 <DMA_GetITStatus+0x90>
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d002      	beq.n	8000620 <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 800061a:	2301      	movs	r3, #1
 800061c:	75fb      	strb	r3, [r7, #23]
 800061e:	e001      	b.n	8000624 <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8000620:	2300      	movs	r3, #0
 8000622:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8000624:	7dfb      	ldrb	r3, [r7, #23]
}
 8000626:	4618      	mov	r0, r3
 8000628:	371c      	adds	r7, #28
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	4002640f 	.word	0x4002640f
 8000638:	40026000 	.word	0x40026000
 800063c:	40026400 	.word	0x40026400

08000640 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8000640:	b480      	push	{r7}
 8000642:	b085      	sub	sp, #20
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a10      	ldr	r2, [pc, #64]	; (8000690 <DMA_ClearITPendingBit+0x50>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d802      	bhi.n	8000658 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <DMA_ClearITPendingBit+0x54>)
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	e001      	b.n	800065c <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000658:	4b0f      	ldr	r3, [pc, #60]	; (8000698 <DMA_ClearITPendingBit+0x58>)
 800065a:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800065c:	683b      	ldr	r3, [r7, #0]
 800065e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000662:	2b00      	cmp	r3, #0
 8000664:	d007      	beq.n	8000676 <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800066c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000670:	68fa      	ldr	r2, [r7, #12]
 8000672:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 8000674:	e006      	b.n	8000684 <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800067c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000680:	68fa      	ldr	r2, [r7, #12]
 8000682:	6093      	str	r3, [r2, #8]
}
 8000684:	bf00      	nop
 8000686:	3714      	adds	r7, #20
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	4002640f 	.word	0x4002640f
 8000694:	40026000 	.word	0x40026000
 8000698:	40026400 	.word	0x40026400

0800069c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800069c:	b480      	push	{r7}
 800069e:	b087      	sub	sp, #28
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
 80006aa:	2300      	movs	r3, #0
 80006ac:	613b      	str	r3, [r7, #16]
 80006ae:	2300      	movs	r3, #0
 80006b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]
 80006b6:	e076      	b.n	80007a6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80006b8:	2201      	movs	r2, #1
 80006ba:	697b      	ldr	r3, [r7, #20]
 80006bc:	fa02 f303 	lsl.w	r3, r2, r3
 80006c0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	693b      	ldr	r3, [r7, #16]
 80006c8:	4013      	ands	r3, r2
 80006ca:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80006cc:	68fa      	ldr	r2, [r7, #12]
 80006ce:	693b      	ldr	r3, [r7, #16]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d165      	bne.n	80007a0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	681a      	ldr	r2, [r3, #0]
 80006d8:	697b      	ldr	r3, [r7, #20]
 80006da:	005b      	lsls	r3, r3, #1
 80006dc:	2103      	movs	r1, #3
 80006de:	fa01 f303 	lsl.w	r3, r1, r3
 80006e2:	43db      	mvns	r3, r3
 80006e4:	401a      	ands	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	791b      	ldrb	r3, [r3, #4]
 80006f2:	4619      	mov	r1, r3
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	fa01 f303 	lsl.w	r3, r1, r3
 80006fc:	431a      	orrs	r2, r3
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	791b      	ldrb	r3, [r3, #4]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d003      	beq.n	8000712 <GPIO_Init+0x76>
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	791b      	ldrb	r3, [r3, #4]
 800070e:	2b02      	cmp	r3, #2
 8000710:	d12e      	bne.n	8000770 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	689a      	ldr	r2, [r3, #8]
 8000716:	697b      	ldr	r3, [r7, #20]
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	2103      	movs	r1, #3
 800071c:	fa01 f303 	lsl.w	r3, r1, r3
 8000720:	43db      	mvns	r3, r3
 8000722:	401a      	ands	r2, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	689a      	ldr	r2, [r3, #8]
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	795b      	ldrb	r3, [r3, #5]
 8000730:	4619      	mov	r1, r3
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	431a      	orrs	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	685a      	ldr	r2, [r3, #4]
 8000744:	697b      	ldr	r3, [r7, #20]
 8000746:	b29b      	uxth	r3, r3
 8000748:	4619      	mov	r1, r3
 800074a:	2301      	movs	r3, #1
 800074c:	408b      	lsls	r3, r1
 800074e:	43db      	mvns	r3, r3
 8000750:	401a      	ands	r2, r3
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	683a      	ldr	r2, [r7, #0]
 800075c:	7992      	ldrb	r2, [r2, #6]
 800075e:	4611      	mov	r1, r2
 8000760:	697a      	ldr	r2, [r7, #20]
 8000762:	b292      	uxth	r2, r2
 8000764:	fa01 f202 	lsl.w	r2, r1, r2
 8000768:	b292      	uxth	r2, r2
 800076a:	431a      	orrs	r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	68da      	ldr	r2, [r3, #12]
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	b29b      	uxth	r3, r3
 8000778:	005b      	lsls	r3, r3, #1
 800077a:	2103      	movs	r1, #3
 800077c:	fa01 f303 	lsl.w	r3, r1, r3
 8000780:	43db      	mvns	r3, r3
 8000782:	401a      	ands	r2, r3
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	68da      	ldr	r2, [r3, #12]
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	79db      	ldrb	r3, [r3, #7]
 8000790:	4619      	mov	r1, r3
 8000792:	697b      	ldr	r3, [r7, #20]
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	fa01 f303 	lsl.w	r3, r1, r3
 800079a:	431a      	orrs	r2, r3
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	3301      	adds	r3, #1
 80007a4:	617b      	str	r3, [r7, #20]
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	2b0f      	cmp	r3, #15
 80007aa:	d985      	bls.n	80006b8 <GPIO_Init+0x1c>
    }
  }
}
 80007ac:	bf00      	nop
 80007ae:	371c      	adds	r7, #28
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	807b      	strh	r3, [r7, #2]
 80007c4:	4613      	mov	r3, r2
 80007c6:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80007d0:	787a      	ldrb	r2, [r7, #1]
 80007d2:	887b      	ldrh	r3, [r7, #2]
 80007d4:	f003 0307 	and.w	r3, r3, #7
 80007d8:	009b      	lsls	r3, r3, #2
 80007da:	fa02 f303 	lsl.w	r3, r2, r3
 80007de:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80007e0:	887b      	ldrh	r3, [r7, #2]
 80007e2:	08db      	lsrs	r3, r3, #3
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	4618      	mov	r0, r3
 80007e8:	887b      	ldrh	r3, [r7, #2]
 80007ea:	08db      	lsrs	r3, r3, #3
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	461a      	mov	r2, r3
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3208      	adds	r2, #8
 80007f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007f8:	887b      	ldrh	r3, [r7, #2]
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	210f      	movs	r1, #15
 8000802:	fa01 f303 	lsl.w	r3, r1, r3
 8000806:	43db      	mvns	r3, r3
 8000808:	ea02 0103 	and.w	r1, r2, r3
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f100 0208 	add.w	r2, r0, #8
 8000812:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000816:	887b      	ldrh	r3, [r7, #2]
 8000818:	08db      	lsrs	r3, r3, #3
 800081a:	b29b      	uxth	r3, r3
 800081c:	461a      	mov	r2, r3
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	3208      	adds	r2, #8
 8000822:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	4313      	orrs	r3, r2
 800082a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800082c:	887b      	ldrh	r3, [r7, #2]
 800082e:	08db      	lsrs	r3, r3, #3
 8000830:	b29b      	uxth	r3, r3
 8000832:	461a      	mov	r2, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	3208      	adds	r2, #8
 8000838:	68b9      	ldr	r1, [r7, #8]
 800083a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800083e:	bf00      	nop
 8000840:	3714      	adds	r7, #20
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
	...

0800084c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000858:	78fb      	ldrb	r3, [r7, #3]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d006      	beq.n	800086c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800085e:	490a      	ldr	r1, [pc, #40]	; (8000888 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000860:	4b09      	ldr	r3, [pc, #36]	; (8000888 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4313      	orrs	r3, r2
 8000868:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800086a:	e006      	b.n	800087a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800086c:	4906      	ldr	r1, [pc, #24]	; (8000888 <RCC_AHB1PeriphClockCmd+0x3c>)
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000870:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	43db      	mvns	r3, r3
 8000876:	4013      	ands	r3, r2
 8000878:	630b      	str	r3, [r1, #48]	; 0x30
}
 800087a:	bf00      	nop
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	40023800 	.word	0x40023800

0800088c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000898:	78fb      	ldrb	r3, [r7, #3]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d006      	beq.n	80008ac <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800089e:	490a      	ldr	r1, [pc, #40]	; (80008c8 <RCC_APB1PeriphClockCmd+0x3c>)
 80008a0:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <RCC_APB1PeriphClockCmd+0x3c>)
 80008a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80008aa:	e006      	b.n	80008ba <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80008ac:	4906      	ldr	r1, [pc, #24]	; (80008c8 <RCC_APB1PeriphClockCmd+0x3c>)
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <RCC_APB1PeriphClockCmd+0x3c>)
 80008b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	43db      	mvns	r3, r3
 80008b6:	4013      	ands	r3, r2
 80008b8:	640b      	str	r3, [r1, #64]	; 0x40
}
 80008ba:	bf00      	nop
 80008bc:	370c      	adds	r7, #12
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	40023800 	.word	0x40023800

080008cc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
 80008d4:	460b      	mov	r3, r1
 80008d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80008d8:	78fb      	ldrb	r3, [r7, #3]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d006      	beq.n	80008ec <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80008de:	490a      	ldr	r1, [pc, #40]	; (8000908 <RCC_APB2PeriphClockCmd+0x3c>)
 80008e0:	4b09      	ldr	r3, [pc, #36]	; (8000908 <RCC_APB2PeriphClockCmd+0x3c>)
 80008e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80008ea:	e006      	b.n	80008fa <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80008ec:	4906      	ldr	r1, [pc, #24]	; (8000908 <RCC_APB2PeriphClockCmd+0x3c>)
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <RCC_APB2PeriphClockCmd+0x3c>)
 80008f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	43db      	mvns	r3, r3
 80008f6:	4013      	ands	r3, r2
 80008f8:	644b      	str	r3, [r1, #68]	; 0x44
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800

0800090c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	881b      	ldrh	r3, [r3, #0]
 800091e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	4a29      	ldr	r2, [pc, #164]	; (80009c8 <TIM_TimeBaseInit+0xbc>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d013      	beq.n	8000950 <TIM_TimeBaseInit+0x44>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a28      	ldr	r2, [pc, #160]	; (80009cc <TIM_TimeBaseInit+0xc0>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d00f      	beq.n	8000950 <TIM_TimeBaseInit+0x44>
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000936:	d00b      	beq.n	8000950 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4a25      	ldr	r2, [pc, #148]	; (80009d0 <TIM_TimeBaseInit+0xc4>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d007      	beq.n	8000950 <TIM_TimeBaseInit+0x44>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4a24      	ldr	r2, [pc, #144]	; (80009d4 <TIM_TimeBaseInit+0xc8>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d003      	beq.n	8000950 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4a23      	ldr	r2, [pc, #140]	; (80009d8 <TIM_TimeBaseInit+0xcc>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d108      	bne.n	8000962 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8000950:	89fb      	ldrh	r3, [r7, #14]
 8000952:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000956:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	885a      	ldrh	r2, [r3, #2]
 800095c:	89fb      	ldrh	r3, [r7, #14]
 800095e:	4313      	orrs	r3, r2
 8000960:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4a1d      	ldr	r2, [pc, #116]	; (80009dc <TIM_TimeBaseInit+0xd0>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d00c      	beq.n	8000984 <TIM_TimeBaseInit+0x78>
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a1c      	ldr	r2, [pc, #112]	; (80009e0 <TIM_TimeBaseInit+0xd4>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d008      	beq.n	8000984 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000978:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	891a      	ldrh	r2, [r3, #8]
 800097e:	89fb      	ldrh	r3, [r7, #14]
 8000980:	4313      	orrs	r3, r2
 8000982:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	89fa      	ldrh	r2, [r7, #14]
 8000988:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685a      	ldr	r2, [r3, #4]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	881a      	ldrh	r2, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <TIM_TimeBaseInit+0xbc>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	d003      	beq.n	80009aa <TIM_TimeBaseInit+0x9e>
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a09      	ldr	r2, [pc, #36]	; (80009cc <TIM_TimeBaseInit+0xc0>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d104      	bne.n	80009b4 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	7a9b      	ldrb	r3, [r3, #10]
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2201      	movs	r2, #1
 80009b8:	829a      	strh	r2, [r3, #20]
}
 80009ba:	bf00      	nop
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	40010000 	.word	0x40010000
 80009cc:	40010400 	.word	0x40010400
 80009d0:	40000400 	.word	0x40000400
 80009d4:	40000800 	.word	0x40000800
 80009d8:	40000c00 	.word	0x40000c00
 80009dc:	40001000 	.word	0x40001000
 80009e0:	40001400 	.word	0x40001400

080009e4 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80009f0:	78fb      	ldrb	r3, [r7, #3]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d008      	beq.n	8000a08 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a00:	b29a      	uxth	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 8000a06:	e007      	b.n	8000a18 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	881b      	ldrh	r3, [r3, #0]
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	801a      	strh	r2, [r3, #0]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	460b      	mov	r3, r1
 8000a2e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a30:	78fb      	ldrb	r3, [r7, #3]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d008      	beq.n	8000a48 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8000a46:	e007      	b.n	8000a58 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	f023 0301 	bic.w	r3, r3, #1
 8000a52:	b29a      	uxth	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	801a      	strh	r2, [r3, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	370c      	adds	r7, #12
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	817b      	strh	r3, [r7, #10]
 8000a72:	2300      	movs	r3, #0
 8000a74:	81fb      	strh	r3, [r7, #14]
 8000a76:	2300      	movs	r3, #0
 8000a78:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	8c1b      	ldrh	r3, [r3, #32]
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	8c1b      	ldrh	r3, [r3, #32]
 8000a8e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	889b      	ldrh	r3, [r3, #4]
 8000a94:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	8b9b      	ldrh	r3, [r3, #28]
 8000a9a:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8000a9c:	897b      	ldrh	r3, [r7, #10]
 8000a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000aa2:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8000aa4:	897b      	ldrh	r3, [r7, #10]
 8000aa6:	f023 0303 	bic.w	r3, r3, #3
 8000aaa:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	881a      	ldrh	r2, [r3, #0]
 8000ab0:	897b      	ldrh	r3, [r7, #10]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8000ab6:	89fb      	ldrh	r3, [r7, #14]
 8000ab8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000abc:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	899b      	ldrh	r3, [r3, #12]
 8000ac2:	021b      	lsls	r3, r3, #8
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	89fb      	ldrh	r3, [r7, #14]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	885b      	ldrh	r3, [r3, #2]
 8000ad0:	021b      	lsls	r3, r3, #8
 8000ad2:	b29a      	uxth	r2, r3
 8000ad4:	89fb      	ldrh	r3, [r7, #14]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a22      	ldr	r2, [pc, #136]	; (8000b68 <TIM_OC3Init+0x104>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d003      	beq.n	8000aea <TIM_OC3Init+0x86>
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	4a21      	ldr	r2, [pc, #132]	; (8000b6c <TIM_OC3Init+0x108>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d12b      	bne.n	8000b42 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8000aea:	89fb      	ldrh	r3, [r7, #14]
 8000aec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000af0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	89db      	ldrh	r3, [r3, #14]
 8000af6:	021b      	lsls	r3, r3, #8
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	89fb      	ldrh	r3, [r7, #14]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8000b00:	89fb      	ldrh	r3, [r7, #14]
 8000b02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000b06:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	889b      	ldrh	r3, [r3, #4]
 8000b0c:	021b      	lsls	r3, r3, #8
 8000b0e:	b29a      	uxth	r2, r3
 8000b10:	89fb      	ldrh	r3, [r7, #14]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 8000b16:	89bb      	ldrh	r3, [r7, #12]
 8000b18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000b1c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 8000b1e:	89bb      	ldrh	r3, [r7, #12]
 8000b20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000b24:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	8a1b      	ldrh	r3, [r3, #16]
 8000b2a:	011b      	lsls	r3, r3, #4
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	89bb      	ldrh	r3, [r7, #12]
 8000b30:	4313      	orrs	r3, r2
 8000b32:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	8a5b      	ldrh	r3, [r3, #18]
 8000b38:	011b      	lsls	r3, r3, #4
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	89bb      	ldrh	r3, [r7, #12]
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	89ba      	ldrh	r2, [r7, #12]
 8000b46:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	897a      	ldrh	r2, [r7, #10]
 8000b4c:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	689a      	ldr	r2, [r3, #8]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	89fa      	ldrh	r2, [r7, #14]
 8000b5a:	841a      	strh	r2, [r3, #32]
}
 8000b5c:	bf00      	nop
 8000b5e:	3714      	adds	r7, #20
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr
 8000b68:	40010000 	.word	0x40010000
 8000b6c:	40010400 	.word	0x40010400

08000b70 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	81bb      	strh	r3, [r7, #12]
 8000b7e:	2300      	movs	r3, #0
 8000b80:	817b      	strh	r3, [r7, #10]
 8000b82:	2300      	movs	r3, #0
 8000b84:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	8c1b      	ldrh	r3, [r3, #32]
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000b90:	b29a      	uxth	r2, r3
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	8c1b      	ldrh	r3, [r3, #32]
 8000b9a:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	889b      	ldrh	r3, [r3, #4]
 8000ba0:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	8b9b      	ldrh	r3, [r3, #28]
 8000ba6:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8000ba8:	89bb      	ldrh	r3, [r7, #12]
 8000baa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000bae:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8000bb0:	89bb      	ldrh	r3, [r7, #12]
 8000bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bb6:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	881b      	ldrh	r3, [r3, #0]
 8000bbc:	021b      	lsls	r3, r3, #8
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	89bb      	ldrh	r3, [r7, #12]
 8000bc2:	4313      	orrs	r3, r2
 8000bc4:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8000bc6:	897b      	ldrh	r3, [r7, #10]
 8000bc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000bcc:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	899b      	ldrh	r3, [r3, #12]
 8000bd2:	031b      	lsls	r3, r3, #12
 8000bd4:	b29a      	uxth	r2, r3
 8000bd6:	897b      	ldrh	r3, [r7, #10]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	885b      	ldrh	r3, [r3, #2]
 8000be0:	031b      	lsls	r3, r3, #12
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	897b      	ldrh	r3, [r7, #10]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a12      	ldr	r2, [pc, #72]	; (8000c38 <TIM_OC4Init+0xc8>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d003      	beq.n	8000bfa <TIM_OC4Init+0x8a>
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a11      	ldr	r2, [pc, #68]	; (8000c3c <TIM_OC4Init+0xcc>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d10a      	bne.n	8000c10 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8000bfa:	89fb      	ldrh	r3, [r7, #14]
 8000bfc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c00:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	8a1b      	ldrh	r3, [r3, #16]
 8000c06:	019b      	lsls	r3, r3, #6
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	89fb      	ldrh	r3, [r7, #14]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	89fa      	ldrh	r2, [r7, #14]
 8000c14:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	89ba      	ldrh	r2, [r7, #12]
 8000c1a:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	689a      	ldr	r2, [r3, #8]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	897a      	ldrh	r2, [r7, #10]
 8000c28:	841a      	strh	r2, [r3, #32]
}
 8000c2a:	bf00      	nop
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	40010000 	.word	0x40010000
 8000c3c:	40010400 	.word	0x40010400

08000c40 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	460b      	mov	r3, r1
 8000c4a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	8b9b      	ldrh	r3, [r3, #28]
 8000c54:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8000c56:	89fb      	ldrh	r3, [r7, #14]
 8000c58:	f023 0308 	bic.w	r3, r3, #8
 8000c5c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8000c5e:	89fa      	ldrh	r2, [r7, #14]
 8000c60:	887b      	ldrh	r3, [r7, #2]
 8000c62:	4313      	orrs	r3, r2
 8000c64:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	89fa      	ldrh	r2, [r7, #14]
 8000c6a:	839a      	strh	r2, [r3, #28]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	8b9b      	ldrh	r3, [r3, #28]
 8000c8c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8000c8e:	89fb      	ldrh	r3, [r7, #14]
 8000c90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000c94:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8000c96:	887b      	ldrh	r3, [r7, #2]
 8000c98:	021b      	lsls	r3, r3, #8
 8000c9a:	b29a      	uxth	r2, r3
 8000c9c:	89fb      	ldrh	r3, [r7, #14]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	89fa      	ldrh	r2, [r7, #14]
 8000ca6:	839a      	strh	r2, [r3, #28]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000cb4:	b480      	push	{r7}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	460b      	mov	r3, r1
 8000cbe:	807b      	strh	r3, [r7, #2]
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000cc4:	787b      	ldrb	r3, [r7, #1]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d008      	beq.n	8000cdc <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	899b      	ldrh	r3, [r3, #12]
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	887b      	ldrh	r3, [r7, #2]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000cda:	e009      	b.n	8000cf0 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	899b      	ldrh	r3, [r3, #12]
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	887b      	ldrh	r3, [r7, #2]
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	4013      	ands	r3, r2
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	819a      	strh	r2, [r3, #12]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
 8000d04:	460b      	mov	r3, r1
 8000d06:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000d08:	887b      	ldrh	r3, [r7, #2]
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	821a      	strh	r2, [r3, #16]
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
 8000d26:	460b      	mov	r3, r1
 8000d28:	807b      	strh	r3, [r7, #2]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000d2e:	787b      	ldrb	r3, [r7, #1]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d008      	beq.n	8000d46 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	899b      	ldrh	r3, [r3, #12]
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	887b      	ldrh	r3, [r7, #2]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
 8000d44:	e009      	b.n	8000d5a <TIM_DMACmd+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	899b      	ldrh	r3, [r3, #12]
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	887b      	ldrh	r3, [r7, #2]
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	4013      	ands	r3, r2
 8000d54:	b29a      	uxth	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	819a      	strh	r2, [r3, #12]
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
	...

08000d68 <UB_VGA_Screen_Init>:

//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
  uint16_t xp,yp;

  VGA.hsync_cnt=0;
 8000d6e:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <UB_VGA_Screen_Init+0x74>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	801a      	strh	r2, [r3, #0]
  VGA.start_adr=0;
 8000d74:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <UB_VGA_Screen_Init+0x74>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg=0;
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <UB_VGA_Screen_Init+0x74>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]

  // RAM init total black
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8000d80:	2300      	movs	r3, #0
 8000d82:	80bb      	strh	r3, [r7, #4]
 8000d84:	e017      	b.n	8000db6 <UB_VGA_Screen_Init+0x4e>
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 8000d86:	2300      	movs	r3, #0
 8000d88:	80fb      	strh	r3, [r7, #6]
 8000d8a:	e00d      	b.n	8000da8 <UB_VGA_Screen_Init+0x40>
      VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=0;
 8000d8c:	88ba      	ldrh	r2, [r7, #4]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	4413      	add	r3, r2
 8000d94:	019b      	lsls	r3, r3, #6
 8000d96:	441a      	add	r2, r3
 8000d98:	88fb      	ldrh	r3, [r7, #6]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	4a10      	ldr	r2, [pc, #64]	; (8000de0 <UB_VGA_Screen_Init+0x78>)
 8000d9e:	2100      	movs	r1, #0
 8000da0:	54d1      	strb	r1, [r2, r3]
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 8000da2:	88fb      	ldrh	r3, [r7, #6]
 8000da4:	3301      	adds	r3, #1
 8000da6:	80fb      	strh	r3, [r7, #6]
 8000da8:	88fb      	ldrh	r3, [r7, #6]
 8000daa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000dae:	d9ed      	bls.n	8000d8c <UB_VGA_Screen_Init+0x24>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8000db0:	88bb      	ldrh	r3, [r7, #4]
 8000db2:	3301      	adds	r3, #1
 8000db4:	80bb      	strh	r3, [r7, #4]
 8000db6:	88bb      	ldrh	r3, [r7, #4]
 8000db8:	2bef      	cmp	r3, #239	; 0xef
 8000dba:	d9e4      	bls.n	8000d86 <UB_VGA_Screen_Init+0x1e>
    }
  }

  // init IO-Pins
  P_VGA_InitIO();
 8000dbc:	f000 f85e 	bl	8000e7c <P_VGA_InitIO>
  // init Timer
  P_VGA_InitTIM();
 8000dc0:	f000 f8b0 	bl	8000f24 <P_VGA_InitTIM>
  // init DMA
  P_VGA_InitDMA();
 8000dc4:	f000 f940 	bl	8001048 <P_VGA_InitDMA>
  // init Interrupts
  P_VGA_InitINT();
 8000dc8:	f000 f912 	bl	8000ff0 <P_VGA_InitINT>

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg=DMA2_Stream5->CR;
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <UB_VGA_Screen_Init+0x7c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a02      	ldr	r2, [pc, #8]	; (8000ddc <UB_VGA_Screen_Init+0x74>)
 8000dd2:	6093      	str	r3, [r2, #8]
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	2000001c 	.word	0x2000001c
 8000de0:	20000028 	.word	0x20000028
 8000de4:	40026488 	.word	0x40026488

08000de8 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8000df2:	2300      	movs	r3, #0
 8000df4:	81bb      	strh	r3, [r7, #12]
 8000df6:	e012      	b.n	8000e1e <UB_VGA_FillScreen+0x36>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 8000df8:	2300      	movs	r3, #0
 8000dfa:	81fb      	strh	r3, [r7, #14]
 8000dfc:	e008      	b.n	8000e10 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp,yp,color);
 8000dfe:	79fa      	ldrb	r2, [r7, #7]
 8000e00:	89b9      	ldrh	r1, [r7, #12]
 8000e02:	89fb      	ldrh	r3, [r7, #14]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 f811 	bl	8000e2c <UB_VGA_SetPixel>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 8000e0a:	89fb      	ldrh	r3, [r7, #14]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	81fb      	strh	r3, [r7, #14]
 8000e10:	89fb      	ldrh	r3, [r7, #14]
 8000e12:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000e16:	d3f2      	bcc.n	8000dfe <UB_VGA_FillScreen+0x16>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8000e18:	89bb      	ldrh	r3, [r7, #12]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	81bb      	strh	r3, [r7, #12]
 8000e1e:	89bb      	ldrh	r3, [r7, #12]
 8000e20:	2bef      	cmp	r3, #239	; 0xef
 8000e22:	d9e9      	bls.n	8000df8 <UB_VGA_FillScreen+0x10>
    }
  }
}
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	80fb      	strh	r3, [r7, #6]
 8000e36:	460b      	mov	r3, r1
 8000e38:	80bb      	strh	r3, [r7, #4]
 8000e3a:	4613      	mov	r3, r2
 8000e3c:	70fb      	strb	r3, [r7, #3]
  if(xp>=VGA_DISPLAY_X) xp=0;
 8000e3e:	88fb      	ldrh	r3, [r7, #6]
 8000e40:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000e44:	d301      	bcc.n	8000e4a <UB_VGA_SetPixel+0x1e>
 8000e46:	2300      	movs	r3, #0
 8000e48:	80fb      	strh	r3, [r7, #6]
  if(yp>=VGA_DISPLAY_Y) yp=0;
 8000e4a:	88bb      	ldrh	r3, [r7, #4]
 8000e4c:	2bef      	cmp	r3, #239	; 0xef
 8000e4e:	d901      	bls.n	8000e54 <UB_VGA_SetPixel+0x28>
 8000e50:	2300      	movs	r3, #0
 8000e52:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=color;
 8000e54:	88ba      	ldrh	r2, [r7, #4]
 8000e56:	4613      	mov	r3, r2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	4413      	add	r3, r2
 8000e5c:	019b      	lsls	r3, r3, #6
 8000e5e:	441a      	add	r2, r3
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	4413      	add	r3, r2
 8000e64:	4904      	ldr	r1, [pc, #16]	; (8000e78 <UB_VGA_SetPixel+0x4c>)
 8000e66:	78fa      	ldrb	r2, [r7, #3]
 8000e68:	54ca      	strb	r2, [r1, r3]
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000028 	.word	0x20000028

08000e7c <P_VGA_InitIO>:
//--------------------------------------------------------------
// interne Funktionen
// init aller IO-Pins
//--------------------------------------------------------------
void P_VGA_InitIO(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
  // init RGB-Pins (PE8 - PE15)
  // as normal GPIOs
  //---------------------------------------------
 
  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8000e82:	2101      	movs	r1, #1
 8000e84:	2010      	movs	r0, #16
 8000e86:	f7ff fce1 	bl	800084c <RCC_AHB1PeriphClockCmd>

  // Config as Digital output
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 |
 8000e8a:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000e8e:	603b      	str	r3, [r7, #0]
        GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000e90:	2301      	movs	r3, #1
 8000e92:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000e94:	2300      	movs	r3, #0
 8000e96:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOE, &GPIO_InitStructure);
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	481d      	ldr	r0, [pc, #116]	; (8000f1c <P_VGA_InitIO+0xa0>)
 8000ea6:	f7ff fbf9 	bl	800069c <GPIO_Init>

  GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <P_VGA_InitIO+0xa0>)
 8000eac:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8000eb0:	835a      	strh	r2, [r3, #26]
  // init of the H-Sync Pin (PB11)
  // using Timer2 and CH4
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	2002      	movs	r0, #2
 8000eb6:	f7ff fcc9 	bl	800084c <RCC_AHB1PeriphClockCmd>

  // Config Pins as Digital-out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 8000eba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ebe:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000ed0:	463b      	mov	r3, r7
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4812      	ldr	r0, [pc, #72]	; (8000f20 <P_VGA_InitIO+0xa4>)
 8000ed6:	f7ff fbe1 	bl	800069c <GPIO_Init>

  // alternative function connect with IO
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_TIM2);
 8000eda:	2201      	movs	r2, #1
 8000edc:	210b      	movs	r1, #11
 8000ede:	4810      	ldr	r0, [pc, #64]	; (8000f20 <P_VGA_InitIO+0xa4>)
 8000ee0:	f7ff fc6a 	bl	80007b8 <GPIO_PinAFConfig>
  // init of V-Sync Pin (PB12)
  // using GPIO
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000ee4:	2101      	movs	r1, #1
 8000ee6:	2002      	movs	r0, #2
 8000ee8:	f7ff fcb0 	bl	800084c <RCC_AHB1PeriphClockCmd>

  // Config of the Pins as Digital out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8000eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef0:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000efa:	2301      	movs	r3, #1
 8000efc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8000efe:	2303      	movs	r3, #3
 8000f00:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000f02:	463b      	mov	r3, r7
 8000f04:	4619      	mov	r1, r3
 8000f06:	4806      	ldr	r0, [pc, #24]	; (8000f20 <P_VGA_InitIO+0xa4>)
 8000f08:	f7ff fbc8 	bl	800069c <GPIO_Init>

  GPIOB->BSRRL = GPIO_Pin_12;
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <P_VGA_InitIO+0xa4>)
 8000f0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f12:	831a      	strh	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40020400 	.word	0x40020400

08000f24 <P_VGA_InitTIM>:
//--------------------------------------------------------------
// internal Function
// init Timer
//--------------------------------------------------------------
void P_VGA_InitTIM(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
  // init of Timer1 for
  // Pixeldata via DMA
  //---------------------------------------------

  // Clock enable
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f7ff fccd 	bl	80008cc <RCC_APB2PeriphClockCmd>

  // Timer1 init
  TIM_TimeBaseStructure.TIM_Period =  VGA_TIM1_PERIODE;
 8000f32:	230b      	movs	r3, #11
 8000f34:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM1_PRESCALE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 8000f42:	f107 0314 	add.w	r3, r7, #20
 8000f46:	4619      	mov	r1, r3
 8000f48:	4828      	ldr	r0, [pc, #160]	; (8000fec <P_VGA_InitTIM+0xc8>)
 8000f4a:	f7ff fcdf 	bl	800090c <TIM_TimeBaseInit>
  // CH4 for HSYNC-Signal
  // CH3 for DMA Trigger start
  //---------------------------------------------

  // Clock enable
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000f4e:	2101      	movs	r1, #1
 8000f50:	2001      	movs	r0, #1
 8000f52:	f7ff fc9b 	bl	800088c <RCC_APB1PeriphClockCmd>

  // Timer2 init
  TIM_TimeBaseStructure.TIM_Period = VGA_TIM2_HSYNC_PERIODE;
 8000f56:	f640 236b 	movw	r3, #2667	; 0xa6b
 8000f5a:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8000f64:	2300      	movs	r3, #0
 8000f66:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f72:	f7ff fccb 	bl	800090c <TIM_TimeBaseInit>

  // Timer2 Channel 3 ( for DMA Trigger start)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8000f76:	2360      	movs	r3, #96	; 0x60
 8000f78:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HTRIGGER_START-VGA_TIM2_DMA_DELAY;
 8000f7e:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8000f82:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8000f84:	2302      	movs	r3, #2
 8000f86:	81bb      	strh	r3, [r7, #12]
  TIM_OC3Init(TIM2, &TIM_OCInitStructure);
 8000f88:	463b      	mov	r3, r7
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f90:	f7ff fd68 	bl	8000a64 <TIM_OC3Init>
  TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8000f94:	2108      	movs	r1, #8
 8000f96:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f9a:	f7ff fe51 	bl	8000c40 <TIM_OC3PreloadConfig>

  // Timer2 Channel 4 (for HSYNC)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8000f9e:	2360      	movs	r3, #96	; 0x60
 8000fa0:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HSYNC_IMP;
 8000fa6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000faa:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8000fac:	2302      	movs	r3, #2
 8000fae:	81bb      	strh	r3, [r7, #12]
  TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000fb8:	f7ff fdda 	bl	8000b70 <TIM_OC4Init>
  TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8000fbc:	2108      	movs	r1, #8
 8000fbe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000fc2:	f7ff fe59 	bl	8000c78 <TIM_OC4PreloadConfig>
  //---------------------------------------------
  // enable all Timers
  //---------------------------------------------

  // Timer1 enable
  TIM_ARRPreloadConfig(TIM1, ENABLE);
 8000fc6:	2101      	movs	r1, #1
 8000fc8:	4808      	ldr	r0, [pc, #32]	; (8000fec <P_VGA_InitTIM+0xc8>)
 8000fca:	f7ff fd0b 	bl	80009e4 <TIM_ARRPreloadConfig>

  // Timer2 enable
  TIM_ARRPreloadConfig(TIM2, ENABLE);
 8000fce:	2101      	movs	r1, #1
 8000fd0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000fd4:	f7ff fd06 	bl	80009e4 <TIM_ARRPreloadConfig>
  TIM_Cmd(TIM2, ENABLE);
 8000fd8:	2101      	movs	r1, #1
 8000fda:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000fde:	f7ff fd21 	bl	8000a24 <TIM_Cmd>

}
 8000fe2:	bf00      	nop
 8000fe4:	3720      	adds	r7, #32
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40010000 	.word	0x40010000

08000ff0 <P_VGA_InitINT>:
//--------------------------------------------------------------
// internal Function
// init Interrupts
//--------------------------------------------------------------
void P_VGA_InitINT(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
  // init from DMA Interrupt
  // for TransferComplete Interrupt
  // DMA2, Stream5, Channel6
  //---------------------------------------------

  DMA_ITConfig(DMA2_Stream5, DMA_IT_TC, ENABLE);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2110      	movs	r1, #16
 8000ffa:	4812      	ldr	r0, [pc, #72]	; (8001044 <P_VGA_InitINT+0x54>)
 8000ffc:	f7ff fa8e 	bl	800051c <DMA_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream5_IRQn;
 8001000:	2344      	movs	r3, #68	; 0x44
 8001002:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001004:	2300      	movs	r3, #0
 8001006:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800100c:	2301      	movs	r3, #1
 800100e:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff f8d8 	bl	80001c8 <NVIC_Init>
  // init of Timer2 Interrupt
  // for HSync-Counter using Update
  // for DMA Trigger START using CH3
  //---------------------------------------------

  TIM_ITConfig(TIM2,TIM_IT_CC3,ENABLE);
 8001018:	2201      	movs	r2, #1
 800101a:	2108      	movs	r1, #8
 800101c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001020:	f7ff fe48 	bl	8000cb4 <TIM_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8001024:	231c      	movs	r3, #28
 8001026:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001030:	2301      	movs	r3, #1
 8001032:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff f8c6 	bl	80001c8 <NVIC_Init>
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40026488 	.word	0x40026488

08001048 <P_VGA_InitDMA>:
//--------------------------------------------------------------
// internal Function
// init DMA
//--------------------------------------------------------------
void P_VGA_InitDMA(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b090      	sub	sp, #64	; 0x40
 800104c:	af00      	add	r7, sp, #0
  // (look at page 217 of the Ref Manual)
  // DMA=2, Channel=6, Stream=5
  //---------------------------------------------

  // Clock Enable (DMA)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 800104e:	2101      	movs	r1, #1
 8001050:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001054:	f7ff fbfa 	bl	800084c <RCC_AHB1PeriphClockCmd>

  // DMA init (DMA2, Channel6, Stream5)
  DMA_Cmd(DMA2_Stream5, DISABLE);
 8001058:	2100      	movs	r1, #0
 800105a:	481b      	ldr	r0, [pc, #108]	; (80010c8 <P_VGA_InitDMA+0x80>)
 800105c:	f7ff fa42 	bl	80004e4 <DMA_Cmd>
  DMA_DeInit(DMA2_Stream5);
 8001060:	4819      	ldr	r0, [pc, #100]	; (80010c8 <P_VGA_InitDMA+0x80>)
 8001062:	f7ff f913 	bl	800028c <DMA_DeInit>
  DMA_InitStructure.DMA_Channel = DMA_Channel_6;
 8001066:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800106a:	607b      	str	r3, [r7, #4]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)VGA_GPIOE_ODR_ADDRESS;
 800106c:	4b17      	ldr	r3, [pc, #92]	; (80010cc <P_VGA_InitDMA+0x84>)
 800106e:	60bb      	str	r3, [r7, #8]
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&VGA_RAM1;
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <P_VGA_InitDMA+0x88>)
 8001072:	60fb      	str	r3, [r7, #12]
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8001074:	2340      	movs	r3, #64	; 0x40
 8001076:	613b      	str	r3, [r7, #16]
  DMA_InitStructure.DMA_BufferSize = VGA_DISPLAY_X+1;
 8001078:	f240 1341 	movw	r3, #321	; 0x141
 800107c:	617b      	str	r3, [r7, #20]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8001082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001086:	61fb      	str	r3, [r7, #28]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8001088:	2300      	movs	r3, #0
 800108a:	623b      	str	r3, [r7, #32]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 800108c:	2300      	movs	r3, #0
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8001090:	2300      	movs	r3, #0
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8001094:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 800109a:	2300      	movs	r3, #0
 800109c:	633b      	str	r3, [r7, #48]	; 0x30
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 800109e:	2301      	movs	r3, #1
 80010a0:	637b      	str	r3, [r7, #52]	; 0x34
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80010a2:	2300      	movs	r3, #0
 80010a4:	63bb      	str	r3, [r7, #56]	; 0x38
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80010a6:	2300      	movs	r3, #0
 80010a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  DMA_Init(DMA2_Stream5, &DMA_InitStructure);
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	4619      	mov	r1, r3
 80010ae:	4806      	ldr	r0, [pc, #24]	; (80010c8 <P_VGA_InitDMA+0x80>)
 80010b0:	f7ff f9c0 	bl	8000434 <DMA_Init>

  // DMA-Timer1 enable
  TIM_DMACmd(TIM1,TIM_DMA_Update,ENABLE);
 80010b4:	2201      	movs	r2, #1
 80010b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ba:	4806      	ldr	r0, [pc, #24]	; (80010d4 <P_VGA_InitDMA+0x8c>)
 80010bc:	f7ff fe2f 	bl	8000d1e <TIM_DMACmd>
}
 80010c0:	bf00      	nop
 80010c2:	3740      	adds	r7, #64	; 0x40
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40026488 	.word	0x40026488
 80010cc:	40021015 	.word	0x40021015
 80010d0:	20000028 	.word	0x20000028
 80010d4:	40010000 	.word	0x40010000

080010d8 <TIM2_IRQHandler>:
//
//   CC3-Interrupt    -> starts from DMA
// Watch it.. higher troughput when interrupt flag is left alone
//--------------------------------------------------------------
void TIM2_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0

  // Interrupt of Timer2 CH3 occurred (for Trigger start)
  TIM_ClearITPendingBit(TIM2, TIM_IT_CC3);
 80010dc:	2108      	movs	r1, #8
 80010de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80010e2:	f7ff fe0b 	bl	8000cfc <TIM_ClearITPendingBit>

  VGA.hsync_cnt++;
 80010e6:	4b26      	ldr	r3, [pc, #152]	; (8001180 <TIM2_IRQHandler+0xa8>)
 80010e8:	881b      	ldrh	r3, [r3, #0]
 80010ea:	3301      	adds	r3, #1
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	4b24      	ldr	r3, [pc, #144]	; (8001180 <TIM2_IRQHandler+0xa8>)
 80010f0:	801a      	strh	r2, [r3, #0]
  if(VGA.hsync_cnt>=VGA_VSYNC_PERIODE) {
 80010f2:	4b23      	ldr	r3, [pc, #140]	; (8001180 <TIM2_IRQHandler+0xa8>)
 80010f4:	881b      	ldrh	r3, [r3, #0]
 80010f6:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 80010fa:	d905      	bls.n	8001108 <TIM2_IRQHandler+0x30>
    // -----------
    VGA.hsync_cnt=0;
 80010fc:	4b20      	ldr	r3, [pc, #128]	; (8001180 <TIM2_IRQHandler+0xa8>)
 80010fe:	2200      	movs	r2, #0
 8001100:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr=(uint32_t)(&VGA_RAM1[0]);
 8001102:	4a20      	ldr	r2, [pc, #128]	; (8001184 <TIM2_IRQHandler+0xac>)
 8001104:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <TIM2_IRQHandler+0xa8>)
 8001106:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  if(VGA.hsync_cnt<VGA_VSYNC_IMP) {
 8001108:	4b1d      	ldr	r3, [pc, #116]	; (8001180 <TIM2_IRQHandler+0xa8>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d804      	bhi.n	800111a <TIM2_IRQHandler+0x42>
    // HSync low
    GPIOB->BSRRH = GPIO_Pin_12;
 8001110:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <TIM2_IRQHandler+0xb0>)
 8001112:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001116:	835a      	strh	r2, [r3, #26]
 8001118:	e003      	b.n	8001122 <TIM2_IRQHandler+0x4a>
  }
  else {
    // HSync High
    GPIOB->BSRRL = GPIO_Pin_12;
 800111a:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <TIM2_IRQHandler+0xb0>)
 800111c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001120:	831a      	strh	r2, [r3, #24]
  }

  // Test for DMA start
  if((VGA.hsync_cnt>=VGA_VSYNC_BILD_START) && (VGA.hsync_cnt<=VGA_VSYNC_BILD_STOP)) {
 8001122:	4b17      	ldr	r3, [pc, #92]	; (8001180 <TIM2_IRQHandler+0xa8>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	2b23      	cmp	r3, #35	; 0x23
 8001128:	d927      	bls.n	800117a <TIM2_IRQHandler+0xa2>
 800112a:	4b15      	ldr	r3, [pc, #84]	; (8001180 <TIM2_IRQHandler+0xa8>)
 800112c:	881b      	ldrh	r3, [r3, #0]
 800112e:	f240 2202 	movw	r2, #514	; 0x202
 8001132:	4293      	cmp	r3, r2
 8001134:	d821      	bhi.n	800117a <TIM2_IRQHandler+0xa2>
    // after FP start => DMA Transfer

    // DMA2 init
	DMA2_Stream5->CR=VGA.dma2_cr_reg;
 8001136:	4a15      	ldr	r2, [pc, #84]	; (800118c <TIM2_IRQHandler+0xb4>)
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <TIM2_IRQHandler+0xa8>)
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR=VGA.start_adr;
 800113e:	4a13      	ldr	r2, [pc, #76]	; (800118c <TIM2_IRQHandler+0xb4>)
 8001140:	4b0f      	ldr	r3, [pc, #60]	; (8001180 <TIM2_IRQHandler+0xa8>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1|=TIM_CR1_CEN;
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <TIM2_IRQHandler+0xb8>)
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <TIM2_IRQHandler+0xb8>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	b29b      	uxth	r3, r3
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	b29b      	uxth	r3, r3
 8001154:	8013      	strh	r3, [r2, #0]
    // DMA2 enable
    DMA2_Stream5->CR|=DMA_SxCR_EN;
 8001156:	4a0d      	ldr	r2, [pc, #52]	; (800118c <TIM2_IRQHandler+0xb4>)
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <TIM2_IRQHandler+0xb4>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6013      	str	r3, [r2, #0]

    // Test Adrespointer for high
    if((VGA.hsync_cnt & 0x01)!=0) {
 8001162:	4b07      	ldr	r3, [pc, #28]	; (8001180 <TIM2_IRQHandler+0xa8>)
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b00      	cmp	r3, #0
 800116c:	d005      	beq.n	800117a <TIM2_IRQHandler+0xa2>
      // inc after Hsync
      VGA.start_adr+=(VGA_DISPLAY_X+1);
 800116e:	4b04      	ldr	r3, [pc, #16]	; (8001180 <TIM2_IRQHandler+0xa8>)
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f203 1341 	addw	r3, r3, #321	; 0x141
 8001176:	4a02      	ldr	r2, [pc, #8]	; (8001180 <TIM2_IRQHandler+0xa8>)
 8001178:	6053      	str	r3, [r2, #4]
    }
  }
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	2000001c 	.word	0x2000001c
 8001184:	20000028 	.word	0x20000028
 8001188:	40020400 	.word	0x40020400
 800118c:	40026488 	.word	0x40026488
 8001190:	40010000 	.word	0x40010000

08001194 <DMA2_Stream5_IRQHandler>:
//   after TransferCompleteInterrupt -> stop DMA
//
// still a bit buggy
//--------------------------------------------------------------
void DMA2_Stream5_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  if(DMA_GetITStatus(DMA2_Stream5, DMA_IT_TCIF5))
 8001198:	490d      	ldr	r1, [pc, #52]	; (80011d0 <DMA2_Stream5_IRQHandler+0x3c>)
 800119a:	480e      	ldr	r0, [pc, #56]	; (80011d4 <DMA2_Stream5_IRQHandler+0x40>)
 800119c:	f7ff f9f8 	bl	8000590 <DMA_GetITStatus>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d012      	beq.n	80011cc <DMA2_Stream5_IRQHandler+0x38>
  {
    // TransferInterruptComplete Interrupt from DMA2
    DMA_ClearITPendingBit(DMA2_Stream5, DMA_IT_TCIF5);
 80011a6:	490a      	ldr	r1, [pc, #40]	; (80011d0 <DMA2_Stream5_IRQHandler+0x3c>)
 80011a8:	480a      	ldr	r0, [pc, #40]	; (80011d4 <DMA2_Stream5_IRQHandler+0x40>)
 80011aa:	f7ff fa49 	bl	8000640 <DMA_ClearITPendingBit>
    // stop after all pixels => DMA Transfer stop

    // Timer1 stop
    TIM1->CR1&=~TIM_CR1_CEN;
 80011ae:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <DMA2_Stream5_IRQHandler+0x44>)
 80011b0:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <DMA2_Stream5_IRQHandler+0x44>)
 80011b2:	881b      	ldrh	r3, [r3, #0]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	f023 0301 	bic.w	r3, r3, #1
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	8013      	strh	r3, [r2, #0]
    // DMA2 disable
    DMA2_Stream5->CR=0;
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <DMA2_Stream5_IRQHandler+0x40>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
    // switch on black
    GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <DMA2_Stream5_IRQHandler+0x48>)
 80011c6:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80011ca:	835a      	strh	r2, [r3, #26]
  }
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	20008800 	.word	0x20008800
 80011d4:	40026488 	.word	0x40026488
 80011d8:	40010000 	.word	0x40010000
 80011dc:	40021000 	.word	0x40021000

080011e0 <main>:
#include "main.h"
#include "stm32_ub_vga_screen.h"
#include <math.h>

int main(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0
	//  uint32_t n;

	SystemInit(); // System speed to 168MHz
 80011e6:	f000 f8b3 	bl	8001350 <SystemInit>

	UB_VGA_Screen_Init(); // Init VGA-Screen
 80011ea:	f7ff fdbd 	bl	8000d68 <UB_VGA_Screen_Init>



	UB_VGA_FillScreen(VGA_COL_BLACK);
 80011ee:	2000      	movs	r0, #0
 80011f0:	f7ff fdfa 	bl	8000de8 <UB_VGA_FillScreen>
	UB_VGA_SetPixel(10,10,127);
 80011f4:	227f      	movs	r2, #127	; 0x7f
 80011f6:	210a      	movs	r1, #10
 80011f8:	200a      	movs	r0, #10
 80011fa:	f7ff fe17 	bl	8000e2c <UB_VGA_SetPixel>

	int x1,x2,y1,y2;
	int i,j,k,l;

	x1 = 50;
 80011fe:	2332      	movs	r3, #50	; 0x32
 8001200:	60fb      	str	r3, [r7, #12]
	y1 = 50;
 8001202:	2332      	movs	r3, #50	; 0x32
 8001204:	60bb      	str	r3, [r7, #8]
	x2 = 100;
 8001206:	2364      	movs	r3, #100	; 0x64
 8001208:	607b      	str	r3, [r7, #4]
	y2 = 100;
 800120a:	2364      	movs	r3, #100	; 0x64
 800120c:	603b      	str	r3, [r7, #0]

	for(i=x1;i<=x2;i++)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	61fb      	str	r3, [r7, #28]
 8001212:	e00a      	b.n	800122a <main+0x4a>
		UB_VGA_SetPixel(i,y1,127);
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	b29b      	uxth	r3, r3
 8001218:	68ba      	ldr	r2, [r7, #8]
 800121a:	b291      	uxth	r1, r2
 800121c:	227f      	movs	r2, #127	; 0x7f
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff fe04 	bl	8000e2c <UB_VGA_SetPixel>
	for(i=x1;i<=x2;i++)
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	3301      	adds	r3, #1
 8001228:	61fb      	str	r3, [r7, #28]
 800122a:	69fa      	ldr	r2, [r7, #28]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	429a      	cmp	r2, r3
 8001230:	ddf0      	ble.n	8001214 <main+0x34>
	for(j=x1;j<=x2;j++)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	61bb      	str	r3, [r7, #24]
 8001236:	e00a      	b.n	800124e <main+0x6e>
		UB_VGA_SetPixel(j,y2,200);
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	b29b      	uxth	r3, r3
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	b291      	uxth	r1, r2
 8001240:	22c8      	movs	r2, #200	; 0xc8
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fdf2 	bl	8000e2c <UB_VGA_SetPixel>
	for(j=x1;j<=x2;j++)
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	3301      	adds	r3, #1
 800124c:	61bb      	str	r3, [r7, #24]
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	429a      	cmp	r2, r3
 8001254:	ddf0      	ble.n	8001238 <main+0x58>
	for(k=y1;k<=y2;k++)
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	e00a      	b.n	8001272 <main+0x92>
		UB_VGA_SetPixel(x1,k,50);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	b29b      	uxth	r3, r3
 8001260:	697a      	ldr	r2, [r7, #20]
 8001262:	b291      	uxth	r1, r2
 8001264:	2232      	movs	r2, #50	; 0x32
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fde0 	bl	8000e2c <UB_VGA_SetPixel>
	for(k=y1;k<=y2;k++)
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	3301      	adds	r3, #1
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	429a      	cmp	r2, r3
 8001278:	ddf0      	ble.n	800125c <main+0x7c>
	for(l=y1;l<=y2;l++)
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	e00a      	b.n	8001296 <main+0xb6>
		UB_VGA_SetPixel(x2,l,255);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	b29b      	uxth	r3, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	b291      	uxth	r1, r2
 8001288:	22ff      	movs	r2, #255	; 0xff
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fdce 	bl	8000e2c <UB_VGA_SetPixel>
	for(l=y1;l<=y2;l++)
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	3301      	adds	r3, #1
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	429a      	cmp	r2, r3
 800129c:	ddf0      	ble.n	8001280 <main+0xa0>

  while(1)
 800129e:	e7fe      	b.n	800129e <main+0xbe>

080012a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80012a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80012a6:	e003      	b.n	80012b0 <LoopCopyDataInit>

080012a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80012aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80012ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80012ae:	3104      	adds	r1, #4

080012b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80012b0:	480b      	ldr	r0, [pc, #44]	; (80012e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80012b2:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80012b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80012b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80012b8:	d3f6      	bcc.n	80012a8 <CopyDataInit>
  ldr  r2, =_sbss
 80012ba:	4a0b      	ldr	r2, [pc, #44]	; (80012e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80012bc:	e002      	b.n	80012c4 <LoopFillZerobss>

080012be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80012be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80012c0:	f842 3b04 	str.w	r3, [r2], #4

080012c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80012c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80012c8:	d3f9      	bcc.n	80012be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012ca:	f000 f841 	bl	8001350 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012ce:	f000 f8f1 	bl	80014b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012d2:	f7ff ff85 	bl	80011e0 <main>
  bx  lr    
 80012d6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012d8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80012dc:	0800151c 	.word	0x0800151c
  ldr  r0, =_sdata
 80012e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80012e4:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 80012e8:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 80012ec:	20012d18 	.word	0x20012d18

080012f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012f0:	e7fe      	b.n	80012f0 <ADC_IRQHandler>

080012f2 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001304:	e7fe      	b.n	8001304 <HardFault_Handler+0x4>

08001306 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001306:	b480      	push	{r7}
 8001308:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800130a:	e7fe      	b.n	800130a <MemManage_Handler+0x4>

0800130c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001310:	e7fe      	b.n	8001310 <BusFault_Handler+0x4>

08001312 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001316:	e7fe      	b.n	8001316 <UsageFault_Handler+0x4>

08001318 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001342:	b480      	push	{r7}
 8001344:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001346:	bf00      	nop
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr

08001350 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001354:	4a16      	ldr	r2, [pc, #88]	; (80013b0 <SystemInit+0x60>)
 8001356:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <SystemInit+0x60>)
 8001358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800135c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001360:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001364:	4a13      	ldr	r2, [pc, #76]	; (80013b4 <SystemInit+0x64>)
 8001366:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <SystemInit+0x64>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001370:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <SystemInit+0x64>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001376:	4a0f      	ldr	r2, [pc, #60]	; (80013b4 <SystemInit+0x64>)
 8001378:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <SystemInit+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001384:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <SystemInit+0x64>)
 8001388:	4a0b      	ldr	r2, [pc, #44]	; (80013b8 <SystemInit+0x68>)
 800138a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800138c:	4a09      	ldr	r2, [pc, #36]	; (80013b4 <SystemInit+0x64>)
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <SystemInit+0x64>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001396:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001398:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <SystemInit+0x64>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800139e:	f000 f80d 	bl	80013bc <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80013a2:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <SystemInit+0x60>)
 80013a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013a8:	609a      	str	r2, [r3, #8]
#endif
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	e000ed00 	.word	0xe000ed00
 80013b4:	40023800 	.word	0x40023800
 80013b8:	24003010 	.word	0x24003010

080013bc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	2300      	movs	r3, #0
 80013c8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80013ca:	4a36      	ldr	r2, [pc, #216]	; (80014a4 <SetSysClock+0xe8>)
 80013cc:	4b35      	ldr	r3, [pc, #212]	; (80014a4 <SetSysClock+0xe8>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80013d6:	4b33      	ldr	r3, [pc, #204]	; (80014a4 <SetSysClock+0xe8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3301      	adds	r3, #1
 80013e4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d103      	bne.n	80013f4 <SetSysClock+0x38>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80013f2:	d1f0      	bne.n	80013d6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80013f4:	4b2b      	ldr	r3, [pc, #172]	; (80014a4 <SetSysClock+0xe8>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d002      	beq.n	8001406 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001400:	2301      	movs	r3, #1
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	e001      	b.n	800140a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001406:	2300      	movs	r3, #0
 8001408:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d142      	bne.n	8001496 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001410:	4a24      	ldr	r2, [pc, #144]	; (80014a4 <SetSysClock+0xe8>)
 8001412:	4b24      	ldr	r3, [pc, #144]	; (80014a4 <SetSysClock+0xe8>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800141a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800141c:	4a22      	ldr	r2, [pc, #136]	; (80014a8 <SetSysClock+0xec>)
 800141e:	4b22      	ldr	r3, [pc, #136]	; (80014a8 <SetSysClock+0xec>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001426:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001428:	4a1e      	ldr	r2, [pc, #120]	; (80014a4 <SetSysClock+0xe8>)
 800142a:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <SetSysClock+0xe8>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8001430:	4a1c      	ldr	r2, [pc, #112]	; (80014a4 <SetSysClock+0xe8>)
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <SetSysClock+0xe8>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800143a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800143c:	4a19      	ldr	r2, [pc, #100]	; (80014a4 <SetSysClock+0xe8>)
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <SetSysClock+0xe8>)
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001446:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001448:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <SetSysClock+0xe8>)
 800144a:	4a18      	ldr	r2, [pc, #96]	; (80014ac <SetSysClock+0xf0>)
 800144c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800144e:	4a15      	ldr	r2, [pc, #84]	; (80014a4 <SetSysClock+0xe8>)
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <SetSysClock+0xe8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001458:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800145a:	bf00      	nop
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <SetSysClock+0xe8>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0f9      	beq.n	800145c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <SetSysClock+0xf4>)
 800146a:	f240 7205 	movw	r2, #1797	; 0x705
 800146e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001470:	4a0c      	ldr	r2, [pc, #48]	; (80014a4 <SetSysClock+0xe8>)
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <SetSysClock+0xe8>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f023 0303 	bic.w	r3, r3, #3
 800147a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800147c:	4a09      	ldr	r2, [pc, #36]	; (80014a4 <SetSysClock+0xe8>)
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <SetSysClock+0xe8>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f043 0302 	orr.w	r3, r3, #2
 8001486:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001488:	bf00      	nop
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <SetSysClock+0xe8>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b08      	cmp	r3, #8
 8001494:	d1f9      	bne.n	800148a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40007000 	.word	0x40007000
 80014ac:	07405419 	.word	0x07405419
 80014b0:	40023c00 	.word	0x40023c00

080014b4 <__libc_init_array>:
 80014b4:	b570      	push	{r4, r5, r6, lr}
 80014b6:	4e0d      	ldr	r6, [pc, #52]	; (80014ec <__libc_init_array+0x38>)
 80014b8:	4c0d      	ldr	r4, [pc, #52]	; (80014f0 <__libc_init_array+0x3c>)
 80014ba:	1ba4      	subs	r4, r4, r6
 80014bc:	10a4      	asrs	r4, r4, #2
 80014be:	2500      	movs	r5, #0
 80014c0:	42a5      	cmp	r5, r4
 80014c2:	d109      	bne.n	80014d8 <__libc_init_array+0x24>
 80014c4:	4e0b      	ldr	r6, [pc, #44]	; (80014f4 <__libc_init_array+0x40>)
 80014c6:	4c0c      	ldr	r4, [pc, #48]	; (80014f8 <__libc_init_array+0x44>)
 80014c8:	f000 f818 	bl	80014fc <_init>
 80014cc:	1ba4      	subs	r4, r4, r6
 80014ce:	10a4      	asrs	r4, r4, #2
 80014d0:	2500      	movs	r5, #0
 80014d2:	42a5      	cmp	r5, r4
 80014d4:	d105      	bne.n	80014e2 <__libc_init_array+0x2e>
 80014d6:	bd70      	pop	{r4, r5, r6, pc}
 80014d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014dc:	4798      	blx	r3
 80014de:	3501      	adds	r5, #1
 80014e0:	e7ee      	b.n	80014c0 <__libc_init_array+0xc>
 80014e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80014e6:	4798      	blx	r3
 80014e8:	3501      	adds	r5, #1
 80014ea:	e7f2      	b.n	80014d2 <__libc_init_array+0x1e>
 80014ec:	08001514 	.word	0x08001514
 80014f0:	08001514 	.word	0x08001514
 80014f4:	08001514 	.word	0x08001514
 80014f8:	08001518 	.word	0x08001518

080014fc <_init>:
 80014fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014fe:	bf00      	nop
 8001500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001502:	bc08      	pop	{r3}
 8001504:	469e      	mov	lr, r3
 8001506:	4770      	bx	lr

08001508 <_fini>:
 8001508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800150a:	bf00      	nop
 800150c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800150e:	bc08      	pop	{r3}
 8001510:	469e      	mov	lr, r3
 8001512:	4770      	bx	lr
