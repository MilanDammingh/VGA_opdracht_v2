
Software_ontwikkeling_opdracht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000365c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  080037e4  080037e4  000137e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080039d0  080039d0  000139d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080039d4  080039d4  000139d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000680  20000000  080039d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020680  2**0
                  CONTENTS
  7 .bss          00012f4c  20000680  20000680  00020680  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200135cc  200135cc  00020680  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020680  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c487  00000000  00000000  000206b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001fe1  00000000  00000000  0002cb37  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000990  00000000  00000000  0002eb18  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000868  00000000  00000000  0002f4a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004a33  00000000  00000000  0002fd10  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003036  00000000  00000000  00034743  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00037779  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002cbc  00000000  00000000  000377f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0003a4b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000680 	.word	0x20000680
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080037cc 	.word	0x080037cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000684 	.word	0x20000684
 80001c4:	080037cc 	.word	0x080037cc

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <__aeabi_drsub>:
 80001dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e0:	e002      	b.n	80001e8 <__adddf3>
 80001e2:	bf00      	nop

080001e4 <__aeabi_dsub>:
 80001e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e8 <__adddf3>:
 80001e8:	b530      	push	{r4, r5, lr}
 80001ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f2:	ea94 0f05 	teq	r4, r5
 80001f6:	bf08      	it	eq
 80001f8:	ea90 0f02 	teqeq	r0, r2
 80001fc:	bf1f      	itttt	ne
 80001fe:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000202:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000206:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020e:	f000 80e2 	beq.w	80003d6 <__adddf3+0x1ee>
 8000212:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000216:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021a:	bfb8      	it	lt
 800021c:	426d      	neglt	r5, r5
 800021e:	dd0c      	ble.n	800023a <__adddf3+0x52>
 8000220:	442c      	add	r4, r5
 8000222:	ea80 0202 	eor.w	r2, r0, r2
 8000226:	ea81 0303 	eor.w	r3, r1, r3
 800022a:	ea82 0000 	eor.w	r0, r2, r0
 800022e:	ea83 0101 	eor.w	r1, r3, r1
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	2d36      	cmp	r5, #54	; 0x36
 800023c:	bf88      	it	hi
 800023e:	bd30      	pophi	{r4, r5, pc}
 8000240:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000244:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000248:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800024c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x70>
 8000252:	4240      	negs	r0, r0
 8000254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000258:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800025c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000260:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x84>
 8000266:	4252      	negs	r2, r2
 8000268:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800026c:	ea94 0f05 	teq	r4, r5
 8000270:	f000 80a7 	beq.w	80003c2 <__adddf3+0x1da>
 8000274:	f1a4 0401 	sub.w	r4, r4, #1
 8000278:	f1d5 0e20 	rsbs	lr, r5, #32
 800027c:	db0d      	blt.n	800029a <__adddf3+0xb2>
 800027e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000282:	fa22 f205 	lsr.w	r2, r2, r5
 8000286:	1880      	adds	r0, r0, r2
 8000288:	f141 0100 	adc.w	r1, r1, #0
 800028c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000290:	1880      	adds	r0, r0, r2
 8000292:	fa43 f305 	asr.w	r3, r3, r5
 8000296:	4159      	adcs	r1, r3
 8000298:	e00e      	b.n	80002b8 <__adddf3+0xd0>
 800029a:	f1a5 0520 	sub.w	r5, r5, #32
 800029e:	f10e 0e20 	add.w	lr, lr, #32
 80002a2:	2a01      	cmp	r2, #1
 80002a4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a8:	bf28      	it	cs
 80002aa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ae:	fa43 f305 	asr.w	r3, r3, r5
 80002b2:	18c0      	adds	r0, r0, r3
 80002b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002bc:	d507      	bpl.n	80002ce <__adddf3+0xe6>
 80002be:	f04f 0e00 	mov.w	lr, #0
 80002c2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ca:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d2:	d31b      	bcc.n	800030c <__adddf3+0x124>
 80002d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d8:	d30c      	bcc.n	80002f4 <__adddf3+0x10c>
 80002da:	0849      	lsrs	r1, r1, #1
 80002dc:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e4:	f104 0401 	add.w	r4, r4, #1
 80002e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f0:	f080 809a 	bcs.w	8000428 <__adddf3+0x240>
 80002f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f8:	bf08      	it	eq
 80002fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fe:	f150 0000 	adcs.w	r0, r0, #0
 8000302:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000306:	ea41 0105 	orr.w	r1, r1, r5
 800030a:	bd30      	pop	{r4, r5, pc}
 800030c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000310:	4140      	adcs	r0, r0
 8000312:	eb41 0101 	adc.w	r1, r1, r1
 8000316:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800031a:	f1a4 0401 	sub.w	r4, r4, #1
 800031e:	d1e9      	bne.n	80002f4 <__adddf3+0x10c>
 8000320:	f091 0f00 	teq	r1, #0
 8000324:	bf04      	itt	eq
 8000326:	4601      	moveq	r1, r0
 8000328:	2000      	moveq	r0, #0
 800032a:	fab1 f381 	clz	r3, r1
 800032e:	bf08      	it	eq
 8000330:	3320      	addeq	r3, #32
 8000332:	f1a3 030b 	sub.w	r3, r3, #11
 8000336:	f1b3 0220 	subs.w	r2, r3, #32
 800033a:	da0c      	bge.n	8000356 <__adddf3+0x16e>
 800033c:	320c      	adds	r2, #12
 800033e:	dd08      	ble.n	8000352 <__adddf3+0x16a>
 8000340:	f102 0c14 	add.w	ip, r2, #20
 8000344:	f1c2 020c 	rsb	r2, r2, #12
 8000348:	fa01 f00c 	lsl.w	r0, r1, ip
 800034c:	fa21 f102 	lsr.w	r1, r1, r2
 8000350:	e00c      	b.n	800036c <__adddf3+0x184>
 8000352:	f102 0214 	add.w	r2, r2, #20
 8000356:	bfd8      	it	le
 8000358:	f1c2 0c20 	rsble	ip, r2, #32
 800035c:	fa01 f102 	lsl.w	r1, r1, r2
 8000360:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000364:	bfdc      	itt	le
 8000366:	ea41 010c 	orrle.w	r1, r1, ip
 800036a:	4090      	lslle	r0, r2
 800036c:	1ae4      	subs	r4, r4, r3
 800036e:	bfa2      	ittt	ge
 8000370:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000374:	4329      	orrge	r1, r5
 8000376:	bd30      	popge	{r4, r5, pc}
 8000378:	ea6f 0404 	mvn.w	r4, r4
 800037c:	3c1f      	subs	r4, #31
 800037e:	da1c      	bge.n	80003ba <__adddf3+0x1d2>
 8000380:	340c      	adds	r4, #12
 8000382:	dc0e      	bgt.n	80003a2 <__adddf3+0x1ba>
 8000384:	f104 0414 	add.w	r4, r4, #20
 8000388:	f1c4 0220 	rsb	r2, r4, #32
 800038c:	fa20 f004 	lsr.w	r0, r0, r4
 8000390:	fa01 f302 	lsl.w	r3, r1, r2
 8000394:	ea40 0003 	orr.w	r0, r0, r3
 8000398:	fa21 f304 	lsr.w	r3, r1, r4
 800039c:	ea45 0103 	orr.w	r1, r5, r3
 80003a0:	bd30      	pop	{r4, r5, pc}
 80003a2:	f1c4 040c 	rsb	r4, r4, #12
 80003a6:	f1c4 0220 	rsb	r2, r4, #32
 80003aa:	fa20 f002 	lsr.w	r0, r0, r2
 80003ae:	fa01 f304 	lsl.w	r3, r1, r4
 80003b2:	ea40 0003 	orr.w	r0, r0, r3
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	fa21 f004 	lsr.w	r0, r1, r4
 80003be:	4629      	mov	r1, r5
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f094 0f00 	teq	r4, #0
 80003c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ca:	bf06      	itte	eq
 80003cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d0:	3401      	addeq	r4, #1
 80003d2:	3d01      	subne	r5, #1
 80003d4:	e74e      	b.n	8000274 <__adddf3+0x8c>
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf18      	it	ne
 80003dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e0:	d029      	beq.n	8000436 <__adddf3+0x24e>
 80003e2:	ea94 0f05 	teq	r4, r5
 80003e6:	bf08      	it	eq
 80003e8:	ea90 0f02 	teqeq	r0, r2
 80003ec:	d005      	beq.n	80003fa <__adddf3+0x212>
 80003ee:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f2:	bf04      	itt	eq
 80003f4:	4619      	moveq	r1, r3
 80003f6:	4610      	moveq	r0, r2
 80003f8:	bd30      	pop	{r4, r5, pc}
 80003fa:	ea91 0f03 	teq	r1, r3
 80003fe:	bf1e      	ittt	ne
 8000400:	2100      	movne	r1, #0
 8000402:	2000      	movne	r0, #0
 8000404:	bd30      	popne	{r4, r5, pc}
 8000406:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040a:	d105      	bne.n	8000418 <__adddf3+0x230>
 800040c:	0040      	lsls	r0, r0, #1
 800040e:	4149      	adcs	r1, r1
 8000410:	bf28      	it	cs
 8000412:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800041c:	bf3c      	itt	cc
 800041e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000422:	bd30      	popcc	{r4, r5, pc}
 8000424:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000428:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800042c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000430:	f04f 0000 	mov.w	r0, #0
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043a:	bf1a      	itte	ne
 800043c:	4619      	movne	r1, r3
 800043e:	4610      	movne	r0, r2
 8000440:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000444:	bf1c      	itt	ne
 8000446:	460b      	movne	r3, r1
 8000448:	4602      	movne	r2, r0
 800044a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044e:	bf06      	itte	eq
 8000450:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000454:	ea91 0f03 	teqeq	r1, r3
 8000458:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	bf00      	nop

08000460 <__aeabi_ui2d>:
 8000460:	f090 0f00 	teq	r0, #0
 8000464:	bf04      	itt	eq
 8000466:	2100      	moveq	r1, #0
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000470:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000474:	f04f 0500 	mov.w	r5, #0
 8000478:	f04f 0100 	mov.w	r1, #0
 800047c:	e750      	b.n	8000320 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_i2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000498:	bf48      	it	mi
 800049a:	4240      	negmi	r0, r0
 800049c:	f04f 0100 	mov.w	r1, #0
 80004a0:	e73e      	b.n	8000320 <__adddf3+0x138>
 80004a2:	bf00      	nop

080004a4 <__aeabi_f2d>:
 80004a4:	0042      	lsls	r2, r0, #1
 80004a6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004aa:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ae:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b2:	bf1f      	itttt	ne
 80004b4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004bc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c0:	4770      	bxne	lr
 80004c2:	f092 0f00 	teq	r2, #0
 80004c6:	bf14      	ite	ne
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	e720      	b.n	8000320 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aedc 	beq.w	80002ce <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6c1      	b.n	80002ce <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_dmul>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000552:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000556:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055a:	bf1d      	ittte	ne
 800055c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000560:	ea94 0f0c 	teqne	r4, ip
 8000564:	ea95 0f0c 	teqne	r5, ip
 8000568:	f000 f8de 	bleq	8000728 <__aeabi_dmul+0x1dc>
 800056c:	442c      	add	r4, r5
 800056e:	ea81 0603 	eor.w	r6, r1, r3
 8000572:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000576:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057e:	bf18      	it	ne
 8000580:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000588:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800058c:	d038      	beq.n	8000600 <__aeabi_dmul+0xb4>
 800058e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000592:	f04f 0500 	mov.w	r5, #0
 8000596:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a2:	f04f 0600 	mov.w	r6, #0
 80005a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005aa:	f09c 0f00 	teq	ip, #0
 80005ae:	bf18      	it	ne
 80005b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c0:	d204      	bcs.n	80005cc <__aeabi_dmul+0x80>
 80005c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c6:	416d      	adcs	r5, r5
 80005c8:	eb46 0606 	adc.w	r6, r6, r6
 80005cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e4:	bf88      	it	hi
 80005e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ea:	d81e      	bhi.n	800062a <__aeabi_dmul+0xde>
 80005ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000604:	ea46 0101 	orr.w	r1, r6, r1
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	ea81 0103 	eor.w	r1, r1, r3
 8000610:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000614:	bfc2      	ittt	gt
 8000616:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061e:	bd70      	popgt	{r4, r5, r6, pc}
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f04f 0e00 	mov.w	lr, #0
 8000628:	3c01      	subs	r4, #1
 800062a:	f300 80ab 	bgt.w	8000784 <__aeabi_dmul+0x238>
 800062e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000632:	bfde      	ittt	le
 8000634:	2000      	movle	r0, #0
 8000636:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063a:	bd70      	pople	{r4, r5, r6, pc}
 800063c:	f1c4 0400 	rsb	r4, r4, #0
 8000640:	3c20      	subs	r4, #32
 8000642:	da35      	bge.n	80006b0 <__aeabi_dmul+0x164>
 8000644:	340c      	adds	r4, #12
 8000646:	dc1b      	bgt.n	8000680 <__aeabi_dmul+0x134>
 8000648:	f104 0414 	add.w	r4, r4, #20
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f305 	lsl.w	r3, r0, r5
 8000654:	fa20 f004 	lsr.w	r0, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800066c:	fa21 f604 	lsr.w	r6, r1, r4
 8000670:	eb42 0106 	adc.w	r1, r2, r6
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 040c 	rsb	r4, r4, #12
 8000684:	f1c4 0520 	rsb	r5, r4, #32
 8000688:	fa00 f304 	lsl.w	r3, r0, r4
 800068c:	fa20 f005 	lsr.w	r0, r0, r5
 8000690:	fa01 f204 	lsl.w	r2, r1, r4
 8000694:	ea40 0002 	orr.w	r0, r0, r2
 8000698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	f141 0100 	adc.w	r1, r1, #0
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f205 	lsl.w	r2, r0, r5
 80006b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006bc:	fa20 f304 	lsr.w	r3, r0, r4
 80006c0:	fa01 f205 	lsl.w	r2, r1, r5
 80006c4:	ea43 0302 	orr.w	r3, r3, r2
 80006c8:	fa21 f004 	lsr.w	r0, r1, r4
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	fa21 f204 	lsr.w	r2, r1, r4
 80006d4:	ea20 0002 	bic.w	r0, r0, r2
 80006d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e0:	bf08      	it	eq
 80006e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f094 0f00 	teq	r4, #0
 80006ec:	d10f      	bne.n	800070e <__aeabi_dmul+0x1c2>
 80006ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f2:	0040      	lsls	r0, r0, #1
 80006f4:	eb41 0101 	adc.w	r1, r1, r1
 80006f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006fc:	bf08      	it	eq
 80006fe:	3c01      	subeq	r4, #1
 8000700:	d0f7      	beq.n	80006f2 <__aeabi_dmul+0x1a6>
 8000702:	ea41 0106 	orr.w	r1, r1, r6
 8000706:	f095 0f00 	teq	r5, #0
 800070a:	bf18      	it	ne
 800070c:	4770      	bxne	lr
 800070e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000712:	0052      	lsls	r2, r2, #1
 8000714:	eb43 0303 	adc.w	r3, r3, r3
 8000718:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800071c:	bf08      	it	eq
 800071e:	3d01      	subeq	r5, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1c6>
 8000722:	ea43 0306 	orr.w	r3, r3, r6
 8000726:	4770      	bx	lr
 8000728:	ea94 0f0c 	teq	r4, ip
 800072c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000730:	bf18      	it	ne
 8000732:	ea95 0f0c 	teqne	r5, ip
 8000736:	d00c      	beq.n	8000752 <__aeabi_dmul+0x206>
 8000738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800073c:	bf18      	it	ne
 800073e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000742:	d1d1      	bne.n	80006e8 <__aeabi_dmul+0x19c>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000756:	bf06      	itte	eq
 8000758:	4610      	moveq	r0, r2
 800075a:	4619      	moveq	r1, r3
 800075c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000760:	d019      	beq.n	8000796 <__aeabi_dmul+0x24a>
 8000762:	ea94 0f0c 	teq	r4, ip
 8000766:	d102      	bne.n	800076e <__aeabi_dmul+0x222>
 8000768:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800076c:	d113      	bne.n	8000796 <__aeabi_dmul+0x24a>
 800076e:	ea95 0f0c 	teq	r5, ip
 8000772:	d105      	bne.n	8000780 <__aeabi_dmul+0x234>
 8000774:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000778:	bf1c      	itt	ne
 800077a:	4610      	movne	r0, r2
 800077c:	4619      	movne	r1, r3
 800077e:	d10a      	bne.n	8000796 <__aeabi_dmul+0x24a>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079e:	bd70      	pop	{r4, r5, r6, pc}

080007a0 <__aeabi_ddiv>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ae:	bf1d      	ittte	ne
 80007b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b4:	ea94 0f0c 	teqne	r4, ip
 80007b8:	ea95 0f0c 	teqne	r5, ip
 80007bc:	f000 f8a7 	bleq	800090e <__aeabi_ddiv+0x16e>
 80007c0:	eba4 0405 	sub.w	r4, r4, r5
 80007c4:	ea81 0e03 	eor.w	lr, r1, r3
 80007c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d0:	f000 8088 	beq.w	80008e4 <__aeabi_ddiv+0x144>
 80007d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f8:	429d      	cmp	r5, r3
 80007fa:	bf08      	it	eq
 80007fc:	4296      	cmpeq	r6, r2
 80007fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000802:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000806:	d202      	bcs.n	800080e <__aeabi_ddiv+0x6e>
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	1ab6      	subs	r6, r6, r2
 8000810:	eb65 0503 	sbc.w	r5, r5, r3
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 000c 	orrcs.w	r0, r0, ip
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800087c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000880:	d018      	beq.n	80008b4 <__aeabi_ddiv+0x114>
 8000882:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000886:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000892:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000896:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089e:	d1c0      	bne.n	8000822 <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	d10b      	bne.n	80008be <__aeabi_ddiv+0x11e>
 80008a6:	ea41 0100 	orr.w	r1, r1, r0
 80008aa:	f04f 0000 	mov.w	r0, #0
 80008ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b2:	e7b6      	b.n	8000822 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	bf04      	itt	eq
 80008ba:	4301      	orreq	r1, r0
 80008bc:	2000      	moveq	r0, #0
 80008be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c2:	bf88      	it	hi
 80008c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c8:	f63f aeaf 	bhi.w	800062a <__aeabi_dmul+0xde>
 80008cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d0:	bf04      	itt	eq
 80008d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008da:	f150 0000 	adcs.w	r0, r0, #0
 80008de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	e690      	b.n	800062a <__aeabi_dmul+0xde>
 8000908:	ea45 0e06 	orr.w	lr, r5, r6
 800090c:	e68d      	b.n	800062a <__aeabi_dmul+0xde>
 800090e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000912:	ea94 0f0c 	teq	r4, ip
 8000916:	bf08      	it	eq
 8000918:	ea95 0f0c 	teqeq	r5, ip
 800091c:	f43f af3b 	beq.w	8000796 <__aeabi_dmul+0x24a>
 8000920:	ea94 0f0c 	teq	r4, ip
 8000924:	d10a      	bne.n	800093c <__aeabi_ddiv+0x19c>
 8000926:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092a:	f47f af34 	bne.w	8000796 <__aeabi_dmul+0x24a>
 800092e:	ea95 0f0c 	teq	r5, ip
 8000932:	f47f af25 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e72c      	b.n	8000796 <__aeabi_dmul+0x24a>
 800093c:	ea95 0f0c 	teq	r5, ip
 8000940:	d106      	bne.n	8000950 <__aeabi_ddiv+0x1b0>
 8000942:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000946:	f43f aefd 	beq.w	8000744 <__aeabi_dmul+0x1f8>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e722      	b.n	8000796 <__aeabi_dmul+0x24a>
 8000950:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095a:	f47f aec5 	bne.w	80006e8 <__aeabi_dmul+0x19c>
 800095e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000962:	f47f af0d 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000966:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096a:	f47f aeeb 	bne.w	8000744 <__aeabi_dmul+0x1f8>
 800096e:	e712      	b.n	8000796 <__aeabi_dmul+0x24a>

08000970 <__aeabi_d2uiz>:
 8000970:	004a      	lsls	r2, r1, #1
 8000972:	d211      	bcs.n	8000998 <__aeabi_d2uiz+0x28>
 8000974:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000978:	d211      	bcs.n	800099e <__aeabi_d2uiz+0x2e>
 800097a:	d50d      	bpl.n	8000998 <__aeabi_d2uiz+0x28>
 800097c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000980:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000984:	d40e      	bmi.n	80009a4 <__aeabi_d2uiz+0x34>
 8000986:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800098e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000992:	fa23 f002 	lsr.w	r0, r3, r2
 8000996:	4770      	bx	lr
 8000998:	f04f 0000 	mov.w	r0, #0
 800099c:	4770      	bx	lr
 800099e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a2:	d102      	bne.n	80009aa <__aeabi_d2uiz+0x3a>
 80009a4:	f04f 30ff 	mov.w	r0, #4294967295
 80009a8:	4770      	bx	lr
 80009aa:	f04f 0000 	mov.w	r0, #0
 80009ae:	4770      	bx	lr

080009b0 <draw_ellips>:

#include "stm32_ub_vga_screen.h"


void draw_ellips (int x_center,int y_center, int x_rad, int y_rad, int color)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b086      	sub	sp, #24
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	60b9      	str	r1, [r7, #8]
 80009ba:	607a      	str	r2, [r7, #4]
 80009bc:	603b      	str	r3, [r7, #0]
	for(int y=-y_rad; y<=y_rad; y++) {
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	425b      	negs	r3, r3
 80009c2:	617b      	str	r3, [r7, #20]
 80009c4:	e03f      	b.n	8000a46 <draw_ellips+0x96>
	    for(int x=-x_rad; x<=x_rad; x++) {
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	425b      	negs	r3, r3
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	e034      	b.n	8000a38 <draw_ellips+0x88>
	        if(x*x*y_rad*y_rad+y*y*x_rad*x_rad <= y_rad*y_rad*x_rad*x_rad)
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	fb02 f303 	mul.w	r3, r2, r3
 80009d6:	683a      	ldr	r2, [r7, #0]
 80009d8:	fb02 f303 	mul.w	r3, r2, r3
 80009dc:	683a      	ldr	r2, [r7, #0]
 80009de:	fb02 f203 	mul.w	r2, r2, r3
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	6979      	ldr	r1, [r7, #20]
 80009e6:	fb01 f303 	mul.w	r3, r1, r3
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	fb01 f303 	mul.w	r3, r1, r3
 80009f0:	6879      	ldr	r1, [r7, #4]
 80009f2:	fb01 f303 	mul.w	r3, r1, r3
 80009f6:	441a      	add	r2, r3
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	6839      	ldr	r1, [r7, #0]
 80009fc:	fb01 f303 	mul.w	r3, r1, r3
 8000a00:	6879      	ldr	r1, [r7, #4]
 8000a02:	fb01 f303 	mul.w	r3, r1, r3
 8000a06:	6879      	ldr	r1, [r7, #4]
 8000a08:	fb01 f303 	mul.w	r3, r1, r3
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	dc10      	bgt.n	8000a32 <draw_ellips+0x82>
	        	UB_VGA_SetPixel(x_center+x,y_center+y,color);
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	4413      	add	r3, r2
 8000a1a:	b298      	uxth	r0, r3
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	b29a      	uxth	r2, r3
 8000a20:	697b      	ldr	r3, [r7, #20]
 8000a22:	b29b      	uxth	r3, r3
 8000a24:	4413      	add	r3, r2
 8000a26:	b29b      	uxth	r3, r3
 8000a28:	6a3a      	ldr	r2, [r7, #32]
 8000a2a:	b2d2      	uxtb	r2, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f001 fb79 	bl	8002124 <UB_VGA_SetPixel>
	    for(int x=-x_rad; x<=x_rad; x++) {
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	3301      	adds	r3, #1
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	429a      	cmp	r2, r3
 8000a3e:	ddc6      	ble.n	80009ce <draw_ellips+0x1e>
	for(int y=-y_rad; y<=y_rad; y++) {
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	3301      	adds	r3, #1
 8000a44:	617b      	str	r3, [r7, #20]
 8000a46:	697a      	ldr	r2, [r7, #20]
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	429a      	cmp	r2, r3
 8000a4c:	ddbb      	ble.n	80009c6 <draw_ellips+0x16>
	    }
	}
}
 8000a4e:	bf00      	nop
 8000a50:	3718      	adds	r7, #24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <draw_line>:

#include <stdio.h>
#include <stdlib.h>

void draw_line(int x1, int y1, int x2, int y2, int tn, int color)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b094      	sub	sp, #80	; 0x50
 8000a5a:	af00      	add	r7, sp, #0
 8000a5c:	60f8      	str	r0, [r7, #12]
 8000a5e:	60b9      	str	r1, [r7, #8]
 8000a60:	607a      	str	r2, [r7, #4]
 8000a62:	603b      	str	r3, [r7, #0]

	int i,dx,dy,sdx,sdy,dxabs,dyabs,x,y,px,py;
	uint8_t stn,tn_draw;

	dx=x2-x1;      /* the horizontal distance of the line */
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
	dy=y2-y1;      /* the vertical distance of the line */
 8000a6c:	683a      	ldr	r2, [r7, #0]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	627b      	str	r3, [r7, #36]	; 0x24
	dxabs=abs(dx);
 8000a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	bfb8      	it	lt
 8000a7a:	425b      	neglt	r3, r3
 8000a7c:	623b      	str	r3, [r7, #32]
	dyabs=abs(dy);
 8000a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	bfb8      	it	lt
 8000a84:	425b      	neglt	r3, r3
 8000a86:	61fb      	str	r3, [r7, #28]
	sdx=sgn(dx);
 8000a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	db06      	blt.n	8000a9c <draw_line+0x46>
 8000a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	bfcc      	ite	gt
 8000a94:	2301      	movgt	r3, #1
 8000a96:	2300      	movle	r3, #0
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	e001      	b.n	8000aa0 <draw_line+0x4a>
 8000a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa0:	61bb      	str	r3, [r7, #24]
	sdy=sgn(dy);
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	db06      	blt.n	8000ab6 <draw_line+0x60>
 8000aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	bfcc      	ite	gt
 8000aae:	2301      	movgt	r3, #1
 8000ab0:	2300      	movle	r3, #0
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	e001      	b.n	8000aba <draw_line+0x64>
 8000ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aba:	617b      	str	r3, [r7, #20]
	x=dyabs>>1;
 8000abc:	69fb      	ldr	r3, [r7, #28]
 8000abe:	105b      	asrs	r3, r3, #1
 8000ac0:	64bb      	str	r3, [r7, #72]	; 0x48
	y=dxabs>>1;
 8000ac2:	6a3b      	ldr	r3, [r7, #32]
 8000ac4:	105b      	asrs	r3, r3, #1
 8000ac6:	647b      	str	r3, [r7, #68]	; 0x44
	px=x1;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	643b      	str	r3, [r7, #64]	; 0x40
	py=y1;
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	63fb      	str	r3, [r7, #60]	; 0x3c

	stn = ((tn%2)==0)? 1:0;  /* even of oneven lijndikte */
 8000ad0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	bf0c      	ite	eq
 8000ada:	2301      	moveq	r3, #1
 8000adc:	2300      	movne	r3, #0
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	74fb      	strb	r3, [r7, #19]
	tn_draw = tn>>1;
 8000ae2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000ae4:	105b      	asrs	r3, r3, #1
 8000ae6:	74bb      	strb	r3, [r7, #18]

	if (dxabs>=dyabs) 	/* the line is more horizontal than vertical */
 8000ae8:	6a3a      	ldr	r2, [r7, #32]
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	f2c0 80c5 	blt.w	8000c7c <draw_line+0x226>
	{
		if(stn==1) /* even line thickness */
 8000af2:	7cfb      	ldrb	r3, [r7, #19]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d15e      	bne.n	8000bb6 <draw_line+0x160>
		{
			px=x1;
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	643b      	str	r3, [r7, #64]	; 0x40
			py=y1;
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000b00:	2300      	movs	r3, #0
 8000b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b04:	e052      	b.n	8000bac <draw_line+0x156>
			{
				y+=dyabs;										/* adding dyabs for drawing vertical pixel */
 8000b06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	647b      	str	r3, [r7, #68]	; 0x44
				if (y>=dxabs)									/* y is higher than the dxabs of line, so py counting -1/0/1 */
 8000b0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b10:	6a3b      	ldr	r3, [r7, #32]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	db07      	blt.n	8000b26 <draw_line+0xd0>
				{
					y-=dxabs;									/* substracting dxabs of y so counting is reset */
 8000b16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b18:	6a3b      	ldr	r3, [r7, #32]
 8000b1a:	1ad3      	subs	r3, r2, r3
 8000b1c:	647b      	str	r3, [r7, #68]	; 0x44
					py+=sdy;
 8000b1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	4413      	add	r3, r2
 8000b24:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				for(int k=-tn_draw;k<tn_draw;k++)
 8000b26:	7cbb      	ldrb	r3, [r7, #18]
 8000b28:	425b      	negs	r3, r3
 8000b2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8000b2c:	e033      	b.n	8000b96 <draw_line+0x140>
				{
					if(px>=0 && px <= 320 && py>=0 && py <= 240)	/* pixels inside range VGA screen will be drawn */
 8000b2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	db2d      	blt.n	8000b90 <draw_line+0x13a>
 8000b34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b36:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000b3a:	dc29      	bgt.n	8000b90 <draw_line+0x13a>
 8000b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	db26      	blt.n	8000b90 <draw_line+0x13a>
 8000b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b44:	2bf0      	cmp	r3, #240	; 0xf0
 8000b46:	dc23      	bgt.n	8000b90 <draw_line+0x13a>
					{
						UB_VGA_SetPixel(px+k,py-k,color);
 8000b48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b4a:	b29a      	uxth	r2, r3
 8000b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	4413      	add	r3, r2
 8000b52:	b298      	uxth	r0, r3
 8000b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b5a:	b29b      	uxth	r3, r3
 8000b5c:	1ad3      	subs	r3, r2, r3
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000b62:	b2d2      	uxtb	r2, r2
 8000b64:	4619      	mov	r1, r3
 8000b66:	f001 fadd 	bl	8002124 <UB_VGA_SetPixel>
						UB_VGA_SetPixel(px+k,py-k-1,color);
 8000b6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	4413      	add	r3, r2
 8000b74:	b298      	uxth	r0, r3
 8000b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	3b01      	subs	r3, #1
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000b88:	b2d2      	uxtb	r2, r2
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	f001 faca 	bl	8002124 <UB_VGA_SetPixel>
				for(int k=-tn_draw;k<tn_draw;k++)
 8000b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b92:	3301      	adds	r3, #1
 8000b94:	63bb      	str	r3, [r7, #56]	; 0x38
 8000b96:	7cba      	ldrb	r2, [r7, #18]
 8000b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	dcc7      	bgt.n	8000b2e <draw_line+0xd8>
					}
				}
				px+=sdx; 										/* -1/0/1 counting pixel */
 8000b9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	643b      	str	r3, [r7, #64]	; 0x40
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000ba8:	3301      	adds	r3, #1
 8000baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000bac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000bae:	6a3b      	ldr	r3, [r7, #32]
 8000bb0:	429a      	cmp	r2, r3
 8000bb2:	dda8      	ble.n	8000b06 <draw_line+0xb0>
				}
				py+=sdy; 										/* -1/0/1 counting pixel */
			}
		}
	}
}
 8000bb4:	e125      	b.n	8000e02 <draw_line+0x3ac>
		else if(stn==0)	/* odd line thickness */
 8000bb6:	7cfb      	ldrb	r3, [r7, #19]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	f040 8122 	bne.w	8000e02 <draw_line+0x3ac>
			px=x1;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	643b      	str	r3, [r7, #64]	; 0x40
			py=y1;
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000bca:	e052      	b.n	8000c72 <draw_line+0x21c>
				y+=dyabs;										/* adding dyabs for drawing vertical pixel */
 8000bcc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	4413      	add	r3, r2
 8000bd2:	647b      	str	r3, [r7, #68]	; 0x44
				if (y>=dxabs)									/* y is higher than the dxabs of line, so py counting -1/0/1 */
 8000bd4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	db07      	blt.n	8000bec <draw_line+0x196>
					y-=dxabs;									/* substracting dxabs of y so counting is reset */
 8000bdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000bde:	6a3b      	ldr	r3, [r7, #32]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	647b      	str	r3, [r7, #68]	; 0x44
					py+=sdy;
 8000be4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	4413      	add	r3, r2
 8000bea:	63fb      	str	r3, [r7, #60]	; 0x3c
				for(int h=0-tn_draw;h<=tn_draw;h++)
 8000bec:	7cbb      	ldrb	r3, [r7, #18]
 8000bee:	425b      	negs	r3, r3
 8000bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8000bf2:	e033      	b.n	8000c5c <draw_line+0x206>
					if(px>=0 && px <= 320 && py>=0 && py <= 240)	/* pixels inside range VGA screen will be drawn */
 8000bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db2d      	blt.n	8000c56 <draw_line+0x200>
 8000bfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000bfc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000c00:	dc29      	bgt.n	8000c56 <draw_line+0x200>
 8000c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	db26      	blt.n	8000c56 <draw_line+0x200>
 8000c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c0a:	2bf0      	cmp	r3, #240	; 0xf0
 8000c0c:	dc23      	bgt.n	8000c56 <draw_line+0x200>
						UB_VGA_SetPixel(px+h,py-h,color);
 8000c0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	4413      	add	r3, r2
 8000c18:	b298      	uxth	r0, r3
 8000c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	b29b      	uxth	r3, r3
 8000c26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000c28:	b2d2      	uxtb	r2, r2
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	f001 fa7a 	bl	8002124 <UB_VGA_SetPixel>
						UB_VGA_SetPixel(px+h,py-h-1,color);
 8000c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c32:	b29a      	uxth	r2, r3
 8000c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	4413      	add	r3, r2
 8000c3a:	b298      	uxth	r0, r3
 8000c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000c4e:	b2d2      	uxtb	r2, r2
 8000c50:	4619      	mov	r1, r3
 8000c52:	f001 fa67 	bl	8002124 <UB_VGA_SetPixel>
				for(int h=0-tn_draw;h<=tn_draw;h++)
 8000c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c58:	3301      	adds	r3, #1
 8000c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8000c5c:	7cba      	ldrb	r2, [r7, #18]
 8000c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c60:	429a      	cmp	r2, r3
 8000c62:	dac7      	bge.n	8000bf4 <draw_line+0x19e>
				px+=sdx; 										/* -1/0/1 counting pixel */
 8000c64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000c66:	69bb      	ldr	r3, [r7, #24]
 8000c68:	4413      	add	r3, r2
 8000c6a:	643b      	str	r3, [r7, #64]	; 0x40
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000c6e:	3301      	adds	r3, #1
 8000c70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c74:	6a3b      	ldr	r3, [r7, #32]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	dda8      	ble.n	8000bcc <draw_line+0x176>
}
 8000c7a:	e0c2      	b.n	8000e02 <draw_line+0x3ac>
		if(stn==1) /* even line thickness */
 8000c7c:	7cfb      	ldrb	r3, [r7, #19]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d15e      	bne.n	8000d40 <draw_line+0x2ea>
			px=x1;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	643b      	str	r3, [r7, #64]	; 0x40
			py=y1;
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c8e:	e052      	b.n	8000d36 <draw_line+0x2e0>
				y+=dyabs;										/* adding dyabs for drawing vertical pixel */
 8000c90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	4413      	add	r3, r2
 8000c96:	647b      	str	r3, [r7, #68]	; 0x44
				if (y>=dxabs)									/* y is higher than the dxabs of line, so py counting -1/0/1 */
 8000c98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c9a:	6a3b      	ldr	r3, [r7, #32]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	db07      	blt.n	8000cb0 <draw_line+0x25a>
					y-=dxabs;									/* substracting dxabs of y so counting is reset */
 8000ca0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000ca2:	6a3b      	ldr	r3, [r7, #32]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	647b      	str	r3, [r7, #68]	; 0x44
					py+=sdy;
 8000ca8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	4413      	add	r3, r2
 8000cae:	63fb      	str	r3, [r7, #60]	; 0x3c
				for(int k=0-tn_draw;k<tn_draw;k++)
 8000cb0:	7cbb      	ldrb	r3, [r7, #18]
 8000cb2:	425b      	negs	r3, r3
 8000cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8000cb6:	e033      	b.n	8000d20 <draw_line+0x2ca>
					if(px>=0 && px <= 320 && py>=0 && py <= 240)	/* pixels inside range VGA screen will be drawn */
 8000cb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	db2d      	blt.n	8000d1a <draw_line+0x2c4>
 8000cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000cc0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000cc4:	dc29      	bgt.n	8000d1a <draw_line+0x2c4>
 8000cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	db26      	blt.n	8000d1a <draw_line+0x2c4>
 8000ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cce:	2bf0      	cmp	r3, #240	; 0xf0
 8000cd0:	dc23      	bgt.n	8000d1a <draw_line+0x2c4>
						UB_VGA_SetPixel(px+k,py-k,color);
 8000cd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cd8:	b29b      	uxth	r3, r3
 8000cda:	4413      	add	r3, r2
 8000cdc:	b298      	uxth	r0, r3
 8000cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000cec:	b2d2      	uxtb	r2, r2
 8000cee:	4619      	mov	r1, r3
 8000cf0:	f001 fa18 	bl	8002124 <UB_VGA_SetPixel>
						UB_VGA_SetPixel(px+k,py-k-1,color);
 8000cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	4413      	add	r3, r2
 8000cfe:	b298      	uxth	r0, r3
 8000d00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	b29b      	uxth	r3, r3
 8000d10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000d12:	b2d2      	uxtb	r2, r2
 8000d14:	4619      	mov	r1, r3
 8000d16:	f001 fa05 	bl	8002124 <UB_VGA_SetPixel>
				for(int k=0-tn_draw;k<tn_draw;k++)
 8000d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	633b      	str	r3, [r7, #48]	; 0x30
 8000d20:	7cba      	ldrb	r2, [r7, #18]
 8000d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d24:	429a      	cmp	r2, r3
 8000d26:	dcc7      	bgt.n	8000cb8 <draw_line+0x262>
				px+=sdx; 										/* -1/0/1 counting pixel */
 8000d28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	643b      	str	r3, [r7, #64]	; 0x40
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000d30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d32:	3301      	adds	r3, #1
 8000d34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d38:	6a3b      	ldr	r3, [r7, #32]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	dda8      	ble.n	8000c90 <draw_line+0x23a>
}
 8000d3e:	e060      	b.n	8000e02 <draw_line+0x3ac>
		else if(stn==0)	/* odd line thickness */
 8000d40:	7cfb      	ldrb	r3, [r7, #19]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d15d      	bne.n	8000e02 <draw_line+0x3ac>
			px=x1;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	643b      	str	r3, [r7, #64]	; 0x40
			py=y1;
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dyabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000d4e:	2300      	movs	r3, #0
 8000d50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d52:	e052      	b.n	8000dfa <draw_line+0x3a4>
				x+=dxabs;										/* adding dyabs for drawing vertical pixel */
 8000d54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d56:	6a3b      	ldr	r3, [r7, #32]
 8000d58:	4413      	add	r3, r2
 8000d5a:	64bb      	str	r3, [r7, #72]	; 0x48
				if (x>=dyabs)									/* y is higher than the dxabs of line, so py counting -1/0/1 */
 8000d5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	db07      	blt.n	8000d74 <draw_line+0x31e>
					x-=dyabs;									/* substracting dxabs of y so counting is reset */
 8000d64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	64bb      	str	r3, [r7, #72]	; 0x48
					px+=sdx;
 8000d6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	4413      	add	r3, r2
 8000d72:	643b      	str	r3, [r7, #64]	; 0x40
				for(int h=0-tn_draw;h<=tn_draw;h++)
 8000d74:	7cbb      	ldrb	r3, [r7, #18]
 8000d76:	425b      	negs	r3, r3
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d7a:	e033      	b.n	8000de4 <draw_line+0x38e>
					if(px>=0 && px <= 320 && py>=0 && py <= 240)	/* pixels inside range VGA screen will be drawn */
 8000d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	db2d      	blt.n	8000dde <draw_line+0x388>
 8000d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d84:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000d88:	dc29      	bgt.n	8000dde <draw_line+0x388>
 8000d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	db26      	blt.n	8000dde <draw_line+0x388>
 8000d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d92:	2bf0      	cmp	r3, #240	; 0xf0
 8000d94:	dc23      	bgt.n	8000dde <draw_line+0x388>
						UB_VGA_SetPixel(px+h,py-h,color);
 8000d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	4413      	add	r3, r2
 8000da0:	b298      	uxth	r0, r3
 8000da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	4619      	mov	r1, r3
 8000db4:	f001 f9b6 	bl	8002124 <UB_VGA_SetPixel>
						UB_VGA_SetPixel(px+h,py-h-1,color);
 8000db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	4413      	add	r3, r2
 8000dc2:	b298      	uxth	r0, r3
 8000dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	b29b      	uxth	r3, r3
 8000dd4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000dd6:	b2d2      	uxtb	r2, r2
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f001 f9a3 	bl	8002124 <UB_VGA_SetPixel>
				for(int h=0-tn_draw;h<=tn_draw;h++)
 8000dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de0:	3301      	adds	r3, #1
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000de4:	7cba      	ldrb	r2, [r7, #18]
 8000de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de8:	429a      	cmp	r2, r3
 8000dea:	dac7      	bge.n	8000d7c <draw_line+0x326>
				py+=sdy; 										/* -1/0/1 counting pixel */
 8000dec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	4413      	add	r3, r2
 8000df2:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dyabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000df6:	3301      	adds	r3, #1
 8000df8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000dfa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	dda8      	ble.n	8000d54 <draw_line+0x2fe>
}
 8000e02:	bf00      	nop
 8000e04:	3750      	adds	r7, #80	; 0x50
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <draw_rectangle>:

#include "rectangle.h"
#include "line.h"

void draw_rectangle (int x1, int y1, int x2, int y2, int color)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	60f8      	str	r0, [r7, #12]
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	603b      	str	r3, [r7, #0]
	for(int i=y1;i<=y2;i++)
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	e015      	b.n	8000e4a <draw_rectangle+0x40>
	{
		for(int j=x1;j<=x2;j++)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	e00b      	b.n	8000e3c <draw_rectangle+0x32>
			UB_VGA_SetPixel(j,i,color);
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	697a      	ldr	r2, [r7, #20]
 8000e2a:	b291      	uxth	r1, r2
 8000e2c:	6a3a      	ldr	r2, [r7, #32]
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f001 f977 	bl	8002124 <UB_VGA_SetPixel>
		for(int j=x1;j<=x2;j++)
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	ddef      	ble.n	8000e24 <draw_rectangle+0x1a>
	for(int i=y1;i<=y2;i++)
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	3301      	adds	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	dde5      	ble.n	8000e1e <draw_rectangle+0x14>
	}
}
 8000e52:	bf00      	nop
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <draw_triangle>:
#include "stm32_ub_vga_screen.h"
#include <stdlib.h>
#include "includes.h"

void draw_triangle(int x1,int y1,int x2,int y2,int xtop,int ytop, uint8_t color)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b086      	sub	sp, #24
 8000e5e:	af02      	add	r7, sp, #8
 8000e60:	60f8      	str	r0, [r7, #12]
 8000e62:	60b9      	str	r1, [r7, #8]
 8000e64:	607a      	str	r2, [r7, #4]
 8000e66:	603b      	str	r3, [r7, #0]
//	dx=x2-x1;      /* the horizontal distance of the line */
//	dy=y2-y1;      /* the vertical distance of the line */
//	dxabs=abs(dx);
//	dyabs=abs(dy);

	draw_line(x1,y1,x2,y2,1,color);
 8000e68:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e6c:	9301      	str	r3, [sp, #4]
 8000e6e:	2301      	movs	r3, #1
 8000e70:	9300      	str	r3, [sp, #0]
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	68b9      	ldr	r1, [r7, #8]
 8000e78:	68f8      	ldr	r0, [r7, #12]
 8000e7a:	f7ff fdec 	bl	8000a56 <draw_line>
	draw_line(x1,y1,xtop,ytop,1,color);
 8000e7e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e82:	9301      	str	r3, [sp, #4]
 8000e84:	2301      	movs	r3, #1
 8000e86:	9300      	str	r3, [sp, #0]
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	68b9      	ldr	r1, [r7, #8]
 8000e8e:	68f8      	ldr	r0, [r7, #12]
 8000e90:	f7ff fde1 	bl	8000a56 <draw_line>
	draw_line(xtop,ytop,x2,y2,1,color);
 8000e94:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000e98:	9301      	str	r3, [sp, #4]
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	69f9      	ldr	r1, [r7, #28]
 8000ea4:	69b8      	ldr	r0, [r7, #24]
 8000ea6:	f7ff fdd6 	bl	8000a56 <draw_line>



//	for(int i=x1;i<=x2;i++)
//		draw_line(i,y2,xtop,ytop,color,1);
}
 8000eaa:	bf00      	nop
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b085      	sub	sp, #20
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	73fb      	strb	r3, [r7, #15]
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	73bb      	strb	r3, [r7, #14]
 8000ec4:	230f      	movs	r3, #15
 8000ec6:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	78db      	ldrb	r3, [r3, #3]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d039      	beq.n	8000f44 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000ed0:	4b27      	ldr	r3, [pc, #156]	; (8000f70 <NVIC_Init+0xbc>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	0a1b      	lsrs	r3, r3, #8
 8000ed8:	b2db      	uxtb	r3, r3
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	f1c3 0304 	rsb	r3, r3, #4
 8000ee6:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000ee8:	7b7a      	ldrb	r2, [r7, #13]
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	fa42 f303 	asr.w	r3, r2, r3
 8000ef0:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	785b      	ldrb	r3, [r3, #1]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	7bbb      	ldrb	r3, [r7, #14]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	789a      	ldrb	r2, [r3, #2]
 8000f04:	7b7b      	ldrb	r3, [r7, #13]
 8000f06:	4013      	ands	r3, r2
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000f16:	4a17      	ldr	r2, [pc, #92]	; (8000f74 <NVIC_Init+0xc0>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	7bfa      	ldrb	r2, [r7, #15]
 8000f20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f24:	4a13      	ldr	r2, [pc, #76]	; (8000f74 <NVIC_Init+0xc0>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	095b      	lsrs	r3, r3, #5
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	f003 031f 	and.w	r3, r3, #31
 8000f38:	2101      	movs	r1, #1
 8000f3a:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f3e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000f42:	e00f      	b.n	8000f64 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f44:	490b      	ldr	r1, [pc, #44]	; (8000f74 <NVIC_Init+0xc0>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	095b      	lsrs	r3, r3, #5
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	f003 031f 	and.w	r3, r3, #31
 8000f58:	2201      	movs	r2, #1
 8000f5a:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000f5c:	f100 0320 	add.w	r3, r0, #32
 8000f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00
 8000f74:	e000e100 	.word	0xe000e100

08000f78 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f023 0201 	bic.w	r2, r3, #1
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2221      	movs	r2, #33	; 0x21
 8000fae:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a46      	ldr	r2, [pc, #280]	; (80010cc <DMA_DeInit+0x154>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d103      	bne.n	8000fc0 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8000fb8:	4b45      	ldr	r3, [pc, #276]	; (80010d0 <DMA_DeInit+0x158>)
 8000fba:	223d      	movs	r2, #61	; 0x3d
 8000fbc:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8000fbe:	e07e      	b.n	80010be <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a44      	ldr	r2, [pc, #272]	; (80010d4 <DMA_DeInit+0x15c>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d104      	bne.n	8000fd2 <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8000fc8:	4b41      	ldr	r3, [pc, #260]	; (80010d0 <DMA_DeInit+0x158>)
 8000fca:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8000fce:	609a      	str	r2, [r3, #8]
}
 8000fd0:	e075      	b.n	80010be <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a40      	ldr	r2, [pc, #256]	; (80010d8 <DMA_DeInit+0x160>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d104      	bne.n	8000fe4 <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8000fda:	4b3d      	ldr	r3, [pc, #244]	; (80010d0 <DMA_DeInit+0x158>)
 8000fdc:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8000fe0:	609a      	str	r2, [r3, #8]
}
 8000fe2:	e06c      	b.n	80010be <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a3d      	ldr	r2, [pc, #244]	; (80010dc <DMA_DeInit+0x164>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d104      	bne.n	8000ff6 <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8000fec:	4b38      	ldr	r3, [pc, #224]	; (80010d0 <DMA_DeInit+0x158>)
 8000fee:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8000ff2:	609a      	str	r2, [r3, #8]
}
 8000ff4:	e063      	b.n	80010be <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a39      	ldr	r2, [pc, #228]	; (80010e0 <DMA_DeInit+0x168>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d103      	bne.n	8001006 <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8000ffe:	4b34      	ldr	r3, [pc, #208]	; (80010d0 <DMA_DeInit+0x158>)
 8001000:	4a38      	ldr	r2, [pc, #224]	; (80010e4 <DMA_DeInit+0x16c>)
 8001002:	60da      	str	r2, [r3, #12]
}
 8001004:	e05b      	b.n	80010be <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a37      	ldr	r2, [pc, #220]	; (80010e8 <DMA_DeInit+0x170>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d103      	bne.n	8001016 <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 800100e:	4b30      	ldr	r3, [pc, #192]	; (80010d0 <DMA_DeInit+0x158>)
 8001010:	4a36      	ldr	r2, [pc, #216]	; (80010ec <DMA_DeInit+0x174>)
 8001012:	60da      	str	r2, [r3, #12]
}
 8001014:	e053      	b.n	80010be <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a35      	ldr	r2, [pc, #212]	; (80010f0 <DMA_DeInit+0x178>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d103      	bne.n	8001026 <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 800101e:	4b2c      	ldr	r3, [pc, #176]	; (80010d0 <DMA_DeInit+0x158>)
 8001020:	4a34      	ldr	r2, [pc, #208]	; (80010f4 <DMA_DeInit+0x17c>)
 8001022:	60da      	str	r2, [r3, #12]
}
 8001024:	e04b      	b.n	80010be <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a33      	ldr	r2, [pc, #204]	; (80010f8 <DMA_DeInit+0x180>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d104      	bne.n	8001038 <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 800102e:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <DMA_DeInit+0x158>)
 8001030:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8001034:	60da      	str	r2, [r3, #12]
}
 8001036:	e042      	b.n	80010be <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a30      	ldr	r2, [pc, #192]	; (80010fc <DMA_DeInit+0x184>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d103      	bne.n	8001048 <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8001040:	4b2f      	ldr	r3, [pc, #188]	; (8001100 <DMA_DeInit+0x188>)
 8001042:	223d      	movs	r2, #61	; 0x3d
 8001044:	609a      	str	r2, [r3, #8]
}
 8001046:	e03a      	b.n	80010be <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a2e      	ldr	r2, [pc, #184]	; (8001104 <DMA_DeInit+0x18c>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d104      	bne.n	800105a <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8001050:	4b2b      	ldr	r3, [pc, #172]	; (8001100 <DMA_DeInit+0x188>)
 8001052:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8001056:	609a      	str	r2, [r3, #8]
}
 8001058:	e031      	b.n	80010be <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a2a      	ldr	r2, [pc, #168]	; (8001108 <DMA_DeInit+0x190>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d104      	bne.n	800106c <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8001062:	4b27      	ldr	r3, [pc, #156]	; (8001100 <DMA_DeInit+0x188>)
 8001064:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8001068:	609a      	str	r2, [r3, #8]
}
 800106a:	e028      	b.n	80010be <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a27      	ldr	r2, [pc, #156]	; (800110c <DMA_DeInit+0x194>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d104      	bne.n	800107e <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8001074:	4b22      	ldr	r3, [pc, #136]	; (8001100 <DMA_DeInit+0x188>)
 8001076:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 800107a:	609a      	str	r2, [r3, #8]
}
 800107c:	e01f      	b.n	80010be <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a23      	ldr	r2, [pc, #140]	; (8001110 <DMA_DeInit+0x198>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d103      	bne.n	800108e <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8001086:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <DMA_DeInit+0x188>)
 8001088:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <DMA_DeInit+0x16c>)
 800108a:	60da      	str	r2, [r3, #12]
}
 800108c:	e017      	b.n	80010be <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a20      	ldr	r2, [pc, #128]	; (8001114 <DMA_DeInit+0x19c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d103      	bne.n	800109e <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8001096:	4b1a      	ldr	r3, [pc, #104]	; (8001100 <DMA_DeInit+0x188>)
 8001098:	4a14      	ldr	r2, [pc, #80]	; (80010ec <DMA_DeInit+0x174>)
 800109a:	60da      	str	r2, [r3, #12]
}
 800109c:	e00f      	b.n	80010be <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a1d      	ldr	r2, [pc, #116]	; (8001118 <DMA_DeInit+0x1a0>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d103      	bne.n	80010ae <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 80010a6:	4b16      	ldr	r3, [pc, #88]	; (8001100 <DMA_DeInit+0x188>)
 80010a8:	4a12      	ldr	r2, [pc, #72]	; (80010f4 <DMA_DeInit+0x17c>)
 80010aa:	60da      	str	r2, [r3, #12]
}
 80010ac:	e007      	b.n	80010be <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a1a      	ldr	r2, [pc, #104]	; (800111c <DMA_DeInit+0x1a4>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d103      	bne.n	80010be <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 80010b6:	4b12      	ldr	r3, [pc, #72]	; (8001100 <DMA_DeInit+0x188>)
 80010b8:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 80010bc:	60da      	str	r2, [r3, #12]
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40026010 	.word	0x40026010
 80010d0:	40026000 	.word	0x40026000
 80010d4:	40026028 	.word	0x40026028
 80010d8:	40026040 	.word	0x40026040
 80010dc:	40026058 	.word	0x40026058
 80010e0:	40026070 	.word	0x40026070
 80010e4:	2000003d 	.word	0x2000003d
 80010e8:	40026088 	.word	0x40026088
 80010ec:	20000f40 	.word	0x20000f40
 80010f0:	400260a0 	.word	0x400260a0
 80010f4:	203d0000 	.word	0x203d0000
 80010f8:	400260b8 	.word	0x400260b8
 80010fc:	40026410 	.word	0x40026410
 8001100:	40026400 	.word	0x40026400
 8001104:	40026428 	.word	0x40026428
 8001108:	40026440 	.word	0x40026440
 800110c:	40026458 	.word	0x40026458
 8001110:	40026470 	.word	0x40026470
 8001114:	40026488 	.word	0x40026488
 8001118:	400264a0 	.word	0x400264a0
 800111c:	400264b8 	.word	0x400264b8

08001120 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	4b25      	ldr	r3, [pc, #148]	; (80011cc <DMA_Init+0xac>)
 8001138:	4013      	ands	r3, r2
 800113a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800114a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001156:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001162:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001168:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 800116e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001174:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	4313      	orrs	r3, r2
 800117a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f023 0307 	bic.w	r3, r3, #7
 800118e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001198:	4313      	orrs	r3, r2
 800119a:	68fa      	ldr	r2, [r7, #12]
 800119c:	4313      	orrs	r3, r2
 800119e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	691a      	ldr	r2, [r3, #16]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	60da      	str	r2, [r3, #12]
}
 80011be:	bf00      	nop
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	f01c803f 	.word	0xf01c803f

080011d0 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80011dc:	78fb      	ldrb	r3, [r7, #3]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d006      	beq.n	80011f0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f043 0201 	orr.w	r2, r3, #1
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80011ee:	e005      	b.n	80011fc <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f023 0201 	bic.w	r2, r3, #1
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	601a      	str	r2, [r3, #0]
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	4613      	mov	r3, r2
 8001214:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800121c:	2b00      	cmp	r3, #0
 800121e:	d00f      	beq.n	8001240 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d006      	beq.n	8001234 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	695b      	ldr	r3, [r3, #20]
 800122a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	615a      	str	r2, [r3, #20]
 8001232:	e005      	b.n	8001240 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	2b80      	cmp	r3, #128	; 0x80
 8001244:	d014      	beq.n	8001270 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d008      	beq.n	800125e <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	f003 031e 	and.w	r3, r3, #30
 8001256:	431a      	orrs	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 800125c:	e008      	b.n	8001270 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	f003 031e 	and.w	r3, r3, #30
 8001268:	43db      	mvns	r3, r3
 800126a:	401a      	ands	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	601a      	str	r2, [r3, #0]
}
 8001270:	bf00      	nop
 8001272:	3714      	adds	r7, #20
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 800127c:	b480      	push	{r7}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8001286:	2300      	movs	r3, #0
 8001288:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	2300      	movs	r3, #0
 8001290:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a22      	ldr	r2, [pc, #136]	; (8001320 <DMA_GetITStatus+0xa4>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d802      	bhi.n	80012a0 <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800129a:	4b22      	ldr	r3, [pc, #136]	; (8001324 <DMA_GetITStatus+0xa8>)
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	e001      	b.n	80012a4 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80012a0:	4b21      	ldr	r3, [pc, #132]	; (8001328 <DMA_GetITStatus+0xac>)
 80012a2:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80012aa:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d00a      	beq.n	80012c8 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	0adb      	lsrs	r3, r3, #11
 80012b6:	f003 031e 	and.w	r3, r3, #30
 80012ba:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4013      	ands	r3, r2
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	e004      	b.n	80012d2 <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	695b      	ldr	r3, [r3, #20]
 80012cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d0:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 80012dc:	693b      	ldr	r3, [r7, #16]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	e002      	b.n	80012ea <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80012f0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80012f4:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	4013      	ands	r3, r2
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d005      	beq.n	800130c <DMA_GetITStatus+0x90>
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d002      	beq.n	800130c <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8001306:	2301      	movs	r3, #1
 8001308:	75fb      	strb	r3, [r7, #23]
 800130a:	e001      	b.n	8001310 <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 800130c:	2300      	movs	r3, #0
 800130e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8001310:	7dfb      	ldrb	r3, [r7, #23]
}
 8001312:	4618      	mov	r0, r3
 8001314:	371c      	adds	r7, #28
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	4002640f 	.word	0x4002640f
 8001324:	40026000 	.word	0x40026000
 8001328:	40026400 	.word	0x40026400

0800132c <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a10      	ldr	r2, [pc, #64]	; (800137c <DMA_ClearITPendingBit+0x50>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d802      	bhi.n	8001344 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <DMA_ClearITPendingBit+0x54>)
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	e001      	b.n	8001348 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001344:	4b0f      	ldr	r3, [pc, #60]	; (8001384 <DMA_ClearITPendingBit+0x58>)
 8001346:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d007      	beq.n	8001362 <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001358:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800135c:	68fa      	ldr	r2, [r7, #12]
 800135e:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 8001360:	e006      	b.n	8001370 <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001368:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	6093      	str	r3, [r2, #8]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	4002640f 	.word	0x4002640f
 8001380:	40026000 	.word	0x40026000
 8001384:	40026400 	.word	0x40026400

08001388 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001388:	b480      	push	{r7}
 800138a:	b087      	sub	sp, #28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	2300      	movs	r3, #0
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	e076      	b.n	8001492 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80013a4:	2201      	movs	r2, #1
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	4013      	ands	r3, r2
 80013b6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80013b8:	68fa      	ldr	r2, [r7, #12]
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d165      	bne.n	800148c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	2103      	movs	r1, #3
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	401a      	ands	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	791b      	ldrb	r3, [r3, #4]
 80013de:	4619      	mov	r1, r3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	fa01 f303 	lsl.w	r3, r1, r3
 80013e8:	431a      	orrs	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	791b      	ldrb	r3, [r3, #4]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d003      	beq.n	80013fe <GPIO_Init+0x76>
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	791b      	ldrb	r3, [r3, #4]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d12e      	bne.n	800145c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	005b      	lsls	r3, r3, #1
 8001406:	2103      	movs	r1, #3
 8001408:	fa01 f303 	lsl.w	r3, r1, r3
 800140c:	43db      	mvns	r3, r3
 800140e:	401a      	ands	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689a      	ldr	r2, [r3, #8]
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	795b      	ldrb	r3, [r3, #5]
 800141c:	4619      	mov	r1, r3
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	431a      	orrs	r2, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685a      	ldr	r2, [r3, #4]
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	b29b      	uxth	r3, r3
 8001434:	4619      	mov	r1, r3
 8001436:	2301      	movs	r3, #1
 8001438:	408b      	lsls	r3, r1
 800143a:	43db      	mvns	r3, r3
 800143c:	401a      	ands	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	683a      	ldr	r2, [r7, #0]
 8001448:	7992      	ldrb	r2, [r2, #6]
 800144a:	4611      	mov	r1, r2
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	b292      	uxth	r2, r2
 8001450:	fa01 f202 	lsl.w	r2, r1, r2
 8001454:	b292      	uxth	r2, r2
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	68da      	ldr	r2, [r3, #12]
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	b29b      	uxth	r3, r3
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	2103      	movs	r1, #3
 8001468:	fa01 f303 	lsl.w	r3, r1, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	401a      	ands	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68da      	ldr	r2, [r3, #12]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	79db      	ldrb	r3, [r3, #7]
 800147c:	4619      	mov	r1, r3
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
 8001486:	431a      	orrs	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	3301      	adds	r3, #1
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	2b0f      	cmp	r3, #15
 8001496:	d985      	bls.n	80013a4 <GPIO_Init+0x1c>
    }
  }
}
 8001498:	bf00      	nop
 800149a:	371c      	adds	r7, #28
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	807b      	strh	r3, [r7, #2]
 80014b0:	4613      	mov	r3, r2
 80014b2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80014bc:	787a      	ldrb	r2, [r7, #1]
 80014be:	887b      	ldrh	r3, [r7, #2]
 80014c0:	f003 0307 	and.w	r3, r3, #7
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80014cc:	887b      	ldrh	r3, [r7, #2]
 80014ce:	08db      	lsrs	r3, r3, #3
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	887b      	ldrh	r3, [r7, #2]
 80014d6:	08db      	lsrs	r3, r3, #3
 80014d8:	b29b      	uxth	r3, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3208      	adds	r2, #8
 80014e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80014e4:	887b      	ldrh	r3, [r7, #2]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	210f      	movs	r1, #15
 80014ee:	fa01 f303 	lsl.w	r3, r1, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	ea02 0103 	and.w	r1, r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	f100 0208 	add.w	r2, r0, #8
 80014fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8001502:	887b      	ldrh	r3, [r7, #2]
 8001504:	08db      	lsrs	r3, r3, #3
 8001506:	b29b      	uxth	r3, r3
 8001508:	461a      	mov	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3208      	adds	r2, #8
 800150e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4313      	orrs	r3, r2
 8001516:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8001518:	887b      	ldrh	r3, [r7, #2]
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	b29b      	uxth	r3, r3
 800151e:	461a      	mov	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	3208      	adds	r2, #8
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800152a:	bf00      	nop
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
	...

08001538 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	; 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001540:	2300      	movs	r3, #0
 8001542:	61bb      	str	r3, [r7, #24]
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
 800154c:	2302      	movs	r3, #2
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	2302      	movs	r3, #2
 8001556:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001558:	4b47      	ldr	r3, [pc, #284]	; (8001678 <RCC_GetClocksFreq+0x140>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f003 030c 	and.w	r3, r3, #12
 8001560:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	2b04      	cmp	r3, #4
 8001566:	d007      	beq.n	8001578 <RCC_GetClocksFreq+0x40>
 8001568:	2b08      	cmp	r3, #8
 800156a:	d009      	beq.n	8001580 <RCC_GetClocksFreq+0x48>
 800156c:	2b00      	cmp	r3, #0
 800156e:	d13d      	bne.n	80015ec <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a42      	ldr	r2, [pc, #264]	; (800167c <RCC_GetClocksFreq+0x144>)
 8001574:	601a      	str	r2, [r3, #0]
      break;
 8001576:	e03d      	b.n	80015f4 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a41      	ldr	r2, [pc, #260]	; (8001680 <RCC_GetClocksFreq+0x148>)
 800157c:	601a      	str	r2, [r3, #0]
      break;
 800157e:	e039      	b.n	80015f4 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001580:	4b3d      	ldr	r3, [pc, #244]	; (8001678 <RCC_GetClocksFreq+0x140>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	0d9b      	lsrs	r3, r3, #22
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800158c:	4b3a      	ldr	r3, [pc, #232]	; (8001678 <RCC_GetClocksFreq+0x140>)
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001594:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d00c      	beq.n	80015b6 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800159c:	4a38      	ldr	r2, [pc, #224]	; (8001680 <RCC_GetClocksFreq+0x148>)
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a4:	4a34      	ldr	r2, [pc, #208]	; (8001678 <RCC_GetClocksFreq+0x140>)
 80015a6:	6852      	ldr	r2, [r2, #4]
 80015a8:	0992      	lsrs	r2, r2, #6
 80015aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80015ae:	fb02 f303 	mul.w	r3, r2, r3
 80015b2:	61fb      	str	r3, [r7, #28]
 80015b4:	e00b      	b.n	80015ce <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80015b6:	4a31      	ldr	r2, [pc, #196]	; (800167c <RCC_GetClocksFreq+0x144>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80015be:	4a2e      	ldr	r2, [pc, #184]	; (8001678 <RCC_GetClocksFreq+0x140>)
 80015c0:	6852      	ldr	r2, [r2, #4]
 80015c2:	0992      	lsrs	r2, r2, #6
 80015c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80015c8:	fb02 f303 	mul.w	r3, r2, r3
 80015cc:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80015ce:	4b2a      	ldr	r3, [pc, #168]	; (8001678 <RCC_GetClocksFreq+0x140>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	0c1b      	lsrs	r3, r3, #16
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	3301      	adds	r3, #1
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80015de:	69fa      	ldr	r2, [r7, #28]
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	601a      	str	r2, [r3, #0]
      break;
 80015ea:	e003      	b.n	80015f4 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4a23      	ldr	r2, [pc, #140]	; (800167c <RCC_GetClocksFreq+0x144>)
 80015f0:	601a      	str	r2, [r3, #0]
      break;
 80015f2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80015f4:	4b20      	ldr	r3, [pc, #128]	; (8001678 <RCC_GetClocksFreq+0x140>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015fc:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	091b      	lsrs	r3, r3, #4
 8001602:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001604:	4a1f      	ldr	r2, [pc, #124]	; (8001684 <RCC_GetClocksFreq+0x14c>)
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	4413      	add	r3, r2
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	40da      	lsrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800161c:	4b16      	ldr	r3, [pc, #88]	; (8001678 <RCC_GetClocksFreq+0x140>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001624:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	0a9b      	lsrs	r3, r3, #10
 800162a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800162c:	4a15      	ldr	r2, [pc, #84]	; (8001684 <RCC_GetClocksFreq+0x14c>)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	4413      	add	r3, r2
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	b2db      	uxtb	r3, r3
 8001636:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685a      	ldr	r2, [r3, #4]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	40da      	lsrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8001644:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <RCC_GetClocksFreq+0x140>)
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800164c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	0b5b      	lsrs	r3, r3, #13
 8001652:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8001654:	4a0b      	ldr	r2, [pc, #44]	; (8001684 <RCC_GetClocksFreq+0x14c>)
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	4413      	add	r3, r2
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	b2db      	uxtb	r3, r3
 800165e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	40da      	lsrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	60da      	str	r2, [r3, #12]
}
 800166c:	bf00      	nop
 800166e:	3724      	adds	r7, #36	; 0x24
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40023800 	.word	0x40023800
 800167c:	00f42400 	.word	0x00f42400
 8001680:	007a1200 	.word	0x007a1200
 8001684:	20000000 	.word	0x20000000

08001688 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001694:	78fb      	ldrb	r3, [r7, #3]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d006      	beq.n	80016a8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800169a:	490a      	ldr	r1, [pc, #40]	; (80016c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800169e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80016a6:	e006      	b.n	80016b6 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80016a8:	4906      	ldr	r1, [pc, #24]	; (80016c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <RCC_AHB1PeriphClockCmd+0x3c>)
 80016ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	43db      	mvns	r3, r3
 80016b2:	4013      	ands	r3, r2
 80016b4:	630b      	str	r3, [r1, #48]	; 0x30
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40023800 	.word	0x40023800

080016c8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80016d4:	78fb      	ldrb	r3, [r7, #3]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d006      	beq.n	80016e8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80016da:	490a      	ldr	r1, [pc, #40]	; (8001704 <RCC_APB1PeriphClockCmd+0x3c>)
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <RCC_APB1PeriphClockCmd+0x3c>)
 80016de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80016e6:	e006      	b.n	80016f6 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80016e8:	4906      	ldr	r1, [pc, #24]	; (8001704 <RCC_APB1PeriphClockCmd+0x3c>)
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <RCC_APB1PeriphClockCmd+0x3c>)
 80016ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	4013      	ands	r3, r2
 80016f4:	640b      	str	r3, [r1, #64]	; 0x40
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800

08001708 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	460b      	mov	r3, r1
 8001712:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001714:	78fb      	ldrb	r3, [r7, #3]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d006      	beq.n	8001728 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800171a:	490a      	ldr	r1, [pc, #40]	; (8001744 <RCC_APB2PeriphClockCmd+0x3c>)
 800171c:	4b09      	ldr	r3, [pc, #36]	; (8001744 <RCC_APB2PeriphClockCmd+0x3c>)
 800171e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4313      	orrs	r3, r2
 8001724:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001726:	e006      	b.n	8001736 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001728:	4906      	ldr	r1, [pc, #24]	; (8001744 <RCC_APB2PeriphClockCmd+0x3c>)
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <RCC_APB2PeriphClockCmd+0x3c>)
 800172c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	43db      	mvns	r3, r3
 8001732:	4013      	ands	r3, r2
 8001734:	644b      	str	r3, [r1, #68]	; 0x44
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800

08001748 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8001748:	b480      	push	{r7}
 800174a:	b085      	sub	sp, #20
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	4a29      	ldr	r2, [pc, #164]	; (8001804 <TIM_TimeBaseInit+0xbc>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d013      	beq.n	800178c <TIM_TimeBaseInit+0x44>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a28      	ldr	r2, [pc, #160]	; (8001808 <TIM_TimeBaseInit+0xc0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d00f      	beq.n	800178c <TIM_TimeBaseInit+0x44>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001772:	d00b      	beq.n	800178c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a25      	ldr	r2, [pc, #148]	; (800180c <TIM_TimeBaseInit+0xc4>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d007      	beq.n	800178c <TIM_TimeBaseInit+0x44>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a24      	ldr	r2, [pc, #144]	; (8001810 <TIM_TimeBaseInit+0xc8>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d003      	beq.n	800178c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a23      	ldr	r2, [pc, #140]	; (8001814 <TIM_TimeBaseInit+0xcc>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d108      	bne.n	800179e <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800178c:	89fb      	ldrh	r3, [r7, #14]
 800178e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001792:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	885a      	ldrh	r2, [r3, #2]
 8001798:	89fb      	ldrh	r3, [r7, #14]
 800179a:	4313      	orrs	r3, r2
 800179c:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a1d      	ldr	r2, [pc, #116]	; (8001818 <TIM_TimeBaseInit+0xd0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d00c      	beq.n	80017c0 <TIM_TimeBaseInit+0x78>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a1c      	ldr	r2, [pc, #112]	; (800181c <TIM_TimeBaseInit+0xd4>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d008      	beq.n	80017c0 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80017ae:	89fb      	ldrh	r3, [r7, #14]
 80017b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017b4:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	891a      	ldrh	r2, [r3, #8]
 80017ba:	89fb      	ldrh	r3, [r7, #14]
 80017bc:	4313      	orrs	r3, r2
 80017be:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	89fa      	ldrh	r2, [r7, #14]
 80017c4:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	881a      	ldrh	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <TIM_TimeBaseInit+0xbc>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d003      	beq.n	80017e6 <TIM_TimeBaseInit+0x9e>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a09      	ldr	r2, [pc, #36]	; (8001808 <TIM_TimeBaseInit+0xc0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d104      	bne.n	80017f0 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	7a9b      	ldrb	r3, [r3, #10]
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	829a      	strh	r2, [r3, #20]
}
 80017f6:	bf00      	nop
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40010000 	.word	0x40010000
 8001808:	40010400 	.word	0x40010400
 800180c:	40000400 	.word	0x40000400
 8001810:	40000800 	.word	0x40000800
 8001814:	40000c00 	.word	0x40000c00
 8001818:	40001000 	.word	0x40001000
 800181c:	40001400 	.word	0x40001400

08001820 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	460b      	mov	r3, r1
 800182a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800182c:	78fb      	ldrb	r3, [r7, #3]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d008      	beq.n	8001844 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	b29b      	uxth	r3, r3
 8001838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800183c:	b29a      	uxth	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 8001842:	e007      	b.n	8001854 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	b29b      	uxth	r3, r3
 800184a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800184e:	b29a      	uxth	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	801a      	strh	r2, [r3, #0]
}
 8001854:	bf00      	nop
 8001856:	370c      	adds	r7, #12
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800186c:	78fb      	ldrb	r3, [r7, #3]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d008      	beq.n	8001884 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	b29b      	uxth	r3, r3
 8001878:	f043 0301 	orr.w	r3, r3, #1
 800187c:	b29a      	uxth	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8001882:	e007      	b.n	8001894 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	b29b      	uxth	r3, r3
 800188a:	f023 0301 	bic.w	r3, r3, #1
 800188e:	b29a      	uxth	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	801a      	strh	r2, [r3, #0]
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	817b      	strh	r3, [r7, #10]
 80018ae:	2300      	movs	r3, #0
 80018b0:	81fb      	strh	r3, [r7, #14]
 80018b2:	2300      	movs	r3, #0
 80018b4:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	8c1b      	ldrh	r3, [r3, #32]
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	8c1b      	ldrh	r3, [r3, #32]
 80018ca:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	889b      	ldrh	r3, [r3, #4]
 80018d0:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	8b9b      	ldrh	r3, [r3, #28]
 80018d6:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 80018d8:	897b      	ldrh	r3, [r7, #10]
 80018da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018de:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80018e0:	897b      	ldrh	r3, [r7, #10]
 80018e2:	f023 0303 	bic.w	r3, r3, #3
 80018e6:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	881a      	ldrh	r2, [r3, #0]
 80018ec:	897b      	ldrh	r3, [r7, #10]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80018f2:	89fb      	ldrh	r3, [r7, #14]
 80018f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80018f8:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	899b      	ldrh	r3, [r3, #12]
 80018fe:	021b      	lsls	r3, r3, #8
 8001900:	b29a      	uxth	r2, r3
 8001902:	89fb      	ldrh	r3, [r7, #14]
 8001904:	4313      	orrs	r3, r2
 8001906:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	885b      	ldrh	r3, [r3, #2]
 800190c:	021b      	lsls	r3, r3, #8
 800190e:	b29a      	uxth	r2, r3
 8001910:	89fb      	ldrh	r3, [r7, #14]
 8001912:	4313      	orrs	r3, r2
 8001914:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a22      	ldr	r2, [pc, #136]	; (80019a4 <TIM_OC3Init+0x104>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d003      	beq.n	8001926 <TIM_OC3Init+0x86>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a21      	ldr	r2, [pc, #132]	; (80019a8 <TIM_OC3Init+0x108>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d12b      	bne.n	800197e <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8001926:	89fb      	ldrh	r3, [r7, #14]
 8001928:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800192c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	89db      	ldrh	r3, [r3, #14]
 8001932:	021b      	lsls	r3, r3, #8
 8001934:	b29a      	uxth	r2, r3
 8001936:	89fb      	ldrh	r3, [r7, #14]
 8001938:	4313      	orrs	r3, r2
 800193a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 800193c:	89fb      	ldrh	r3, [r7, #14]
 800193e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001942:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	889b      	ldrh	r3, [r3, #4]
 8001948:	021b      	lsls	r3, r3, #8
 800194a:	b29a      	uxth	r2, r3
 800194c:	89fb      	ldrh	r3, [r7, #14]
 800194e:	4313      	orrs	r3, r2
 8001950:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 8001952:	89bb      	ldrh	r3, [r7, #12]
 8001954:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001958:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 800195a:	89bb      	ldrh	r3, [r7, #12]
 800195c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001960:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	8a1b      	ldrh	r3, [r3, #16]
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	b29a      	uxth	r2, r3
 800196a:	89bb      	ldrh	r3, [r7, #12]
 800196c:	4313      	orrs	r3, r2
 800196e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	8a5b      	ldrh	r3, [r3, #18]
 8001974:	011b      	lsls	r3, r3, #4
 8001976:	b29a      	uxth	r2, r3
 8001978:	89bb      	ldrh	r3, [r7, #12]
 800197a:	4313      	orrs	r3, r2
 800197c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	89ba      	ldrh	r2, [r7, #12]
 8001982:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	897a      	ldrh	r2, [r7, #10]
 8001988:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	689a      	ldr	r2, [r3, #8]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	89fa      	ldrh	r2, [r7, #14]
 8001996:	841a      	strh	r2, [r3, #32]
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	40010000 	.word	0x40010000
 80019a8:	40010400 	.word	0x40010400

080019ac <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	81bb      	strh	r3, [r7, #12]
 80019ba:	2300      	movs	r3, #0
 80019bc:	817b      	strh	r3, [r7, #10]
 80019be:	2300      	movs	r3, #0
 80019c0:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	8c1b      	ldrh	r3, [r3, #32]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	8c1b      	ldrh	r3, [r3, #32]
 80019d6:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	889b      	ldrh	r3, [r3, #4]
 80019dc:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	8b9b      	ldrh	r3, [r3, #28]
 80019e2:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 80019e4:	89bb      	ldrh	r3, [r7, #12]
 80019e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80019ea:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 80019ec:	89bb      	ldrh	r3, [r7, #12]
 80019ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019f2:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	021b      	lsls	r3, r3, #8
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	89bb      	ldrh	r3, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8001a02:	897b      	ldrh	r3, [r7, #10]
 8001a04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a08:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	899b      	ldrh	r3, [r3, #12]
 8001a0e:	031b      	lsls	r3, r3, #12
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	897b      	ldrh	r3, [r7, #10]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	885b      	ldrh	r3, [r3, #2]
 8001a1c:	031b      	lsls	r3, r3, #12
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	897b      	ldrh	r3, [r7, #10]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a12      	ldr	r2, [pc, #72]	; (8001a74 <TIM_OC4Init+0xc8>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d003      	beq.n	8001a36 <TIM_OC4Init+0x8a>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a11      	ldr	r2, [pc, #68]	; (8001a78 <TIM_OC4Init+0xcc>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d10a      	bne.n	8001a4c <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8001a36:	89fb      	ldrh	r3, [r7, #14]
 8001a38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a3c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	8a1b      	ldrh	r3, [r3, #16]
 8001a42:	019b      	lsls	r3, r3, #6
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	89fb      	ldrh	r3, [r7, #14]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	89fa      	ldrh	r2, [r7, #14]
 8001a50:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	89ba      	ldrh	r2, [r7, #12]
 8001a56:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	897a      	ldrh	r2, [r7, #10]
 8001a64:	841a      	strh	r2, [r3, #32]
}
 8001a66:	bf00      	nop
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	40010000 	.word	0x40010000
 8001a78:	40010400 	.word	0x40010400

08001a7c <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	460b      	mov	r3, r1
 8001a86:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	8b9b      	ldrh	r3, [r3, #28]
 8001a90:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8001a92:	89fb      	ldrh	r3, [r7, #14]
 8001a94:	f023 0308 	bic.w	r3, r3, #8
 8001a98:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8001a9a:	89fa      	ldrh	r2, [r7, #14]
 8001a9c:	887b      	ldrh	r3, [r7, #2]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	89fa      	ldrh	r2, [r7, #14]
 8001aa6:	839a      	strh	r2, [r3, #28]
}
 8001aa8:	bf00      	nop
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	460b      	mov	r3, r1
 8001abe:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	8b9b      	ldrh	r3, [r3, #28]
 8001ac8:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8001aca:	89fb      	ldrh	r3, [r7, #14]
 8001acc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ad0:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8001ad2:	887b      	ldrh	r3, [r7, #2]
 8001ad4:	021b      	lsls	r3, r3, #8
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	89fb      	ldrh	r3, [r7, #14]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	89fa      	ldrh	r2, [r7, #14]
 8001ae2:	839a      	strh	r2, [r3, #28]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	807b      	strh	r3, [r7, #2]
 8001afc:	4613      	mov	r3, r2
 8001afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001b00:	787b      	ldrb	r3, [r7, #1]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d008      	beq.n	8001b18 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	899b      	ldrh	r3, [r3, #12]
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	887b      	ldrh	r3, [r7, #2]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8001b16:	e009      	b.n	8001b2c <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	899b      	ldrh	r3, [r3, #12]
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	887b      	ldrh	r3, [r7, #2]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	4013      	ands	r3, r2
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	819a      	strh	r2, [r3, #12]
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	460b      	mov	r3, r1
 8001b42:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001b44:	887b      	ldrh	r3, [r7, #2]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	821a      	strh	r2, [r3, #16]
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	460b      	mov	r3, r1
 8001b64:	807b      	strh	r3, [r7, #2]
 8001b66:	4613      	mov	r3, r2
 8001b68:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001b6a:	787b      	ldrb	r3, [r7, #1]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d008      	beq.n	8001b82 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	899b      	ldrh	r3, [r3, #12]
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	887b      	ldrh	r3, [r7, #2]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
 8001b80:	e009      	b.n	8001b96 <TIM_DMACmd+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	899b      	ldrh	r3, [r3, #12]
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	887b      	ldrh	r3, [r7, #2]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	b29b      	uxth	r3, r3
 8001b8e:	4013      	ands	r3, r2
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	819a      	strh	r2, [r3, #12]
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	; 0x28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	8a1b      	ldrh	r3, [r3, #16]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	88db      	ldrh	r3, [r3, #6]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	899b      	ldrh	r3, [r3, #12]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001bf0:	f023 030c 	bic.w	r3, r3, #12
 8001bf4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	889a      	ldrh	r2, [r3, #4]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	891b      	ldrh	r3, [r3, #8]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8001c06:	4313      	orrs	r3, r2
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	b29a      	uxth	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	8a9b      	ldrh	r3, [r3, #20]
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	899b      	ldrh	r3, [r3, #12]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c32:	4313      	orrs	r3, r2
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff fc78 	bl	8001538 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a30      	ldr	r2, [pc, #192]	; (8001d0c <USART_Init+0x168>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d003      	beq.n	8001c58 <USART_Init+0xb4>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a2f      	ldr	r2, [pc, #188]	; (8001d10 <USART_Init+0x16c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d102      	bne.n	8001c5e <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	623b      	str	r3, [r7, #32]
 8001c5c:	e001      	b.n	8001c62 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	899b      	ldrh	r3, [r3, #12]
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	b21b      	sxth	r3, r3
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	da0c      	bge.n	8001c88 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001c6e:	6a3a      	ldr	r2, [r7, #32]
 8001c70:	4613      	mov	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	009a      	lsls	r2, r3, #2
 8001c78:	441a      	add	r2, r3
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	e00b      	b.n	8001ca0 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001c88:	6a3a      	ldr	r2, [r7, #32]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	4413      	add	r3, r2
 8001c90:	009a      	lsls	r2, r3, #2
 8001c92:	441a      	add	r2, r3
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c9e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	4a1c      	ldr	r2, [pc, #112]	; (8001d14 <USART_Init+0x170>)
 8001ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca8:	095b      	lsrs	r3, r3, #5
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	091b      	lsrs	r3, r3, #4
 8001cb2:	2264      	movs	r2, #100	; 0x64
 8001cb4:	fb02 f303 	mul.w	r3, r2, r3
 8001cb8:	69fa      	ldr	r2, [r7, #28]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	899b      	ldrh	r3, [r3, #12]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	b21b      	sxth	r3, r3
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	da0c      	bge.n	8001ce4 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001cca:	69bb      	ldr	r3, [r7, #24]
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	3332      	adds	r3, #50	; 0x32
 8001cd0:	4a10      	ldr	r2, [pc, #64]	; (8001d14 <USART_Init+0x170>)
 8001cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd6:	095b      	lsrs	r3, r3, #5
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce2:	e00b      	b.n	8001cfc <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	011b      	lsls	r3, r3, #4
 8001ce8:	3332      	adds	r3, #50	; 0x32
 8001cea:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <USART_Init+0x170>)
 8001cec:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf0:	095b      	lsrs	r3, r3, #5
 8001cf2:	f003 030f 	and.w	r3, r3, #15
 8001cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	811a      	strh	r2, [r3, #8]
}
 8001d04:	bf00      	nop
 8001d06:	3728      	adds	r7, #40	; 0x28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40011000 	.word	0x40011000
 8001d10:	40011400 	.word	0x40011400
 8001d14:	51eb851f 	.word	0x51eb851f

08001d18 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001d24:	78fb      	ldrb	r3, [r7, #3]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d008      	beq.n	8001d3c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	899b      	ldrh	r3, [r3, #12]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8001d3a:	e007      	b.n	8001d4c <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	899b      	ldrh	r3, [r3, #12]
 8001d40:	b29b      	uxth	r3, r3
 8001d42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	819a      	strh	r2, [r3, #12]
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr

08001d58 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8001d64:	887b      	ldrh	r3, [r7, #2]
 8001d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	809a      	strh	r2, [r3, #4]
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b087      	sub	sp, #28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	807b      	strh	r3, [r7, #2]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
 8001d94:	2300      	movs	r3, #0
 8001d96:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001da0:	887b      	ldrh	r3, [r7, #2]
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	095b      	lsrs	r3, r3, #5
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001daa:	887b      	ldrh	r3, [r7, #2]
 8001dac:	f003 031f 	and.w	r3, r3, #31
 8001db0:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001db2:	2201      	movs	r2, #1
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d103      	bne.n	8001dca <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	330c      	adds	r3, #12
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	e009      	b.n	8001dde <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d103      	bne.n	8001dd8 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	3310      	adds	r3, #16
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	e002      	b.n	8001dde <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	3314      	adds	r3, #20
 8001ddc:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8001dde:	787b      	ldrb	r3, [r7, #1]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d006      	beq.n	8001df2 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	6811      	ldr	r1, [r2, #0]
 8001dea:	68ba      	ldr	r2, [r7, #8]
 8001dec:	430a      	orrs	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001df0:	e006      	b.n	8001e00 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	6811      	ldr	r1, [r2, #0]
 8001df8:	68ba      	ldr	r2, [r7, #8]
 8001dfa:	43d2      	mvns	r2, r2
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]
}
 8001e00:	bf00      	nop
 8001e02:	371c      	adds	r7, #28
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr

08001e0c <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	887b      	ldrh	r3, [r7, #2]
 8001e24:	4013      	ands	r3, r2
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
 8001e30:	e001      	b.n	8001e36 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001e32:	2300      	movs	r3, #0
 8001e34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b087      	sub	sp, #28
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8001e50:	2300      	movs	r3, #0
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001e60:	887b      	ldrh	r3, [r7, #2]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	095b      	lsrs	r3, r3, #5
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001e6a:	887b      	ldrh	r3, [r7, #2]
 8001e6c:	f003 031f 	and.w	r3, r3, #31
 8001e70:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001e72:	2201      	movs	r2, #1
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d107      	bne.n	8001e92 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	899b      	ldrh	r3, [r3, #12]
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	461a      	mov	r2, r3
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	e011      	b.n	8001eb6 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d107      	bne.n	8001ea8 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	8a1b      	ldrh	r3, [r3, #16]
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	e006      	b.n	8001eb6 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	8a9b      	ldrh	r3, [r3, #20]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001eb6:	887b      	ldrh	r3, [r7, #2]
 8001eb8:	0a1b      	lsrs	r3, r3, #8
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <USART_GetITStatus+0xa4>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	74fb      	strb	r3, [r7, #19]
 8001ee6:	e001      	b.n	8001eec <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001eec:	7cfb      	ldrb	r3, [r7, #19]
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	371c      	adds	r7, #28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b085      	sub	sp, #20
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
 8001f02:	460b      	mov	r3, r1
 8001f04:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8001f06:	2300      	movs	r3, #0
 8001f08:	81fb      	strh	r3, [r7, #14]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8001f0e:	887b      	ldrh	r3, [r7, #2]
 8001f10:	0a1b      	lsrs	r3, r3, #8
 8001f12:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8001f14:	89fb      	ldrh	r3, [r7, #14]
 8001f16:	2201      	movs	r2, #1
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8001f1e:	89bb      	ldrh	r3, [r7, #12]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	801a      	strh	r2, [r3, #0]
}
 8001f28:	bf00      	nop
 8001f2a:	3714      	adds	r7, #20
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	0000      	movs	r0, r0
	...

08001f38 <DELAY_init>:
uint32_t D_mS; // Global variable (ms)
uint32_t D_S; // Global variable (s)


void DELAY_init(void)
{
 8001f38:	b590      	push	{r4, r7, lr}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
	RCC_ClocksTypeDef Clocks;
	RCC_GetClocksFreq(&Clocks);
 8001f3e:	463b      	mov	r3, r7
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff faf9 	bl	8001538 <RCC_GetClocksFreq>
	G_CLK = Clocks.SYSCLK_Frequency;	// Read the systemclock
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	4a3f      	ldr	r2, [pc, #252]	; (8002048 <DELAY_init+0x110>)
 8001f4a:	6013      	str	r3, [r2, #0]
	D_S  = (G_CLK*1.25)/9/2;	// Number of instructions in one second
 8001f4c:	4b3e      	ldr	r3, [pc, #248]	; (8002048 <DELAY_init+0x110>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe fa85 	bl	8000460 <__aeabi_ui2d>
 8001f56:	f04f 0200 	mov.w	r2, #0
 8001f5a:	4b3c      	ldr	r3, [pc, #240]	; (800204c <DELAY_init+0x114>)
 8001f5c:	f7fe faf6 	bl	800054c <__aeabi_dmul>
 8001f60:	4603      	mov	r3, r0
 8001f62:	460c      	mov	r4, r1
 8001f64:	4618      	mov	r0, r3
 8001f66:	4621      	mov	r1, r4
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	4b38      	ldr	r3, [pc, #224]	; (8002050 <DELAY_init+0x118>)
 8001f6e:	f7fe fc17 	bl	80007a0 <__aeabi_ddiv>
 8001f72:	4603      	mov	r3, r0
 8001f74:	460c      	mov	r4, r1
 8001f76:	4618      	mov	r0, r3
 8001f78:	4621      	mov	r1, r4
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f82:	f7fe fc0d 	bl	80007a0 <__aeabi_ddiv>
 8001f86:	4603      	mov	r3, r0
 8001f88:	460c      	mov	r4, r1
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	4621      	mov	r1, r4
 8001f8e:	f7fe fcef 	bl	8000970 <__aeabi_d2uiz>
 8001f92:	4602      	mov	r2, r0
 8001f94:	4b2f      	ldr	r3, [pc, #188]	; (8002054 <DELAY_init+0x11c>)
 8001f96:	601a      	str	r2, [r3, #0]
	D_mS = (G_CLK*1.25)/9000/2; // Number of instructions in one millisecond
 8001f98:	4b2b      	ldr	r3, [pc, #172]	; (8002048 <DELAY_init+0x110>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe fa5f 	bl	8000460 <__aeabi_ui2d>
 8001fa2:	f04f 0200 	mov.w	r2, #0
 8001fa6:	4b29      	ldr	r3, [pc, #164]	; (800204c <DELAY_init+0x114>)
 8001fa8:	f7fe fad0 	bl	800054c <__aeabi_dmul>
 8001fac:	4603      	mov	r3, r0
 8001fae:	460c      	mov	r4, r1
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	4621      	mov	r1, r4
 8001fb4:	a320      	add	r3, pc, #128	; (adr r3, 8002038 <DELAY_init+0x100>)
 8001fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fba:	f7fe fbf1 	bl	80007a0 <__aeabi_ddiv>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	460c      	mov	r4, r1
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	4621      	mov	r1, r4
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001fce:	f7fe fbe7 	bl	80007a0 <__aeabi_ddiv>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	460c      	mov	r4, r1
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	4621      	mov	r1, r4
 8001fda:	f7fe fcc9 	bl	8000970 <__aeabi_d2uiz>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	4b1d      	ldr	r3, [pc, #116]	; (8002058 <DELAY_init+0x120>)
 8001fe2:	601a      	str	r2, [r3, #0]
	D_uS = (G_CLK*1.25)/9000000/2; // Number of instructions in one microsecond, largest rounding error
 8001fe4:	4b18      	ldr	r3, [pc, #96]	; (8002048 <DELAY_init+0x110>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe fa39 	bl	8000460 <__aeabi_ui2d>
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	4b16      	ldr	r3, [pc, #88]	; (800204c <DELAY_init+0x114>)
 8001ff4:	f7fe faaa 	bl	800054c <__aeabi_dmul>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	460c      	mov	r4, r1
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	4621      	mov	r1, r4
 8002000:	a30f      	add	r3, pc, #60	; (adr r3, 8002040 <DELAY_init+0x108>)
 8002002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002006:	f7fe fbcb 	bl	80007a0 <__aeabi_ddiv>
 800200a:	4603      	mov	r3, r0
 800200c:	460c      	mov	r4, r1
 800200e:	4618      	mov	r0, r3
 8002010:	4621      	mov	r1, r4
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800201a:	f7fe fbc1 	bl	80007a0 <__aeabi_ddiv>
 800201e:	4603      	mov	r3, r0
 8002020:	460c      	mov	r4, r1
 8002022:	4618      	mov	r0, r3
 8002024:	4621      	mov	r1, r4
 8002026:	f7fe fca3 	bl	8000970 <__aeabi_d2uiz>
 800202a:	4602      	mov	r2, r0
 800202c:	4b0b      	ldr	r3, [pc, #44]	; (800205c <DELAY_init+0x124>)
 800202e:	601a      	str	r2, [r3, #0]
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	bd90      	pop	{r4, r7, pc}
 8002038:	00000000 	.word	0x00000000
 800203c:	40c19400 	.word	0x40c19400
 8002040:	00000000 	.word	0x00000000
 8002044:	41612a88 	.word	0x41612a88
 8002048:	20013468 	.word	0x20013468
 800204c:	3ff40000 	.word	0x3ff40000
 8002050:	40220000 	.word	0x40220000
 8002054:	2001346c 	.word	0x2001346c
 8002058:	20013474 	.word	0x20013474
 800205c:	20013470 	.word	0x20013470

08002060 <UB_VGA_Screen_Init>:

//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
  uint16_t xp,yp;

  VGA.hsync_cnt=0;
 8002066:	4b1b      	ldr	r3, [pc, #108]	; (80020d4 <UB_VGA_Screen_Init+0x74>)
 8002068:	2200      	movs	r2, #0
 800206a:	801a      	strh	r2, [r3, #0]
  VGA.start_adr=0;
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <UB_VGA_Screen_Init+0x74>)
 800206e:	2200      	movs	r2, #0
 8002070:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg=0;
 8002072:	4b18      	ldr	r3, [pc, #96]	; (80020d4 <UB_VGA_Screen_Init+0x74>)
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]

  // RAM init total black
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8002078:	2300      	movs	r3, #0
 800207a:	80bb      	strh	r3, [r7, #4]
 800207c:	e017      	b.n	80020ae <UB_VGA_Screen_Init+0x4e>
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 800207e:	2300      	movs	r3, #0
 8002080:	80fb      	strh	r3, [r7, #6]
 8002082:	e00d      	b.n	80020a0 <UB_VGA_Screen_Init+0x40>
      VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=0;
 8002084:	88ba      	ldrh	r2, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	4413      	add	r3, r2
 800208c:	019b      	lsls	r3, r3, #6
 800208e:	441a      	add	r2, r3
 8002090:	88fb      	ldrh	r3, [r7, #6]
 8002092:	4413      	add	r3, r2
 8002094:	4a10      	ldr	r2, [pc, #64]	; (80020d8 <UB_VGA_Screen_Init+0x78>)
 8002096:	2100      	movs	r1, #0
 8002098:	54d1      	strb	r1, [r2, r3]
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 800209a:	88fb      	ldrh	r3, [r7, #6]
 800209c:	3301      	adds	r3, #1
 800209e:	80fb      	strh	r3, [r7, #6]
 80020a0:	88fb      	ldrh	r3, [r7, #6]
 80020a2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80020a6:	d9ed      	bls.n	8002084 <UB_VGA_Screen_Init+0x24>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 80020a8:	88bb      	ldrh	r3, [r7, #4]
 80020aa:	3301      	adds	r3, #1
 80020ac:	80bb      	strh	r3, [r7, #4]
 80020ae:	88bb      	ldrh	r3, [r7, #4]
 80020b0:	2bef      	cmp	r3, #239	; 0xef
 80020b2:	d9e4      	bls.n	800207e <UB_VGA_Screen_Init+0x1e>
    }
  }

  // init IO-Pins
  P_VGA_InitIO();
 80020b4:	f000 f85e 	bl	8002174 <P_VGA_InitIO>
  // init Timer
  P_VGA_InitTIM();
 80020b8:	f000 f8b0 	bl	800221c <P_VGA_InitTIM>
  // init DMA
  P_VGA_InitDMA();
 80020bc:	f000 f940 	bl	8002340 <P_VGA_InitDMA>
  // init Interrupts
  P_VGA_InitINT();
 80020c0:	f000 f912 	bl	80022e8 <P_VGA_InitINT>

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg=DMA2_Stream5->CR;
 80020c4:	4b05      	ldr	r3, [pc, #20]	; (80020dc <UB_VGA_Screen_Init+0x7c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a02      	ldr	r2, [pc, #8]	; (80020d4 <UB_VGA_Screen_Init+0x74>)
 80020ca:	6093      	str	r3, [r2, #8]
}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	200006ec 	.word	0x200006ec
 80020d8:	200006f8 	.word	0x200006f8
 80020dc:	40026488 	.word	0x40026488

080020e0 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 80020ea:	2300      	movs	r3, #0
 80020ec:	81bb      	strh	r3, [r7, #12]
 80020ee:	e012      	b.n	8002116 <UB_VGA_FillScreen+0x36>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 80020f0:	2300      	movs	r3, #0
 80020f2:	81fb      	strh	r3, [r7, #14]
 80020f4:	e008      	b.n	8002108 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp,yp,color);
 80020f6:	79fa      	ldrb	r2, [r7, #7]
 80020f8:	89b9      	ldrh	r1, [r7, #12]
 80020fa:	89fb      	ldrh	r3, [r7, #14]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 f811 	bl	8002124 <UB_VGA_SetPixel>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 8002102:	89fb      	ldrh	r3, [r7, #14]
 8002104:	3301      	adds	r3, #1
 8002106:	81fb      	strh	r3, [r7, #14]
 8002108:	89fb      	ldrh	r3, [r7, #14]
 800210a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800210e:	d3f2      	bcc.n	80020f6 <UB_VGA_FillScreen+0x16>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8002110:	89bb      	ldrh	r3, [r7, #12]
 8002112:	3301      	adds	r3, #1
 8002114:	81bb      	strh	r3, [r7, #12]
 8002116:	89bb      	ldrh	r3, [r7, #12]
 8002118:	2bef      	cmp	r3, #239	; 0xef
 800211a:	d9e9      	bls.n	80020f0 <UB_VGA_FillScreen+0x10>
    }
  }
}
 800211c:	bf00      	nop
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	80fb      	strh	r3, [r7, #6]
 800212e:	460b      	mov	r3, r1
 8002130:	80bb      	strh	r3, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	70fb      	strb	r3, [r7, #3]
  if(xp>=VGA_DISPLAY_X) xp=0;
 8002136:	88fb      	ldrh	r3, [r7, #6]
 8002138:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800213c:	d301      	bcc.n	8002142 <UB_VGA_SetPixel+0x1e>
 800213e:	2300      	movs	r3, #0
 8002140:	80fb      	strh	r3, [r7, #6]
  if(yp>=VGA_DISPLAY_Y) yp=0;
 8002142:	88bb      	ldrh	r3, [r7, #4]
 8002144:	2bef      	cmp	r3, #239	; 0xef
 8002146:	d901      	bls.n	800214c <UB_VGA_SetPixel+0x28>
 8002148:	2300      	movs	r3, #0
 800214a:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=color;
 800214c:	88ba      	ldrh	r2, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	019b      	lsls	r3, r3, #6
 8002156:	441a      	add	r2, r3
 8002158:	88fb      	ldrh	r3, [r7, #6]
 800215a:	4413      	add	r3, r2
 800215c:	4904      	ldr	r1, [pc, #16]	; (8002170 <UB_VGA_SetPixel+0x4c>)
 800215e:	78fa      	ldrb	r2, [r7, #3]
 8002160:	54ca      	strb	r2, [r1, r3]
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	200006f8 	.word	0x200006f8

08002174 <P_VGA_InitIO>:
//--------------------------------------------------------------
// interne Funktionen
// init aller IO-Pins
//--------------------------------------------------------------
void P_VGA_InitIO(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
  // init RGB-Pins (PE8 - PE15)
  // as normal GPIOs
  //---------------------------------------------
 
  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800217a:	2101      	movs	r1, #1
 800217c:	2010      	movs	r0, #16
 800217e:	f7ff fa83 	bl	8001688 <RCC_AHB1PeriphClockCmd>

  // Config as Digital output
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 |
 8002182:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002186:	603b      	str	r3, [r7, #0]
        GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002188:	2301      	movs	r3, #1
 800218a:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800218c:	2300      	movs	r3, #0
 800218e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002190:	2301      	movs	r3, #1
 8002192:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8002194:	2303      	movs	r3, #3
 8002196:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002198:	463b      	mov	r3, r7
 800219a:	4619      	mov	r1, r3
 800219c:	481d      	ldr	r0, [pc, #116]	; (8002214 <P_VGA_InitIO+0xa0>)
 800219e:	f7ff f8f3 	bl	8001388 <GPIO_Init>

  GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 80021a2:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <P_VGA_InitIO+0xa0>)
 80021a4:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80021a8:	835a      	strh	r2, [r3, #26]
  // init of the H-Sync Pin (PB11)
  // using Timer2 and CH4
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80021aa:	2101      	movs	r1, #1
 80021ac:	2002      	movs	r0, #2
 80021ae:	f7ff fa6b 	bl	8001688 <RCC_AHB1PeriphClockCmd>

  // Config Pins as Digital-out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 80021b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80021b6:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80021b8:	2302      	movs	r3, #2
 80021ba:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80021bc:	2303      	movs	r3, #3
 80021be:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80021c0:	2300      	movs	r3, #0
 80021c2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 80021c4:	2301      	movs	r3, #1
 80021c6:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 80021c8:	463b      	mov	r3, r7
 80021ca:	4619      	mov	r1, r3
 80021cc:	4812      	ldr	r0, [pc, #72]	; (8002218 <P_VGA_InitIO+0xa4>)
 80021ce:	f7ff f8db 	bl	8001388 <GPIO_Init>

  // alternative function connect with IO
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_TIM2);
 80021d2:	2201      	movs	r2, #1
 80021d4:	210b      	movs	r1, #11
 80021d6:	4810      	ldr	r0, [pc, #64]	; (8002218 <P_VGA_InitIO+0xa4>)
 80021d8:	f7ff f964 	bl	80014a4 <GPIO_PinAFConfig>
  // init of V-Sync Pin (PB12)
  // using GPIO
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80021dc:	2101      	movs	r1, #1
 80021de:	2002      	movs	r0, #2
 80021e0:	f7ff fa52 	bl	8001688 <RCC_AHB1PeriphClockCmd>

  // Config of the Pins as Digital out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 80021e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e8:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80021ea:	2301      	movs	r3, #1
 80021ec:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80021ee:	2300      	movs	r3, #0
 80021f0:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80021f2:	2301      	movs	r3, #1
 80021f4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80021f6:	2303      	movs	r3, #3
 80021f8:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 80021fa:	463b      	mov	r3, r7
 80021fc:	4619      	mov	r1, r3
 80021fe:	4806      	ldr	r0, [pc, #24]	; (8002218 <P_VGA_InitIO+0xa4>)
 8002200:	f7ff f8c2 	bl	8001388 <GPIO_Init>

  GPIOB->BSRRL = GPIO_Pin_12;
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <P_VGA_InitIO+0xa4>)
 8002206:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800220a:	831a      	strh	r2, [r3, #24]
}
 800220c:	bf00      	nop
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40021000 	.word	0x40021000
 8002218:	40020400 	.word	0x40020400

0800221c <P_VGA_InitTIM>:
//--------------------------------------------------------------
// internal Function
// init Timer
//--------------------------------------------------------------
void P_VGA_InitTIM(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af00      	add	r7, sp, #0
  // init of Timer1 for
  // Pixeldata via DMA
  //---------------------------------------------

  // Clock enable
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8002222:	2101      	movs	r1, #1
 8002224:	2001      	movs	r0, #1
 8002226:	f7ff fa6f 	bl	8001708 <RCC_APB2PeriphClockCmd>

  // Timer1 init
  TIM_TimeBaseStructure.TIM_Period =  VGA_TIM1_PERIODE;
 800222a:	230b      	movs	r3, #11
 800222c:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM1_PRESCALE;
 800222e:	2300      	movs	r3, #0
 8002230:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8002232:	2300      	movs	r3, #0
 8002234:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002236:	2300      	movs	r3, #0
 8002238:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 800223a:	f107 0314 	add.w	r3, r7, #20
 800223e:	4619      	mov	r1, r3
 8002240:	4828      	ldr	r0, [pc, #160]	; (80022e4 <P_VGA_InitTIM+0xc8>)
 8002242:	f7ff fa81 	bl	8001748 <TIM_TimeBaseInit>
  // CH4 for HSYNC-Signal
  // CH3 for DMA Trigger start
  //---------------------------------------------

  // Clock enable
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8002246:	2101      	movs	r1, #1
 8002248:	2001      	movs	r0, #1
 800224a:	f7ff fa3d 	bl	80016c8 <RCC_APB1PeriphClockCmd>

  // Timer2 init
  TIM_TimeBaseStructure.TIM_Period = VGA_TIM2_HSYNC_PERIODE;
 800224e:	f640 236b 	movw	r3, #2667	; 0xa6b
 8002252:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8002254:	2300      	movs	r3, #0
 8002256:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8002258:	2300      	movs	r3, #0
 800225a:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 800225c:	2300      	movs	r3, #0
 800225e:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8002260:	f107 0314 	add.w	r3, r7, #20
 8002264:	4619      	mov	r1, r3
 8002266:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800226a:	f7ff fa6d 	bl	8001748 <TIM_TimeBaseInit>

  // Timer2 Channel 3 ( for DMA Trigger start)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 800226e:	2360      	movs	r3, #96	; 0x60
 8002270:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8002272:	2301      	movs	r3, #1
 8002274:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HTRIGGER_START-VGA_TIM2_DMA_DELAY;
 8002276:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 800227a:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 800227c:	2302      	movs	r3, #2
 800227e:	81bb      	strh	r3, [r7, #12]
  TIM_OC3Init(TIM2, &TIM_OCInitStructure);
 8002280:	463b      	mov	r3, r7
 8002282:	4619      	mov	r1, r3
 8002284:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002288:	f7ff fb0a 	bl	80018a0 <TIM_OC3Init>
  TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 800228c:	2108      	movs	r1, #8
 800228e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002292:	f7ff fbf3 	bl	8001a7c <TIM_OC3PreloadConfig>

  // Timer2 Channel 4 (for HSYNC)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8002296:	2360      	movs	r3, #96	; 0x60
 8002298:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800229a:	2301      	movs	r3, #1
 800229c:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HSYNC_IMP;
 800229e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80022a2:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 80022a4:	2302      	movs	r3, #2
 80022a6:	81bb      	strh	r3, [r7, #12]
  TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 80022a8:	463b      	mov	r3, r7
 80022aa:	4619      	mov	r1, r3
 80022ac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80022b0:	f7ff fb7c 	bl	80019ac <TIM_OC4Init>
  TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 80022b4:	2108      	movs	r1, #8
 80022b6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80022ba:	f7ff fbfb 	bl	8001ab4 <TIM_OC4PreloadConfig>
  //---------------------------------------------
  // enable all Timers
  //---------------------------------------------

  // Timer1 enable
  TIM_ARRPreloadConfig(TIM1, ENABLE);
 80022be:	2101      	movs	r1, #1
 80022c0:	4808      	ldr	r0, [pc, #32]	; (80022e4 <P_VGA_InitTIM+0xc8>)
 80022c2:	f7ff faad 	bl	8001820 <TIM_ARRPreloadConfig>

  // Timer2 enable
  TIM_ARRPreloadConfig(TIM2, ENABLE);
 80022c6:	2101      	movs	r1, #1
 80022c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80022cc:	f7ff faa8 	bl	8001820 <TIM_ARRPreloadConfig>
  TIM_Cmd(TIM2, ENABLE);
 80022d0:	2101      	movs	r1, #1
 80022d2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80022d6:	f7ff fac3 	bl	8001860 <TIM_Cmd>

}
 80022da:	bf00      	nop
 80022dc:	3720      	adds	r7, #32
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40010000 	.word	0x40010000

080022e8 <P_VGA_InitINT>:
//--------------------------------------------------------------
// internal Function
// init Interrupts
//--------------------------------------------------------------
void P_VGA_InitINT(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
  // init from DMA Interrupt
  // for TransferComplete Interrupt
  // DMA2, Stream5, Channel6
  //---------------------------------------------

  DMA_ITConfig(DMA2_Stream5, DMA_IT_TC, ENABLE);
 80022ee:	2201      	movs	r2, #1
 80022f0:	2110      	movs	r1, #16
 80022f2:	4812      	ldr	r0, [pc, #72]	; (800233c <P_VGA_InitINT+0x54>)
 80022f4:	f7fe ff88 	bl	8001208 <DMA_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream5_IRQn;
 80022f8:	2344      	movs	r3, #68	; 0x44
 80022fa:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002304:	2301      	movs	r3, #1
 8002306:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8002308:	1d3b      	adds	r3, r7, #4
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe fdd2 	bl	8000eb4 <NVIC_Init>
  // init of Timer2 Interrupt
  // for HSync-Counter using Update
  // for DMA Trigger START using CH3
  //---------------------------------------------

  TIM_ITConfig(TIM2,TIM_IT_CC3,ENABLE);
 8002310:	2201      	movs	r2, #1
 8002312:	2108      	movs	r1, #8
 8002314:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002318:	f7ff fbea 	bl	8001af0 <TIM_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 800231c:	231c      	movs	r3, #28
 800231e:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002324:	2300      	movs	r3, #0
 8002326:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002328:	2301      	movs	r3, #1
 800232a:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 800232c:	1d3b      	adds	r3, r7, #4
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fdc0 	bl	8000eb4 <NVIC_Init>
}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40026488 	.word	0x40026488

08002340 <P_VGA_InitDMA>:
//--------------------------------------------------------------
// internal Function
// init DMA
//--------------------------------------------------------------
void P_VGA_InitDMA(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b090      	sub	sp, #64	; 0x40
 8002344:	af00      	add	r7, sp, #0
  // (look at page 217 of the Ref Manual)
  // DMA=2, Channel=6, Stream=5
  //---------------------------------------------

  // Clock Enable (DMA)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 8002346:	2101      	movs	r1, #1
 8002348:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800234c:	f7ff f99c 	bl	8001688 <RCC_AHB1PeriphClockCmd>

  // DMA init (DMA2, Channel6, Stream5)
  DMA_Cmd(DMA2_Stream5, DISABLE);
 8002350:	2100      	movs	r1, #0
 8002352:	481b      	ldr	r0, [pc, #108]	; (80023c0 <P_VGA_InitDMA+0x80>)
 8002354:	f7fe ff3c 	bl	80011d0 <DMA_Cmd>
  DMA_DeInit(DMA2_Stream5);
 8002358:	4819      	ldr	r0, [pc, #100]	; (80023c0 <P_VGA_InitDMA+0x80>)
 800235a:	f7fe fe0d 	bl	8000f78 <DMA_DeInit>
  DMA_InitStructure.DMA_Channel = DMA_Channel_6;
 800235e:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8002362:	607b      	str	r3, [r7, #4]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)VGA_GPIOE_ODR_ADDRESS;
 8002364:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <P_VGA_InitDMA+0x84>)
 8002366:	60bb      	str	r3, [r7, #8]
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&VGA_RAM1;
 8002368:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <P_VGA_InitDMA+0x88>)
 800236a:	60fb      	str	r3, [r7, #12]
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 800236c:	2340      	movs	r3, #64	; 0x40
 800236e:	613b      	str	r3, [r7, #16]
  DMA_InitStructure.DMA_BufferSize = VGA_DISPLAY_X+1;
 8002370:	f240 1341 	movw	r3, #321	; 0x141
 8002374:	617b      	str	r3, [r7, #20]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8002376:	2300      	movs	r3, #0
 8002378:	61bb      	str	r3, [r7, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800237a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800237e:	61fb      	str	r3, [r7, #28]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8002380:	2300      	movs	r3, #0
 8002382:	623b      	str	r3, [r7, #32]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8002384:	2300      	movs	r3, #0
 8002386:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8002388:	2300      	movs	r3, #0
 800238a:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 800238c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002390:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8002392:	2300      	movs	r3, #0
 8002394:	633b      	str	r3, [r7, #48]	; 0x30
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 8002396:	2301      	movs	r3, #1
 8002398:	637b      	str	r3, [r7, #52]	; 0x34
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800239a:	2300      	movs	r3, #0
 800239c:	63bb      	str	r3, [r7, #56]	; 0x38
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800239e:	2300      	movs	r3, #0
 80023a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  DMA_Init(DMA2_Stream5, &DMA_InitStructure);
 80023a2:	1d3b      	adds	r3, r7, #4
 80023a4:	4619      	mov	r1, r3
 80023a6:	4806      	ldr	r0, [pc, #24]	; (80023c0 <P_VGA_InitDMA+0x80>)
 80023a8:	f7fe feba 	bl	8001120 <DMA_Init>

  // DMA-Timer1 enable
  TIM_DMACmd(TIM1,TIM_DMA_Update,ENABLE);
 80023ac:	2201      	movs	r2, #1
 80023ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023b2:	4806      	ldr	r0, [pc, #24]	; (80023cc <P_VGA_InitDMA+0x8c>)
 80023b4:	f7ff fbd1 	bl	8001b5a <TIM_DMACmd>
}
 80023b8:	bf00      	nop
 80023ba:	3740      	adds	r7, #64	; 0x40
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40026488 	.word	0x40026488
 80023c4:	40021015 	.word	0x40021015
 80023c8:	200006f8 	.word	0x200006f8
 80023cc:	40010000 	.word	0x40010000

080023d0 <TIM2_IRQHandler>:
//
//   CC3-Interrupt    -> starts from DMA
// Watch it.. higher troughput when interrupt flag is left alone
//--------------------------------------------------------------
void TIM2_IRQHandler(void)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	af00      	add	r7, sp, #0

  // Interrupt of Timer2 CH3 occurred (for Trigger start)
  TIM_ClearITPendingBit(TIM2, TIM_IT_CC3);
 80023d4:	2108      	movs	r1, #8
 80023d6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80023da:	f7ff fbad 	bl	8001b38 <TIM_ClearITPendingBit>

  VGA.hsync_cnt++;
 80023de:	4b26      	ldr	r3, [pc, #152]	; (8002478 <TIM2_IRQHandler+0xa8>)
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	3301      	adds	r3, #1
 80023e4:	b29a      	uxth	r2, r3
 80023e6:	4b24      	ldr	r3, [pc, #144]	; (8002478 <TIM2_IRQHandler+0xa8>)
 80023e8:	801a      	strh	r2, [r3, #0]
  if(VGA.hsync_cnt>=VGA_VSYNC_PERIODE) {
 80023ea:	4b23      	ldr	r3, [pc, #140]	; (8002478 <TIM2_IRQHandler+0xa8>)
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 80023f2:	d905      	bls.n	8002400 <TIM2_IRQHandler+0x30>
    // -----------
    VGA.hsync_cnt=0;
 80023f4:	4b20      	ldr	r3, [pc, #128]	; (8002478 <TIM2_IRQHandler+0xa8>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr=(uint32_t)(&VGA_RAM1[0]);
 80023fa:	4a20      	ldr	r2, [pc, #128]	; (800247c <TIM2_IRQHandler+0xac>)
 80023fc:	4b1e      	ldr	r3, [pc, #120]	; (8002478 <TIM2_IRQHandler+0xa8>)
 80023fe:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  if(VGA.hsync_cnt<VGA_VSYNC_IMP) {
 8002400:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <TIM2_IRQHandler+0xa8>)
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d804      	bhi.n	8002412 <TIM2_IRQHandler+0x42>
    // HSync low
    GPIOB->BSRRH = GPIO_Pin_12;
 8002408:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <TIM2_IRQHandler+0xb0>)
 800240a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800240e:	835a      	strh	r2, [r3, #26]
 8002410:	e003      	b.n	800241a <TIM2_IRQHandler+0x4a>
  }
  else {
    // HSync High
    GPIOB->BSRRL = GPIO_Pin_12;
 8002412:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <TIM2_IRQHandler+0xb0>)
 8002414:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002418:	831a      	strh	r2, [r3, #24]
  }

  // Test for DMA start
  if((VGA.hsync_cnt>=VGA_VSYNC_BILD_START) && (VGA.hsync_cnt<=VGA_VSYNC_BILD_STOP)) {
 800241a:	4b17      	ldr	r3, [pc, #92]	; (8002478 <TIM2_IRQHandler+0xa8>)
 800241c:	881b      	ldrh	r3, [r3, #0]
 800241e:	2b23      	cmp	r3, #35	; 0x23
 8002420:	d927      	bls.n	8002472 <TIM2_IRQHandler+0xa2>
 8002422:	4b15      	ldr	r3, [pc, #84]	; (8002478 <TIM2_IRQHandler+0xa8>)
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	f240 2202 	movw	r2, #514	; 0x202
 800242a:	4293      	cmp	r3, r2
 800242c:	d821      	bhi.n	8002472 <TIM2_IRQHandler+0xa2>
    // after FP start => DMA Transfer

    // DMA2 init
	DMA2_Stream5->CR=VGA.dma2_cr_reg;
 800242e:	4a15      	ldr	r2, [pc, #84]	; (8002484 <TIM2_IRQHandler+0xb4>)
 8002430:	4b11      	ldr	r3, [pc, #68]	; (8002478 <TIM2_IRQHandler+0xa8>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR=VGA.start_adr;
 8002436:	4a13      	ldr	r2, [pc, #76]	; (8002484 <TIM2_IRQHandler+0xb4>)
 8002438:	4b0f      	ldr	r3, [pc, #60]	; (8002478 <TIM2_IRQHandler+0xa8>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1|=TIM_CR1_CEN;
 800243e:	4a12      	ldr	r2, [pc, #72]	; (8002488 <TIM2_IRQHandler+0xb8>)
 8002440:	4b11      	ldr	r3, [pc, #68]	; (8002488 <TIM2_IRQHandler+0xb8>)
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	b29b      	uxth	r3, r3
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	b29b      	uxth	r3, r3
 800244c:	8013      	strh	r3, [r2, #0]
    // DMA2 enable
    DMA2_Stream5->CR|=DMA_SxCR_EN;
 800244e:	4a0d      	ldr	r2, [pc, #52]	; (8002484 <TIM2_IRQHandler+0xb4>)
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <TIM2_IRQHandler+0xb4>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6013      	str	r3, [r2, #0]

    // Test Adrespointer for high
    if((VGA.hsync_cnt & 0x01)!=0) {
 800245a:	4b07      	ldr	r3, [pc, #28]	; (8002478 <TIM2_IRQHandler+0xa8>)
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d005      	beq.n	8002472 <TIM2_IRQHandler+0xa2>
      // inc after Hsync
      VGA.start_adr+=(VGA_DISPLAY_X+1);
 8002466:	4b04      	ldr	r3, [pc, #16]	; (8002478 <TIM2_IRQHandler+0xa8>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f203 1341 	addw	r3, r3, #321	; 0x141
 800246e:	4a02      	ldr	r2, [pc, #8]	; (8002478 <TIM2_IRQHandler+0xa8>)
 8002470:	6053      	str	r3, [r2, #4]
    }
  }
}
 8002472:	bf00      	nop
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	200006ec 	.word	0x200006ec
 800247c:	200006f8 	.word	0x200006f8
 8002480:	40020400 	.word	0x40020400
 8002484:	40026488 	.word	0x40026488
 8002488:	40010000 	.word	0x40010000

0800248c <DMA2_Stream5_IRQHandler>:
//   after TransferCompleteInterrupt -> stop DMA
//
// still a bit buggy
//--------------------------------------------------------------
void DMA2_Stream5_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  if(DMA_GetITStatus(DMA2_Stream5, DMA_IT_TCIF5))
 8002490:	490d      	ldr	r1, [pc, #52]	; (80024c8 <DMA2_Stream5_IRQHandler+0x3c>)
 8002492:	480e      	ldr	r0, [pc, #56]	; (80024cc <DMA2_Stream5_IRQHandler+0x40>)
 8002494:	f7fe fef2 	bl	800127c <DMA_GetITStatus>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d012      	beq.n	80024c4 <DMA2_Stream5_IRQHandler+0x38>
  {
    // TransferInterruptComplete Interrupt from DMA2
    DMA_ClearITPendingBit(DMA2_Stream5, DMA_IT_TCIF5);
 800249e:	490a      	ldr	r1, [pc, #40]	; (80024c8 <DMA2_Stream5_IRQHandler+0x3c>)
 80024a0:	480a      	ldr	r0, [pc, #40]	; (80024cc <DMA2_Stream5_IRQHandler+0x40>)
 80024a2:	f7fe ff43 	bl	800132c <DMA_ClearITPendingBit>
    // stop after all pixels => DMA Transfer stop

    // Timer1 stop
    TIM1->CR1&=~TIM_CR1_CEN;
 80024a6:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <DMA2_Stream5_IRQHandler+0x44>)
 80024a8:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <DMA2_Stream5_IRQHandler+0x44>)
 80024aa:	881b      	ldrh	r3, [r3, #0]
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	f023 0301 	bic.w	r3, r3, #1
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	8013      	strh	r3, [r2, #0]
    // DMA2 disable
    DMA2_Stream5->CR=0;
 80024b6:	4b05      	ldr	r3, [pc, #20]	; (80024cc <DMA2_Stream5_IRQHandler+0x40>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
    // switch on black
    GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 80024bc:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <DMA2_Stream5_IRQHandler+0x48>)
 80024be:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80024c2:	835a      	strh	r2, [r3, #26]
  }
}
 80024c4:	bf00      	nop
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	20008800 	.word	0x20008800
 80024cc:	40026488 	.word	0x40026488
 80024d0:	40010000 	.word	0x40010000
 80024d4:	40021000 	.word	0x40021000

080024d8 <UART_init>:

char string[100];
int charcounter = 0;

void UART_init(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0

  /* --------------------------- System Clocks Configuration -----------------*/
  /* USART2 clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 80024de:	2101      	movs	r1, #1
 80024e0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80024e4:	f7ff f8f0 	bl	80016c8 <RCC_APB1PeriphClockCmd>

  /* GPIOA clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 80024e8:	2101      	movs	r1, #1
 80024ea:	2001      	movs	r0, #1
 80024ec:	f7ff f8cc 	bl	8001688 <RCC_AHB1PeriphClockCmd>

  GPIO_InitTypeDef GPIO_InitStructure;

  /*-------------------------- GPIO Configuration ----------------------------*/
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 80024f0:	230c      	movs	r3, #12
 80024f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80024f4:	2302      	movs	r3, #2
 80024f6:	753b      	strb	r3, [r7, #20]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80024f8:	2300      	movs	r3, #0
 80024fa:	75bb      	strb	r3, [r7, #22]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80024fc:	2301      	movs	r3, #1
 80024fe:	75fb      	strb	r3, [r7, #23]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002500:	2302      	movs	r3, #2
 8002502:	757b      	strb	r3, [r7, #21]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002504:	f107 0310 	add.w	r3, r7, #16
 8002508:	4619      	mov	r1, r3
 800250a:	4816      	ldr	r0, [pc, #88]	; (8002564 <UART_init+0x8c>)
 800250c:	f7fe ff3c 	bl	8001388 <GPIO_Init>

  /* Connect USART pins to AF */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);   // USART2_TX
 8002510:	2207      	movs	r2, #7
 8002512:	2102      	movs	r1, #2
 8002514:	4813      	ldr	r0, [pc, #76]	; (8002564 <UART_init+0x8c>)
 8002516:	f7fe ffc5 	bl	80014a4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);  // USART2_RX
 800251a:	2207      	movs	r2, #7
 800251c:	2103      	movs	r1, #3
 800251e:	4811      	ldr	r0, [pc, #68]	; (8002564 <UART_init+0x8c>)
 8002520:	f7fe ffc0 	bl	80014a4 <GPIO_PinAFConfig>
      - One Stop Bit
      - No parity
      - Hardware flow control disabled (RTS and CTS signals)
      - Receive and transmit enabled
*/
USART_InitStructure.USART_BaudRate = 115200;
 8002524:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002528:	603b      	str	r3, [r7, #0]
USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 800252a:	2300      	movs	r3, #0
 800252c:	80bb      	strh	r3, [r7, #4]
USART_InitStructure.USART_StopBits = USART_StopBits_1;
 800252e:	2300      	movs	r3, #0
 8002530:	80fb      	strh	r3, [r7, #6]
USART_InitStructure.USART_Parity = USART_Parity_No;
 8002532:	2300      	movs	r3, #0
 8002534:	813b      	strh	r3, [r7, #8]
USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8002536:	2300      	movs	r3, #0
 8002538:	81bb      	strh	r3, [r7, #12]

USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800253a:	230c      	movs	r3, #12
 800253c:	817b      	strh	r3, [r7, #10]

USART_Init(USART2, &USART_InitStructure);
 800253e:	463b      	mov	r3, r7
 8002540:	4619      	mov	r1, r3
 8002542:	4809      	ldr	r0, [pc, #36]	; (8002568 <UART_init+0x90>)
 8002544:	f7ff fb2e 	bl	8001ba4 <USART_Init>
USART_ITConfig(USART2,USART_IT_RXNE,ENABLE);
 8002548:	2201      	movs	r2, #1
 800254a:	f240 5125 	movw	r1, #1317	; 0x525
 800254e:	4806      	ldr	r0, [pc, #24]	; (8002568 <UART_init+0x90>)
 8002550:	f7ff fc14 	bl	8001d7c <USART_ITConfig>

USART_Cmd(USART2, ENABLE);
 8002554:	2101      	movs	r1, #1
 8002556:	4804      	ldr	r0, [pc, #16]	; (8002568 <UART_init+0x90>)
 8002558:	f7ff fbde 	bl	8001d18 <USART_Cmd>

}
 800255c:	bf00      	nop
 800255e:	3718      	adds	r7, #24
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40020000 	.word	0x40020000
 8002568:	40004400 	.word	0x40004400

0800256c <UART_putchar>:

void UART_putchar(char c)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	71fb      	strb	r3, [r7, #7]
		while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET); // Wait for Empty
 8002576:	bf00      	nop
 8002578:	2180      	movs	r1, #128	; 0x80
 800257a:	4808      	ldr	r0, [pc, #32]	; (800259c <UART_putchar+0x30>)
 800257c:	f7ff fc46 	bl	8001e0c <USART_GetFlagStatus>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f8      	beq.n	8002578 <UART_putchar+0xc>
		USART_SendData(USART2, c);
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	b29b      	uxth	r3, r3
 800258a:	4619      	mov	r1, r3
 800258c:	4803      	ldr	r0, [pc, #12]	; (800259c <UART_putchar+0x30>)
 800258e:	f7ff fbe3 	bl	8001d58 <USART_SendData>

}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40004400 	.word	0x40004400

080025a0 <UART_puts>:

void UART_puts(char *s)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	volatile unsigned int i;
	for (i=0; s[i]; i++)
 80025a8:	2300      	movs	r3, #0
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	e009      	b.n	80025c2 <UART_puts+0x22>
	{
		UART_putchar(s[i]);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	4413      	add	r3, r2
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7ff ffd8 	bl	800256c <UART_putchar>
	for (i=0; s[i]; i++)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	3301      	adds	r3, #1
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	4413      	add	r3, r2
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1ef      	bne.n	80025ae <UART_puts+0xe>
		//while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET); // Wait for Empty
		//USART_SendData(USART2, s[i]);
	}
}
 80025ce:	bf00      	nop
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <USART2_IRQHandler>:
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
}

void USART2_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
	// check if the USART2 receive interrupt flag was set
	if( USART_GetITStatus(USART2, USART_IT_RXNE))
 80025de:	f240 5125 	movw	r1, #1317	; 0x525
 80025e2:	4827      	ldr	r0, [pc, #156]	; (8002680 <USART2_IRQHandler+0xa8>)
 80025e4:	f7ff fc2e 	bl	8001e44 <USART_GetITStatus>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d044      	beq.n	8002678 <USART2_IRQHandler+0xa0>
	{
		USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 80025ee:	f240 5125 	movw	r1, #1317	; 0x525
 80025f2:	4823      	ldr	r0, [pc, #140]	; (8002680 <USART2_IRQHandler+0xa8>)
 80025f4:	f7ff fc81 	bl	8001efa <USART_ClearITPendingBit>
		int i;
		char c = USART2->DR & 0xFF;
 80025f8:	4b21      	ldr	r3, [pc, #132]	; (8002680 <USART2_IRQHandler+0xa8>)
 80025fa:	889b      	ldrh	r3, [r3, #4]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	70fb      	strb	r3, [r7, #3]
//		LCD_XY(10,1);
//		LCD_put("UART:   ");
//		LCD_XY(15,1);
//		LCD_putchar(c);

		if(c > 64 && c < 91)
 8002600:	78fb      	ldrb	r3, [r7, #3]
 8002602:	2b40      	cmp	r3, #64	; 0x40
 8002604:	d905      	bls.n	8002612 <USART2_IRQHandler+0x3a>
 8002606:	78fb      	ldrb	r3, [r7, #3]
 8002608:	2b5a      	cmp	r3, #90	; 0x5a
 800260a:	d802      	bhi.n	8002612 <USART2_IRQHandler+0x3a>
			c += 32;
 800260c:	78fb      	ldrb	r3, [r7, #3]
 800260e:	3320      	adds	r3, #32
 8002610:	70fb      	strb	r3, [r7, #3]
		if(c <= 13)
 8002612:	78fb      	ldrb	r3, [r7, #3]
 8002614:	2b0d      	cmp	r3, #13
 8002616:	d81d      	bhi.n	8002654 <USART2_IRQHandler+0x7c>
		{
			for(i=0;i<charcounter;i++)
 8002618:	2300      	movs	r3, #0
 800261a:	607b      	str	r3, [r7, #4]
 800261c:	e00b      	b.n	8002636 <USART2_IRQHandler+0x5e>
			{
				USART_SendData(USART2, string[i]); // Echo Char
 800261e:	4a19      	ldr	r2, [pc, #100]	; (8002684 <USART2_IRQHandler+0xac>)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4413      	add	r3, r2
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	b29b      	uxth	r3, r3
 8002628:	4619      	mov	r1, r3
 800262a:	4815      	ldr	r0, [pc, #84]	; (8002680 <USART2_IRQHandler+0xa8>)
 800262c:	f7ff fb94 	bl	8001d58 <USART_SendData>
			for(i=0;i<charcounter;i++)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	3301      	adds	r3, #1
 8002634:	607b      	str	r3, [r7, #4]
 8002636:	4b14      	ldr	r3, [pc, #80]	; (8002688 <USART2_IRQHandler+0xb0>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	429a      	cmp	r2, r3
 800263e:	dbee      	blt.n	800261e <USART2_IRQHandler+0x46>
			}
			charcounter = 0;
 8002640:	4b11      	ldr	r3, [pc, #68]	; (8002688 <USART2_IRQHandler+0xb0>)
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
			USART_SendData(USART2, c); // Echo Char
 8002646:	78fb      	ldrb	r3, [r7, #3]
 8002648:	b29b      	uxth	r3, r3
 800264a:	4619      	mov	r1, r3
 800264c:	480c      	ldr	r0, [pc, #48]	; (8002680 <USART2_IRQHandler+0xa8>)
 800264e:	f7ff fb83 	bl	8001d58 <USART_SendData>
 8002652:	e009      	b.n	8002668 <USART2_IRQHandler+0x90>
		}
		else
		{
			string[charcounter] = c;
 8002654:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <USART2_IRQHandler+0xb0>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	490a      	ldr	r1, [pc, #40]	; (8002684 <USART2_IRQHandler+0xac>)
 800265a:	78fa      	ldrb	r2, [r7, #3]
 800265c:	54ca      	strb	r2, [r1, r3]
			charcounter++;
 800265e:	4b0a      	ldr	r3, [pc, #40]	; (8002688 <USART2_IRQHandler+0xb0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	3301      	adds	r3, #1
 8002664:	4a08      	ldr	r2, [pc, #32]	; (8002688 <USART2_IRQHandler+0xb0>)
 8002666:	6013      	str	r3, [r2, #0]
		}


		while (USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET); // Wait for Empty
 8002668:	bf00      	nop
 800266a:	2140      	movs	r1, #64	; 0x40
 800266c:	4804      	ldr	r0, [pc, #16]	; (8002680 <USART2_IRQHandler+0xa8>)
 800266e:	f7ff fbcd 	bl	8001e0c <USART_GetFlagStatus>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f8      	beq.n	800266a <USART2_IRQHandler+0x92>

	}
}
 8002678:	bf00      	nop
 800267a:	3708      	adds	r7, #8
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40004400 	.word	0x40004400
 8002684:	20013478 	.word	0x20013478
 8002688:	2000069c 	.word	0x2000069c

0800268c <UART_get>:

// Ontvang een karakter via de UART
// niet echt nodig als routine maar als wrapper voor compatabiliteit. Let op geen -1 als er geen char is ontvangen!

char UART_get(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
    char uart_char = -1;
 8002692:	23ff      	movs	r3, #255	; 0xff
 8002694:	71fb      	strb	r3, [r7, #7]
    if (USART_GetFlagStatus(USART2, USART_FLAG_RXNE)== SET)  // check for data available
 8002696:	2120      	movs	r1, #32
 8002698:	4807      	ldr	r0, [pc, #28]	; (80026b8 <UART_get+0x2c>)
 800269a:	f7ff fbb7 	bl	8001e0c <USART_GetFlagStatus>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d103      	bne.n	80026ac <UART_get+0x20>
    	 uart_char= USART2->DR & 0xFF; // and read the data from peripheral
 80026a4:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <UART_get+0x2c>)
 80026a6:	889b      	ldrh	r3, [r3, #4]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	71fb      	strb	r3, [r7, #7]
    return uart_char;
 80026ac:	79fb      	ldrb	r3, [r7, #7]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40004400 	.word	0x40004400

080026bc <UART_gets>:
// args: char *readbuffer
//       int   echo, when TRUE, send read-char to UART
// remark: ARM sends -1 if buffer is empty
//         LF is cleared if set in terminal-program
void UART_gets(char *s, int echo)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
	while (TRUE)
	{
	 	*s = UART_get();
 80026c6:	f7ff ffe1 	bl	800268c <UART_get>
 80026ca:	4603      	mov	r3, r0
 80026cc:	461a      	mov	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	701a      	strb	r2, [r3, #0]

	 	if (*s==-1)             // check for data available
	 		continue;

	 	if (*s==0xff || *s==LF) // if no data or LF, continue
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	2bff      	cmp	r3, #255	; 0xff
 80026d8:	d00f      	beq.n	80026fa <UART_gets+0x3e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b0a      	cmp	r3, #10
 80026e0:	d00b      	beq.n	80026fa <UART_gets+0x3e>

//		if (echo)              // if output-flag set
//			UART_putchar(*s);  // to read what u entered


		if (*s==CR)            // if enter pressed
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b0d      	cmp	r3, #13
 80026e8:	d103      	bne.n	80026f2 <UART_gets+0x36>
		{
			*s = '\0';         // ignore char and close string
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
		    return;            // buf ready, exit loop
 80026f0:	e005      	b.n	80026fe <UART_gets+0x42>
		}
		s++;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3301      	adds	r3, #1
 80026f6:	607b      	str	r3, [r7, #4]
 80026f8:	e7e5      	b.n	80026c6 <UART_gets+0xa>
			continue;
 80026fa:	bf00      	nop
	 	*s = UART_get();
 80026fc:	e7e3      	b.n	80026c6 <UART_gets+0xa>
	}
}
 80026fe:	3708      	adds	r7, #8
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <main>:
#include "main.h"
#include "includes.h"


int main(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af04      	add	r7, sp, #16
	//  uint32_t n;

	SystemInit(); // System speed to 168MHz
 800270a:	f000 f883 	bl	8002814 <SystemInit>
	UART_init();
 800270e:	f7ff fee3 	bl	80024d8 <UART_init>
	DELAY_init();
 8002712:	f7ff fc11 	bl	8001f38 <DELAY_init>
	UB_VGA_Screen_Init(); // Init VGA-Screen
 8002716:	f7ff fca3 	bl	8002060 <UB_VGA_Screen_Init>

	UB_VGA_FillScreen(zwart);
 800271a:	2000      	movs	r0, #0
 800271c:	f7ff fce0 	bl	80020e0 <UB_VGA_FillScreen>
	draw_triangle (50,50,100,50,75,25,groen);
 8002720:	231c      	movs	r3, #28
 8002722:	9302      	str	r3, [sp, #8]
 8002724:	2319      	movs	r3, #25
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	234b      	movs	r3, #75	; 0x4b
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	2332      	movs	r3, #50	; 0x32
 800272e:	2264      	movs	r2, #100	; 0x64
 8002730:	2132      	movs	r1, #50	; 0x32
 8002732:	2032      	movs	r0, #50	; 0x32
 8002734:	f7fe fb91 	bl	8000e5a <draw_triangle>
	draw_line(1,1,100,100,3,blauw);
 8002738:	2303      	movs	r3, #3
 800273a:	9301      	str	r3, [sp, #4]
 800273c:	2303      	movs	r3, #3
 800273e:	9300      	str	r3, [sp, #0]
 8002740:	2364      	movs	r3, #100	; 0x64
 8002742:	2264      	movs	r2, #100	; 0x64
 8002744:	2101      	movs	r1, #1
 8002746:	2001      	movs	r0, #1
 8002748:	f7fe f985 	bl	8000a56 <draw_line>
	draw_rectangle(10,10,100,100,geel);
 800274c:	23fc      	movs	r3, #252	; 0xfc
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	2364      	movs	r3, #100	; 0x64
 8002752:	2264      	movs	r2, #100	; 0x64
 8002754:	210a      	movs	r1, #10
 8002756:	200a      	movs	r0, #10
 8002758:	f7fe fb57 	bl	8000e0a <draw_rectangle>
	*/


	while(1)
	{
		get_data();
 800275c:	f000 f90c 	bl	8002978 <get_data>
 8002760:	e7fc      	b.n	800275c <main+0x58>
	...

08002764 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002764:	f8df d034 	ldr.w	sp, [pc, #52]	; 800279c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002768:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800276a:	e003      	b.n	8002774 <LoopCopyDataInit>

0800276c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800276c:	4b0c      	ldr	r3, [pc, #48]	; (80027a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800276e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002770:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002772:	3104      	adds	r1, #4

08002774 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002774:	480b      	ldr	r0, [pc, #44]	; (80027a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002776:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002778:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800277a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800277c:	d3f6      	bcc.n	800276c <CopyDataInit>
  ldr  r2, =_sbss
 800277e:	4a0b      	ldr	r2, [pc, #44]	; (80027ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002780:	e002      	b.n	8002788 <LoopFillZerobss>

08002782 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002782:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002784:	f842 3b04 	str.w	r3, [r2], #4

08002788 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002788:	4b09      	ldr	r3, [pc, #36]	; (80027b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800278a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800278c:	d3f9      	bcc.n	8002782 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800278e:	f000 f841 	bl	8002814 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002792:	f000 fb8b 	bl	8002eac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002796:	f7ff ffb5 	bl	8002704 <main>
  bx  lr    
 800279a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800279c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80027a0:	080039d8 	.word	0x080039d8
  ldr  r0, =_sdata
 80027a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80027a8:	20000680 	.word	0x20000680
  ldr  r2, =_sbss
 80027ac:	20000680 	.word	0x20000680
  ldr  r3, = _ebss
 80027b0:	200135cc 	.word	0x200135cc

080027b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027b4:	e7fe      	b.n	80027b4 <ADC_IRQHandler>

080027b6 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80027b6:	b480      	push	{r7}
 80027b8:	af00      	add	r7, sp, #0
}
 80027ba:	bf00      	nop
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80027c8:	e7fe      	b.n	80027c8 <HardFault_Handler+0x4>

080027ca <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80027ca:	b480      	push	{r7}
 80027cc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80027ce:	e7fe      	b.n	80027ce <MemManage_Handler+0x4>

080027d0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80027d4:	e7fe      	b.n	80027d4 <BusFault_Handler+0x4>

080027d6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80027da:	e7fe      	b.n	80027da <UsageFault_Handler+0x4>

080027dc <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
}
 80027e0:	bf00      	nop
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80027ea:	b480      	push	{r7}
 80027ec:	af00      	add	r7, sp, #0
}
 80027ee:	bf00      	nop
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
}
 80027fc:	bf00      	nop
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr

08002806 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8002806:	b480      	push	{r7}
 8002808:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800280a:	bf00      	nop
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002818:	4a16      	ldr	r2, [pc, #88]	; (8002874 <SystemInit+0x60>)
 800281a:	4b16      	ldr	r3, [pc, #88]	; (8002874 <SystemInit+0x60>)
 800281c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002820:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002824:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002828:	4a13      	ldr	r2, [pc, #76]	; (8002878 <SystemInit+0x64>)
 800282a:	4b13      	ldr	r3, [pc, #76]	; (8002878 <SystemInit+0x64>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f043 0301 	orr.w	r3, r3, #1
 8002832:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002834:	4b10      	ldr	r3, [pc, #64]	; (8002878 <SystemInit+0x64>)
 8002836:	2200      	movs	r2, #0
 8002838:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800283a:	4a0f      	ldr	r2, [pc, #60]	; (8002878 <SystemInit+0x64>)
 800283c:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <SystemInit+0x64>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002844:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002848:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800284a:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <SystemInit+0x64>)
 800284c:	4a0b      	ldr	r2, [pc, #44]	; (800287c <SystemInit+0x68>)
 800284e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002850:	4a09      	ldr	r2, [pc, #36]	; (8002878 <SystemInit+0x64>)
 8002852:	4b09      	ldr	r3, [pc, #36]	; (8002878 <SystemInit+0x64>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800285a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <SystemInit+0x64>)
 800285e:	2200      	movs	r2, #0
 8002860:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002862:	f000 f80d 	bl	8002880 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002866:	4b03      	ldr	r3, [pc, #12]	; (8002874 <SystemInit+0x60>)
 8002868:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800286c:	609a      	str	r2, [r3, #8]
#endif
}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	e000ed00 	.word	0xe000ed00
 8002878:	40023800 	.word	0x40023800
 800287c:	24003010 	.word	0x24003010

08002880 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002886:	2300      	movs	r3, #0
 8002888:	607b      	str	r3, [r7, #4]
 800288a:	2300      	movs	r3, #0
 800288c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800288e:	4a36      	ldr	r2, [pc, #216]	; (8002968 <SetSysClock+0xe8>)
 8002890:	4b35      	ldr	r3, [pc, #212]	; (8002968 <SetSysClock+0xe8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002898:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800289a:	4b33      	ldr	r3, [pc, #204]	; (8002968 <SetSysClock+0xe8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a2:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3301      	adds	r3, #1
 80028a8:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d103      	bne.n	80028b8 <SetSysClock+0x38>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80028b6:	d1f0      	bne.n	800289a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80028b8:	4b2b      	ldr	r3, [pc, #172]	; (8002968 <SetSysClock+0xe8>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d002      	beq.n	80028ca <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80028c4:	2301      	movs	r3, #1
 80028c6:	603b      	str	r3, [r7, #0]
 80028c8:	e001      	b.n	80028ce <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80028ca:	2300      	movs	r3, #0
 80028cc:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d142      	bne.n	800295a <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80028d4:	4a24      	ldr	r2, [pc, #144]	; (8002968 <SetSysClock+0xe8>)
 80028d6:	4b24      	ldr	r3, [pc, #144]	; (8002968 <SetSysClock+0xe8>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028de:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80028e0:	4a22      	ldr	r2, [pc, #136]	; (800296c <SetSysClock+0xec>)
 80028e2:	4b22      	ldr	r3, [pc, #136]	; (800296c <SetSysClock+0xec>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028ea:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80028ec:	4a1e      	ldr	r2, [pc, #120]	; (8002968 <SetSysClock+0xe8>)
 80028ee:	4b1e      	ldr	r3, [pc, #120]	; (8002968 <SetSysClock+0xe8>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80028f4:	4a1c      	ldr	r2, [pc, #112]	; (8002968 <SetSysClock+0xe8>)
 80028f6:	4b1c      	ldr	r3, [pc, #112]	; (8002968 <SetSysClock+0xe8>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028fe:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002900:	4a19      	ldr	r2, [pc, #100]	; (8002968 <SetSysClock+0xe8>)
 8002902:	4b19      	ldr	r3, [pc, #100]	; (8002968 <SetSysClock+0xe8>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800290a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800290c:	4b16      	ldr	r3, [pc, #88]	; (8002968 <SetSysClock+0xe8>)
 800290e:	4a18      	ldr	r2, [pc, #96]	; (8002970 <SetSysClock+0xf0>)
 8002910:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002912:	4a15      	ldr	r2, [pc, #84]	; (8002968 <SetSysClock+0xe8>)
 8002914:	4b14      	ldr	r3, [pc, #80]	; (8002968 <SetSysClock+0xe8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800291c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800291e:	bf00      	nop
 8002920:	4b11      	ldr	r3, [pc, #68]	; (8002968 <SetSysClock+0xe8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d0f9      	beq.n	8002920 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800292c:	4b11      	ldr	r3, [pc, #68]	; (8002974 <SetSysClock+0xf4>)
 800292e:	f240 7205 	movw	r2, #1797	; 0x705
 8002932:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002934:	4a0c      	ldr	r2, [pc, #48]	; (8002968 <SetSysClock+0xe8>)
 8002936:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <SetSysClock+0xe8>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f023 0303 	bic.w	r3, r3, #3
 800293e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002940:	4a09      	ldr	r2, [pc, #36]	; (8002968 <SetSysClock+0xe8>)
 8002942:	4b09      	ldr	r3, [pc, #36]	; (8002968 <SetSysClock+0xe8>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f043 0302 	orr.w	r3, r3, #2
 800294a:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 800294c:	bf00      	nop
 800294e:	4b06      	ldr	r3, [pc, #24]	; (8002968 <SetSysClock+0xe8>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	2b08      	cmp	r3, #8
 8002958:	d1f9      	bne.n	800294e <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40023800 	.word	0x40023800
 800296c:	40007000 	.word	0x40007000
 8002970:	07405419 	.word	0x07405419
 8002974:	40023c00 	.word	0x40023c00

08002978 <get_data>:
struct arguments ellips_args;
struct arguments rectangle_args;


void get_data()
{
 8002978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800297c:	b085      	sub	sp, #20
 800297e:	af02      	add	r7, sp, #8
	int fill=0;
 8002980:	2300      	movs	r3, #0
 8002982:	607b      	str	r3, [r7, #4]

	UART_gets(parameters,TRUE);
 8002984:	2101      	movs	r1, #1
 8002986:	48a6      	ldr	r0, [pc, #664]	; (8002c20 <get_data+0x2a8>)
 8002988:	f7ff fe98 	bl	80026bc <UART_gets>
	str_check = strtok (parameters,",");
 800298c:	49a5      	ldr	r1, [pc, #660]	; (8002c24 <get_data+0x2ac>)
 800298e:	48a4      	ldr	r0, [pc, #656]	; (8002c20 <get_data+0x2a8>)
 8002990:	f000 fab8 	bl	8002f04 <strtok>
 8002994:	4602      	mov	r2, r0
 8002996:	4ba4      	ldr	r3, [pc, #656]	; (8002c28 <get_data+0x2b0>)
 8002998:	601a      	str	r2, [r3, #0]

	strcpy(functions,str_check);
 800299a:	4ba3      	ldr	r3, [pc, #652]	; (8002c28 <get_data+0x2b0>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4619      	mov	r1, r3
 80029a0:	48a2      	ldr	r0, [pc, #648]	; (8002c2c <get_data+0x2b4>)
 80029a2:	f000 faa7 	bl	8002ef4 <strcpy>

	if(strcmp(functions, "lijn")==0)
 80029a6:	49a2      	ldr	r1, [pc, #648]	; (8002c30 <get_data+0x2b8>)
 80029a8:	48a0      	ldr	r0, [pc, #640]	; (8002c2c <get_data+0x2b4>)
 80029aa:	f7fd fc0d 	bl	80001c8 <strcmp>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d17b      	bne.n	8002aac <get_data+0x134>
	{
		fill=0;
 80029b4:	2300      	movs	r3, #0
 80029b6:	607b      	str	r3, [r7, #4]
		UART_puts("lijn\r");
 80029b8:	489e      	ldr	r0, [pc, #632]	; (8002c34 <get_data+0x2bc>)
 80029ba:	f7ff fdf1 	bl	80025a0 <UART_puts>
		while(str_check != NULL)
 80029be:	e04e      	b.n	8002a5e <get_data+0xe6>
		{
			switch(fill)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b06      	cmp	r3, #6
 80029c4:	d841      	bhi.n	8002a4a <get_data+0xd2>
 80029c6:	a201      	add	r2, pc, #4	; (adr r2, 80029cc <get_data+0x54>)
 80029c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029cc:	080029e9 	.word	0x080029e9
 80029d0:	080029f7 	.word	0x080029f7
 80029d4:	08002a05 	.word	0x08002a05
 80029d8:	08002a13 	.word	0x08002a13
 80029dc:	08002a21 	.word	0x08002a21
 80029e0:	08002a2f 	.word	0x08002a2f
 80029e4:	08002a3d 	.word	0x08002a3d
			{
				case 0:
					strcpy(functions,str_check);
 80029e8:	4b8f      	ldr	r3, [pc, #572]	; (8002c28 <get_data+0x2b0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4619      	mov	r1, r3
 80029ee:	488f      	ldr	r0, [pc, #572]	; (8002c2c <get_data+0x2b4>)
 80029f0:	f000 fa80 	bl	8002ef4 <strcpy>
					break;
 80029f4:	e029      	b.n	8002a4a <get_data+0xd2>
				case 1:
					strcpy(line_args.x1,str_check);
 80029f6:	4b8c      	ldr	r3, [pc, #560]	; (8002c28 <get_data+0x2b0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4619      	mov	r1, r3
 80029fc:	488e      	ldr	r0, [pc, #568]	; (8002c38 <get_data+0x2c0>)
 80029fe:	f000 fa79 	bl	8002ef4 <strcpy>
					break;
 8002a02:	e022      	b.n	8002a4a <get_data+0xd2>
				case 2:
					strcpy(line_args.y1,str_check);
 8002a04:	4b88      	ldr	r3, [pc, #544]	; (8002c28 <get_data+0x2b0>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4619      	mov	r1, r3
 8002a0a:	488c      	ldr	r0, [pc, #560]	; (8002c3c <get_data+0x2c4>)
 8002a0c:	f000 fa72 	bl	8002ef4 <strcpy>
					break;
 8002a10:	e01b      	b.n	8002a4a <get_data+0xd2>
				case 3:
					strcpy(line_args.x2,str_check);
 8002a12:	4b85      	ldr	r3, [pc, #532]	; (8002c28 <get_data+0x2b0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4619      	mov	r1, r3
 8002a18:	4889      	ldr	r0, [pc, #548]	; (8002c40 <get_data+0x2c8>)
 8002a1a:	f000 fa6b 	bl	8002ef4 <strcpy>
					break;
 8002a1e:	e014      	b.n	8002a4a <get_data+0xd2>
				case 4:
					strcpy(line_args.y2,str_check);
 8002a20:	4b81      	ldr	r3, [pc, #516]	; (8002c28 <get_data+0x2b0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4619      	mov	r1, r3
 8002a26:	4887      	ldr	r0, [pc, #540]	; (8002c44 <get_data+0x2cc>)
 8002a28:	f000 fa64 	bl	8002ef4 <strcpy>
					break;
 8002a2c:	e00d      	b.n	8002a4a <get_data+0xd2>
				case 5:
					strcpy(line_args.thickness,str_check);
 8002a2e:	4b7e      	ldr	r3, [pc, #504]	; (8002c28 <get_data+0x2b0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4619      	mov	r1, r3
 8002a34:	4884      	ldr	r0, [pc, #528]	; (8002c48 <get_data+0x2d0>)
 8002a36:	f000 fa5d 	bl	8002ef4 <strcpy>
					break;
 8002a3a:	e006      	b.n	8002a4a <get_data+0xd2>
				case 6:
					strcpy(line_args.color,str_check);
 8002a3c:	4b7a      	ldr	r3, [pc, #488]	; (8002c28 <get_data+0x2b0>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4619      	mov	r1, r3
 8002a42:	4882      	ldr	r0, [pc, #520]	; (8002c4c <get_data+0x2d4>)
 8002a44:	f000 fa56 	bl	8002ef4 <strcpy>
					break;
 8002a48:	bf00      	nop
			}
			fill++;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3301      	adds	r3, #1
 8002a4e:	607b      	str	r3, [r7, #4]
			str_check = strtok (NULL, " ,.-");
 8002a50:	497f      	ldr	r1, [pc, #508]	; (8002c50 <get_data+0x2d8>)
 8002a52:	2000      	movs	r0, #0
 8002a54:	f000 fa56 	bl	8002f04 <strtok>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	4b73      	ldr	r3, [pc, #460]	; (8002c28 <get_data+0x2b0>)
 8002a5c:	601a      	str	r2, [r3, #0]
		while(str_check != NULL)
 8002a5e:	4b72      	ldr	r3, [pc, #456]	; (8002c28 <get_data+0x2b0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1ac      	bne.n	80029c0 <get_data+0x48>
		}
		draw_line(atoi(line_args.x1),atoi(line_args.y1),atoi(line_args.x2),atoi(line_args.y2),atoi(line_args.thickness),color(line_args.color));
 8002a66:	4874      	ldr	r0, [pc, #464]	; (8002c38 <get_data+0x2c0>)
 8002a68:	f000 fa1c 	bl	8002ea4 <atoi>
 8002a6c:	4605      	mov	r5, r0
 8002a6e:	4873      	ldr	r0, [pc, #460]	; (8002c3c <get_data+0x2c4>)
 8002a70:	f000 fa18 	bl	8002ea4 <atoi>
 8002a74:	4606      	mov	r6, r0
 8002a76:	4872      	ldr	r0, [pc, #456]	; (8002c40 <get_data+0x2c8>)
 8002a78:	f000 fa14 	bl	8002ea4 <atoi>
 8002a7c:	4680      	mov	r8, r0
 8002a7e:	4871      	ldr	r0, [pc, #452]	; (8002c44 <get_data+0x2cc>)
 8002a80:	f000 fa10 	bl	8002ea4 <atoi>
 8002a84:	4681      	mov	r9, r0
 8002a86:	4870      	ldr	r0, [pc, #448]	; (8002c48 <get_data+0x2d0>)
 8002a88:	f000 fa0c 	bl	8002ea4 <atoi>
 8002a8c:	4604      	mov	r4, r0
 8002a8e:	4b6f      	ldr	r3, [pc, #444]	; (8002c4c <get_data+0x2d4>)
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 f93e 	bl	8002d14 <color>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	9301      	str	r3, [sp, #4]
 8002a9c:	9400      	str	r4, [sp, #0]
 8002a9e:	464b      	mov	r3, r9
 8002aa0:	4642      	mov	r2, r8
 8002aa2:	4631      	mov	r1, r6
 8002aa4:	4628      	mov	r0, r5
 8002aa6:	f7fd ffd6 	bl	8000a56 <draw_line>



//	draw_ellips(atoi(line_args.x_center),atoi(line_args.y_center),atoi(line_args.x_rad),atoi(line_args.y_rad),color(line_args.color));

}
 8002aaa:	e11f      	b.n	8002cec <get_data+0x374>
	else if(strcmp(functions, "ellips")==0)
 8002aac:	4969      	ldr	r1, [pc, #420]	; (8002c54 <get_data+0x2dc>)
 8002aae:	485f      	ldr	r0, [pc, #380]	; (8002c2c <get_data+0x2b4>)
 8002ab0:	f7fd fb8a 	bl	80001c8 <strcmp>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d16e      	bne.n	8002b98 <get_data+0x220>
		fill=0;
 8002aba:	2300      	movs	r3, #0
 8002abc:	607b      	str	r3, [r7, #4]
		UART_puts("ellips\r");
 8002abe:	4866      	ldr	r0, [pc, #408]	; (8002c58 <get_data+0x2e0>)
 8002ac0:	f7ff fd6e 	bl	80025a0 <UART_puts>
		while(str_check != NULL)
 8002ac4:	e046      	b.n	8002b54 <get_data+0x1dc>
			switch(fill)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b05      	cmp	r3, #5
 8002aca:	d839      	bhi.n	8002b40 <get_data+0x1c8>
 8002acc:	a201      	add	r2, pc, #4	; (adr r2, 8002ad4 <get_data+0x15c>)
 8002ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad2:	bf00      	nop
 8002ad4:	08002aed 	.word	0x08002aed
 8002ad8:	08002afb 	.word	0x08002afb
 8002adc:	08002b09 	.word	0x08002b09
 8002ae0:	08002b17 	.word	0x08002b17
 8002ae4:	08002b25 	.word	0x08002b25
 8002ae8:	08002b33 	.word	0x08002b33
					strcpy(functions,str_check);
 8002aec:	4b4e      	ldr	r3, [pc, #312]	; (8002c28 <get_data+0x2b0>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4619      	mov	r1, r3
 8002af2:	484e      	ldr	r0, [pc, #312]	; (8002c2c <get_data+0x2b4>)
 8002af4:	f000 f9fe 	bl	8002ef4 <strcpy>
					break;
 8002af8:	e022      	b.n	8002b40 <get_data+0x1c8>
					strcpy(ellips_args.x_center,str_check);
 8002afa:	4b4b      	ldr	r3, [pc, #300]	; (8002c28 <get_data+0x2b0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4619      	mov	r1, r3
 8002b00:	4856      	ldr	r0, [pc, #344]	; (8002c5c <get_data+0x2e4>)
 8002b02:	f000 f9f7 	bl	8002ef4 <strcpy>
					break;
 8002b06:	e01b      	b.n	8002b40 <get_data+0x1c8>
					strcpy(ellips_args.y_center,str_check);
 8002b08:	4b47      	ldr	r3, [pc, #284]	; (8002c28 <get_data+0x2b0>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4854      	ldr	r0, [pc, #336]	; (8002c60 <get_data+0x2e8>)
 8002b10:	f000 f9f0 	bl	8002ef4 <strcpy>
					break;
 8002b14:	e014      	b.n	8002b40 <get_data+0x1c8>
					strcpy(ellips_args.x_rad,str_check);
 8002b16:	4b44      	ldr	r3, [pc, #272]	; (8002c28 <get_data+0x2b0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4851      	ldr	r0, [pc, #324]	; (8002c64 <get_data+0x2ec>)
 8002b1e:	f000 f9e9 	bl	8002ef4 <strcpy>
					break;
 8002b22:	e00d      	b.n	8002b40 <get_data+0x1c8>
					strcpy(ellips_args.y_rad,str_check);
 8002b24:	4b40      	ldr	r3, [pc, #256]	; (8002c28 <get_data+0x2b0>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4619      	mov	r1, r3
 8002b2a:	484f      	ldr	r0, [pc, #316]	; (8002c68 <get_data+0x2f0>)
 8002b2c:	f000 f9e2 	bl	8002ef4 <strcpy>
					break;
 8002b30:	e006      	b.n	8002b40 <get_data+0x1c8>
					strcpy(ellips_args.color,str_check);
 8002b32:	4b3d      	ldr	r3, [pc, #244]	; (8002c28 <get_data+0x2b0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4619      	mov	r1, r3
 8002b38:	484c      	ldr	r0, [pc, #304]	; (8002c6c <get_data+0x2f4>)
 8002b3a:	f000 f9db 	bl	8002ef4 <strcpy>
					break;
 8002b3e:	bf00      	nop
			fill++;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	3301      	adds	r3, #1
 8002b44:	607b      	str	r3, [r7, #4]
			str_check = strtok (NULL, ",");
 8002b46:	4937      	ldr	r1, [pc, #220]	; (8002c24 <get_data+0x2ac>)
 8002b48:	2000      	movs	r0, #0
 8002b4a:	f000 f9db 	bl	8002f04 <strtok>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	4b35      	ldr	r3, [pc, #212]	; (8002c28 <get_data+0x2b0>)
 8002b52:	601a      	str	r2, [r3, #0]
		while(str_check != NULL)
 8002b54:	4b34      	ldr	r3, [pc, #208]	; (8002c28 <get_data+0x2b0>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1b4      	bne.n	8002ac6 <get_data+0x14e>
		draw_ellips(atoi(ellips_args.x_center),atoi(ellips_args.y_center),atoi(ellips_args.x_rad),atoi(ellips_args.y_rad),color(ellips_args.color));
 8002b5c:	483f      	ldr	r0, [pc, #252]	; (8002c5c <get_data+0x2e4>)
 8002b5e:	f000 f9a1 	bl	8002ea4 <atoi>
 8002b62:	4604      	mov	r4, r0
 8002b64:	483e      	ldr	r0, [pc, #248]	; (8002c60 <get_data+0x2e8>)
 8002b66:	f000 f99d 	bl	8002ea4 <atoi>
 8002b6a:	4605      	mov	r5, r0
 8002b6c:	483d      	ldr	r0, [pc, #244]	; (8002c64 <get_data+0x2ec>)
 8002b6e:	f000 f999 	bl	8002ea4 <atoi>
 8002b72:	4606      	mov	r6, r0
 8002b74:	483c      	ldr	r0, [pc, #240]	; (8002c68 <get_data+0x2f0>)
 8002b76:	f000 f995 	bl	8002ea4 <atoi>
 8002b7a:	4680      	mov	r8, r0
 8002b7c:	4b3b      	ldr	r3, [pc, #236]	; (8002c6c <get_data+0x2f4>)
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 f8c7 	bl	8002d14 <color>
 8002b86:	4603      	mov	r3, r0
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	4643      	mov	r3, r8
 8002b8c:	4632      	mov	r2, r6
 8002b8e:	4629      	mov	r1, r5
 8002b90:	4620      	mov	r0, r4
 8002b92:	f7fd ff0d 	bl	80009b0 <draw_ellips>
}
 8002b96:	e0a9      	b.n	8002cec <get_data+0x374>
	else if(strcmp(functions, "rechthoek")==0)
 8002b98:	4935      	ldr	r1, [pc, #212]	; (8002c70 <get_data+0x2f8>)
 8002b9a:	4824      	ldr	r0, [pc, #144]	; (8002c2c <get_data+0x2b4>)
 8002b9c:	f7fd fb14 	bl	80001c8 <strcmp>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f040 80a2 	bne.w	8002cec <get_data+0x374>
		fill=0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	607b      	str	r3, [r7, #4]
		UART_puts("rechthoek\r");
 8002bac:	4831      	ldr	r0, [pc, #196]	; (8002c74 <get_data+0x2fc>)
 8002bae:	f7ff fcf7 	bl	80025a0 <UART_puts>
		while(str_check != NULL)
 8002bb2:	e07a      	b.n	8002caa <get_data+0x332>
			switch(fill)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2b05      	cmp	r3, #5
 8002bb8:	d86d      	bhi.n	8002c96 <get_data+0x31e>
 8002bba:	a201      	add	r2, pc, #4	; (adr r2, 8002bc0 <get_data+0x248>)
 8002bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc0:	08002bd9 	.word	0x08002bd9
 8002bc4:	08002be7 	.word	0x08002be7
 8002bc8:	08002bf5 	.word	0x08002bf5
 8002bcc:	08002c03 	.word	0x08002c03
 8002bd0:	08002c11 	.word	0x08002c11
 8002bd4:	08002c89 	.word	0x08002c89
					strcpy(functions,str_check);
 8002bd8:	4b13      	ldr	r3, [pc, #76]	; (8002c28 <get_data+0x2b0>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4619      	mov	r1, r3
 8002bde:	4813      	ldr	r0, [pc, #76]	; (8002c2c <get_data+0x2b4>)
 8002be0:	f000 f988 	bl	8002ef4 <strcpy>
					break;
 8002be4:	e057      	b.n	8002c96 <get_data+0x31e>
					strcpy(rectangle_args.x1,str_check);
 8002be6:	4b10      	ldr	r3, [pc, #64]	; (8002c28 <get_data+0x2b0>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4619      	mov	r1, r3
 8002bec:	4822      	ldr	r0, [pc, #136]	; (8002c78 <get_data+0x300>)
 8002bee:	f000 f981 	bl	8002ef4 <strcpy>
					break;
 8002bf2:	e050      	b.n	8002c96 <get_data+0x31e>
					strcpy(rectangle_args.y1,str_check);
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <get_data+0x2b0>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4820      	ldr	r0, [pc, #128]	; (8002c7c <get_data+0x304>)
 8002bfc:	f000 f97a 	bl	8002ef4 <strcpy>
					break;
 8002c00:	e049      	b.n	8002c96 <get_data+0x31e>
					strcpy(rectangle_args.x2,str_check);
 8002c02:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <get_data+0x2b0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4619      	mov	r1, r3
 8002c08:	481d      	ldr	r0, [pc, #116]	; (8002c80 <get_data+0x308>)
 8002c0a:	f000 f973 	bl	8002ef4 <strcpy>
					break;
 8002c0e:	e042      	b.n	8002c96 <get_data+0x31e>
					strcpy(rectangle_args.y2,str_check);
 8002c10:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <get_data+0x2b0>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4619      	mov	r1, r3
 8002c16:	481b      	ldr	r0, [pc, #108]	; (8002c84 <get_data+0x30c>)
 8002c18:	f000 f96c 	bl	8002ef4 <strcpy>
					break;
 8002c1c:	e03b      	b.n	8002c96 <get_data+0x31e>
 8002c1e:	bf00      	nop
 8002c20:	200133e8 	.word	0x200133e8
 8002c24:	080037e4 	.word	0x080037e4
 8002c28:	2001345c 	.word	0x2001345c
 8002c2c:	200006d8 	.word	0x200006d8
 8002c30:	080037e8 	.word	0x080037e8
 8002c34:	080037f0 	.word	0x080037f0
 8002c38:	20013528 	.word	0x20013528
 8002c3c:	2001352d 	.word	0x2001352d
 8002c40:	20013532 	.word	0x20013532
 8002c44:	20013537 	.word	0x20013537
 8002c48:	2001355a 	.word	0x2001355a
 8002c4c:	2001355f 	.word	0x2001355f
 8002c50:	080037f8 	.word	0x080037f8
 8002c54:	08003800 	.word	0x08003800
 8002c58:	08003808 	.word	0x08003808
 8002c5c:	20013592 	.word	0x20013592
 8002c60:	20013597 	.word	0x20013597
 8002c64:	2001359c 	.word	0x2001359c
 8002c68:	200135a1 	.word	0x200135a1
 8002c6c:	200135ab 	.word	0x200135ab
 8002c70:	08003810 	.word	0x08003810
 8002c74:	0800381c 	.word	0x0800381c
 8002c78:	200134dc 	.word	0x200134dc
 8002c7c:	200134e1 	.word	0x200134e1
 8002c80:	200134e6 	.word	0x200134e6
 8002c84:	200134eb 	.word	0x200134eb
					strcpy(rectangle_args.color,str_check);
 8002c88:	4b1b      	ldr	r3, [pc, #108]	; (8002cf8 <get_data+0x380>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	481b      	ldr	r0, [pc, #108]	; (8002cfc <get_data+0x384>)
 8002c90:	f000 f930 	bl	8002ef4 <strcpy>
					break;
 8002c94:	bf00      	nop
			fill++;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	607b      	str	r3, [r7, #4]
			str_check = strtok (NULL, ",");
 8002c9c:	4918      	ldr	r1, [pc, #96]	; (8002d00 <get_data+0x388>)
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	f000 f930 	bl	8002f04 <strtok>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	4b14      	ldr	r3, [pc, #80]	; (8002cf8 <get_data+0x380>)
 8002ca8:	601a      	str	r2, [r3, #0]
		while(str_check != NULL)
 8002caa:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <get_data+0x380>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d180      	bne.n	8002bb4 <get_data+0x23c>
		draw_rectangle(atoi(rectangle_args.x1),atoi(rectangle_args.y1),atoi(rectangle_args.x2),atoi(rectangle_args.y2),color(rectangle_args.color));
 8002cb2:	4814      	ldr	r0, [pc, #80]	; (8002d04 <get_data+0x38c>)
 8002cb4:	f000 f8f6 	bl	8002ea4 <atoi>
 8002cb8:	4604      	mov	r4, r0
 8002cba:	4813      	ldr	r0, [pc, #76]	; (8002d08 <get_data+0x390>)
 8002cbc:	f000 f8f2 	bl	8002ea4 <atoi>
 8002cc0:	4605      	mov	r5, r0
 8002cc2:	4812      	ldr	r0, [pc, #72]	; (8002d0c <get_data+0x394>)
 8002cc4:	f000 f8ee 	bl	8002ea4 <atoi>
 8002cc8:	4606      	mov	r6, r0
 8002cca:	4811      	ldr	r0, [pc, #68]	; (8002d10 <get_data+0x398>)
 8002ccc:	f000 f8ea 	bl	8002ea4 <atoi>
 8002cd0:	4680      	mov	r8, r0
 8002cd2:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <get_data+0x384>)
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 f81c 	bl	8002d14 <color>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	9300      	str	r3, [sp, #0]
 8002ce0:	4643      	mov	r3, r8
 8002ce2:	4632      	mov	r2, r6
 8002ce4:	4629      	mov	r1, r5
 8002ce6:	4620      	mov	r0, r4
 8002ce8:	f7fe f88f 	bl	8000e0a <draw_rectangle>
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002cf6:	bf00      	nop
 8002cf8:	2001345c 	.word	0x2001345c
 8002cfc:	20013513 	.word	0x20013513
 8002d00:	080037e4 	.word	0x080037e4
 8002d04:	200134dc 	.word	0x200134dc
 8002d08:	200134e1 	.word	0x200134e1
 8002d0c:	200134e6 	.word	0x200134e6
 8002d10:	200134eb 	.word	0x200134eb

08002d14 <color>:

uint8_t color(char color_input)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	71fb      	strb	r3, [r7, #7]
	if(strcmp(line_args.color, "zwart")==0) return zwart;
 8002d1e:	494f      	ldr	r1, [pc, #316]	; (8002e5c <color+0x148>)
 8002d20:	484f      	ldr	r0, [pc, #316]	; (8002e60 <color+0x14c>)
 8002d22:	f7fd fa51 	bl	80001c8 <strcmp>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <color+0x1c>
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e090      	b.n	8002e52 <color+0x13e>
	else if(strcmp(line_args.color, "blauw\r")==0) return blauw;
 8002d30:	494c      	ldr	r1, [pc, #304]	; (8002e64 <color+0x150>)
 8002d32:	484b      	ldr	r0, [pc, #300]	; (8002e60 <color+0x14c>)
 8002d34:	f7fd fa48 	bl	80001c8 <strcmp>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <color+0x2e>
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e087      	b.n	8002e52 <color+0x13e>
	else if(strcmp(line_args.color, "lichtblauw")==0) return lichtblauw;
 8002d42:	4949      	ldr	r1, [pc, #292]	; (8002e68 <color+0x154>)
 8002d44:	4846      	ldr	r0, [pc, #280]	; (8002e60 <color+0x14c>)
 8002d46:	f7fd fa3f 	bl	80001c8 <strcmp>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <color+0x40>
 8002d50:	2373      	movs	r3, #115	; 0x73
 8002d52:	e07e      	b.n	8002e52 <color+0x13e>
	else if(strcmp(line_args.color, "groen")==0) return groen;
 8002d54:	4945      	ldr	r1, [pc, #276]	; (8002e6c <color+0x158>)
 8002d56:	4842      	ldr	r0, [pc, #264]	; (8002e60 <color+0x14c>)
 8002d58:	f7fd fa36 	bl	80001c8 <strcmp>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <color+0x52>
 8002d62:	231c      	movs	r3, #28
 8002d64:	e075      	b.n	8002e52 <color+0x13e>
	else if(strcmp(line_args.color, "groen\r")==0) return groen;
 8002d66:	4942      	ldr	r1, [pc, #264]	; (8002e70 <color+0x15c>)
 8002d68:	483d      	ldr	r0, [pc, #244]	; (8002e60 <color+0x14c>)
 8002d6a:	f7fd fa2d 	bl	80001c8 <strcmp>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <color+0x64>
 8002d74:	231c      	movs	r3, #28
 8002d76:	e06c      	b.n	8002e52 <color+0x13e>
	else if(strcmp(line_args.color, "lichtgroen")==0) return lichtgroen;
 8002d78:	493e      	ldr	r1, [pc, #248]	; (8002e74 <color+0x160>)
 8002d7a:	4839      	ldr	r0, [pc, #228]	; (8002e60 <color+0x14c>)
 8002d7c:	f7fd fa24 	bl	80001c8 <strcmp>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <color+0x76>
 8002d86:	235c      	movs	r3, #92	; 0x5c
 8002d88:	e063      	b.n	8002e52 <color+0x13e>
	else if(strcmp(line_args.color, "rood")==0) return rood;
 8002d8a:	493b      	ldr	r1, [pc, #236]	; (8002e78 <color+0x164>)
 8002d8c:	4834      	ldr	r0, [pc, #208]	; (8002e60 <color+0x14c>)
 8002d8e:	f7fd fa1b 	bl	80001c8 <strcmp>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <color+0x88>
 8002d98:	23e0      	movs	r3, #224	; 0xe0
 8002d9a:	e05a      	b.n	8002e52 <color+0x13e>
	else if(strcmp(line_args.color, "lichtrood")==0) return lichtrood;
 8002d9c:	4937      	ldr	r1, [pc, #220]	; (8002e7c <color+0x168>)
 8002d9e:	4830      	ldr	r0, [pc, #192]	; (8002e60 <color+0x14c>)
 8002da0:	f7fd fa12 	bl	80001c8 <strcmp>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <color+0x9a>
 8002daa:	23e9      	movs	r3, #233	; 0xe9
 8002dac:	e051      	b.n	8002e52 <color+0x13e>
	else if(strcmp(line_args.color, "wit")==0) return wit;
 8002dae:	4934      	ldr	r1, [pc, #208]	; (8002e80 <color+0x16c>)
 8002db0:	482b      	ldr	r0, [pc, #172]	; (8002e60 <color+0x14c>)
 8002db2:	f7fd fa09 	bl	80001c8 <strcmp>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d101      	bne.n	8002dc0 <color+0xac>
 8002dbc:	23ff      	movs	r3, #255	; 0xff
 8002dbe:	e048      	b.n	8002e52 <color+0x13e>
	else if(strcmp(line_args.color, "cyaan")==0) return cyaan;
 8002dc0:	4930      	ldr	r1, [pc, #192]	; (8002e84 <color+0x170>)
 8002dc2:	4827      	ldr	r0, [pc, #156]	; (8002e60 <color+0x14c>)
 8002dc4:	f7fd fa00 	bl	80001c8 <strcmp>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <color+0xbe>
 8002dce:	231f      	movs	r3, #31
 8002dd0:	e03f      	b.n	8002e52 <color+0x13e>
	else if(strcmp(line_args.color, "lichtcyaan")==0) return lichtcyaan;
 8002dd2:	492d      	ldr	r1, [pc, #180]	; (8002e88 <color+0x174>)
 8002dd4:	4822      	ldr	r0, [pc, #136]	; (8002e60 <color+0x14c>)
 8002dd6:	f7fd f9f7 	bl	80001c8 <strcmp>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <color+0xd0>
 8002de0:	237f      	movs	r3, #127	; 0x7f
 8002de2:	e036      	b.n	8002e52 <color+0x13e>
	else if(strcmp(line_args.color, "magenta")==0) return magenta;
 8002de4:	4929      	ldr	r1, [pc, #164]	; (8002e8c <color+0x178>)
 8002de6:	481e      	ldr	r0, [pc, #120]	; (8002e60 <color+0x14c>)
 8002de8:	f7fd f9ee 	bl	80001c8 <strcmp>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <color+0xe2>
 8002df2:	23e3      	movs	r3, #227	; 0xe3
 8002df4:	e02d      	b.n	8002e52 <color+0x13e>
	else if(strcmp(line_args.color, "lichtmagenta")==0) return lichtmagenta;
 8002df6:	4926      	ldr	r1, [pc, #152]	; (8002e90 <color+0x17c>)
 8002df8:	4819      	ldr	r0, [pc, #100]	; (8002e60 <color+0x14c>)
 8002dfa:	f7fd f9e5 	bl	80001c8 <strcmp>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <color+0xf4>
 8002e04:	23e2      	movs	r3, #226	; 0xe2
 8002e06:	e024      	b.n	8002e52 <color+0x13e>
	else if(strcmp(line_args.color, "geel")==0) return geel;
 8002e08:	4922      	ldr	r1, [pc, #136]	; (8002e94 <color+0x180>)
 8002e0a:	4815      	ldr	r0, [pc, #84]	; (8002e60 <color+0x14c>)
 8002e0c:	f7fd f9dc 	bl	80001c8 <strcmp>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d101      	bne.n	8002e1a <color+0x106>
 8002e16:	23fc      	movs	r3, #252	; 0xfc
 8002e18:	e01b      	b.n	8002e52 <color+0x13e>
	else if(strcmp(line_args.color, "bruin")==0) return bruin;
 8002e1a:	491f      	ldr	r1, [pc, #124]	; (8002e98 <color+0x184>)
 8002e1c:	4810      	ldr	r0, [pc, #64]	; (8002e60 <color+0x14c>)
 8002e1e:	f7fd f9d3 	bl	80001c8 <strcmp>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d101      	bne.n	8002e2c <color+0x118>
 8002e28:	2388      	movs	r3, #136	; 0x88
 8002e2a:	e012      	b.n	8002e52 <color+0x13e>
	else if(strcmp(line_args.color, "grijs")==0) return grijs;
 8002e2c:	491b      	ldr	r1, [pc, #108]	; (8002e9c <color+0x188>)
 8002e2e:	480c      	ldr	r0, [pc, #48]	; (8002e60 <color+0x14c>)
 8002e30:	f7fd f9ca 	bl	80001c8 <strcmp>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <color+0x12a>
 8002e3a:	23e6      	movs	r3, #230	; 0xe6
 8002e3c:	e009      	b.n	8002e52 <color+0x13e>
	else if(strcmp(line_args.color, "paars")==0) return paars;
 8002e3e:	4918      	ldr	r1, [pc, #96]	; (8002ea0 <color+0x18c>)
 8002e40:	4807      	ldr	r0, [pc, #28]	; (8002e60 <color+0x14c>)
 8002e42:	f7fd f9c1 	bl	80001c8 <strcmp>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <color+0x13c>
 8002e4c:	2350      	movs	r3, #80	; 0x50
 8002e4e:	e000      	b.n	8002e52 <color+0x13e>
	else return wit;
 8002e50:	23ff      	movs	r3, #255	; 0xff
};
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	08003828 	.word	0x08003828
 8002e60:	2001355f 	.word	0x2001355f
 8002e64:	08003830 	.word	0x08003830
 8002e68:	08003838 	.word	0x08003838
 8002e6c:	08003844 	.word	0x08003844
 8002e70:	0800384c 	.word	0x0800384c
 8002e74:	08003854 	.word	0x08003854
 8002e78:	08003860 	.word	0x08003860
 8002e7c:	08003868 	.word	0x08003868
 8002e80:	08003874 	.word	0x08003874
 8002e84:	08003878 	.word	0x08003878
 8002e88:	08003880 	.word	0x08003880
 8002e8c:	0800388c 	.word	0x0800388c
 8002e90:	08003894 	.word	0x08003894
 8002e94:	080038a4 	.word	0x080038a4
 8002e98:	080038ac 	.word	0x080038ac
 8002e9c:	080038b4 	.word	0x080038b4
 8002ea0:	080038bc 	.word	0x080038bc

08002ea4 <atoi>:
 8002ea4:	220a      	movs	r2, #10
 8002ea6:	2100      	movs	r1, #0
 8002ea8:	f000 b902 	b.w	80030b0 <strtol>

08002eac <__libc_init_array>:
 8002eac:	b570      	push	{r4, r5, r6, lr}
 8002eae:	4e0d      	ldr	r6, [pc, #52]	; (8002ee4 <__libc_init_array+0x38>)
 8002eb0:	4c0d      	ldr	r4, [pc, #52]	; (8002ee8 <__libc_init_array+0x3c>)
 8002eb2:	1ba4      	subs	r4, r4, r6
 8002eb4:	10a4      	asrs	r4, r4, #2
 8002eb6:	2500      	movs	r5, #0
 8002eb8:	42a5      	cmp	r5, r4
 8002eba:	d109      	bne.n	8002ed0 <__libc_init_array+0x24>
 8002ebc:	4e0b      	ldr	r6, [pc, #44]	; (8002eec <__libc_init_array+0x40>)
 8002ebe:	4c0c      	ldr	r4, [pc, #48]	; (8002ef0 <__libc_init_array+0x44>)
 8002ec0:	f000 fc84 	bl	80037cc <_init>
 8002ec4:	1ba4      	subs	r4, r4, r6
 8002ec6:	10a4      	asrs	r4, r4, #2
 8002ec8:	2500      	movs	r5, #0
 8002eca:	42a5      	cmp	r5, r4
 8002ecc:	d105      	bne.n	8002eda <__libc_init_array+0x2e>
 8002ece:	bd70      	pop	{r4, r5, r6, pc}
 8002ed0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ed4:	4798      	blx	r3
 8002ed6:	3501      	adds	r5, #1
 8002ed8:	e7ee      	b.n	8002eb8 <__libc_init_array+0xc>
 8002eda:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ede:	4798      	blx	r3
 8002ee0:	3501      	adds	r5, #1
 8002ee2:	e7f2      	b.n	8002eca <__libc_init_array+0x1e>
 8002ee4:	080039d0 	.word	0x080039d0
 8002ee8:	080039d0 	.word	0x080039d0
 8002eec:	080039d0 	.word	0x080039d0
 8002ef0:	080039d4 	.word	0x080039d4

08002ef4 <strcpy>:
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002efa:	f803 2b01 	strb.w	r2, [r3], #1
 8002efe:	2a00      	cmp	r2, #0
 8002f00:	d1f9      	bne.n	8002ef6 <strcpy+0x2>
 8002f02:	4770      	bx	lr

08002f04 <strtok>:
 8002f04:	4b14      	ldr	r3, [pc, #80]	; (8002f58 <strtok+0x54>)
 8002f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f0a:	681d      	ldr	r5, [r3, #0]
 8002f0c:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
 8002f10:	4606      	mov	r6, r0
 8002f12:	460f      	mov	r7, r1
 8002f14:	b9bc      	cbnz	r4, 8002f46 <strtok+0x42>
 8002f16:	2050      	movs	r0, #80	; 0x50
 8002f18:	f000 f8e4 	bl	80030e4 <malloc>
 8002f1c:	f8c5 00e8 	str.w	r0, [r5, #232]	; 0xe8
 8002f20:	6004      	str	r4, [r0, #0]
 8002f22:	6044      	str	r4, [r0, #4]
 8002f24:	6084      	str	r4, [r0, #8]
 8002f26:	60c4      	str	r4, [r0, #12]
 8002f28:	6104      	str	r4, [r0, #16]
 8002f2a:	6144      	str	r4, [r0, #20]
 8002f2c:	6184      	str	r4, [r0, #24]
 8002f2e:	6284      	str	r4, [r0, #40]	; 0x28
 8002f30:	62c4      	str	r4, [r0, #44]	; 0x2c
 8002f32:	6304      	str	r4, [r0, #48]	; 0x30
 8002f34:	6344      	str	r4, [r0, #52]	; 0x34
 8002f36:	6384      	str	r4, [r0, #56]	; 0x38
 8002f38:	63c4      	str	r4, [r0, #60]	; 0x3c
 8002f3a:	6404      	str	r4, [r0, #64]	; 0x40
 8002f3c:	6444      	str	r4, [r0, #68]	; 0x44
 8002f3e:	6484      	str	r4, [r0, #72]	; 0x48
 8002f40:	64c4      	str	r4, [r0, #76]	; 0x4c
 8002f42:	7704      	strb	r4, [r0, #28]
 8002f44:	6244      	str	r4, [r0, #36]	; 0x24
 8002f46:	f8d5 20e8 	ldr.w	r2, [r5, #232]	; 0xe8
 8002f4a:	4639      	mov	r1, r7
 8002f4c:	4630      	mov	r0, r6
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f54:	f000 b802 	b.w	8002f5c <__strtok_r>
 8002f58:	20000010 	.word	0x20000010

08002f5c <__strtok_r>:
 8002f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f5e:	b918      	cbnz	r0, 8002f68 <__strtok_r+0xc>
 8002f60:	6810      	ldr	r0, [r2, #0]
 8002f62:	b908      	cbnz	r0, 8002f68 <__strtok_r+0xc>
 8002f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f66:	4620      	mov	r0, r4
 8002f68:	4604      	mov	r4, r0
 8002f6a:	460f      	mov	r7, r1
 8002f6c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8002f70:	f817 6b01 	ldrb.w	r6, [r7], #1
 8002f74:	b91e      	cbnz	r6, 8002f7e <__strtok_r+0x22>
 8002f76:	b965      	cbnz	r5, 8002f92 <__strtok_r+0x36>
 8002f78:	6015      	str	r5, [r2, #0]
 8002f7a:	4628      	mov	r0, r5
 8002f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f7e:	42b5      	cmp	r5, r6
 8002f80:	d1f6      	bne.n	8002f70 <__strtok_r+0x14>
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1ef      	bne.n	8002f66 <__strtok_r+0xa>
 8002f86:	6014      	str	r4, [r2, #0]
 8002f88:	7003      	strb	r3, [r0, #0]
 8002f8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f8c:	461c      	mov	r4, r3
 8002f8e:	e00c      	b.n	8002faa <__strtok_r+0x4e>
 8002f90:	b915      	cbnz	r5, 8002f98 <__strtok_r+0x3c>
 8002f92:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002f96:	460e      	mov	r6, r1
 8002f98:	f816 5b01 	ldrb.w	r5, [r6], #1
 8002f9c:	42ab      	cmp	r3, r5
 8002f9e:	d1f7      	bne.n	8002f90 <__strtok_r+0x34>
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d0f3      	beq.n	8002f8c <__strtok_r+0x30>
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	f804 3c01 	strb.w	r3, [r4, #-1]
 8002faa:	6014      	str	r4, [r2, #0]
 8002fac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fae <_strtol_l.isra.0>:
 8002fae:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fb2:	4680      	mov	r8, r0
 8002fb4:	4689      	mov	r9, r1
 8002fb6:	4692      	mov	sl, r2
 8002fb8:	461f      	mov	r7, r3
 8002fba:	468b      	mov	fp, r1
 8002fbc:	465d      	mov	r5, fp
 8002fbe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002fc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002fc4:	f000 f88a 	bl	80030dc <__locale_ctype_ptr_l>
 8002fc8:	4420      	add	r0, r4
 8002fca:	7846      	ldrb	r6, [r0, #1]
 8002fcc:	f016 0608 	ands.w	r6, r6, #8
 8002fd0:	d10b      	bne.n	8002fea <_strtol_l.isra.0+0x3c>
 8002fd2:	2c2d      	cmp	r4, #45	; 0x2d
 8002fd4:	d10b      	bne.n	8002fee <_strtol_l.isra.0+0x40>
 8002fd6:	782c      	ldrb	r4, [r5, #0]
 8002fd8:	2601      	movs	r6, #1
 8002fda:	f10b 0502 	add.w	r5, fp, #2
 8002fde:	b167      	cbz	r7, 8002ffa <_strtol_l.isra.0+0x4c>
 8002fe0:	2f10      	cmp	r7, #16
 8002fe2:	d114      	bne.n	800300e <_strtol_l.isra.0+0x60>
 8002fe4:	2c30      	cmp	r4, #48	; 0x30
 8002fe6:	d00a      	beq.n	8002ffe <_strtol_l.isra.0+0x50>
 8002fe8:	e011      	b.n	800300e <_strtol_l.isra.0+0x60>
 8002fea:	46ab      	mov	fp, r5
 8002fec:	e7e6      	b.n	8002fbc <_strtol_l.isra.0+0xe>
 8002fee:	2c2b      	cmp	r4, #43	; 0x2b
 8002ff0:	bf04      	itt	eq
 8002ff2:	782c      	ldrbeq	r4, [r5, #0]
 8002ff4:	f10b 0502 	addeq.w	r5, fp, #2
 8002ff8:	e7f1      	b.n	8002fde <_strtol_l.isra.0+0x30>
 8002ffa:	2c30      	cmp	r4, #48	; 0x30
 8002ffc:	d127      	bne.n	800304e <_strtol_l.isra.0+0xa0>
 8002ffe:	782b      	ldrb	r3, [r5, #0]
 8003000:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8003004:	2b58      	cmp	r3, #88	; 0x58
 8003006:	d14b      	bne.n	80030a0 <_strtol_l.isra.0+0xf2>
 8003008:	786c      	ldrb	r4, [r5, #1]
 800300a:	2710      	movs	r7, #16
 800300c:	3502      	adds	r5, #2
 800300e:	2e00      	cmp	r6, #0
 8003010:	bf0c      	ite	eq
 8003012:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8003016:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800301a:	2200      	movs	r2, #0
 800301c:	fbb1 fef7 	udiv	lr, r1, r7
 8003020:	4610      	mov	r0, r2
 8003022:	fb07 1c1e 	mls	ip, r7, lr, r1
 8003026:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800302a:	2b09      	cmp	r3, #9
 800302c:	d811      	bhi.n	8003052 <_strtol_l.isra.0+0xa4>
 800302e:	461c      	mov	r4, r3
 8003030:	42a7      	cmp	r7, r4
 8003032:	dd1d      	ble.n	8003070 <_strtol_l.isra.0+0xc2>
 8003034:	1c53      	adds	r3, r2, #1
 8003036:	d007      	beq.n	8003048 <_strtol_l.isra.0+0x9a>
 8003038:	4586      	cmp	lr, r0
 800303a:	d316      	bcc.n	800306a <_strtol_l.isra.0+0xbc>
 800303c:	d101      	bne.n	8003042 <_strtol_l.isra.0+0x94>
 800303e:	45a4      	cmp	ip, r4
 8003040:	db13      	blt.n	800306a <_strtol_l.isra.0+0xbc>
 8003042:	fb00 4007 	mla	r0, r0, r7, r4
 8003046:	2201      	movs	r2, #1
 8003048:	f815 4b01 	ldrb.w	r4, [r5], #1
 800304c:	e7eb      	b.n	8003026 <_strtol_l.isra.0+0x78>
 800304e:	270a      	movs	r7, #10
 8003050:	e7dd      	b.n	800300e <_strtol_l.isra.0+0x60>
 8003052:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8003056:	2b19      	cmp	r3, #25
 8003058:	d801      	bhi.n	800305e <_strtol_l.isra.0+0xb0>
 800305a:	3c37      	subs	r4, #55	; 0x37
 800305c:	e7e8      	b.n	8003030 <_strtol_l.isra.0+0x82>
 800305e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8003062:	2b19      	cmp	r3, #25
 8003064:	d804      	bhi.n	8003070 <_strtol_l.isra.0+0xc2>
 8003066:	3c57      	subs	r4, #87	; 0x57
 8003068:	e7e2      	b.n	8003030 <_strtol_l.isra.0+0x82>
 800306a:	f04f 32ff 	mov.w	r2, #4294967295
 800306e:	e7eb      	b.n	8003048 <_strtol_l.isra.0+0x9a>
 8003070:	1c53      	adds	r3, r2, #1
 8003072:	d108      	bne.n	8003086 <_strtol_l.isra.0+0xd8>
 8003074:	2322      	movs	r3, #34	; 0x22
 8003076:	f8c8 3000 	str.w	r3, [r8]
 800307a:	4608      	mov	r0, r1
 800307c:	f1ba 0f00 	cmp.w	sl, #0
 8003080:	d107      	bne.n	8003092 <_strtol_l.isra.0+0xe4>
 8003082:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003086:	b106      	cbz	r6, 800308a <_strtol_l.isra.0+0xdc>
 8003088:	4240      	negs	r0, r0
 800308a:	f1ba 0f00 	cmp.w	sl, #0
 800308e:	d00c      	beq.n	80030aa <_strtol_l.isra.0+0xfc>
 8003090:	b122      	cbz	r2, 800309c <_strtol_l.isra.0+0xee>
 8003092:	3d01      	subs	r5, #1
 8003094:	f8ca 5000 	str.w	r5, [sl]
 8003098:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800309c:	464d      	mov	r5, r9
 800309e:	e7f9      	b.n	8003094 <_strtol_l.isra.0+0xe6>
 80030a0:	2430      	movs	r4, #48	; 0x30
 80030a2:	2f00      	cmp	r7, #0
 80030a4:	d1b3      	bne.n	800300e <_strtol_l.isra.0+0x60>
 80030a6:	2708      	movs	r7, #8
 80030a8:	e7b1      	b.n	800300e <_strtol_l.isra.0+0x60>
 80030aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080030b0 <strtol>:
 80030b0:	4b08      	ldr	r3, [pc, #32]	; (80030d4 <strtol+0x24>)
 80030b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80030b4:	681c      	ldr	r4, [r3, #0]
 80030b6:	4d08      	ldr	r5, [pc, #32]	; (80030d8 <strtol+0x28>)
 80030b8:	6a23      	ldr	r3, [r4, #32]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	bf08      	it	eq
 80030be:	462b      	moveq	r3, r5
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	4613      	mov	r3, r2
 80030c4:	460a      	mov	r2, r1
 80030c6:	4601      	mov	r1, r0
 80030c8:	4620      	mov	r0, r4
 80030ca:	f7ff ff70 	bl	8002fae <_strtol_l.isra.0>
 80030ce:	b003      	add	sp, #12
 80030d0:	bd30      	pop	{r4, r5, pc}
 80030d2:	bf00      	nop
 80030d4:	20000010 	.word	0x20000010
 80030d8:	20000104 	.word	0x20000104

080030dc <__locale_ctype_ptr_l>:
 80030dc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80030e0:	4770      	bx	lr
	...

080030e4 <malloc>:
 80030e4:	4b02      	ldr	r3, [pc, #8]	; (80030f0 <malloc+0xc>)
 80030e6:	4601      	mov	r1, r0
 80030e8:	6818      	ldr	r0, [r3, #0]
 80030ea:	f000 b803 	b.w	80030f4 <_malloc_r>
 80030ee:	bf00      	nop
 80030f0:	20000010 	.word	0x20000010

080030f4 <_malloc_r>:
 80030f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030f8:	f101 040b 	add.w	r4, r1, #11
 80030fc:	2c16      	cmp	r4, #22
 80030fe:	4681      	mov	r9, r0
 8003100:	d907      	bls.n	8003112 <_malloc_r+0x1e>
 8003102:	f034 0407 	bics.w	r4, r4, #7
 8003106:	d505      	bpl.n	8003114 <_malloc_r+0x20>
 8003108:	230c      	movs	r3, #12
 800310a:	f8c9 3000 	str.w	r3, [r9]
 800310e:	2600      	movs	r6, #0
 8003110:	e131      	b.n	8003376 <_malloc_r+0x282>
 8003112:	2410      	movs	r4, #16
 8003114:	428c      	cmp	r4, r1
 8003116:	d3f7      	bcc.n	8003108 <_malloc_r+0x14>
 8003118:	4648      	mov	r0, r9
 800311a:	f000 fa0b 	bl	8003534 <__malloc_lock>
 800311e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8003122:	4d9c      	ldr	r5, [pc, #624]	; (8003394 <_malloc_r+0x2a0>)
 8003124:	d236      	bcs.n	8003194 <_malloc_r+0xa0>
 8003126:	f104 0208 	add.w	r2, r4, #8
 800312a:	442a      	add	r2, r5
 800312c:	f1a2 0108 	sub.w	r1, r2, #8
 8003130:	6856      	ldr	r6, [r2, #4]
 8003132:	428e      	cmp	r6, r1
 8003134:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8003138:	d102      	bne.n	8003140 <_malloc_r+0x4c>
 800313a:	68d6      	ldr	r6, [r2, #12]
 800313c:	42b2      	cmp	r2, r6
 800313e:	d010      	beq.n	8003162 <_malloc_r+0x6e>
 8003140:	6873      	ldr	r3, [r6, #4]
 8003142:	68f2      	ldr	r2, [r6, #12]
 8003144:	68b1      	ldr	r1, [r6, #8]
 8003146:	f023 0303 	bic.w	r3, r3, #3
 800314a:	60ca      	str	r2, [r1, #12]
 800314c:	4433      	add	r3, r6
 800314e:	6091      	str	r1, [r2, #8]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	f042 0201 	orr.w	r2, r2, #1
 8003156:	605a      	str	r2, [r3, #4]
 8003158:	4648      	mov	r0, r9
 800315a:	f000 f9f1 	bl	8003540 <__malloc_unlock>
 800315e:	3608      	adds	r6, #8
 8003160:	e109      	b.n	8003376 <_malloc_r+0x282>
 8003162:	3302      	adds	r3, #2
 8003164:	4a8c      	ldr	r2, [pc, #560]	; (8003398 <_malloc_r+0x2a4>)
 8003166:	692e      	ldr	r6, [r5, #16]
 8003168:	4296      	cmp	r6, r2
 800316a:	4611      	mov	r1, r2
 800316c:	d06d      	beq.n	800324a <_malloc_r+0x156>
 800316e:	6870      	ldr	r0, [r6, #4]
 8003170:	f020 0003 	bic.w	r0, r0, #3
 8003174:	1b07      	subs	r7, r0, r4
 8003176:	2f0f      	cmp	r7, #15
 8003178:	dd47      	ble.n	800320a <_malloc_r+0x116>
 800317a:	1933      	adds	r3, r6, r4
 800317c:	f044 0401 	orr.w	r4, r4, #1
 8003180:	6074      	str	r4, [r6, #4]
 8003182:	616b      	str	r3, [r5, #20]
 8003184:	612b      	str	r3, [r5, #16]
 8003186:	60da      	str	r2, [r3, #12]
 8003188:	609a      	str	r2, [r3, #8]
 800318a:	f047 0201 	orr.w	r2, r7, #1
 800318e:	605a      	str	r2, [r3, #4]
 8003190:	5037      	str	r7, [r6, r0]
 8003192:	e7e1      	b.n	8003158 <_malloc_r+0x64>
 8003194:	0a63      	lsrs	r3, r4, #9
 8003196:	d02a      	beq.n	80031ee <_malloc_r+0xfa>
 8003198:	2b04      	cmp	r3, #4
 800319a:	d812      	bhi.n	80031c2 <_malloc_r+0xce>
 800319c:	09a3      	lsrs	r3, r4, #6
 800319e:	3338      	adds	r3, #56	; 0x38
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80031a6:	f1a2 0008 	sub.w	r0, r2, #8
 80031aa:	6856      	ldr	r6, [r2, #4]
 80031ac:	4286      	cmp	r6, r0
 80031ae:	d006      	beq.n	80031be <_malloc_r+0xca>
 80031b0:	6872      	ldr	r2, [r6, #4]
 80031b2:	f022 0203 	bic.w	r2, r2, #3
 80031b6:	1b11      	subs	r1, r2, r4
 80031b8:	290f      	cmp	r1, #15
 80031ba:	dd1c      	ble.n	80031f6 <_malloc_r+0x102>
 80031bc:	3b01      	subs	r3, #1
 80031be:	3301      	adds	r3, #1
 80031c0:	e7d0      	b.n	8003164 <_malloc_r+0x70>
 80031c2:	2b14      	cmp	r3, #20
 80031c4:	d801      	bhi.n	80031ca <_malloc_r+0xd6>
 80031c6:	335b      	adds	r3, #91	; 0x5b
 80031c8:	e7ea      	b.n	80031a0 <_malloc_r+0xac>
 80031ca:	2b54      	cmp	r3, #84	; 0x54
 80031cc:	d802      	bhi.n	80031d4 <_malloc_r+0xe0>
 80031ce:	0b23      	lsrs	r3, r4, #12
 80031d0:	336e      	adds	r3, #110	; 0x6e
 80031d2:	e7e5      	b.n	80031a0 <_malloc_r+0xac>
 80031d4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80031d8:	d802      	bhi.n	80031e0 <_malloc_r+0xec>
 80031da:	0be3      	lsrs	r3, r4, #15
 80031dc:	3377      	adds	r3, #119	; 0x77
 80031de:	e7df      	b.n	80031a0 <_malloc_r+0xac>
 80031e0:	f240 5254 	movw	r2, #1364	; 0x554
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d804      	bhi.n	80031f2 <_malloc_r+0xfe>
 80031e8:	0ca3      	lsrs	r3, r4, #18
 80031ea:	337c      	adds	r3, #124	; 0x7c
 80031ec:	e7d8      	b.n	80031a0 <_malloc_r+0xac>
 80031ee:	233f      	movs	r3, #63	; 0x3f
 80031f0:	e7d6      	b.n	80031a0 <_malloc_r+0xac>
 80031f2:	237e      	movs	r3, #126	; 0x7e
 80031f4:	e7d4      	b.n	80031a0 <_malloc_r+0xac>
 80031f6:	2900      	cmp	r1, #0
 80031f8:	68f1      	ldr	r1, [r6, #12]
 80031fa:	db04      	blt.n	8003206 <_malloc_r+0x112>
 80031fc:	68b3      	ldr	r3, [r6, #8]
 80031fe:	60d9      	str	r1, [r3, #12]
 8003200:	608b      	str	r3, [r1, #8]
 8003202:	18b3      	adds	r3, r6, r2
 8003204:	e7a4      	b.n	8003150 <_malloc_r+0x5c>
 8003206:	460e      	mov	r6, r1
 8003208:	e7d0      	b.n	80031ac <_malloc_r+0xb8>
 800320a:	2f00      	cmp	r7, #0
 800320c:	616a      	str	r2, [r5, #20]
 800320e:	612a      	str	r2, [r5, #16]
 8003210:	db05      	blt.n	800321e <_malloc_r+0x12a>
 8003212:	4430      	add	r0, r6
 8003214:	6843      	ldr	r3, [r0, #4]
 8003216:	f043 0301 	orr.w	r3, r3, #1
 800321a:	6043      	str	r3, [r0, #4]
 800321c:	e79c      	b.n	8003158 <_malloc_r+0x64>
 800321e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003222:	d244      	bcs.n	80032ae <_malloc_r+0x1ba>
 8003224:	08c0      	lsrs	r0, r0, #3
 8003226:	1087      	asrs	r7, r0, #2
 8003228:	2201      	movs	r2, #1
 800322a:	fa02 f707 	lsl.w	r7, r2, r7
 800322e:	686a      	ldr	r2, [r5, #4]
 8003230:	3001      	adds	r0, #1
 8003232:	433a      	orrs	r2, r7
 8003234:	606a      	str	r2, [r5, #4]
 8003236:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800323a:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800323e:	60b7      	str	r7, [r6, #8]
 8003240:	3a08      	subs	r2, #8
 8003242:	60f2      	str	r2, [r6, #12]
 8003244:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8003248:	60fe      	str	r6, [r7, #12]
 800324a:	2001      	movs	r0, #1
 800324c:	109a      	asrs	r2, r3, #2
 800324e:	fa00 f202 	lsl.w	r2, r0, r2
 8003252:	6868      	ldr	r0, [r5, #4]
 8003254:	4282      	cmp	r2, r0
 8003256:	f200 80a1 	bhi.w	800339c <_malloc_r+0x2a8>
 800325a:	4202      	tst	r2, r0
 800325c:	d106      	bne.n	800326c <_malloc_r+0x178>
 800325e:	f023 0303 	bic.w	r3, r3, #3
 8003262:	0052      	lsls	r2, r2, #1
 8003264:	4202      	tst	r2, r0
 8003266:	f103 0304 	add.w	r3, r3, #4
 800326a:	d0fa      	beq.n	8003262 <_malloc_r+0x16e>
 800326c:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8003270:	46e0      	mov	r8, ip
 8003272:	469e      	mov	lr, r3
 8003274:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8003278:	4546      	cmp	r6, r8
 800327a:	d153      	bne.n	8003324 <_malloc_r+0x230>
 800327c:	f10e 0e01 	add.w	lr, lr, #1
 8003280:	f01e 0f03 	tst.w	lr, #3
 8003284:	f108 0808 	add.w	r8, r8, #8
 8003288:	d1f4      	bne.n	8003274 <_malloc_r+0x180>
 800328a:	0798      	lsls	r0, r3, #30
 800328c:	d179      	bne.n	8003382 <_malloc_r+0x28e>
 800328e:	686b      	ldr	r3, [r5, #4]
 8003290:	ea23 0302 	bic.w	r3, r3, r2
 8003294:	606b      	str	r3, [r5, #4]
 8003296:	6868      	ldr	r0, [r5, #4]
 8003298:	0052      	lsls	r2, r2, #1
 800329a:	4282      	cmp	r2, r0
 800329c:	d87e      	bhi.n	800339c <_malloc_r+0x2a8>
 800329e:	2a00      	cmp	r2, #0
 80032a0:	d07c      	beq.n	800339c <_malloc_r+0x2a8>
 80032a2:	4673      	mov	r3, lr
 80032a4:	4202      	tst	r2, r0
 80032a6:	d1e1      	bne.n	800326c <_malloc_r+0x178>
 80032a8:	3304      	adds	r3, #4
 80032aa:	0052      	lsls	r2, r2, #1
 80032ac:	e7fa      	b.n	80032a4 <_malloc_r+0x1b0>
 80032ae:	0a42      	lsrs	r2, r0, #9
 80032b0:	2a04      	cmp	r2, #4
 80032b2:	d815      	bhi.n	80032e0 <_malloc_r+0x1ec>
 80032b4:	0982      	lsrs	r2, r0, #6
 80032b6:	3238      	adds	r2, #56	; 0x38
 80032b8:	1c57      	adds	r7, r2, #1
 80032ba:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80032be:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80032c2:	45be      	cmp	lr, r7
 80032c4:	d126      	bne.n	8003314 <_malloc_r+0x220>
 80032c6:	2001      	movs	r0, #1
 80032c8:	1092      	asrs	r2, r2, #2
 80032ca:	fa00 f202 	lsl.w	r2, r0, r2
 80032ce:	6868      	ldr	r0, [r5, #4]
 80032d0:	4310      	orrs	r0, r2
 80032d2:	6068      	str	r0, [r5, #4]
 80032d4:	f8c6 e00c 	str.w	lr, [r6, #12]
 80032d8:	60b7      	str	r7, [r6, #8]
 80032da:	f8ce 6008 	str.w	r6, [lr, #8]
 80032de:	e7b3      	b.n	8003248 <_malloc_r+0x154>
 80032e0:	2a14      	cmp	r2, #20
 80032e2:	d801      	bhi.n	80032e8 <_malloc_r+0x1f4>
 80032e4:	325b      	adds	r2, #91	; 0x5b
 80032e6:	e7e7      	b.n	80032b8 <_malloc_r+0x1c4>
 80032e8:	2a54      	cmp	r2, #84	; 0x54
 80032ea:	d802      	bhi.n	80032f2 <_malloc_r+0x1fe>
 80032ec:	0b02      	lsrs	r2, r0, #12
 80032ee:	326e      	adds	r2, #110	; 0x6e
 80032f0:	e7e2      	b.n	80032b8 <_malloc_r+0x1c4>
 80032f2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80032f6:	d802      	bhi.n	80032fe <_malloc_r+0x20a>
 80032f8:	0bc2      	lsrs	r2, r0, #15
 80032fa:	3277      	adds	r2, #119	; 0x77
 80032fc:	e7dc      	b.n	80032b8 <_malloc_r+0x1c4>
 80032fe:	f240 5754 	movw	r7, #1364	; 0x554
 8003302:	42ba      	cmp	r2, r7
 8003304:	bf9a      	itte	ls
 8003306:	0c82      	lsrls	r2, r0, #18
 8003308:	327c      	addls	r2, #124	; 0x7c
 800330a:	227e      	movhi	r2, #126	; 0x7e
 800330c:	e7d4      	b.n	80032b8 <_malloc_r+0x1c4>
 800330e:	68bf      	ldr	r7, [r7, #8]
 8003310:	45be      	cmp	lr, r7
 8003312:	d004      	beq.n	800331e <_malloc_r+0x22a>
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	f022 0203 	bic.w	r2, r2, #3
 800331a:	4290      	cmp	r0, r2
 800331c:	d3f7      	bcc.n	800330e <_malloc_r+0x21a>
 800331e:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8003322:	e7d7      	b.n	80032d4 <_malloc_r+0x1e0>
 8003324:	6870      	ldr	r0, [r6, #4]
 8003326:	68f7      	ldr	r7, [r6, #12]
 8003328:	f020 0003 	bic.w	r0, r0, #3
 800332c:	eba0 0a04 	sub.w	sl, r0, r4
 8003330:	f1ba 0f0f 	cmp.w	sl, #15
 8003334:	dd10      	ble.n	8003358 <_malloc_r+0x264>
 8003336:	68b2      	ldr	r2, [r6, #8]
 8003338:	1933      	adds	r3, r6, r4
 800333a:	f044 0401 	orr.w	r4, r4, #1
 800333e:	6074      	str	r4, [r6, #4]
 8003340:	60d7      	str	r7, [r2, #12]
 8003342:	60ba      	str	r2, [r7, #8]
 8003344:	f04a 0201 	orr.w	r2, sl, #1
 8003348:	616b      	str	r3, [r5, #20]
 800334a:	612b      	str	r3, [r5, #16]
 800334c:	60d9      	str	r1, [r3, #12]
 800334e:	6099      	str	r1, [r3, #8]
 8003350:	605a      	str	r2, [r3, #4]
 8003352:	f846 a000 	str.w	sl, [r6, r0]
 8003356:	e6ff      	b.n	8003158 <_malloc_r+0x64>
 8003358:	f1ba 0f00 	cmp.w	sl, #0
 800335c:	db0f      	blt.n	800337e <_malloc_r+0x28a>
 800335e:	4430      	add	r0, r6
 8003360:	6843      	ldr	r3, [r0, #4]
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	6043      	str	r3, [r0, #4]
 8003368:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800336c:	4648      	mov	r0, r9
 800336e:	60df      	str	r7, [r3, #12]
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	f000 f8e5 	bl	8003540 <__malloc_unlock>
 8003376:	4630      	mov	r0, r6
 8003378:	b003      	add	sp, #12
 800337a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800337e:	463e      	mov	r6, r7
 8003380:	e77a      	b.n	8003278 <_malloc_r+0x184>
 8003382:	f85c 0908 	ldr.w	r0, [ip], #-8
 8003386:	4584      	cmp	ip, r0
 8003388:	f103 33ff 	add.w	r3, r3, #4294967295
 800338c:	f43f af7d 	beq.w	800328a <_malloc_r+0x196>
 8003390:	e781      	b.n	8003296 <_malloc_r+0x1a2>
 8003392:	bf00      	nop
 8003394:	20000270 	.word	0x20000270
 8003398:	20000278 	.word	0x20000278
 800339c:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80033a0:	f8db 6004 	ldr.w	r6, [fp, #4]
 80033a4:	f026 0603 	bic.w	r6, r6, #3
 80033a8:	42b4      	cmp	r4, r6
 80033aa:	d803      	bhi.n	80033b4 <_malloc_r+0x2c0>
 80033ac:	1b33      	subs	r3, r6, r4
 80033ae:	2b0f      	cmp	r3, #15
 80033b0:	f300 8096 	bgt.w	80034e0 <_malloc_r+0x3ec>
 80033b4:	4a4f      	ldr	r2, [pc, #316]	; (80034f4 <_malloc_r+0x400>)
 80033b6:	6817      	ldr	r7, [r2, #0]
 80033b8:	4a4f      	ldr	r2, [pc, #316]	; (80034f8 <_malloc_r+0x404>)
 80033ba:	6811      	ldr	r1, [r2, #0]
 80033bc:	3710      	adds	r7, #16
 80033be:	3101      	adds	r1, #1
 80033c0:	eb0b 0306 	add.w	r3, fp, r6
 80033c4:	4427      	add	r7, r4
 80033c6:	d005      	beq.n	80033d4 <_malloc_r+0x2e0>
 80033c8:	494c      	ldr	r1, [pc, #304]	; (80034fc <_malloc_r+0x408>)
 80033ca:	3901      	subs	r1, #1
 80033cc:	440f      	add	r7, r1
 80033ce:	3101      	adds	r1, #1
 80033d0:	4249      	negs	r1, r1
 80033d2:	400f      	ands	r7, r1
 80033d4:	4639      	mov	r1, r7
 80033d6:	4648      	mov	r0, r9
 80033d8:	9201      	str	r2, [sp, #4]
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	f000 f8b6 	bl	800354c <_sbrk_r>
 80033e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80033e4:	4680      	mov	r8, r0
 80033e6:	d056      	beq.n	8003496 <_malloc_r+0x3a2>
 80033e8:	9b00      	ldr	r3, [sp, #0]
 80033ea:	9a01      	ldr	r2, [sp, #4]
 80033ec:	4283      	cmp	r3, r0
 80033ee:	d901      	bls.n	80033f4 <_malloc_r+0x300>
 80033f0:	45ab      	cmp	fp, r5
 80033f2:	d150      	bne.n	8003496 <_malloc_r+0x3a2>
 80033f4:	4842      	ldr	r0, [pc, #264]	; (8003500 <_malloc_r+0x40c>)
 80033f6:	6801      	ldr	r1, [r0, #0]
 80033f8:	4543      	cmp	r3, r8
 80033fa:	eb07 0e01 	add.w	lr, r7, r1
 80033fe:	f8c0 e000 	str.w	lr, [r0]
 8003402:	4940      	ldr	r1, [pc, #256]	; (8003504 <_malloc_r+0x410>)
 8003404:	4682      	mov	sl, r0
 8003406:	d113      	bne.n	8003430 <_malloc_r+0x33c>
 8003408:	420b      	tst	r3, r1
 800340a:	d111      	bne.n	8003430 <_malloc_r+0x33c>
 800340c:	68ab      	ldr	r3, [r5, #8]
 800340e:	443e      	add	r6, r7
 8003410:	f046 0601 	orr.w	r6, r6, #1
 8003414:	605e      	str	r6, [r3, #4]
 8003416:	4a3c      	ldr	r2, [pc, #240]	; (8003508 <_malloc_r+0x414>)
 8003418:	f8da 3000 	ldr.w	r3, [sl]
 800341c:	6811      	ldr	r1, [r2, #0]
 800341e:	428b      	cmp	r3, r1
 8003420:	bf88      	it	hi
 8003422:	6013      	strhi	r3, [r2, #0]
 8003424:	4a39      	ldr	r2, [pc, #228]	; (800350c <_malloc_r+0x418>)
 8003426:	6811      	ldr	r1, [r2, #0]
 8003428:	428b      	cmp	r3, r1
 800342a:	bf88      	it	hi
 800342c:	6013      	strhi	r3, [r2, #0]
 800342e:	e032      	b.n	8003496 <_malloc_r+0x3a2>
 8003430:	6810      	ldr	r0, [r2, #0]
 8003432:	3001      	adds	r0, #1
 8003434:	bf1b      	ittet	ne
 8003436:	eba8 0303 	subne.w	r3, r8, r3
 800343a:	4473      	addne	r3, lr
 800343c:	f8c2 8000 	streq.w	r8, [r2]
 8003440:	f8ca 3000 	strne.w	r3, [sl]
 8003444:	f018 0007 	ands.w	r0, r8, #7
 8003448:	bf1c      	itt	ne
 800344a:	f1c0 0008 	rsbne	r0, r0, #8
 800344e:	4480      	addne	r8, r0
 8003450:	4b2a      	ldr	r3, [pc, #168]	; (80034fc <_malloc_r+0x408>)
 8003452:	4447      	add	r7, r8
 8003454:	4418      	add	r0, r3
 8003456:	400f      	ands	r7, r1
 8003458:	1bc7      	subs	r7, r0, r7
 800345a:	4639      	mov	r1, r7
 800345c:	4648      	mov	r0, r9
 800345e:	f000 f875 	bl	800354c <_sbrk_r>
 8003462:	1c43      	adds	r3, r0, #1
 8003464:	bf08      	it	eq
 8003466:	4640      	moveq	r0, r8
 8003468:	f8da 3000 	ldr.w	r3, [sl]
 800346c:	f8c5 8008 	str.w	r8, [r5, #8]
 8003470:	bf08      	it	eq
 8003472:	2700      	moveq	r7, #0
 8003474:	eba0 0008 	sub.w	r0, r0, r8
 8003478:	443b      	add	r3, r7
 800347a:	4407      	add	r7, r0
 800347c:	f047 0701 	orr.w	r7, r7, #1
 8003480:	45ab      	cmp	fp, r5
 8003482:	f8ca 3000 	str.w	r3, [sl]
 8003486:	f8c8 7004 	str.w	r7, [r8, #4]
 800348a:	d0c4      	beq.n	8003416 <_malloc_r+0x322>
 800348c:	2e0f      	cmp	r6, #15
 800348e:	d810      	bhi.n	80034b2 <_malloc_r+0x3be>
 8003490:	2301      	movs	r3, #1
 8003492:	f8c8 3004 	str.w	r3, [r8, #4]
 8003496:	68ab      	ldr	r3, [r5, #8]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	f022 0203 	bic.w	r2, r2, #3
 800349e:	4294      	cmp	r4, r2
 80034a0:	eba2 0304 	sub.w	r3, r2, r4
 80034a4:	d801      	bhi.n	80034aa <_malloc_r+0x3b6>
 80034a6:	2b0f      	cmp	r3, #15
 80034a8:	dc1a      	bgt.n	80034e0 <_malloc_r+0x3ec>
 80034aa:	4648      	mov	r0, r9
 80034ac:	f000 f848 	bl	8003540 <__malloc_unlock>
 80034b0:	e62d      	b.n	800310e <_malloc_r+0x1a>
 80034b2:	f8db 3004 	ldr.w	r3, [fp, #4]
 80034b6:	3e0c      	subs	r6, #12
 80034b8:	f026 0607 	bic.w	r6, r6, #7
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	4333      	orrs	r3, r6
 80034c2:	f8cb 3004 	str.w	r3, [fp, #4]
 80034c6:	eb0b 0306 	add.w	r3, fp, r6
 80034ca:	2205      	movs	r2, #5
 80034cc:	2e0f      	cmp	r6, #15
 80034ce:	605a      	str	r2, [r3, #4]
 80034d0:	609a      	str	r2, [r3, #8]
 80034d2:	d9a0      	bls.n	8003416 <_malloc_r+0x322>
 80034d4:	f10b 0108 	add.w	r1, fp, #8
 80034d8:	4648      	mov	r0, r9
 80034da:	f000 f8ab 	bl	8003634 <_free_r>
 80034de:	e79a      	b.n	8003416 <_malloc_r+0x322>
 80034e0:	68ae      	ldr	r6, [r5, #8]
 80034e2:	f044 0201 	orr.w	r2, r4, #1
 80034e6:	4434      	add	r4, r6
 80034e8:	f043 0301 	orr.w	r3, r3, #1
 80034ec:	6072      	str	r2, [r6, #4]
 80034ee:	60ac      	str	r4, [r5, #8]
 80034f0:	6063      	str	r3, [r4, #4]
 80034f2:	e631      	b.n	8003158 <_malloc_r+0x64>
 80034f4:	200006d0 	.word	0x200006d0
 80034f8:	20000678 	.word	0x20000678
 80034fc:	00000080 	.word	0x00000080
 8003500:	200006a0 	.word	0x200006a0
 8003504:	0000007f 	.word	0x0000007f
 8003508:	200006c8 	.word	0x200006c8
 800350c:	200006cc 	.word	0x200006cc

08003510 <__ascii_mbtowc>:
 8003510:	b082      	sub	sp, #8
 8003512:	b901      	cbnz	r1, 8003516 <__ascii_mbtowc+0x6>
 8003514:	a901      	add	r1, sp, #4
 8003516:	b142      	cbz	r2, 800352a <__ascii_mbtowc+0x1a>
 8003518:	b14b      	cbz	r3, 800352e <__ascii_mbtowc+0x1e>
 800351a:	7813      	ldrb	r3, [r2, #0]
 800351c:	600b      	str	r3, [r1, #0]
 800351e:	7812      	ldrb	r2, [r2, #0]
 8003520:	1c10      	adds	r0, r2, #0
 8003522:	bf18      	it	ne
 8003524:	2001      	movne	r0, #1
 8003526:	b002      	add	sp, #8
 8003528:	4770      	bx	lr
 800352a:	4610      	mov	r0, r2
 800352c:	e7fb      	b.n	8003526 <__ascii_mbtowc+0x16>
 800352e:	f06f 0001 	mvn.w	r0, #1
 8003532:	e7f8      	b.n	8003526 <__ascii_mbtowc+0x16>

08003534 <__malloc_lock>:
 8003534:	4801      	ldr	r0, [pc, #4]	; (800353c <__malloc_lock+0x8>)
 8003536:	f000 b939 	b.w	80037ac <__retarget_lock_acquire_recursive>
 800353a:	bf00      	nop
 800353c:	200135c3 	.word	0x200135c3

08003540 <__malloc_unlock>:
 8003540:	4801      	ldr	r0, [pc, #4]	; (8003548 <__malloc_unlock+0x8>)
 8003542:	f000 b934 	b.w	80037ae <__retarget_lock_release_recursive>
 8003546:	bf00      	nop
 8003548:	200135c3 	.word	0x200135c3

0800354c <_sbrk_r>:
 800354c:	b538      	push	{r3, r4, r5, lr}
 800354e:	4c06      	ldr	r4, [pc, #24]	; (8003568 <_sbrk_r+0x1c>)
 8003550:	2300      	movs	r3, #0
 8003552:	4605      	mov	r5, r0
 8003554:	4608      	mov	r0, r1
 8003556:	6023      	str	r3, [r4, #0]
 8003558:	f000 f92a 	bl	80037b0 <_sbrk>
 800355c:	1c43      	adds	r3, r0, #1
 800355e:	d102      	bne.n	8003566 <_sbrk_r+0x1a>
 8003560:	6823      	ldr	r3, [r4, #0]
 8003562:	b103      	cbz	r3, 8003566 <_sbrk_r+0x1a>
 8003564:	602b      	str	r3, [r5, #0]
 8003566:	bd38      	pop	{r3, r4, r5, pc}
 8003568:	200135c8 	.word	0x200135c8

0800356c <__ascii_wctomb>:
 800356c:	b149      	cbz	r1, 8003582 <__ascii_wctomb+0x16>
 800356e:	2aff      	cmp	r2, #255	; 0xff
 8003570:	bf85      	ittet	hi
 8003572:	238a      	movhi	r3, #138	; 0x8a
 8003574:	6003      	strhi	r3, [r0, #0]
 8003576:	700a      	strbls	r2, [r1, #0]
 8003578:	f04f 30ff 	movhi.w	r0, #4294967295
 800357c:	bf98      	it	ls
 800357e:	2001      	movls	r0, #1
 8003580:	4770      	bx	lr
 8003582:	4608      	mov	r0, r1
 8003584:	4770      	bx	lr
	...

08003588 <_malloc_trim_r>:
 8003588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800358c:	4f25      	ldr	r7, [pc, #148]	; (8003624 <_malloc_trim_r+0x9c>)
 800358e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8003630 <_malloc_trim_r+0xa8>
 8003592:	4689      	mov	r9, r1
 8003594:	4606      	mov	r6, r0
 8003596:	f7ff ffcd 	bl	8003534 <__malloc_lock>
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	685d      	ldr	r5, [r3, #4]
 800359e:	f1a8 0411 	sub.w	r4, r8, #17
 80035a2:	f025 0503 	bic.w	r5, r5, #3
 80035a6:	eba4 0409 	sub.w	r4, r4, r9
 80035aa:	442c      	add	r4, r5
 80035ac:	fbb4 f4f8 	udiv	r4, r4, r8
 80035b0:	3c01      	subs	r4, #1
 80035b2:	fb08 f404 	mul.w	r4, r8, r4
 80035b6:	4544      	cmp	r4, r8
 80035b8:	da05      	bge.n	80035c6 <_malloc_trim_r+0x3e>
 80035ba:	4630      	mov	r0, r6
 80035bc:	f7ff ffc0 	bl	8003540 <__malloc_unlock>
 80035c0:	2000      	movs	r0, #0
 80035c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80035c6:	2100      	movs	r1, #0
 80035c8:	4630      	mov	r0, r6
 80035ca:	f7ff ffbf 	bl	800354c <_sbrk_r>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	442b      	add	r3, r5
 80035d2:	4298      	cmp	r0, r3
 80035d4:	d1f1      	bne.n	80035ba <_malloc_trim_r+0x32>
 80035d6:	4261      	negs	r1, r4
 80035d8:	4630      	mov	r0, r6
 80035da:	f7ff ffb7 	bl	800354c <_sbrk_r>
 80035de:	3001      	adds	r0, #1
 80035e0:	d110      	bne.n	8003604 <_malloc_trim_r+0x7c>
 80035e2:	2100      	movs	r1, #0
 80035e4:	4630      	mov	r0, r6
 80035e6:	f7ff ffb1 	bl	800354c <_sbrk_r>
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	1a83      	subs	r3, r0, r2
 80035ee:	2b0f      	cmp	r3, #15
 80035f0:	dde3      	ble.n	80035ba <_malloc_trim_r+0x32>
 80035f2:	490d      	ldr	r1, [pc, #52]	; (8003628 <_malloc_trim_r+0xa0>)
 80035f4:	6809      	ldr	r1, [r1, #0]
 80035f6:	1a40      	subs	r0, r0, r1
 80035f8:	490c      	ldr	r1, [pc, #48]	; (800362c <_malloc_trim_r+0xa4>)
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	6008      	str	r0, [r1, #0]
 8003600:	6053      	str	r3, [r2, #4]
 8003602:	e7da      	b.n	80035ba <_malloc_trim_r+0x32>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	4a09      	ldr	r2, [pc, #36]	; (800362c <_malloc_trim_r+0xa4>)
 8003608:	1b2d      	subs	r5, r5, r4
 800360a:	f045 0501 	orr.w	r5, r5, #1
 800360e:	605d      	str	r5, [r3, #4]
 8003610:	6813      	ldr	r3, [r2, #0]
 8003612:	4630      	mov	r0, r6
 8003614:	1b1c      	subs	r4, r3, r4
 8003616:	6014      	str	r4, [r2, #0]
 8003618:	f7ff ff92 	bl	8003540 <__malloc_unlock>
 800361c:	2001      	movs	r0, #1
 800361e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003622:	bf00      	nop
 8003624:	20000270 	.word	0x20000270
 8003628:	20000678 	.word	0x20000678
 800362c:	200006a0 	.word	0x200006a0
 8003630:	00000080 	.word	0x00000080

08003634 <_free_r>:
 8003634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003638:	4604      	mov	r4, r0
 800363a:	4688      	mov	r8, r1
 800363c:	2900      	cmp	r1, #0
 800363e:	f000 80ab 	beq.w	8003798 <_free_r+0x164>
 8003642:	f7ff ff77 	bl	8003534 <__malloc_lock>
 8003646:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800364a:	4d54      	ldr	r5, [pc, #336]	; (800379c <_free_r+0x168>)
 800364c:	f022 0001 	bic.w	r0, r2, #1
 8003650:	f1a8 0308 	sub.w	r3, r8, #8
 8003654:	181f      	adds	r7, r3, r0
 8003656:	68a9      	ldr	r1, [r5, #8]
 8003658:	687e      	ldr	r6, [r7, #4]
 800365a:	428f      	cmp	r7, r1
 800365c:	f026 0603 	bic.w	r6, r6, #3
 8003660:	f002 0201 	and.w	r2, r2, #1
 8003664:	d11b      	bne.n	800369e <_free_r+0x6a>
 8003666:	4430      	add	r0, r6
 8003668:	b93a      	cbnz	r2, 800367a <_free_r+0x46>
 800366a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	4410      	add	r0, r2
 8003672:	6899      	ldr	r1, [r3, #8]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	60ca      	str	r2, [r1, #12]
 8003678:	6091      	str	r1, [r2, #8]
 800367a:	f040 0201 	orr.w	r2, r0, #1
 800367e:	605a      	str	r2, [r3, #4]
 8003680:	60ab      	str	r3, [r5, #8]
 8003682:	4b47      	ldr	r3, [pc, #284]	; (80037a0 <_free_r+0x16c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4298      	cmp	r0, r3
 8003688:	d304      	bcc.n	8003694 <_free_r+0x60>
 800368a:	4b46      	ldr	r3, [pc, #280]	; (80037a4 <_free_r+0x170>)
 800368c:	4620      	mov	r0, r4
 800368e:	6819      	ldr	r1, [r3, #0]
 8003690:	f7ff ff7a 	bl	8003588 <_malloc_trim_r>
 8003694:	4620      	mov	r0, r4
 8003696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800369a:	f7ff bf51 	b.w	8003540 <__malloc_unlock>
 800369e:	607e      	str	r6, [r7, #4]
 80036a0:	2a00      	cmp	r2, #0
 80036a2:	d139      	bne.n	8003718 <_free_r+0xe4>
 80036a4:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80036a8:	1a5b      	subs	r3, r3, r1
 80036aa:	4408      	add	r0, r1
 80036ac:	6899      	ldr	r1, [r3, #8]
 80036ae:	f105 0e08 	add.w	lr, r5, #8
 80036b2:	4571      	cmp	r1, lr
 80036b4:	d032      	beq.n	800371c <_free_r+0xe8>
 80036b6:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80036ba:	f8c1 e00c 	str.w	lr, [r1, #12]
 80036be:	f8ce 1008 	str.w	r1, [lr, #8]
 80036c2:	19b9      	adds	r1, r7, r6
 80036c4:	6849      	ldr	r1, [r1, #4]
 80036c6:	07c9      	lsls	r1, r1, #31
 80036c8:	d40a      	bmi.n	80036e0 <_free_r+0xac>
 80036ca:	4430      	add	r0, r6
 80036cc:	68b9      	ldr	r1, [r7, #8]
 80036ce:	bb3a      	cbnz	r2, 8003720 <_free_r+0xec>
 80036d0:	4e35      	ldr	r6, [pc, #212]	; (80037a8 <_free_r+0x174>)
 80036d2:	42b1      	cmp	r1, r6
 80036d4:	d124      	bne.n	8003720 <_free_r+0xec>
 80036d6:	616b      	str	r3, [r5, #20]
 80036d8:	612b      	str	r3, [r5, #16]
 80036da:	2201      	movs	r2, #1
 80036dc:	60d9      	str	r1, [r3, #12]
 80036de:	6099      	str	r1, [r3, #8]
 80036e0:	f040 0101 	orr.w	r1, r0, #1
 80036e4:	6059      	str	r1, [r3, #4]
 80036e6:	5018      	str	r0, [r3, r0]
 80036e8:	2a00      	cmp	r2, #0
 80036ea:	d1d3      	bne.n	8003694 <_free_r+0x60>
 80036ec:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80036f0:	d21a      	bcs.n	8003728 <_free_r+0xf4>
 80036f2:	08c0      	lsrs	r0, r0, #3
 80036f4:	1081      	asrs	r1, r0, #2
 80036f6:	2201      	movs	r2, #1
 80036f8:	408a      	lsls	r2, r1
 80036fa:	6869      	ldr	r1, [r5, #4]
 80036fc:	3001      	adds	r0, #1
 80036fe:	430a      	orrs	r2, r1
 8003700:	606a      	str	r2, [r5, #4]
 8003702:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8003706:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800370a:	6099      	str	r1, [r3, #8]
 800370c:	3a08      	subs	r2, #8
 800370e:	60da      	str	r2, [r3, #12]
 8003710:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8003714:	60cb      	str	r3, [r1, #12]
 8003716:	e7bd      	b.n	8003694 <_free_r+0x60>
 8003718:	2200      	movs	r2, #0
 800371a:	e7d2      	b.n	80036c2 <_free_r+0x8e>
 800371c:	2201      	movs	r2, #1
 800371e:	e7d0      	b.n	80036c2 <_free_r+0x8e>
 8003720:	68fe      	ldr	r6, [r7, #12]
 8003722:	60ce      	str	r6, [r1, #12]
 8003724:	60b1      	str	r1, [r6, #8]
 8003726:	e7db      	b.n	80036e0 <_free_r+0xac>
 8003728:	0a42      	lsrs	r2, r0, #9
 800372a:	2a04      	cmp	r2, #4
 800372c:	d813      	bhi.n	8003756 <_free_r+0x122>
 800372e:	0982      	lsrs	r2, r0, #6
 8003730:	3238      	adds	r2, #56	; 0x38
 8003732:	1c51      	adds	r1, r2, #1
 8003734:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8003738:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800373c:	428e      	cmp	r6, r1
 800373e:	d124      	bne.n	800378a <_free_r+0x156>
 8003740:	2001      	movs	r0, #1
 8003742:	1092      	asrs	r2, r2, #2
 8003744:	fa00 f202 	lsl.w	r2, r0, r2
 8003748:	6868      	ldr	r0, [r5, #4]
 800374a:	4302      	orrs	r2, r0
 800374c:	606a      	str	r2, [r5, #4]
 800374e:	60de      	str	r6, [r3, #12]
 8003750:	6099      	str	r1, [r3, #8]
 8003752:	60b3      	str	r3, [r6, #8]
 8003754:	e7de      	b.n	8003714 <_free_r+0xe0>
 8003756:	2a14      	cmp	r2, #20
 8003758:	d801      	bhi.n	800375e <_free_r+0x12a>
 800375a:	325b      	adds	r2, #91	; 0x5b
 800375c:	e7e9      	b.n	8003732 <_free_r+0xfe>
 800375e:	2a54      	cmp	r2, #84	; 0x54
 8003760:	d802      	bhi.n	8003768 <_free_r+0x134>
 8003762:	0b02      	lsrs	r2, r0, #12
 8003764:	326e      	adds	r2, #110	; 0x6e
 8003766:	e7e4      	b.n	8003732 <_free_r+0xfe>
 8003768:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800376c:	d802      	bhi.n	8003774 <_free_r+0x140>
 800376e:	0bc2      	lsrs	r2, r0, #15
 8003770:	3277      	adds	r2, #119	; 0x77
 8003772:	e7de      	b.n	8003732 <_free_r+0xfe>
 8003774:	f240 5154 	movw	r1, #1364	; 0x554
 8003778:	428a      	cmp	r2, r1
 800377a:	bf9a      	itte	ls
 800377c:	0c82      	lsrls	r2, r0, #18
 800377e:	327c      	addls	r2, #124	; 0x7c
 8003780:	227e      	movhi	r2, #126	; 0x7e
 8003782:	e7d6      	b.n	8003732 <_free_r+0xfe>
 8003784:	6889      	ldr	r1, [r1, #8]
 8003786:	428e      	cmp	r6, r1
 8003788:	d004      	beq.n	8003794 <_free_r+0x160>
 800378a:	684a      	ldr	r2, [r1, #4]
 800378c:	f022 0203 	bic.w	r2, r2, #3
 8003790:	4290      	cmp	r0, r2
 8003792:	d3f7      	bcc.n	8003784 <_free_r+0x150>
 8003794:	68ce      	ldr	r6, [r1, #12]
 8003796:	e7da      	b.n	800374e <_free_r+0x11a>
 8003798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800379c:	20000270 	.word	0x20000270
 80037a0:	2000067c 	.word	0x2000067c
 80037a4:	200006d0 	.word	0x200006d0
 80037a8:	20000278 	.word	0x20000278

080037ac <__retarget_lock_acquire_recursive>:
 80037ac:	4770      	bx	lr

080037ae <__retarget_lock_release_recursive>:
 80037ae:	4770      	bx	lr

080037b0 <_sbrk>:
 80037b0:	4b04      	ldr	r3, [pc, #16]	; (80037c4 <_sbrk+0x14>)
 80037b2:	6819      	ldr	r1, [r3, #0]
 80037b4:	4602      	mov	r2, r0
 80037b6:	b909      	cbnz	r1, 80037bc <_sbrk+0xc>
 80037b8:	4903      	ldr	r1, [pc, #12]	; (80037c8 <_sbrk+0x18>)
 80037ba:	6019      	str	r1, [r3, #0]
 80037bc:	6818      	ldr	r0, [r3, #0]
 80037be:	4402      	add	r2, r0
 80037c0:	601a      	str	r2, [r3, #0]
 80037c2:	4770      	bx	lr
 80037c4:	200006d4 	.word	0x200006d4
 80037c8:	200135cc 	.word	0x200135cc

080037cc <_init>:
 80037cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ce:	bf00      	nop
 80037d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037d2:	bc08      	pop	{r3}
 80037d4:	469e      	mov	lr, r3
 80037d6:	4770      	bx	lr

080037d8 <_fini>:
 80037d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037da:	bf00      	nop
 80037dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037de:	bc08      	pop	{r3}
 80037e0:	469e      	mov	lr, r3
 80037e2:	4770      	bx	lr
