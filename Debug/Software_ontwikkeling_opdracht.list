
Software_ontwikkeling_opdracht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a60  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b24  08005be8  08005be8  00015be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800870c  0800870c  0001870c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08008710  08008710  00018710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000680  20000000  08008714  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020680  2**0
                  CONTENTS
  7 .bss          00013294  20000680  20000680  00020680  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20013914  20013914  00020680  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020680  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000fd15  00000000  00000000  000206b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000025d9  00000000  00000000  000303c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009f8  00000000  00000000  000329a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000008a0  00000000  00000000  00033398  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005a43  00000000  00000000  00033c38  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003213  00000000  00000000  0003967b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003c88e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002dd0  00000000  00000000  0003c90c  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0003f6dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000680 	.word	0x20000680
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005bd0 	.word	0x08005bd0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000684 	.word	0x20000684
 80001c4:	08005bd0 	.word	0x08005bd0

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032a:	f1a4 0401 	sub.w	r4, r4, #1
 800032e:	d1e9      	bne.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f092 0f00 	teq	r2, #0
 80004d6:	bf14      	ite	ne
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	e720      	b.n	8000330 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_ul2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f04f 0500 	mov.w	r5, #0
 80004fe:	e00a      	b.n	8000516 <__aeabi_l2d+0x16>

08000500 <__aeabi_l2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050e:	d502      	bpl.n	8000516 <__aeabi_l2d+0x16>
 8000510:	4240      	negs	r0, r0
 8000512:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000516:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000522:	f43f aedc 	beq.w	80002de <__adddf3+0xe6>
 8000526:	f04f 0203 	mov.w	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053e:	f1c2 0320 	rsb	r3, r2, #32
 8000542:	fa00 fc03 	lsl.w	ip, r0, r3
 8000546:	fa20 f002 	lsr.w	r0, r0, r2
 800054a:	fa01 fe03 	lsl.w	lr, r1, r3
 800054e:	ea40 000e 	orr.w	r0, r0, lr
 8000552:	fa21 f102 	lsr.w	r1, r1, r2
 8000556:	4414      	add	r4, r2
 8000558:	e6c1      	b.n	80002de <__adddf3+0xe6>
 800055a:	bf00      	nop

0800055c <__aeabi_dmul>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000562:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000566:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056a:	bf1d      	ittte	ne
 800056c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000570:	ea94 0f0c 	teqne	r4, ip
 8000574:	ea95 0f0c 	teqne	r5, ip
 8000578:	f000 f8de 	bleq	8000738 <__aeabi_dmul+0x1dc>
 800057c:	442c      	add	r4, r5
 800057e:	ea81 0603 	eor.w	r6, r1, r3
 8000582:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000586:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058e:	bf18      	it	ne
 8000590:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800059c:	d038      	beq.n	8000610 <__aeabi_dmul+0xb4>
 800059e:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a2:	f04f 0500 	mov.w	r5, #0
 80005a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b2:	f04f 0600 	mov.w	r6, #0
 80005b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ba:	f09c 0f00 	teq	ip, #0
 80005be:	bf18      	it	ne
 80005c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d0:	d204      	bcs.n	80005dc <__aeabi_dmul+0x80>
 80005d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d6:	416d      	adcs	r5, r5
 80005d8:	eb46 0606 	adc.w	r6, r6, r6
 80005dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f4:	bf88      	it	hi
 80005f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fa:	d81e      	bhi.n	800063a <__aeabi_dmul+0xde>
 80005fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000614:	ea46 0101 	orr.w	r1, r6, r1
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	ea81 0103 	eor.w	r1, r1, r3
 8000620:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000624:	bfc2      	ittt	gt
 8000626:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062e:	bd70      	popgt	{r4, r5, r6, pc}
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f04f 0e00 	mov.w	lr, #0
 8000638:	3c01      	subs	r4, #1
 800063a:	f300 80ab 	bgt.w	8000794 <__aeabi_dmul+0x238>
 800063e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000642:	bfde      	ittt	le
 8000644:	2000      	movle	r0, #0
 8000646:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064a:	bd70      	pople	{r4, r5, r6, pc}
 800064c:	f1c4 0400 	rsb	r4, r4, #0
 8000650:	3c20      	subs	r4, #32
 8000652:	da35      	bge.n	80006c0 <__aeabi_dmul+0x164>
 8000654:	340c      	adds	r4, #12
 8000656:	dc1b      	bgt.n	8000690 <__aeabi_dmul+0x134>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f305 	lsl.w	r3, r0, r5
 8000664:	fa20 f004 	lsr.w	r0, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800067c:	fa21 f604 	lsr.w	r6, r1, r4
 8000680:	eb42 0106 	adc.w	r1, r2, r6
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f1c4 040c 	rsb	r4, r4, #12
 8000694:	f1c4 0520 	rsb	r5, r4, #32
 8000698:	fa00 f304 	lsl.w	r3, r0, r4
 800069c:	fa20 f005 	lsr.w	r0, r0, r5
 80006a0:	fa01 f204 	lsl.w	r2, r1, r4
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	f141 0100 	adc.w	r1, r1, #0
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f205 	lsl.w	r2, r0, r5
 80006c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006cc:	fa20 f304 	lsr.w	r3, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea43 0302 	orr.w	r3, r3, r2
 80006d8:	fa21 f004 	lsr.w	r0, r1, r4
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	fa21 f204 	lsr.w	r2, r1, r4
 80006e4:	ea20 0002 	bic.w	r0, r0, r2
 80006e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f094 0f00 	teq	r4, #0
 80006fc:	d10f      	bne.n	800071e <__aeabi_dmul+0x1c2>
 80006fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000702:	0040      	lsls	r0, r0, #1
 8000704:	eb41 0101 	adc.w	r1, r1, r1
 8000708:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800070c:	bf08      	it	eq
 800070e:	3c01      	subeq	r4, #1
 8000710:	d0f7      	beq.n	8000702 <__aeabi_dmul+0x1a6>
 8000712:	ea41 0106 	orr.w	r1, r1, r6
 8000716:	f095 0f00 	teq	r5, #0
 800071a:	bf18      	it	ne
 800071c:	4770      	bxne	lr
 800071e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	eb43 0303 	adc.w	r3, r3, r3
 8000728:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3d01      	subeq	r5, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1c6>
 8000732:	ea43 0306 	orr.w	r3, r3, r6
 8000736:	4770      	bx	lr
 8000738:	ea94 0f0c 	teq	r4, ip
 800073c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000740:	bf18      	it	ne
 8000742:	ea95 0f0c 	teqne	r5, ip
 8000746:	d00c      	beq.n	8000762 <__aeabi_dmul+0x206>
 8000748:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074c:	bf18      	it	ne
 800074e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000752:	d1d1      	bne.n	80006f8 <__aeabi_dmul+0x19c>
 8000754:	ea81 0103 	eor.w	r1, r1, r3
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000766:	bf06      	itte	eq
 8000768:	4610      	moveq	r0, r2
 800076a:	4619      	moveq	r1, r3
 800076c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000770:	d019      	beq.n	80007a6 <__aeabi_dmul+0x24a>
 8000772:	ea94 0f0c 	teq	r4, ip
 8000776:	d102      	bne.n	800077e <__aeabi_dmul+0x222>
 8000778:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800077c:	d113      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 800077e:	ea95 0f0c 	teq	r5, ip
 8000782:	d105      	bne.n	8000790 <__aeabi_dmul+0x234>
 8000784:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000788:	bf1c      	itt	ne
 800078a:	4610      	movne	r0, r2
 800078c:	4619      	movne	r1, r3
 800078e:	d10a      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ae:	bd70      	pop	{r4, r5, r6, pc}

080007b0 <__aeabi_ddiv>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007be:	bf1d      	ittte	ne
 80007c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c4:	ea94 0f0c 	teqne	r4, ip
 80007c8:	ea95 0f0c 	teqne	r5, ip
 80007cc:	f000 f8a7 	bleq	800091e <__aeabi_ddiv+0x16e>
 80007d0:	eba4 0405 	sub.w	r4, r4, r5
 80007d4:	ea81 0e03 	eor.w	lr, r1, r3
 80007d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e0:	f000 8088 	beq.w	80008f4 <__aeabi_ddiv+0x144>
 80007e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000800:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000804:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000808:	429d      	cmp	r5, r3
 800080a:	bf08      	it	eq
 800080c:	4296      	cmpeq	r6, r2
 800080e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000812:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000816:	d202      	bcs.n	800081e <__aeabi_ddiv+0x6e>
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	1ab6      	subs	r6, r6, r2
 8000820:	eb65 0503 	sbc.w	r5, r5, r3
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 000c 	orrcs.w	r0, r0, ip
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800088c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000890:	d018      	beq.n	80008c4 <__aeabi_ddiv+0x114>
 8000892:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000896:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ae:	d1c0      	bne.n	8000832 <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	d10b      	bne.n	80008ce <__aeabi_ddiv+0x11e>
 80008b6:	ea41 0100 	orr.w	r1, r1, r0
 80008ba:	f04f 0000 	mov.w	r0, #0
 80008be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c2:	e7b6      	b.n	8000832 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf04      	itt	eq
 80008ca:	4301      	orreq	r1, r0
 80008cc:	2000      	moveq	r0, #0
 80008ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d2:	bf88      	it	hi
 80008d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d8:	f63f aeaf 	bhi.w	800063a <__aeabi_dmul+0xde>
 80008dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e0:	bf04      	itt	eq
 80008e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ea:	f150 0000 	adcs.w	r0, r0, #0
 80008ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000900:	bfc2      	ittt	gt
 8000902:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000906:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090a:	bd70      	popgt	{r4, r5, r6, pc}
 800090c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000910:	f04f 0e00 	mov.w	lr, #0
 8000914:	3c01      	subs	r4, #1
 8000916:	e690      	b.n	800063a <__aeabi_dmul+0xde>
 8000918:	ea45 0e06 	orr.w	lr, r5, r6
 800091c:	e68d      	b.n	800063a <__aeabi_dmul+0xde>
 800091e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000922:	ea94 0f0c 	teq	r4, ip
 8000926:	bf08      	it	eq
 8000928:	ea95 0f0c 	teqeq	r5, ip
 800092c:	f43f af3b 	beq.w	80007a6 <__aeabi_dmul+0x24a>
 8000930:	ea94 0f0c 	teq	r4, ip
 8000934:	d10a      	bne.n	800094c <__aeabi_ddiv+0x19c>
 8000936:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093a:	f47f af34 	bne.w	80007a6 <__aeabi_dmul+0x24a>
 800093e:	ea95 0f0c 	teq	r5, ip
 8000942:	f47f af25 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e72c      	b.n	80007a6 <__aeabi_dmul+0x24a>
 800094c:	ea95 0f0c 	teq	r5, ip
 8000950:	d106      	bne.n	8000960 <__aeabi_ddiv+0x1b0>
 8000952:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000956:	f43f aefd 	beq.w	8000754 <__aeabi_dmul+0x1f8>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e722      	b.n	80007a6 <__aeabi_dmul+0x24a>
 8000960:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096a:	f47f aec5 	bne.w	80006f8 <__aeabi_dmul+0x19c>
 800096e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000972:	f47f af0d 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000976:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097a:	f47f aeeb 	bne.w	8000754 <__aeabi_dmul+0x1f8>
 800097e:	e712      	b.n	80007a6 <__aeabi_dmul+0x24a>

08000980 <__aeabi_d2uiz>:
 8000980:	004a      	lsls	r2, r1, #1
 8000982:	d211      	bcs.n	80009a8 <__aeabi_d2uiz+0x28>
 8000984:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000988:	d211      	bcs.n	80009ae <__aeabi_d2uiz+0x2e>
 800098a:	d50d      	bpl.n	80009a8 <__aeabi_d2uiz+0x28>
 800098c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000990:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000994:	d40e      	bmi.n	80009b4 <__aeabi_d2uiz+0x34>
 8000996:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009a2:	fa23 f002 	lsr.w	r0, r3, r2
 80009a6:	4770      	bx	lr
 80009a8:	f04f 0000 	mov.w	r0, #0
 80009ac:	4770      	bx	lr
 80009ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b2:	d102      	bne.n	80009ba <__aeabi_d2uiz+0x3a>
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295
 80009b8:	4770      	bx	lr
 80009ba:	f04f 0000 	mov.w	r0, #0
 80009be:	4770      	bx	lr

080009c0 <draw_bitmap>:
#include <stdio.h>
#include <stdlib.h>


//Bitmap function
void draw_bitmap (int x, int y) {
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	f5ad 5dc8 	sub.w	sp, sp, #6400	; 0x1900
 80009c6:	b087      	sub	sp, #28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	f107 0318 	add.w	r3, r7, #24
 80009ce:	3b14      	subs	r3, #20
 80009d0:	6018      	str	r0, [r3, #0]
 80009d2:	f107 0318 	add.w	r3, r7, #24
 80009d6:	3b18      	subs	r3, #24
 80009d8:	6019      	str	r1, [r3, #0]

//const int size = 50;

int bitmap [40][40] = {
 80009da:	f107 0318 	add.w	r3, r7, #24
 80009de:	3b10      	subs	r3, #16
 80009e0:	4a41      	ldr	r2, [pc, #260]	; (8000ae8 <draw_bitmap+0x128>)
 80009e2:	4618      	mov	r0, r3
 80009e4:	4611      	mov	r1, r2
 80009e6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80009ea:	461a      	mov	r2, r3
 80009ec:	f004 fc70 	bl	80052d0 <memcpy>
		,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
		,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff
		,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff

};
	for (int i=0; i<40; i++) {
 80009f0:	2300      	movs	r3, #0
 80009f2:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 80009f6:	f102 0214 	add.w	r2, r2, #20
 80009fa:	6013      	str	r3, [r2, #0]
 80009fc:	e066      	b.n	8000acc <draw_bitmap+0x10c>
		for (int j=0; j<40; j++) {
 80009fe:	2300      	movs	r3, #0
 8000a00:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 8000a04:	f102 0210 	add.w	r2, r2, #16
 8000a08:	6013      	str	r3, [r2, #0]
 8000a0a:	e04d      	b.n	8000aa8 <draw_bitmap+0xe8>

			int x_pos = j + x;
 8000a0c:	f107 0318 	add.w	r3, r7, #24
 8000a10:	3b14      	subs	r3, #20
 8000a12:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 8000a16:	f102 0210 	add.w	r2, r2, #16
 8000a1a:	6812      	ldr	r2, [r2, #0]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 8000a24:	f102 020c 	add.w	r2, r2, #12
 8000a28:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8000a2a:	f107 0318 	add.w	r3, r7, #24
 8000a2e:	3b18      	subs	r3, #24
 8000a30:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 8000a34:	f102 0214 	add.w	r2, r2, #20
 8000a38:	6812      	ldr	r2, [r2, #0]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 8000a42:	f102 0208 	add.w	r2, r2, #8
 8000a46:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, bitmap[i][j]);
 8000a48:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000a4c:	f103 030c 	add.w	r3, r3, #12
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	b298      	uxth	r0, r3
 8000a54:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000a58:	f103 0308 	add.w	r3, r3, #8
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	b29c      	uxth	r4, r3
 8000a60:	f107 0218 	add.w	r2, r7, #24
 8000a64:	3a10      	subs	r2, #16
 8000a66:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000a6a:	f103 0314 	add.w	r3, r3, #20
 8000a6e:	6819      	ldr	r1, [r3, #0]
 8000a70:	460b      	mov	r3, r1
 8000a72:	009b      	lsls	r3, r3, #2
 8000a74:	440b      	add	r3, r1
 8000a76:	00db      	lsls	r3, r3, #3
 8000a78:	f507 51c8 	add.w	r1, r7, #6400	; 0x1900
 8000a7c:	f101 0110 	add.w	r1, r1, #16
 8000a80:	6809      	ldr	r1, [r1, #0]
 8000a82:	440b      	add	r3, r1
 8000a84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4621      	mov	r1, r4
 8000a8e:	f003 f9df 	bl	8003e50 <UB_VGA_SetPixel>
		for (int j=0; j<40; j++) {
 8000a92:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000a96:	f103 0310 	add.w	r3, r3, #16
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 8000aa2:	f102 0210 	add.w	r2, r2, #16
 8000aa6:	6013      	str	r3, [r2, #0]
 8000aa8:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000aac:	f103 0310 	add.w	r3, r3, #16
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b27      	cmp	r3, #39	; 0x27
 8000ab4:	ddaa      	ble.n	8000a0c <draw_bitmap+0x4c>
	for (int i=0; i<40; i++) {
 8000ab6:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000aba:	f103 0314 	add.w	r3, r3, #20
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	f507 52c8 	add.w	r2, r7, #6400	; 0x1900
 8000ac6:	f102 0214 	add.w	r2, r2, #20
 8000aca:	6013      	str	r3, [r2, #0]
 8000acc:	f507 53c8 	add.w	r3, r7, #6400	; 0x1900
 8000ad0:	f103 0314 	add.w	r3, r3, #20
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	2b27      	cmp	r3, #39	; 0x27
 8000ad8:	dd91      	ble.n	80009fe <draw_bitmap+0x3e>
		}
	}
}
 8000ada:	bf00      	nop
 8000adc:	f507 57c8 	add.w	r7, r7, #6400	; 0x1900
 8000ae0:	371c      	adds	r7, #28
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd90      	pop	{r4, r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	08005be8 	.word	0x08005be8

08000aec <clr_screen>:
 */

#include "clr_screen.h"

void clr_screen(uint8_t color)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
	UB_VGA_FillScreen(color);
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	4618      	mov	r0, r3
 8000afa:	f003 f987 	bl	8003e0c <UB_VGA_FillScreen>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <draw_ellips>:

#include "stm32_ub_vga_screen.h"


void draw_ellips (int x_center,int y_center, int x_rad, int y_rad, int color)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b086      	sub	sp, #24
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	60f8      	str	r0, [r7, #12]
 8000b0e:	60b9      	str	r1, [r7, #8]
 8000b10:	607a      	str	r2, [r7, #4]
 8000b12:	603b      	str	r3, [r7, #0]
	for(int y=-y_rad; y<=y_rad; y++) {
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	425b      	negs	r3, r3
 8000b18:	617b      	str	r3, [r7, #20]
 8000b1a:	e03f      	b.n	8000b9c <draw_ellips+0x96>
	    for(int x=-x_rad; x<=x_rad; x++) {
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	425b      	negs	r3, r3
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	e034      	b.n	8000b8e <draw_ellips+0x88>
	        if(x*x*y_rad*y_rad+y*y*x_rad*x_rad <= y_rad*y_rad*x_rad*x_rad)
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	fb02 f303 	mul.w	r3, r2, r3
 8000b2c:	683a      	ldr	r2, [r7, #0]
 8000b2e:	fb02 f303 	mul.w	r3, r2, r3
 8000b32:	683a      	ldr	r2, [r7, #0]
 8000b34:	fb02 f203 	mul.w	r2, r2, r3
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	6979      	ldr	r1, [r7, #20]
 8000b3c:	fb01 f303 	mul.w	r3, r1, r3
 8000b40:	6879      	ldr	r1, [r7, #4]
 8000b42:	fb01 f303 	mul.w	r3, r1, r3
 8000b46:	6879      	ldr	r1, [r7, #4]
 8000b48:	fb01 f303 	mul.w	r3, r1, r3
 8000b4c:	441a      	add	r2, r3
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	6839      	ldr	r1, [r7, #0]
 8000b52:	fb01 f303 	mul.w	r3, r1, r3
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	fb01 f303 	mul.w	r3, r1, r3
 8000b5c:	6879      	ldr	r1, [r7, #4]
 8000b5e:	fb01 f303 	mul.w	r3, r1, r3
 8000b62:	429a      	cmp	r2, r3
 8000b64:	dc10      	bgt.n	8000b88 <draw_ellips+0x82>
	        	UB_VGA_SetPixel(x_center+x,y_center+y,color);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	4413      	add	r3, r2
 8000b70:	b298      	uxth	r0, r3
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	b29a      	uxth	r2, r3
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	4413      	add	r3, r2
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	6a3a      	ldr	r2, [r7, #32]
 8000b80:	b2d2      	uxtb	r2, r2
 8000b82:	4619      	mov	r1, r3
 8000b84:	f003 f964 	bl	8003e50 <UB_VGA_SetPixel>
	    for(int x=-x_rad; x<=x_rad; x++) {
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	ddc6      	ble.n	8000b24 <draw_ellips+0x1e>
	for(int y=-y_rad; y<=y_rad; y++) {
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	697a      	ldr	r2, [r7, #20]
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	ddbb      	ble.n	8000b1c <draw_ellips+0x16>
	    }
	}
}
 8000ba4:	bf00      	nop
 8000ba6:	3718      	adds	r7, #24
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <draw_line>:

#include <stdio.h>
#include <stdlib.h>

void draw_line(int x1, int y1, int x2, int y2, int tn, int color)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b094      	sub	sp, #80	; 0x50
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
 8000bb8:	603b      	str	r3, [r7, #0]

	int i,dx,dy,sdx,sdy,dxabs,dyabs,x,y,px,py;
	uint8_t stn,tn_draw;

	dx=x2-x1;      /* the horizontal distance of the line */
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	1ad3      	subs	r3, r2, r3
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
	dy=y2-y1;      /* the vertical distance of the line */
 8000bc2:	683a      	ldr	r2, [r7, #0]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	1ad3      	subs	r3, r2, r3
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
	dxabs=abs(dx);
 8000bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	bfb8      	it	lt
 8000bd0:	425b      	neglt	r3, r3
 8000bd2:	623b      	str	r3, [r7, #32]
	dyabs=abs(dy);
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	bfb8      	it	lt
 8000bda:	425b      	neglt	r3, r3
 8000bdc:	61fb      	str	r3, [r7, #28]
	sdx=sgn(dx);
 8000bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db06      	blt.n	8000bf2 <draw_line+0x46>
 8000be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	bfcc      	ite	gt
 8000bea:	2301      	movgt	r3, #1
 8000bec:	2300      	movle	r3, #0
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	e001      	b.n	8000bf6 <draw_line+0x4a>
 8000bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf6:	61bb      	str	r3, [r7, #24]
	sdy=sgn(dy);
 8000bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	db06      	blt.n	8000c0c <draw_line+0x60>
 8000bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	bfcc      	ite	gt
 8000c04:	2301      	movgt	r3, #1
 8000c06:	2300      	movle	r3, #0
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	e001      	b.n	8000c10 <draw_line+0x64>
 8000c0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c10:	617b      	str	r3, [r7, #20]
	x=dyabs>>1;
 8000c12:	69fb      	ldr	r3, [r7, #28]
 8000c14:	105b      	asrs	r3, r3, #1
 8000c16:	64bb      	str	r3, [r7, #72]	; 0x48
	y=dxabs>>1;
 8000c18:	6a3b      	ldr	r3, [r7, #32]
 8000c1a:	105b      	asrs	r3, r3, #1
 8000c1c:	647b      	str	r3, [r7, #68]	; 0x44
	px=x1;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	643b      	str	r3, [r7, #64]	; 0x40
	py=y1;
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	63fb      	str	r3, [r7, #60]	; 0x3c

	stn = ((tn%2)==0)? 1:0;  /* even of oneven lijndikte */
 8000c26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c28:	f003 0301 	and.w	r3, r3, #1
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	bf0c      	ite	eq
 8000c30:	2301      	moveq	r3, #1
 8000c32:	2300      	movne	r3, #0
 8000c34:	b2db      	uxtb	r3, r3
 8000c36:	74fb      	strb	r3, [r7, #19]
	tn_draw = tn>>1;
 8000c38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000c3a:	105b      	asrs	r3, r3, #1
 8000c3c:	74bb      	strb	r3, [r7, #18]

	if (dxabs>=dyabs) 	/* the line is more horizontal than vertical */
 8000c3e:	6a3a      	ldr	r2, [r7, #32]
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	f2c0 80c5 	blt.w	8000dd2 <draw_line+0x226>
	{
		if(stn==1) /* even line thickness */
 8000c48:	7cfb      	ldrb	r3, [r7, #19]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d15e      	bne.n	8000d0c <draw_line+0x160>
		{
			px=x1;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	643b      	str	r3, [r7, #64]	; 0x40
			py=y1;
 8000c52:	68bb      	ldr	r3, [r7, #8]
 8000c54:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000c56:	2300      	movs	r3, #0
 8000c58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c5a:	e052      	b.n	8000d02 <draw_line+0x156>
			{
				y+=dyabs;										/* adding dyabs for drawing vertical pixel */
 8000c5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	4413      	add	r3, r2
 8000c62:	647b      	str	r3, [r7, #68]	; 0x44
				if (y>=dxabs)									/* y is higher than the dxabs of line, so py counting -1/0/1 */
 8000c64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c66:	6a3b      	ldr	r3, [r7, #32]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	db07      	blt.n	8000c7c <draw_line+0xd0>
				{
					y-=dxabs;									/* substracting dxabs of y so counting is reset */
 8000c6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c6e:	6a3b      	ldr	r3, [r7, #32]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	647b      	str	r3, [r7, #68]	; 0x44
					py+=sdy;
 8000c74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	4413      	add	r3, r2
 8000c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				for(int k=-tn_draw;k<tn_draw;k++)
 8000c7c:	7cbb      	ldrb	r3, [r7, #18]
 8000c7e:	425b      	negs	r3, r3
 8000c80:	63bb      	str	r3, [r7, #56]	; 0x38
 8000c82:	e033      	b.n	8000cec <draw_line+0x140>
				{
					if(px>=0 && px <= 320 && py>=0 && py <= 240)	/* pixels inside range VGA screen will be drawn */
 8000c84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db2d      	blt.n	8000ce6 <draw_line+0x13a>
 8000c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c8c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000c90:	dc29      	bgt.n	8000ce6 <draw_line+0x13a>
 8000c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	db26      	blt.n	8000ce6 <draw_line+0x13a>
 8000c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c9a:	2bf0      	cmp	r3, #240	; 0xf0
 8000c9c:	dc23      	bgt.n	8000ce6 <draw_line+0x13a>
					{
						UB_VGA_SetPixel(px+k,py-k,color);
 8000c9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ca0:	b29a      	uxth	r2, r3
 8000ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	4413      	add	r3, r2
 8000ca8:	b298      	uxth	r0, r3
 8000caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	1ad3      	subs	r3, r2, r3
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000cb8:	b2d2      	uxtb	r2, r2
 8000cba:	4619      	mov	r1, r3
 8000cbc:	f003 f8c8 	bl	8003e50 <UB_VGA_SetPixel>
						UB_VGA_SetPixel(px+k,py-k-1,color);
 8000cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cc6:	b29b      	uxth	r3, r3
 8000cc8:	4413      	add	r3, r2
 8000cca:	b298      	uxth	r0, r3
 8000ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000cde:	b2d2      	uxtb	r2, r2
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f003 f8b5 	bl	8003e50 <UB_VGA_SetPixel>
				for(int k=-tn_draw;k<tn_draw;k++)
 8000ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ce8:	3301      	adds	r3, #1
 8000cea:	63bb      	str	r3, [r7, #56]	; 0x38
 8000cec:	7cba      	ldrb	r2, [r7, #18]
 8000cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	dcc7      	bgt.n	8000c84 <draw_line+0xd8>
					}
				}
				px+=sdx; 										/* -1/0/1 counting pixel */
 8000cf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	643b      	str	r3, [r7, #64]	; 0x40
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000cfc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cfe:	3301      	adds	r3, #1
 8000d00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d04:	6a3b      	ldr	r3, [r7, #32]
 8000d06:	429a      	cmp	r2, r3
 8000d08:	dda8      	ble.n	8000c5c <draw_line+0xb0>
				}
				py+=sdy; 										/* -1/0/1 counting pixel */
			}
		}
	}
}
 8000d0a:	e125      	b.n	8000f58 <draw_line+0x3ac>
		else if(stn==0)	/* odd line thickness */
 8000d0c:	7cfb      	ldrb	r3, [r7, #19]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f040 8122 	bne.w	8000f58 <draw_line+0x3ac>
			px=x1;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	643b      	str	r3, [r7, #64]	; 0x40
			py=y1;
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d20:	e052      	b.n	8000dc8 <draw_line+0x21c>
				y+=dyabs;										/* adding dyabs for drawing vertical pixel */
 8000d22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	4413      	add	r3, r2
 8000d28:	647b      	str	r3, [r7, #68]	; 0x44
				if (y>=dxabs)									/* y is higher than the dxabs of line, so py counting -1/0/1 */
 8000d2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d2c:	6a3b      	ldr	r3, [r7, #32]
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	db07      	blt.n	8000d42 <draw_line+0x196>
					y-=dxabs;									/* substracting dxabs of y so counting is reset */
 8000d32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000d34:	6a3b      	ldr	r3, [r7, #32]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	647b      	str	r3, [r7, #68]	; 0x44
					py+=sdy;
 8000d3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	4413      	add	r3, r2
 8000d40:	63fb      	str	r3, [r7, #60]	; 0x3c
				for(int h=0-tn_draw;h<=tn_draw;h++)
 8000d42:	7cbb      	ldrb	r3, [r7, #18]
 8000d44:	425b      	negs	r3, r3
 8000d46:	637b      	str	r3, [r7, #52]	; 0x34
 8000d48:	e033      	b.n	8000db2 <draw_line+0x206>
					if(px>=0 && px <= 320 && py>=0 && py <= 240)	/* pixels inside range VGA screen will be drawn */
 8000d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db2d      	blt.n	8000dac <draw_line+0x200>
 8000d50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d52:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000d56:	dc29      	bgt.n	8000dac <draw_line+0x200>
 8000d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	db26      	blt.n	8000dac <draw_line+0x200>
 8000d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d60:	2bf0      	cmp	r3, #240	; 0xf0
 8000d62:	dc23      	bgt.n	8000dac <draw_line+0x200>
						UB_VGA_SetPixel(px+h,py-h,color);
 8000d64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	4413      	add	r3, r2
 8000d6e:	b298      	uxth	r0, r3
 8000d70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000d7e:	b2d2      	uxtb	r2, r2
 8000d80:	4619      	mov	r1, r3
 8000d82:	f003 f865 	bl	8003e50 <UB_VGA_SetPixel>
						UB_VGA_SetPixel(px+h,py-h-1,color);
 8000d86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d88:	b29a      	uxth	r2, r3
 8000d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	4413      	add	r3, r2
 8000d90:	b298      	uxth	r0, r3
 8000d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	4619      	mov	r1, r3
 8000da8:	f003 f852 	bl	8003e50 <UB_VGA_SetPixel>
				for(int h=0-tn_draw;h<=tn_draw;h++)
 8000dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dae:	3301      	adds	r3, #1
 8000db0:	637b      	str	r3, [r7, #52]	; 0x34
 8000db2:	7cba      	ldrb	r2, [r7, #18]
 8000db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000db6:	429a      	cmp	r2, r3
 8000db8:	dac7      	bge.n	8000d4a <draw_line+0x19e>
				px+=sdx; 										/* -1/0/1 counting pixel */
 8000dba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000dbc:	69bb      	ldr	r3, [r7, #24]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	643b      	str	r3, [r7, #64]	; 0x40
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000dc8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000dca:	6a3b      	ldr	r3, [r7, #32]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	dda8      	ble.n	8000d22 <draw_line+0x176>
}
 8000dd0:	e0c2      	b.n	8000f58 <draw_line+0x3ac>
		if(stn==1) /* even line thickness */
 8000dd2:	7cfb      	ldrb	r3, [r7, #19]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d15e      	bne.n	8000e96 <draw_line+0x2ea>
			px=x1;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	643b      	str	r3, [r7, #64]	; 0x40
			py=y1;
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000de0:	2300      	movs	r3, #0
 8000de2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000de4:	e052      	b.n	8000e8c <draw_line+0x2e0>
				y+=dyabs;										/* adding dyabs for drawing vertical pixel */
 8000de6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	4413      	add	r3, r2
 8000dec:	647b      	str	r3, [r7, #68]	; 0x44
				if (y>=dxabs)									/* y is higher than the dxabs of line, so py counting -1/0/1 */
 8000dee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000df0:	6a3b      	ldr	r3, [r7, #32]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	db07      	blt.n	8000e06 <draw_line+0x25a>
					y-=dxabs;									/* substracting dxabs of y so counting is reset */
 8000df6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000df8:	6a3b      	ldr	r3, [r7, #32]
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	647b      	str	r3, [r7, #68]	; 0x44
					py+=sdy;
 8000dfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	4413      	add	r3, r2
 8000e04:	63fb      	str	r3, [r7, #60]	; 0x3c
				for(int k=0-tn_draw;k<tn_draw;k++)
 8000e06:	7cbb      	ldrb	r3, [r7, #18]
 8000e08:	425b      	negs	r3, r3
 8000e0a:	633b      	str	r3, [r7, #48]	; 0x30
 8000e0c:	e033      	b.n	8000e76 <draw_line+0x2ca>
					if(px>=0 && px <= 320 && py>=0 && py <= 240)	/* pixels inside range VGA screen will be drawn */
 8000e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	db2d      	blt.n	8000e70 <draw_line+0x2c4>
 8000e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e16:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000e1a:	dc29      	bgt.n	8000e70 <draw_line+0x2c4>
 8000e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	db26      	blt.n	8000e70 <draw_line+0x2c4>
 8000e22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e24:	2bf0      	cmp	r3, #240	; 0xf0
 8000e26:	dc23      	bgt.n	8000e70 <draw_line+0x2c4>
						UB_VGA_SetPixel(px+k,py-k,color);
 8000e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	4413      	add	r3, r2
 8000e32:	b298      	uxth	r0, r3
 8000e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	4619      	mov	r1, r3
 8000e46:	f003 f803 	bl	8003e50 <UB_VGA_SetPixel>
						UB_VGA_SetPixel(px+k,py-k-1,color);
 8000e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	4413      	add	r3, r2
 8000e54:	b298      	uxth	r0, r3
 8000e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	b29b      	uxth	r3, r3
 8000e62:	3b01      	subs	r3, #1
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	f002 fff0 	bl	8003e50 <UB_VGA_SetPixel>
				for(int k=0-tn_draw;k<tn_draw;k++)
 8000e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e72:	3301      	adds	r3, #1
 8000e74:	633b      	str	r3, [r7, #48]	; 0x30
 8000e76:	7cba      	ldrb	r2, [r7, #18]
 8000e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	dcc7      	bgt.n	8000e0e <draw_line+0x262>
				px+=sdx; 										/* -1/0/1 counting pixel */
 8000e7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	4413      	add	r3, r2
 8000e84:	643b      	str	r3, [r7, #64]	; 0x40
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000e88:	3301      	adds	r3, #1
 8000e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000e8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000e8e:	6a3b      	ldr	r3, [r7, #32]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	dda8      	ble.n	8000de6 <draw_line+0x23a>
}
 8000e94:	e060      	b.n	8000f58 <draw_line+0x3ac>
		else if(stn==0)	/* odd line thickness */
 8000e96:	7cfb      	ldrb	r3, [r7, #19]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d15d      	bne.n	8000f58 <draw_line+0x3ac>
			px=x1;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	643b      	str	r3, [r7, #64]	; 0x40
			py=y1;
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dyabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000ea8:	e052      	b.n	8000f50 <draw_line+0x3a4>
				x+=dxabs;										/* adding dyabs for drawing vertical pixel */
 8000eaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000eac:	6a3b      	ldr	r3, [r7, #32]
 8000eae:	4413      	add	r3, r2
 8000eb0:	64bb      	str	r3, [r7, #72]	; 0x48
				if (x>=dyabs)									/* y is higher than the dxabs of line, so py counting -1/0/1 */
 8000eb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	db07      	blt.n	8000eca <draw_line+0x31e>
					x-=dyabs;									/* substracting dxabs of y so counting is reset */
 8000eba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	64bb      	str	r3, [r7, #72]	; 0x48
					px+=sdx;
 8000ec2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	643b      	str	r3, [r7, #64]	; 0x40
				for(int h=0-tn_draw;h<=tn_draw;h++)
 8000eca:	7cbb      	ldrb	r3, [r7, #18]
 8000ecc:	425b      	negs	r3, r3
 8000ece:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ed0:	e033      	b.n	8000f3a <draw_line+0x38e>
					if(px>=0 && px <= 320 && py>=0 && py <= 240)	/* pixels inside range VGA screen will be drawn */
 8000ed2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	db2d      	blt.n	8000f34 <draw_line+0x388>
 8000ed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000eda:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000ede:	dc29      	bgt.n	8000f34 <draw_line+0x388>
 8000ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	db26      	blt.n	8000f34 <draw_line+0x388>
 8000ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ee8:	2bf0      	cmp	r3, #240	; 0xf0
 8000eea:	dc23      	bgt.n	8000f34 <draw_line+0x388>
						UB_VGA_SetPixel(px+h,py-h,color);
 8000eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	4413      	add	r3, r2
 8000ef6:	b298      	uxth	r0, r3
 8000ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000efe:	b29b      	uxth	r3, r3
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f002 ffa1 	bl	8003e50 <UB_VGA_SetPixel>
						UB_VGA_SetPixel(px+h,py-h-1,color);
 8000f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	4413      	add	r3, r2
 8000f18:	b298      	uxth	r0, r3
 8000f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	3b01      	subs	r3, #1
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f002 ff8e 	bl	8003e50 <UB_VGA_SetPixel>
				for(int h=0-tn_draw;h<=tn_draw;h++)
 8000f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f36:	3301      	adds	r3, #1
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f3a:	7cba      	ldrb	r2, [r7, #18]
 8000f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	dac7      	bge.n	8000ed2 <draw_line+0x326>
				py+=sdy; 										/* -1/0/1 counting pixel */
 8000f42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	4413      	add	r3, r2
 8000f48:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dyabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000f4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000f50:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	429a      	cmp	r2, r3
 8000f56:	dda8      	ble.n	8000eaa <draw_line+0x2fe>
}
 8000f58:	bf00      	nop
 8000f5a:	3750      	adds	r7, #80	; 0x50
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <draw_rectangle>:

#include "rectangle.h"
#include "line.h"

void draw_rectangle (int x1, int y1, int x2, int y2, int color)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
 8000f6c:	603b      	str	r3, [r7, #0]
	for(int i=y1;i<=y2;i++)
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	617b      	str	r3, [r7, #20]
 8000f72:	e015      	b.n	8000fa0 <draw_rectangle+0x40>
	{
		for(int j=x1;j<=x2;j++)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	e00b      	b.n	8000f92 <draw_rectangle+0x32>
			UB_VGA_SetPixel(j,i,color);
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	b291      	uxth	r1, r2
 8000f82:	6a3a      	ldr	r2, [r7, #32]
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f002 ff62 	bl	8003e50 <UB_VGA_SetPixel>
		for(int j=x1;j<=x2;j++)
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	429a      	cmp	r2, r3
 8000f98:	ddef      	ble.n	8000f7a <draw_rectangle+0x1a>
	for(int i=y1;i<=y2;i++)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	697a      	ldr	r2, [r7, #20]
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	dde5      	ble.n	8000f74 <draw_rectangle+0x14>
	}
}
 8000fa8:	bf00      	nop
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <draw_text>:

#include <stdio.h>
#include <stdlib.h>


void draw_text (int x, int y, char text[]) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]

	for(int i=0;i<strlen(text);i++)
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	e00e      	b.n	8000fe0 <draw_text+0x30>
	{
		letter_select(x,y,text[i]);
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f000 f812 	bl	8000ff8 <letter_select>
		x = x + 5;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	3305      	adds	r3, #5
 8000fd8:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<strlen(text);i++)
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff f8fb 	bl	80001dc <strlen>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	429a      	cmp	r2, r3
 8000fec:	d8e9      	bhi.n	8000fc2 <draw_text+0x12>
	}
}
 8000fee:	bf00      	nop
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
	...

08000ff8 <letter_select>:

void letter_select(int x, int y, char letter){
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	f5ad 5d96 	sub.w	sp, sp, #4800	; 0x12c0
 8000ffe:	b083      	sub	sp, #12
 8001000:	af00      	add	r7, sp, #0
 8001002:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001006:	3b1c      	subs	r3, #28
 8001008:	6018      	str	r0, [r3, #0]
 800100a:	f107 0308 	add.w	r3, r7, #8
 800100e:	6019      	str	r1, [r3, #0]
 8001010:	f107 0308 	add.w	r3, r7, #8
 8001014:	3b01      	subs	r3, #1
 8001016:	701a      	strb	r2, [r3, #0]

	//____________________________________ALFABET IN C ARRAY_________________________________________

	int letter_A[10][4] = {
 8001018:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800101c:	f103 0318 	add.w	r3, r3, #24
 8001020:	4ae1      	ldr	r2, [pc, #900]	; (80013a8 <letter_select+0x3b0>)
 8001022:	4618      	mov	r0, r3
 8001024:	4611      	mov	r1, r2
 8001026:	23a0      	movs	r3, #160	; 0xa0
 8001028:	461a      	mov	r2, r3
 800102a:	f004 f951 	bl	80052d0 <memcpy>
			  0xff, 0xff, 0xff, 0xff,  //@@@@
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00
	};
	int letter_B[10][4] = {
 800102e:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8001032:	4ade      	ldr	r2, [pc, #888]	; (80013ac <letter_select+0x3b4>)
 8001034:	4618      	mov	r0, r3
 8001036:	4611      	mov	r1, r2
 8001038:	23a0      	movs	r3, #160	; 0xa0
 800103a:	461a      	mov	r2, r3
 800103c:	f004 f948 	bl	80052d0 <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0xff, 0xff, 0x00,  //@@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_C[10][4] = {
 8001040:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 8001044:	4ada      	ldr	r2, [pc, #872]	; (80013b0 <letter_select+0x3b8>)
 8001046:	4618      	mov	r0, r3
 8001048:	4611      	mov	r1, r2
 800104a:	23a0      	movs	r3, #160	; 0xa0
 800104c:	461a      	mov	r2, r3
 800104e:	f004 f93f 	bl	80052d0 <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_D[10][4] = {
 8001052:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001056:	4ad7      	ldr	r2, [pc, #860]	; (80013b4 <letter_select+0x3bc>)
 8001058:	4618      	mov	r0, r3
 800105a:	4611      	mov	r1, r2
 800105c:	23a0      	movs	r3, #160	; 0xa0
 800105e:	461a      	mov	r2, r3
 8001060:	f004 f936 	bl	80052d0 <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0xff, 0xff, 0x00,  //@@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_E[10][4] = {
 8001064:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001068:	4ad3      	ldr	r2, [pc, #844]	; (80013b8 <letter_select+0x3c0>)
 800106a:	4618      	mov	r0, r3
 800106c:	4611      	mov	r1, r2
 800106e:	23a0      	movs	r3, #160	; 0xa0
 8001070:	461a      	mov	r2, r3
 8001072:	f004 f92d 	bl	80052d0 <memcpy>
			  0xff, 0x00, 0x00, 0x00,  //@...
			  0xff, 0xff, 0xff, 0xff,  //@@@@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_F[10][4] = {
 8001076:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 800107a:	4ad0      	ldr	r2, [pc, #832]	; (80013bc <letter_select+0x3c4>)
 800107c:	4618      	mov	r0, r3
 800107e:	4611      	mov	r1, r2
 8001080:	23a0      	movs	r3, #160	; 0xa0
 8001082:	461a      	mov	r2, r3
 8001084:	f004 f924 	bl	80052d0 <memcpy>
			  0xff, 0x00, 0x00, 0x00,  //@...
			  0xff, 0x00, 0x00, 0x00,  //@...
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_G[10][4] = {
 8001088:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 800108c:	4acc      	ldr	r2, [pc, #816]	; (80013c0 <letter_select+0x3c8>)
 800108e:	4618      	mov	r0, r3
 8001090:	4611      	mov	r1, r2
 8001092:	23a0      	movs	r3, #160	; 0xa0
 8001094:	461a      	mov	r2, r3
 8001096:	f004 f91b 	bl	80052d0 <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_H[10][4] = {
 800109a:	f607 4318 	addw	r3, r7, #3096	; 0xc18
 800109e:	4ac9      	ldr	r2, [pc, #804]	; (80013c4 <letter_select+0x3cc>)
 80010a0:	4618      	mov	r0, r3
 80010a2:	4611      	mov	r1, r2
 80010a4:	23a0      	movs	r3, #160	; 0xa0
 80010a6:	461a      	mov	r2, r3
 80010a8:	f004 f912 	bl	80052d0 <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_I[10][3] = {
 80010ac:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 80010b0:	4ac5      	ldr	r2, [pc, #788]	; (80013c8 <letter_select+0x3d0>)
 80010b2:	4618      	mov	r0, r3
 80010b4:	4611      	mov	r1, r2
 80010b6:	2378      	movs	r3, #120	; 0x78
 80010b8:	461a      	mov	r2, r3
 80010ba:	f004 f909 	bl	80052d0 <memcpy>
			  0x00, 0xff, 0x00,  //.@.
			  0xff, 0xff, 0xff,  //@@@
			  0x00, 0x00, 0x00,  //...
			  0x00, 0x00, 0x00,  //...
	};
	int letter_J[10][4] = {
 80010be:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80010c2:	4618      	mov	r0, r3
 80010c4:	23a0      	movs	r3, #160	; 0xa0
 80010c6:	461a      	mov	r2, r3
 80010c8:	2100      	movs	r1, #0
 80010ca:	f004 f90c 	bl	80052e6 <memset>
 80010ce:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80010d2:	22ff      	movs	r2, #255	; 0xff
 80010d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80010d6:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80010da:	22ff      	movs	r2, #255	; 0xff
 80010dc:	63da      	str	r2, [r3, #60]	; 0x3c
 80010de:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80010e2:	22ff      	movs	r2, #255	; 0xff
 80010e4:	64da      	str	r2, [r3, #76]	; 0x4c
 80010e6:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80010ea:	22ff      	movs	r2, #255	; 0xff
 80010ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80010ee:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80010f2:	22ff      	movs	r2, #255	; 0xff
 80010f4:	661a      	str	r2, [r3, #96]	; 0x60
 80010f6:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80010fa:	22ff      	movs	r2, #255	; 0xff
 80010fc:	66da      	str	r2, [r3, #108]	; 0x6c
 80010fe:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001102:	22ff      	movs	r2, #255	; 0xff
 8001104:	675a      	str	r2, [r3, #116]	; 0x74
 8001106:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800110a:	22ff      	movs	r2, #255	; 0xff
 800110c:	679a      	str	r2, [r3, #120]	; 0x78
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_K[10][4] = {
 800110e:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8001112:	4aae      	ldr	r2, [pc, #696]	; (80013cc <letter_select+0x3d4>)
 8001114:	4618      	mov	r0, r3
 8001116:	4611      	mov	r1, r2
 8001118:	23a0      	movs	r3, #160	; 0xa0
 800111a:	461a      	mov	r2, r3
 800111c:	f004 f8d8 	bl	80052d0 <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_L[10][4] = {
 8001120:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8001124:	4618      	mov	r0, r3
 8001126:	23a0      	movs	r3, #160	; 0xa0
 8001128:	461a      	mov	r2, r3
 800112a:	2100      	movs	r1, #0
 800112c:	f004 f8db 	bl	80052e6 <memset>
 8001130:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8001134:	22ff      	movs	r2, #255	; 0xff
 8001136:	621a      	str	r2, [r3, #32]
 8001138:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800113c:	22ff      	movs	r2, #255	; 0xff
 800113e:	631a      	str	r2, [r3, #48]	; 0x30
 8001140:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8001144:	22ff      	movs	r2, #255	; 0xff
 8001146:	641a      	str	r2, [r3, #64]	; 0x40
 8001148:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800114c:	22ff      	movs	r2, #255	; 0xff
 800114e:	651a      	str	r2, [r3, #80]	; 0x50
 8001150:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8001154:	22ff      	movs	r2, #255	; 0xff
 8001156:	661a      	str	r2, [r3, #96]	; 0x60
 8001158:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800115c:	22ff      	movs	r2, #255	; 0xff
 800115e:	671a      	str	r2, [r3, #112]	; 0x70
 8001160:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8001164:	22ff      	movs	r2, #255	; 0xff
 8001166:	675a      	str	r2, [r3, #116]	; 0x74
 8001168:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800116c:	22ff      	movs	r2, #255	; 0xff
 800116e:	679a      	str	r2, [r3, #120]	; 0x78
 8001170:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8001174:	22ff      	movs	r2, #255	; 0xff
 8001176:	67da      	str	r2, [r3, #124]	; 0x7c
			  0xff, 0x00, 0x00, 0x00,  //@...
			  0xff, 0xff, 0xff, 0xff,  //@@@@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_M[10][4] = {
 8001178:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 800117c:	4a94      	ldr	r2, [pc, #592]	; (80013d0 <letter_select+0x3d8>)
 800117e:	4618      	mov	r0, r3
 8001180:	4611      	mov	r1, r2
 8001182:	23a0      	movs	r3, #160	; 0xa0
 8001184:	461a      	mov	r2, r3
 8001186:	f004 f8a3 	bl	80052d0 <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_N[10][4] = {
 800118a:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800118e:	4a91      	ldr	r2, [pc, #580]	; (80013d4 <letter_select+0x3dc>)
 8001190:	4618      	mov	r0, r3
 8001192:	4611      	mov	r1, r2
 8001194:	23a0      	movs	r3, #160	; 0xa0
 8001196:	461a      	mov	r2, r3
 8001198:	f004 f89a 	bl	80052d0 <memcpy>
			  0xff, 0x00, 0xff, 0xff,  //@.@@
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_O[10][4] = {
 800119c:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 80011a0:	4a8d      	ldr	r2, [pc, #564]	; (80013d8 <letter_select+0x3e0>)
 80011a2:	4618      	mov	r0, r3
 80011a4:	4611      	mov	r1, r2
 80011a6:	23a0      	movs	r3, #160	; 0xa0
 80011a8:	461a      	mov	r2, r3
 80011aa:	f004 f891 	bl	80052d0 <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_P[10][4] = {
 80011ae:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80011b2:	4a8a      	ldr	r2, [pc, #552]	; (80013dc <letter_select+0x3e4>)
 80011b4:	4618      	mov	r0, r3
 80011b6:	4611      	mov	r1, r2
 80011b8:	23a0      	movs	r3, #160	; 0xa0
 80011ba:	461a      	mov	r2, r3
 80011bc:	f004 f888 	bl	80052d0 <memcpy>
			  0xff, 0x00, 0x00, 0x00,  //@...
			  0xff, 0x00, 0x00, 0x00,  //@...
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_Q[10][4] = {
 80011c0:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80011c4:	4a86      	ldr	r2, [pc, #536]	; (80013e0 <letter_select+0x3e8>)
 80011c6:	4618      	mov	r0, r3
 80011c8:	4611      	mov	r1, r2
 80011ca:	23a0      	movs	r3, #160	; 0xa0
 80011cc:	461a      	mov	r2, r3
 80011ce:	f004 f87f 	bl	80052d0 <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0x00, 0xff, 0x00,  //..@.
			  0x00, 0x00, 0x00, 0xff,  //...@
	};
	int letter_R[10][4] = {
 80011d2:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80011d6:	4a83      	ldr	r2, [pc, #524]	; (80013e4 <letter_select+0x3ec>)
 80011d8:	4618      	mov	r0, r3
 80011da:	4611      	mov	r1, r2
 80011dc:	23a0      	movs	r3, #160	; 0xa0
 80011de:	461a      	mov	r2, r3
 80011e0:	f004 f876 	bl	80052d0 <memcpy>
			  0xff, 0x00, 0xff, 0x00,  //@.@.
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_S[10][4] = {
 80011e4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80011e8:	4a7f      	ldr	r2, [pc, #508]	; (80013e8 <letter_select+0x3f0>)
 80011ea:	4618      	mov	r0, r3
 80011ec:	4611      	mov	r1, r2
 80011ee:	23a0      	movs	r3, #160	; 0xa0
 80011f0:	461a      	mov	r2, r3
 80011f2:	f004 f86d 	bl	80052d0 <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0xff, 0xff, 0x00,  //@@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_T[10][5] = {
 80011f6:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80011fa:	4a7c      	ldr	r2, [pc, #496]	; (80013ec <letter_select+0x3f4>)
 80011fc:	4618      	mov	r0, r3
 80011fe:	4611      	mov	r1, r2
 8001200:	23c8      	movs	r3, #200	; 0xc8
 8001202:	461a      	mov	r2, r3
 8001204:	f004 f864 	bl	80052d0 <memcpy>
			  0x00, 0x00, 0xff, 0x00, 0x00,  //..@..
			  0x00, 0xff, 0xff, 0xff, 0x00,  //.@@@.
			  0x00, 0x00, 0x00, 0x00, 0x00,  //.....
			  0x00, 0x00, 0x00, 0x00, 0x00,  //.....
	};
	int letter_U[10][4] = {
 8001208:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800120c:	4a78      	ldr	r2, [pc, #480]	; (80013f0 <letter_select+0x3f8>)
 800120e:	4618      	mov	r0, r3
 8001210:	4611      	mov	r1, r2
 8001212:	23a0      	movs	r3, #160	; 0xa0
 8001214:	461a      	mov	r2, r3
 8001216:	f004 f85b 	bl	80052d0 <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_V[10][4] = {
 800121a:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800121e:	4a75      	ldr	r2, [pc, #468]	; (80013f4 <letter_select+0x3fc>)
 8001220:	4618      	mov	r0, r3
 8001222:	4611      	mov	r1, r2
 8001224:	23a0      	movs	r3, #160	; 0xa0
 8001226:	461a      	mov	r2, r3
 8001228:	f004 f852 	bl	80052d0 <memcpy>
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_W[10][4] = {
 800122c:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8001230:	3b10      	subs	r3, #16
 8001232:	4a71      	ldr	r2, [pc, #452]	; (80013f8 <letter_select+0x400>)
 8001234:	4618      	mov	r0, r3
 8001236:	4611      	mov	r1, r2
 8001238:	23a0      	movs	r3, #160	; 0xa0
 800123a:	461a      	mov	r2, r3
 800123c:	f004 f848 	bl	80052d0 <memcpy>
			  0xff, 0xff, 0xff, 0xff,  //@@@@
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_X[10][4] = {
 8001240:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001244:	3b10      	subs	r3, #16
 8001246:	4a6d      	ldr	r2, [pc, #436]	; (80013fc <letter_select+0x404>)
 8001248:	4618      	mov	r0, r3
 800124a:	4611      	mov	r1, r2
 800124c:	23a0      	movs	r3, #160	; 0xa0
 800124e:	461a      	mov	r2, r3
 8001250:	f004 f83e 	bl	80052d0 <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_Y[10][5] = {
 8001254:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8001258:	3b18      	subs	r3, #24
 800125a:	4a69      	ldr	r2, [pc, #420]	; (8001400 <letter_select+0x408>)
 800125c:	4618      	mov	r0, r3
 800125e:	4611      	mov	r1, r2
 8001260:	23c8      	movs	r3, #200	; 0xc8
 8001262:	461a      	mov	r2, r3
 8001264:	f004 f834 	bl	80052d0 <memcpy>
			  0x00, 0x00, 0xff, 0x00, 0x00,  //..@..
			  0x00, 0xff, 0xff, 0xff, 0x00,  //.@@@.
			  0x00, 0x00, 0x00, 0x00, 0x00,  //.....
			  0x00, 0x00, 0x00, 0x00, 0x00,  //.....
	};
	int letter_Z[10][4] = {
 8001268:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800126c:	3b18      	subs	r3, #24
 800126e:	4a65      	ldr	r2, [pc, #404]	; (8001404 <letter_select+0x40c>)
 8001270:	4618      	mov	r0, r3
 8001272:	4611      	mov	r1, r2
 8001274:	23a0      	movs	r3, #160	; 0xa0
 8001276:	461a      	mov	r2, r3
 8001278:	f004 f82a 	bl	80052d0 <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0xff, 0xff, 0xff,  //@@@@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int spatie[10][4] = {
 800127c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001280:	3b18      	subs	r3, #24
 8001282:	4618      	mov	r0, r3
 8001284:	23a0      	movs	r3, #160	; 0xa0
 8001286:	461a      	mov	r2, r3
 8001288:	2100      	movs	r1, #0
 800128a:	f004 f82c 	bl	80052e6 <memset>
	};


	//____________________________________SWITCH_________________________________________

	switch (letter)
 800128e:	f107 0308 	add.w	r3, r7, #8
 8001292:	3b01      	subs	r3, #1
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	3b20      	subs	r3, #32
 8001298:	2b3a      	cmp	r3, #58	; 0x3a
 800129a:	f201 8443 	bhi.w	8002b24 <letter_select+0x1b2c>
 800129e:	a201      	add	r2, pc, #4	; (adr r2, 80012a4 <letter_select+0x2ac>)
 80012a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a4:	08002a41 	.word	0x08002a41
 80012a8:	08002b25 	.word	0x08002b25
 80012ac:	08002b25 	.word	0x08002b25
 80012b0:	08002b25 	.word	0x08002b25
 80012b4:	08002b25 	.word	0x08002b25
 80012b8:	08002b25 	.word	0x08002b25
 80012bc:	08002b25 	.word	0x08002b25
 80012c0:	08002b25 	.word	0x08002b25
 80012c4:	08002b25 	.word	0x08002b25
 80012c8:	08002b25 	.word	0x08002b25
 80012cc:	08002b25 	.word	0x08002b25
 80012d0:	08002b25 	.word	0x08002b25
 80012d4:	08002b25 	.word	0x08002b25
 80012d8:	08002b25 	.word	0x08002b25
 80012dc:	08002b25 	.word	0x08002b25
 80012e0:	08002b25 	.word	0x08002b25
 80012e4:	08002b25 	.word	0x08002b25
 80012e8:	08002b25 	.word	0x08002b25
 80012ec:	08002b25 	.word	0x08002b25
 80012f0:	08002b25 	.word	0x08002b25
 80012f4:	08002b25 	.word	0x08002b25
 80012f8:	08002b25 	.word	0x08002b25
 80012fc:	08002b25 	.word	0x08002b25
 8001300:	08002b25 	.word	0x08002b25
 8001304:	08002b25 	.word	0x08002b25
 8001308:	08002b25 	.word	0x08002b25
 800130c:	08002b25 	.word	0x08002b25
 8001310:	08002b25 	.word	0x08002b25
 8001314:	08002b25 	.word	0x08002b25
 8001318:	08002b25 	.word	0x08002b25
 800131c:	08002b25 	.word	0x08002b25
 8001320:	08002b25 	.word	0x08002b25
 8001324:	08002b25 	.word	0x08002b25
 8001328:	08001391 	.word	0x08001391
 800132c:	080014c3 	.word	0x080014c3
 8001330:	0800159f 	.word	0x0800159f
 8001334:	08001683 	.word	0x08001683
 8001338:	08001767 	.word	0x08001767
 800133c:	08001833 	.word	0x08001833
 8001340:	0800190f 	.word	0x0800190f
 8001344:	080019f3 	.word	0x080019f3
 8001348:	08001ad7 	.word	0x08001ad7
 800134c:	08001ba7 	.word	0x08001ba7
 8001350:	08001c83 	.word	0x08001c83
 8001354:	08001d67 	.word	0x08001d67
 8001358:	08001e4b 	.word	0x08001e4b
 800135c:	08001f17 	.word	0x08001f17
 8001360:	08001ff3 	.word	0x08001ff3
 8001364:	080020d7 	.word	0x080020d7
 8001368:	080021bb 	.word	0x080021bb
 800136c:	08002287 	.word	0x08002287
 8001370:	08002361 	.word	0x08002361
 8001374:	08002443 	.word	0x08002443
 8001378:	08002529 	.word	0x08002529
 800137c:	080025f3 	.word	0x080025f3
 8001380:	080026cd 	.word	0x080026cd
 8001384:	080027b1 	.word	0x080027b1
 8001388:	08002895 	.word	0x08002895
 800138c:	08002965 	.word	0x08002965
	{
	case 'A':
	for (int i=0; i<10; i++) {
 8001390:	2300      	movs	r3, #0
 8001392:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8001396:	f102 0204 	add.w	r2, r2, #4
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	e087      	b.n	80014ae <letter_select+0x4b6>
		for (int j=0; j<4; j++) {
 800139e:	2300      	movs	r3, #0
 80013a0:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	e072      	b.n	800148e <letter_select+0x496>
 80013a8:	080074e8 	.word	0x080074e8
 80013ac:	08007588 	.word	0x08007588
 80013b0:	08007628 	.word	0x08007628
 80013b4:	080076c8 	.word	0x080076c8
 80013b8:	08007768 	.word	0x08007768
 80013bc:	08007808 	.word	0x08007808
 80013c0:	080078a8 	.word	0x080078a8
 80013c4:	08007948 	.word	0x08007948
 80013c8:	080079e8 	.word	0x080079e8
 80013cc:	08007a60 	.word	0x08007a60
 80013d0:	08007b00 	.word	0x08007b00
 80013d4:	08007ba0 	.word	0x08007ba0
 80013d8:	08007c40 	.word	0x08007c40
 80013dc:	08007ce0 	.word	0x08007ce0
 80013e0:	08007d80 	.word	0x08007d80
 80013e4:	08007e20 	.word	0x08007e20
 80013e8:	08007ec0 	.word	0x08007ec0
 80013ec:	08007f60 	.word	0x08007f60
 80013f0:	08008028 	.word	0x08008028
 80013f4:	080080c8 	.word	0x080080c8
 80013f8:	08008168 	.word	0x08008168
 80013fc:	08008208 	.word	0x08008208
 8001400:	080082a8 	.word	0x080082a8
 8001404:	08008370 	.word	0x08008370

			int x_pos = j + x;
 8001408:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800140c:	3b1c      	subs	r3, #28
 800140e:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8001412:	6812      	ldr	r2, [r2, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4413      	add	r3, r2
 8001418:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 800141c:	f102 020c 	add.w	r2, r2, #12
 8001420:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001422:	f107 0308 	add.w	r3, r7, #8
 8001426:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800142a:	f102 0204 	add.w	r2, r2, #4
 800142e:	6812      	ldr	r2, [r2, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4413      	add	r3, r2
 8001434:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8001438:	f102 0208 	add.w	r2, r2, #8
 800143c:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_A[i][j]);
 800143e:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8001442:	f103 030c 	add.w	r3, r3, #12
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	b298      	uxth	r0, r3
 800144a:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 800144e:	f103 0308 	add.w	r3, r3, #8
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	b29c      	uxth	r4, r3
 8001456:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800145a:	f103 0318 	add.w	r3, r3, #24
 800145e:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8001462:	f102 0204 	add.w	r2, r2, #4
 8001466:	6812      	ldr	r2, [r2, #0]
 8001468:	0091      	lsls	r1, r2, #2
 800146a:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800146e:	6812      	ldr	r2, [r2, #0]
 8001470:	440a      	add	r2, r1
 8001472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	4621      	mov	r1, r4
 800147c:	f002 fce8 	bl	8003e50 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8001480:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	3301      	adds	r3, #1
 8001488:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b03      	cmp	r3, #3
 8001496:	ddb7      	ble.n	8001408 <letter_select+0x410>
	for (int i=0; i<10; i++) {
 8001498:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800149c:	f103 0304 	add.w	r3, r3, #4
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80014a8:	f102 0204 	add.w	r2, r2, #4
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80014b2:	f103 0304 	add.w	r3, r3, #4
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b09      	cmp	r3, #9
 80014ba:	f77f af70 	ble.w	800139e <letter_select+0x3a6>
		}
	}
	break;
 80014be:	f001 bb34 	b.w	8002b2a <letter_select+0x1b32>


	case 'B':
	for (int i=0; i<10; i++) {
 80014c2:	2300      	movs	r3, #0
 80014c4:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80014c8:	f102 021c 	add.w	r2, r2, #28
 80014cc:	6013      	str	r3, [r2, #0]
 80014ce:	e05d      	b.n	800158c <letter_select+0x594>
		for (int j=0; j<4; j++) {
 80014d0:	2300      	movs	r3, #0
 80014d2:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80014d6:	f102 0218 	add.w	r2, r2, #24
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	e044      	b.n	8001568 <letter_select+0x570>

			int x_pos = j + x;
 80014de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014e2:	3b1c      	subs	r3, #28
 80014e4:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80014e8:	f102 0218 	add.w	r2, r2, #24
 80014ec:	6812      	ldr	r2, [r2, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4413      	add	r3, r2
 80014f2:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80014f6:	f102 0204 	add.w	r2, r2, #4
 80014fa:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8001504:	f102 021c 	add.w	r2, r2, #28
 8001508:	6812      	ldr	r2, [r2, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4413      	add	r3, r2
 800150e:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8001512:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_B[i][j]);
 8001514:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8001518:	f103 0304 	add.w	r3, r3, #4
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	b298      	uxth	r0, r3
 8001520:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	b29c      	uxth	r4, r3
 8001528:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 800152c:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8001530:	f102 021c 	add.w	r2, r2, #28
 8001534:	6812      	ldr	r2, [r2, #0]
 8001536:	0091      	lsls	r1, r2, #2
 8001538:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800153c:	f102 0218 	add.w	r2, r2, #24
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	440a      	add	r2, r1
 8001544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001548:	b2db      	uxtb	r3, r3
 800154a:	461a      	mov	r2, r3
 800154c:	4621      	mov	r1, r4
 800154e:	f002 fc7f 	bl	8003e50 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8001552:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8001556:	f103 0318 	add.w	r3, r3, #24
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	3301      	adds	r3, #1
 800155e:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8001562:	f102 0218 	add.w	r2, r2, #24
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800156c:	f103 0318 	add.w	r3, r3, #24
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b03      	cmp	r3, #3
 8001574:	ddb3      	ble.n	80014de <letter_select+0x4e6>
	for (int i=0; i<10; i++) {
 8001576:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800157a:	f103 031c 	add.w	r3, r3, #28
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	3301      	adds	r3, #1
 8001582:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8001586:	f102 021c 	add.w	r2, r2, #28
 800158a:	6013      	str	r3, [r2, #0]
 800158c:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8001590:	f103 031c 	add.w	r3, r3, #28
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2b09      	cmp	r3, #9
 8001598:	dd9a      	ble.n	80014d0 <letter_select+0x4d8>
		}
	}
	break;
 800159a:	f001 bac6 	b.w	8002b2a <letter_select+0x1b32>


	case 'C':
	for (int i=0; i<10; i++) {
 800159e:	2300      	movs	r3, #0
 80015a0:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80015a4:	f102 0214 	add.w	r2, r2, #20
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	e061      	b.n	8001670 <letter_select+0x678>
		for (int j=0; j<4; j++) {
 80015ac:	2300      	movs	r3, #0
 80015ae:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80015b2:	f102 0210 	add.w	r2, r2, #16
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	e048      	b.n	800164c <letter_select+0x654>

			int x_pos = j + x;
 80015ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015be:	3b1c      	subs	r3, #28
 80015c0:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80015c4:	f102 0210 	add.w	r2, r2, #16
 80015c8:	6812      	ldr	r2, [r2, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4413      	add	r3, r2
 80015ce:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80015d2:	f102 021c 	add.w	r2, r2, #28
 80015d6:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80015d8:	f107 0308 	add.w	r3, r7, #8
 80015dc:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80015e0:	f102 0214 	add.w	r2, r2, #20
 80015e4:	6812      	ldr	r2, [r2, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4413      	add	r3, r2
 80015ea:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80015ee:	f102 0218 	add.w	r2, r2, #24
 80015f2:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_C[i][j]);
 80015f4:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80015f8:	f103 031c 	add.w	r3, r3, #28
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	b298      	uxth	r0, r3
 8001600:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8001604:	f103 0318 	add.w	r3, r3, #24
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	b29c      	uxth	r4, r3
 800160c:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 8001610:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8001614:	f102 0214 	add.w	r2, r2, #20
 8001618:	6812      	ldr	r2, [r2, #0]
 800161a:	0091      	lsls	r1, r2, #2
 800161c:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8001620:	f102 0210 	add.w	r2, r2, #16
 8001624:	6812      	ldr	r2, [r2, #0]
 8001626:	440a      	add	r2, r1
 8001628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800162c:	b2db      	uxtb	r3, r3
 800162e:	461a      	mov	r2, r3
 8001630:	4621      	mov	r1, r4
 8001632:	f002 fc0d 	bl	8003e50 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8001636:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800163a:	f103 0310 	add.w	r3, r3, #16
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	3301      	adds	r3, #1
 8001642:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8001646:	f102 0210 	add.w	r2, r2, #16
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8001650:	f103 0310 	add.w	r3, r3, #16
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2b03      	cmp	r3, #3
 8001658:	ddaf      	ble.n	80015ba <letter_select+0x5c2>
	for (int i=0; i<10; i++) {
 800165a:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800165e:	f103 0314 	add.w	r3, r3, #20
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	3301      	adds	r3, #1
 8001666:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800166a:	f102 0214 	add.w	r2, r2, #20
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8001674:	f103 0314 	add.w	r3, r3, #20
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b09      	cmp	r3, #9
 800167c:	dd96      	ble.n	80015ac <letter_select+0x5b4>
		}
	}
	break;
 800167e:	f001 ba54 	b.w	8002b2a <letter_select+0x1b32>


	case 'D':
	for (int i=0; i<10; i++) {
 8001682:	2300      	movs	r3, #0
 8001684:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8001688:	f102 020c 	add.w	r2, r2, #12
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	e061      	b.n	8001754 <letter_select+0x75c>
		for (int j=0; j<4; j++) {
 8001690:	2300      	movs	r3, #0
 8001692:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8001696:	f102 0208 	add.w	r2, r2, #8
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	e048      	b.n	8001730 <letter_select+0x738>

			int x_pos = j + x;
 800169e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016a2:	3b1c      	subs	r3, #28
 80016a4:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80016a8:	f102 0208 	add.w	r2, r2, #8
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4413      	add	r3, r2
 80016b2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80016b6:	f102 0214 	add.w	r2, r2, #20
 80016ba:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80016bc:	f107 0308 	add.w	r3, r7, #8
 80016c0:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80016c4:	f102 020c 	add.w	r2, r2, #12
 80016c8:	6812      	ldr	r2, [r2, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4413      	add	r3, r2
 80016ce:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80016d2:	f102 0210 	add.w	r2, r2, #16
 80016d6:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_D[i][j]);
 80016d8:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80016dc:	f103 0314 	add.w	r3, r3, #20
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	b298      	uxth	r0, r3
 80016e4:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80016e8:	f103 0310 	add.w	r3, r3, #16
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	b29c      	uxth	r4, r3
 80016f0:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 80016f4:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80016f8:	f102 020c 	add.w	r2, r2, #12
 80016fc:	6812      	ldr	r2, [r2, #0]
 80016fe:	0091      	lsls	r1, r2, #2
 8001700:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8001704:	f102 0208 	add.w	r2, r2, #8
 8001708:	6812      	ldr	r2, [r2, #0]
 800170a:	440a      	add	r2, r1
 800170c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	461a      	mov	r2, r3
 8001714:	4621      	mov	r1, r4
 8001716:	f002 fb9b 	bl	8003e50 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 800171a:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800171e:	f103 0308 	add.w	r3, r3, #8
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	3301      	adds	r3, #1
 8001726:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800172a:	f102 0208 	add.w	r2, r2, #8
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8001734:	f103 0308 	add.w	r3, r3, #8
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b03      	cmp	r3, #3
 800173c:	ddaf      	ble.n	800169e <letter_select+0x6a6>
	for (int i=0; i<10; i++) {
 800173e:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8001742:	f103 030c 	add.w	r3, r3, #12
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	3301      	adds	r3, #1
 800174a:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800174e:	f102 020c 	add.w	r2, r2, #12
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8001758:	f103 030c 	add.w	r3, r3, #12
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	2b09      	cmp	r3, #9
 8001760:	dd96      	ble.n	8001690 <letter_select+0x698>
		}
	}
	break;
 8001762:	f001 b9e2 	b.w	8002b2a <letter_select+0x1b32>


	case 'E':
	for (int i=0; i<10; i++) {
 8001766:	2300      	movs	r3, #0
 8001768:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800176c:	f102 0204 	add.w	r2, r2, #4
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	e055      	b.n	8001820 <letter_select+0x828>
		for (int j=0; j<4; j++) {
 8001774:	2300      	movs	r3, #0
 8001776:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800177a:	6013      	str	r3, [r2, #0]
 800177c:	e040      	b.n	8001800 <letter_select+0x808>

			int x_pos = j + x;
 800177e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001782:	3b1c      	subs	r3, #28
 8001784:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8001788:	6812      	ldr	r2, [r2, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4413      	add	r3, r2
 800178e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001792:	f102 020c 	add.w	r2, r2, #12
 8001796:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001798:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800179c:	f103 0308 	add.w	r3, r3, #8
 80017a0:	f107 0208 	add.w	r2, r7, #8
 80017a4:	f507 5195 	add.w	r1, r7, #4768	; 0x12a0
 80017a8:	f101 0104 	add.w	r1, r1, #4
 80017ac:	6809      	ldr	r1, [r1, #0]
 80017ae:	6812      	ldr	r2, [r2, #0]
 80017b0:	440a      	add	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_E[i][j]);
 80017b4:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80017b8:	f103 030c 	add.w	r3, r3, #12
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	b298      	uxth	r0, r3
 80017c0:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80017c4:	f103 0308 	add.w	r3, r3, #8
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	b29c      	uxth	r4, r3
 80017cc:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80017d0:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80017d4:	f102 0204 	add.w	r2, r2, #4
 80017d8:	6812      	ldr	r2, [r2, #0]
 80017da:	0091      	lsls	r1, r2, #2
 80017dc:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80017e0:	6812      	ldr	r2, [r2, #0]
 80017e2:	440a      	add	r2, r1
 80017e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	461a      	mov	r2, r3
 80017ec:	4621      	mov	r1, r4
 80017ee:	f002 fb2f 	bl	8003e50 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 80017f2:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	3301      	adds	r3, #1
 80017fa:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b03      	cmp	r3, #3
 8001808:	ddb9      	ble.n	800177e <letter_select+0x786>
	for (int i=0; i<10; i++) {
 800180a:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800180e:	f103 0304 	add.w	r3, r3, #4
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	3301      	adds	r3, #1
 8001816:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800181a:	f102 0204 	add.w	r2, r2, #4
 800181e:	6013      	str	r3, [r2, #0]
 8001820:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8001824:	f103 0304 	add.w	r3, r3, #4
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b09      	cmp	r3, #9
 800182c:	dda2      	ble.n	8001774 <letter_select+0x77c>
		}
	}
	break;
 800182e:	f001 b97c 	b.w	8002b2a <letter_select+0x1b32>


	case 'F':
	for (int i=0; i<10; i++) {
 8001832:	2300      	movs	r3, #0
 8001834:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001838:	f102 021c 	add.w	r2, r2, #28
 800183c:	6013      	str	r3, [r2, #0]
 800183e:	e05d      	b.n	80018fc <letter_select+0x904>
		for (int j=0; j<4; j++) {
 8001840:	2300      	movs	r3, #0
 8001842:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001846:	f102 0218 	add.w	r2, r2, #24
 800184a:	6013      	str	r3, [r2, #0]
 800184c:	e044      	b.n	80018d8 <letter_select+0x8e0>

			int x_pos = j + x;
 800184e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001852:	f102 0204 	add.w	r2, r2, #4
 8001856:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800185a:	3b1c      	subs	r3, #28
 800185c:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 8001860:	f101 0118 	add.w	r1, r1, #24
 8001864:	6809      	ldr	r1, [r1, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	440b      	add	r3, r1
 800186a:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 800186c:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8001870:	f107 0208 	add.w	r2, r7, #8
 8001874:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 8001878:	f101 011c 	add.w	r1, r1, #28
 800187c:	6809      	ldr	r1, [r1, #0]
 800187e:	6812      	ldr	r2, [r2, #0]
 8001880:	440a      	add	r2, r1
 8001882:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_F[i][j]);
 8001884:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8001888:	f103 0304 	add.w	r3, r3, #4
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	b298      	uxth	r0, r3
 8001890:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	b29c      	uxth	r4, r3
 8001898:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 800189c:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80018a0:	f102 021c 	add.w	r2, r2, #28
 80018a4:	6812      	ldr	r2, [r2, #0]
 80018a6:	0091      	lsls	r1, r2, #2
 80018a8:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80018ac:	f102 0218 	add.w	r2, r2, #24
 80018b0:	6812      	ldr	r2, [r2, #0]
 80018b2:	440a      	add	r2, r1
 80018b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	461a      	mov	r2, r3
 80018bc:	4621      	mov	r1, r4
 80018be:	f002 fac7 	bl	8003e50 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 80018c2:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 80018c6:	f103 0318 	add.w	r3, r3, #24
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	3301      	adds	r3, #1
 80018ce:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80018d2:	f102 0218 	add.w	r2, r2, #24
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 80018dc:	f103 0318 	add.w	r3, r3, #24
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2b03      	cmp	r3, #3
 80018e4:	ddb3      	ble.n	800184e <letter_select+0x856>
	for (int i=0; i<10; i++) {
 80018e6:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 80018ea:	f103 031c 	add.w	r3, r3, #28
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	3301      	adds	r3, #1
 80018f2:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80018f6:	f102 021c 	add.w	r2, r2, #28
 80018fa:	6013      	str	r3, [r2, #0]
 80018fc:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8001900:	f103 031c 	add.w	r3, r3, #28
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b09      	cmp	r3, #9
 8001908:	dd9a      	ble.n	8001840 <letter_select+0x848>
		}
	}
	break;
 800190a:	f001 b90e 	b.w	8002b2a <letter_select+0x1b32>


	case 'G':
	for (int i=0; i<10; i++) {
 800190e:	2300      	movs	r3, #0
 8001910:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001914:	f102 0214 	add.w	r2, r2, #20
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	e061      	b.n	80019e0 <letter_select+0x9e8>
		for (int j=0; j<4; j++) {
 800191c:	2300      	movs	r3, #0
 800191e:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001922:	f102 0210 	add.w	r2, r2, #16
 8001926:	6013      	str	r3, [r2, #0]
 8001928:	e048      	b.n	80019bc <letter_select+0x9c4>

			int x_pos = j + x;
 800192a:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 800192e:	f102 021c 	add.w	r2, r2, #28
 8001932:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001936:	3b1c      	subs	r3, #28
 8001938:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 800193c:	f101 0110 	add.w	r1, r1, #16
 8001940:	6809      	ldr	r1, [r1, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	440b      	add	r3, r1
 8001946:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001948:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 800194c:	f103 0318 	add.w	r3, r3, #24
 8001950:	f107 0208 	add.w	r2, r7, #8
 8001954:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 8001958:	f101 0114 	add.w	r1, r1, #20
 800195c:	6809      	ldr	r1, [r1, #0]
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	440a      	add	r2, r1
 8001962:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_G[i][j]);
 8001964:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8001968:	f103 031c 	add.w	r3, r3, #28
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	b298      	uxth	r0, r3
 8001970:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8001974:	f103 0318 	add.w	r3, r3, #24
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	b29c      	uxth	r4, r3
 800197c:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8001980:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001984:	f102 0214 	add.w	r2, r2, #20
 8001988:	6812      	ldr	r2, [r2, #0]
 800198a:	0091      	lsls	r1, r2, #2
 800198c:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001990:	f102 0210 	add.w	r2, r2, #16
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	440a      	add	r2, r1
 8001998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800199c:	b2db      	uxtb	r3, r3
 800199e:	461a      	mov	r2, r3
 80019a0:	4621      	mov	r1, r4
 80019a2:	f002 fa55 	bl	8003e50 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 80019a6:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 80019aa:	f103 0310 	add.w	r3, r3, #16
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	3301      	adds	r3, #1
 80019b2:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80019b6:	f102 0210 	add.w	r2, r2, #16
 80019ba:	6013      	str	r3, [r2, #0]
 80019bc:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 80019c0:	f103 0310 	add.w	r3, r3, #16
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	ddaf      	ble.n	800192a <letter_select+0x932>
	for (int i=0; i<10; i++) {
 80019ca:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 80019ce:	f103 0314 	add.w	r3, r3, #20
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	3301      	adds	r3, #1
 80019d6:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80019da:	f102 0214 	add.w	r2, r2, #20
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 80019e4:	f103 0314 	add.w	r3, r3, #20
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b09      	cmp	r3, #9
 80019ec:	dd96      	ble.n	800191c <letter_select+0x924>
		}
	}
	break;
 80019ee:	f001 b89c 	b.w	8002b2a <letter_select+0x1b32>


	case 'H':
	for (int i=0; i<10; i++) {
 80019f2:	2300      	movs	r3, #0
 80019f4:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80019f8:	f102 020c 	add.w	r2, r2, #12
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e061      	b.n	8001ac4 <letter_select+0xacc>
		for (int j=0; j<4; j++) {
 8001a00:	2300      	movs	r3, #0
 8001a02:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001a06:	f102 0208 	add.w	r2, r2, #8
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	e048      	b.n	8001aa0 <letter_select+0xaa8>

			int x_pos = j + x;
 8001a0e:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8001a12:	f102 0214 	add.w	r2, r2, #20
 8001a16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a1a:	3b1c      	subs	r3, #28
 8001a1c:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 8001a20:	f101 0108 	add.w	r1, r1, #8
 8001a24:	6809      	ldr	r1, [r1, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	440b      	add	r3, r1
 8001a2a:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001a2c:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8001a30:	f103 0310 	add.w	r3, r3, #16
 8001a34:	f107 0208 	add.w	r2, r7, #8
 8001a38:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 8001a3c:	f101 010c 	add.w	r1, r1, #12
 8001a40:	6809      	ldr	r1, [r1, #0]
 8001a42:	6812      	ldr	r2, [r2, #0]
 8001a44:	440a      	add	r2, r1
 8001a46:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_H[i][j]);
 8001a48:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8001a4c:	f103 0314 	add.w	r3, r3, #20
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	b298      	uxth	r0, r3
 8001a54:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8001a58:	f103 0310 	add.w	r3, r3, #16
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	b29c      	uxth	r4, r3
 8001a60:	f607 4318 	addw	r3, r7, #3096	; 0xc18
 8001a64:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001a68:	f102 020c 	add.w	r2, r2, #12
 8001a6c:	6812      	ldr	r2, [r2, #0]
 8001a6e:	0091      	lsls	r1, r2, #2
 8001a70:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001a74:	f102 0208 	add.w	r2, r2, #8
 8001a78:	6812      	ldr	r2, [r2, #0]
 8001a7a:	440a      	add	r2, r1
 8001a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	461a      	mov	r2, r3
 8001a84:	4621      	mov	r1, r4
 8001a86:	f002 f9e3 	bl	8003e50 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8001a8a:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8001a8e:	f103 0308 	add.w	r3, r3, #8
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	3301      	adds	r3, #1
 8001a96:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001a9a:	f102 0208 	add.w	r2, r2, #8
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8001aa4:	f103 0308 	add.w	r3, r3, #8
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	ddaf      	ble.n	8001a0e <letter_select+0xa16>
	for (int i=0; i<10; i++) {
 8001aae:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8001ab2:	f103 030c 	add.w	r3, r3, #12
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001abe:	f102 020c 	add.w	r2, r2, #12
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8001ac8:	f103 030c 	add.w	r3, r3, #12
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	2b09      	cmp	r3, #9
 8001ad0:	dd96      	ble.n	8001a00 <letter_select+0xa08>
		}
	}
	break;
 8001ad2:	f001 b82a 	b.w	8002b2a <letter_select+0x1b32>


	case 'I':
	for (int i=0; i<10; i++) {
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001adc:	f102 0204 	add.w	r2, r2, #4
 8001ae0:	6013      	str	r3, [r2, #0]
 8001ae2:	e057      	b.n	8001b94 <letter_select+0xb9c>
		for (int j=0; j<3; j++) {
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	e042      	b.n	8001b74 <letter_select+0xb7c>

			int x_pos = j + x;
 8001aee:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8001af2:	f102 020c 	add.w	r2, r2, #12
 8001af6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001afa:	3b1c      	subs	r3, #28
 8001afc:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 8001b00:	6809      	ldr	r1, [r1, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	440b      	add	r3, r1
 8001b06:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001b08:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8001b0c:	f103 0308 	add.w	r3, r3, #8
 8001b10:	f107 0208 	add.w	r2, r7, #8
 8001b14:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 8001b18:	f101 0104 	add.w	r1, r1, #4
 8001b1c:	6809      	ldr	r1, [r1, #0]
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	440a      	add	r2, r1
 8001b22:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_I[i][j]);
 8001b24:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8001b28:	f103 030c 	add.w	r3, r3, #12
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	b298      	uxth	r0, r3
 8001b30:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8001b34:	f103 0308 	add.w	r3, r3, #8
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	b29c      	uxth	r4, r3
 8001b3c:	f507 613a 	add.w	r1, r7, #2976	; 0xba0
 8001b40:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8001b44:	f103 0304 	add.w	r3, r3, #4
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4413      	add	r3, r2
 8001b50:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001b54:	6812      	ldr	r2, [r2, #0]
 8001b56:	4413      	add	r3, r2
 8001b58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4621      	mov	r1, r4
 8001b62:	f002 f975 	bl	8003e50 <UB_VGA_SetPixel>
		for (int j=0; j<3; j++) {
 8001b66:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001b72:	6013      	str	r3, [r2, #0]
 8001b74:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	ddb7      	ble.n	8001aee <letter_select+0xaf6>
	for (int i=0; i<10; i++) {
 8001b7e:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8001b82:	f103 0304 	add.w	r3, r3, #4
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	3301      	adds	r3, #1
 8001b8a:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8001b8e:	f102 0204 	add.w	r2, r2, #4
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8001b98:	f103 0304 	add.w	r3, r3, #4
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2b09      	cmp	r3, #9
 8001ba0:	dda0      	ble.n	8001ae4 <letter_select+0xaec>
		}
	}
	break;
 8001ba2:	f000 bfc2 	b.w	8002b2a <letter_select+0x1b32>


	case 'J':
	for (int i=0; i<10; i++) {
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001bac:	f102 021c 	add.w	r2, r2, #28
 8001bb0:	6013      	str	r3, [r2, #0]
 8001bb2:	e05d      	b.n	8001c70 <letter_select+0xc78>
		for (int j=0; j<4; j++) {
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001bba:	f102 0218 	add.w	r2, r2, #24
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	e044      	b.n	8001c4c <letter_select+0xc54>

			int x_pos = j + x;
 8001bc2:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8001bc6:	f102 0204 	add.w	r2, r2, #4
 8001bca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bce:	3b1c      	subs	r3, #28
 8001bd0:	f507 5193 	add.w	r1, r7, #4704	; 0x1260
 8001bd4:	f101 0118 	add.w	r1, r1, #24
 8001bd8:	6809      	ldr	r1, [r1, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	440b      	add	r3, r1
 8001bde:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001be0:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8001be4:	f107 0208 	add.w	r2, r7, #8
 8001be8:	f507 5193 	add.w	r1, r7, #4704	; 0x1260
 8001bec:	f101 011c 	add.w	r1, r1, #28
 8001bf0:	6809      	ldr	r1, [r1, #0]
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	440a      	add	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_J[i][j]);
 8001bf8:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8001bfc:	f103 0304 	add.w	r3, r3, #4
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	b298      	uxth	r0, r3
 8001c04:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	b29c      	uxth	r4, r3
 8001c0c:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001c10:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001c14:	f102 021c 	add.w	r2, r2, #28
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	0091      	lsls	r1, r2, #2
 8001c1c:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001c20:	f102 0218 	add.w	r2, r2, #24
 8001c24:	6812      	ldr	r2, [r2, #0]
 8001c26:	440a      	add	r2, r1
 8001c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	461a      	mov	r2, r3
 8001c30:	4621      	mov	r1, r4
 8001c32:	f002 f90d 	bl	8003e50 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8001c36:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001c3a:	f103 0318 	add.w	r3, r3, #24
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	3301      	adds	r3, #1
 8001c42:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001c46:	f102 0218 	add.w	r2, r2, #24
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001c50:	f103 0318 	add.w	r3, r3, #24
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	ddb3      	ble.n	8001bc2 <letter_select+0xbca>
	for (int i=0; i<10; i++) {
 8001c5a:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001c5e:	f103 031c 	add.w	r3, r3, #28
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	3301      	adds	r3, #1
 8001c66:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001c6a:	f102 021c 	add.w	r2, r2, #28
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001c74:	f103 031c 	add.w	r3, r3, #28
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2b09      	cmp	r3, #9
 8001c7c:	dd9a      	ble.n	8001bb4 <letter_select+0xbbc>
		}
	}
	break;
 8001c7e:	f000 bf54 	b.w	8002b2a <letter_select+0x1b32>


	case 'K':
	for (int i=0; i<10; i++) {
 8001c82:	2300      	movs	r3, #0
 8001c84:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001c88:	f102 0214 	add.w	r2, r2, #20
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	e061      	b.n	8001d54 <letter_select+0xd5c>
		for (int j=0; j<4; j++) {
 8001c90:	2300      	movs	r3, #0
 8001c92:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001c96:	f102 0210 	add.w	r2, r2, #16
 8001c9a:	6013      	str	r3, [r2, #0]
 8001c9c:	e048      	b.n	8001d30 <letter_select+0xd38>

			int x_pos = j + x;
 8001c9e:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 8001ca2:	f102 021c 	add.w	r2, r2, #28
 8001ca6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001caa:	3b1c      	subs	r3, #28
 8001cac:	f507 5193 	add.w	r1, r7, #4704	; 0x1260
 8001cb0:	f101 0110 	add.w	r1, r1, #16
 8001cb4:	6809      	ldr	r1, [r1, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	440b      	add	r3, r1
 8001cba:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001cbc:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001cc0:	f103 0318 	add.w	r3, r3, #24
 8001cc4:	f107 0208 	add.w	r2, r7, #8
 8001cc8:	f507 5193 	add.w	r1, r7, #4704	; 0x1260
 8001ccc:	f101 0114 	add.w	r1, r1, #20
 8001cd0:	6809      	ldr	r1, [r1, #0]
 8001cd2:	6812      	ldr	r2, [r2, #0]
 8001cd4:	440a      	add	r2, r1
 8001cd6:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_K[i][j]);
 8001cd8:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001cdc:	f103 031c 	add.w	r3, r3, #28
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	b298      	uxth	r0, r3
 8001ce4:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001ce8:	f103 0318 	add.w	r3, r3, #24
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	b29c      	uxth	r4, r3
 8001cf0:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8001cf4:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001cf8:	f102 0214 	add.w	r2, r2, #20
 8001cfc:	6812      	ldr	r2, [r2, #0]
 8001cfe:	0091      	lsls	r1, r2, #2
 8001d00:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001d04:	f102 0210 	add.w	r2, r2, #16
 8001d08:	6812      	ldr	r2, [r2, #0]
 8001d0a:	440a      	add	r2, r1
 8001d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	461a      	mov	r2, r3
 8001d14:	4621      	mov	r1, r4
 8001d16:	f002 f89b 	bl	8003e50 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8001d1a:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001d1e:	f103 0310 	add.w	r3, r3, #16
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	3301      	adds	r3, #1
 8001d26:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001d2a:	f102 0210 	add.w	r2, r2, #16
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001d34:	f103 0310 	add.w	r3, r3, #16
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	ddaf      	ble.n	8001c9e <letter_select+0xca6>
	for (int i=0; i<10; i++) {
 8001d3e:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001d42:	f103 0314 	add.w	r3, r3, #20
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001d4e:	f102 0214 	add.w	r2, r2, #20
 8001d52:	6013      	str	r3, [r2, #0]
 8001d54:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001d58:	f103 0314 	add.w	r3, r3, #20
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2b09      	cmp	r3, #9
 8001d60:	dd96      	ble.n	8001c90 <letter_select+0xc98>
		}
	}
	break;
 8001d62:	f000 bee2 	b.w	8002b2a <letter_select+0x1b32>


	case 'L':
	for (int i=0; i<10; i++) {
 8001d66:	2300      	movs	r3, #0
 8001d68:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001d6c:	f102 020c 	add.w	r2, r2, #12
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	e061      	b.n	8001e38 <letter_select+0xe40>
		for (int j=0; j<4; j++) {
 8001d74:	2300      	movs	r3, #0
 8001d76:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001d7a:	f102 0208 	add.w	r2, r2, #8
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	e048      	b.n	8001e14 <letter_select+0xe1c>

			int x_pos = j + x;
 8001d82:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 8001d86:	f102 0214 	add.w	r2, r2, #20
 8001d8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d8e:	3b1c      	subs	r3, #28
 8001d90:	f507 5193 	add.w	r1, r7, #4704	; 0x1260
 8001d94:	f101 0108 	add.w	r1, r1, #8
 8001d98:	6809      	ldr	r1, [r1, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	440b      	add	r3, r1
 8001d9e:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001da0:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001da4:	f103 0310 	add.w	r3, r3, #16
 8001da8:	f107 0208 	add.w	r2, r7, #8
 8001dac:	f507 5193 	add.w	r1, r7, #4704	; 0x1260
 8001db0:	f101 010c 	add.w	r1, r1, #12
 8001db4:	6809      	ldr	r1, [r1, #0]
 8001db6:	6812      	ldr	r2, [r2, #0]
 8001db8:	440a      	add	r2, r1
 8001dba:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_L[i][j]);
 8001dbc:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001dc0:	f103 0314 	add.w	r3, r3, #20
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	b298      	uxth	r0, r3
 8001dc8:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001dcc:	f103 0310 	add.w	r3, r3, #16
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	b29c      	uxth	r4, r3
 8001dd4:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8001dd8:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001ddc:	f102 020c 	add.w	r2, r2, #12
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	0091      	lsls	r1, r2, #2
 8001de4:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001de8:	f102 0208 	add.w	r2, r2, #8
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	440a      	add	r2, r1
 8001df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	461a      	mov	r2, r3
 8001df8:	4621      	mov	r1, r4
 8001dfa:	f002 f829 	bl	8003e50 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8001dfe:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001e02:	f103 0308 	add.w	r3, r3, #8
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	3301      	adds	r3, #1
 8001e0a:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001e0e:	f102 0208 	add.w	r2, r2, #8
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001e18:	f103 0308 	add.w	r3, r3, #8
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2b03      	cmp	r3, #3
 8001e20:	ddaf      	ble.n	8001d82 <letter_select+0xd8a>
	for (int i=0; i<10; i++) {
 8001e22:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001e26:	f103 030c 	add.w	r3, r3, #12
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001e32:	f102 020c 	add.w	r2, r2, #12
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001e3c:	f103 030c 	add.w	r3, r3, #12
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2b09      	cmp	r3, #9
 8001e44:	dd96      	ble.n	8001d74 <letter_select+0xd7c>
		}
	}
	break;
 8001e46:	f000 be70 	b.w	8002b2a <letter_select+0x1b32>


	case 'M':
	for (int i=0; i<10; i++) {
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001e50:	f102 0204 	add.w	r2, r2, #4
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	e055      	b.n	8001f04 <letter_select+0xf0c>
		for (int j=0; j<4; j++) {
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	e040      	b.n	8001ee4 <letter_select+0xeec>

			int x_pos = j + x;
 8001e62:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 8001e66:	f102 020c 	add.w	r2, r2, #12
 8001e6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e6e:	3b1c      	subs	r3, #28
 8001e70:	f507 5193 	add.w	r1, r7, #4704	; 0x1260
 8001e74:	6809      	ldr	r1, [r1, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	440b      	add	r3, r1
 8001e7a:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001e7c:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001e80:	f103 0308 	add.w	r3, r3, #8
 8001e84:	f107 0208 	add.w	r2, r7, #8
 8001e88:	f507 5193 	add.w	r1, r7, #4704	; 0x1260
 8001e8c:	f101 0104 	add.w	r1, r1, #4
 8001e90:	6809      	ldr	r1, [r1, #0]
 8001e92:	6812      	ldr	r2, [r2, #0]
 8001e94:	440a      	add	r2, r1
 8001e96:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_M[i][j]);
 8001e98:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001e9c:	f103 030c 	add.w	r3, r3, #12
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	b298      	uxth	r0, r3
 8001ea4:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001ea8:	f103 0308 	add.w	r3, r3, #8
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	b29c      	uxth	r4, r3
 8001eb0:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8001eb4:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001eb8:	f102 0204 	add.w	r2, r2, #4
 8001ebc:	6812      	ldr	r2, [r2, #0]
 8001ebe:	0091      	lsls	r1, r2, #2
 8001ec0:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	440a      	add	r2, r1
 8001ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4621      	mov	r1, r4
 8001ed2:	f001 ffbd 	bl	8003e50 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8001ed6:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	3301      	adds	r3, #1
 8001ede:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001ee2:	6013      	str	r3, [r2, #0]
 8001ee4:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	ddb9      	ble.n	8001e62 <letter_select+0xe6a>
	for (int i=0; i<10; i++) {
 8001eee:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001ef2:	f103 0304 	add.w	r3, r3, #4
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8001efe:	f102 0204 	add.w	r2, r2, #4
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8001f08:	f103 0304 	add.w	r3, r3, #4
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2b09      	cmp	r3, #9
 8001f10:	dda2      	ble.n	8001e58 <letter_select+0xe60>
		}
	}
	break;
 8001f12:	f000 be0a 	b.w	8002b2a <letter_select+0x1b32>


	case 'N':
	for (int i=0; i<10; i++) {
 8001f16:	2300      	movs	r3, #0
 8001f18:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8001f1c:	f102 021c 	add.w	r2, r2, #28
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	e05d      	b.n	8001fe0 <letter_select+0xfe8>
		for (int j=0; j<4; j++) {
 8001f24:	2300      	movs	r3, #0
 8001f26:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8001f2a:	f102 0218 	add.w	r2, r2, #24
 8001f2e:	6013      	str	r3, [r2, #0]
 8001f30:	e044      	b.n	8001fbc <letter_select+0xfc4>

			int x_pos = j + x;
 8001f32:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 8001f36:	f102 0204 	add.w	r2, r2, #4
 8001f3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f3e:	3b1c      	subs	r3, #28
 8001f40:	f507 5192 	add.w	r1, r7, #4672	; 0x1240
 8001f44:	f101 0118 	add.w	r1, r1, #24
 8001f48:	6809      	ldr	r1, [r1, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	440b      	add	r3, r1
 8001f4e:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001f50:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001f54:	f107 0208 	add.w	r2, r7, #8
 8001f58:	f507 5192 	add.w	r1, r7, #4672	; 0x1240
 8001f5c:	f101 011c 	add.w	r1, r1, #28
 8001f60:	6809      	ldr	r1, [r1, #0]
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	440a      	add	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_N[i][j]);
 8001f68:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001f6c:	f103 0304 	add.w	r3, r3, #4
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	b298      	uxth	r0, r3
 8001f74:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	b29c      	uxth	r4, r3
 8001f7c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8001f80:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8001f84:	f102 021c 	add.w	r2, r2, #28
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	0091      	lsls	r1, r2, #2
 8001f8c:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8001f90:	f102 0218 	add.w	r2, r2, #24
 8001f94:	6812      	ldr	r2, [r2, #0]
 8001f96:	440a      	add	r2, r1
 8001f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	4621      	mov	r1, r4
 8001fa2:	f001 ff55 	bl	8003e50 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8001fa6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001faa:	f103 0318 	add.w	r3, r3, #24
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8001fb6:	f102 0218 	add.w	r2, r2, #24
 8001fba:	6013      	str	r3, [r2, #0]
 8001fbc:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001fc0:	f103 0318 	add.w	r3, r3, #24
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	ddb3      	ble.n	8001f32 <letter_select+0xf3a>
	for (int i=0; i<10; i++) {
 8001fca:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001fce:	f103 031c 	add.w	r3, r3, #28
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8001fda:	f102 021c 	add.w	r2, r2, #28
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001fe4:	f103 031c 	add.w	r3, r3, #28
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b09      	cmp	r3, #9
 8001fec:	dd9a      	ble.n	8001f24 <letter_select+0xf2c>
		}
	}
	break;
 8001fee:	f000 bd9c 	b.w	8002b2a <letter_select+0x1b32>


	case 'O':
	for (int i=0; i<10; i++) {
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8001ff8:	f102 0214 	add.w	r2, r2, #20
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	e061      	b.n	80020c4 <letter_select+0x10cc>
		for (int j=0; j<4; j++) {
 8002000:	2300      	movs	r3, #0
 8002002:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8002006:	f102 0210 	add.w	r2, r2, #16
 800200a:	6013      	str	r3, [r2, #0]
 800200c:	e048      	b.n	80020a0 <letter_select+0x10a8>

			int x_pos = j + x;
 800200e:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8002012:	f102 021c 	add.w	r2, r2, #28
 8002016:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800201a:	3b1c      	subs	r3, #28
 800201c:	f507 5192 	add.w	r1, r7, #4672	; 0x1240
 8002020:	f101 0110 	add.w	r1, r1, #16
 8002024:	6809      	ldr	r1, [r1, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	440b      	add	r3, r1
 800202a:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 800202c:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8002030:	f103 0318 	add.w	r3, r3, #24
 8002034:	f107 0208 	add.w	r2, r7, #8
 8002038:	f507 5192 	add.w	r1, r7, #4672	; 0x1240
 800203c:	f101 0114 	add.w	r1, r1, #20
 8002040:	6809      	ldr	r1, [r1, #0]
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	440a      	add	r2, r1
 8002046:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_O[i][j]);
 8002048:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 800204c:	f103 031c 	add.w	r3, r3, #28
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	b298      	uxth	r0, r3
 8002054:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8002058:	f103 0318 	add.w	r3, r3, #24
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	b29c      	uxth	r4, r3
 8002060:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8002064:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8002068:	f102 0214 	add.w	r2, r2, #20
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	0091      	lsls	r1, r2, #2
 8002070:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8002074:	f102 0210 	add.w	r2, r2, #16
 8002078:	6812      	ldr	r2, [r2, #0]
 800207a:	440a      	add	r2, r1
 800207c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002080:	b2db      	uxtb	r3, r3
 8002082:	461a      	mov	r2, r3
 8002084:	4621      	mov	r1, r4
 8002086:	f001 fee3 	bl	8003e50 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 800208a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800208e:	f103 0310 	add.w	r3, r3, #16
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	3301      	adds	r3, #1
 8002096:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 800209a:	f102 0210 	add.w	r2, r2, #16
 800209e:	6013      	str	r3, [r2, #0]
 80020a0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80020a4:	f103 0310 	add.w	r3, r3, #16
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2b03      	cmp	r3, #3
 80020ac:	ddaf      	ble.n	800200e <letter_select+0x1016>
	for (int i=0; i<10; i++) {
 80020ae:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80020b2:	f103 0314 	add.w	r3, r3, #20
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	3301      	adds	r3, #1
 80020ba:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 80020be:	f102 0214 	add.w	r2, r2, #20
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80020c8:	f103 0314 	add.w	r3, r3, #20
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b09      	cmp	r3, #9
 80020d0:	dd96      	ble.n	8002000 <letter_select+0x1008>
		}
	}
	break;
 80020d2:	f000 bd2a 	b.w	8002b2a <letter_select+0x1b32>


	case 'P':
	for (int i=0; i<10; i++) {
 80020d6:	2300      	movs	r3, #0
 80020d8:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 80020dc:	f102 020c 	add.w	r2, r2, #12
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e061      	b.n	80021a8 <letter_select+0x11b0>
		for (int j=0; j<4; j++) {
 80020e4:	2300      	movs	r3, #0
 80020e6:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 80020ea:	f102 0208 	add.w	r2, r2, #8
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	e048      	b.n	8002184 <letter_select+0x118c>

			int x_pos = j + x;
 80020f2:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80020f6:	f102 0214 	add.w	r2, r2, #20
 80020fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020fe:	3b1c      	subs	r3, #28
 8002100:	f507 5192 	add.w	r1, r7, #4672	; 0x1240
 8002104:	f101 0108 	add.w	r1, r1, #8
 8002108:	6809      	ldr	r1, [r1, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	440b      	add	r3, r1
 800210e:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8002110:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8002114:	f103 0310 	add.w	r3, r3, #16
 8002118:	f107 0208 	add.w	r2, r7, #8
 800211c:	f507 5192 	add.w	r1, r7, #4672	; 0x1240
 8002120:	f101 010c 	add.w	r1, r1, #12
 8002124:	6809      	ldr	r1, [r1, #0]
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	440a      	add	r2, r1
 800212a:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_P[i][j]);
 800212c:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8002130:	f103 0314 	add.w	r3, r3, #20
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	b298      	uxth	r0, r3
 8002138:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 800213c:	f103 0310 	add.w	r3, r3, #16
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	b29c      	uxth	r4, r3
 8002144:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8002148:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 800214c:	f102 020c 	add.w	r2, r2, #12
 8002150:	6812      	ldr	r2, [r2, #0]
 8002152:	0091      	lsls	r1, r2, #2
 8002154:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8002158:	f102 0208 	add.w	r2, r2, #8
 800215c:	6812      	ldr	r2, [r2, #0]
 800215e:	440a      	add	r2, r1
 8002160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002164:	b2db      	uxtb	r3, r3
 8002166:	461a      	mov	r2, r3
 8002168:	4621      	mov	r1, r4
 800216a:	f001 fe71 	bl	8003e50 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 800216e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002172:	f103 0308 	add.w	r3, r3, #8
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	3301      	adds	r3, #1
 800217a:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 800217e:	f102 0208 	add.w	r2, r2, #8
 8002182:	6013      	str	r3, [r2, #0]
 8002184:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002188:	f103 0308 	add.w	r3, r3, #8
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b03      	cmp	r3, #3
 8002190:	ddaf      	ble.n	80020f2 <letter_select+0x10fa>
	for (int i=0; i<10; i++) {
 8002192:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002196:	f103 030c 	add.w	r3, r3, #12
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	3301      	adds	r3, #1
 800219e:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 80021a2:	f102 020c 	add.w	r2, r2, #12
 80021a6:	6013      	str	r3, [r2, #0]
 80021a8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80021ac:	f103 030c 	add.w	r3, r3, #12
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2b09      	cmp	r3, #9
 80021b4:	dd96      	ble.n	80020e4 <letter_select+0x10ec>
		}
	}
	break;
 80021b6:	f000 bcb8 	b.w	8002b2a <letter_select+0x1b32>


	case 'Q':
	for (int i=0; i<10; i++) {
 80021ba:	2300      	movs	r3, #0
 80021bc:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 80021c0:	f102 0204 	add.w	r2, r2, #4
 80021c4:	6013      	str	r3, [r2, #0]
 80021c6:	e055      	b.n	8002274 <letter_select+0x127c>
		for (int j=0; j<4; j++) {
 80021c8:	2300      	movs	r3, #0
 80021ca:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 80021ce:	6013      	str	r3, [r2, #0]
 80021d0:	e040      	b.n	8002254 <letter_select+0x125c>

			int x_pos = j + x;
 80021d2:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80021d6:	f102 020c 	add.w	r2, r2, #12
 80021da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021de:	3b1c      	subs	r3, #28
 80021e0:	f507 5192 	add.w	r1, r7, #4672	; 0x1240
 80021e4:	6809      	ldr	r1, [r1, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	440b      	add	r3, r1
 80021ea:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80021ec:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80021f0:	f103 0308 	add.w	r3, r3, #8
 80021f4:	f107 0208 	add.w	r2, r7, #8
 80021f8:	f507 5192 	add.w	r1, r7, #4672	; 0x1240
 80021fc:	f101 0104 	add.w	r1, r1, #4
 8002200:	6809      	ldr	r1, [r1, #0]
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	440a      	add	r2, r1
 8002206:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_Q[i][j]);
 8002208:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 800220c:	f103 030c 	add.w	r3, r3, #12
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	b298      	uxth	r0, r3
 8002214:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8002218:	f103 0308 	add.w	r3, r3, #8
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	b29c      	uxth	r4, r3
 8002220:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8002224:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8002228:	f102 0204 	add.w	r2, r2, #4
 800222c:	6812      	ldr	r2, [r2, #0]
 800222e:	0091      	lsls	r1, r2, #2
 8002230:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8002234:	6812      	ldr	r2, [r2, #0]
 8002236:	440a      	add	r2, r1
 8002238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800223c:	b2db      	uxtb	r3, r3
 800223e:	461a      	mov	r2, r3
 8002240:	4621      	mov	r1, r4
 8002242:	f001 fe05 	bl	8003e50 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8002246:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	3301      	adds	r3, #1
 800224e:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8002252:	6013      	str	r3, [r2, #0]
 8002254:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b03      	cmp	r3, #3
 800225c:	ddb9      	ble.n	80021d2 <letter_select+0x11da>
	for (int i=0; i<10; i++) {
 800225e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002262:	f103 0304 	add.w	r3, r3, #4
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	3301      	adds	r3, #1
 800226a:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 800226e:	f102 0204 	add.w	r2, r2, #4
 8002272:	6013      	str	r3, [r2, #0]
 8002274:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002278:	f103 0304 	add.w	r3, r3, #4
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	2b09      	cmp	r3, #9
 8002280:	dda2      	ble.n	80021c8 <letter_select+0x11d0>
		}
	}
	break;
 8002282:	f000 bc52 	b.w	8002b2a <letter_select+0x1b32>


	case 'R':
	for (int i=0; i<10; i++) {
 8002286:	2300      	movs	r3, #0
 8002288:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 800228c:	f102 021c 	add.w	r2, r2, #28
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	e05d      	b.n	8002350 <letter_select+0x1358>
		for (int j=0; j<4; j++) {
 8002294:	2300      	movs	r3, #0
 8002296:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 800229a:	f102 0218 	add.w	r2, r2, #24
 800229e:	6013      	str	r3, [r2, #0]
 80022a0:	e044      	b.n	800232c <letter_select+0x1334>

			int x_pos = j + x;
 80022a2:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80022a6:	f102 0204 	add.w	r2, r2, #4
 80022aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022ae:	3b1c      	subs	r3, #28
 80022b0:	f507 5191 	add.w	r1, r7, #4640	; 0x1220
 80022b4:	f101 0118 	add.w	r1, r1, #24
 80022b8:	6809      	ldr	r1, [r1, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	440b      	add	r3, r1
 80022be:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80022c0:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80022c4:	f107 0208 	add.w	r2, r7, #8
 80022c8:	f507 5191 	add.w	r1, r7, #4640	; 0x1220
 80022cc:	f101 011c 	add.w	r1, r1, #28
 80022d0:	6809      	ldr	r1, [r1, #0]
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	440a      	add	r2, r1
 80022d6:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_R[i][j]);
 80022d8:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80022dc:	f103 0304 	add.w	r3, r3, #4
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	b298      	uxth	r0, r3
 80022e4:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	b29c      	uxth	r4, r3
 80022ec:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80022f0:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80022f4:	f102 021c 	add.w	r2, r2, #28
 80022f8:	6812      	ldr	r2, [r2, #0]
 80022fa:	0091      	lsls	r1, r2, #2
 80022fc:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8002300:	f102 0218 	add.w	r2, r2, #24
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	440a      	add	r2, r1
 8002308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	461a      	mov	r2, r3
 8002310:	4621      	mov	r1, r4
 8002312:	f001 fd9d 	bl	8003e50 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8002316:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 800231a:	f103 0318 	add.w	r3, r3, #24
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	3301      	adds	r3, #1
 8002322:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8002326:	f102 0218 	add.w	r2, r2, #24
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8002330:	f103 0318 	add.w	r3, r3, #24
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b03      	cmp	r3, #3
 8002338:	ddb3      	ble.n	80022a2 <letter_select+0x12aa>
	for (int i=0; i<10; i++) {
 800233a:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 800233e:	f103 031c 	add.w	r3, r3, #28
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	3301      	adds	r3, #1
 8002346:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 800234a:	f102 021c 	add.w	r2, r2, #28
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8002354:	f103 031c 	add.w	r3, r3, #28
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2b09      	cmp	r3, #9
 800235c:	dd9a      	ble.n	8002294 <letter_select+0x129c>
		}
	}
	break;
 800235e:	e3e4      	b.n	8002b2a <letter_select+0x1b32>


	case 'S':
	for (int i=0; i<10; i++) {
 8002360:	2300      	movs	r3, #0
 8002362:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8002366:	f102 0214 	add.w	r2, r2, #20
 800236a:	6013      	str	r3, [r2, #0]
 800236c:	e061      	b.n	8002432 <letter_select+0x143a>
		for (int j=0; j<4; j++) {
 800236e:	2300      	movs	r3, #0
 8002370:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8002374:	f102 0210 	add.w	r2, r2, #16
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	e048      	b.n	800240e <letter_select+0x1416>

			int x_pos = j + x;
 800237c:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8002380:	f102 021c 	add.w	r2, r2, #28
 8002384:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002388:	3b1c      	subs	r3, #28
 800238a:	f507 5191 	add.w	r1, r7, #4640	; 0x1220
 800238e:	f101 0110 	add.w	r1, r1, #16
 8002392:	6809      	ldr	r1, [r1, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	440b      	add	r3, r1
 8002398:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 800239a:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800239e:	f103 0318 	add.w	r3, r3, #24
 80023a2:	f107 0208 	add.w	r2, r7, #8
 80023a6:	f507 5191 	add.w	r1, r7, #4640	; 0x1220
 80023aa:	f101 0114 	add.w	r1, r1, #20
 80023ae:	6809      	ldr	r1, [r1, #0]
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	440a      	add	r2, r1
 80023b4:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_S[i][j]);
 80023b6:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80023ba:	f103 031c 	add.w	r3, r3, #28
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	b298      	uxth	r0, r3
 80023c2:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80023c6:	f103 0318 	add.w	r3, r3, #24
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	b29c      	uxth	r4, r3
 80023ce:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80023d2:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80023d6:	f102 0214 	add.w	r2, r2, #20
 80023da:	6812      	ldr	r2, [r2, #0]
 80023dc:	0091      	lsls	r1, r2, #2
 80023de:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80023e2:	f102 0210 	add.w	r2, r2, #16
 80023e6:	6812      	ldr	r2, [r2, #0]
 80023e8:	440a      	add	r2, r1
 80023ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	461a      	mov	r2, r3
 80023f2:	4621      	mov	r1, r4
 80023f4:	f001 fd2c 	bl	8003e50 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 80023f8:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 80023fc:	f103 0310 	add.w	r3, r3, #16
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	3301      	adds	r3, #1
 8002404:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8002408:	f102 0210 	add.w	r2, r2, #16
 800240c:	6013      	str	r3, [r2, #0]
 800240e:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8002412:	f103 0310 	add.w	r3, r3, #16
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2b03      	cmp	r3, #3
 800241a:	ddaf      	ble.n	800237c <letter_select+0x1384>
	for (int i=0; i<10; i++) {
 800241c:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8002420:	f103 0314 	add.w	r3, r3, #20
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	3301      	adds	r3, #1
 8002428:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 800242c:	f102 0214 	add.w	r2, r2, #20
 8002430:	6013      	str	r3, [r2, #0]
 8002432:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8002436:	f103 0314 	add.w	r3, r3, #20
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b09      	cmp	r3, #9
 800243e:	dd96      	ble.n	800236e <letter_select+0x1376>
		}
	}
	break;
 8002440:	e373      	b.n	8002b2a <letter_select+0x1b32>


	case 'T':
	for (int i=0; i<10; i++) {
 8002442:	2300      	movs	r3, #0
 8002444:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8002448:	f102 020c 	add.w	r2, r2, #12
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	e063      	b.n	8002518 <letter_select+0x1520>
		for (int j=0; j<5; j++) {
 8002450:	2300      	movs	r3, #0
 8002452:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8002456:	f102 0208 	add.w	r2, r2, #8
 800245a:	6013      	str	r3, [r2, #0]
 800245c:	e04a      	b.n	80024f4 <letter_select+0x14fc>

			int x_pos = j + x;
 800245e:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8002462:	f102 0214 	add.w	r2, r2, #20
 8002466:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800246a:	3b1c      	subs	r3, #28
 800246c:	f507 5191 	add.w	r1, r7, #4640	; 0x1220
 8002470:	f101 0108 	add.w	r1, r1, #8
 8002474:	6809      	ldr	r1, [r1, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	440b      	add	r3, r1
 800247a:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 800247c:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8002480:	f103 0310 	add.w	r3, r3, #16
 8002484:	f107 0208 	add.w	r2, r7, #8
 8002488:	f507 5191 	add.w	r1, r7, #4640	; 0x1220
 800248c:	f101 010c 	add.w	r1, r1, #12
 8002490:	6809      	ldr	r1, [r1, #0]
 8002492:	6812      	ldr	r2, [r2, #0]
 8002494:	440a      	add	r2, r1
 8002496:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_T[i][j]);
 8002498:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800249c:	f103 0314 	add.w	r3, r3, #20
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	b298      	uxth	r0, r3
 80024a4:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80024a8:	f103 0310 	add.w	r3, r3, #16
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	b29c      	uxth	r4, r3
 80024b0:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 80024b4:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 80024b8:	f103 030c 	add.w	r3, r3, #12
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	4613      	mov	r3, r2
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	4413      	add	r3, r2
 80024c4:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80024c8:	f102 0208 	add.w	r2, r2, #8
 80024cc:	6812      	ldr	r2, [r2, #0]
 80024ce:	4413      	add	r3, r2
 80024d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	461a      	mov	r2, r3
 80024d8:	4621      	mov	r1, r4
 80024da:	f001 fcb9 	bl	8003e50 <UB_VGA_SetPixel>
		for (int j=0; j<5; j++) {
 80024de:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 80024e2:	f103 0308 	add.w	r3, r3, #8
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	3301      	adds	r3, #1
 80024ea:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80024ee:	f102 0208 	add.w	r2, r2, #8
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 80024f8:	f103 0308 	add.w	r3, r3, #8
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b04      	cmp	r3, #4
 8002500:	ddad      	ble.n	800245e <letter_select+0x1466>
	for (int i=0; i<10; i++) {
 8002502:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8002506:	f103 030c 	add.w	r3, r3, #12
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	3301      	adds	r3, #1
 800250e:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8002512:	f102 020c 	add.w	r2, r2, #12
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 800251c:	f103 030c 	add.w	r3, r3, #12
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2b09      	cmp	r3, #9
 8002524:	dd94      	ble.n	8002450 <letter_select+0x1458>
		}
	}
	break;
 8002526:	e300      	b.n	8002b2a <letter_select+0x1b32>


	case 'U':
	for (int i=0; i<10; i++) {
 8002528:	2300      	movs	r3, #0
 800252a:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 800252e:	f102 0204 	add.w	r2, r2, #4
 8002532:	6013      	str	r3, [r2, #0]
 8002534:	e055      	b.n	80025e2 <letter_select+0x15ea>
		for (int j=0; j<4; j++) {
 8002536:	2300      	movs	r3, #0
 8002538:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	e040      	b.n	80025c2 <letter_select+0x15ca>

			int x_pos = j + x;
 8002540:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8002544:	f102 020c 	add.w	r2, r2, #12
 8002548:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800254c:	3b1c      	subs	r3, #28
 800254e:	f507 5191 	add.w	r1, r7, #4640	; 0x1220
 8002552:	6809      	ldr	r1, [r1, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	440b      	add	r3, r1
 8002558:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 800255a:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800255e:	f103 0308 	add.w	r3, r3, #8
 8002562:	f107 0208 	add.w	r2, r7, #8
 8002566:	f507 5191 	add.w	r1, r7, #4640	; 0x1220
 800256a:	f101 0104 	add.w	r1, r1, #4
 800256e:	6809      	ldr	r1, [r1, #0]
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	440a      	add	r2, r1
 8002574:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_U[i][j]);
 8002576:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800257a:	f103 030c 	add.w	r3, r3, #12
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	b298      	uxth	r0, r3
 8002582:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8002586:	f103 0308 	add.w	r3, r3, #8
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	b29c      	uxth	r4, r3
 800258e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8002592:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8002596:	f102 0204 	add.w	r2, r2, #4
 800259a:	6812      	ldr	r2, [r2, #0]
 800259c:	0091      	lsls	r1, r2, #2
 800259e:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80025a2:	6812      	ldr	r2, [r2, #0]
 80025a4:	440a      	add	r2, r1
 80025a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	461a      	mov	r2, r3
 80025ae:	4621      	mov	r1, r4
 80025b0:	f001 fc4e 	bl	8003e50 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 80025b4:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	3301      	adds	r3, #1
 80025bc:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80025c0:	6013      	str	r3, [r2, #0]
 80025c2:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	ddb9      	ble.n	8002540 <letter_select+0x1548>
	for (int i=0; i<10; i++) {
 80025cc:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 80025d0:	f103 0304 	add.w	r3, r3, #4
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	3301      	adds	r3, #1
 80025d8:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80025dc:	f102 0204 	add.w	r2, r2, #4
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 80025e6:	f103 0304 	add.w	r3, r3, #4
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b09      	cmp	r3, #9
 80025ee:	dda2      	ble.n	8002536 <letter_select+0x153e>
		}
	}
	break;
 80025f0:	e29b      	b.n	8002b2a <letter_select+0x1b32>


	case 'V':
	for (int i=0; i<10; i++) {
 80025f2:	2300      	movs	r3, #0
 80025f4:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80025f8:	f102 021c 	add.w	r2, r2, #28
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	e05d      	b.n	80026bc <letter_select+0x16c4>
		for (int j=0; j<4; j++) {
 8002600:	2300      	movs	r3, #0
 8002602:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8002606:	f102 0218 	add.w	r2, r2, #24
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	e044      	b.n	8002698 <letter_select+0x16a0>

			int x_pos = j + x;
 800260e:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8002612:	f102 0204 	add.w	r2, r2, #4
 8002616:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800261a:	3b1c      	subs	r3, #28
 800261c:	f507 5190 	add.w	r1, r7, #4608	; 0x1200
 8002620:	f101 0118 	add.w	r1, r1, #24
 8002624:	6809      	ldr	r1, [r1, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	440b      	add	r3, r1
 800262a:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 800262c:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8002630:	f107 0208 	add.w	r2, r7, #8
 8002634:	f507 5190 	add.w	r1, r7, #4608	; 0x1200
 8002638:	f101 011c 	add.w	r1, r1, #28
 800263c:	6809      	ldr	r1, [r1, #0]
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	440a      	add	r2, r1
 8002642:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_V[i][j]);
 8002644:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8002648:	f103 0304 	add.w	r3, r3, #4
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	b298      	uxth	r0, r3
 8002650:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	b29c      	uxth	r4, r3
 8002658:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800265c:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8002660:	f102 021c 	add.w	r2, r2, #28
 8002664:	6812      	ldr	r2, [r2, #0]
 8002666:	0091      	lsls	r1, r2, #2
 8002668:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 800266c:	f102 0218 	add.w	r2, r2, #24
 8002670:	6812      	ldr	r2, [r2, #0]
 8002672:	440a      	add	r2, r1
 8002674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002678:	b2db      	uxtb	r3, r3
 800267a:	461a      	mov	r2, r3
 800267c:	4621      	mov	r1, r4
 800267e:	f001 fbe7 	bl	8003e50 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8002682:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8002686:	f103 0318 	add.w	r3, r3, #24
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	3301      	adds	r3, #1
 800268e:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8002692:	f102 0218 	add.w	r2, r2, #24
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 800269c:	f103 0318 	add.w	r3, r3, #24
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2b03      	cmp	r3, #3
 80026a4:	ddb3      	ble.n	800260e <letter_select+0x1616>
	for (int i=0; i<10; i++) {
 80026a6:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80026aa:	f103 031c 	add.w	r3, r3, #28
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	3301      	adds	r3, #1
 80026b2:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80026b6:	f102 021c 	add.w	r2, r2, #28
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80026c0:	f103 031c 	add.w	r3, r3, #28
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2b09      	cmp	r3, #9
 80026c8:	dd9a      	ble.n	8002600 <letter_select+0x1608>
		}
	}
	break;
 80026ca:	e22e      	b.n	8002b2a <letter_select+0x1b32>


	case 'W':
	for (int i=0; i<10; i++) {
 80026cc:	2300      	movs	r3, #0
 80026ce:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80026d2:	f102 0214 	add.w	r2, r2, #20
 80026d6:	6013      	str	r3, [r2, #0]
 80026d8:	e062      	b.n	80027a0 <letter_select+0x17a8>
		for (int j=0; j<4; j++) {
 80026da:	2300      	movs	r3, #0
 80026dc:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80026e0:	f102 0210 	add.w	r2, r2, #16
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	e049      	b.n	800277c <letter_select+0x1784>

			int x_pos = j + x;
 80026e8:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 80026ec:	f102 021c 	add.w	r2, r2, #28
 80026f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026f4:	3b1c      	subs	r3, #28
 80026f6:	f507 5190 	add.w	r1, r7, #4608	; 0x1200
 80026fa:	f101 0110 	add.w	r1, r1, #16
 80026fe:	6809      	ldr	r1, [r1, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	440b      	add	r3, r1
 8002704:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8002706:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 800270a:	f103 0318 	add.w	r3, r3, #24
 800270e:	f107 0208 	add.w	r2, r7, #8
 8002712:	f507 5190 	add.w	r1, r7, #4608	; 0x1200
 8002716:	f101 0114 	add.w	r1, r1, #20
 800271a:	6809      	ldr	r1, [r1, #0]
 800271c:	6812      	ldr	r2, [r2, #0]
 800271e:	440a      	add	r2, r1
 8002720:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_W[i][j]);
 8002722:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8002726:	f103 031c 	add.w	r3, r3, #28
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	b298      	uxth	r0, r3
 800272e:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8002732:	f103 0318 	add.w	r3, r3, #24
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	b29c      	uxth	r4, r3
 800273a:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800273e:	3b10      	subs	r3, #16
 8002740:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8002744:	f102 0214 	add.w	r2, r2, #20
 8002748:	6812      	ldr	r2, [r2, #0]
 800274a:	0091      	lsls	r1, r2, #2
 800274c:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8002750:	f102 0210 	add.w	r2, r2, #16
 8002754:	6812      	ldr	r2, [r2, #0]
 8002756:	440a      	add	r2, r1
 8002758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800275c:	b2db      	uxtb	r3, r3
 800275e:	461a      	mov	r2, r3
 8002760:	4621      	mov	r1, r4
 8002762:	f001 fb75 	bl	8003e50 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8002766:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 800276a:	f103 0310 	add.w	r3, r3, #16
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	3301      	adds	r3, #1
 8002772:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8002776:	f102 0210 	add.w	r2, r2, #16
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8002780:	f103 0310 	add.w	r3, r3, #16
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b03      	cmp	r3, #3
 8002788:	ddae      	ble.n	80026e8 <letter_select+0x16f0>
	for (int i=0; i<10; i++) {
 800278a:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 800278e:	f103 0314 	add.w	r3, r3, #20
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	3301      	adds	r3, #1
 8002796:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 800279a:	f102 0214 	add.w	r2, r2, #20
 800279e:	6013      	str	r3, [r2, #0]
 80027a0:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80027a4:	f103 0314 	add.w	r3, r3, #20
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b09      	cmp	r3, #9
 80027ac:	dd95      	ble.n	80026da <letter_select+0x16e2>
		}
	}
	break;
 80027ae:	e1bc      	b.n	8002b2a <letter_select+0x1b32>


	case 'X':
	for (int i=0; i<10; i++) {
 80027b0:	2300      	movs	r3, #0
 80027b2:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80027b6:	f102 020c 	add.w	r2, r2, #12
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	e062      	b.n	8002884 <letter_select+0x188c>
		for (int j=0; j<4; j++) {
 80027be:	2300      	movs	r3, #0
 80027c0:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80027c4:	f102 0208 	add.w	r2, r2, #8
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	e049      	b.n	8002860 <letter_select+0x1868>

			int x_pos = j + x;
 80027cc:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 80027d0:	f102 0214 	add.w	r2, r2, #20
 80027d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027d8:	3b1c      	subs	r3, #28
 80027da:	f507 5190 	add.w	r1, r7, #4608	; 0x1200
 80027de:	f101 0108 	add.w	r1, r1, #8
 80027e2:	6809      	ldr	r1, [r1, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	440b      	add	r3, r1
 80027e8:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80027ea:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80027ee:	f103 0310 	add.w	r3, r3, #16
 80027f2:	f107 0208 	add.w	r2, r7, #8
 80027f6:	f507 5190 	add.w	r1, r7, #4608	; 0x1200
 80027fa:	f101 010c 	add.w	r1, r1, #12
 80027fe:	6809      	ldr	r1, [r1, #0]
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	440a      	add	r2, r1
 8002804:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_X[i][j]);
 8002806:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 800280a:	f103 0314 	add.w	r3, r3, #20
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	b298      	uxth	r0, r3
 8002812:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8002816:	f103 0310 	add.w	r3, r3, #16
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	b29c      	uxth	r4, r3
 800281e:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8002822:	3b10      	subs	r3, #16
 8002824:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8002828:	f102 020c 	add.w	r2, r2, #12
 800282c:	6812      	ldr	r2, [r2, #0]
 800282e:	0091      	lsls	r1, r2, #2
 8002830:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8002834:	f102 0208 	add.w	r2, r2, #8
 8002838:	6812      	ldr	r2, [r2, #0]
 800283a:	440a      	add	r2, r1
 800283c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	461a      	mov	r2, r3
 8002844:	4621      	mov	r1, r4
 8002846:	f001 fb03 	bl	8003e50 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 800284a:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 800284e:	f103 0308 	add.w	r3, r3, #8
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3301      	adds	r3, #1
 8002856:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 800285a:	f102 0208 	add.w	r2, r2, #8
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8002864:	f103 0308 	add.w	r3, r3, #8
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b03      	cmp	r3, #3
 800286c:	ddae      	ble.n	80027cc <letter_select+0x17d4>
	for (int i=0; i<10; i++) {
 800286e:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8002872:	f103 030c 	add.w	r3, r3, #12
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	3301      	adds	r3, #1
 800287a:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 800287e:	f102 020c 	add.w	r2, r2, #12
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8002888:	f103 030c 	add.w	r3, r3, #12
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2b09      	cmp	r3, #9
 8002890:	dd95      	ble.n	80027be <letter_select+0x17c6>
		}
	}
	break;
 8002892:	e14a      	b.n	8002b2a <letter_select+0x1b32>


	case 'Y':
	for (int i=0; i<10; i++) {
 8002894:	2300      	movs	r3, #0
 8002896:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 800289a:	f102 0204 	add.w	r2, r2, #4
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	e058      	b.n	8002954 <letter_select+0x195c>
		for (int j=0; j<5; j++) {
 80028a2:	2300      	movs	r3, #0
 80028a4:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	e043      	b.n	8002934 <letter_select+0x193c>

			int x_pos = j + x;
 80028ac:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 80028b0:	f102 020c 	add.w	r2, r2, #12
 80028b4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028b8:	3b1c      	subs	r3, #28
 80028ba:	f507 5190 	add.w	r1, r7, #4608	; 0x1200
 80028be:	6809      	ldr	r1, [r1, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	440b      	add	r3, r1
 80028c4:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80028c6:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80028ca:	f103 0308 	add.w	r3, r3, #8
 80028ce:	f107 0208 	add.w	r2, r7, #8
 80028d2:	f507 5190 	add.w	r1, r7, #4608	; 0x1200
 80028d6:	f101 0104 	add.w	r1, r1, #4
 80028da:	6809      	ldr	r1, [r1, #0]
 80028dc:	6812      	ldr	r2, [r2, #0]
 80028de:	440a      	add	r2, r1
 80028e0:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_Y[i][j]);
 80028e2:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80028e6:	f103 030c 	add.w	r3, r3, #12
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	b298      	uxth	r0, r3
 80028ee:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80028f2:	f103 0308 	add.w	r3, r3, #8
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	b29c      	uxth	r4, r3
 80028fa:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80028fe:	3a18      	subs	r2, #24
 8002900:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8002904:	f103 0304 	add.w	r3, r3, #4
 8002908:	6819      	ldr	r1, [r3, #0]
 800290a:	460b      	mov	r3, r1
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	440b      	add	r3, r1
 8002910:	f507 5190 	add.w	r1, r7, #4608	; 0x1200
 8002914:	6809      	ldr	r1, [r1, #0]
 8002916:	440b      	add	r3, r1
 8002918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800291c:	b2db      	uxtb	r3, r3
 800291e:	461a      	mov	r2, r3
 8002920:	4621      	mov	r1, r4
 8002922:	f001 fa95 	bl	8003e50 <UB_VGA_SetPixel>
		for (int j=0; j<5; j++) {
 8002926:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	3301      	adds	r3, #1
 800292e:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b04      	cmp	r3, #4
 800293c:	ddb6      	ble.n	80028ac <letter_select+0x18b4>
	for (int i=0; i<10; i++) {
 800293e:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8002942:	f103 0304 	add.w	r3, r3, #4
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	3301      	adds	r3, #1
 800294a:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 800294e:	f102 0204 	add.w	r2, r2, #4
 8002952:	6013      	str	r3, [r2, #0]
 8002954:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8002958:	f103 0304 	add.w	r3, r3, #4
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2b09      	cmp	r3, #9
 8002960:	dd9f      	ble.n	80028a2 <letter_select+0x18aa>
		}
	}
	break;
 8002962:	e0e2      	b.n	8002b2a <letter_select+0x1b32>


	case 'Z':
	for (int i=0; i<10; i++) {
 8002964:	2300      	movs	r3, #0
 8002966:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 800296a:	f102 021c 	add.w	r2, r2, #28
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	e05e      	b.n	8002a30 <letter_select+0x1a38>
		for (int j=0; j<4; j++) {
 8002972:	2300      	movs	r3, #0
 8002974:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8002978:	f102 0218 	add.w	r2, r2, #24
 800297c:	6013      	str	r3, [r2, #0]
 800297e:	e045      	b.n	8002a0c <letter_select+0x1a14>

			int x_pos = j + x;
 8002980:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8002984:	f102 0204 	add.w	r2, r2, #4
 8002988:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800298c:	3b1c      	subs	r3, #28
 800298e:	f507 518f 	add.w	r1, r7, #4576	; 0x11e0
 8002992:	f101 0118 	add.w	r1, r1, #24
 8002996:	6809      	ldr	r1, [r1, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	440b      	add	r3, r1
 800299c:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 800299e:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80029a2:	f107 0208 	add.w	r2, r7, #8
 80029a6:	f507 518f 	add.w	r1, r7, #4576	; 0x11e0
 80029aa:	f101 011c 	add.w	r1, r1, #28
 80029ae:	6809      	ldr	r1, [r1, #0]
 80029b0:	6812      	ldr	r2, [r2, #0]
 80029b2:	440a      	add	r2, r1
 80029b4:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_Z[i][j]);
 80029b6:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80029ba:	f103 0304 	add.w	r3, r3, #4
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	b298      	uxth	r0, r3
 80029c2:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	b29c      	uxth	r4, r3
 80029ca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80029ce:	3b18      	subs	r3, #24
 80029d0:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80029d4:	f102 021c 	add.w	r2, r2, #28
 80029d8:	6812      	ldr	r2, [r2, #0]
 80029da:	0091      	lsls	r1, r2, #2
 80029dc:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80029e0:	f102 0218 	add.w	r2, r2, #24
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	440a      	add	r2, r1
 80029e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	461a      	mov	r2, r3
 80029f0:	4621      	mov	r1, r4
 80029f2:	f001 fa2d 	bl	8003e50 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 80029f6:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 80029fa:	f103 0318 	add.w	r3, r3, #24
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	3301      	adds	r3, #1
 8002a02:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8002a06:	f102 0218 	add.w	r2, r2, #24
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8002a10:	f103 0318 	add.w	r3, r3, #24
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	ddb2      	ble.n	8002980 <letter_select+0x1988>
	for (int i=0; i<10; i++) {
 8002a1a:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8002a1e:	f103 031c 	add.w	r3, r3, #28
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	3301      	adds	r3, #1
 8002a26:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8002a2a:	f102 021c 	add.w	r2, r2, #28
 8002a2e:	6013      	str	r3, [r2, #0]
 8002a30:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8002a34:	f103 031c 	add.w	r3, r3, #28
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2b09      	cmp	r3, #9
 8002a3c:	dd99      	ble.n	8002972 <letter_select+0x197a>
		}
	}
	break;
 8002a3e:	e074      	b.n	8002b2a <letter_select+0x1b32>


	case ' ':
	for (int i=0; i<10; i++) {
 8002a40:	2300      	movs	r3, #0
 8002a42:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8002a46:	f102 0214 	add.w	r2, r2, #20
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	e062      	b.n	8002b14 <letter_select+0x1b1c>
		for (int j=0; j<4; j++) {
 8002a4e:	2300      	movs	r3, #0
 8002a50:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8002a54:	f102 0210 	add.w	r2, r2, #16
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	e049      	b.n	8002af0 <letter_select+0x1af8>

			int x_pos = j + x;
 8002a5c:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8002a60:	f102 021c 	add.w	r2, r2, #28
 8002a64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a68:	3b1c      	subs	r3, #28
 8002a6a:	f507 518f 	add.w	r1, r7, #4576	; 0x11e0
 8002a6e:	f101 0110 	add.w	r1, r1, #16
 8002a72:	6809      	ldr	r1, [r1, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	440b      	add	r3, r1
 8002a78:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8002a7a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8002a7e:	f103 0318 	add.w	r3, r3, #24
 8002a82:	f107 0208 	add.w	r2, r7, #8
 8002a86:	f507 518f 	add.w	r1, r7, #4576	; 0x11e0
 8002a8a:	f101 0114 	add.w	r1, r1, #20
 8002a8e:	6809      	ldr	r1, [r1, #0]
 8002a90:	6812      	ldr	r2, [r2, #0]
 8002a92:	440a      	add	r2, r1
 8002a94:	601a      	str	r2, [r3, #0]

			UB_VGA_SetPixel(x_pos, y_pos, spatie[i][j]);
 8002a96:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8002a9a:	f103 031c 	add.w	r3, r3, #28
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	b298      	uxth	r0, r3
 8002aa2:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8002aa6:	f103 0318 	add.w	r3, r3, #24
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	b29c      	uxth	r4, r3
 8002aae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ab2:	3b18      	subs	r3, #24
 8002ab4:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8002ab8:	f102 0214 	add.w	r2, r2, #20
 8002abc:	6812      	ldr	r2, [r2, #0]
 8002abe:	0091      	lsls	r1, r2, #2
 8002ac0:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8002ac4:	f102 0210 	add.w	r2, r2, #16
 8002ac8:	6812      	ldr	r2, [r2, #0]
 8002aca:	440a      	add	r2, r1
 8002acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4621      	mov	r1, r4
 8002ad6:	f001 f9bb 	bl	8003e50 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8002ada:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8002ade:	f103 0310 	add.w	r3, r3, #16
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8002aea:	f102 0210 	add.w	r2, r2, #16
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8002af4:	f103 0310 	add.w	r3, r3, #16
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2b03      	cmp	r3, #3
 8002afc:	ddae      	ble.n	8002a5c <letter_select+0x1a64>
	for (int i=0; i<10; i++) {
 8002afe:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8002b02:	f103 0314 	add.w	r3, r3, #20
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8002b0e:	f102 0214 	add.w	r2, r2, #20
 8002b12:	6013      	str	r3, [r2, #0]
 8002b14:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8002b18:	f103 0314 	add.w	r3, r3, #20
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b09      	cmp	r3, #9
 8002b20:	dd95      	ble.n	8002a4e <letter_select+0x1a56>
		}
	}
	break;
 8002b22:	e002      	b.n	8002b2a <letter_select+0x1b32>


	default:
		UB_VGA_FillScreen(rood);
 8002b24:	20e0      	movs	r0, #224	; 0xe0
 8002b26:	f001 f971 	bl	8003e0c <UB_VGA_FillScreen>
	}




}
 8002b2a:	bf00      	nop
 8002b2c:	f507 5796 	add.w	r7, r7, #4800	; 0x12c0
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd90      	pop	{r4, r7, pc}
 8002b36:	bf00      	nop

08002b38 <draw_triangle>:
#include "stm32_ub_vga_screen.h"
#include <stdlib.h>
#include "includes.h"

void draw_triangle(int x1,int y1,int x2,int y2,int xtop,int ytop, int color)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	60f8      	str	r0, [r7, #12]
 8002b40:	60b9      	str	r1, [r7, #8]
 8002b42:	607a      	str	r2, [r7, #4]
 8002b44:	603b      	str	r3, [r7, #0]
//	dx=x2-x1;      /* the horizontal distance of the line */
//	dy=y2-y1;      /* the vertical distance of the line */
//	dxabs=abs(dx);
//	dyabs=abs(dy);

	draw_line(x1,y1,x2,y2,1,color);
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	9301      	str	r3, [sp, #4]
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	68b9      	ldr	r1, [r7, #8]
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f7fe f829 	bl	8000bac <draw_line>
	draw_line(x1,y1,xtop,ytop,1,color);
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	9301      	str	r3, [sp, #4]
 8002b5e:	2301      	movs	r3, #1
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	68b9      	ldr	r1, [r7, #8]
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f7fe f81f 	bl	8000bac <draw_line>
	draw_line(xtop,ytop,x2,y2,1,color);
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	9301      	str	r3, [sp, #4]
 8002b72:	2301      	movs	r3, #1
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	69f9      	ldr	r1, [r7, #28]
 8002b7c:	69b8      	ldr	r0, [r7, #24]
 8002b7e:	f7fe f815 	bl	8000bac <draw_line>



//	for(int i=x1;i<=x2;i++)
//		draw_line(i,y2,xtop,ytop,color,1);
}
 8002b82:	bf00      	nop
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <wait_ms>:
 */

#include "wait_ms.h"

void wait_ms(int time_ms)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
	DELAY_ms(time_ms);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f001 f8db 	bl	8003d50 <DELAY_ms>
}
 8002b9a:	bf00      	nop
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8002bac:	2300      	movs	r3, #0
 8002bae:	73fb      	strb	r3, [r7, #15]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	73bb      	strb	r3, [r7, #14]
 8002bb4:	230f      	movs	r3, #15
 8002bb6:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	78db      	ldrb	r3, [r3, #3]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d039      	beq.n	8002c34 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8002bc0:	4b27      	ldr	r3, [pc, #156]	; (8002c60 <NVIC_Init+0xbc>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	0a1b      	lsrs	r3, r3, #8
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
 8002bd2:	f1c3 0304 	rsb	r3, r3, #4
 8002bd6:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8002bd8:	7b7a      	ldrb	r2, [r7, #13]
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	fa42 f303 	asr.w	r3, r2, r3
 8002be0:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	785b      	ldrb	r3, [r3, #1]
 8002be6:	461a      	mov	r2, r3
 8002be8:	7bbb      	ldrb	r3, [r7, #14]
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	789a      	ldrb	r2, [r3, #2]
 8002bf4:	7b7b      	ldrb	r3, [r7, #13]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	b2da      	uxtb	r2, r3
 8002bfa:	7bfb      	ldrb	r3, [r7, #15]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8002c06:	4a17      	ldr	r2, [pc, #92]	; (8002c64 <NVIC_Init+0xc0>)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	4413      	add	r3, r2
 8002c0e:	7bfa      	ldrb	r2, [r7, #15]
 8002c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002c14:	4a13      	ldr	r2, [pc, #76]	; (8002c64 <NVIC_Init+0xc0>)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	f003 031f 	and.w	r3, r3, #31
 8002c28:	2101      	movs	r1, #1
 8002c2a:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002c2e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8002c32:	e00f      	b.n	8002c54 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002c34:	490b      	ldr	r1, [pc, #44]	; (8002c64 <NVIC_Init+0xc0>)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	f003 031f 	and.w	r3, r3, #31
 8002c48:	2201      	movs	r2, #1
 8002c4a:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8002c4c:	f100 0320 	add.w	r3, r0, #32
 8002c50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr
 8002c60:	e000ed00 	.word	0xe000ed00
 8002c64:	e000e100 	.word	0xe000e100

08002c68 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f023 0201 	bic.w	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2221      	movs	r2, #33	; 0x21
 8002c9e:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4a46      	ldr	r2, [pc, #280]	; (8002dbc <DMA_DeInit+0x154>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d103      	bne.n	8002cb0 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8002ca8:	4b45      	ldr	r3, [pc, #276]	; (8002dc0 <DMA_DeInit+0x158>)
 8002caa:	223d      	movs	r2, #61	; 0x3d
 8002cac:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8002cae:	e07e      	b.n	8002dae <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a44      	ldr	r2, [pc, #272]	; (8002dc4 <DMA_DeInit+0x15c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d104      	bne.n	8002cc2 <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8002cb8:	4b41      	ldr	r3, [pc, #260]	; (8002dc0 <DMA_DeInit+0x158>)
 8002cba:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8002cbe:	609a      	str	r2, [r3, #8]
}
 8002cc0:	e075      	b.n	8002dae <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a40      	ldr	r2, [pc, #256]	; (8002dc8 <DMA_DeInit+0x160>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d104      	bne.n	8002cd4 <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8002cca:	4b3d      	ldr	r3, [pc, #244]	; (8002dc0 <DMA_DeInit+0x158>)
 8002ccc:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8002cd0:	609a      	str	r2, [r3, #8]
}
 8002cd2:	e06c      	b.n	8002dae <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a3d      	ldr	r2, [pc, #244]	; (8002dcc <DMA_DeInit+0x164>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d104      	bne.n	8002ce6 <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8002cdc:	4b38      	ldr	r3, [pc, #224]	; (8002dc0 <DMA_DeInit+0x158>)
 8002cde:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8002ce2:	609a      	str	r2, [r3, #8]
}
 8002ce4:	e063      	b.n	8002dae <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a39      	ldr	r2, [pc, #228]	; (8002dd0 <DMA_DeInit+0x168>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d103      	bne.n	8002cf6 <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8002cee:	4b34      	ldr	r3, [pc, #208]	; (8002dc0 <DMA_DeInit+0x158>)
 8002cf0:	4a38      	ldr	r2, [pc, #224]	; (8002dd4 <DMA_DeInit+0x16c>)
 8002cf2:	60da      	str	r2, [r3, #12]
}
 8002cf4:	e05b      	b.n	8002dae <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	4a37      	ldr	r2, [pc, #220]	; (8002dd8 <DMA_DeInit+0x170>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d103      	bne.n	8002d06 <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8002cfe:	4b30      	ldr	r3, [pc, #192]	; (8002dc0 <DMA_DeInit+0x158>)
 8002d00:	4a36      	ldr	r2, [pc, #216]	; (8002ddc <DMA_DeInit+0x174>)
 8002d02:	60da      	str	r2, [r3, #12]
}
 8002d04:	e053      	b.n	8002dae <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4a35      	ldr	r2, [pc, #212]	; (8002de0 <DMA_DeInit+0x178>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d103      	bne.n	8002d16 <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8002d0e:	4b2c      	ldr	r3, [pc, #176]	; (8002dc0 <DMA_DeInit+0x158>)
 8002d10:	4a34      	ldr	r2, [pc, #208]	; (8002de4 <DMA_DeInit+0x17c>)
 8002d12:	60da      	str	r2, [r3, #12]
}
 8002d14:	e04b      	b.n	8002dae <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a33      	ldr	r2, [pc, #204]	; (8002de8 <DMA_DeInit+0x180>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d104      	bne.n	8002d28 <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8002d1e:	4b28      	ldr	r3, [pc, #160]	; (8002dc0 <DMA_DeInit+0x158>)
 8002d20:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8002d24:	60da      	str	r2, [r3, #12]
}
 8002d26:	e042      	b.n	8002dae <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a30      	ldr	r2, [pc, #192]	; (8002dec <DMA_DeInit+0x184>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d103      	bne.n	8002d38 <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8002d30:	4b2f      	ldr	r3, [pc, #188]	; (8002df0 <DMA_DeInit+0x188>)
 8002d32:	223d      	movs	r2, #61	; 0x3d
 8002d34:	609a      	str	r2, [r3, #8]
}
 8002d36:	e03a      	b.n	8002dae <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a2e      	ldr	r2, [pc, #184]	; (8002df4 <DMA_DeInit+0x18c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d104      	bne.n	8002d4a <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8002d40:	4b2b      	ldr	r3, [pc, #172]	; (8002df0 <DMA_DeInit+0x188>)
 8002d42:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8002d46:	609a      	str	r2, [r3, #8]
}
 8002d48:	e031      	b.n	8002dae <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a2a      	ldr	r2, [pc, #168]	; (8002df8 <DMA_DeInit+0x190>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d104      	bne.n	8002d5c <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8002d52:	4b27      	ldr	r3, [pc, #156]	; (8002df0 <DMA_DeInit+0x188>)
 8002d54:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8002d58:	609a      	str	r2, [r3, #8]
}
 8002d5a:	e028      	b.n	8002dae <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a27      	ldr	r2, [pc, #156]	; (8002dfc <DMA_DeInit+0x194>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d104      	bne.n	8002d6e <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8002d64:	4b22      	ldr	r3, [pc, #136]	; (8002df0 <DMA_DeInit+0x188>)
 8002d66:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8002d6a:	609a      	str	r2, [r3, #8]
}
 8002d6c:	e01f      	b.n	8002dae <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a23      	ldr	r2, [pc, #140]	; (8002e00 <DMA_DeInit+0x198>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d103      	bne.n	8002d7e <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8002d76:	4b1e      	ldr	r3, [pc, #120]	; (8002df0 <DMA_DeInit+0x188>)
 8002d78:	4a16      	ldr	r2, [pc, #88]	; (8002dd4 <DMA_DeInit+0x16c>)
 8002d7a:	60da      	str	r2, [r3, #12]
}
 8002d7c:	e017      	b.n	8002dae <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a20      	ldr	r2, [pc, #128]	; (8002e04 <DMA_DeInit+0x19c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d103      	bne.n	8002d8e <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8002d86:	4b1a      	ldr	r3, [pc, #104]	; (8002df0 <DMA_DeInit+0x188>)
 8002d88:	4a14      	ldr	r2, [pc, #80]	; (8002ddc <DMA_DeInit+0x174>)
 8002d8a:	60da      	str	r2, [r3, #12]
}
 8002d8c:	e00f      	b.n	8002dae <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a1d      	ldr	r2, [pc, #116]	; (8002e08 <DMA_DeInit+0x1a0>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d103      	bne.n	8002d9e <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8002d96:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <DMA_DeInit+0x188>)
 8002d98:	4a12      	ldr	r2, [pc, #72]	; (8002de4 <DMA_DeInit+0x17c>)
 8002d9a:	60da      	str	r2, [r3, #12]
}
 8002d9c:	e007      	b.n	8002dae <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a1a      	ldr	r2, [pc, #104]	; (8002e0c <DMA_DeInit+0x1a4>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d103      	bne.n	8002dae <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8002da6:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <DMA_DeInit+0x188>)
 8002da8:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8002dac:	60da      	str	r2, [r3, #12]
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	40026010 	.word	0x40026010
 8002dc0:	40026000 	.word	0x40026000
 8002dc4:	40026028 	.word	0x40026028
 8002dc8:	40026040 	.word	0x40026040
 8002dcc:	40026058 	.word	0x40026058
 8002dd0:	40026070 	.word	0x40026070
 8002dd4:	2000003d 	.word	0x2000003d
 8002dd8:	40026088 	.word	0x40026088
 8002ddc:	20000f40 	.word	0x20000f40
 8002de0:	400260a0 	.word	0x400260a0
 8002de4:	203d0000 	.word	0x203d0000
 8002de8:	400260b8 	.word	0x400260b8
 8002dec:	40026410 	.word	0x40026410
 8002df0:	40026400 	.word	0x40026400
 8002df4:	40026428 	.word	0x40026428
 8002df8:	40026440 	.word	0x40026440
 8002dfc:	40026458 	.word	0x40026458
 8002e00:	40026470 	.word	0x40026470
 8002e04:	40026488 	.word	0x40026488
 8002e08:	400264a0 	.word	0x400264a0
 8002e0c:	400264b8 	.word	0x400264b8

08002e10 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	4b25      	ldr	r3, [pc, #148]	; (8002ebc <DMA_Init+0xac>)
 8002e28:	4013      	ands	r3, r2
 8002e2a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002e3a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	699b      	ldr	r3, [r3, #24]
 8002e40:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8002e46:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8002e52:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e58:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8002e5e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e64:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f023 0307 	bic.w	r3, r3, #7
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	68fa      	ldr	r2, [r7, #12]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	691a      	ldr	r2, [r3, #16]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	685a      	ldr	r2, [r3, #4]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	60da      	str	r2, [r3, #12]
}
 8002eae:	bf00      	nop
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	f01c803f 	.word	0xf01c803f

08002ec0 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002ecc:	78fb      	ldrb	r3, [r7, #3]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d006      	beq.n	8002ee0 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f043 0201 	orr.w	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8002ede:	e005      	b.n	8002eec <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f023 0201 	bic.w	r2, r3, #1
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	601a      	str	r2, [r3, #0]
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	4613      	mov	r3, r2
 8002f04:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00f      	beq.n	8002f30 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8002f10:	79fb      	ldrb	r3, [r7, #7]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d006      	beq.n	8002f24 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	615a      	str	r2, [r3, #20]
 8002f22:	e005      	b.n	8002f30 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b80      	cmp	r3, #128	; 0x80
 8002f34:	d014      	beq.n	8002f60 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 8002f36:	79fb      	ldrb	r3, [r7, #7]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	f003 031e 	and.w	r3, r3, #30
 8002f46:	431a      	orrs	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8002f4c:	e008      	b.n	8002f60 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f003 031e 	and.w	r3, r3, #30
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	401a      	ands	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	601a      	str	r2, [r3, #0]
}
 8002f60:	bf00      	nop
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8002f76:	2300      	movs	r3, #0
 8002f78:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a22      	ldr	r2, [pc, #136]	; (8003010 <DMA_GetITStatus+0xa4>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d802      	bhi.n	8002f90 <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002f8a:	4b22      	ldr	r3, [pc, #136]	; (8003014 <DMA_GetITStatus+0xa8>)
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	e001      	b.n	8002f94 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002f90:	4b21      	ldr	r3, [pc, #132]	; (8003018 <DMA_GetITStatus+0xac>)
 8002f92:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002f9a:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d00a      	beq.n	8002fb8 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	0adb      	lsrs	r3, r3, #11
 8002fa6:	f003 031e 	and.w	r3, r3, #30
 8002faa:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	60bb      	str	r3, [r7, #8]
 8002fb6:	e004      	b.n	8002fc2 <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	695b      	ldr	r3, [r3, #20]
 8002fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc0:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	e002      	b.n	8002fda <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002fe0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002fe4:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	4013      	ands	r3, r2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <DMA_GetITStatus+0x90>
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d002      	beq.n	8002ffc <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	75fb      	strb	r3, [r7, #23]
 8002ffa:	e001      	b.n	8003000 <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8003000:	7dfb      	ldrb	r3, [r7, #23]
}
 8003002:	4618      	mov	r0, r3
 8003004:	371c      	adds	r7, #28
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	4002640f 	.word	0x4002640f
 8003014:	40026000 	.word	0x40026000
 8003018:	40026400 	.word	0x40026400

0800301c <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a10      	ldr	r2, [pc, #64]	; (800306c <DMA_ClearITPendingBit+0x50>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d802      	bhi.n	8003034 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800302e:	4b10      	ldr	r3, [pc, #64]	; (8003070 <DMA_ClearITPendingBit+0x54>)
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	e001      	b.n	8003038 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8003034:	4b0f      	ldr	r3, [pc, #60]	; (8003074 <DMA_ClearITPendingBit+0x58>)
 8003036:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d007      	beq.n	8003052 <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8003048:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800304c:	68fa      	ldr	r2, [r7, #12]
 800304e:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 8003050:	e006      	b.n	8003060 <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8003058:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	6093      	str	r3, [r2, #8]
}
 8003060:	bf00      	nop
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	4002640f 	.word	0x4002640f
 8003070:	40026000 	.word	0x40026000
 8003074:	40026400 	.word	0x40026400

08003078 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8003078:	b480      	push	{r7}
 800307a:	b087      	sub	sp, #28
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8003082:	2300      	movs	r3, #0
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	2300      	movs	r3, #0
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800308e:	2300      	movs	r3, #0
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	e076      	b.n	8003182 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8003094:	2201      	movs	r2, #1
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	4013      	ands	r3, r2
 80030a6:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d165      	bne.n	800317c <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	2103      	movs	r1, #3
 80030ba:	fa01 f303 	lsl.w	r3, r1, r3
 80030be:	43db      	mvns	r3, r3
 80030c0:	401a      	ands	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	791b      	ldrb	r3, [r3, #4]
 80030ce:	4619      	mov	r1, r3
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	fa01 f303 	lsl.w	r3, r1, r3
 80030d8:	431a      	orrs	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	791b      	ldrb	r3, [r3, #4]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d003      	beq.n	80030ee <GPIO_Init+0x76>
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	791b      	ldrb	r3, [r3, #4]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d12e      	bne.n	800314c <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689a      	ldr	r2, [r3, #8]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	2103      	movs	r1, #3
 80030f8:	fa01 f303 	lsl.w	r3, r1, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	401a      	ands	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	795b      	ldrb	r3, [r3, #5]
 800310c:	4619      	mov	r1, r3
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	fa01 f303 	lsl.w	r3, r1, r3
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	b29b      	uxth	r3, r3
 8003124:	4619      	mov	r1, r3
 8003126:	2301      	movs	r3, #1
 8003128:	408b      	lsls	r3, r1
 800312a:	43db      	mvns	r3, r3
 800312c:	401a      	ands	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	7992      	ldrb	r2, [r2, #6]
 800313a:	4611      	mov	r1, r2
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	b292      	uxth	r2, r2
 8003140:	fa01 f202 	lsl.w	r2, r1, r2
 8003144:	b292      	uxth	r2, r2
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	b29b      	uxth	r3, r3
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	2103      	movs	r1, #3
 8003158:	fa01 f303 	lsl.w	r3, r1, r3
 800315c:	43db      	mvns	r3, r3
 800315e:	401a      	ands	r2, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	79db      	ldrb	r3, [r3, #7]
 800316c:	4619      	mov	r1, r3
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	fa01 f303 	lsl.w	r3, r1, r3
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	3301      	adds	r3, #1
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2b0f      	cmp	r3, #15
 8003186:	d985      	bls.n	8003094 <GPIO_Init+0x1c>
    }
  }
}
 8003188:	bf00      	nop
 800318a:	371c      	adds	r7, #28
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	807b      	strh	r3, [r7, #2]
 80031a0:	4613      	mov	r3, r2
 80031a2:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80031a4:	2300      	movs	r3, #0
 80031a6:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80031a8:	2300      	movs	r3, #0
 80031aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80031ac:	787a      	ldrb	r2, [r7, #1]
 80031ae:	887b      	ldrh	r3, [r7, #2]
 80031b0:	f003 0307 	and.w	r3, r3, #7
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80031bc:	887b      	ldrh	r3, [r7, #2]
 80031be:	08db      	lsrs	r3, r3, #3
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	4618      	mov	r0, r3
 80031c4:	887b      	ldrh	r3, [r7, #2]
 80031c6:	08db      	lsrs	r3, r3, #3
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	3208      	adds	r2, #8
 80031d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80031d4:	887b      	ldrh	r3, [r7, #2]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	210f      	movs	r1, #15
 80031de:	fa01 f303 	lsl.w	r3, r1, r3
 80031e2:	43db      	mvns	r3, r3
 80031e4:	ea02 0103 	and.w	r1, r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f100 0208 	add.w	r2, r0, #8
 80031ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80031f2:	887b      	ldrh	r3, [r7, #2]
 80031f4:	08db      	lsrs	r3, r3, #3
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	461a      	mov	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3208      	adds	r2, #8
 80031fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	4313      	orrs	r3, r2
 8003206:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8003208:	887b      	ldrh	r3, [r7, #2]
 800320a:	08db      	lsrs	r3, r3, #3
 800320c:	b29b      	uxth	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3208      	adds	r2, #8
 8003214:	68b9      	ldr	r1, [r7, #8]
 8003216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800321a:	bf00      	nop
 800321c:	3714      	adds	r7, #20
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
	...

08003228 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8003228:	b480      	push	{r7}
 800322a:	b089      	sub	sp, #36	; 0x24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8003230:	2300      	movs	r3, #0
 8003232:	61bb      	str	r3, [r7, #24]
 8003234:	2300      	movs	r3, #0
 8003236:	617b      	str	r3, [r7, #20]
 8003238:	2300      	movs	r3, #0
 800323a:	61fb      	str	r3, [r7, #28]
 800323c:	2302      	movs	r3, #2
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	2300      	movs	r3, #0
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	2302      	movs	r3, #2
 8003246:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003248:	4b47      	ldr	r3, [pc, #284]	; (8003368 <RCC_GetClocksFreq+0x140>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 030c 	and.w	r3, r3, #12
 8003250:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	2b04      	cmp	r3, #4
 8003256:	d007      	beq.n	8003268 <RCC_GetClocksFreq+0x40>
 8003258:	2b08      	cmp	r3, #8
 800325a:	d009      	beq.n	8003270 <RCC_GetClocksFreq+0x48>
 800325c:	2b00      	cmp	r3, #0
 800325e:	d13d      	bne.n	80032dc <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a42      	ldr	r2, [pc, #264]	; (800336c <RCC_GetClocksFreq+0x144>)
 8003264:	601a      	str	r2, [r3, #0]
      break;
 8003266:	e03d      	b.n	80032e4 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a41      	ldr	r2, [pc, #260]	; (8003370 <RCC_GetClocksFreq+0x148>)
 800326c:	601a      	str	r2, [r3, #0]
      break;
 800326e:	e039      	b.n	80032e4 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8003270:	4b3d      	ldr	r3, [pc, #244]	; (8003368 <RCC_GetClocksFreq+0x140>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	0d9b      	lsrs	r3, r3, #22
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800327c:	4b3a      	ldr	r3, [pc, #232]	; (8003368 <RCC_GetClocksFreq+0x140>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003284:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00c      	beq.n	80032a6 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800328c:	4a38      	ldr	r2, [pc, #224]	; (8003370 <RCC_GetClocksFreq+0x148>)
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	fbb2 f3f3 	udiv	r3, r2, r3
 8003294:	4a34      	ldr	r2, [pc, #208]	; (8003368 <RCC_GetClocksFreq+0x140>)
 8003296:	6852      	ldr	r2, [r2, #4]
 8003298:	0992      	lsrs	r2, r2, #6
 800329a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800329e:	fb02 f303 	mul.w	r3, r2, r3
 80032a2:	61fb      	str	r3, [r7, #28]
 80032a4:	e00b      	b.n	80032be <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80032a6:	4a31      	ldr	r2, [pc, #196]	; (800336c <RCC_GetClocksFreq+0x144>)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ae:	4a2e      	ldr	r2, [pc, #184]	; (8003368 <RCC_GetClocksFreq+0x140>)
 80032b0:	6852      	ldr	r2, [r2, #4]
 80032b2:	0992      	lsrs	r2, r2, #6
 80032b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032b8:	fb02 f303 	mul.w	r3, r2, r3
 80032bc:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80032be:	4b2a      	ldr	r3, [pc, #168]	; (8003368 <RCC_GetClocksFreq+0x140>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	0c1b      	lsrs	r3, r3, #16
 80032c4:	f003 0303 	and.w	r3, r3, #3
 80032c8:	3301      	adds	r3, #1
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	fbb2 f2f3 	udiv	r2, r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	601a      	str	r2, [r3, #0]
      break;
 80032da:	e003      	b.n	80032e4 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a23      	ldr	r2, [pc, #140]	; (800336c <RCC_GetClocksFreq+0x144>)
 80032e0:	601a      	str	r2, [r3, #0]
      break;
 80032e2:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80032e4:	4b20      	ldr	r3, [pc, #128]	; (8003368 <RCC_GetClocksFreq+0x140>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ec:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	091b      	lsrs	r3, r3, #4
 80032f2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80032f4:	4a1f      	ldr	r2, [pc, #124]	; (8003374 <RCC_GetClocksFreq+0x14c>)
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	4413      	add	r3, r2
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	40da      	lsrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800330c:	4b16      	ldr	r3, [pc, #88]	; (8003368 <RCC_GetClocksFreq+0x140>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8003314:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	0a9b      	lsrs	r3, r3, #10
 800331a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800331c:	4a15      	ldr	r2, [pc, #84]	; (8003374 <RCC_GetClocksFreq+0x14c>)
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	4413      	add	r3, r2
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	40da      	lsrs	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8003334:	4b0c      	ldr	r3, [pc, #48]	; (8003368 <RCC_GetClocksFreq+0x140>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800333c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	0b5b      	lsrs	r3, r3, #13
 8003342:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8003344:	4a0b      	ldr	r2, [pc, #44]	; (8003374 <RCC_GetClocksFreq+0x14c>)
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	4413      	add	r3, r2
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	40da      	lsrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	60da      	str	r2, [r3, #12]
}
 800335c:	bf00      	nop
 800335e:	3724      	adds	r7, #36	; 0x24
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	40023800 	.word	0x40023800
 800336c:	00f42400 	.word	0x00f42400
 8003370:	007a1200 	.word	0x007a1200
 8003374:	20000000 	.word	0x20000000

08003378 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d006      	beq.n	8003398 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800338a:	490a      	ldr	r1, [pc, #40]	; (80033b4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800338c:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800338e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4313      	orrs	r3, r2
 8003394:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8003396:	e006      	b.n	80033a6 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8003398:	4906      	ldr	r1, [pc, #24]	; (80033b4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800339a:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <RCC_AHB1PeriphClockCmd+0x3c>)
 800339c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	43db      	mvns	r3, r3
 80033a2:	4013      	ands	r3, r2
 80033a4:	630b      	str	r3, [r1, #48]	; 0x30
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40023800 	.word	0x40023800

080033b8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d006      	beq.n	80033d8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80033ca:	490a      	ldr	r1, [pc, #40]	; (80033f4 <RCC_APB1PeriphClockCmd+0x3c>)
 80033cc:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <RCC_APB1PeriphClockCmd+0x3c>)
 80033ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80033d6:	e006      	b.n	80033e6 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80033d8:	4906      	ldr	r1, [pc, #24]	; (80033f4 <RCC_APB1PeriphClockCmd+0x3c>)
 80033da:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <RCC_APB1PeriphClockCmd+0x3c>)
 80033dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	43db      	mvns	r3, r3
 80033e2:	4013      	ands	r3, r2
 80033e4:	640b      	str	r3, [r1, #64]	; 0x40
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40023800 	.word	0x40023800

080033f8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8003404:	78fb      	ldrb	r3, [r7, #3]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d006      	beq.n	8003418 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800340a:	490a      	ldr	r1, [pc, #40]	; (8003434 <RCC_APB2PeriphClockCmd+0x3c>)
 800340c:	4b09      	ldr	r3, [pc, #36]	; (8003434 <RCC_APB2PeriphClockCmd+0x3c>)
 800340e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4313      	orrs	r3, r2
 8003414:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8003416:	e006      	b.n	8003426 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8003418:	4906      	ldr	r1, [pc, #24]	; (8003434 <RCC_APB2PeriphClockCmd+0x3c>)
 800341a:	4b06      	ldr	r3, [pc, #24]	; (8003434 <RCC_APB2PeriphClockCmd+0x3c>)
 800341c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	43db      	mvns	r3, r3
 8003422:	4013      	ands	r3, r2
 8003424:	644b      	str	r3, [r1, #68]	; 0x44
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	40023800 	.word	0x40023800

08003438 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8003438:	b480      	push	{r7}
 800343a:	b085      	sub	sp, #20
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8003442:	2300      	movs	r3, #0
 8003444:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	881b      	ldrh	r3, [r3, #0]
 800344a:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a29      	ldr	r2, [pc, #164]	; (80034f4 <TIM_TimeBaseInit+0xbc>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d013      	beq.n	800347c <TIM_TimeBaseInit+0x44>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a28      	ldr	r2, [pc, #160]	; (80034f8 <TIM_TimeBaseInit+0xc0>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d00f      	beq.n	800347c <TIM_TimeBaseInit+0x44>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003462:	d00b      	beq.n	800347c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a25      	ldr	r2, [pc, #148]	; (80034fc <TIM_TimeBaseInit+0xc4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d007      	beq.n	800347c <TIM_TimeBaseInit+0x44>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a24      	ldr	r2, [pc, #144]	; (8003500 <TIM_TimeBaseInit+0xc8>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d003      	beq.n	800347c <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a23      	ldr	r2, [pc, #140]	; (8003504 <TIM_TimeBaseInit+0xcc>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d108      	bne.n	800348e <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 800347c:	89fb      	ldrh	r3, [r7, #14]
 800347e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003482:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	885a      	ldrh	r2, [r3, #2]
 8003488:	89fb      	ldrh	r3, [r7, #14]
 800348a:	4313      	orrs	r3, r2
 800348c:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a1d      	ldr	r2, [pc, #116]	; (8003508 <TIM_TimeBaseInit+0xd0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d00c      	beq.n	80034b0 <TIM_TimeBaseInit+0x78>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a1c      	ldr	r2, [pc, #112]	; (800350c <TIM_TimeBaseInit+0xd4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d008      	beq.n	80034b0 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800349e:	89fb      	ldrh	r3, [r7, #14]
 80034a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034a4:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	891a      	ldrh	r2, [r3, #8]
 80034aa:	89fb      	ldrh	r3, [r7, #14]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	89fa      	ldrh	r2, [r7, #14]
 80034b4:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	881a      	ldrh	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a0a      	ldr	r2, [pc, #40]	; (80034f4 <TIM_TimeBaseInit+0xbc>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d003      	beq.n	80034d6 <TIM_TimeBaseInit+0x9e>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a09      	ldr	r2, [pc, #36]	; (80034f8 <TIM_TimeBaseInit+0xc0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d104      	bne.n	80034e0 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	7a9b      	ldrb	r3, [r3, #10]
 80034da:	b29a      	uxth	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	829a      	strh	r2, [r3, #20]
}
 80034e6:	bf00      	nop
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40010000 	.word	0x40010000
 80034f8:	40010400 	.word	0x40010400
 80034fc:	40000400 	.word	0x40000400
 8003500:	40000800 	.word	0x40000800
 8003504:	40000c00 	.word	0x40000c00
 8003508:	40001000 	.word	0x40001000
 800350c:	40001400 	.word	0x40001400

08003510 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	460b      	mov	r3, r1
 800351a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d008      	beq.n	8003534 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	b29b      	uxth	r3, r3
 8003528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800352c:	b29a      	uxth	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 8003532:	e007      	b.n	8003544 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	881b      	ldrh	r3, [r3, #0]
 8003538:	b29b      	uxth	r3, r3
 800353a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800353e:	b29a      	uxth	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	801a      	strh	r2, [r3, #0]
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800355c:	78fb      	ldrb	r3, [r7, #3]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d008      	beq.n	8003574 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	881b      	ldrh	r3, [r3, #0]
 8003566:	b29b      	uxth	r3, r3
 8003568:	f043 0301 	orr.w	r3, r3, #1
 800356c:	b29a      	uxth	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8003572:	e007      	b.n	8003584 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	881b      	ldrh	r3, [r3, #0]
 8003578:	b29b      	uxth	r3, r3
 800357a:	f023 0301 	bic.w	r3, r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	801a      	strh	r2, [r3, #0]
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800359a:	2300      	movs	r3, #0
 800359c:	817b      	strh	r3, [r7, #10]
 800359e:	2300      	movs	r3, #0
 80035a0:	81fb      	strh	r3, [r7, #14]
 80035a2:	2300      	movs	r3, #0
 80035a4:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	8c1b      	ldrh	r3, [r3, #32]
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	8c1b      	ldrh	r3, [r3, #32]
 80035ba:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	889b      	ldrh	r3, [r3, #4]
 80035c0:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	8b9b      	ldrh	r3, [r3, #28]
 80035c6:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 80035c8:	897b      	ldrh	r3, [r7, #10]
 80035ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ce:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80035d0:	897b      	ldrh	r3, [r7, #10]
 80035d2:	f023 0303 	bic.w	r3, r3, #3
 80035d6:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	881a      	ldrh	r2, [r3, #0]
 80035dc:	897b      	ldrh	r3, [r7, #10]
 80035de:	4313      	orrs	r3, r2
 80035e0:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80035e2:	89fb      	ldrh	r3, [r7, #14]
 80035e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035e8:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	899b      	ldrh	r3, [r3, #12]
 80035ee:	021b      	lsls	r3, r3, #8
 80035f0:	b29a      	uxth	r2, r3
 80035f2:	89fb      	ldrh	r3, [r7, #14]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	885b      	ldrh	r3, [r3, #2]
 80035fc:	021b      	lsls	r3, r3, #8
 80035fe:	b29a      	uxth	r2, r3
 8003600:	89fb      	ldrh	r3, [r7, #14]
 8003602:	4313      	orrs	r3, r2
 8003604:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a22      	ldr	r2, [pc, #136]	; (8003694 <TIM_OC3Init+0x104>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d003      	beq.n	8003616 <TIM_OC3Init+0x86>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a21      	ldr	r2, [pc, #132]	; (8003698 <TIM_OC3Init+0x108>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d12b      	bne.n	800366e <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8003616:	89fb      	ldrh	r3, [r7, #14]
 8003618:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800361c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	89db      	ldrh	r3, [r3, #14]
 8003622:	021b      	lsls	r3, r3, #8
 8003624:	b29a      	uxth	r2, r3
 8003626:	89fb      	ldrh	r3, [r7, #14]
 8003628:	4313      	orrs	r3, r2
 800362a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 800362c:	89fb      	ldrh	r3, [r7, #14]
 800362e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003632:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	889b      	ldrh	r3, [r3, #4]
 8003638:	021b      	lsls	r3, r3, #8
 800363a:	b29a      	uxth	r2, r3
 800363c:	89fb      	ldrh	r3, [r7, #14]
 800363e:	4313      	orrs	r3, r2
 8003640:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 8003642:	89bb      	ldrh	r3, [r7, #12]
 8003644:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003648:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 800364a:	89bb      	ldrh	r3, [r7, #12]
 800364c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003650:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	8a1b      	ldrh	r3, [r3, #16]
 8003656:	011b      	lsls	r3, r3, #4
 8003658:	b29a      	uxth	r2, r3
 800365a:	89bb      	ldrh	r3, [r7, #12]
 800365c:	4313      	orrs	r3, r2
 800365e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	8a5b      	ldrh	r3, [r3, #18]
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	b29a      	uxth	r2, r3
 8003668:	89bb      	ldrh	r3, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	89ba      	ldrh	r2, [r7, #12]
 8003672:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	897a      	ldrh	r2, [r7, #10]
 8003678:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	89fa      	ldrh	r2, [r7, #14]
 8003686:	841a      	strh	r2, [r3, #32]
}
 8003688:	bf00      	nop
 800368a:	3714      	adds	r7, #20
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	40010000 	.word	0x40010000
 8003698:	40010400 	.word	0x40010400

0800369c <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800369c:	b480      	push	{r7}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80036a6:	2300      	movs	r3, #0
 80036a8:	81bb      	strh	r3, [r7, #12]
 80036aa:	2300      	movs	r3, #0
 80036ac:	817b      	strh	r3, [r7, #10]
 80036ae:	2300      	movs	r3, #0
 80036b0:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	8c1b      	ldrh	r3, [r3, #32]
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036bc:	b29a      	uxth	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	8c1b      	ldrh	r3, [r3, #32]
 80036c6:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	889b      	ldrh	r3, [r3, #4]
 80036cc:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	8b9b      	ldrh	r3, [r3, #28]
 80036d2:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 80036d4:	89bb      	ldrh	r3, [r7, #12]
 80036d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036da:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 80036dc:	89bb      	ldrh	r3, [r7, #12]
 80036de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036e2:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	021b      	lsls	r3, r3, #8
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	89bb      	ldrh	r3, [r7, #12]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80036f2:	897b      	ldrh	r3, [r7, #10]
 80036f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036f8:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	899b      	ldrh	r3, [r3, #12]
 80036fe:	031b      	lsls	r3, r3, #12
 8003700:	b29a      	uxth	r2, r3
 8003702:	897b      	ldrh	r3, [r7, #10]
 8003704:	4313      	orrs	r3, r2
 8003706:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	885b      	ldrh	r3, [r3, #2]
 800370c:	031b      	lsls	r3, r3, #12
 800370e:	b29a      	uxth	r2, r3
 8003710:	897b      	ldrh	r3, [r7, #10]
 8003712:	4313      	orrs	r3, r2
 8003714:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a12      	ldr	r2, [pc, #72]	; (8003764 <TIM_OC4Init+0xc8>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d003      	beq.n	8003726 <TIM_OC4Init+0x8a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a11      	ldr	r2, [pc, #68]	; (8003768 <TIM_OC4Init+0xcc>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d10a      	bne.n	800373c <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8003726:	89fb      	ldrh	r3, [r7, #14]
 8003728:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800372c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	8a1b      	ldrh	r3, [r3, #16]
 8003732:	019b      	lsls	r3, r3, #6
 8003734:	b29a      	uxth	r2, r3
 8003736:	89fb      	ldrh	r3, [r7, #14]
 8003738:	4313      	orrs	r3, r2
 800373a:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	89fa      	ldrh	r2, [r7, #14]
 8003740:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	89ba      	ldrh	r2, [r7, #12]
 8003746:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	897a      	ldrh	r2, [r7, #10]
 8003754:	841a      	strh	r2, [r3, #32]
}
 8003756:	bf00      	nop
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
 8003762:	bf00      	nop
 8003764:	40010000 	.word	0x40010000
 8003768:	40010400 	.word	0x40010400

0800376c <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8003778:	2300      	movs	r3, #0
 800377a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	8b9b      	ldrh	r3, [r3, #28]
 8003780:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8003782:	89fb      	ldrh	r3, [r7, #14]
 8003784:	f023 0308 	bic.w	r3, r3, #8
 8003788:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800378a:	89fa      	ldrh	r2, [r7, #14]
 800378c:	887b      	ldrh	r3, [r7, #2]
 800378e:	4313      	orrs	r3, r2
 8003790:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	89fa      	ldrh	r2, [r7, #14]
 8003796:	839a      	strh	r2, [r3, #28]
}
 8003798:	bf00      	nop
 800379a:	3714      	adds	r7, #20
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	8b9b      	ldrh	r3, [r3, #28]
 80037b8:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 80037ba:	89fb      	ldrh	r3, [r7, #14]
 80037bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037c0:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 80037c2:	887b      	ldrh	r3, [r7, #2]
 80037c4:	021b      	lsls	r3, r3, #8
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	89fb      	ldrh	r3, [r7, #14]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	89fa      	ldrh	r2, [r7, #14]
 80037d2:	839a      	strh	r2, [r3, #28]
}
 80037d4:	bf00      	nop
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80037e0:	b480      	push	{r7}
 80037e2:	b083      	sub	sp, #12
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	807b      	strh	r3, [r7, #2]
 80037ec:	4613      	mov	r3, r2
 80037ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80037f0:	787b      	ldrb	r3, [r7, #1]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d008      	beq.n	8003808 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	899b      	ldrh	r3, [r3, #12]
 80037fa:	b29a      	uxth	r2, r3
 80037fc:	887b      	ldrh	r3, [r7, #2]
 80037fe:	4313      	orrs	r3, r2
 8003800:	b29a      	uxth	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8003806:	e009      	b.n	800381c <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	899b      	ldrh	r3, [r3, #12]
 800380c:	b29a      	uxth	r2, r3
 800380e:	887b      	ldrh	r3, [r7, #2]
 8003810:	43db      	mvns	r3, r3
 8003812:	b29b      	uxth	r3, r3
 8003814:	4013      	ands	r3, r2
 8003816:	b29a      	uxth	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	819a      	strh	r2, [r3, #12]
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8003834:	887b      	ldrh	r3, [r7, #2]
 8003836:	43db      	mvns	r3, r3
 8003838:	b29a      	uxth	r2, r3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	821a      	strh	r2, [r3, #16]
}
 800383e:	bf00      	nop
 8003840:	370c      	adds	r7, #12
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
 8003852:	460b      	mov	r3, r1
 8003854:	807b      	strh	r3, [r7, #2]
 8003856:	4613      	mov	r3, r2
 8003858:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800385a:	787b      	ldrb	r3, [r7, #1]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	899b      	ldrh	r3, [r3, #12]
 8003864:	b29a      	uxth	r2, r3
 8003866:	887b      	ldrh	r3, [r7, #2]
 8003868:	4313      	orrs	r3, r2
 800386a:	b29a      	uxth	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
 8003870:	e009      	b.n	8003886 <TIM_DMACmd+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	899b      	ldrh	r3, [r3, #12]
 8003876:	b29a      	uxth	r2, r3
 8003878:	887b      	ldrh	r3, [r7, #2]
 800387a:	43db      	mvns	r3, r3
 800387c:	b29b      	uxth	r3, r3
 800387e:	4013      	ands	r3, r2
 8003880:	b29a      	uxth	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	819a      	strh	r2, [r3, #12]
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
	...

08003894 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08a      	sub	sp, #40	; 0x28
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 800389e:	2300      	movs	r3, #0
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24
 80038a2:	2300      	movs	r3, #0
 80038a4:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 80038a6:	2300      	movs	r3, #0
 80038a8:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 80038aa:	2300      	movs	r3, #0
 80038ac:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	8a1b      	ldrh	r3, [r3, #16]
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	88db      	ldrh	r3, [r3, #6]
 80038c2:	461a      	mov	r2, r3
 80038c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c6:	4313      	orrs	r3, r2
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	b29a      	uxth	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	899b      	ldrh	r3, [r3, #12]
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80038e0:	f023 030c 	bic.w	r3, r3, #12
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	889a      	ldrh	r2, [r3, #4]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	891b      	ldrh	r3, [r3, #8]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80038f6:	4313      	orrs	r3, r2
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	461a      	mov	r2, r3
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	4313      	orrs	r3, r2
 8003900:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8003902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003904:	b29a      	uxth	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	8a9b      	ldrh	r3, [r3, #20]
 800390e:	b29b      	uxth	r3, r3
 8003910:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003918:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	899b      	ldrh	r3, [r3, #12]
 800391e:	461a      	mov	r2, r3
 8003920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003922:	4313      	orrs	r3, r2
 8003924:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	b29a      	uxth	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800392e:	f107 0308 	add.w	r3, r7, #8
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff fc78 	bl	8003228 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a30      	ldr	r2, [pc, #192]	; (80039fc <USART_Init+0x168>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d003      	beq.n	8003948 <USART_Init+0xb4>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a2f      	ldr	r2, [pc, #188]	; (8003a00 <USART_Init+0x16c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d102      	bne.n	800394e <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	623b      	str	r3, [r7, #32]
 800394c:	e001      	b.n	8003952 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	899b      	ldrh	r3, [r3, #12]
 8003956:	b29b      	uxth	r3, r3
 8003958:	b21b      	sxth	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	da0c      	bge.n	8003978 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 800395e:	6a3a      	ldr	r2, [r7, #32]
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	009a      	lsls	r2, r3, #2
 8003968:	441a      	add	r2, r3
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	fbb2 f3f3 	udiv	r3, r2, r3
 8003974:	61fb      	str	r3, [r7, #28]
 8003976:	e00b      	b.n	8003990 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8003978:	6a3a      	ldr	r2, [r7, #32]
 800397a:	4613      	mov	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	4413      	add	r3, r2
 8003980:	009a      	lsls	r2, r3, #2
 8003982:	441a      	add	r2, r3
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	fbb2 f3f3 	udiv	r3, r2, r3
 800398e:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	4a1c      	ldr	r2, [pc, #112]	; (8003a04 <USART_Init+0x170>)
 8003994:	fba2 2303 	umull	r2, r3, r2, r3
 8003998:	095b      	lsrs	r3, r3, #5
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 800399e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a0:	091b      	lsrs	r3, r3, #4
 80039a2:	2264      	movs	r2, #100	; 0x64
 80039a4:	fb02 f303 	mul.w	r3, r2, r3
 80039a8:	69fa      	ldr	r2, [r7, #28]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	899b      	ldrh	r3, [r3, #12]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	b21b      	sxth	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	da0c      	bge.n	80039d4 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	3332      	adds	r3, #50	; 0x32
 80039c0:	4a10      	ldr	r2, [pc, #64]	; (8003a04 <USART_Init+0x170>)
 80039c2:	fba2 2303 	umull	r2, r3, r2, r3
 80039c6:	095b      	lsrs	r3, r3, #5
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ce:	4313      	orrs	r3, r2
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
 80039d2:	e00b      	b.n	80039ec <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	3332      	adds	r3, #50	; 0x32
 80039da:	4a0a      	ldr	r2, [pc, #40]	; (8003a04 <USART_Init+0x170>)
 80039dc:	fba2 2303 	umull	r2, r3, r2, r3
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039e8:	4313      	orrs	r3, r2
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	811a      	strh	r2, [r3, #8]
}
 80039f4:	bf00      	nop
 80039f6:	3728      	adds	r7, #40	; 0x28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40011000 	.word	0x40011000
 8003a00:	40011400 	.word	0x40011400
 8003a04:	51eb851f 	.word	0x51eb851f

08003a08 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d008      	beq.n	8003a2c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	899b      	ldrh	r3, [r3, #12]
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8003a2a:	e007      	b.n	8003a3c <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	899b      	ldrh	r3, [r3, #12]
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	819a      	strh	r2, [r3, #12]
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr

08003a48 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8003a54:	887b      	ldrh	r3, [r7, #2]
 8003a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	809a      	strh	r2, [r3, #4]
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	807b      	strh	r3, [r7, #2]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	2300      	movs	r3, #0
 8003a82:	60fb      	str	r3, [r7, #12]
 8003a84:	2300      	movs	r3, #0
 8003a86:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8003a90:	887b      	ldrh	r3, [r7, #2]
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	095b      	lsrs	r3, r3, #5
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8003a9a:	887b      	ldrh	r3, [r7, #2]
 8003a9c:	f003 031f 	and.w	r3, r3, #31
 8003aa0:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aaa:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d103      	bne.n	8003aba <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	330c      	adds	r3, #12
 8003ab6:	617b      	str	r3, [r7, #20]
 8003ab8:	e009      	b.n	8003ace <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	2b02      	cmp	r3, #2
 8003abe:	d103      	bne.n	8003ac8 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	3310      	adds	r3, #16
 8003ac4:	617b      	str	r3, [r7, #20]
 8003ac6:	e002      	b.n	8003ace <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	3314      	adds	r3, #20
 8003acc:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8003ace:	787b      	ldrb	r3, [r7, #1]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d006      	beq.n	8003ae2 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	6811      	ldr	r1, [r2, #0]
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	430a      	orrs	r2, r1
 8003ade:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8003ae0:	e006      	b.n	8003af0 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	6811      	ldr	r1, [r2, #0]
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	43d2      	mvns	r2, r2
 8003aec:	400a      	ands	r2, r1
 8003aee:	601a      	str	r2, [r3, #0]
}
 8003af0:	bf00      	nop
 8003af2:	371c      	adds	r7, #28
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	460b      	mov	r3, r1
 8003b06:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	881b      	ldrh	r3, [r3, #0]
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	887b      	ldrh	r3, [r7, #2]
 8003b14:	4013      	ands	r3, r2
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	73fb      	strb	r3, [r7, #15]
 8003b20:	e001      	b.n	8003b26 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8003b22:	2300      	movs	r3, #0
 8003b24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3714      	adds	r7, #20
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8003b40:	2300      	movs	r3, #0
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	2300      	movs	r3, #0
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8003b50:	887b      	ldrh	r3, [r7, #2]
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	095b      	lsrs	r3, r3, #5
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8003b5a:	887b      	ldrh	r3, [r7, #2]
 8003b5c:	f003 031f 	and.w	r3, r3, #31
 8003b60:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8003b62:	2201      	movs	r2, #1
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6a:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d107      	bne.n	8003b82 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	899b      	ldrh	r3, [r3, #12]
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	461a      	mov	r2, r3
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	e011      	b.n	8003ba6 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d107      	bne.n	8003b98 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	8a1b      	ldrh	r3, [r3, #16]
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	461a      	mov	r2, r3
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	4013      	ands	r3, r2
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	e006      	b.n	8003ba6 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	8a9b      	ldrh	r3, [r3, #20]
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8003ba6:	887b      	ldrh	r3, [r7, #2]
 8003ba8:	0a1b      	lsrs	r3, r3, #8
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8003bae:	2201      	movs	r2, #1
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	881b      	ldrh	r3, [r3, #0]
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d005      	beq.n	8003bd8 <USART_GetITStatus+0xa4>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d002      	beq.n	8003bd8 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	74fb      	strb	r3, [r7, #19]
 8003bd6:	e001      	b.n	8003bdc <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8003bdc:	7cfb      	ldrb	r3, [r7, #19]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	371c      	adds	r7, #28
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b085      	sub	sp, #20
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	81fb      	strh	r3, [r7, #14]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8003bfe:	887b      	ldrh	r3, [r7, #2]
 8003c00:	0a1b      	lsrs	r3, r3, #8
 8003c02:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8003c04:	89fb      	ldrh	r3, [r7, #14]
 8003c06:	2201      	movs	r2, #1
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8003c0e:	89bb      	ldrh	r3, [r7, #12]
 8003c10:	43db      	mvns	r3, r3
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	801a      	strh	r2, [r3, #0]
}
 8003c18:	bf00      	nop
 8003c1a:	3714      	adds	r7, #20
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	0000      	movs	r0, r0
	...

08003c28 <DELAY_init>:
uint32_t D_mS; // Global variable (ms)
uint32_t D_S; // Global variable (s)


void DELAY_init(void)
{
 8003c28:	b590      	push	{r4, r7, lr}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
	RCC_ClocksTypeDef Clocks;
	RCC_GetClocksFreq(&Clocks);
 8003c2e:	463b      	mov	r3, r7
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7ff faf9 	bl	8003228 <RCC_GetClocksFreq>
	G_CLK = Clocks.SYSCLK_Frequency;	// Read the systemclock
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	4a3f      	ldr	r2, [pc, #252]	; (8003d38 <DELAY_init+0x110>)
 8003c3a:	6013      	str	r3, [r2, #0]
	D_S  = (G_CLK*1.25)/9/2;	// Number of instructions in one second
 8003c3c:	4b3e      	ldr	r3, [pc, #248]	; (8003d38 <DELAY_init+0x110>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fc fc15 	bl	8000470 <__aeabi_ui2d>
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	4b3c      	ldr	r3, [pc, #240]	; (8003d3c <DELAY_init+0x114>)
 8003c4c:	f7fc fc86 	bl	800055c <__aeabi_dmul>
 8003c50:	4603      	mov	r3, r0
 8003c52:	460c      	mov	r4, r1
 8003c54:	4618      	mov	r0, r3
 8003c56:	4621      	mov	r1, r4
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	4b38      	ldr	r3, [pc, #224]	; (8003d40 <DELAY_init+0x118>)
 8003c5e:	f7fc fda7 	bl	80007b0 <__aeabi_ddiv>
 8003c62:	4603      	mov	r3, r0
 8003c64:	460c      	mov	r4, r1
 8003c66:	4618      	mov	r0, r3
 8003c68:	4621      	mov	r1, r4
 8003c6a:	f04f 0200 	mov.w	r2, #0
 8003c6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c72:	f7fc fd9d 	bl	80007b0 <__aeabi_ddiv>
 8003c76:	4603      	mov	r3, r0
 8003c78:	460c      	mov	r4, r1
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	4621      	mov	r1, r4
 8003c7e:	f7fc fe7f 	bl	8000980 <__aeabi_d2uiz>
 8003c82:	4602      	mov	r2, r0
 8003c84:	4b2f      	ldr	r3, [pc, #188]	; (8003d44 <DELAY_init+0x11c>)
 8003c86:	601a      	str	r2, [r3, #0]
	D_mS = (G_CLK*1.25)/9000/2; // Number of instructions in one millisecond
 8003c88:	4b2b      	ldr	r3, [pc, #172]	; (8003d38 <DELAY_init+0x110>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7fc fbef 	bl	8000470 <__aeabi_ui2d>
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	4b29      	ldr	r3, [pc, #164]	; (8003d3c <DELAY_init+0x114>)
 8003c98:	f7fc fc60 	bl	800055c <__aeabi_dmul>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	460c      	mov	r4, r1
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	4621      	mov	r1, r4
 8003ca4:	a320      	add	r3, pc, #128	; (adr r3, 8003d28 <DELAY_init+0x100>)
 8003ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003caa:	f7fc fd81 	bl	80007b0 <__aeabi_ddiv>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	460c      	mov	r4, r1
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	4621      	mov	r1, r4
 8003cb6:	f04f 0200 	mov.w	r2, #0
 8003cba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003cbe:	f7fc fd77 	bl	80007b0 <__aeabi_ddiv>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	460c      	mov	r4, r1
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	4621      	mov	r1, r4
 8003cca:	f7fc fe59 	bl	8000980 <__aeabi_d2uiz>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	4b1d      	ldr	r3, [pc, #116]	; (8003d48 <DELAY_init+0x120>)
 8003cd2:	601a      	str	r2, [r3, #0]
	D_uS = (G_CLK*1.25)/9000000/2; // Number of instructions in one microsecond, largest rounding error
 8003cd4:	4b18      	ldr	r3, [pc, #96]	; (8003d38 <DELAY_init+0x110>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fc fbc9 	bl	8000470 <__aeabi_ui2d>
 8003cde:	f04f 0200 	mov.w	r2, #0
 8003ce2:	4b16      	ldr	r3, [pc, #88]	; (8003d3c <DELAY_init+0x114>)
 8003ce4:	f7fc fc3a 	bl	800055c <__aeabi_dmul>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	460c      	mov	r4, r1
 8003cec:	4618      	mov	r0, r3
 8003cee:	4621      	mov	r1, r4
 8003cf0:	a30f      	add	r3, pc, #60	; (adr r3, 8003d30 <DELAY_init+0x108>)
 8003cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf6:	f7fc fd5b 	bl	80007b0 <__aeabi_ddiv>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	460c      	mov	r4, r1
 8003cfe:	4618      	mov	r0, r3
 8003d00:	4621      	mov	r1, r4
 8003d02:	f04f 0200 	mov.w	r2, #0
 8003d06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d0a:	f7fc fd51 	bl	80007b0 <__aeabi_ddiv>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	460c      	mov	r4, r1
 8003d12:	4618      	mov	r0, r3
 8003d14:	4621      	mov	r1, r4
 8003d16:	f7fc fe33 	bl	8000980 <__aeabi_d2uiz>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <DELAY_init+0x124>)
 8003d1e:	601a      	str	r2, [r3, #0]
}
 8003d20:	bf00      	nop
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd90      	pop	{r4, r7, pc}
 8003d28:	00000000 	.word	0x00000000
 8003d2c:	40c19400 	.word	0x40c19400
 8003d30:	00000000 	.word	0x00000000
 8003d34:	41612a88 	.word	0x41612a88
 8003d38:	20013890 	.word	0x20013890
 8003d3c:	3ff40000 	.word	0x3ff40000
 8003d40:	40220000 	.word	0x40220000
 8003d44:	20013894 	.word	0x20013894
 8003d48:	2001389c 	.word	0x2001389c
 8003d4c:	20013898 	.word	0x20013898

08003d50 <DELAY_ms>:
        time--;
    }
}

void DELAY_ms(volatile unsigned int time)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
    volatile unsigned int i;

    while(time>0)		// Run x times 1 millisecond
 8003d58:	e00d      	b.n	8003d76 <DELAY_ms+0x26>
    {
        for(i=0;i<D_mS;i++);
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	e002      	b.n	8003d66 <DELAY_ms+0x16>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	3301      	adds	r3, #1
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4b07      	ldr	r3, [pc, #28]	; (8003d88 <DELAY_ms+0x38>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d3f7      	bcc.n	8003d60 <DELAY_ms+0x10>
        time--;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3b01      	subs	r3, #1
 8003d74:	607b      	str	r3, [r7, #4]
    while(time>0)		// Run x times 1 millisecond
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1ee      	bne.n	8003d5a <DELAY_ms+0xa>
    }
}
 8003d7c:	bf00      	nop
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr
 8003d88:	2001389c 	.word	0x2001389c

08003d8c <UB_VGA_Screen_Init>:

//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
  uint16_t xp,yp;

  VGA.hsync_cnt=0;
 8003d92:	4b1b      	ldr	r3, [pc, #108]	; (8003e00 <UB_VGA_Screen_Init+0x74>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	801a      	strh	r2, [r3, #0]
  VGA.start_adr=0;
 8003d98:	4b19      	ldr	r3, [pc, #100]	; (8003e00 <UB_VGA_Screen_Init+0x74>)
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg=0;
 8003d9e:	4b18      	ldr	r3, [pc, #96]	; (8003e00 <UB_VGA_Screen_Init+0x74>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	609a      	str	r2, [r3, #8]

  // RAM init total black
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8003da4:	2300      	movs	r3, #0
 8003da6:	80bb      	strh	r3, [r7, #4]
 8003da8:	e017      	b.n	8003dda <UB_VGA_Screen_Init+0x4e>
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 8003daa:	2300      	movs	r3, #0
 8003dac:	80fb      	strh	r3, [r7, #6]
 8003dae:	e00d      	b.n	8003dcc <UB_VGA_Screen_Init+0x40>
      VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=0;
 8003db0:	88ba      	ldrh	r2, [r7, #4]
 8003db2:	4613      	mov	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	019b      	lsls	r3, r3, #6
 8003dba:	441a      	add	r2, r3
 8003dbc:	88fb      	ldrh	r3, [r7, #6]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	4a10      	ldr	r2, [pc, #64]	; (8003e04 <UB_VGA_Screen_Init+0x78>)
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	54d1      	strb	r1, [r2, r3]
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 8003dc6:	88fb      	ldrh	r3, [r7, #6]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	80fb      	strh	r3, [r7, #6]
 8003dcc:	88fb      	ldrh	r3, [r7, #6]
 8003dce:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003dd2:	d9ed      	bls.n	8003db0 <UB_VGA_Screen_Init+0x24>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8003dd4:	88bb      	ldrh	r3, [r7, #4]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	80bb      	strh	r3, [r7, #4]
 8003dda:	88bb      	ldrh	r3, [r7, #4]
 8003ddc:	2bef      	cmp	r3, #239	; 0xef
 8003dde:	d9e4      	bls.n	8003daa <UB_VGA_Screen_Init+0x1e>
    }
  }

  // init IO-Pins
  P_VGA_InitIO();
 8003de0:	f000 f85e 	bl	8003ea0 <P_VGA_InitIO>
  // init Timer
  P_VGA_InitTIM();
 8003de4:	f000 f8b0 	bl	8003f48 <P_VGA_InitTIM>
  // init DMA
  P_VGA_InitDMA();
 8003de8:	f000 f940 	bl	800406c <P_VGA_InitDMA>
  // init Interrupts
  P_VGA_InitINT();
 8003dec:	f000 f912 	bl	8004014 <P_VGA_InitINT>

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg=DMA2_Stream5->CR;
 8003df0:	4b05      	ldr	r3, [pc, #20]	; (8003e08 <UB_VGA_Screen_Init+0x7c>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a02      	ldr	r2, [pc, #8]	; (8003e00 <UB_VGA_Screen_Init+0x74>)
 8003df6:	6093      	str	r3, [r2, #8]
}
 8003df8:	bf00      	nop
 8003dfa:	3708      	adds	r7, #8
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}
 8003e00:	200006ec 	.word	0x200006ec
 8003e04:	20000780 	.word	0x20000780
 8003e08:	40026488 	.word	0x40026488

08003e0c <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8003e16:	2300      	movs	r3, #0
 8003e18:	81bb      	strh	r3, [r7, #12]
 8003e1a:	e012      	b.n	8003e42 <UB_VGA_FillScreen+0x36>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	81fb      	strh	r3, [r7, #14]
 8003e20:	e008      	b.n	8003e34 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp,yp,color);
 8003e22:	79fa      	ldrb	r2, [r7, #7]
 8003e24:	89b9      	ldrh	r1, [r7, #12]
 8003e26:	89fb      	ldrh	r3, [r7, #14]
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 f811 	bl	8003e50 <UB_VGA_SetPixel>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 8003e2e:	89fb      	ldrh	r3, [r7, #14]
 8003e30:	3301      	adds	r3, #1
 8003e32:	81fb      	strh	r3, [r7, #14]
 8003e34:	89fb      	ldrh	r3, [r7, #14]
 8003e36:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003e3a:	d3f2      	bcc.n	8003e22 <UB_VGA_FillScreen+0x16>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8003e3c:	89bb      	ldrh	r3, [r7, #12]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	81bb      	strh	r3, [r7, #12]
 8003e42:	89bb      	ldrh	r3, [r7, #12]
 8003e44:	2bef      	cmp	r3, #239	; 0xef
 8003e46:	d9e9      	bls.n	8003e1c <UB_VGA_FillScreen+0x10>
    }
  }
}
 8003e48:	bf00      	nop
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	4603      	mov	r3, r0
 8003e58:	80fb      	strh	r3, [r7, #6]
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	80bb      	strh	r3, [r7, #4]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	70fb      	strb	r3, [r7, #3]
  if(xp>=VGA_DISPLAY_X) xp=0;
 8003e62:	88fb      	ldrh	r3, [r7, #6]
 8003e64:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003e68:	d301      	bcc.n	8003e6e <UB_VGA_SetPixel+0x1e>
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	80fb      	strh	r3, [r7, #6]
  if(yp>=VGA_DISPLAY_Y) yp=0;
 8003e6e:	88bb      	ldrh	r3, [r7, #4]
 8003e70:	2bef      	cmp	r3, #239	; 0xef
 8003e72:	d901      	bls.n	8003e78 <UB_VGA_SetPixel+0x28>
 8003e74:	2300      	movs	r3, #0
 8003e76:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=color;
 8003e78:	88ba      	ldrh	r2, [r7, #4]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	019b      	lsls	r3, r3, #6
 8003e82:	441a      	add	r2, r3
 8003e84:	88fb      	ldrh	r3, [r7, #6]
 8003e86:	4413      	add	r3, r2
 8003e88:	4904      	ldr	r1, [pc, #16]	; (8003e9c <UB_VGA_SetPixel+0x4c>)
 8003e8a:	78fa      	ldrb	r2, [r7, #3]
 8003e8c:	54ca      	strb	r2, [r1, r3]
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	20000780 	.word	0x20000780

08003ea0 <P_VGA_InitIO>:
//--------------------------------------------------------------
// interne Funktionen
// init aller IO-Pins
//--------------------------------------------------------------
void P_VGA_InitIO(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
  // init RGB-Pins (PE8 - PE15)
  // as normal GPIOs
  //---------------------------------------------
 
  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	2010      	movs	r0, #16
 8003eaa:	f7ff fa65 	bl	8003378 <RCC_AHB1PeriphClockCmd>

  // Config as Digital output
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 |
 8003eae:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8003eb2:	603b      	str	r3, [r7, #0]
        GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8003ec0:	2303      	movs	r3, #3
 8003ec2:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOE, &GPIO_InitStructure);
 8003ec4:	463b      	mov	r3, r7
 8003ec6:	4619      	mov	r1, r3
 8003ec8:	481d      	ldr	r0, [pc, #116]	; (8003f40 <P_VGA_InitIO+0xa0>)
 8003eca:	f7ff f8d5 	bl	8003078 <GPIO_Init>

  GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 8003ece:	4b1c      	ldr	r3, [pc, #112]	; (8003f40 <P_VGA_InitIO+0xa0>)
 8003ed0:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8003ed4:	835a      	strh	r2, [r3, #26]
  // init of the H-Sync Pin (PB11)
  // using Timer2 and CH4
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	2002      	movs	r0, #2
 8003eda:	f7ff fa4d 	bl	8003378 <RCC_AHB1PeriphClockCmd>

  // Config Pins as Digital-out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 8003ede:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ee2:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8003ee4:	2302      	movs	r3, #2
 8003ee6:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003eec:	2300      	movs	r3, #0
 8003eee:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003ef4:	463b      	mov	r3, r7
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	4812      	ldr	r0, [pc, #72]	; (8003f44 <P_VGA_InitIO+0xa4>)
 8003efa:	f7ff f8bd 	bl	8003078 <GPIO_Init>

  // alternative function connect with IO
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_TIM2);
 8003efe:	2201      	movs	r2, #1
 8003f00:	210b      	movs	r1, #11
 8003f02:	4810      	ldr	r0, [pc, #64]	; (8003f44 <P_VGA_InitIO+0xa4>)
 8003f04:	f7ff f946 	bl	8003194 <GPIO_PinAFConfig>
  // init of V-Sync Pin (PB12)
  // using GPIO
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8003f08:	2101      	movs	r1, #1
 8003f0a:	2002      	movs	r0, #2
 8003f0c:	f7ff fa34 	bl	8003378 <RCC_AHB1PeriphClockCmd>

  // Config of the Pins as Digital out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8003f10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f14:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8003f16:	2301      	movs	r3, #1
 8003f18:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8003f22:	2303      	movs	r3, #3
 8003f24:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8003f26:	463b      	mov	r3, r7
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4806      	ldr	r0, [pc, #24]	; (8003f44 <P_VGA_InitIO+0xa4>)
 8003f2c:	f7ff f8a4 	bl	8003078 <GPIO_Init>

  GPIOB->BSRRL = GPIO_Pin_12;
 8003f30:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <P_VGA_InitIO+0xa4>)
 8003f32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f36:	831a      	strh	r2, [r3, #24]
}
 8003f38:	bf00      	nop
 8003f3a:	3708      	adds	r7, #8
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}
 8003f40:	40021000 	.word	0x40021000
 8003f44:	40020400 	.word	0x40020400

08003f48 <P_VGA_InitTIM>:
//--------------------------------------------------------------
// internal Function
// init Timer
//--------------------------------------------------------------
void P_VGA_InitTIM(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b088      	sub	sp, #32
 8003f4c:	af00      	add	r7, sp, #0
  // init of Timer1 for
  // Pixeldata via DMA
  //---------------------------------------------

  // Clock enable
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8003f4e:	2101      	movs	r1, #1
 8003f50:	2001      	movs	r0, #1
 8003f52:	f7ff fa51 	bl	80033f8 <RCC_APB2PeriphClockCmd>

  // Timer1 init
  TIM_TimeBaseStructure.TIM_Period =  VGA_TIM1_PERIODE;
 8003f56:	230b      	movs	r3, #11
 8003f58:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM1_PRESCALE;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8003f62:	2300      	movs	r3, #0
 8003f64:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 8003f66:	f107 0314 	add.w	r3, r7, #20
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	4828      	ldr	r0, [pc, #160]	; (8004010 <P_VGA_InitTIM+0xc8>)
 8003f6e:	f7ff fa63 	bl	8003438 <TIM_TimeBaseInit>
  // CH4 for HSYNC-Signal
  // CH3 for DMA Trigger start
  //---------------------------------------------

  // Clock enable
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8003f72:	2101      	movs	r1, #1
 8003f74:	2001      	movs	r0, #1
 8003f76:	f7ff fa1f 	bl	80033b8 <RCC_APB1PeriphClockCmd>

  // Timer2 init
  TIM_TimeBaseStructure.TIM_Period = VGA_TIM2_HSYNC_PERIODE;
 8003f7a:	f640 236b 	movw	r3, #2667	; 0xa6b
 8003f7e:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8003f80:	2300      	movs	r3, #0
 8003f82:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8003f84:	2300      	movs	r3, #0
 8003f86:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8003f8c:	f107 0314 	add.w	r3, r7, #20
 8003f90:	4619      	mov	r1, r3
 8003f92:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003f96:	f7ff fa4f 	bl	8003438 <TIM_TimeBaseInit>

  // Timer2 Channel 3 ( for DMA Trigger start)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8003f9a:	2360      	movs	r3, #96	; 0x60
 8003f9c:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HTRIGGER_START-VGA_TIM2_DMA_DELAY;
 8003fa2:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8003fa6:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8003fa8:	2302      	movs	r3, #2
 8003faa:	81bb      	strh	r3, [r7, #12]
  TIM_OC3Init(TIM2, &TIM_OCInitStructure);
 8003fac:	463b      	mov	r3, r7
 8003fae:	4619      	mov	r1, r3
 8003fb0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003fb4:	f7ff faec 	bl	8003590 <TIM_OC3Init>
  TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8003fb8:	2108      	movs	r1, #8
 8003fba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003fbe:	f7ff fbd5 	bl	800376c <TIM_OC3PreloadConfig>

  // Timer2 Channel 4 (for HSYNC)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8003fc2:	2360      	movs	r3, #96	; 0x60
 8003fc4:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HSYNC_IMP;
 8003fca:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8003fce:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	81bb      	strh	r3, [r7, #12]
  TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 8003fd4:	463b      	mov	r3, r7
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003fdc:	f7ff fb5e 	bl	800369c <TIM_OC4Init>
  TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8003fe0:	2108      	movs	r1, #8
 8003fe2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003fe6:	f7ff fbdd 	bl	80037a4 <TIM_OC4PreloadConfig>
  //---------------------------------------------
  // enable all Timers
  //---------------------------------------------

  // Timer1 enable
  TIM_ARRPreloadConfig(TIM1, ENABLE);
 8003fea:	2101      	movs	r1, #1
 8003fec:	4808      	ldr	r0, [pc, #32]	; (8004010 <P_VGA_InitTIM+0xc8>)
 8003fee:	f7ff fa8f 	bl	8003510 <TIM_ARRPreloadConfig>

  // Timer2 enable
  TIM_ARRPreloadConfig(TIM2, ENABLE);
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003ff8:	f7ff fa8a 	bl	8003510 <TIM_ARRPreloadConfig>
  TIM_Cmd(TIM2, ENABLE);
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004002:	f7ff faa5 	bl	8003550 <TIM_Cmd>

}
 8004006:	bf00      	nop
 8004008:	3720      	adds	r7, #32
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40010000 	.word	0x40010000

08004014 <P_VGA_InitINT>:
//--------------------------------------------------------------
// internal Function
// init Interrupts
//--------------------------------------------------------------
void P_VGA_InitINT(void)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
  // init from DMA Interrupt
  // for TransferComplete Interrupt
  // DMA2, Stream5, Channel6
  //---------------------------------------------

  DMA_ITConfig(DMA2_Stream5, DMA_IT_TC, ENABLE);
 800401a:	2201      	movs	r2, #1
 800401c:	2110      	movs	r1, #16
 800401e:	4812      	ldr	r0, [pc, #72]	; (8004068 <P_VGA_InitINT+0x54>)
 8004020:	f7fe ff6a 	bl	8002ef8 <DMA_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream5_IRQn;
 8004024:	2344      	movs	r3, #68	; 0x44
 8004026:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8004028:	2300      	movs	r3, #0
 800402a:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800402c:	2300      	movs	r3, #0
 800402e:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004030:	2301      	movs	r3, #1
 8004032:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8004034:	1d3b      	adds	r3, r7, #4
 8004036:	4618      	mov	r0, r3
 8004038:	f7fe fdb4 	bl	8002ba4 <NVIC_Init>
  // init of Timer2 Interrupt
  // for HSync-Counter using Update
  // for DMA Trigger START using CH3
  //---------------------------------------------

  TIM_ITConfig(TIM2,TIM_IT_CC3,ENABLE);
 800403c:	2201      	movs	r2, #1
 800403e:	2108      	movs	r1, #8
 8004040:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004044:	f7ff fbcc 	bl	80037e0 <TIM_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8004048:	231c      	movs	r3, #28
 800404a:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 800404c:	2300      	movs	r3, #0
 800404e:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8004050:	2300      	movs	r3, #0
 8004052:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004054:	2301      	movs	r3, #1
 8004056:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8004058:	1d3b      	adds	r3, r7, #4
 800405a:	4618      	mov	r0, r3
 800405c:	f7fe fda2 	bl	8002ba4 <NVIC_Init>
}
 8004060:	bf00      	nop
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	40026488 	.word	0x40026488

0800406c <P_VGA_InitDMA>:
//--------------------------------------------------------------
// internal Function
// init DMA
//--------------------------------------------------------------
void P_VGA_InitDMA(void)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b090      	sub	sp, #64	; 0x40
 8004070:	af00      	add	r7, sp, #0
  // (look at page 217 of the Ref Manual)
  // DMA=2, Channel=6, Stream=5
  //---------------------------------------------

  // Clock Enable (DMA)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 8004072:	2101      	movs	r1, #1
 8004074:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8004078:	f7ff f97e 	bl	8003378 <RCC_AHB1PeriphClockCmd>

  // DMA init (DMA2, Channel6, Stream5)
  DMA_Cmd(DMA2_Stream5, DISABLE);
 800407c:	2100      	movs	r1, #0
 800407e:	481b      	ldr	r0, [pc, #108]	; (80040ec <P_VGA_InitDMA+0x80>)
 8004080:	f7fe ff1e 	bl	8002ec0 <DMA_Cmd>
  DMA_DeInit(DMA2_Stream5);
 8004084:	4819      	ldr	r0, [pc, #100]	; (80040ec <P_VGA_InitDMA+0x80>)
 8004086:	f7fe fdef 	bl	8002c68 <DMA_DeInit>
  DMA_InitStructure.DMA_Channel = DMA_Channel_6;
 800408a:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 800408e:	607b      	str	r3, [r7, #4]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)VGA_GPIOE_ODR_ADDRESS;
 8004090:	4b17      	ldr	r3, [pc, #92]	; (80040f0 <P_VGA_InitDMA+0x84>)
 8004092:	60bb      	str	r3, [r7, #8]
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&VGA_RAM1;
 8004094:	4b17      	ldr	r3, [pc, #92]	; (80040f4 <P_VGA_InitDMA+0x88>)
 8004096:	60fb      	str	r3, [r7, #12]
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8004098:	2340      	movs	r3, #64	; 0x40
 800409a:	613b      	str	r3, [r7, #16]
  DMA_InitStructure.DMA_BufferSize = VGA_DISPLAY_X+1;
 800409c:	f240 1341 	movw	r3, #321	; 0x141
 80040a0:	617b      	str	r3, [r7, #20]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 80040a2:	2300      	movs	r3, #0
 80040a4:	61bb      	str	r3, [r7, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 80040a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040aa:	61fb      	str	r3, [r7, #28]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 80040ac:	2300      	movs	r3, #0
 80040ae:	623b      	str	r3, [r7, #32]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 80040b0:	2300      	movs	r3, #0
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 80040b4:	2300      	movs	r3, #0
 80040b6:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 80040b8:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80040bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 80040be:	2300      	movs	r3, #0
 80040c0:	633b      	str	r3, [r7, #48]	; 0x30
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 80040c2:	2301      	movs	r3, #1
 80040c4:	637b      	str	r3, [r7, #52]	; 0x34
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 80040c6:	2300      	movs	r3, #0
 80040c8:	63bb      	str	r3, [r7, #56]	; 0x38
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 80040ca:	2300      	movs	r3, #0
 80040cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  DMA_Init(DMA2_Stream5, &DMA_InitStructure);
 80040ce:	1d3b      	adds	r3, r7, #4
 80040d0:	4619      	mov	r1, r3
 80040d2:	4806      	ldr	r0, [pc, #24]	; (80040ec <P_VGA_InitDMA+0x80>)
 80040d4:	f7fe fe9c 	bl	8002e10 <DMA_Init>

  // DMA-Timer1 enable
  TIM_DMACmd(TIM1,TIM_DMA_Update,ENABLE);
 80040d8:	2201      	movs	r2, #1
 80040da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80040de:	4806      	ldr	r0, [pc, #24]	; (80040f8 <P_VGA_InitDMA+0x8c>)
 80040e0:	f7ff fbb3 	bl	800384a <TIM_DMACmd>
}
 80040e4:	bf00      	nop
 80040e6:	3740      	adds	r7, #64	; 0x40
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40026488 	.word	0x40026488
 80040f0:	40021015 	.word	0x40021015
 80040f4:	20000780 	.word	0x20000780
 80040f8:	40010000 	.word	0x40010000

080040fc <TIM2_IRQHandler>:
//
//   CC3-Interrupt    -> starts from DMA
// Watch it.. higher troughput when interrupt flag is left alone
//--------------------------------------------------------------
void TIM2_IRQHandler(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0

  // Interrupt of Timer2 CH3 occurred (for Trigger start)
  TIM_ClearITPendingBit(TIM2, TIM_IT_CC3);
 8004100:	2108      	movs	r1, #8
 8004102:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8004106:	f7ff fb8f 	bl	8003828 <TIM_ClearITPendingBit>

  VGA.hsync_cnt++;
 800410a:	4b26      	ldr	r3, [pc, #152]	; (80041a4 <TIM2_IRQHandler+0xa8>)
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	3301      	adds	r3, #1
 8004110:	b29a      	uxth	r2, r3
 8004112:	4b24      	ldr	r3, [pc, #144]	; (80041a4 <TIM2_IRQHandler+0xa8>)
 8004114:	801a      	strh	r2, [r3, #0]
  if(VGA.hsync_cnt>=VGA_VSYNC_PERIODE) {
 8004116:	4b23      	ldr	r3, [pc, #140]	; (80041a4 <TIM2_IRQHandler+0xa8>)
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 800411e:	d905      	bls.n	800412c <TIM2_IRQHandler+0x30>
    // -----------
    VGA.hsync_cnt=0;
 8004120:	4b20      	ldr	r3, [pc, #128]	; (80041a4 <TIM2_IRQHandler+0xa8>)
 8004122:	2200      	movs	r2, #0
 8004124:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr=(uint32_t)(&VGA_RAM1[0]);
 8004126:	4a20      	ldr	r2, [pc, #128]	; (80041a8 <TIM2_IRQHandler+0xac>)
 8004128:	4b1e      	ldr	r3, [pc, #120]	; (80041a4 <TIM2_IRQHandler+0xa8>)
 800412a:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  if(VGA.hsync_cnt<VGA_VSYNC_IMP) {
 800412c:	4b1d      	ldr	r3, [pc, #116]	; (80041a4 <TIM2_IRQHandler+0xa8>)
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d804      	bhi.n	800413e <TIM2_IRQHandler+0x42>
    // HSync low
    GPIOB->BSRRH = GPIO_Pin_12;
 8004134:	4b1d      	ldr	r3, [pc, #116]	; (80041ac <TIM2_IRQHandler+0xb0>)
 8004136:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800413a:	835a      	strh	r2, [r3, #26]
 800413c:	e003      	b.n	8004146 <TIM2_IRQHandler+0x4a>
  }
  else {
    // HSync High
    GPIOB->BSRRL = GPIO_Pin_12;
 800413e:	4b1b      	ldr	r3, [pc, #108]	; (80041ac <TIM2_IRQHandler+0xb0>)
 8004140:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004144:	831a      	strh	r2, [r3, #24]
  }

  // Test for DMA start
  if((VGA.hsync_cnt>=VGA_VSYNC_BILD_START) && (VGA.hsync_cnt<=VGA_VSYNC_BILD_STOP)) {
 8004146:	4b17      	ldr	r3, [pc, #92]	; (80041a4 <TIM2_IRQHandler+0xa8>)
 8004148:	881b      	ldrh	r3, [r3, #0]
 800414a:	2b23      	cmp	r3, #35	; 0x23
 800414c:	d927      	bls.n	800419e <TIM2_IRQHandler+0xa2>
 800414e:	4b15      	ldr	r3, [pc, #84]	; (80041a4 <TIM2_IRQHandler+0xa8>)
 8004150:	881b      	ldrh	r3, [r3, #0]
 8004152:	f240 2202 	movw	r2, #514	; 0x202
 8004156:	4293      	cmp	r3, r2
 8004158:	d821      	bhi.n	800419e <TIM2_IRQHandler+0xa2>
    // after FP start => DMA Transfer

    // DMA2 init
	DMA2_Stream5->CR=VGA.dma2_cr_reg;
 800415a:	4a15      	ldr	r2, [pc, #84]	; (80041b0 <TIM2_IRQHandler+0xb4>)
 800415c:	4b11      	ldr	r3, [pc, #68]	; (80041a4 <TIM2_IRQHandler+0xa8>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR=VGA.start_adr;
 8004162:	4a13      	ldr	r2, [pc, #76]	; (80041b0 <TIM2_IRQHandler+0xb4>)
 8004164:	4b0f      	ldr	r3, [pc, #60]	; (80041a4 <TIM2_IRQHandler+0xa8>)
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1|=TIM_CR1_CEN;
 800416a:	4a12      	ldr	r2, [pc, #72]	; (80041b4 <TIM2_IRQHandler+0xb8>)
 800416c:	4b11      	ldr	r3, [pc, #68]	; (80041b4 <TIM2_IRQHandler+0xb8>)
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	b29b      	uxth	r3, r3
 8004172:	f043 0301 	orr.w	r3, r3, #1
 8004176:	b29b      	uxth	r3, r3
 8004178:	8013      	strh	r3, [r2, #0]
    // DMA2 enable
    DMA2_Stream5->CR|=DMA_SxCR_EN;
 800417a:	4a0d      	ldr	r2, [pc, #52]	; (80041b0 <TIM2_IRQHandler+0xb4>)
 800417c:	4b0c      	ldr	r3, [pc, #48]	; (80041b0 <TIM2_IRQHandler+0xb4>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f043 0301 	orr.w	r3, r3, #1
 8004184:	6013      	str	r3, [r2, #0]

    // Test Adrespointer for high
    if((VGA.hsync_cnt & 0x01)!=0) {
 8004186:	4b07      	ldr	r3, [pc, #28]	; (80041a4 <TIM2_IRQHandler+0xa8>)
 8004188:	881b      	ldrh	r3, [r3, #0]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	d005      	beq.n	800419e <TIM2_IRQHandler+0xa2>
      // inc after Hsync
      VGA.start_adr+=(VGA_DISPLAY_X+1);
 8004192:	4b04      	ldr	r3, [pc, #16]	; (80041a4 <TIM2_IRQHandler+0xa8>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f203 1341 	addw	r3, r3, #321	; 0x141
 800419a:	4a02      	ldr	r2, [pc, #8]	; (80041a4 <TIM2_IRQHandler+0xa8>)
 800419c:	6053      	str	r3, [r2, #4]
    }
  }
}
 800419e:	bf00      	nop
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	200006ec 	.word	0x200006ec
 80041a8:	20000780 	.word	0x20000780
 80041ac:	40020400 	.word	0x40020400
 80041b0:	40026488 	.word	0x40026488
 80041b4:	40010000 	.word	0x40010000

080041b8 <DMA2_Stream5_IRQHandler>:
//   after TransferCompleteInterrupt -> stop DMA
//
// still a bit buggy
//--------------------------------------------------------------
void DMA2_Stream5_IRQHandler(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  if(DMA_GetITStatus(DMA2_Stream5, DMA_IT_TCIF5))
 80041bc:	490d      	ldr	r1, [pc, #52]	; (80041f4 <DMA2_Stream5_IRQHandler+0x3c>)
 80041be:	480e      	ldr	r0, [pc, #56]	; (80041f8 <DMA2_Stream5_IRQHandler+0x40>)
 80041c0:	f7fe fed4 	bl	8002f6c <DMA_GetITStatus>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d012      	beq.n	80041f0 <DMA2_Stream5_IRQHandler+0x38>
  {
    // TransferInterruptComplete Interrupt from DMA2
    DMA_ClearITPendingBit(DMA2_Stream5, DMA_IT_TCIF5);
 80041ca:	490a      	ldr	r1, [pc, #40]	; (80041f4 <DMA2_Stream5_IRQHandler+0x3c>)
 80041cc:	480a      	ldr	r0, [pc, #40]	; (80041f8 <DMA2_Stream5_IRQHandler+0x40>)
 80041ce:	f7fe ff25 	bl	800301c <DMA_ClearITPendingBit>
    // stop after all pixels => DMA Transfer stop

    // Timer1 stop
    TIM1->CR1&=~TIM_CR1_CEN;
 80041d2:	4a0a      	ldr	r2, [pc, #40]	; (80041fc <DMA2_Stream5_IRQHandler+0x44>)
 80041d4:	4b09      	ldr	r3, [pc, #36]	; (80041fc <DMA2_Stream5_IRQHandler+0x44>)
 80041d6:	881b      	ldrh	r3, [r3, #0]
 80041d8:	b29b      	uxth	r3, r3
 80041da:	f023 0301 	bic.w	r3, r3, #1
 80041de:	b29b      	uxth	r3, r3
 80041e0:	8013      	strh	r3, [r2, #0]
    // DMA2 disable
    DMA2_Stream5->CR=0;
 80041e2:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <DMA2_Stream5_IRQHandler+0x40>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]
    // switch on black
    GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 80041e8:	4b05      	ldr	r3, [pc, #20]	; (8004200 <DMA2_Stream5_IRQHandler+0x48>)
 80041ea:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80041ee:	835a      	strh	r2, [r3, #26]
  }
}
 80041f0:	bf00      	nop
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	20008800 	.word	0x20008800
 80041f8:	40026488 	.word	0x40026488
 80041fc:	40010000 	.word	0x40010000
 8004200:	40021000 	.word	0x40021000

08004204 <UART_init>:

char string[100];
int charcounter = 0;

void UART_init(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0

  /* --------------------------- System Clocks Configuration -----------------*/
  /* USART2 clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 800420a:	2101      	movs	r1, #1
 800420c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8004210:	f7ff f8d2 	bl	80033b8 <RCC_APB1PeriphClockCmd>

  /* GPIOA clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8004214:	2101      	movs	r1, #1
 8004216:	2001      	movs	r0, #1
 8004218:	f7ff f8ae 	bl	8003378 <RCC_AHB1PeriphClockCmd>

  GPIO_InitTypeDef GPIO_InitStructure;

  /*-------------------------- GPIO Configuration ----------------------------*/
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 800421c:	230c      	movs	r3, #12
 800421e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8004220:	2302      	movs	r3, #2
 8004222:	753b      	strb	r3, [r7, #20]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8004224:	2300      	movs	r3, #0
 8004226:	75bb      	strb	r3, [r7, #22]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8004228:	2301      	movs	r3, #1
 800422a:	75fb      	strb	r3, [r7, #23]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800422c:	2302      	movs	r3, #2
 800422e:	757b      	strb	r3, [r7, #21]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004230:	f107 0310 	add.w	r3, r7, #16
 8004234:	4619      	mov	r1, r3
 8004236:	4816      	ldr	r0, [pc, #88]	; (8004290 <UART_init+0x8c>)
 8004238:	f7fe ff1e 	bl	8003078 <GPIO_Init>

  /* Connect USART pins to AF */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);   // USART2_TX
 800423c:	2207      	movs	r2, #7
 800423e:	2102      	movs	r1, #2
 8004240:	4813      	ldr	r0, [pc, #76]	; (8004290 <UART_init+0x8c>)
 8004242:	f7fe ffa7 	bl	8003194 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);  // USART2_RX
 8004246:	2207      	movs	r2, #7
 8004248:	2103      	movs	r1, #3
 800424a:	4811      	ldr	r0, [pc, #68]	; (8004290 <UART_init+0x8c>)
 800424c:	f7fe ffa2 	bl	8003194 <GPIO_PinAFConfig>
      - One Stop Bit
      - No parity
      - Hardware flow control disabled (RTS and CTS signals)
      - Receive and transmit enabled
*/
USART_InitStructure.USART_BaudRate = 115200;
 8004250:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004254:	603b      	str	r3, [r7, #0]
USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8004256:	2300      	movs	r3, #0
 8004258:	80bb      	strh	r3, [r7, #4]
USART_InitStructure.USART_StopBits = USART_StopBits_1;
 800425a:	2300      	movs	r3, #0
 800425c:	80fb      	strh	r3, [r7, #6]
USART_InitStructure.USART_Parity = USART_Parity_No;
 800425e:	2300      	movs	r3, #0
 8004260:	813b      	strh	r3, [r7, #8]
USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8004262:	2300      	movs	r3, #0
 8004264:	81bb      	strh	r3, [r7, #12]

USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8004266:	230c      	movs	r3, #12
 8004268:	817b      	strh	r3, [r7, #10]

USART_Init(USART2, &USART_InitStructure);
 800426a:	463b      	mov	r3, r7
 800426c:	4619      	mov	r1, r3
 800426e:	4809      	ldr	r0, [pc, #36]	; (8004294 <UART_init+0x90>)
 8004270:	f7ff fb10 	bl	8003894 <USART_Init>
USART_ITConfig(USART2,USART_IT_RXNE,ENABLE);
 8004274:	2201      	movs	r2, #1
 8004276:	f240 5125 	movw	r1, #1317	; 0x525
 800427a:	4806      	ldr	r0, [pc, #24]	; (8004294 <UART_init+0x90>)
 800427c:	f7ff fbf6 	bl	8003a6c <USART_ITConfig>

USART_Cmd(USART2, ENABLE);
 8004280:	2101      	movs	r1, #1
 8004282:	4804      	ldr	r0, [pc, #16]	; (8004294 <UART_init+0x90>)
 8004284:	f7ff fbc0 	bl	8003a08 <USART_Cmd>

}
 8004288:	bf00      	nop
 800428a:	3718      	adds	r7, #24
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40020000 	.word	0x40020000
 8004294:	40004400 	.word	0x40004400

08004298 <UART_putchar>:

void UART_putchar(char c)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	4603      	mov	r3, r0
 80042a0:	71fb      	strb	r3, [r7, #7]
		while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET); // Wait for Empty
 80042a2:	bf00      	nop
 80042a4:	2180      	movs	r1, #128	; 0x80
 80042a6:	4808      	ldr	r0, [pc, #32]	; (80042c8 <UART_putchar+0x30>)
 80042a8:	f7ff fc28 	bl	8003afc <USART_GetFlagStatus>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d0f8      	beq.n	80042a4 <UART_putchar+0xc>
		USART_SendData(USART2, c);
 80042b2:	79fb      	ldrb	r3, [r7, #7]
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	4619      	mov	r1, r3
 80042b8:	4803      	ldr	r0, [pc, #12]	; (80042c8 <UART_putchar+0x30>)
 80042ba:	f7ff fbc5 	bl	8003a48 <USART_SendData>

}
 80042be:	bf00      	nop
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	40004400 	.word	0x40004400

080042cc <UART_puts>:

void UART_puts(char *s)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
	volatile unsigned int i;
	for (i=0; s[i]; i++)
 80042d4:	2300      	movs	r3, #0
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	e009      	b.n	80042ee <UART_puts+0x22>
	{
		UART_putchar(s[i]);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	4413      	add	r3, r2
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7ff ffd8 	bl	8004298 <UART_putchar>
	for (i=0; s[i]; i++)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	3301      	adds	r3, #1
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	4413      	add	r3, r2
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d1ef      	bne.n	80042da <UART_puts+0xe>
		//while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET); // Wait for Empty
		//USART_SendData(USART2, s[i]);
	}
}
 80042fa:	bf00      	nop
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
	...

08004304 <USART2_IRQHandler>:
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
}

void USART2_IRQHandler(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
	// check if the USART2 receive interrupt flag was set
	if( USART_GetITStatus(USART2, USART_IT_RXNE))
 800430a:	f240 5125 	movw	r1, #1317	; 0x525
 800430e:	4827      	ldr	r0, [pc, #156]	; (80043ac <USART2_IRQHandler+0xa8>)
 8004310:	f7ff fc10 	bl	8003b34 <USART_GetITStatus>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d044      	beq.n	80043a4 <USART2_IRQHandler+0xa0>
	{
		USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 800431a:	f240 5125 	movw	r1, #1317	; 0x525
 800431e:	4823      	ldr	r0, [pc, #140]	; (80043ac <USART2_IRQHandler+0xa8>)
 8004320:	f7ff fc63 	bl	8003bea <USART_ClearITPendingBit>
		int i;
		char c = USART2->DR & 0xFF;
 8004324:	4b21      	ldr	r3, [pc, #132]	; (80043ac <USART2_IRQHandler+0xa8>)
 8004326:	889b      	ldrh	r3, [r3, #4]
 8004328:	b29b      	uxth	r3, r3
 800432a:	70fb      	strb	r3, [r7, #3]
//		LCD_XY(10,1);
//		LCD_put("UART:   ");
//		LCD_XY(15,1);
//		LCD_putchar(c);

		if(c > 64 && c < 91)
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	2b40      	cmp	r3, #64	; 0x40
 8004330:	d905      	bls.n	800433e <USART2_IRQHandler+0x3a>
 8004332:	78fb      	ldrb	r3, [r7, #3]
 8004334:	2b5a      	cmp	r3, #90	; 0x5a
 8004336:	d802      	bhi.n	800433e <USART2_IRQHandler+0x3a>
			c += 32;
 8004338:	78fb      	ldrb	r3, [r7, #3]
 800433a:	3320      	adds	r3, #32
 800433c:	70fb      	strb	r3, [r7, #3]
		if(c <= 13)
 800433e:	78fb      	ldrb	r3, [r7, #3]
 8004340:	2b0d      	cmp	r3, #13
 8004342:	d81d      	bhi.n	8004380 <USART2_IRQHandler+0x7c>
		{
			for(i=0;i<charcounter;i++)
 8004344:	2300      	movs	r3, #0
 8004346:	607b      	str	r3, [r7, #4]
 8004348:	e00b      	b.n	8004362 <USART2_IRQHandler+0x5e>
			{
				USART_SendData(USART2, string[i]); // Echo Char
 800434a:	4a19      	ldr	r2, [pc, #100]	; (80043b0 <USART2_IRQHandler+0xac>)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4413      	add	r3, r2
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	b29b      	uxth	r3, r3
 8004354:	4619      	mov	r1, r3
 8004356:	4815      	ldr	r0, [pc, #84]	; (80043ac <USART2_IRQHandler+0xa8>)
 8004358:	f7ff fb76 	bl	8003a48 <USART_SendData>
			for(i=0;i<charcounter;i++)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3301      	adds	r3, #1
 8004360:	607b      	str	r3, [r7, #4]
 8004362:	4b14      	ldr	r3, [pc, #80]	; (80043b4 <USART2_IRQHandler+0xb0>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	429a      	cmp	r2, r3
 800436a:	dbee      	blt.n	800434a <USART2_IRQHandler+0x46>
			}
			charcounter = 0;
 800436c:	4b11      	ldr	r3, [pc, #68]	; (80043b4 <USART2_IRQHandler+0xb0>)
 800436e:	2200      	movs	r2, #0
 8004370:	601a      	str	r2, [r3, #0]
			USART_SendData(USART2, c); // Echo Char
 8004372:	78fb      	ldrb	r3, [r7, #3]
 8004374:	b29b      	uxth	r3, r3
 8004376:	4619      	mov	r1, r3
 8004378:	480c      	ldr	r0, [pc, #48]	; (80043ac <USART2_IRQHandler+0xa8>)
 800437a:	f7ff fb65 	bl	8003a48 <USART_SendData>
 800437e:	e009      	b.n	8004394 <USART2_IRQHandler+0x90>
		}
		else
		{
			string[charcounter] = c;
 8004380:	4b0c      	ldr	r3, [pc, #48]	; (80043b4 <USART2_IRQHandler+0xb0>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	490a      	ldr	r1, [pc, #40]	; (80043b0 <USART2_IRQHandler+0xac>)
 8004386:	78fa      	ldrb	r2, [r7, #3]
 8004388:	54ca      	strb	r2, [r1, r3]
			charcounter++;
 800438a:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <USART2_IRQHandler+0xb0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3301      	adds	r3, #1
 8004390:	4a08      	ldr	r2, [pc, #32]	; (80043b4 <USART2_IRQHandler+0xb0>)
 8004392:	6013      	str	r3, [r2, #0]
		}


		while (USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET); // Wait for Empty
 8004394:	bf00      	nop
 8004396:	2140      	movs	r1, #64	; 0x40
 8004398:	4804      	ldr	r0, [pc, #16]	; (80043ac <USART2_IRQHandler+0xa8>)
 800439a:	f7ff fbaf 	bl	8003afc <USART_GetFlagStatus>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0f8      	beq.n	8004396 <USART2_IRQHandler+0x92>

	}
}
 80043a4:	bf00      	nop
 80043a6:	3708      	adds	r7, #8
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40004400 	.word	0x40004400
 80043b0:	200138a0 	.word	0x200138a0
 80043b4:	2000069c 	.word	0x2000069c

080043b8 <UART_get>:

// Ontvang een karakter via de UART
// niet echt nodig als routine maar als wrapper voor compatabiliteit. Let op geen -1 als er geen char is ontvangen!

char UART_get(void)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
    char uart_char = -1;
 80043be:	23ff      	movs	r3, #255	; 0xff
 80043c0:	71fb      	strb	r3, [r7, #7]
    if (USART_GetFlagStatus(USART2, USART_FLAG_RXNE)== SET)  // check for data available
 80043c2:	2120      	movs	r1, #32
 80043c4:	4807      	ldr	r0, [pc, #28]	; (80043e4 <UART_get+0x2c>)
 80043c6:	f7ff fb99 	bl	8003afc <USART_GetFlagStatus>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d103      	bne.n	80043d8 <UART_get+0x20>
    	 uart_char= USART2->DR & 0xFF; // and read the data from peripheral
 80043d0:	4b04      	ldr	r3, [pc, #16]	; (80043e4 <UART_get+0x2c>)
 80043d2:	889b      	ldrh	r3, [r3, #4]
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	71fb      	strb	r3, [r7, #7]
    return uart_char;
 80043d8:	79fb      	ldrb	r3, [r7, #7]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3708      	adds	r7, #8
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
 80043e2:	bf00      	nop
 80043e4:	40004400 	.word	0x40004400

080043e8 <UART_gets>:
// args: char *readbuffer
//       int   echo, when TRUE, send read-char to UART
// remark: ARM sends -1 if buffer is empty
//         LF is cleared if set in terminal-program
void UART_gets(char *s, int echo)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
	while (TRUE)
	{
	 	*s = UART_get();
 80043f2:	f7ff ffe1 	bl	80043b8 <UART_get>
 80043f6:	4603      	mov	r3, r0
 80043f8:	461a      	mov	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	701a      	strb	r2, [r3, #0]

	 	if (*s==-1)             // check for data available
	 		continue;

	 	if (*s==0xff || *s==LF) // if no data or LF, continue
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	2bff      	cmp	r3, #255	; 0xff
 8004404:	d00f      	beq.n	8004426 <UART_gets+0x3e>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b0a      	cmp	r3, #10
 800440c:	d00b      	beq.n	8004426 <UART_gets+0x3e>

//		if (echo)              // if output-flag set
//			UART_putchar(*s);  // to read what u entered


		if (*s==CR)            // if enter pressed
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	2b0d      	cmp	r3, #13
 8004414:	d103      	bne.n	800441e <UART_gets+0x36>
		{
			*s = '\0';         // ignore char and close string
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	701a      	strb	r2, [r3, #0]
		    return;            // buf ready, exit loop
 800441c:	e005      	b.n	800442a <UART_gets+0x42>
		}
		s++;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	3301      	adds	r3, #1
 8004422:	607b      	str	r3, [r7, #4]
 8004424:	e7e5      	b.n	80043f2 <UART_gets+0xa>
			continue;
 8004426:	bf00      	nop
	 	*s = UART_get();
 8004428:	e7e3      	b.n	80043f2 <UART_gets+0xa>
	}
}
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <main>:
#include "main.h"
#include "includes.h"


int main(void)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af04      	add	r7, sp, #16
	//  uint32_t n;

	SystemInit(); // System speed to 168MHz
 8004436:	f000 f883 	bl	8004540 <SystemInit>
	UART_init();
 800443a:	f7ff fee3 	bl	8004204 <UART_init>
	DELAY_init();
 800443e:	f7ff fbf3 	bl	8003c28 <DELAY_init>
	UB_VGA_Screen_Init(); // Init VGA-Screen
 8004442:	f7ff fca3 	bl	8003d8c <UB_VGA_Screen_Init>

	UB_VGA_FillScreen(zwart);
 8004446:	2000      	movs	r0, #0
 8004448:	f7ff fce0 	bl	8003e0c <UB_VGA_FillScreen>
	draw_triangle (50,50,100,50,75,25,groen);
 800444c:	231c      	movs	r3, #28
 800444e:	9302      	str	r3, [sp, #8]
 8004450:	2319      	movs	r3, #25
 8004452:	9301      	str	r3, [sp, #4]
 8004454:	234b      	movs	r3, #75	; 0x4b
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	2332      	movs	r3, #50	; 0x32
 800445a:	2264      	movs	r2, #100	; 0x64
 800445c:	2132      	movs	r1, #50	; 0x32
 800445e:	2032      	movs	r0, #50	; 0x32
 8004460:	f7fe fb6a 	bl	8002b38 <draw_triangle>
	draw_line(1,1,100,100,3,blauw);
 8004464:	2303      	movs	r3, #3
 8004466:	9301      	str	r3, [sp, #4]
 8004468:	2303      	movs	r3, #3
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	2364      	movs	r3, #100	; 0x64
 800446e:	2264      	movs	r2, #100	; 0x64
 8004470:	2101      	movs	r1, #1
 8004472:	2001      	movs	r0, #1
 8004474:	f7fc fb9a 	bl	8000bac <draw_line>
	draw_rectangle(10,10,100,100,geel);
 8004478:	23fc      	movs	r3, #252	; 0xfc
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	2364      	movs	r3, #100	; 0x64
 800447e:	2264      	movs	r2, #100	; 0x64
 8004480:	210a      	movs	r1, #10
 8004482:	200a      	movs	r0, #10
 8004484:	f7fc fd6c 	bl	8000f60 <draw_rectangle>
	*/


	while(1)
	{
		get_data();
 8004488:	f000 f90c 	bl	80046a4 <get_data>
 800448c:	e7fc      	b.n	8004488 <main+0x58>
	...

08004490 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004490:	f8df d034 	ldr.w	sp, [pc, #52]	; 80044c8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004494:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004496:	e003      	b.n	80044a0 <LoopCopyDataInit>

08004498 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004498:	4b0c      	ldr	r3, [pc, #48]	; (80044cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800449a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800449c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800449e:	3104      	adds	r1, #4

080044a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80044a0:	480b      	ldr	r0, [pc, #44]	; (80044d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80044a2:	4b0c      	ldr	r3, [pc, #48]	; (80044d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80044a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80044a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80044a8:	d3f6      	bcc.n	8004498 <CopyDataInit>
  ldr  r2, =_sbss
 80044aa:	4a0b      	ldr	r2, [pc, #44]	; (80044d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80044ac:	e002      	b.n	80044b4 <LoopFillZerobss>

080044ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80044ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80044b0:	f842 3b04 	str.w	r3, [r2], #4

080044b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80044b4:	4b09      	ldr	r3, [pc, #36]	; (80044dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80044b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80044b8:	d3f9      	bcc.n	80044ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80044ba:	f000 f841 	bl	8004540 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044be:	f000 fee3 	bl	8005288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80044c2:	f7ff ffb5 	bl	8004430 <main>
  bx  lr    
 80044c6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80044c8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80044cc:	08008714 	.word	0x08008714
  ldr  r0, =_sdata
 80044d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80044d4:	20000680 	.word	0x20000680
  ldr  r2, =_sbss
 80044d8:	20000680 	.word	0x20000680
  ldr  r3, = _ebss
 80044dc:	20013914 	.word	0x20013914

080044e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80044e0:	e7fe      	b.n	80044e0 <ADC_IRQHandler>

080044e2 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80044e2:	b480      	push	{r7}
 80044e4:	af00      	add	r7, sp, #0
}
 80044e6:	bf00      	nop
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80044f0:	b480      	push	{r7}
 80044f2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80044f4:	e7fe      	b.n	80044f4 <HardFault_Handler+0x4>

080044f6 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80044f6:	b480      	push	{r7}
 80044f8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80044fa:	e7fe      	b.n	80044fa <MemManage_Handler+0x4>

080044fc <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8004500:	e7fe      	b.n	8004500 <BusFault_Handler+0x4>

08004502 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8004502:	b480      	push	{r7}
 8004504:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8004506:	e7fe      	b.n	8004506 <UsageFault_Handler+0x4>

08004508 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
}
 800450c:	bf00      	nop
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8004516:	b480      	push	{r7}
 8004518:	af00      	add	r7, sp, #0
}
 800451a:	bf00      	nop
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8004524:	b480      	push	{r7}
 8004526:	af00      	add	r7, sp, #0
}
 8004528:	bf00      	nop
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8004532:	b480      	push	{r7}
 8004534:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8004536:	bf00      	nop
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004544:	4a16      	ldr	r2, [pc, #88]	; (80045a0 <SystemInit+0x60>)
 8004546:	4b16      	ldr	r3, [pc, #88]	; (80045a0 <SystemInit+0x60>)
 8004548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004554:	4a13      	ldr	r2, [pc, #76]	; (80045a4 <SystemInit+0x64>)
 8004556:	4b13      	ldr	r3, [pc, #76]	; (80045a4 <SystemInit+0x64>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f043 0301 	orr.w	r3, r3, #1
 800455e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004560:	4b10      	ldr	r3, [pc, #64]	; (80045a4 <SystemInit+0x64>)
 8004562:	2200      	movs	r2, #0
 8004564:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004566:	4a0f      	ldr	r2, [pc, #60]	; (80045a4 <SystemInit+0x64>)
 8004568:	4b0e      	ldr	r3, [pc, #56]	; (80045a4 <SystemInit+0x64>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004574:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004576:	4b0b      	ldr	r3, [pc, #44]	; (80045a4 <SystemInit+0x64>)
 8004578:	4a0b      	ldr	r2, [pc, #44]	; (80045a8 <SystemInit+0x68>)
 800457a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800457c:	4a09      	ldr	r2, [pc, #36]	; (80045a4 <SystemInit+0x64>)
 800457e:	4b09      	ldr	r3, [pc, #36]	; (80045a4 <SystemInit+0x64>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004586:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004588:	4b06      	ldr	r3, [pc, #24]	; (80045a4 <SystemInit+0x64>)
 800458a:	2200      	movs	r2, #0
 800458c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800458e:	f000 f80d 	bl	80045ac <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004592:	4b03      	ldr	r3, [pc, #12]	; (80045a0 <SystemInit+0x60>)
 8004594:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004598:	609a      	str	r2, [r3, #8]
#endif
}
 800459a:	bf00      	nop
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	e000ed00 	.word	0xe000ed00
 80045a4:	40023800 	.word	0x40023800
 80045a8:	24003010 	.word	0x24003010

080045ac <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	607b      	str	r3, [r7, #4]
 80045b6:	2300      	movs	r3, #0
 80045b8:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80045ba:	4a36      	ldr	r2, [pc, #216]	; (8004694 <SetSysClock+0xe8>)
 80045bc:	4b35      	ldr	r3, [pc, #212]	; (8004694 <SetSysClock+0xe8>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80045c6:	4b33      	ldr	r3, [pc, #204]	; (8004694 <SetSysClock+0xe8>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ce:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3301      	adds	r3, #1
 80045d4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d103      	bne.n	80045e4 <SetSysClock+0x38>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80045e2:	d1f0      	bne.n	80045c6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80045e4:	4b2b      	ldr	r3, [pc, #172]	; (8004694 <SetSysClock+0xe8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80045f0:	2301      	movs	r3, #1
 80045f2:	603b      	str	r3, [r7, #0]
 80045f4:	e001      	b.n	80045fa <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80045f6:	2300      	movs	r3, #0
 80045f8:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d142      	bne.n	8004686 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8004600:	4a24      	ldr	r2, [pc, #144]	; (8004694 <SetSysClock+0xe8>)
 8004602:	4b24      	ldr	r3, [pc, #144]	; (8004694 <SetSysClock+0xe8>)
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800460a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800460c:	4a22      	ldr	r2, [pc, #136]	; (8004698 <SetSysClock+0xec>)
 800460e:	4b22      	ldr	r3, [pc, #136]	; (8004698 <SetSysClock+0xec>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004616:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8004618:	4a1e      	ldr	r2, [pc, #120]	; (8004694 <SetSysClock+0xe8>)
 800461a:	4b1e      	ldr	r3, [pc, #120]	; (8004694 <SetSysClock+0xe8>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8004620:	4a1c      	ldr	r2, [pc, #112]	; (8004694 <SetSysClock+0xe8>)
 8004622:	4b1c      	ldr	r3, [pc, #112]	; (8004694 <SetSysClock+0xe8>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800462a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800462c:	4a19      	ldr	r2, [pc, #100]	; (8004694 <SetSysClock+0xe8>)
 800462e:	4b19      	ldr	r3, [pc, #100]	; (8004694 <SetSysClock+0xe8>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8004636:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8004638:	4b16      	ldr	r3, [pc, #88]	; (8004694 <SetSysClock+0xe8>)
 800463a:	4a18      	ldr	r2, [pc, #96]	; (800469c <SetSysClock+0xf0>)
 800463c:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 800463e:	4a15      	ldr	r2, [pc, #84]	; (8004694 <SetSysClock+0xe8>)
 8004640:	4b14      	ldr	r3, [pc, #80]	; (8004694 <SetSysClock+0xe8>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004648:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800464a:	bf00      	nop
 800464c:	4b11      	ldr	r3, [pc, #68]	; (8004694 <SetSysClock+0xe8>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d0f9      	beq.n	800464c <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8004658:	4b11      	ldr	r3, [pc, #68]	; (80046a0 <SetSysClock+0xf4>)
 800465a:	f240 7205 	movw	r2, #1797	; 0x705
 800465e:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8004660:	4a0c      	ldr	r2, [pc, #48]	; (8004694 <SetSysClock+0xe8>)
 8004662:	4b0c      	ldr	r3, [pc, #48]	; (8004694 <SetSysClock+0xe8>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f023 0303 	bic.w	r3, r3, #3
 800466a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 800466c:	4a09      	ldr	r2, [pc, #36]	; (8004694 <SetSysClock+0xe8>)
 800466e:	4b09      	ldr	r3, [pc, #36]	; (8004694 <SetSysClock+0xe8>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f043 0302 	orr.w	r3, r3, #2
 8004676:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8004678:	bf00      	nop
 800467a:	4b06      	ldr	r3, [pc, #24]	; (8004694 <SetSysClock+0xe8>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f003 030c 	and.w	r3, r3, #12
 8004682:	2b08      	cmp	r3, #8
 8004684:	d1f9      	bne.n	800467a <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8004686:	bf00      	nop
 8004688:	370c      	adds	r7, #12
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40023800 	.word	0x40023800
 8004698:	40007000 	.word	0x40007000
 800469c:	07405419 	.word	0x07405419
 80046a0:	40023c00 	.word	0x40023c00

080046a4 <get_data>:
int color(char *color_input);



void get_data() //krijg je hier geen argumenten binnen?
{
 80046a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046a8:	b086      	sub	sp, #24
 80046aa:	af04      	add	r7, sp, #16
	int fill=0;
 80046ac:	2300      	movs	r3, #0
 80046ae:	607b      	str	r3, [r7, #4]

	UART_gets(parameters,TRUE);
 80046b0:	2101      	movs	r1, #1
 80046b2:	48ab      	ldr	r0, [pc, #684]	; (8004960 <get_data+0x2bc>)
 80046b4:	f7ff fe98 	bl	80043e8 <UART_gets>
	UART_puts("input = "); UART_puts(parameters); UART_puts("\r");
 80046b8:	48aa      	ldr	r0, [pc, #680]	; (8004964 <get_data+0x2c0>)
 80046ba:	f7ff fe07 	bl	80042cc <UART_puts>
 80046be:	48a8      	ldr	r0, [pc, #672]	; (8004960 <get_data+0x2bc>)
 80046c0:	f7ff fe04 	bl	80042cc <UART_puts>
 80046c4:	48a8      	ldr	r0, [pc, #672]	; (8004968 <get_data+0x2c4>)
 80046c6:	f7ff fe01 	bl	80042cc <UART_puts>
	token = strtok (parameters,",");
 80046ca:	49a8      	ldr	r1, [pc, #672]	; (800496c <get_data+0x2c8>)
 80046cc:	48a4      	ldr	r0, [pc, #656]	; (8004960 <get_data+0x2bc>)
 80046ce:	f000 fe1b 	bl	8005308 <strtok>
 80046d2:	4602      	mov	r2, r0
 80046d4:	4ba6      	ldr	r3, [pc, #664]	; (8004970 <get_data+0x2cc>)
 80046d6:	601a      	str	r2, [r3, #0]
	strcpy(functions,token);
 80046d8:	4ba5      	ldr	r3, [pc, #660]	; (8004970 <get_data+0x2cc>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4619      	mov	r1, r3
 80046de:	48a5      	ldr	r0, [pc, #660]	; (8004974 <get_data+0x2d0>)
 80046e0:	f000 fe09 	bl	80052f6 <strcpy>

	if(strcmp(functions, "clearscherm")==0)
 80046e4:	49a4      	ldr	r1, [pc, #656]	; (8004978 <get_data+0x2d4>)
 80046e6:	48a3      	ldr	r0, [pc, #652]	; (8004974 <get_data+0x2d0>)
 80046e8:	f7fb fd6e 	bl	80001c8 <strcmp>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d13a      	bne.n	8004768 <get_data+0xc4>
	{
		fill=0;
 80046f2:	2300      	movs	r3, #0
 80046f4:	607b      	str	r3, [r7, #4]
		UART_puts("clearscherm\r");
 80046f6:	48a1      	ldr	r0, [pc, #644]	; (800497c <get_data+0x2d8>)
 80046f8:	f7ff fde8 	bl	80042cc <UART_puts>
		while(token != NULL)
 80046fc:	e01d      	b.n	800473a <get_data+0x96>
		{
		  switch(fill)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d002      	beq.n	800470a <get_data+0x66>
 8004704:	2b01      	cmp	r3, #1
 8004706:	d007      	beq.n	8004718 <get_data+0x74>
 8004708:	e00d      	b.n	8004726 <get_data+0x82>
		  {
			case 0:
			  strcpy(functions,token);
 800470a:	4b99      	ldr	r3, [pc, #612]	; (8004970 <get_data+0x2cc>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4619      	mov	r1, r3
 8004710:	4898      	ldr	r0, [pc, #608]	; (8004974 <get_data+0x2d0>)
 8004712:	f000 fdf0 	bl	80052f6 <strcpy>
			  break;
 8004716:	e006      	b.n	8004726 <get_data+0x82>
			case 1:
			  strcpy(clearscrn_args.color,token);
 8004718:	4b95      	ldr	r3, [pc, #596]	; (8004970 <get_data+0x2cc>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4619      	mov	r1, r3
 800471e:	4898      	ldr	r0, [pc, #608]	; (8004980 <get_data+0x2dc>)
 8004720:	f000 fde9 	bl	80052f6 <strcpy>
			  break;
 8004724:	bf00      	nop
		  }
		  fill++;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	3301      	adds	r3, #1
 800472a:	607b      	str	r3, [r7, #4]
		  token = strtok (NULL, ",");
 800472c:	498f      	ldr	r1, [pc, #572]	; (800496c <get_data+0x2c8>)
 800472e:	2000      	movs	r0, #0
 8004730:	f000 fdea 	bl	8005308 <strtok>
 8004734:	4602      	mov	r2, r0
 8004736:	4b8e      	ldr	r3, [pc, #568]	; (8004970 <get_data+0x2cc>)
 8004738:	601a      	str	r2, [r3, #0]
		while(token != NULL)
 800473a:	4b8d      	ldr	r3, [pc, #564]	; (8004970 <get_data+0x2cc>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1dd      	bne.n	80046fe <get_data+0x5a>
		}
	    clr_screen(color(clearscrn_args.color));
 8004742:	488f      	ldr	r0, [pc, #572]	; (8004980 <get_data+0x2dc>)
 8004744:	f000 fcd6 	bl	80050f4 <color>
 8004748:	4603      	mov	r3, r0
 800474a:	b2db      	uxtb	r3, r3
 800474c:	4618      	mov	r0, r3
 800474e:	f7fc f9cd 	bl	8000aec <clr_screen>
		UART_puts("color = "); UART_puts(clearscrn_args.color); UART_puts("\r");
 8004752:	488c      	ldr	r0, [pc, #560]	; (8004984 <get_data+0x2e0>)
 8004754:	f7ff fdba 	bl	80042cc <UART_puts>
 8004758:	4889      	ldr	r0, [pc, #548]	; (8004980 <get_data+0x2dc>)
 800475a:	f7ff fdb7 	bl	80042cc <UART_puts>
 800475e:	4882      	ldr	r0, [pc, #520]	; (8004968 <get_data+0x2c4>)
 8004760:	f7ff fdb4 	bl	80042cc <UART_puts>
		}
    	wait_ms(atoi(wait_args.time_ms));
		UART_puts("time_ms = "); UART_puts(wait_args.time_ms); UART_puts("\r");
	}

}
 8004764:	f000 bcb4 	b.w	80050d0 <get_data+0xa2c>
	else if(strcmp(functions, "lijn")==0)
 8004768:	4987      	ldr	r1, [pc, #540]	; (8004988 <get_data+0x2e4>)
 800476a:	4882      	ldr	r0, [pc, #520]	; (8004974 <get_data+0x2d0>)
 800476c:	f7fb fd2c 	bl	80001c8 <strcmp>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	f040 80b0 	bne.w	80048d8 <get_data+0x234>
		fill=0;
 8004778:	2300      	movs	r3, #0
 800477a:	607b      	str	r3, [r7, #4]
		UART_puts("lijn\r");
 800477c:	4883      	ldr	r0, [pc, #524]	; (800498c <get_data+0x2e8>)
 800477e:	f7ff fda5 	bl	80042cc <UART_puts>
		while(token!= NULL)
 8004782:	e04e      	b.n	8004822 <get_data+0x17e>
			switch(fill)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b06      	cmp	r3, #6
 8004788:	d841      	bhi.n	800480e <get_data+0x16a>
 800478a:	a201      	add	r2, pc, #4	; (adr r2, 8004790 <get_data+0xec>)
 800478c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004790:	080047ad 	.word	0x080047ad
 8004794:	080047bb 	.word	0x080047bb
 8004798:	080047c9 	.word	0x080047c9
 800479c:	080047d7 	.word	0x080047d7
 80047a0:	080047e5 	.word	0x080047e5
 80047a4:	080047f3 	.word	0x080047f3
 80047a8:	08004801 	.word	0x08004801
					strcpy(functions,token);
 80047ac:	4b70      	ldr	r3, [pc, #448]	; (8004970 <get_data+0x2cc>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4619      	mov	r1, r3
 80047b2:	4870      	ldr	r0, [pc, #448]	; (8004974 <get_data+0x2d0>)
 80047b4:	f000 fd9f 	bl	80052f6 <strcpy>
					break;
 80047b8:	e029      	b.n	800480e <get_data+0x16a>
					strcpy(line_args.x1,token);
 80047ba:	4b6d      	ldr	r3, [pc, #436]	; (8004970 <get_data+0x2cc>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4619      	mov	r1, r3
 80047c0:	4873      	ldr	r0, [pc, #460]	; (8004990 <get_data+0x2ec>)
 80047c2:	f000 fd98 	bl	80052f6 <strcpy>
					break;
 80047c6:	e022      	b.n	800480e <get_data+0x16a>
					strcpy(line_args.y1,token);
 80047c8:	4b69      	ldr	r3, [pc, #420]	; (8004970 <get_data+0x2cc>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4619      	mov	r1, r3
 80047ce:	4871      	ldr	r0, [pc, #452]	; (8004994 <get_data+0x2f0>)
 80047d0:	f000 fd91 	bl	80052f6 <strcpy>
					break;
 80047d4:	e01b      	b.n	800480e <get_data+0x16a>
					strcpy(line_args.x2,token);
 80047d6:	4b66      	ldr	r3, [pc, #408]	; (8004970 <get_data+0x2cc>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4619      	mov	r1, r3
 80047dc:	486e      	ldr	r0, [pc, #440]	; (8004998 <get_data+0x2f4>)
 80047de:	f000 fd8a 	bl	80052f6 <strcpy>
					break;
 80047e2:	e014      	b.n	800480e <get_data+0x16a>
					strcpy(line_args.y2,token);
 80047e4:	4b62      	ldr	r3, [pc, #392]	; (8004970 <get_data+0x2cc>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4619      	mov	r1, r3
 80047ea:	486c      	ldr	r0, [pc, #432]	; (800499c <get_data+0x2f8>)
 80047ec:	f000 fd83 	bl	80052f6 <strcpy>
					break;
 80047f0:	e00d      	b.n	800480e <get_data+0x16a>
					strcpy(line_args.thickness,token);
 80047f2:	4b5f      	ldr	r3, [pc, #380]	; (8004970 <get_data+0x2cc>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4619      	mov	r1, r3
 80047f8:	4869      	ldr	r0, [pc, #420]	; (80049a0 <get_data+0x2fc>)
 80047fa:	f000 fd7c 	bl	80052f6 <strcpy>
					break;
 80047fe:	e006      	b.n	800480e <get_data+0x16a>
					strcpy(line_args.color,token);
 8004800:	4b5b      	ldr	r3, [pc, #364]	; (8004970 <get_data+0x2cc>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4619      	mov	r1, r3
 8004806:	4867      	ldr	r0, [pc, #412]	; (80049a4 <get_data+0x300>)
 8004808:	f000 fd75 	bl	80052f6 <strcpy>
					break;
 800480c:	bf00      	nop
			fill++;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3301      	adds	r3, #1
 8004812:	607b      	str	r3, [r7, #4]
			token = strtok (NULL, ",");
 8004814:	4955      	ldr	r1, [pc, #340]	; (800496c <get_data+0x2c8>)
 8004816:	2000      	movs	r0, #0
 8004818:	f000 fd76 	bl	8005308 <strtok>
 800481c:	4602      	mov	r2, r0
 800481e:	4b54      	ldr	r3, [pc, #336]	; (8004970 <get_data+0x2cc>)
 8004820:	601a      	str	r2, [r3, #0]
		while(token!= NULL)
 8004822:	4b53      	ldr	r3, [pc, #332]	; (8004970 <get_data+0x2cc>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1ac      	bne.n	8004784 <get_data+0xe0>
		draw_line(atoi(line_args.x1),atoi(line_args.y1),atoi(line_args.x2),atoi(line_args.y2),atoi(line_args.thickness),color(line_args.color));
 800482a:	4859      	ldr	r0, [pc, #356]	; (8004990 <get_data+0x2ec>)
 800482c:	f000 fd28 	bl	8005280 <atoi>
 8004830:	4605      	mov	r5, r0
 8004832:	4858      	ldr	r0, [pc, #352]	; (8004994 <get_data+0x2f0>)
 8004834:	f000 fd24 	bl	8005280 <atoi>
 8004838:	4606      	mov	r6, r0
 800483a:	4857      	ldr	r0, [pc, #348]	; (8004998 <get_data+0x2f4>)
 800483c:	f000 fd20 	bl	8005280 <atoi>
 8004840:	4680      	mov	r8, r0
 8004842:	4856      	ldr	r0, [pc, #344]	; (800499c <get_data+0x2f8>)
 8004844:	f000 fd1c 	bl	8005280 <atoi>
 8004848:	4681      	mov	r9, r0
 800484a:	4855      	ldr	r0, [pc, #340]	; (80049a0 <get_data+0x2fc>)
 800484c:	f000 fd18 	bl	8005280 <atoi>
 8004850:	4604      	mov	r4, r0
 8004852:	4854      	ldr	r0, [pc, #336]	; (80049a4 <get_data+0x300>)
 8004854:	f000 fc4e 	bl	80050f4 <color>
 8004858:	4603      	mov	r3, r0
 800485a:	9301      	str	r3, [sp, #4]
 800485c:	9400      	str	r4, [sp, #0]
 800485e:	464b      	mov	r3, r9
 8004860:	4642      	mov	r2, r8
 8004862:	4631      	mov	r1, r6
 8004864:	4628      	mov	r0, r5
 8004866:	f7fc f9a1 	bl	8000bac <draw_line>
		UART_puts("x1 = "); UART_puts(line_args.x1); UART_puts("\r");
 800486a:	484f      	ldr	r0, [pc, #316]	; (80049a8 <get_data+0x304>)
 800486c:	f7ff fd2e 	bl	80042cc <UART_puts>
 8004870:	4847      	ldr	r0, [pc, #284]	; (8004990 <get_data+0x2ec>)
 8004872:	f7ff fd2b 	bl	80042cc <UART_puts>
 8004876:	483c      	ldr	r0, [pc, #240]	; (8004968 <get_data+0x2c4>)
 8004878:	f7ff fd28 	bl	80042cc <UART_puts>
		UART_puts("y1 = "); UART_puts(line_args.y1); UART_puts("\r");
 800487c:	484b      	ldr	r0, [pc, #300]	; (80049ac <get_data+0x308>)
 800487e:	f7ff fd25 	bl	80042cc <UART_puts>
 8004882:	4844      	ldr	r0, [pc, #272]	; (8004994 <get_data+0x2f0>)
 8004884:	f7ff fd22 	bl	80042cc <UART_puts>
 8004888:	4837      	ldr	r0, [pc, #220]	; (8004968 <get_data+0x2c4>)
 800488a:	f7ff fd1f 	bl	80042cc <UART_puts>
		UART_puts("x2 = "); UART_puts(line_args.x2); UART_puts("\r");
 800488e:	4848      	ldr	r0, [pc, #288]	; (80049b0 <get_data+0x30c>)
 8004890:	f7ff fd1c 	bl	80042cc <UART_puts>
 8004894:	4840      	ldr	r0, [pc, #256]	; (8004998 <get_data+0x2f4>)
 8004896:	f7ff fd19 	bl	80042cc <UART_puts>
 800489a:	4833      	ldr	r0, [pc, #204]	; (8004968 <get_data+0x2c4>)
 800489c:	f7ff fd16 	bl	80042cc <UART_puts>
		UART_puts("y2 = "); UART_puts(line_args.y2); UART_puts("\r");
 80048a0:	4844      	ldr	r0, [pc, #272]	; (80049b4 <get_data+0x310>)
 80048a2:	f7ff fd13 	bl	80042cc <UART_puts>
 80048a6:	483d      	ldr	r0, [pc, #244]	; (800499c <get_data+0x2f8>)
 80048a8:	f7ff fd10 	bl	80042cc <UART_puts>
 80048ac:	482e      	ldr	r0, [pc, #184]	; (8004968 <get_data+0x2c4>)
 80048ae:	f7ff fd0d 	bl	80042cc <UART_puts>
		UART_puts("thickness = "); UART_puts(line_args.thickness); UART_puts("\r");
 80048b2:	4841      	ldr	r0, [pc, #260]	; (80049b8 <get_data+0x314>)
 80048b4:	f7ff fd0a 	bl	80042cc <UART_puts>
 80048b8:	4839      	ldr	r0, [pc, #228]	; (80049a0 <get_data+0x2fc>)
 80048ba:	f7ff fd07 	bl	80042cc <UART_puts>
 80048be:	482a      	ldr	r0, [pc, #168]	; (8004968 <get_data+0x2c4>)
 80048c0:	f7ff fd04 	bl	80042cc <UART_puts>
		UART_puts("color = "); UART_puts(line_args.color); UART_puts("\r");
 80048c4:	482f      	ldr	r0, [pc, #188]	; (8004984 <get_data+0x2e0>)
 80048c6:	f7ff fd01 	bl	80042cc <UART_puts>
 80048ca:	4836      	ldr	r0, [pc, #216]	; (80049a4 <get_data+0x300>)
 80048cc:	f7ff fcfe 	bl	80042cc <UART_puts>
 80048d0:	4825      	ldr	r0, [pc, #148]	; (8004968 <get_data+0x2c4>)
 80048d2:	f7ff fcfb 	bl	80042cc <UART_puts>
}
 80048d6:	e3fb      	b.n	80050d0 <get_data+0xa2c>
	else if(strcmp(functions, "ellips")==0)
 80048d8:	4938      	ldr	r1, [pc, #224]	; (80049bc <get_data+0x318>)
 80048da:	4826      	ldr	r0, [pc, #152]	; (8004974 <get_data+0x2d0>)
 80048dc:	f7fb fc74 	bl	80001c8 <strcmp>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f040 80d5 	bne.w	8004a92 <get_data+0x3ee>
		fill=0;
 80048e8:	2300      	movs	r3, #0
 80048ea:	607b      	str	r3, [r7, #4]
		UART_puts("ellips\r");
 80048ec:	4834      	ldr	r0, [pc, #208]	; (80049c0 <get_data+0x31c>)
 80048ee:	f7ff fced 	bl	80042cc <UART_puts>
		while(token != NULL)
 80048f2:	e080      	b.n	80049f6 <get_data+0x352>
			switch(fill)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b05      	cmp	r3, #5
 80048f8:	d873      	bhi.n	80049e2 <get_data+0x33e>
 80048fa:	a201      	add	r2, pc, #4	; (adr r2, 8004900 <get_data+0x25c>)
 80048fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004900:	08004919 	.word	0x08004919
 8004904:	08004927 	.word	0x08004927
 8004908:	08004935 	.word	0x08004935
 800490c:	08004943 	.word	0x08004943
 8004910:	08004951 	.word	0x08004951
 8004914:	080049d5 	.word	0x080049d5
					strcpy(functions,token);
 8004918:	4b15      	ldr	r3, [pc, #84]	; (8004970 <get_data+0x2cc>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4619      	mov	r1, r3
 800491e:	4815      	ldr	r0, [pc, #84]	; (8004974 <get_data+0x2d0>)
 8004920:	f000 fce9 	bl	80052f6 <strcpy>
					break;
 8004924:	e05d      	b.n	80049e2 <get_data+0x33e>
					strcpy(ellips_args.x_center,token);
 8004926:	4b12      	ldr	r3, [pc, #72]	; (8004970 <get_data+0x2cc>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4619      	mov	r1, r3
 800492c:	4825      	ldr	r0, [pc, #148]	; (80049c4 <get_data+0x320>)
 800492e:	f000 fce2 	bl	80052f6 <strcpy>
					break;
 8004932:	e056      	b.n	80049e2 <get_data+0x33e>
					strcpy(ellips_args.y_center,token);
 8004934:	4b0e      	ldr	r3, [pc, #56]	; (8004970 <get_data+0x2cc>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4619      	mov	r1, r3
 800493a:	4823      	ldr	r0, [pc, #140]	; (80049c8 <get_data+0x324>)
 800493c:	f000 fcdb 	bl	80052f6 <strcpy>
					break;
 8004940:	e04f      	b.n	80049e2 <get_data+0x33e>
					strcpy(ellips_args.x_rad,token);
 8004942:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <get_data+0x2cc>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4619      	mov	r1, r3
 8004948:	4820      	ldr	r0, [pc, #128]	; (80049cc <get_data+0x328>)
 800494a:	f000 fcd4 	bl	80052f6 <strcpy>
					break;
 800494e:	e048      	b.n	80049e2 <get_data+0x33e>
					strcpy(ellips_args.y_rad,token);
 8004950:	4b07      	ldr	r3, [pc, #28]	; (8004970 <get_data+0x2cc>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4619      	mov	r1, r3
 8004956:	481e      	ldr	r0, [pc, #120]	; (80049d0 <get_data+0x32c>)
 8004958:	f000 fccd 	bl	80052f6 <strcpy>
					break;
 800495c:	e041      	b.n	80049e2 <get_data+0x33e>
 800495e:	bf00      	nop
 8004960:	20013580 	.word	0x20013580
 8004964:	08008410 	.word	0x08008410
 8004968:	0800841c 	.word	0x0800841c
 800496c:	08008420 	.word	0x08008420
 8004970:	2001388c 	.word	0x2001388c
 8004974:	200006d8 	.word	0x200006d8
 8004978:	08008424 	.word	0x08008424
 800497c:	08008430 	.word	0x08008430
 8004980:	2000076b 	.word	0x2000076b
 8004984:	08008440 	.word	0x08008440
 8004988:	0800844c 	.word	0x0800844c
 800498c:	08008454 	.word	0x08008454
 8004990:	200135e4 	.word	0x200135e4
 8004994:	200135e9 	.word	0x200135e9
 8004998:	200135ee 	.word	0x200135ee
 800499c:	200135f3 	.word	0x200135f3
 80049a0:	20013616 	.word	0x20013616
 80049a4:	20013657 	.word	0x20013657
 80049a8:	0800845c 	.word	0x0800845c
 80049ac:	08008464 	.word	0x08008464
 80049b0:	0800846c 	.word	0x0800846c
 80049b4:	08008474 	.word	0x08008474
 80049b8:	0800847c 	.word	0x0800847c
 80049bc:	0800848c 	.word	0x0800848c
 80049c0:	08008494 	.word	0x08008494
 80049c4:	20013822 	.word	0x20013822
 80049c8:	20013827 	.word	0x20013827
 80049cc:	2001382c 	.word	0x2001382c
 80049d0:	20013831 	.word	0x20013831
					strcpy(ellips_args.color,token);
 80049d4:	4bab      	ldr	r3, [pc, #684]	; (8004c84 <get_data+0x5e0>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4619      	mov	r1, r3
 80049da:	48ab      	ldr	r0, [pc, #684]	; (8004c88 <get_data+0x5e4>)
 80049dc:	f000 fc8b 	bl	80052f6 <strcpy>
					break;
 80049e0:	bf00      	nop
			fill++;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3301      	adds	r3, #1
 80049e6:	607b      	str	r3, [r7, #4]
			token = strtok (NULL, ",");
 80049e8:	49a8      	ldr	r1, [pc, #672]	; (8004c8c <get_data+0x5e8>)
 80049ea:	2000      	movs	r0, #0
 80049ec:	f000 fc8c 	bl	8005308 <strtok>
 80049f0:	4602      	mov	r2, r0
 80049f2:	4ba4      	ldr	r3, [pc, #656]	; (8004c84 <get_data+0x5e0>)
 80049f4:	601a      	str	r2, [r3, #0]
		while(token != NULL)
 80049f6:	4ba3      	ldr	r3, [pc, #652]	; (8004c84 <get_data+0x5e0>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	f47f af7a 	bne.w	80048f4 <get_data+0x250>
		draw_ellips(atoi(ellips_args.x_center),atoi(ellips_args.y_center),atoi(ellips_args.x_rad),atoi(ellips_args.y_rad),color(ellips_args.color));
 8004a00:	48a3      	ldr	r0, [pc, #652]	; (8004c90 <get_data+0x5ec>)
 8004a02:	f000 fc3d 	bl	8005280 <atoi>
 8004a06:	4604      	mov	r4, r0
 8004a08:	48a2      	ldr	r0, [pc, #648]	; (8004c94 <get_data+0x5f0>)
 8004a0a:	f000 fc39 	bl	8005280 <atoi>
 8004a0e:	4605      	mov	r5, r0
 8004a10:	48a1      	ldr	r0, [pc, #644]	; (8004c98 <get_data+0x5f4>)
 8004a12:	f000 fc35 	bl	8005280 <atoi>
 8004a16:	4606      	mov	r6, r0
 8004a18:	48a0      	ldr	r0, [pc, #640]	; (8004c9c <get_data+0x5f8>)
 8004a1a:	f000 fc31 	bl	8005280 <atoi>
 8004a1e:	4680      	mov	r8, r0
 8004a20:	4899      	ldr	r0, [pc, #612]	; (8004c88 <get_data+0x5e4>)
 8004a22:	f000 fb67 	bl	80050f4 <color>
 8004a26:	4603      	mov	r3, r0
 8004a28:	9300      	str	r3, [sp, #0]
 8004a2a:	4643      	mov	r3, r8
 8004a2c:	4632      	mov	r2, r6
 8004a2e:	4629      	mov	r1, r5
 8004a30:	4620      	mov	r0, r4
 8004a32:	f7fc f868 	bl	8000b06 <draw_ellips>
		UART_puts("x_center = "); UART_puts(ellips_args.x_center); UART_puts("\r");
 8004a36:	489a      	ldr	r0, [pc, #616]	; (8004ca0 <get_data+0x5fc>)
 8004a38:	f7ff fc48 	bl	80042cc <UART_puts>
 8004a3c:	4894      	ldr	r0, [pc, #592]	; (8004c90 <get_data+0x5ec>)
 8004a3e:	f7ff fc45 	bl	80042cc <UART_puts>
 8004a42:	4898      	ldr	r0, [pc, #608]	; (8004ca4 <get_data+0x600>)
 8004a44:	f7ff fc42 	bl	80042cc <UART_puts>
		UART_puts("y_center = "); UART_puts(ellips_args.y_center); UART_puts("\r");
 8004a48:	4897      	ldr	r0, [pc, #604]	; (8004ca8 <get_data+0x604>)
 8004a4a:	f7ff fc3f 	bl	80042cc <UART_puts>
 8004a4e:	4891      	ldr	r0, [pc, #580]	; (8004c94 <get_data+0x5f0>)
 8004a50:	f7ff fc3c 	bl	80042cc <UART_puts>
 8004a54:	4893      	ldr	r0, [pc, #588]	; (8004ca4 <get_data+0x600>)
 8004a56:	f7ff fc39 	bl	80042cc <UART_puts>
		UART_puts("x_rad = "); UART_puts(ellips_args.x_rad); UART_puts("\r");
 8004a5a:	4894      	ldr	r0, [pc, #592]	; (8004cac <get_data+0x608>)
 8004a5c:	f7ff fc36 	bl	80042cc <UART_puts>
 8004a60:	488d      	ldr	r0, [pc, #564]	; (8004c98 <get_data+0x5f4>)
 8004a62:	f7ff fc33 	bl	80042cc <UART_puts>
 8004a66:	488f      	ldr	r0, [pc, #572]	; (8004ca4 <get_data+0x600>)
 8004a68:	f7ff fc30 	bl	80042cc <UART_puts>
		UART_puts("y_rad = "); UART_puts(ellips_args.y_rad); UART_puts("\r");
 8004a6c:	4890      	ldr	r0, [pc, #576]	; (8004cb0 <get_data+0x60c>)
 8004a6e:	f7ff fc2d 	bl	80042cc <UART_puts>
 8004a72:	488a      	ldr	r0, [pc, #552]	; (8004c9c <get_data+0x5f8>)
 8004a74:	f7ff fc2a 	bl	80042cc <UART_puts>
 8004a78:	488a      	ldr	r0, [pc, #552]	; (8004ca4 <get_data+0x600>)
 8004a7a:	f7ff fc27 	bl	80042cc <UART_puts>
		UART_puts("color = "); UART_puts(ellips_args.color); UART_puts("\r");
 8004a7e:	488d      	ldr	r0, [pc, #564]	; (8004cb4 <get_data+0x610>)
 8004a80:	f7ff fc24 	bl	80042cc <UART_puts>
 8004a84:	4880      	ldr	r0, [pc, #512]	; (8004c88 <get_data+0x5e4>)
 8004a86:	f7ff fc21 	bl	80042cc <UART_puts>
 8004a8a:	4886      	ldr	r0, [pc, #536]	; (8004ca4 <get_data+0x600>)
 8004a8c:	f7ff fc1e 	bl	80042cc <UART_puts>
}
 8004a90:	e31e      	b.n	80050d0 <get_data+0xa2c>
	else if(strcmp(functions, "rechthoek")==0)
 8004a92:	4989      	ldr	r1, [pc, #548]	; (8004cb8 <get_data+0x614>)
 8004a94:	4889      	ldr	r0, [pc, #548]	; (8004cbc <get_data+0x618>)
 8004a96:	f7fb fb97 	bl	80001c8 <strcmp>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f040 809a 	bne.w	8004bd6 <get_data+0x532>
		fill=0;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	607b      	str	r3, [r7, #4]
		UART_puts("rechthoek\r");
 8004aa6:	4886      	ldr	r0, [pc, #536]	; (8004cc0 <get_data+0x61c>)
 8004aa8:	f7ff fc10 	bl	80042cc <UART_puts>
		while(token != NULL)
 8004aac:	e046      	b.n	8004b3c <get_data+0x498>
			switch(fill)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2b05      	cmp	r3, #5
 8004ab2:	d839      	bhi.n	8004b28 <get_data+0x484>
 8004ab4:	a201      	add	r2, pc, #4	; (adr r2, 8004abc <get_data+0x418>)
 8004ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aba:	bf00      	nop
 8004abc:	08004ad5 	.word	0x08004ad5
 8004ac0:	08004ae3 	.word	0x08004ae3
 8004ac4:	08004af1 	.word	0x08004af1
 8004ac8:	08004aff 	.word	0x08004aff
 8004acc:	08004b0d 	.word	0x08004b0d
 8004ad0:	08004b1b 	.word	0x08004b1b
					strcpy(functions,token);
 8004ad4:	4b6b      	ldr	r3, [pc, #428]	; (8004c84 <get_data+0x5e0>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4878      	ldr	r0, [pc, #480]	; (8004cbc <get_data+0x618>)
 8004adc:	f000 fc0b 	bl	80052f6 <strcpy>
					break;
 8004ae0:	e022      	b.n	8004b28 <get_data+0x484>
					strcpy(rectangle_args.x1,token);
 8004ae2:	4b68      	ldr	r3, [pc, #416]	; (8004c84 <get_data+0x5e0>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4876      	ldr	r0, [pc, #472]	; (8004cc4 <get_data+0x620>)
 8004aea:	f000 fc04 	bl	80052f6 <strcpy>
					break;
 8004aee:	e01b      	b.n	8004b28 <get_data+0x484>
					strcpy(rectangle_args.y1,token);
 8004af0:	4b64      	ldr	r3, [pc, #400]	; (8004c84 <get_data+0x5e0>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4619      	mov	r1, r3
 8004af6:	4874      	ldr	r0, [pc, #464]	; (8004cc8 <get_data+0x624>)
 8004af8:	f000 fbfd 	bl	80052f6 <strcpy>
					break;
 8004afc:	e014      	b.n	8004b28 <get_data+0x484>
					strcpy(rectangle_args.x2,token);
 8004afe:	4b61      	ldr	r3, [pc, #388]	; (8004c84 <get_data+0x5e0>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4619      	mov	r1, r3
 8004b04:	4871      	ldr	r0, [pc, #452]	; (8004ccc <get_data+0x628>)
 8004b06:	f000 fbf6 	bl	80052f6 <strcpy>
					break;
 8004b0a:	e00d      	b.n	8004b28 <get_data+0x484>
					strcpy(rectangle_args.y2,token);
 8004b0c:	4b5d      	ldr	r3, [pc, #372]	; (8004c84 <get_data+0x5e0>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4619      	mov	r1, r3
 8004b12:	486f      	ldr	r0, [pc, #444]	; (8004cd0 <get_data+0x62c>)
 8004b14:	f000 fbef 	bl	80052f6 <strcpy>
					break;
 8004b18:	e006      	b.n	8004b28 <get_data+0x484>
					strcpy(rectangle_args.color,token);
 8004b1a:	4b5a      	ldr	r3, [pc, #360]	; (8004c84 <get_data+0x5e0>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4619      	mov	r1, r3
 8004b20:	486c      	ldr	r0, [pc, #432]	; (8004cd4 <get_data+0x630>)
 8004b22:	f000 fbe8 	bl	80052f6 <strcpy>
					break;
 8004b26:	bf00      	nop
			fill++;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	607b      	str	r3, [r7, #4]
			token = strtok (NULL, ",");
 8004b2e:	4957      	ldr	r1, [pc, #348]	; (8004c8c <get_data+0x5e8>)
 8004b30:	2000      	movs	r0, #0
 8004b32:	f000 fbe9 	bl	8005308 <strtok>
 8004b36:	4602      	mov	r2, r0
 8004b38:	4b52      	ldr	r3, [pc, #328]	; (8004c84 <get_data+0x5e0>)
 8004b3a:	601a      	str	r2, [r3, #0]
		while(token != NULL)
 8004b3c:	4b51      	ldr	r3, [pc, #324]	; (8004c84 <get_data+0x5e0>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1b4      	bne.n	8004aae <get_data+0x40a>
		draw_rectangle(atoi(rectangle_args.x1),atoi(rectangle_args.y1),atoi(rectangle_args.x2),atoi(rectangle_args.y2),color(rectangle_args.color));
 8004b44:	485f      	ldr	r0, [pc, #380]	; (8004cc4 <get_data+0x620>)
 8004b46:	f000 fb9b 	bl	8005280 <atoi>
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	485e      	ldr	r0, [pc, #376]	; (8004cc8 <get_data+0x624>)
 8004b4e:	f000 fb97 	bl	8005280 <atoi>
 8004b52:	4605      	mov	r5, r0
 8004b54:	485d      	ldr	r0, [pc, #372]	; (8004ccc <get_data+0x628>)
 8004b56:	f000 fb93 	bl	8005280 <atoi>
 8004b5a:	4606      	mov	r6, r0
 8004b5c:	485c      	ldr	r0, [pc, #368]	; (8004cd0 <get_data+0x62c>)
 8004b5e:	f000 fb8f 	bl	8005280 <atoi>
 8004b62:	4680      	mov	r8, r0
 8004b64:	485b      	ldr	r0, [pc, #364]	; (8004cd4 <get_data+0x630>)
 8004b66:	f000 fac5 	bl	80050f4 <color>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	4643      	mov	r3, r8
 8004b70:	4632      	mov	r2, r6
 8004b72:	4629      	mov	r1, r5
 8004b74:	4620      	mov	r0, r4
 8004b76:	f7fc f9f3 	bl	8000f60 <draw_rectangle>
		UART_puts("x1 = "); UART_puts(rectangle_args.x1); UART_puts("\r");
 8004b7a:	4857      	ldr	r0, [pc, #348]	; (8004cd8 <get_data+0x634>)
 8004b7c:	f7ff fba6 	bl	80042cc <UART_puts>
 8004b80:	4850      	ldr	r0, [pc, #320]	; (8004cc4 <get_data+0x620>)
 8004b82:	f7ff fba3 	bl	80042cc <UART_puts>
 8004b86:	4847      	ldr	r0, [pc, #284]	; (8004ca4 <get_data+0x600>)
 8004b88:	f7ff fba0 	bl	80042cc <UART_puts>
		UART_puts("y1 = "); UART_puts(rectangle_args.y1); UART_puts("\r");
 8004b8c:	4853      	ldr	r0, [pc, #332]	; (8004cdc <get_data+0x638>)
 8004b8e:	f7ff fb9d 	bl	80042cc <UART_puts>
 8004b92:	484d      	ldr	r0, [pc, #308]	; (8004cc8 <get_data+0x624>)
 8004b94:	f7ff fb9a 	bl	80042cc <UART_puts>
 8004b98:	4842      	ldr	r0, [pc, #264]	; (8004ca4 <get_data+0x600>)
 8004b9a:	f7ff fb97 	bl	80042cc <UART_puts>
		UART_puts("x2 = "); UART_puts(rectangle_args.x2); UART_puts("\r");
 8004b9e:	4850      	ldr	r0, [pc, #320]	; (8004ce0 <get_data+0x63c>)
 8004ba0:	f7ff fb94 	bl	80042cc <UART_puts>
 8004ba4:	4849      	ldr	r0, [pc, #292]	; (8004ccc <get_data+0x628>)
 8004ba6:	f7ff fb91 	bl	80042cc <UART_puts>
 8004baa:	483e      	ldr	r0, [pc, #248]	; (8004ca4 <get_data+0x600>)
 8004bac:	f7ff fb8e 	bl	80042cc <UART_puts>
		UART_puts("y2 = "); UART_puts(rectangle_args.y2); UART_puts("\r");
 8004bb0:	484c      	ldr	r0, [pc, #304]	; (8004ce4 <get_data+0x640>)
 8004bb2:	f7ff fb8b 	bl	80042cc <UART_puts>
 8004bb6:	4846      	ldr	r0, [pc, #280]	; (8004cd0 <get_data+0x62c>)
 8004bb8:	f7ff fb88 	bl	80042cc <UART_puts>
 8004bbc:	4839      	ldr	r0, [pc, #228]	; (8004ca4 <get_data+0x600>)
 8004bbe:	f7ff fb85 	bl	80042cc <UART_puts>
		UART_puts("color = "); UART_puts(rectangle_args.color); UART_puts("\r");
 8004bc2:	483c      	ldr	r0, [pc, #240]	; (8004cb4 <get_data+0x610>)
 8004bc4:	f7ff fb82 	bl	80042cc <UART_puts>
 8004bc8:	4842      	ldr	r0, [pc, #264]	; (8004cd4 <get_data+0x630>)
 8004bca:	f7ff fb7f 	bl	80042cc <UART_puts>
 8004bce:	4835      	ldr	r0, [pc, #212]	; (8004ca4 <get_data+0x600>)
 8004bd0:	f7ff fb7c 	bl	80042cc <UART_puts>
}
 8004bd4:	e27c      	b.n	80050d0 <get_data+0xa2c>
	else if(strcmp(functions, "driehoek")==0)
 8004bd6:	4944      	ldr	r1, [pc, #272]	; (8004ce8 <get_data+0x644>)
 8004bd8:	4838      	ldr	r0, [pc, #224]	; (8004cbc <get_data+0x618>)
 8004bda:	f7fb faf5 	bl	80001c8 <strcmp>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	f040 810c 	bne.w	8004dfe <get_data+0x75a>
		fill=0;
 8004be6:	2300      	movs	r3, #0
 8004be8:	607b      	str	r3, [r7, #4]
		UART_puts("driehoek\r");
 8004bea:	4840      	ldr	r0, [pc, #256]	; (8004cec <get_data+0x648>)
 8004bec:	f7ff fb6e 	bl	80042cc <UART_puts>
		while(token != NULL)
 8004bf0:	e09b      	b.n	8004d2a <get_data+0x686>
			switch(fill)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b07      	cmp	r3, #7
 8004bf6:	f200 808e 	bhi.w	8004d16 <get_data+0x672>
 8004bfa:	a201      	add	r2, pc, #4	; (adr r2, 8004c00 <get_data+0x55c>)
 8004bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c00:	08004c21 	.word	0x08004c21
 8004c04:	08004c2f 	.word	0x08004c2f
 8004c08:	08004c3d 	.word	0x08004c3d
 8004c0c:	08004c4b 	.word	0x08004c4b
 8004c10:	08004c59 	.word	0x08004c59
 8004c14:	08004c67 	.word	0x08004c67
 8004c18:	08004c75 	.word	0x08004c75
 8004c1c:	08004d09 	.word	0x08004d09
					strcpy(functions,token);
 8004c20:	4b18      	ldr	r3, [pc, #96]	; (8004c84 <get_data+0x5e0>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4619      	mov	r1, r3
 8004c26:	4825      	ldr	r0, [pc, #148]	; (8004cbc <get_data+0x618>)
 8004c28:	f000 fb65 	bl	80052f6 <strcpy>
					break;
 8004c2c:	e073      	b.n	8004d16 <get_data+0x672>
					strcpy(triangle_args.x1,token);
 8004c2e:	4b15      	ldr	r3, [pc, #84]	; (8004c84 <get_data+0x5e0>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4619      	mov	r1, r3
 8004c34:	482e      	ldr	r0, [pc, #184]	; (8004cf0 <get_data+0x64c>)
 8004c36:	f000 fb5e 	bl	80052f6 <strcpy>
					break;
 8004c3a:	e06c      	b.n	8004d16 <get_data+0x672>
					strcpy(triangle_args.y1,token);
 8004c3c:	4b11      	ldr	r3, [pc, #68]	; (8004c84 <get_data+0x5e0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4619      	mov	r1, r3
 8004c42:	482c      	ldr	r0, [pc, #176]	; (8004cf4 <get_data+0x650>)
 8004c44:	f000 fb57 	bl	80052f6 <strcpy>
					break;
 8004c48:	e065      	b.n	8004d16 <get_data+0x672>
					strcpy(triangle_args.x2,token);
 8004c4a:	4b0e      	ldr	r3, [pc, #56]	; (8004c84 <get_data+0x5e0>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4619      	mov	r1, r3
 8004c50:	4829      	ldr	r0, [pc, #164]	; (8004cf8 <get_data+0x654>)
 8004c52:	f000 fb50 	bl	80052f6 <strcpy>
					break;
 8004c56:	e05e      	b.n	8004d16 <get_data+0x672>
					strcpy(triangle_args.y2,token);
 8004c58:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <get_data+0x5e0>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	4827      	ldr	r0, [pc, #156]	; (8004cfc <get_data+0x658>)
 8004c60:	f000 fb49 	bl	80052f6 <strcpy>
					break;
 8004c64:	e057      	b.n	8004d16 <get_data+0x672>
					strcpy(triangle_args.xtop,token);
 8004c66:	4b07      	ldr	r3, [pc, #28]	; (8004c84 <get_data+0x5e0>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	4824      	ldr	r0, [pc, #144]	; (8004d00 <get_data+0x65c>)
 8004c6e:	f000 fb42 	bl	80052f6 <strcpy>
					break;
 8004c72:	e050      	b.n	8004d16 <get_data+0x672>
					strcpy(triangle_args.ytop,token);
 8004c74:	4b03      	ldr	r3, [pc, #12]	; (8004c84 <get_data+0x5e0>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4822      	ldr	r0, [pc, #136]	; (8004d04 <get_data+0x660>)
 8004c7c:	f000 fb3b 	bl	80052f6 <strcpy>
					break;
 8004c80:	e049      	b.n	8004d16 <get_data+0x672>
 8004c82:	bf00      	nop
 8004c84:	2001388c 	.word	0x2001388c
 8004c88:	20013877 	.word	0x20013877
 8004c8c:	08008420 	.word	0x08008420
 8004c90:	20013822 	.word	0x20013822
 8004c94:	20013827 	.word	0x20013827
 8004c98:	2001382c 	.word	0x2001382c
 8004c9c:	20013831 	.word	0x20013831
 8004ca0:	0800849c 	.word	0x0800849c
 8004ca4:	0800841c 	.word	0x0800841c
 8004ca8:	080084a8 	.word	0x080084a8
 8004cac:	080084b4 	.word	0x080084b4
 8004cb0:	080084c0 	.word	0x080084c0
 8004cb4:	08008440 	.word	0x08008440
 8004cb8:	080084cc 	.word	0x080084cc
 8004cbc:	200006d8 	.word	0x200006d8
 8004cc0:	080084d8 	.word	0x080084d8
 8004cc4:	20013470 	.word	0x20013470
 8004cc8:	20013475 	.word	0x20013475
 8004ccc:	2001347a 	.word	0x2001347a
 8004cd0:	2001347f 	.word	0x2001347f
 8004cd4:	200134e3 	.word	0x200134e3
 8004cd8:	0800845c 	.word	0x0800845c
 8004cdc:	08008464 	.word	0x08008464
 8004ce0:	0800846c 	.word	0x0800846c
 8004ce4:	08008474 	.word	0x08008474
 8004ce8:	080084e4 	.word	0x080084e4
 8004cec:	080084f0 	.word	0x080084f0
 8004cf0:	200134f8 	.word	0x200134f8
 8004cf4:	200134fd 	.word	0x200134fd
 8004cf8:	20013502 	.word	0x20013502
 8004cfc:	20013507 	.word	0x20013507
 8004d00:	2001350c 	.word	0x2001350c
 8004d04:	20013511 	.word	0x20013511
					strcpy(rectangle_args.color,token);
 8004d08:	4bb4      	ldr	r3, [pc, #720]	; (8004fdc <get_data+0x938>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	48b4      	ldr	r0, [pc, #720]	; (8004fe0 <get_data+0x93c>)
 8004d10:	f000 faf1 	bl	80052f6 <strcpy>
					break;
 8004d14:	bf00      	nop
			fill++;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	607b      	str	r3, [r7, #4]
			token = strtok (NULL, ",");
 8004d1c:	49b1      	ldr	r1, [pc, #708]	; (8004fe4 <get_data+0x940>)
 8004d1e:	2000      	movs	r0, #0
 8004d20:	f000 faf2 	bl	8005308 <strtok>
 8004d24:	4602      	mov	r2, r0
 8004d26:	4bad      	ldr	r3, [pc, #692]	; (8004fdc <get_data+0x938>)
 8004d28:	601a      	str	r2, [r3, #0]
		while(token != NULL)
 8004d2a:	4bac      	ldr	r3, [pc, #688]	; (8004fdc <get_data+0x938>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f47f af5f 	bne.w	8004bf2 <get_data+0x54e>
		draw_triangle(atoi(triangle_args.x1),atoi(triangle_args.y1),atoi(triangle_args.x2),atoi(triangle_args.y2),atoi(triangle_args.xtop),atoi(triangle_args.ytop),color(triangle_args.color));
 8004d34:	48ac      	ldr	r0, [pc, #688]	; (8004fe8 <get_data+0x944>)
 8004d36:	f000 faa3 	bl	8005280 <atoi>
 8004d3a:	4606      	mov	r6, r0
 8004d3c:	48ab      	ldr	r0, [pc, #684]	; (8004fec <get_data+0x948>)
 8004d3e:	f000 fa9f 	bl	8005280 <atoi>
 8004d42:	4680      	mov	r8, r0
 8004d44:	48aa      	ldr	r0, [pc, #680]	; (8004ff0 <get_data+0x94c>)
 8004d46:	f000 fa9b 	bl	8005280 <atoi>
 8004d4a:	4681      	mov	r9, r0
 8004d4c:	48a9      	ldr	r0, [pc, #676]	; (8004ff4 <get_data+0x950>)
 8004d4e:	f000 fa97 	bl	8005280 <atoi>
 8004d52:	4682      	mov	sl, r0
 8004d54:	48a8      	ldr	r0, [pc, #672]	; (8004ff8 <get_data+0x954>)
 8004d56:	f000 fa93 	bl	8005280 <atoi>
 8004d5a:	4604      	mov	r4, r0
 8004d5c:	48a7      	ldr	r0, [pc, #668]	; (8004ffc <get_data+0x958>)
 8004d5e:	f000 fa8f 	bl	8005280 <atoi>
 8004d62:	4605      	mov	r5, r0
 8004d64:	48a6      	ldr	r0, [pc, #664]	; (8005000 <get_data+0x95c>)
 8004d66:	f000 f9c5 	bl	80050f4 <color>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	9302      	str	r3, [sp, #8]
 8004d6e:	9501      	str	r5, [sp, #4]
 8004d70:	9400      	str	r4, [sp, #0]
 8004d72:	4653      	mov	r3, sl
 8004d74:	464a      	mov	r2, r9
 8004d76:	4641      	mov	r1, r8
 8004d78:	4630      	mov	r0, r6
 8004d7a:	f7fd fedd 	bl	8002b38 <draw_triangle>
		UART_puts("x1 = "); UART_puts(rectangle_args.x1); UART_puts("\r");
 8004d7e:	48a1      	ldr	r0, [pc, #644]	; (8005004 <get_data+0x960>)
 8004d80:	f7ff faa4 	bl	80042cc <UART_puts>
 8004d84:	48a0      	ldr	r0, [pc, #640]	; (8005008 <get_data+0x964>)
 8004d86:	f7ff faa1 	bl	80042cc <UART_puts>
 8004d8a:	48a0      	ldr	r0, [pc, #640]	; (800500c <get_data+0x968>)
 8004d8c:	f7ff fa9e 	bl	80042cc <UART_puts>
		UART_puts("y1 = "); UART_puts(rectangle_args.y1); UART_puts("\r");
 8004d90:	489f      	ldr	r0, [pc, #636]	; (8005010 <get_data+0x96c>)
 8004d92:	f7ff fa9b 	bl	80042cc <UART_puts>
 8004d96:	489f      	ldr	r0, [pc, #636]	; (8005014 <get_data+0x970>)
 8004d98:	f7ff fa98 	bl	80042cc <UART_puts>
 8004d9c:	489b      	ldr	r0, [pc, #620]	; (800500c <get_data+0x968>)
 8004d9e:	f7ff fa95 	bl	80042cc <UART_puts>
		UART_puts("x2 = "); UART_puts(rectangle_args.x2); UART_puts("\r");
 8004da2:	489d      	ldr	r0, [pc, #628]	; (8005018 <get_data+0x974>)
 8004da4:	f7ff fa92 	bl	80042cc <UART_puts>
 8004da8:	489c      	ldr	r0, [pc, #624]	; (800501c <get_data+0x978>)
 8004daa:	f7ff fa8f 	bl	80042cc <UART_puts>
 8004dae:	4897      	ldr	r0, [pc, #604]	; (800500c <get_data+0x968>)
 8004db0:	f7ff fa8c 	bl	80042cc <UART_puts>
		UART_puts("y2 = "); UART_puts(rectangle_args.y2); UART_puts("\r");
 8004db4:	489a      	ldr	r0, [pc, #616]	; (8005020 <get_data+0x97c>)
 8004db6:	f7ff fa89 	bl	80042cc <UART_puts>
 8004dba:	489a      	ldr	r0, [pc, #616]	; (8005024 <get_data+0x980>)
 8004dbc:	f7ff fa86 	bl	80042cc <UART_puts>
 8004dc0:	4892      	ldr	r0, [pc, #584]	; (800500c <get_data+0x968>)
 8004dc2:	f7ff fa83 	bl	80042cc <UART_puts>
		UART_puts("xtop = "); UART_puts(rectangle_args.xtop); UART_puts("\r");
 8004dc6:	4898      	ldr	r0, [pc, #608]	; (8005028 <get_data+0x984>)
 8004dc8:	f7ff fa80 	bl	80042cc <UART_puts>
 8004dcc:	4897      	ldr	r0, [pc, #604]	; (800502c <get_data+0x988>)
 8004dce:	f7ff fa7d 	bl	80042cc <UART_puts>
 8004dd2:	488e      	ldr	r0, [pc, #568]	; (800500c <get_data+0x968>)
 8004dd4:	f7ff fa7a 	bl	80042cc <UART_puts>
		UART_puts("ytop = "); UART_puts(rectangle_args.ytop); UART_puts("\r");
 8004dd8:	4895      	ldr	r0, [pc, #596]	; (8005030 <get_data+0x98c>)
 8004dda:	f7ff fa77 	bl	80042cc <UART_puts>
 8004dde:	4895      	ldr	r0, [pc, #596]	; (8005034 <get_data+0x990>)
 8004de0:	f7ff fa74 	bl	80042cc <UART_puts>
 8004de4:	4889      	ldr	r0, [pc, #548]	; (800500c <get_data+0x968>)
 8004de6:	f7ff fa71 	bl	80042cc <UART_puts>
		UART_puts("color = "); UART_puts(rectangle_args.color); UART_puts("\r");
 8004dea:	4893      	ldr	r0, [pc, #588]	; (8005038 <get_data+0x994>)
 8004dec:	f7ff fa6e 	bl	80042cc <UART_puts>
 8004df0:	487b      	ldr	r0, [pc, #492]	; (8004fe0 <get_data+0x93c>)
 8004df2:	f7ff fa6b 	bl	80042cc <UART_puts>
 8004df6:	4885      	ldr	r0, [pc, #532]	; (800500c <get_data+0x968>)
 8004df8:	f7ff fa68 	bl	80042cc <UART_puts>
}
 8004dfc:	e168      	b.n	80050d0 <get_data+0xa2c>
	else if(strcmp(functions, "tekst")==0)
 8004dfe:	498f      	ldr	r1, [pc, #572]	; (800503c <get_data+0x998>)
 8004e00:	488f      	ldr	r0, [pc, #572]	; (8005040 <get_data+0x99c>)
 8004e02:	f7fb f9e1 	bl	80001c8 <strcmp>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d166      	bne.n	8004eda <get_data+0x836>
		fill=0;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	607b      	str	r3, [r7, #4]
		UART_puts("tekst\r");
 8004e10:	488c      	ldr	r0, [pc, #560]	; (8005044 <get_data+0x9a0>)
 8004e12:	f7ff fa5b 	bl	80042cc <UART_puts>
		while(token != NULL)
 8004e16:	e033      	b.n	8004e80 <get_data+0x7dc>
			switch(fill)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2b03      	cmp	r3, #3
 8004e1c:	d826      	bhi.n	8004e6c <get_data+0x7c8>
 8004e1e:	a201      	add	r2, pc, #4	; (adr r2, 8004e24 <get_data+0x780>)
 8004e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e24:	08004e35 	.word	0x08004e35
 8004e28:	08004e43 	.word	0x08004e43
 8004e2c:	08004e51 	.word	0x08004e51
 8004e30:	08004e5f 	.word	0x08004e5f
					strcpy(functions,token);
 8004e34:	4b69      	ldr	r3, [pc, #420]	; (8004fdc <get_data+0x938>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4619      	mov	r1, r3
 8004e3a:	4881      	ldr	r0, [pc, #516]	; (8005040 <get_data+0x99c>)
 8004e3c:	f000 fa5b 	bl	80052f6 <strcpy>
					break;
 8004e40:	e014      	b.n	8004e6c <get_data+0x7c8>
					strcpy(text_args.x1,token);
 8004e42:	4b66      	ldr	r3, [pc, #408]	; (8004fdc <get_data+0x938>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4619      	mov	r1, r3
 8004e48:	487f      	ldr	r0, [pc, #508]	; (8005048 <get_data+0x9a4>)
 8004e4a:	f000 fa54 	bl	80052f6 <strcpy>
					break;
 8004e4e:	e00d      	b.n	8004e6c <get_data+0x7c8>
					strcpy(text_args.y1,token);
 8004e50:	4b62      	ldr	r3, [pc, #392]	; (8004fdc <get_data+0x938>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4619      	mov	r1, r3
 8004e56:	487d      	ldr	r0, [pc, #500]	; (800504c <get_data+0x9a8>)
 8004e58:	f000 fa4d 	bl	80052f6 <strcpy>
					break;
 8004e5c:	e006      	b.n	8004e6c <get_data+0x7c8>
					strcpy(text_args.text_in,token);
 8004e5e:	4b5f      	ldr	r3, [pc, #380]	; (8004fdc <get_data+0x938>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4619      	mov	r1, r3
 8004e64:	487a      	ldr	r0, [pc, #488]	; (8005050 <get_data+0x9ac>)
 8004e66:	f000 fa46 	bl	80052f6 <strcpy>
					break;
 8004e6a:	bf00      	nop
			fill++;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	607b      	str	r3, [r7, #4]
			token = strtok (NULL, ",");
 8004e72:	495c      	ldr	r1, [pc, #368]	; (8004fe4 <get_data+0x940>)
 8004e74:	2000      	movs	r0, #0
 8004e76:	f000 fa47 	bl	8005308 <strtok>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	4b57      	ldr	r3, [pc, #348]	; (8004fdc <get_data+0x938>)
 8004e7e:	601a      	str	r2, [r3, #0]
		while(token != NULL)
 8004e80:	4b56      	ldr	r3, [pc, #344]	; (8004fdc <get_data+0x938>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1c7      	bne.n	8004e18 <get_data+0x774>
		draw_text(atoi(text_args.x1),atoi(text_args.y1),text_args.text_in);
 8004e88:	486f      	ldr	r0, [pc, #444]	; (8005048 <get_data+0x9a4>)
 8004e8a:	f000 f9f9 	bl	8005280 <atoi>
 8004e8e:	4604      	mov	r4, r0
 8004e90:	486e      	ldr	r0, [pc, #440]	; (800504c <get_data+0x9a8>)
 8004e92:	f000 f9f5 	bl	8005280 <atoi>
 8004e96:	4603      	mov	r3, r0
 8004e98:	4a6d      	ldr	r2, [pc, #436]	; (8005050 <get_data+0x9ac>)
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	f7fc f887 	bl	8000fb0 <draw_text>
		UART_puts("x1 = "); UART_puts(text_args.x1); UART_puts("\r");
 8004ea2:	4858      	ldr	r0, [pc, #352]	; (8005004 <get_data+0x960>)
 8004ea4:	f7ff fa12 	bl	80042cc <UART_puts>
 8004ea8:	4867      	ldr	r0, [pc, #412]	; (8005048 <get_data+0x9a4>)
 8004eaa:	f7ff fa0f 	bl	80042cc <UART_puts>
 8004eae:	4857      	ldr	r0, [pc, #348]	; (800500c <get_data+0x968>)
 8004eb0:	f7ff fa0c 	bl	80042cc <UART_puts>
		UART_puts("y1 = "); UART_puts(text_args.y1); UART_puts("\r");
 8004eb4:	4856      	ldr	r0, [pc, #344]	; (8005010 <get_data+0x96c>)
 8004eb6:	f7ff fa09 	bl	80042cc <UART_puts>
 8004eba:	4864      	ldr	r0, [pc, #400]	; (800504c <get_data+0x9a8>)
 8004ebc:	f7ff fa06 	bl	80042cc <UART_puts>
 8004ec0:	4852      	ldr	r0, [pc, #328]	; (800500c <get_data+0x968>)
 8004ec2:	f7ff fa03 	bl	80042cc <UART_puts>
		UART_puts("text_in = "); UART_puts(text_args.text_in); UART_puts("\r");
 8004ec6:	4863      	ldr	r0, [pc, #396]	; (8005054 <get_data+0x9b0>)
 8004ec8:	f7ff fa00 	bl	80042cc <UART_puts>
 8004ecc:	4860      	ldr	r0, [pc, #384]	; (8005050 <get_data+0x9ac>)
 8004ece:	f7ff f9fd 	bl	80042cc <UART_puts>
 8004ed2:	484e      	ldr	r0, [pc, #312]	; (800500c <get_data+0x968>)
 8004ed4:	f7ff f9fa 	bl	80042cc <UART_puts>
}
 8004ed8:	e0fa      	b.n	80050d0 <get_data+0xa2c>
	else if(strcmp(functions, "bitmap")==0)
 8004eda:	495f      	ldr	r1, [pc, #380]	; (8005058 <get_data+0x9b4>)
 8004edc:	4858      	ldr	r0, [pc, #352]	; (8005040 <get_data+0x99c>)
 8004ede:	f7fb f973 	bl	80001c8 <strcmp>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d165      	bne.n	8004fb4 <get_data+0x910>
		fill=0;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	607b      	str	r3, [r7, #4]
		UART_puts("bitmap\r");
 8004eec:	485b      	ldr	r0, [pc, #364]	; (800505c <get_data+0x9b8>)
 8004eee:	f7ff f9ed 	bl	80042cc <UART_puts>
		while(token != NULL)
 8004ef2:	e033      	b.n	8004f5c <get_data+0x8b8>
			switch(fill)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b03      	cmp	r3, #3
 8004ef8:	d826      	bhi.n	8004f48 <get_data+0x8a4>
 8004efa:	a201      	add	r2, pc, #4	; (adr r2, 8004f00 <get_data+0x85c>)
 8004efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f00:	08004f11 	.word	0x08004f11
 8004f04:	08004f1f 	.word	0x08004f1f
 8004f08:	08004f2d 	.word	0x08004f2d
 8004f0c:	08004f3b 	.word	0x08004f3b
					strcpy(functions,token);
 8004f10:	4b32      	ldr	r3, [pc, #200]	; (8004fdc <get_data+0x938>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4619      	mov	r1, r3
 8004f16:	484a      	ldr	r0, [pc, #296]	; (8005040 <get_data+0x99c>)
 8004f18:	f000 f9ed 	bl	80052f6 <strcpy>
					break;
 8004f1c:	e014      	b.n	8004f48 <get_data+0x8a4>
					strcpy(bitmap_args.bitmap_nr,token);
 8004f1e:	4b2f      	ldr	r3, [pc, #188]	; (8004fdc <get_data+0x938>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4619      	mov	r1, r3
 8004f24:	484e      	ldr	r0, [pc, #312]	; (8005060 <get_data+0x9bc>)
 8004f26:	f000 f9e6 	bl	80052f6 <strcpy>
					break;
 8004f2a:	e00d      	b.n	8004f48 <get_data+0x8a4>
					strcpy(bitmap_args.x1,token);
 8004f2c:	4b2b      	ldr	r3, [pc, #172]	; (8004fdc <get_data+0x938>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4619      	mov	r1, r3
 8004f32:	484c      	ldr	r0, [pc, #304]	; (8005064 <get_data+0x9c0>)
 8004f34:	f000 f9df 	bl	80052f6 <strcpy>
					break;
 8004f38:	e006      	b.n	8004f48 <get_data+0x8a4>
					strcpy(bitmap_args.y1,token);
 8004f3a:	4b28      	ldr	r3, [pc, #160]	; (8004fdc <get_data+0x938>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4619      	mov	r1, r3
 8004f40:	4849      	ldr	r0, [pc, #292]	; (8005068 <get_data+0x9c4>)
 8004f42:	f000 f9d8 	bl	80052f6 <strcpy>
					break;
 8004f46:	bf00      	nop
			fill++;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	607b      	str	r3, [r7, #4]
			token = strtok (NULL, ",");
 8004f4e:	4925      	ldr	r1, [pc, #148]	; (8004fe4 <get_data+0x940>)
 8004f50:	2000      	movs	r0, #0
 8004f52:	f000 f9d9 	bl	8005308 <strtok>
 8004f56:	4602      	mov	r2, r0
 8004f58:	4b20      	ldr	r3, [pc, #128]	; (8004fdc <get_data+0x938>)
 8004f5a:	601a      	str	r2, [r3, #0]
		while(token != NULL)
 8004f5c:	4b1f      	ldr	r3, [pc, #124]	; (8004fdc <get_data+0x938>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d1c7      	bne.n	8004ef4 <get_data+0x850>
		draw_bitmap(/*atoi(bitmap.bitmap_nr),*/atoi(bitmap_args.x1),atoi(bitmap_args.y1));
 8004f64:	483f      	ldr	r0, [pc, #252]	; (8005064 <get_data+0x9c0>)
 8004f66:	f000 f98b 	bl	8005280 <atoi>
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	483e      	ldr	r0, [pc, #248]	; (8005068 <get_data+0x9c4>)
 8004f6e:	f000 f987 	bl	8005280 <atoi>
 8004f72:	4603      	mov	r3, r0
 8004f74:	4619      	mov	r1, r3
 8004f76:	4620      	mov	r0, r4
 8004f78:	f7fb fd22 	bl	80009c0 <draw_bitmap>
		UART_puts("x1 = "); UART_puts(bitmap_args.x1); UART_puts("\r");
 8004f7c:	4821      	ldr	r0, [pc, #132]	; (8005004 <get_data+0x960>)
 8004f7e:	f7ff f9a5 	bl	80042cc <UART_puts>
 8004f82:	4838      	ldr	r0, [pc, #224]	; (8005064 <get_data+0x9c0>)
 8004f84:	f7ff f9a2 	bl	80042cc <UART_puts>
 8004f88:	4820      	ldr	r0, [pc, #128]	; (800500c <get_data+0x968>)
 8004f8a:	f7ff f99f 	bl	80042cc <UART_puts>
		UART_puts("y1 = "); UART_puts(bitmap_args.y1); UART_puts("\r");
 8004f8e:	4820      	ldr	r0, [pc, #128]	; (8005010 <get_data+0x96c>)
 8004f90:	f7ff f99c 	bl	80042cc <UART_puts>
 8004f94:	4834      	ldr	r0, [pc, #208]	; (8005068 <get_data+0x9c4>)
 8004f96:	f7ff f999 	bl	80042cc <UART_puts>
 8004f9a:	481c      	ldr	r0, [pc, #112]	; (800500c <get_data+0x968>)
 8004f9c:	f7ff f996 	bl	80042cc <UART_puts>
		UART_puts("bitmap_nr = "); UART_puts(bitmap_args.bitmap_nr); UART_puts("\r");
 8004fa0:	4832      	ldr	r0, [pc, #200]	; (800506c <get_data+0x9c8>)
 8004fa2:	f7ff f993 	bl	80042cc <UART_puts>
 8004fa6:	482e      	ldr	r0, [pc, #184]	; (8005060 <get_data+0x9bc>)
 8004fa8:	f7ff f990 	bl	80042cc <UART_puts>
 8004fac:	4817      	ldr	r0, [pc, #92]	; (800500c <get_data+0x968>)
 8004fae:	f7ff f98d 	bl	80042cc <UART_puts>
}
 8004fb2:	e08d      	b.n	80050d0 <get_data+0xa2c>
	else if(strcmp(functions, "wacht")==0)
 8004fb4:	492e      	ldr	r1, [pc, #184]	; (8005070 <get_data+0x9cc>)
 8004fb6:	4822      	ldr	r0, [pc, #136]	; (8005040 <get_data+0x99c>)
 8004fb8:	f7fb f906 	bl	80001c8 <strcmp>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f040 8086 	bne.w	80050d0 <get_data+0xa2c>
		fill=0;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	607b      	str	r3, [r7, #4]
		UART_puts("wacht\r");
 8004fc8:	482a      	ldr	r0, [pc, #168]	; (8005074 <get_data+0x9d0>)
 8004fca:	f7ff f97f 	bl	80042cc <UART_puts>
		while(token != NULL)
 8004fce:	e06b      	b.n	80050a8 <get_data+0xa04>
			switch(fill)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d050      	beq.n	8005078 <get_data+0x9d4>
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d055      	beq.n	8005086 <get_data+0x9e2>
 8004fda:	e05b      	b.n	8005094 <get_data+0x9f0>
 8004fdc:	2001388c 	.word	0x2001388c
 8004fe0:	200134e3 	.word	0x200134e3
 8004fe4:	08008420 	.word	0x08008420
 8004fe8:	200134f8 	.word	0x200134f8
 8004fec:	200134fd 	.word	0x200134fd
 8004ff0:	20013502 	.word	0x20013502
 8004ff4:	20013507 	.word	0x20013507
 8004ff8:	2001350c 	.word	0x2001350c
 8004ffc:	20013511 	.word	0x20013511
 8005000:	2001356b 	.word	0x2001356b
 8005004:	0800845c 	.word	0x0800845c
 8005008:	20013470 	.word	0x20013470
 800500c:	0800841c 	.word	0x0800841c
 8005010:	08008464 	.word	0x08008464
 8005014:	20013475 	.word	0x20013475
 8005018:	0800846c 	.word	0x0800846c
 800501c:	2001347a 	.word	0x2001347a
 8005020:	08008474 	.word	0x08008474
 8005024:	2001347f 	.word	0x2001347f
 8005028:	080084fc 	.word	0x080084fc
 800502c:	20013484 	.word	0x20013484
 8005030:	08008504 	.word	0x08008504
 8005034:	20013489 	.word	0x20013489
 8005038:	08008440 	.word	0x08008440
 800503c:	0800850c 	.word	0x0800850c
 8005040:	200006d8 	.word	0x200006d8
 8005044:	08008514 	.word	0x08008514
 8005048:	200136f4 	.word	0x200136f4
 800504c:	200136f9 	.word	0x200136f9
 8005050:	2001372b 	.word	0x2001372b
 8005054:	0800851c 	.word	0x0800851c
 8005058:	08008528 	.word	0x08008528
 800505c:	08008530 	.word	0x08008530
 8005060:	200136d5 	.word	0x200136d5
 8005064:	2001366c 	.word	0x2001366c
 8005068:	20013671 	.word	0x20013671
 800506c:	08008538 	.word	0x08008538
 8005070:	08008548 	.word	0x08008548
 8005074:	08008550 	.word	0x08008550
				strcpy(functions,token);
 8005078:	4b18      	ldr	r3, [pc, #96]	; (80050dc <get_data+0xa38>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4619      	mov	r1, r3
 800507e:	4818      	ldr	r0, [pc, #96]	; (80050e0 <get_data+0xa3c>)
 8005080:	f000 f939 	bl	80052f6 <strcpy>
				break;
 8005084:	e006      	b.n	8005094 <get_data+0x9f0>
				strcpy(wait_args.time_ms,token);
 8005086:	4b15      	ldr	r3, [pc, #84]	; (80050dc <get_data+0xa38>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4619      	mov	r1, r3
 800508c:	4815      	ldr	r0, [pc, #84]	; (80050e4 <get_data+0xa40>)
 800508e:	f000 f932 	bl	80052f6 <strcpy>
				break;
 8005092:	bf00      	nop
			fill++;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	3301      	adds	r3, #1
 8005098:	607b      	str	r3, [r7, #4]
			token = strtok (NULL, ",");
 800509a:	4913      	ldr	r1, [pc, #76]	; (80050e8 <get_data+0xa44>)
 800509c:	2000      	movs	r0, #0
 800509e:	f000 f933 	bl	8005308 <strtok>
 80050a2:	4602      	mov	r2, r0
 80050a4:	4b0d      	ldr	r3, [pc, #52]	; (80050dc <get_data+0xa38>)
 80050a6:	601a      	str	r2, [r3, #0]
		while(token != NULL)
 80050a8:	4b0c      	ldr	r3, [pc, #48]	; (80050dc <get_data+0xa38>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d18f      	bne.n	8004fd0 <get_data+0x92c>
    	wait_ms(atoi(wait_args.time_ms));
 80050b0:	480c      	ldr	r0, [pc, #48]	; (80050e4 <get_data+0xa40>)
 80050b2:	f000 f8e5 	bl	8005280 <atoi>
 80050b6:	4603      	mov	r3, r0
 80050b8:	4618      	mov	r0, r3
 80050ba:	f7fd fd66 	bl	8002b8a <wait_ms>
		UART_puts("time_ms = "); UART_puts(wait_args.time_ms); UART_puts("\r");
 80050be:	480b      	ldr	r0, [pc, #44]	; (80050ec <get_data+0xa48>)
 80050c0:	f7ff f904 	bl	80042cc <UART_puts>
 80050c4:	4807      	ldr	r0, [pc, #28]	; (80050e4 <get_data+0xa40>)
 80050c6:	f7ff f901 	bl	80042cc <UART_puts>
 80050ca:	4809      	ldr	r0, [pc, #36]	; (80050f0 <get_data+0xa4c>)
 80050cc:	f7ff f8fe 	bl	80042cc <UART_puts>
}
 80050d0:	bf00      	nop
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050da:	bf00      	nop
 80050dc:	2001388c 	.word	0x2001388c
 80050e0:	200006d8 	.word	0x200006d8
 80050e4:	200137ea 	.word	0x200137ea
 80050e8:	08008420 	.word	0x08008420
 80050ec:	08008558 	.word	0x08008558
 80050f0:	0800841c 	.word	0x0800841c

080050f4 <color>:

int color(char *color_input)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
	if(strcmp(line_args.color, "zwart")==0) return zwart;
 80050fc:	494e      	ldr	r1, [pc, #312]	; (8005238 <color+0x144>)
 80050fe:	484f      	ldr	r0, [pc, #316]	; (800523c <color+0x148>)
 8005100:	f7fb f862 	bl	80001c8 <strcmp>
 8005104:	4603      	mov	r3, r0
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <color+0x1a>
 800510a:	2300      	movs	r3, #0
 800510c:	e090      	b.n	8005230 <color+0x13c>
	else if(strcmp(line_args.color, "blauw\r")==0) return blauw;
 800510e:	494c      	ldr	r1, [pc, #304]	; (8005240 <color+0x14c>)
 8005110:	484a      	ldr	r0, [pc, #296]	; (800523c <color+0x148>)
 8005112:	f7fb f859 	bl	80001c8 <strcmp>
 8005116:	4603      	mov	r3, r0
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <color+0x2c>
 800511c:	2303      	movs	r3, #3
 800511e:	e087      	b.n	8005230 <color+0x13c>
	else if(strcmp(line_args.color, "lichtblauw")==0) return lichtblauw;
 8005120:	4948      	ldr	r1, [pc, #288]	; (8005244 <color+0x150>)
 8005122:	4846      	ldr	r0, [pc, #280]	; (800523c <color+0x148>)
 8005124:	f7fb f850 	bl	80001c8 <strcmp>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <color+0x3e>
 800512e:	2373      	movs	r3, #115	; 0x73
 8005130:	e07e      	b.n	8005230 <color+0x13c>
	else if(strcmp(line_args.color, "groen")==0) return groen;
 8005132:	4945      	ldr	r1, [pc, #276]	; (8005248 <color+0x154>)
 8005134:	4841      	ldr	r0, [pc, #260]	; (800523c <color+0x148>)
 8005136:	f7fb f847 	bl	80001c8 <strcmp>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <color+0x50>
 8005140:	231c      	movs	r3, #28
 8005142:	e075      	b.n	8005230 <color+0x13c>
	else if(strcmp(line_args.color, "groen\r")==0) return groen;
 8005144:	4941      	ldr	r1, [pc, #260]	; (800524c <color+0x158>)
 8005146:	483d      	ldr	r0, [pc, #244]	; (800523c <color+0x148>)
 8005148:	f7fb f83e 	bl	80001c8 <strcmp>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <color+0x62>
 8005152:	231c      	movs	r3, #28
 8005154:	e06c      	b.n	8005230 <color+0x13c>
	else if(strcmp(line_args.color, "lichtgroen")==0) return lichtgroen;
 8005156:	493e      	ldr	r1, [pc, #248]	; (8005250 <color+0x15c>)
 8005158:	4838      	ldr	r0, [pc, #224]	; (800523c <color+0x148>)
 800515a:	f7fb f835 	bl	80001c8 <strcmp>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <color+0x74>
 8005164:	235c      	movs	r3, #92	; 0x5c
 8005166:	e063      	b.n	8005230 <color+0x13c>
	else if(strcmp(line_args.color, "rood")==0) return rood;
 8005168:	493a      	ldr	r1, [pc, #232]	; (8005254 <color+0x160>)
 800516a:	4834      	ldr	r0, [pc, #208]	; (800523c <color+0x148>)
 800516c:	f7fb f82c 	bl	80001c8 <strcmp>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d101      	bne.n	800517a <color+0x86>
 8005176:	23e0      	movs	r3, #224	; 0xe0
 8005178:	e05a      	b.n	8005230 <color+0x13c>
	else if(strcmp(line_args.color, "lichtrood")==0) return lichtrood;
 800517a:	4937      	ldr	r1, [pc, #220]	; (8005258 <color+0x164>)
 800517c:	482f      	ldr	r0, [pc, #188]	; (800523c <color+0x148>)
 800517e:	f7fb f823 	bl	80001c8 <strcmp>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <color+0x98>
 8005188:	23e9      	movs	r3, #233	; 0xe9
 800518a:	e051      	b.n	8005230 <color+0x13c>
	else if(strcmp(line_args.color, "wit")==0) return wit;
 800518c:	4933      	ldr	r1, [pc, #204]	; (800525c <color+0x168>)
 800518e:	482b      	ldr	r0, [pc, #172]	; (800523c <color+0x148>)
 8005190:	f7fb f81a 	bl	80001c8 <strcmp>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <color+0xaa>
 800519a:	23ff      	movs	r3, #255	; 0xff
 800519c:	e048      	b.n	8005230 <color+0x13c>
	else if(strcmp(line_args.color, "cyaan")==0) return cyaan;
 800519e:	4930      	ldr	r1, [pc, #192]	; (8005260 <color+0x16c>)
 80051a0:	4826      	ldr	r0, [pc, #152]	; (800523c <color+0x148>)
 80051a2:	f7fb f811 	bl	80001c8 <strcmp>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <color+0xbc>
 80051ac:	231f      	movs	r3, #31
 80051ae:	e03f      	b.n	8005230 <color+0x13c>
	else if(strcmp(line_args.color, "lichtcyaan")==0) return lichtcyaan;
 80051b0:	492c      	ldr	r1, [pc, #176]	; (8005264 <color+0x170>)
 80051b2:	4822      	ldr	r0, [pc, #136]	; (800523c <color+0x148>)
 80051b4:	f7fb f808 	bl	80001c8 <strcmp>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <color+0xce>
 80051be:	237f      	movs	r3, #127	; 0x7f
 80051c0:	e036      	b.n	8005230 <color+0x13c>
	else if(strcmp(line_args.color, "magenta")==0) return magenta;
 80051c2:	4929      	ldr	r1, [pc, #164]	; (8005268 <color+0x174>)
 80051c4:	481d      	ldr	r0, [pc, #116]	; (800523c <color+0x148>)
 80051c6:	f7fa ffff 	bl	80001c8 <strcmp>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <color+0xe0>
 80051d0:	23e3      	movs	r3, #227	; 0xe3
 80051d2:	e02d      	b.n	8005230 <color+0x13c>
	else if(strcmp(line_args.color, "lichtmagenta")==0) return lichtmagenta;
 80051d4:	4925      	ldr	r1, [pc, #148]	; (800526c <color+0x178>)
 80051d6:	4819      	ldr	r0, [pc, #100]	; (800523c <color+0x148>)
 80051d8:	f7fa fff6 	bl	80001c8 <strcmp>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <color+0xf2>
 80051e2:	23e2      	movs	r3, #226	; 0xe2
 80051e4:	e024      	b.n	8005230 <color+0x13c>
	else if(strcmp(line_args.color, "geel")==0) return geel;
 80051e6:	4922      	ldr	r1, [pc, #136]	; (8005270 <color+0x17c>)
 80051e8:	4814      	ldr	r0, [pc, #80]	; (800523c <color+0x148>)
 80051ea:	f7fa ffed 	bl	80001c8 <strcmp>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <color+0x104>
 80051f4:	23fc      	movs	r3, #252	; 0xfc
 80051f6:	e01b      	b.n	8005230 <color+0x13c>
	else if(strcmp(line_args.color, "bruin")==0) return bruin;
 80051f8:	491e      	ldr	r1, [pc, #120]	; (8005274 <color+0x180>)
 80051fa:	4810      	ldr	r0, [pc, #64]	; (800523c <color+0x148>)
 80051fc:	f7fa ffe4 	bl	80001c8 <strcmp>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <color+0x116>
 8005206:	2388      	movs	r3, #136	; 0x88
 8005208:	e012      	b.n	8005230 <color+0x13c>
	else if(strcmp(line_args.color, "grijs")==0) return grijs;
 800520a:	491b      	ldr	r1, [pc, #108]	; (8005278 <color+0x184>)
 800520c:	480b      	ldr	r0, [pc, #44]	; (800523c <color+0x148>)
 800520e:	f7fa ffdb 	bl	80001c8 <strcmp>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d101      	bne.n	800521c <color+0x128>
 8005218:	23e6      	movs	r3, #230	; 0xe6
 800521a:	e009      	b.n	8005230 <color+0x13c>
	else if(strcmp(line_args.color, "paars")==0) return paars;
 800521c:	4917      	ldr	r1, [pc, #92]	; (800527c <color+0x188>)
 800521e:	4807      	ldr	r0, [pc, #28]	; (800523c <color+0x148>)
 8005220:	f7fa ffd2 	bl	80001c8 <strcmp>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d101      	bne.n	800522e <color+0x13a>
 800522a:	2350      	movs	r3, #80	; 0x50
 800522c:	e000      	b.n	8005230 <color+0x13c>
	else return wit;
 800522e:	23ff      	movs	r3, #255	; 0xff
};
 8005230:	4618      	mov	r0, r3
 8005232:	3708      	adds	r7, #8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	08008564 	.word	0x08008564
 800523c:	20013657 	.word	0x20013657
 8005240:	0800856c 	.word	0x0800856c
 8005244:	08008574 	.word	0x08008574
 8005248:	08008580 	.word	0x08008580
 800524c:	08008588 	.word	0x08008588
 8005250:	08008590 	.word	0x08008590
 8005254:	0800859c 	.word	0x0800859c
 8005258:	080085a4 	.word	0x080085a4
 800525c:	080085b0 	.word	0x080085b0
 8005260:	080085b4 	.word	0x080085b4
 8005264:	080085bc 	.word	0x080085bc
 8005268:	080085c8 	.word	0x080085c8
 800526c:	080085d0 	.word	0x080085d0
 8005270:	080085e0 	.word	0x080085e0
 8005274:	080085e8 	.word	0x080085e8
 8005278:	080085f0 	.word	0x080085f0
 800527c:	080085f8 	.word	0x080085f8

08005280 <atoi>:
 8005280:	220a      	movs	r2, #10
 8005282:	2100      	movs	r1, #0
 8005284:	f000 b916 	b.w	80054b4 <strtol>

08005288 <__libc_init_array>:
 8005288:	b570      	push	{r4, r5, r6, lr}
 800528a:	4e0d      	ldr	r6, [pc, #52]	; (80052c0 <__libc_init_array+0x38>)
 800528c:	4c0d      	ldr	r4, [pc, #52]	; (80052c4 <__libc_init_array+0x3c>)
 800528e:	1ba4      	subs	r4, r4, r6
 8005290:	10a4      	asrs	r4, r4, #2
 8005292:	2500      	movs	r5, #0
 8005294:	42a5      	cmp	r5, r4
 8005296:	d109      	bne.n	80052ac <__libc_init_array+0x24>
 8005298:	4e0b      	ldr	r6, [pc, #44]	; (80052c8 <__libc_init_array+0x40>)
 800529a:	4c0c      	ldr	r4, [pc, #48]	; (80052cc <__libc_init_array+0x44>)
 800529c:	f000 fc98 	bl	8005bd0 <_init>
 80052a0:	1ba4      	subs	r4, r4, r6
 80052a2:	10a4      	asrs	r4, r4, #2
 80052a4:	2500      	movs	r5, #0
 80052a6:	42a5      	cmp	r5, r4
 80052a8:	d105      	bne.n	80052b6 <__libc_init_array+0x2e>
 80052aa:	bd70      	pop	{r4, r5, r6, pc}
 80052ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052b0:	4798      	blx	r3
 80052b2:	3501      	adds	r5, #1
 80052b4:	e7ee      	b.n	8005294 <__libc_init_array+0xc>
 80052b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80052ba:	4798      	blx	r3
 80052bc:	3501      	adds	r5, #1
 80052be:	e7f2      	b.n	80052a6 <__libc_init_array+0x1e>
 80052c0:	0800870c 	.word	0x0800870c
 80052c4:	0800870c 	.word	0x0800870c
 80052c8:	0800870c 	.word	0x0800870c
 80052cc:	08008710 	.word	0x08008710

080052d0 <memcpy>:
 80052d0:	b510      	push	{r4, lr}
 80052d2:	1e43      	subs	r3, r0, #1
 80052d4:	440a      	add	r2, r1
 80052d6:	4291      	cmp	r1, r2
 80052d8:	d100      	bne.n	80052dc <memcpy+0xc>
 80052da:	bd10      	pop	{r4, pc}
 80052dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052e4:	e7f7      	b.n	80052d6 <memcpy+0x6>

080052e6 <memset>:
 80052e6:	4402      	add	r2, r0
 80052e8:	4603      	mov	r3, r0
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d100      	bne.n	80052f0 <memset+0xa>
 80052ee:	4770      	bx	lr
 80052f0:	f803 1b01 	strb.w	r1, [r3], #1
 80052f4:	e7f9      	b.n	80052ea <memset+0x4>

080052f6 <strcpy>:
 80052f6:	4603      	mov	r3, r0
 80052f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052fc:	f803 2b01 	strb.w	r2, [r3], #1
 8005300:	2a00      	cmp	r2, #0
 8005302:	d1f9      	bne.n	80052f8 <strcpy+0x2>
 8005304:	4770      	bx	lr
	...

08005308 <strtok>:
 8005308:	4b14      	ldr	r3, [pc, #80]	; (800535c <strtok+0x54>)
 800530a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800530e:	681d      	ldr	r5, [r3, #0]
 8005310:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
 8005314:	4606      	mov	r6, r0
 8005316:	460f      	mov	r7, r1
 8005318:	b9bc      	cbnz	r4, 800534a <strtok+0x42>
 800531a:	2050      	movs	r0, #80	; 0x50
 800531c:	f000 f8e4 	bl	80054e8 <malloc>
 8005320:	f8c5 00e8 	str.w	r0, [r5, #232]	; 0xe8
 8005324:	6004      	str	r4, [r0, #0]
 8005326:	6044      	str	r4, [r0, #4]
 8005328:	6084      	str	r4, [r0, #8]
 800532a:	60c4      	str	r4, [r0, #12]
 800532c:	6104      	str	r4, [r0, #16]
 800532e:	6144      	str	r4, [r0, #20]
 8005330:	6184      	str	r4, [r0, #24]
 8005332:	6284      	str	r4, [r0, #40]	; 0x28
 8005334:	62c4      	str	r4, [r0, #44]	; 0x2c
 8005336:	6304      	str	r4, [r0, #48]	; 0x30
 8005338:	6344      	str	r4, [r0, #52]	; 0x34
 800533a:	6384      	str	r4, [r0, #56]	; 0x38
 800533c:	63c4      	str	r4, [r0, #60]	; 0x3c
 800533e:	6404      	str	r4, [r0, #64]	; 0x40
 8005340:	6444      	str	r4, [r0, #68]	; 0x44
 8005342:	6484      	str	r4, [r0, #72]	; 0x48
 8005344:	64c4      	str	r4, [r0, #76]	; 0x4c
 8005346:	7704      	strb	r4, [r0, #28]
 8005348:	6244      	str	r4, [r0, #36]	; 0x24
 800534a:	f8d5 20e8 	ldr.w	r2, [r5, #232]	; 0xe8
 800534e:	4639      	mov	r1, r7
 8005350:	4630      	mov	r0, r6
 8005352:	2301      	movs	r3, #1
 8005354:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005358:	f000 b802 	b.w	8005360 <__strtok_r>
 800535c:	20000010 	.word	0x20000010

08005360 <__strtok_r>:
 8005360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005362:	b918      	cbnz	r0, 800536c <__strtok_r+0xc>
 8005364:	6810      	ldr	r0, [r2, #0]
 8005366:	b908      	cbnz	r0, 800536c <__strtok_r+0xc>
 8005368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800536a:	4620      	mov	r0, r4
 800536c:	4604      	mov	r4, r0
 800536e:	460f      	mov	r7, r1
 8005370:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005374:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005378:	b91e      	cbnz	r6, 8005382 <__strtok_r+0x22>
 800537a:	b965      	cbnz	r5, 8005396 <__strtok_r+0x36>
 800537c:	6015      	str	r5, [r2, #0]
 800537e:	4628      	mov	r0, r5
 8005380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005382:	42b5      	cmp	r5, r6
 8005384:	d1f6      	bne.n	8005374 <__strtok_r+0x14>
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1ef      	bne.n	800536a <__strtok_r+0xa>
 800538a:	6014      	str	r4, [r2, #0]
 800538c:	7003      	strb	r3, [r0, #0]
 800538e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005390:	461c      	mov	r4, r3
 8005392:	e00c      	b.n	80053ae <__strtok_r+0x4e>
 8005394:	b915      	cbnz	r5, 800539c <__strtok_r+0x3c>
 8005396:	f814 3b01 	ldrb.w	r3, [r4], #1
 800539a:	460e      	mov	r6, r1
 800539c:	f816 5b01 	ldrb.w	r5, [r6], #1
 80053a0:	42ab      	cmp	r3, r5
 80053a2:	d1f7      	bne.n	8005394 <__strtok_r+0x34>
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0f3      	beq.n	8005390 <__strtok_r+0x30>
 80053a8:	2300      	movs	r3, #0
 80053aa:	f804 3c01 	strb.w	r3, [r4, #-1]
 80053ae:	6014      	str	r4, [r2, #0]
 80053b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080053b2 <_strtol_l.isra.0>:
 80053b2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b6:	4680      	mov	r8, r0
 80053b8:	4689      	mov	r9, r1
 80053ba:	4692      	mov	sl, r2
 80053bc:	461f      	mov	r7, r3
 80053be:	468b      	mov	fp, r1
 80053c0:	465d      	mov	r5, fp
 80053c2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80053c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80053c8:	f000 f88a 	bl	80054e0 <__locale_ctype_ptr_l>
 80053cc:	4420      	add	r0, r4
 80053ce:	7846      	ldrb	r6, [r0, #1]
 80053d0:	f016 0608 	ands.w	r6, r6, #8
 80053d4:	d10b      	bne.n	80053ee <_strtol_l.isra.0+0x3c>
 80053d6:	2c2d      	cmp	r4, #45	; 0x2d
 80053d8:	d10b      	bne.n	80053f2 <_strtol_l.isra.0+0x40>
 80053da:	782c      	ldrb	r4, [r5, #0]
 80053dc:	2601      	movs	r6, #1
 80053de:	f10b 0502 	add.w	r5, fp, #2
 80053e2:	b167      	cbz	r7, 80053fe <_strtol_l.isra.0+0x4c>
 80053e4:	2f10      	cmp	r7, #16
 80053e6:	d114      	bne.n	8005412 <_strtol_l.isra.0+0x60>
 80053e8:	2c30      	cmp	r4, #48	; 0x30
 80053ea:	d00a      	beq.n	8005402 <_strtol_l.isra.0+0x50>
 80053ec:	e011      	b.n	8005412 <_strtol_l.isra.0+0x60>
 80053ee:	46ab      	mov	fp, r5
 80053f0:	e7e6      	b.n	80053c0 <_strtol_l.isra.0+0xe>
 80053f2:	2c2b      	cmp	r4, #43	; 0x2b
 80053f4:	bf04      	itt	eq
 80053f6:	782c      	ldrbeq	r4, [r5, #0]
 80053f8:	f10b 0502 	addeq.w	r5, fp, #2
 80053fc:	e7f1      	b.n	80053e2 <_strtol_l.isra.0+0x30>
 80053fe:	2c30      	cmp	r4, #48	; 0x30
 8005400:	d127      	bne.n	8005452 <_strtol_l.isra.0+0xa0>
 8005402:	782b      	ldrb	r3, [r5, #0]
 8005404:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005408:	2b58      	cmp	r3, #88	; 0x58
 800540a:	d14b      	bne.n	80054a4 <_strtol_l.isra.0+0xf2>
 800540c:	786c      	ldrb	r4, [r5, #1]
 800540e:	2710      	movs	r7, #16
 8005410:	3502      	adds	r5, #2
 8005412:	2e00      	cmp	r6, #0
 8005414:	bf0c      	ite	eq
 8005416:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800541a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800541e:	2200      	movs	r2, #0
 8005420:	fbb1 fef7 	udiv	lr, r1, r7
 8005424:	4610      	mov	r0, r2
 8005426:	fb07 1c1e 	mls	ip, r7, lr, r1
 800542a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800542e:	2b09      	cmp	r3, #9
 8005430:	d811      	bhi.n	8005456 <_strtol_l.isra.0+0xa4>
 8005432:	461c      	mov	r4, r3
 8005434:	42a7      	cmp	r7, r4
 8005436:	dd1d      	ble.n	8005474 <_strtol_l.isra.0+0xc2>
 8005438:	1c53      	adds	r3, r2, #1
 800543a:	d007      	beq.n	800544c <_strtol_l.isra.0+0x9a>
 800543c:	4586      	cmp	lr, r0
 800543e:	d316      	bcc.n	800546e <_strtol_l.isra.0+0xbc>
 8005440:	d101      	bne.n	8005446 <_strtol_l.isra.0+0x94>
 8005442:	45a4      	cmp	ip, r4
 8005444:	db13      	blt.n	800546e <_strtol_l.isra.0+0xbc>
 8005446:	fb00 4007 	mla	r0, r0, r7, r4
 800544a:	2201      	movs	r2, #1
 800544c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005450:	e7eb      	b.n	800542a <_strtol_l.isra.0+0x78>
 8005452:	270a      	movs	r7, #10
 8005454:	e7dd      	b.n	8005412 <_strtol_l.isra.0+0x60>
 8005456:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800545a:	2b19      	cmp	r3, #25
 800545c:	d801      	bhi.n	8005462 <_strtol_l.isra.0+0xb0>
 800545e:	3c37      	subs	r4, #55	; 0x37
 8005460:	e7e8      	b.n	8005434 <_strtol_l.isra.0+0x82>
 8005462:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005466:	2b19      	cmp	r3, #25
 8005468:	d804      	bhi.n	8005474 <_strtol_l.isra.0+0xc2>
 800546a:	3c57      	subs	r4, #87	; 0x57
 800546c:	e7e2      	b.n	8005434 <_strtol_l.isra.0+0x82>
 800546e:	f04f 32ff 	mov.w	r2, #4294967295
 8005472:	e7eb      	b.n	800544c <_strtol_l.isra.0+0x9a>
 8005474:	1c53      	adds	r3, r2, #1
 8005476:	d108      	bne.n	800548a <_strtol_l.isra.0+0xd8>
 8005478:	2322      	movs	r3, #34	; 0x22
 800547a:	f8c8 3000 	str.w	r3, [r8]
 800547e:	4608      	mov	r0, r1
 8005480:	f1ba 0f00 	cmp.w	sl, #0
 8005484:	d107      	bne.n	8005496 <_strtol_l.isra.0+0xe4>
 8005486:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800548a:	b106      	cbz	r6, 800548e <_strtol_l.isra.0+0xdc>
 800548c:	4240      	negs	r0, r0
 800548e:	f1ba 0f00 	cmp.w	sl, #0
 8005492:	d00c      	beq.n	80054ae <_strtol_l.isra.0+0xfc>
 8005494:	b122      	cbz	r2, 80054a0 <_strtol_l.isra.0+0xee>
 8005496:	3d01      	subs	r5, #1
 8005498:	f8ca 5000 	str.w	r5, [sl]
 800549c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054a0:	464d      	mov	r5, r9
 80054a2:	e7f9      	b.n	8005498 <_strtol_l.isra.0+0xe6>
 80054a4:	2430      	movs	r4, #48	; 0x30
 80054a6:	2f00      	cmp	r7, #0
 80054a8:	d1b3      	bne.n	8005412 <_strtol_l.isra.0+0x60>
 80054aa:	2708      	movs	r7, #8
 80054ac:	e7b1      	b.n	8005412 <_strtol_l.isra.0+0x60>
 80054ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080054b4 <strtol>:
 80054b4:	4b08      	ldr	r3, [pc, #32]	; (80054d8 <strtol+0x24>)
 80054b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054b8:	681c      	ldr	r4, [r3, #0]
 80054ba:	4d08      	ldr	r5, [pc, #32]	; (80054dc <strtol+0x28>)
 80054bc:	6a23      	ldr	r3, [r4, #32]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	bf08      	it	eq
 80054c2:	462b      	moveq	r3, r5
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	4613      	mov	r3, r2
 80054c8:	460a      	mov	r2, r1
 80054ca:	4601      	mov	r1, r0
 80054cc:	4620      	mov	r0, r4
 80054ce:	f7ff ff70 	bl	80053b2 <_strtol_l.isra.0>
 80054d2:	b003      	add	sp, #12
 80054d4:	bd30      	pop	{r4, r5, pc}
 80054d6:	bf00      	nop
 80054d8:	20000010 	.word	0x20000010
 80054dc:	20000104 	.word	0x20000104

080054e0 <__locale_ctype_ptr_l>:
 80054e0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80054e4:	4770      	bx	lr
	...

080054e8 <malloc>:
 80054e8:	4b02      	ldr	r3, [pc, #8]	; (80054f4 <malloc+0xc>)
 80054ea:	4601      	mov	r1, r0
 80054ec:	6818      	ldr	r0, [r3, #0]
 80054ee:	f000 b803 	b.w	80054f8 <_malloc_r>
 80054f2:	bf00      	nop
 80054f4:	20000010 	.word	0x20000010

080054f8 <_malloc_r>:
 80054f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fc:	f101 040b 	add.w	r4, r1, #11
 8005500:	2c16      	cmp	r4, #22
 8005502:	4681      	mov	r9, r0
 8005504:	d907      	bls.n	8005516 <_malloc_r+0x1e>
 8005506:	f034 0407 	bics.w	r4, r4, #7
 800550a:	d505      	bpl.n	8005518 <_malloc_r+0x20>
 800550c:	230c      	movs	r3, #12
 800550e:	f8c9 3000 	str.w	r3, [r9]
 8005512:	2600      	movs	r6, #0
 8005514:	e131      	b.n	800577a <_malloc_r+0x282>
 8005516:	2410      	movs	r4, #16
 8005518:	428c      	cmp	r4, r1
 800551a:	d3f7      	bcc.n	800550c <_malloc_r+0x14>
 800551c:	4648      	mov	r0, r9
 800551e:	f000 fa0b 	bl	8005938 <__malloc_lock>
 8005522:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8005526:	4d9c      	ldr	r5, [pc, #624]	; (8005798 <_malloc_r+0x2a0>)
 8005528:	d236      	bcs.n	8005598 <_malloc_r+0xa0>
 800552a:	f104 0208 	add.w	r2, r4, #8
 800552e:	442a      	add	r2, r5
 8005530:	f1a2 0108 	sub.w	r1, r2, #8
 8005534:	6856      	ldr	r6, [r2, #4]
 8005536:	428e      	cmp	r6, r1
 8005538:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800553c:	d102      	bne.n	8005544 <_malloc_r+0x4c>
 800553e:	68d6      	ldr	r6, [r2, #12]
 8005540:	42b2      	cmp	r2, r6
 8005542:	d010      	beq.n	8005566 <_malloc_r+0x6e>
 8005544:	6873      	ldr	r3, [r6, #4]
 8005546:	68f2      	ldr	r2, [r6, #12]
 8005548:	68b1      	ldr	r1, [r6, #8]
 800554a:	f023 0303 	bic.w	r3, r3, #3
 800554e:	60ca      	str	r2, [r1, #12]
 8005550:	4433      	add	r3, r6
 8005552:	6091      	str	r1, [r2, #8]
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	f042 0201 	orr.w	r2, r2, #1
 800555a:	605a      	str	r2, [r3, #4]
 800555c:	4648      	mov	r0, r9
 800555e:	f000 f9f1 	bl	8005944 <__malloc_unlock>
 8005562:	3608      	adds	r6, #8
 8005564:	e109      	b.n	800577a <_malloc_r+0x282>
 8005566:	3302      	adds	r3, #2
 8005568:	4a8c      	ldr	r2, [pc, #560]	; (800579c <_malloc_r+0x2a4>)
 800556a:	692e      	ldr	r6, [r5, #16]
 800556c:	4296      	cmp	r6, r2
 800556e:	4611      	mov	r1, r2
 8005570:	d06d      	beq.n	800564e <_malloc_r+0x156>
 8005572:	6870      	ldr	r0, [r6, #4]
 8005574:	f020 0003 	bic.w	r0, r0, #3
 8005578:	1b07      	subs	r7, r0, r4
 800557a:	2f0f      	cmp	r7, #15
 800557c:	dd47      	ble.n	800560e <_malloc_r+0x116>
 800557e:	1933      	adds	r3, r6, r4
 8005580:	f044 0401 	orr.w	r4, r4, #1
 8005584:	6074      	str	r4, [r6, #4]
 8005586:	616b      	str	r3, [r5, #20]
 8005588:	612b      	str	r3, [r5, #16]
 800558a:	60da      	str	r2, [r3, #12]
 800558c:	609a      	str	r2, [r3, #8]
 800558e:	f047 0201 	orr.w	r2, r7, #1
 8005592:	605a      	str	r2, [r3, #4]
 8005594:	5037      	str	r7, [r6, r0]
 8005596:	e7e1      	b.n	800555c <_malloc_r+0x64>
 8005598:	0a63      	lsrs	r3, r4, #9
 800559a:	d02a      	beq.n	80055f2 <_malloc_r+0xfa>
 800559c:	2b04      	cmp	r3, #4
 800559e:	d812      	bhi.n	80055c6 <_malloc_r+0xce>
 80055a0:	09a3      	lsrs	r3, r4, #6
 80055a2:	3338      	adds	r3, #56	; 0x38
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 80055aa:	f1a2 0008 	sub.w	r0, r2, #8
 80055ae:	6856      	ldr	r6, [r2, #4]
 80055b0:	4286      	cmp	r6, r0
 80055b2:	d006      	beq.n	80055c2 <_malloc_r+0xca>
 80055b4:	6872      	ldr	r2, [r6, #4]
 80055b6:	f022 0203 	bic.w	r2, r2, #3
 80055ba:	1b11      	subs	r1, r2, r4
 80055bc:	290f      	cmp	r1, #15
 80055be:	dd1c      	ble.n	80055fa <_malloc_r+0x102>
 80055c0:	3b01      	subs	r3, #1
 80055c2:	3301      	adds	r3, #1
 80055c4:	e7d0      	b.n	8005568 <_malloc_r+0x70>
 80055c6:	2b14      	cmp	r3, #20
 80055c8:	d801      	bhi.n	80055ce <_malloc_r+0xd6>
 80055ca:	335b      	adds	r3, #91	; 0x5b
 80055cc:	e7ea      	b.n	80055a4 <_malloc_r+0xac>
 80055ce:	2b54      	cmp	r3, #84	; 0x54
 80055d0:	d802      	bhi.n	80055d8 <_malloc_r+0xe0>
 80055d2:	0b23      	lsrs	r3, r4, #12
 80055d4:	336e      	adds	r3, #110	; 0x6e
 80055d6:	e7e5      	b.n	80055a4 <_malloc_r+0xac>
 80055d8:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80055dc:	d802      	bhi.n	80055e4 <_malloc_r+0xec>
 80055de:	0be3      	lsrs	r3, r4, #15
 80055e0:	3377      	adds	r3, #119	; 0x77
 80055e2:	e7df      	b.n	80055a4 <_malloc_r+0xac>
 80055e4:	f240 5254 	movw	r2, #1364	; 0x554
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d804      	bhi.n	80055f6 <_malloc_r+0xfe>
 80055ec:	0ca3      	lsrs	r3, r4, #18
 80055ee:	337c      	adds	r3, #124	; 0x7c
 80055f0:	e7d8      	b.n	80055a4 <_malloc_r+0xac>
 80055f2:	233f      	movs	r3, #63	; 0x3f
 80055f4:	e7d6      	b.n	80055a4 <_malloc_r+0xac>
 80055f6:	237e      	movs	r3, #126	; 0x7e
 80055f8:	e7d4      	b.n	80055a4 <_malloc_r+0xac>
 80055fa:	2900      	cmp	r1, #0
 80055fc:	68f1      	ldr	r1, [r6, #12]
 80055fe:	db04      	blt.n	800560a <_malloc_r+0x112>
 8005600:	68b3      	ldr	r3, [r6, #8]
 8005602:	60d9      	str	r1, [r3, #12]
 8005604:	608b      	str	r3, [r1, #8]
 8005606:	18b3      	adds	r3, r6, r2
 8005608:	e7a4      	b.n	8005554 <_malloc_r+0x5c>
 800560a:	460e      	mov	r6, r1
 800560c:	e7d0      	b.n	80055b0 <_malloc_r+0xb8>
 800560e:	2f00      	cmp	r7, #0
 8005610:	616a      	str	r2, [r5, #20]
 8005612:	612a      	str	r2, [r5, #16]
 8005614:	db05      	blt.n	8005622 <_malloc_r+0x12a>
 8005616:	4430      	add	r0, r6
 8005618:	6843      	ldr	r3, [r0, #4]
 800561a:	f043 0301 	orr.w	r3, r3, #1
 800561e:	6043      	str	r3, [r0, #4]
 8005620:	e79c      	b.n	800555c <_malloc_r+0x64>
 8005622:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005626:	d244      	bcs.n	80056b2 <_malloc_r+0x1ba>
 8005628:	08c0      	lsrs	r0, r0, #3
 800562a:	1087      	asrs	r7, r0, #2
 800562c:	2201      	movs	r2, #1
 800562e:	fa02 f707 	lsl.w	r7, r2, r7
 8005632:	686a      	ldr	r2, [r5, #4]
 8005634:	3001      	adds	r0, #1
 8005636:	433a      	orrs	r2, r7
 8005638:	606a      	str	r2, [r5, #4]
 800563a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800563e:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8005642:	60b7      	str	r7, [r6, #8]
 8005644:	3a08      	subs	r2, #8
 8005646:	60f2      	str	r2, [r6, #12]
 8005648:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 800564c:	60fe      	str	r6, [r7, #12]
 800564e:	2001      	movs	r0, #1
 8005650:	109a      	asrs	r2, r3, #2
 8005652:	fa00 f202 	lsl.w	r2, r0, r2
 8005656:	6868      	ldr	r0, [r5, #4]
 8005658:	4282      	cmp	r2, r0
 800565a:	f200 80a1 	bhi.w	80057a0 <_malloc_r+0x2a8>
 800565e:	4202      	tst	r2, r0
 8005660:	d106      	bne.n	8005670 <_malloc_r+0x178>
 8005662:	f023 0303 	bic.w	r3, r3, #3
 8005666:	0052      	lsls	r2, r2, #1
 8005668:	4202      	tst	r2, r0
 800566a:	f103 0304 	add.w	r3, r3, #4
 800566e:	d0fa      	beq.n	8005666 <_malloc_r+0x16e>
 8005670:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8005674:	46e0      	mov	r8, ip
 8005676:	469e      	mov	lr, r3
 8005678:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800567c:	4546      	cmp	r6, r8
 800567e:	d153      	bne.n	8005728 <_malloc_r+0x230>
 8005680:	f10e 0e01 	add.w	lr, lr, #1
 8005684:	f01e 0f03 	tst.w	lr, #3
 8005688:	f108 0808 	add.w	r8, r8, #8
 800568c:	d1f4      	bne.n	8005678 <_malloc_r+0x180>
 800568e:	0798      	lsls	r0, r3, #30
 8005690:	d179      	bne.n	8005786 <_malloc_r+0x28e>
 8005692:	686b      	ldr	r3, [r5, #4]
 8005694:	ea23 0302 	bic.w	r3, r3, r2
 8005698:	606b      	str	r3, [r5, #4]
 800569a:	6868      	ldr	r0, [r5, #4]
 800569c:	0052      	lsls	r2, r2, #1
 800569e:	4282      	cmp	r2, r0
 80056a0:	d87e      	bhi.n	80057a0 <_malloc_r+0x2a8>
 80056a2:	2a00      	cmp	r2, #0
 80056a4:	d07c      	beq.n	80057a0 <_malloc_r+0x2a8>
 80056a6:	4673      	mov	r3, lr
 80056a8:	4202      	tst	r2, r0
 80056aa:	d1e1      	bne.n	8005670 <_malloc_r+0x178>
 80056ac:	3304      	adds	r3, #4
 80056ae:	0052      	lsls	r2, r2, #1
 80056b0:	e7fa      	b.n	80056a8 <_malloc_r+0x1b0>
 80056b2:	0a42      	lsrs	r2, r0, #9
 80056b4:	2a04      	cmp	r2, #4
 80056b6:	d815      	bhi.n	80056e4 <_malloc_r+0x1ec>
 80056b8:	0982      	lsrs	r2, r0, #6
 80056ba:	3238      	adds	r2, #56	; 0x38
 80056bc:	1c57      	adds	r7, r2, #1
 80056be:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80056c2:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80056c6:	45be      	cmp	lr, r7
 80056c8:	d126      	bne.n	8005718 <_malloc_r+0x220>
 80056ca:	2001      	movs	r0, #1
 80056cc:	1092      	asrs	r2, r2, #2
 80056ce:	fa00 f202 	lsl.w	r2, r0, r2
 80056d2:	6868      	ldr	r0, [r5, #4]
 80056d4:	4310      	orrs	r0, r2
 80056d6:	6068      	str	r0, [r5, #4]
 80056d8:	f8c6 e00c 	str.w	lr, [r6, #12]
 80056dc:	60b7      	str	r7, [r6, #8]
 80056de:	f8ce 6008 	str.w	r6, [lr, #8]
 80056e2:	e7b3      	b.n	800564c <_malloc_r+0x154>
 80056e4:	2a14      	cmp	r2, #20
 80056e6:	d801      	bhi.n	80056ec <_malloc_r+0x1f4>
 80056e8:	325b      	adds	r2, #91	; 0x5b
 80056ea:	e7e7      	b.n	80056bc <_malloc_r+0x1c4>
 80056ec:	2a54      	cmp	r2, #84	; 0x54
 80056ee:	d802      	bhi.n	80056f6 <_malloc_r+0x1fe>
 80056f0:	0b02      	lsrs	r2, r0, #12
 80056f2:	326e      	adds	r2, #110	; 0x6e
 80056f4:	e7e2      	b.n	80056bc <_malloc_r+0x1c4>
 80056f6:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80056fa:	d802      	bhi.n	8005702 <_malloc_r+0x20a>
 80056fc:	0bc2      	lsrs	r2, r0, #15
 80056fe:	3277      	adds	r2, #119	; 0x77
 8005700:	e7dc      	b.n	80056bc <_malloc_r+0x1c4>
 8005702:	f240 5754 	movw	r7, #1364	; 0x554
 8005706:	42ba      	cmp	r2, r7
 8005708:	bf9a      	itte	ls
 800570a:	0c82      	lsrls	r2, r0, #18
 800570c:	327c      	addls	r2, #124	; 0x7c
 800570e:	227e      	movhi	r2, #126	; 0x7e
 8005710:	e7d4      	b.n	80056bc <_malloc_r+0x1c4>
 8005712:	68bf      	ldr	r7, [r7, #8]
 8005714:	45be      	cmp	lr, r7
 8005716:	d004      	beq.n	8005722 <_malloc_r+0x22a>
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	f022 0203 	bic.w	r2, r2, #3
 800571e:	4290      	cmp	r0, r2
 8005720:	d3f7      	bcc.n	8005712 <_malloc_r+0x21a>
 8005722:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8005726:	e7d7      	b.n	80056d8 <_malloc_r+0x1e0>
 8005728:	6870      	ldr	r0, [r6, #4]
 800572a:	68f7      	ldr	r7, [r6, #12]
 800572c:	f020 0003 	bic.w	r0, r0, #3
 8005730:	eba0 0a04 	sub.w	sl, r0, r4
 8005734:	f1ba 0f0f 	cmp.w	sl, #15
 8005738:	dd10      	ble.n	800575c <_malloc_r+0x264>
 800573a:	68b2      	ldr	r2, [r6, #8]
 800573c:	1933      	adds	r3, r6, r4
 800573e:	f044 0401 	orr.w	r4, r4, #1
 8005742:	6074      	str	r4, [r6, #4]
 8005744:	60d7      	str	r7, [r2, #12]
 8005746:	60ba      	str	r2, [r7, #8]
 8005748:	f04a 0201 	orr.w	r2, sl, #1
 800574c:	616b      	str	r3, [r5, #20]
 800574e:	612b      	str	r3, [r5, #16]
 8005750:	60d9      	str	r1, [r3, #12]
 8005752:	6099      	str	r1, [r3, #8]
 8005754:	605a      	str	r2, [r3, #4]
 8005756:	f846 a000 	str.w	sl, [r6, r0]
 800575a:	e6ff      	b.n	800555c <_malloc_r+0x64>
 800575c:	f1ba 0f00 	cmp.w	sl, #0
 8005760:	db0f      	blt.n	8005782 <_malloc_r+0x28a>
 8005762:	4430      	add	r0, r6
 8005764:	6843      	ldr	r3, [r0, #4]
 8005766:	f043 0301 	orr.w	r3, r3, #1
 800576a:	6043      	str	r3, [r0, #4]
 800576c:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8005770:	4648      	mov	r0, r9
 8005772:	60df      	str	r7, [r3, #12]
 8005774:	60bb      	str	r3, [r7, #8]
 8005776:	f000 f8e5 	bl	8005944 <__malloc_unlock>
 800577a:	4630      	mov	r0, r6
 800577c:	b003      	add	sp, #12
 800577e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005782:	463e      	mov	r6, r7
 8005784:	e77a      	b.n	800567c <_malloc_r+0x184>
 8005786:	f85c 0908 	ldr.w	r0, [ip], #-8
 800578a:	4584      	cmp	ip, r0
 800578c:	f103 33ff 	add.w	r3, r3, #4294967295
 8005790:	f43f af7d 	beq.w	800568e <_malloc_r+0x196>
 8005794:	e781      	b.n	800569a <_malloc_r+0x1a2>
 8005796:	bf00      	nop
 8005798:	20000270 	.word	0x20000270
 800579c:	20000278 	.word	0x20000278
 80057a0:	f8d5 b008 	ldr.w	fp, [r5, #8]
 80057a4:	f8db 6004 	ldr.w	r6, [fp, #4]
 80057a8:	f026 0603 	bic.w	r6, r6, #3
 80057ac:	42b4      	cmp	r4, r6
 80057ae:	d803      	bhi.n	80057b8 <_malloc_r+0x2c0>
 80057b0:	1b33      	subs	r3, r6, r4
 80057b2:	2b0f      	cmp	r3, #15
 80057b4:	f300 8096 	bgt.w	80058e4 <_malloc_r+0x3ec>
 80057b8:	4a4f      	ldr	r2, [pc, #316]	; (80058f8 <_malloc_r+0x400>)
 80057ba:	6817      	ldr	r7, [r2, #0]
 80057bc:	4a4f      	ldr	r2, [pc, #316]	; (80058fc <_malloc_r+0x404>)
 80057be:	6811      	ldr	r1, [r2, #0]
 80057c0:	3710      	adds	r7, #16
 80057c2:	3101      	adds	r1, #1
 80057c4:	eb0b 0306 	add.w	r3, fp, r6
 80057c8:	4427      	add	r7, r4
 80057ca:	d005      	beq.n	80057d8 <_malloc_r+0x2e0>
 80057cc:	494c      	ldr	r1, [pc, #304]	; (8005900 <_malloc_r+0x408>)
 80057ce:	3901      	subs	r1, #1
 80057d0:	440f      	add	r7, r1
 80057d2:	3101      	adds	r1, #1
 80057d4:	4249      	negs	r1, r1
 80057d6:	400f      	ands	r7, r1
 80057d8:	4639      	mov	r1, r7
 80057da:	4648      	mov	r0, r9
 80057dc:	9201      	str	r2, [sp, #4]
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	f000 f8b6 	bl	8005950 <_sbrk_r>
 80057e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80057e8:	4680      	mov	r8, r0
 80057ea:	d056      	beq.n	800589a <_malloc_r+0x3a2>
 80057ec:	9b00      	ldr	r3, [sp, #0]
 80057ee:	9a01      	ldr	r2, [sp, #4]
 80057f0:	4283      	cmp	r3, r0
 80057f2:	d901      	bls.n	80057f8 <_malloc_r+0x300>
 80057f4:	45ab      	cmp	fp, r5
 80057f6:	d150      	bne.n	800589a <_malloc_r+0x3a2>
 80057f8:	4842      	ldr	r0, [pc, #264]	; (8005904 <_malloc_r+0x40c>)
 80057fa:	6801      	ldr	r1, [r0, #0]
 80057fc:	4543      	cmp	r3, r8
 80057fe:	eb07 0e01 	add.w	lr, r7, r1
 8005802:	f8c0 e000 	str.w	lr, [r0]
 8005806:	4940      	ldr	r1, [pc, #256]	; (8005908 <_malloc_r+0x410>)
 8005808:	4682      	mov	sl, r0
 800580a:	d113      	bne.n	8005834 <_malloc_r+0x33c>
 800580c:	420b      	tst	r3, r1
 800580e:	d111      	bne.n	8005834 <_malloc_r+0x33c>
 8005810:	68ab      	ldr	r3, [r5, #8]
 8005812:	443e      	add	r6, r7
 8005814:	f046 0601 	orr.w	r6, r6, #1
 8005818:	605e      	str	r6, [r3, #4]
 800581a:	4a3c      	ldr	r2, [pc, #240]	; (800590c <_malloc_r+0x414>)
 800581c:	f8da 3000 	ldr.w	r3, [sl]
 8005820:	6811      	ldr	r1, [r2, #0]
 8005822:	428b      	cmp	r3, r1
 8005824:	bf88      	it	hi
 8005826:	6013      	strhi	r3, [r2, #0]
 8005828:	4a39      	ldr	r2, [pc, #228]	; (8005910 <_malloc_r+0x418>)
 800582a:	6811      	ldr	r1, [r2, #0]
 800582c:	428b      	cmp	r3, r1
 800582e:	bf88      	it	hi
 8005830:	6013      	strhi	r3, [r2, #0]
 8005832:	e032      	b.n	800589a <_malloc_r+0x3a2>
 8005834:	6810      	ldr	r0, [r2, #0]
 8005836:	3001      	adds	r0, #1
 8005838:	bf1b      	ittet	ne
 800583a:	eba8 0303 	subne.w	r3, r8, r3
 800583e:	4473      	addne	r3, lr
 8005840:	f8c2 8000 	streq.w	r8, [r2]
 8005844:	f8ca 3000 	strne.w	r3, [sl]
 8005848:	f018 0007 	ands.w	r0, r8, #7
 800584c:	bf1c      	itt	ne
 800584e:	f1c0 0008 	rsbne	r0, r0, #8
 8005852:	4480      	addne	r8, r0
 8005854:	4b2a      	ldr	r3, [pc, #168]	; (8005900 <_malloc_r+0x408>)
 8005856:	4447      	add	r7, r8
 8005858:	4418      	add	r0, r3
 800585a:	400f      	ands	r7, r1
 800585c:	1bc7      	subs	r7, r0, r7
 800585e:	4639      	mov	r1, r7
 8005860:	4648      	mov	r0, r9
 8005862:	f000 f875 	bl	8005950 <_sbrk_r>
 8005866:	1c43      	adds	r3, r0, #1
 8005868:	bf08      	it	eq
 800586a:	4640      	moveq	r0, r8
 800586c:	f8da 3000 	ldr.w	r3, [sl]
 8005870:	f8c5 8008 	str.w	r8, [r5, #8]
 8005874:	bf08      	it	eq
 8005876:	2700      	moveq	r7, #0
 8005878:	eba0 0008 	sub.w	r0, r0, r8
 800587c:	443b      	add	r3, r7
 800587e:	4407      	add	r7, r0
 8005880:	f047 0701 	orr.w	r7, r7, #1
 8005884:	45ab      	cmp	fp, r5
 8005886:	f8ca 3000 	str.w	r3, [sl]
 800588a:	f8c8 7004 	str.w	r7, [r8, #4]
 800588e:	d0c4      	beq.n	800581a <_malloc_r+0x322>
 8005890:	2e0f      	cmp	r6, #15
 8005892:	d810      	bhi.n	80058b6 <_malloc_r+0x3be>
 8005894:	2301      	movs	r3, #1
 8005896:	f8c8 3004 	str.w	r3, [r8, #4]
 800589a:	68ab      	ldr	r3, [r5, #8]
 800589c:	685a      	ldr	r2, [r3, #4]
 800589e:	f022 0203 	bic.w	r2, r2, #3
 80058a2:	4294      	cmp	r4, r2
 80058a4:	eba2 0304 	sub.w	r3, r2, r4
 80058a8:	d801      	bhi.n	80058ae <_malloc_r+0x3b6>
 80058aa:	2b0f      	cmp	r3, #15
 80058ac:	dc1a      	bgt.n	80058e4 <_malloc_r+0x3ec>
 80058ae:	4648      	mov	r0, r9
 80058b0:	f000 f848 	bl	8005944 <__malloc_unlock>
 80058b4:	e62d      	b.n	8005512 <_malloc_r+0x1a>
 80058b6:	f8db 3004 	ldr.w	r3, [fp, #4]
 80058ba:	3e0c      	subs	r6, #12
 80058bc:	f026 0607 	bic.w	r6, r6, #7
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	4333      	orrs	r3, r6
 80058c6:	f8cb 3004 	str.w	r3, [fp, #4]
 80058ca:	eb0b 0306 	add.w	r3, fp, r6
 80058ce:	2205      	movs	r2, #5
 80058d0:	2e0f      	cmp	r6, #15
 80058d2:	605a      	str	r2, [r3, #4]
 80058d4:	609a      	str	r2, [r3, #8]
 80058d6:	d9a0      	bls.n	800581a <_malloc_r+0x322>
 80058d8:	f10b 0108 	add.w	r1, fp, #8
 80058dc:	4648      	mov	r0, r9
 80058de:	f000 f8ab 	bl	8005a38 <_free_r>
 80058e2:	e79a      	b.n	800581a <_malloc_r+0x322>
 80058e4:	68ae      	ldr	r6, [r5, #8]
 80058e6:	f044 0201 	orr.w	r2, r4, #1
 80058ea:	4434      	add	r4, r6
 80058ec:	f043 0301 	orr.w	r3, r3, #1
 80058f0:	6072      	str	r2, [r6, #4]
 80058f2:	60ac      	str	r4, [r5, #8]
 80058f4:	6063      	str	r3, [r4, #4]
 80058f6:	e631      	b.n	800555c <_malloc_r+0x64>
 80058f8:	200006d0 	.word	0x200006d0
 80058fc:	20000678 	.word	0x20000678
 8005900:	00000080 	.word	0x00000080
 8005904:	200006a0 	.word	0x200006a0
 8005908:	0000007f 	.word	0x0000007f
 800590c:	200006c8 	.word	0x200006c8
 8005910:	200006cc 	.word	0x200006cc

08005914 <__ascii_mbtowc>:
 8005914:	b082      	sub	sp, #8
 8005916:	b901      	cbnz	r1, 800591a <__ascii_mbtowc+0x6>
 8005918:	a901      	add	r1, sp, #4
 800591a:	b142      	cbz	r2, 800592e <__ascii_mbtowc+0x1a>
 800591c:	b14b      	cbz	r3, 8005932 <__ascii_mbtowc+0x1e>
 800591e:	7813      	ldrb	r3, [r2, #0]
 8005920:	600b      	str	r3, [r1, #0]
 8005922:	7812      	ldrb	r2, [r2, #0]
 8005924:	1c10      	adds	r0, r2, #0
 8005926:	bf18      	it	ne
 8005928:	2001      	movne	r0, #1
 800592a:	b002      	add	sp, #8
 800592c:	4770      	bx	lr
 800592e:	4610      	mov	r0, r2
 8005930:	e7fb      	b.n	800592a <__ascii_mbtowc+0x16>
 8005932:	f06f 0001 	mvn.w	r0, #1
 8005936:	e7f8      	b.n	800592a <__ascii_mbtowc+0x16>

08005938 <__malloc_lock>:
 8005938:	4801      	ldr	r0, [pc, #4]	; (8005940 <__malloc_lock+0x8>)
 800593a:	f000 b939 	b.w	8005bb0 <__retarget_lock_acquire_recursive>
 800593e:	bf00      	nop
 8005940:	20013908 	.word	0x20013908

08005944 <__malloc_unlock>:
 8005944:	4801      	ldr	r0, [pc, #4]	; (800594c <__malloc_unlock+0x8>)
 8005946:	f000 b934 	b.w	8005bb2 <__retarget_lock_release_recursive>
 800594a:	bf00      	nop
 800594c:	20013908 	.word	0x20013908

08005950 <_sbrk_r>:
 8005950:	b538      	push	{r3, r4, r5, lr}
 8005952:	4c06      	ldr	r4, [pc, #24]	; (800596c <_sbrk_r+0x1c>)
 8005954:	2300      	movs	r3, #0
 8005956:	4605      	mov	r5, r0
 8005958:	4608      	mov	r0, r1
 800595a:	6023      	str	r3, [r4, #0]
 800595c:	f000 f92a 	bl	8005bb4 <_sbrk>
 8005960:	1c43      	adds	r3, r0, #1
 8005962:	d102      	bne.n	800596a <_sbrk_r+0x1a>
 8005964:	6823      	ldr	r3, [r4, #0]
 8005966:	b103      	cbz	r3, 800596a <_sbrk_r+0x1a>
 8005968:	602b      	str	r3, [r5, #0]
 800596a:	bd38      	pop	{r3, r4, r5, pc}
 800596c:	20013910 	.word	0x20013910

08005970 <__ascii_wctomb>:
 8005970:	b149      	cbz	r1, 8005986 <__ascii_wctomb+0x16>
 8005972:	2aff      	cmp	r2, #255	; 0xff
 8005974:	bf85      	ittet	hi
 8005976:	238a      	movhi	r3, #138	; 0x8a
 8005978:	6003      	strhi	r3, [r0, #0]
 800597a:	700a      	strbls	r2, [r1, #0]
 800597c:	f04f 30ff 	movhi.w	r0, #4294967295
 8005980:	bf98      	it	ls
 8005982:	2001      	movls	r0, #1
 8005984:	4770      	bx	lr
 8005986:	4608      	mov	r0, r1
 8005988:	4770      	bx	lr
	...

0800598c <_malloc_trim_r>:
 800598c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005990:	4f25      	ldr	r7, [pc, #148]	; (8005a28 <_malloc_trim_r+0x9c>)
 8005992:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8005a34 <_malloc_trim_r+0xa8>
 8005996:	4689      	mov	r9, r1
 8005998:	4606      	mov	r6, r0
 800599a:	f7ff ffcd 	bl	8005938 <__malloc_lock>
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	685d      	ldr	r5, [r3, #4]
 80059a2:	f1a8 0411 	sub.w	r4, r8, #17
 80059a6:	f025 0503 	bic.w	r5, r5, #3
 80059aa:	eba4 0409 	sub.w	r4, r4, r9
 80059ae:	442c      	add	r4, r5
 80059b0:	fbb4 f4f8 	udiv	r4, r4, r8
 80059b4:	3c01      	subs	r4, #1
 80059b6:	fb08 f404 	mul.w	r4, r8, r4
 80059ba:	4544      	cmp	r4, r8
 80059bc:	da05      	bge.n	80059ca <_malloc_trim_r+0x3e>
 80059be:	4630      	mov	r0, r6
 80059c0:	f7ff ffc0 	bl	8005944 <__malloc_unlock>
 80059c4:	2000      	movs	r0, #0
 80059c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059ca:	2100      	movs	r1, #0
 80059cc:	4630      	mov	r0, r6
 80059ce:	f7ff ffbf 	bl	8005950 <_sbrk_r>
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	442b      	add	r3, r5
 80059d6:	4298      	cmp	r0, r3
 80059d8:	d1f1      	bne.n	80059be <_malloc_trim_r+0x32>
 80059da:	4261      	negs	r1, r4
 80059dc:	4630      	mov	r0, r6
 80059de:	f7ff ffb7 	bl	8005950 <_sbrk_r>
 80059e2:	3001      	adds	r0, #1
 80059e4:	d110      	bne.n	8005a08 <_malloc_trim_r+0x7c>
 80059e6:	2100      	movs	r1, #0
 80059e8:	4630      	mov	r0, r6
 80059ea:	f7ff ffb1 	bl	8005950 <_sbrk_r>
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	1a83      	subs	r3, r0, r2
 80059f2:	2b0f      	cmp	r3, #15
 80059f4:	dde3      	ble.n	80059be <_malloc_trim_r+0x32>
 80059f6:	490d      	ldr	r1, [pc, #52]	; (8005a2c <_malloc_trim_r+0xa0>)
 80059f8:	6809      	ldr	r1, [r1, #0]
 80059fa:	1a40      	subs	r0, r0, r1
 80059fc:	490c      	ldr	r1, [pc, #48]	; (8005a30 <_malloc_trim_r+0xa4>)
 80059fe:	f043 0301 	orr.w	r3, r3, #1
 8005a02:	6008      	str	r0, [r1, #0]
 8005a04:	6053      	str	r3, [r2, #4]
 8005a06:	e7da      	b.n	80059be <_malloc_trim_r+0x32>
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	4a09      	ldr	r2, [pc, #36]	; (8005a30 <_malloc_trim_r+0xa4>)
 8005a0c:	1b2d      	subs	r5, r5, r4
 8005a0e:	f045 0501 	orr.w	r5, r5, #1
 8005a12:	605d      	str	r5, [r3, #4]
 8005a14:	6813      	ldr	r3, [r2, #0]
 8005a16:	4630      	mov	r0, r6
 8005a18:	1b1c      	subs	r4, r3, r4
 8005a1a:	6014      	str	r4, [r2, #0]
 8005a1c:	f7ff ff92 	bl	8005944 <__malloc_unlock>
 8005a20:	2001      	movs	r0, #1
 8005a22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a26:	bf00      	nop
 8005a28:	20000270 	.word	0x20000270
 8005a2c:	20000678 	.word	0x20000678
 8005a30:	200006a0 	.word	0x200006a0
 8005a34:	00000080 	.word	0x00000080

08005a38 <_free_r>:
 8005a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a3c:	4604      	mov	r4, r0
 8005a3e:	4688      	mov	r8, r1
 8005a40:	2900      	cmp	r1, #0
 8005a42:	f000 80ab 	beq.w	8005b9c <_free_r+0x164>
 8005a46:	f7ff ff77 	bl	8005938 <__malloc_lock>
 8005a4a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8005a4e:	4d54      	ldr	r5, [pc, #336]	; (8005ba0 <_free_r+0x168>)
 8005a50:	f022 0001 	bic.w	r0, r2, #1
 8005a54:	f1a8 0308 	sub.w	r3, r8, #8
 8005a58:	181f      	adds	r7, r3, r0
 8005a5a:	68a9      	ldr	r1, [r5, #8]
 8005a5c:	687e      	ldr	r6, [r7, #4]
 8005a5e:	428f      	cmp	r7, r1
 8005a60:	f026 0603 	bic.w	r6, r6, #3
 8005a64:	f002 0201 	and.w	r2, r2, #1
 8005a68:	d11b      	bne.n	8005aa2 <_free_r+0x6a>
 8005a6a:	4430      	add	r0, r6
 8005a6c:	b93a      	cbnz	r2, 8005a7e <_free_r+0x46>
 8005a6e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8005a72:	1a9b      	subs	r3, r3, r2
 8005a74:	4410      	add	r0, r2
 8005a76:	6899      	ldr	r1, [r3, #8]
 8005a78:	68da      	ldr	r2, [r3, #12]
 8005a7a:	60ca      	str	r2, [r1, #12]
 8005a7c:	6091      	str	r1, [r2, #8]
 8005a7e:	f040 0201 	orr.w	r2, r0, #1
 8005a82:	605a      	str	r2, [r3, #4]
 8005a84:	60ab      	str	r3, [r5, #8]
 8005a86:	4b47      	ldr	r3, [pc, #284]	; (8005ba4 <_free_r+0x16c>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4298      	cmp	r0, r3
 8005a8c:	d304      	bcc.n	8005a98 <_free_r+0x60>
 8005a8e:	4b46      	ldr	r3, [pc, #280]	; (8005ba8 <_free_r+0x170>)
 8005a90:	4620      	mov	r0, r4
 8005a92:	6819      	ldr	r1, [r3, #0]
 8005a94:	f7ff ff7a 	bl	800598c <_malloc_trim_r>
 8005a98:	4620      	mov	r0, r4
 8005a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a9e:	f7ff bf51 	b.w	8005944 <__malloc_unlock>
 8005aa2:	607e      	str	r6, [r7, #4]
 8005aa4:	2a00      	cmp	r2, #0
 8005aa6:	d139      	bne.n	8005b1c <_free_r+0xe4>
 8005aa8:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8005aac:	1a5b      	subs	r3, r3, r1
 8005aae:	4408      	add	r0, r1
 8005ab0:	6899      	ldr	r1, [r3, #8]
 8005ab2:	f105 0e08 	add.w	lr, r5, #8
 8005ab6:	4571      	cmp	r1, lr
 8005ab8:	d032      	beq.n	8005b20 <_free_r+0xe8>
 8005aba:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8005abe:	f8c1 e00c 	str.w	lr, [r1, #12]
 8005ac2:	f8ce 1008 	str.w	r1, [lr, #8]
 8005ac6:	19b9      	adds	r1, r7, r6
 8005ac8:	6849      	ldr	r1, [r1, #4]
 8005aca:	07c9      	lsls	r1, r1, #31
 8005acc:	d40a      	bmi.n	8005ae4 <_free_r+0xac>
 8005ace:	4430      	add	r0, r6
 8005ad0:	68b9      	ldr	r1, [r7, #8]
 8005ad2:	bb3a      	cbnz	r2, 8005b24 <_free_r+0xec>
 8005ad4:	4e35      	ldr	r6, [pc, #212]	; (8005bac <_free_r+0x174>)
 8005ad6:	42b1      	cmp	r1, r6
 8005ad8:	d124      	bne.n	8005b24 <_free_r+0xec>
 8005ada:	616b      	str	r3, [r5, #20]
 8005adc:	612b      	str	r3, [r5, #16]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	60d9      	str	r1, [r3, #12]
 8005ae2:	6099      	str	r1, [r3, #8]
 8005ae4:	f040 0101 	orr.w	r1, r0, #1
 8005ae8:	6059      	str	r1, [r3, #4]
 8005aea:	5018      	str	r0, [r3, r0]
 8005aec:	2a00      	cmp	r2, #0
 8005aee:	d1d3      	bne.n	8005a98 <_free_r+0x60>
 8005af0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005af4:	d21a      	bcs.n	8005b2c <_free_r+0xf4>
 8005af6:	08c0      	lsrs	r0, r0, #3
 8005af8:	1081      	asrs	r1, r0, #2
 8005afa:	2201      	movs	r2, #1
 8005afc:	408a      	lsls	r2, r1
 8005afe:	6869      	ldr	r1, [r5, #4]
 8005b00:	3001      	adds	r0, #1
 8005b02:	430a      	orrs	r2, r1
 8005b04:	606a      	str	r2, [r5, #4]
 8005b06:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8005b0a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8005b0e:	6099      	str	r1, [r3, #8]
 8005b10:	3a08      	subs	r2, #8
 8005b12:	60da      	str	r2, [r3, #12]
 8005b14:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8005b18:	60cb      	str	r3, [r1, #12]
 8005b1a:	e7bd      	b.n	8005a98 <_free_r+0x60>
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	e7d2      	b.n	8005ac6 <_free_r+0x8e>
 8005b20:	2201      	movs	r2, #1
 8005b22:	e7d0      	b.n	8005ac6 <_free_r+0x8e>
 8005b24:	68fe      	ldr	r6, [r7, #12]
 8005b26:	60ce      	str	r6, [r1, #12]
 8005b28:	60b1      	str	r1, [r6, #8]
 8005b2a:	e7db      	b.n	8005ae4 <_free_r+0xac>
 8005b2c:	0a42      	lsrs	r2, r0, #9
 8005b2e:	2a04      	cmp	r2, #4
 8005b30:	d813      	bhi.n	8005b5a <_free_r+0x122>
 8005b32:	0982      	lsrs	r2, r0, #6
 8005b34:	3238      	adds	r2, #56	; 0x38
 8005b36:	1c51      	adds	r1, r2, #1
 8005b38:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8005b3c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005b40:	428e      	cmp	r6, r1
 8005b42:	d124      	bne.n	8005b8e <_free_r+0x156>
 8005b44:	2001      	movs	r0, #1
 8005b46:	1092      	asrs	r2, r2, #2
 8005b48:	fa00 f202 	lsl.w	r2, r0, r2
 8005b4c:	6868      	ldr	r0, [r5, #4]
 8005b4e:	4302      	orrs	r2, r0
 8005b50:	606a      	str	r2, [r5, #4]
 8005b52:	60de      	str	r6, [r3, #12]
 8005b54:	6099      	str	r1, [r3, #8]
 8005b56:	60b3      	str	r3, [r6, #8]
 8005b58:	e7de      	b.n	8005b18 <_free_r+0xe0>
 8005b5a:	2a14      	cmp	r2, #20
 8005b5c:	d801      	bhi.n	8005b62 <_free_r+0x12a>
 8005b5e:	325b      	adds	r2, #91	; 0x5b
 8005b60:	e7e9      	b.n	8005b36 <_free_r+0xfe>
 8005b62:	2a54      	cmp	r2, #84	; 0x54
 8005b64:	d802      	bhi.n	8005b6c <_free_r+0x134>
 8005b66:	0b02      	lsrs	r2, r0, #12
 8005b68:	326e      	adds	r2, #110	; 0x6e
 8005b6a:	e7e4      	b.n	8005b36 <_free_r+0xfe>
 8005b6c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005b70:	d802      	bhi.n	8005b78 <_free_r+0x140>
 8005b72:	0bc2      	lsrs	r2, r0, #15
 8005b74:	3277      	adds	r2, #119	; 0x77
 8005b76:	e7de      	b.n	8005b36 <_free_r+0xfe>
 8005b78:	f240 5154 	movw	r1, #1364	; 0x554
 8005b7c:	428a      	cmp	r2, r1
 8005b7e:	bf9a      	itte	ls
 8005b80:	0c82      	lsrls	r2, r0, #18
 8005b82:	327c      	addls	r2, #124	; 0x7c
 8005b84:	227e      	movhi	r2, #126	; 0x7e
 8005b86:	e7d6      	b.n	8005b36 <_free_r+0xfe>
 8005b88:	6889      	ldr	r1, [r1, #8]
 8005b8a:	428e      	cmp	r6, r1
 8005b8c:	d004      	beq.n	8005b98 <_free_r+0x160>
 8005b8e:	684a      	ldr	r2, [r1, #4]
 8005b90:	f022 0203 	bic.w	r2, r2, #3
 8005b94:	4290      	cmp	r0, r2
 8005b96:	d3f7      	bcc.n	8005b88 <_free_r+0x150>
 8005b98:	68ce      	ldr	r6, [r1, #12]
 8005b9a:	e7da      	b.n	8005b52 <_free_r+0x11a>
 8005b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ba0:	20000270 	.word	0x20000270
 8005ba4:	2000067c 	.word	0x2000067c
 8005ba8:	200006d0 	.word	0x200006d0
 8005bac:	20000278 	.word	0x20000278

08005bb0 <__retarget_lock_acquire_recursive>:
 8005bb0:	4770      	bx	lr

08005bb2 <__retarget_lock_release_recursive>:
 8005bb2:	4770      	bx	lr

08005bb4 <_sbrk>:
 8005bb4:	4b04      	ldr	r3, [pc, #16]	; (8005bc8 <_sbrk+0x14>)
 8005bb6:	6819      	ldr	r1, [r3, #0]
 8005bb8:	4602      	mov	r2, r0
 8005bba:	b909      	cbnz	r1, 8005bc0 <_sbrk+0xc>
 8005bbc:	4903      	ldr	r1, [pc, #12]	; (8005bcc <_sbrk+0x18>)
 8005bbe:	6019      	str	r1, [r3, #0]
 8005bc0:	6818      	ldr	r0, [r3, #0]
 8005bc2:	4402      	add	r2, r0
 8005bc4:	601a      	str	r2, [r3, #0]
 8005bc6:	4770      	bx	lr
 8005bc8:	200006d4 	.word	0x200006d4
 8005bcc:	20013914 	.word	0x20013914

08005bd0 <_init>:
 8005bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd2:	bf00      	nop
 8005bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bd6:	bc08      	pop	{r3}
 8005bd8:	469e      	mov	lr, r3
 8005bda:	4770      	bx	lr

08005bdc <_fini>:
 8005bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bde:	bf00      	nop
 8005be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005be2:	bc08      	pop	{r3}
 8005be4:	469e      	mov	lr, r3
 8005be6:	4770      	bx	lr
