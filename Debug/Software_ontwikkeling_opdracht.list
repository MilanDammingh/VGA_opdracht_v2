
Software_ontwikkeling_opdracht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f14  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f28  0800309c  0800309c  0001309c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003fc4  08003fc4  00013fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003fc8  08003fc8  00013fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00013fcc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00013fcc  2**0
                  CONTENTS
  7 .bss          00012d80  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20012d80  20012d80  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00013fcc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00009330  00000000  00000000  00013ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000015bf  00000000  00000000  0001d32c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000008d0  00000000  00000000  0001e8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007f8  00000000  00000000  0001f1c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003a5c  00000000  00000000  0001f9b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002f30  00000000  00000000  00023414  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00026344  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002580  00000000  00000000  000263c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00028940  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003084 	.word	0x08003084

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08003084 	.word	0x08003084

080001c8 <draw_text>:

#include <stdio.h>
#include <stdlib.h>


void draw_text (int x, int y, char letter) {
 80001c8:	b590      	push	{r4, r7, lr}
 80001ca:	f5ad 5d90 	sub.w	sp, sp, #4608	; 0x1200
 80001ce:	b087      	sub	sp, #28
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	f107 0318 	add.w	r3, r7, #24
 80001d6:	3b0c      	subs	r3, #12
 80001d8:	6018      	str	r0, [r3, #0]
 80001da:	f107 0318 	add.w	r3, r7, #24
 80001de:	3b10      	subs	r3, #16
 80001e0:	6019      	str	r1, [r3, #0]
 80001e2:	f107 0318 	add.w	r3, r7, #24
 80001e6:	3b11      	subs	r3, #17
 80001e8:	701a      	strb	r2, [r3, #0]

	//____________________________________ALFABET IN C ARRAY_________________________________________

	int letter_A[10][4] = {
 80001ea:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 80001ee:	4abc      	ldr	r2, [pc, #752]	; (80004e0 <draw_text+0x318>)
 80001f0:	4618      	mov	r0, r3
 80001f2:	4611      	mov	r1, r2
 80001f4:	23a0      	movs	r3, #160	; 0xa0
 80001f6:	461a      	mov	r2, r3
 80001f8:	f002 ff30 	bl	800305c <memcpy>
			  0xff, 0xff, 0xff, 0xff,  //@@@@
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00
	};
	int letter_B[10][4] = {
 80001fc:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 8000200:	4ab8      	ldr	r2, [pc, #736]	; (80004e4 <draw_text+0x31c>)
 8000202:	4618      	mov	r0, r3
 8000204:	4611      	mov	r1, r2
 8000206:	23a0      	movs	r3, #160	; 0xa0
 8000208:	461a      	mov	r2, r3
 800020a:	f002 ff27 	bl	800305c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0xff, 0xff, 0x00,  //@@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_C[10][4] = {
 800020e:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8000212:	4ab5      	ldr	r2, [pc, #724]	; (80004e8 <draw_text+0x320>)
 8000214:	4618      	mov	r0, r3
 8000216:	4611      	mov	r1, r2
 8000218:	23a0      	movs	r3, #160	; 0xa0
 800021a:	461a      	mov	r2, r3
 800021c:	f002 ff1e 	bl	800305c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_D[10][4] = {
 8000220:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8000224:	4ab1      	ldr	r2, [pc, #708]	; (80004ec <draw_text+0x324>)
 8000226:	4618      	mov	r0, r3
 8000228:	4611      	mov	r1, r2
 800022a:	23a0      	movs	r3, #160	; 0xa0
 800022c:	461a      	mov	r2, r3
 800022e:	f002 ff15 	bl	800305c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0xff, 0xff, 0x00,  //@@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_E[10][4] = {
 8000232:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8000236:	4aae      	ldr	r2, [pc, #696]	; (80004f0 <draw_text+0x328>)
 8000238:	4618      	mov	r0, r3
 800023a:	4611      	mov	r1, r2
 800023c:	23a0      	movs	r3, #160	; 0xa0
 800023e:	461a      	mov	r2, r3
 8000240:	f002 ff0c 	bl	800305c <memcpy>
			  0xff, 0x00, 0x00, 0x00,  //@...
			  0xff, 0xff, 0xff, 0xff,  //@@@@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_F[10][4] = {
 8000244:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8000248:	4aaa      	ldr	r2, [pc, #680]	; (80004f4 <draw_text+0x32c>)
 800024a:	4618      	mov	r0, r3
 800024c:	4611      	mov	r1, r2
 800024e:	23a0      	movs	r3, #160	; 0xa0
 8000250:	461a      	mov	r2, r3
 8000252:	f002 ff03 	bl	800305c <memcpy>
			  0xff, 0x00, 0x00, 0x00,  //@...
			  0xff, 0x00, 0x00, 0x00,  //@...
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_G[10][4] = {
 8000256:	f607 4318 	addw	r3, r7, #3096	; 0xc18
 800025a:	4aa7      	ldr	r2, [pc, #668]	; (80004f8 <draw_text+0x330>)
 800025c:	4618      	mov	r0, r3
 800025e:	4611      	mov	r1, r2
 8000260:	23a0      	movs	r3, #160	; 0xa0
 8000262:	461a      	mov	r2, r3
 8000264:	f002 fefa 	bl	800305c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_H[10][4] = {
 8000268:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 800026c:	4aa3      	ldr	r2, [pc, #652]	; (80004fc <draw_text+0x334>)
 800026e:	4618      	mov	r0, r3
 8000270:	4611      	mov	r1, r2
 8000272:	23a0      	movs	r3, #160	; 0xa0
 8000274:	461a      	mov	r2, r3
 8000276:	f002 fef1 	bl	800305c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_I[10][3] = {
 800027a:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800027e:	4aa0      	ldr	r2, [pc, #640]	; (8000500 <draw_text+0x338>)
 8000280:	4618      	mov	r0, r3
 8000282:	4611      	mov	r1, r2
 8000284:	2378      	movs	r3, #120	; 0x78
 8000286:	461a      	mov	r2, r3
 8000288:	f002 fee8 	bl	800305c <memcpy>
			  0x00, 0xff, 0x00,  //.@.
			  0xff, 0xff, 0xff,  //@@@
			  0x00, 0x00, 0x00,  //...
			  0x00, 0x00, 0x00,  //...
	};
	int letter_J[10][4] = {
 800028c:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8000290:	4618      	mov	r0, r3
 8000292:	23a0      	movs	r3, #160	; 0xa0
 8000294:	461a      	mov	r2, r3
 8000296:	2100      	movs	r1, #0
 8000298:	f002 feeb 	bl	8003072 <memset>
 800029c:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80002a0:	22ff      	movs	r2, #255	; 0xff
 80002a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80002a4:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80002a8:	22ff      	movs	r2, #255	; 0xff
 80002aa:	63da      	str	r2, [r3, #60]	; 0x3c
 80002ac:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80002b0:	22ff      	movs	r2, #255	; 0xff
 80002b2:	64da      	str	r2, [r3, #76]	; 0x4c
 80002b4:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80002b8:	22ff      	movs	r2, #255	; 0xff
 80002ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80002bc:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80002c0:	22ff      	movs	r2, #255	; 0xff
 80002c2:	661a      	str	r2, [r3, #96]	; 0x60
 80002c4:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80002c8:	22ff      	movs	r2, #255	; 0xff
 80002ca:	66da      	str	r2, [r3, #108]	; 0x6c
 80002cc:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80002d0:	22ff      	movs	r2, #255	; 0xff
 80002d2:	675a      	str	r2, [r3, #116]	; 0x74
 80002d4:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80002d8:	22ff      	movs	r2, #255	; 0xff
 80002da:	679a      	str	r2, [r3, #120]	; 0x78
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_K[10][4] = {
 80002dc:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 80002e0:	4a88      	ldr	r2, [pc, #544]	; (8000504 <draw_text+0x33c>)
 80002e2:	4618      	mov	r0, r3
 80002e4:	4611      	mov	r1, r2
 80002e6:	23a0      	movs	r3, #160	; 0xa0
 80002e8:	461a      	mov	r2, r3
 80002ea:	f002 feb7 	bl	800305c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_L[10][4] = {
 80002ee:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 80002f2:	4618      	mov	r0, r3
 80002f4:	23a0      	movs	r3, #160	; 0xa0
 80002f6:	461a      	mov	r2, r3
 80002f8:	2100      	movs	r1, #0
 80002fa:	f002 feba 	bl	8003072 <memset>
 80002fe:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8000302:	22ff      	movs	r2, #255	; 0xff
 8000304:	621a      	str	r2, [r3, #32]
 8000306:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 800030a:	22ff      	movs	r2, #255	; 0xff
 800030c:	631a      	str	r2, [r3, #48]	; 0x30
 800030e:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8000312:	22ff      	movs	r2, #255	; 0xff
 8000314:	641a      	str	r2, [r3, #64]	; 0x40
 8000316:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 800031a:	22ff      	movs	r2, #255	; 0xff
 800031c:	651a      	str	r2, [r3, #80]	; 0x50
 800031e:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8000322:	22ff      	movs	r2, #255	; 0xff
 8000324:	661a      	str	r2, [r3, #96]	; 0x60
 8000326:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 800032a:	22ff      	movs	r2, #255	; 0xff
 800032c:	671a      	str	r2, [r3, #112]	; 0x70
 800032e:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8000332:	22ff      	movs	r2, #255	; 0xff
 8000334:	675a      	str	r2, [r3, #116]	; 0x74
 8000336:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 800033a:	22ff      	movs	r2, #255	; 0xff
 800033c:	679a      	str	r2, [r3, #120]	; 0x78
 800033e:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8000342:	22ff      	movs	r2, #255	; 0xff
 8000344:	67da      	str	r2, [r3, #124]	; 0x7c
			  0xff, 0x00, 0x00, 0x00,  //@...
			  0xff, 0xff, 0xff, 0xff,  //@@@@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_M[10][4] = {
 8000346:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800034a:	4a6f      	ldr	r2, [pc, #444]	; (8000508 <draw_text+0x340>)
 800034c:	4618      	mov	r0, r3
 800034e:	4611      	mov	r1, r2
 8000350:	23a0      	movs	r3, #160	; 0xa0
 8000352:	461a      	mov	r2, r3
 8000354:	f002 fe82 	bl	800305c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_N[10][4] = {
 8000358:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800035c:	4a6b      	ldr	r2, [pc, #428]	; (800050c <draw_text+0x344>)
 800035e:	4618      	mov	r0, r3
 8000360:	4611      	mov	r1, r2
 8000362:	23a0      	movs	r3, #160	; 0xa0
 8000364:	461a      	mov	r2, r3
 8000366:	f002 fe79 	bl	800305c <memcpy>
			  0xff, 0x00, 0xff, 0xff,  //@.@@
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_O[10][4] = {
 800036a:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800036e:	4a68      	ldr	r2, [pc, #416]	; (8000510 <draw_text+0x348>)
 8000370:	4618      	mov	r0, r3
 8000372:	4611      	mov	r1, r2
 8000374:	23a0      	movs	r3, #160	; 0xa0
 8000376:	461a      	mov	r2, r3
 8000378:	f002 fe70 	bl	800305c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_P[10][4] = {
 800037c:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8000380:	4a64      	ldr	r2, [pc, #400]	; (8000514 <draw_text+0x34c>)
 8000382:	4618      	mov	r0, r3
 8000384:	4611      	mov	r1, r2
 8000386:	23a0      	movs	r3, #160	; 0xa0
 8000388:	461a      	mov	r2, r3
 800038a:	f002 fe67 	bl	800305c <memcpy>
			  0xff, 0x00, 0x00, 0x00,  //@...
			  0xff, 0x00, 0x00, 0x00,  //@...
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_Q[10][4] = {
 800038e:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8000392:	4a61      	ldr	r2, [pc, #388]	; (8000518 <draw_text+0x350>)
 8000394:	4618      	mov	r0, r3
 8000396:	4611      	mov	r1, r2
 8000398:	23a0      	movs	r3, #160	; 0xa0
 800039a:	461a      	mov	r2, r3
 800039c:	f002 fe5e 	bl	800305c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0x00, 0xff, 0x00,  //..@.
			  0x00, 0x00, 0x00, 0xff,  //...@
	};
	int letter_R[10][4] = {
 80003a0:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80003a4:	4a5d      	ldr	r2, [pc, #372]	; (800051c <draw_text+0x354>)
 80003a6:	4618      	mov	r0, r3
 80003a8:	4611      	mov	r1, r2
 80003aa:	23a0      	movs	r3, #160	; 0xa0
 80003ac:	461a      	mov	r2, r3
 80003ae:	f002 fe55 	bl	800305c <memcpy>
			  0xff, 0x00, 0xff, 0x00,  //@.@.
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_S[10][4] = {
 80003b2:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80003b6:	4a5a      	ldr	r2, [pc, #360]	; (8000520 <draw_text+0x358>)
 80003b8:	4618      	mov	r0, r3
 80003ba:	4611      	mov	r1, r2
 80003bc:	23a0      	movs	r3, #160	; 0xa0
 80003be:	461a      	mov	r2, r3
 80003c0:	f002 fe4c 	bl	800305c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0xff, 0xff, 0x00,  //@@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_T[10][5] = {
 80003c4:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80003c8:	4a56      	ldr	r2, [pc, #344]	; (8000524 <draw_text+0x35c>)
 80003ca:	4618      	mov	r0, r3
 80003cc:	4611      	mov	r1, r2
 80003ce:	23c8      	movs	r3, #200	; 0xc8
 80003d0:	461a      	mov	r2, r3
 80003d2:	f002 fe43 	bl	800305c <memcpy>
			  0x00, 0x00, 0xff, 0x00, 0x00,  //..@..
			  0x00, 0xff, 0xff, 0xff, 0x00,  //.@@@.
			  0x00, 0x00, 0x00, 0x00, 0x00,  //.....
			  0x00, 0x00, 0x00, 0x00, 0x00,  //.....
	};
	int letter_U[10][4] = {
 80003d6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80003da:	4a53      	ldr	r2, [pc, #332]	; (8000528 <draw_text+0x360>)
 80003dc:	4618      	mov	r0, r3
 80003de:	4611      	mov	r1, r2
 80003e0:	23a0      	movs	r3, #160	; 0xa0
 80003e2:	461a      	mov	r2, r3
 80003e4:	f002 fe3a 	bl	800305c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_V[10][4] = {
 80003e8:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80003ec:	4a4f      	ldr	r2, [pc, #316]	; (800052c <draw_text+0x364>)
 80003ee:	4618      	mov	r0, r3
 80003f0:	4611      	mov	r1, r2
 80003f2:	23a0      	movs	r3, #160	; 0xa0
 80003f4:	461a      	mov	r2, r3
 80003f6:	f002 fe31 	bl	800305c <memcpy>
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0xff, 0xff, 0x00,  //.@@.
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_W[10][4] = {
 80003fa:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80003fe:	4a4c      	ldr	r2, [pc, #304]	; (8000530 <draw_text+0x368>)
 8000400:	4618      	mov	r0, r3
 8000402:	4611      	mov	r1, r2
 8000404:	23a0      	movs	r3, #160	; 0xa0
 8000406:	461a      	mov	r2, r3
 8000408:	f002 fe28 	bl	800305c <memcpy>
			  0xff, 0xff, 0xff, 0xff,  //@@@@
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_X[10][4] = {
 800040c:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8000410:	4a48      	ldr	r2, [pc, #288]	; (8000534 <draw_text+0x36c>)
 8000412:	4618      	mov	r0, r3
 8000414:	4611      	mov	r1, r2
 8000416:	23a0      	movs	r3, #160	; 0xa0
 8000418:	461a      	mov	r2, r3
 800041a:	f002 fe1f 	bl	800305c <memcpy>
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0xff, 0x00, 0x00, 0xff,  //@..@
			  0x00, 0x00, 0x00, 0x00,  //....
			  0x00, 0x00, 0x00, 0x00,  //....
	};
	int letter_Y[10][5] = {
 800041e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000422:	3b08      	subs	r3, #8
 8000424:	4a44      	ldr	r2, [pc, #272]	; (8000538 <draw_text+0x370>)
 8000426:	4618      	mov	r0, r3
 8000428:	4611      	mov	r1, r2
 800042a:	23c8      	movs	r3, #200	; 0xc8
 800042c:	461a      	mov	r2, r3
 800042e:	f002 fe15 	bl	800305c <memcpy>
			  0x00, 0x00, 0xff, 0x00, 0x00,  //..@..
			  0x00, 0xff, 0xff, 0xff, 0x00,  //.@@@.
			  0x00, 0x00, 0x00, 0x00, 0x00,  //.....
			  0x00, 0x00, 0x00, 0x00, 0x00,  //.....
	};
	int letter_Z[10][4] = {
 8000432:	f107 0318 	add.w	r3, r7, #24
 8000436:	3b08      	subs	r3, #8
 8000438:	4a40      	ldr	r2, [pc, #256]	; (800053c <draw_text+0x374>)
 800043a:	4618      	mov	r0, r3
 800043c:	4611      	mov	r1, r2
 800043e:	23a0      	movs	r3, #160	; 0xa0
 8000440:	461a      	mov	r2, r3
 8000442:	f002 fe0b 	bl	800305c <memcpy>
	};


	//____________________________________SWITCH_________________________________________

	switch (letter)
 8000446:	f107 0318 	add.w	r3, r7, #24
 800044a:	3b11      	subs	r3, #17
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	3b41      	subs	r3, #65	; 0x41
 8000450:	2b19      	cmp	r3, #25
 8000452:	f201 83b0 	bhi.w	8001bb6 <draw_text+0x19ee>
 8000456:	a201      	add	r2, pc, #4	; (adr r2, 800045c <draw_text+0x294>)
 8000458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800045c:	080004c5 	.word	0x080004c5
 8000460:	08000605 	.word	0x08000605
 8000464:	080006eb 	.word	0x080006eb
 8000468:	080007b9 	.word	0x080007b9
 800046c:	0800089f 	.word	0x0800089f
 8000470:	0800097d 	.word	0x0800097d
 8000474:	08000a63 	.word	0x08000a63
 8000478:	08000b31 	.word	0x08000b31
 800047c:	08000c17 	.word	0x08000c17
 8000480:	08000cf9 	.word	0x08000cf9
 8000484:	08000ddf 	.word	0x08000ddf
 8000488:	08000ead 	.word	0x08000ead
 800048c:	08000f93 	.word	0x08000f93
 8000490:	08001071 	.word	0x08001071
 8000494:	08001157 	.word	0x08001157
 8000498:	08001225 	.word	0x08001225
 800049c:	0800130b 	.word	0x0800130b
 80004a0:	080013e7 	.word	0x080013e7
 80004a4:	080014cb 	.word	0x080014cb
 80004a8:	08001597 	.word	0x08001597
 80004ac:	0800167f 	.word	0x0800167f
 80004b0:	0800175b 	.word	0x0800175b
 80004b4:	0800183f 	.word	0x0800183f
 80004b8:	0800190b 	.word	0x0800190b
 80004bc:	080019ef 	.word	0x080019ef
 80004c0:	08001ad1 	.word	0x08001ad1
	{
	case 'A':
	for (int i=0; i<10; i++) {
 80004c4:	2300      	movs	r3, #0
 80004c6:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80004ca:	f102 0214 	add.w	r2, r2, #20
 80004ce:	6013      	str	r3, [r2, #0]
 80004d0:	e08e      	b.n	80005f0 <draw_text+0x428>
		for (int j=0; j<4; j++) {
 80004d2:	2300      	movs	r3, #0
 80004d4:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80004d8:	f102 0210 	add.w	r2, r2, #16
 80004dc:	6013      	str	r3, [r2, #0]
 80004de:	e075      	b.n	80005cc <draw_text+0x404>
 80004e0:	0800309c 	.word	0x0800309c
 80004e4:	0800313c 	.word	0x0800313c
 80004e8:	080031dc 	.word	0x080031dc
 80004ec:	0800327c 	.word	0x0800327c
 80004f0:	0800331c 	.word	0x0800331c
 80004f4:	080033bc 	.word	0x080033bc
 80004f8:	0800345c 	.word	0x0800345c
 80004fc:	080034fc 	.word	0x080034fc
 8000500:	0800359c 	.word	0x0800359c
 8000504:	08003614 	.word	0x08003614
 8000508:	080036b4 	.word	0x080036b4
 800050c:	08003754 	.word	0x08003754
 8000510:	080037f4 	.word	0x080037f4
 8000514:	08003894 	.word	0x08003894
 8000518:	08003934 	.word	0x08003934
 800051c:	080039d4 	.word	0x080039d4
 8000520:	08003a74 	.word	0x08003a74
 8000524:	08003b14 	.word	0x08003b14
 8000528:	08003bdc 	.word	0x08003bdc
 800052c:	08003c7c 	.word	0x08003c7c
 8000530:	08003d1c 	.word	0x08003d1c
 8000534:	08003dbc 	.word	0x08003dbc
 8000538:	08003e5c 	.word	0x08003e5c
 800053c:	08003f24 	.word	0x08003f24

			int x_pos = j + x;
 8000540:	f107 0318 	add.w	r3, r7, #24
 8000544:	3b0c      	subs	r3, #12
 8000546:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 800054a:	f102 0210 	add.w	r2, r2, #16
 800054e:	6812      	ldr	r2, [r2, #0]
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	4413      	add	r3, r2
 8000554:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8000558:	f102 0204 	add.w	r2, r2, #4
 800055c:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 800055e:	f107 0318 	add.w	r3, r7, #24
 8000562:	3b10      	subs	r3, #16
 8000564:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8000568:	f102 0214 	add.w	r2, r2, #20
 800056c:	6812      	ldr	r2, [r2, #0]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4413      	add	r3, r2
 8000572:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8000576:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_A[i][j]);
 8000578:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800057c:	f103 0304 	add.w	r3, r3, #4
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	b298      	uxth	r0, r3
 8000584:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	b29c      	uxth	r4, r3
 800058c:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8000590:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8000594:	f102 0214 	add.w	r2, r2, #20
 8000598:	6812      	ldr	r2, [r2, #0]
 800059a:	0091      	lsls	r1, r2, #2
 800059c:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80005a0:	f102 0210 	add.w	r2, r2, #16
 80005a4:	6812      	ldr	r2, [r2, #0]
 80005a6:	440a      	add	r2, r1
 80005a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	461a      	mov	r2, r3
 80005b0:	4621      	mov	r1, r4
 80005b2:	f002 f9e1 	bl	8002978 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 80005b6:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80005ba:	f103 0310 	add.w	r3, r3, #16
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	3301      	adds	r3, #1
 80005c2:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80005c6:	f102 0210 	add.w	r2, r2, #16
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80005d0:	f103 0310 	add.w	r3, r3, #16
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	2b03      	cmp	r3, #3
 80005d8:	ddb2      	ble.n	8000540 <draw_text+0x378>
	for (int i=0; i<10; i++) {
 80005da:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80005de:	f103 0314 	add.w	r3, r3, #20
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80005ea:	f102 0214 	add.w	r2, r2, #20
 80005ee:	6013      	str	r3, [r2, #0]
 80005f0:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80005f4:	f103 0314 	add.w	r3, r3, #20
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b09      	cmp	r3, #9
 80005fc:	f77f af69 	ble.w	80004d2 <draw_text+0x30a>
		}
	}
	break;
 8000600:	f001 badc 	b.w	8001bbc <draw_text+0x19f4>


	case 'B':
	for (int i=0; i<10; i++) {
 8000604:	2300      	movs	r3, #0
 8000606:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 800060a:	f102 020c 	add.w	r2, r2, #12
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	e062      	b.n	80006d8 <draw_text+0x510>
		for (int j=0; j<4; j++) {
 8000612:	2300      	movs	r3, #0
 8000614:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8000618:	f102 0208 	add.w	r2, r2, #8
 800061c:	6013      	str	r3, [r2, #0]
 800061e:	e049      	b.n	80006b4 <draw_text+0x4ec>

			int x_pos = j + x;
 8000620:	f107 0318 	add.w	r3, r7, #24
 8000624:	3b0c      	subs	r3, #12
 8000626:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 800062a:	f102 0208 	add.w	r2, r2, #8
 800062e:	6812      	ldr	r2, [r2, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8000638:	f102 021c 	add.w	r2, r2, #28
 800063c:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 800063e:	f107 0318 	add.w	r3, r7, #24
 8000642:	3b10      	subs	r3, #16
 8000644:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8000648:	f102 020c 	add.w	r2, r2, #12
 800064c:	6812      	ldr	r2, [r2, #0]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4413      	add	r3, r2
 8000652:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8000656:	f102 0218 	add.w	r2, r2, #24
 800065a:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_B[i][j]);
 800065c:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000660:	f103 031c 	add.w	r3, r3, #28
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	b298      	uxth	r0, r3
 8000668:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 800066c:	f103 0318 	add.w	r3, r3, #24
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	b29c      	uxth	r4, r3
 8000674:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 8000678:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 800067c:	f102 020c 	add.w	r2, r2, #12
 8000680:	6812      	ldr	r2, [r2, #0]
 8000682:	0091      	lsls	r1, r2, #2
 8000684:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8000688:	f102 0208 	add.w	r2, r2, #8
 800068c:	6812      	ldr	r2, [r2, #0]
 800068e:	440a      	add	r2, r1
 8000690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000694:	b2db      	uxtb	r3, r3
 8000696:	461a      	mov	r2, r3
 8000698:	4621      	mov	r1, r4
 800069a:	f002 f96d 	bl	8002978 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 800069e:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80006a2:	f103 0308 	add.w	r3, r3, #8
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80006ae:	f102 0208 	add.w	r2, r2, #8
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80006b8:	f103 0308 	add.w	r3, r3, #8
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2b03      	cmp	r3, #3
 80006c0:	ddae      	ble.n	8000620 <draw_text+0x458>
	for (int i=0; i<10; i++) {
 80006c2:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80006c6:	f103 030c 	add.w	r3, r3, #12
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	3301      	adds	r3, #1
 80006ce:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80006d2:	f102 020c 	add.w	r2, r2, #12
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80006dc:	f103 030c 	add.w	r3, r3, #12
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2b09      	cmp	r3, #9
 80006e4:	dd95      	ble.n	8000612 <draw_text+0x44a>
		}
	}
	break;
 80006e6:	f001 ba69 	b.w	8001bbc <draw_text+0x19f4>


	case 'C':
	for (int i=0; i<10; i++) {
 80006ea:	2300      	movs	r3, #0
 80006ec:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80006f0:	f102 0204 	add.w	r2, r2, #4
 80006f4:	6013      	str	r3, [r2, #0]
 80006f6:	e056      	b.n	80007a6 <draw_text+0x5de>
		for (int j=0; j<4; j++) {
 80006f8:	2300      	movs	r3, #0
 80006fa:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	e041      	b.n	8000786 <draw_text+0x5be>

			int x_pos = j + x;
 8000702:	f107 0318 	add.w	r3, r7, #24
 8000706:	3b0c      	subs	r3, #12
 8000708:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 800070c:	6812      	ldr	r2, [r2, #0]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4413      	add	r3, r2
 8000712:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8000716:	f102 0214 	add.w	r2, r2, #20
 800071a:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 800071c:	f107 0318 	add.w	r3, r7, #24
 8000720:	3b10      	subs	r3, #16
 8000722:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8000726:	f102 0204 	add.w	r2, r2, #4
 800072a:	6812      	ldr	r2, [r2, #0]
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4413      	add	r3, r2
 8000730:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8000734:	f102 0210 	add.w	r2, r2, #16
 8000738:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_C[i][j]);
 800073a:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 800073e:	f103 0314 	add.w	r3, r3, #20
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	b298      	uxth	r0, r3
 8000746:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 800074a:	f103 0310 	add.w	r3, r3, #16
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	b29c      	uxth	r4, r3
 8000752:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8000756:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 800075a:	f102 0204 	add.w	r2, r2, #4
 800075e:	6812      	ldr	r2, [r2, #0]
 8000760:	0091      	lsls	r1, r2, #2
 8000762:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8000766:	6812      	ldr	r2, [r2, #0]
 8000768:	440a      	add	r2, r1
 800076a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800076e:	b2db      	uxtb	r3, r3
 8000770:	461a      	mov	r2, r3
 8000772:	4621      	mov	r1, r4
 8000774:	f002 f900 	bl	8002978 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8000778:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	3301      	adds	r3, #1
 8000780:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8000784:	6013      	str	r3, [r2, #0]
 8000786:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	2b03      	cmp	r3, #3
 800078e:	ddb8      	ble.n	8000702 <draw_text+0x53a>
	for (int i=0; i<10; i++) {
 8000790:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8000794:	f103 0304 	add.w	r3, r3, #4
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	3301      	adds	r3, #1
 800079c:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80007a0:	f102 0204 	add.w	r2, r2, #4
 80007a4:	6013      	str	r3, [r2, #0]
 80007a6:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80007aa:	f103 0304 	add.w	r3, r3, #4
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	2b09      	cmp	r3, #9
 80007b2:	dda1      	ble.n	80006f8 <draw_text+0x530>
		}
	}
	break;
 80007b4:	f001 ba02 	b.w	8001bbc <draw_text+0x19f4>


	case 'D':
	for (int i=0; i<10; i++) {
 80007b8:	2300      	movs	r3, #0
 80007ba:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80007be:	f102 021c 	add.w	r2, r2, #28
 80007c2:	6013      	str	r3, [r2, #0]
 80007c4:	e062      	b.n	800088c <draw_text+0x6c4>
		for (int j=0; j<4; j++) {
 80007c6:	2300      	movs	r3, #0
 80007c8:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80007cc:	f102 0218 	add.w	r2, r2, #24
 80007d0:	6013      	str	r3, [r2, #0]
 80007d2:	e049      	b.n	8000868 <draw_text+0x6a0>

			int x_pos = j + x;
 80007d4:	f107 0318 	add.w	r3, r7, #24
 80007d8:	3b0c      	subs	r3, #12
 80007da:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80007de:	f102 0218 	add.w	r2, r2, #24
 80007e2:	6812      	ldr	r2, [r2, #0]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4413      	add	r3, r2
 80007e8:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 80007ec:	f102 020c 	add.w	r2, r2, #12
 80007f0:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80007f2:	f107 0318 	add.w	r3, r7, #24
 80007f6:	3b10      	subs	r3, #16
 80007f8:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80007fc:	f102 021c 	add.w	r2, r2, #28
 8000800:	6812      	ldr	r2, [r2, #0]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4413      	add	r3, r2
 8000806:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 800080a:	f102 0208 	add.w	r2, r2, #8
 800080e:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_D[i][j]);
 8000810:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000814:	f103 030c 	add.w	r3, r3, #12
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	b298      	uxth	r0, r3
 800081c:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000820:	f103 0308 	add.w	r3, r3, #8
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	b29c      	uxth	r4, r3
 8000828:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 800082c:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8000830:	f102 021c 	add.w	r2, r2, #28
 8000834:	6812      	ldr	r2, [r2, #0]
 8000836:	0091      	lsls	r1, r2, #2
 8000838:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 800083c:	f102 0218 	add.w	r2, r2, #24
 8000840:	6812      	ldr	r2, [r2, #0]
 8000842:	440a      	add	r2, r1
 8000844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000848:	b2db      	uxtb	r3, r3
 800084a:	461a      	mov	r2, r3
 800084c:	4621      	mov	r1, r4
 800084e:	f002 f893 	bl	8002978 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8000852:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8000856:	f103 0318 	add.w	r3, r3, #24
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	3301      	adds	r3, #1
 800085e:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8000862:	f102 0218 	add.w	r2, r2, #24
 8000866:	6013      	str	r3, [r2, #0]
 8000868:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 800086c:	f103 0318 	add.w	r3, r3, #24
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2b03      	cmp	r3, #3
 8000874:	ddae      	ble.n	80007d4 <draw_text+0x60c>
	for (int i=0; i<10; i++) {
 8000876:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 800087a:	f103 031c 	add.w	r3, r3, #28
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	3301      	adds	r3, #1
 8000882:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8000886:	f102 021c 	add.w	r2, r2, #28
 800088a:	6013      	str	r3, [r2, #0]
 800088c:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8000890:	f103 031c 	add.w	r3, r3, #28
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2b09      	cmp	r3, #9
 8000898:	dd95      	ble.n	80007c6 <draw_text+0x5fe>
		}
	}
	break;
 800089a:	f001 b98f 	b.w	8001bbc <draw_text+0x19f4>


	case 'E':
	for (int i=0; i<10; i++) {
 800089e:	2300      	movs	r3, #0
 80008a0:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80008a4:	f102 0214 	add.w	r2, r2, #20
 80008a8:	6013      	str	r3, [r2, #0]
 80008aa:	e05e      	b.n	800096a <draw_text+0x7a2>
		for (int j=0; j<4; j++) {
 80008ac:	2300      	movs	r3, #0
 80008ae:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80008b2:	f102 0210 	add.w	r2, r2, #16
 80008b6:	6013      	str	r3, [r2, #0]
 80008b8:	e045      	b.n	8000946 <draw_text+0x77e>

			int x_pos = j + x;
 80008ba:	f107 0318 	add.w	r3, r7, #24
 80008be:	3b0c      	subs	r3, #12
 80008c0:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80008c4:	f102 0210 	add.w	r2, r2, #16
 80008c8:	6812      	ldr	r2, [r2, #0]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4413      	add	r3, r2
 80008ce:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 80008d2:	f102 0204 	add.w	r2, r2, #4
 80008d6:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80008d8:	f107 0318 	add.w	r3, r7, #24
 80008dc:	3b10      	subs	r3, #16
 80008de:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80008e2:	f102 0214 	add.w	r2, r2, #20
 80008e6:	6812      	ldr	r2, [r2, #0]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4413      	add	r3, r2
 80008ec:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 80008f0:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_E[i][j]);
 80008f2:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80008f6:	f103 0304 	add.w	r3, r3, #4
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	b298      	uxth	r0, r3
 80008fe:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	b29c      	uxth	r4, r3
 8000906:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 800090a:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 800090e:	f102 0214 	add.w	r2, r2, #20
 8000912:	6812      	ldr	r2, [r2, #0]
 8000914:	0091      	lsls	r1, r2, #2
 8000916:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 800091a:	f102 0210 	add.w	r2, r2, #16
 800091e:	6812      	ldr	r2, [r2, #0]
 8000920:	440a      	add	r2, r1
 8000922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000926:	b2db      	uxtb	r3, r3
 8000928:	461a      	mov	r2, r3
 800092a:	4621      	mov	r1, r4
 800092c:	f002 f824 	bl	8002978 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8000930:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8000934:	f103 0310 	add.w	r3, r3, #16
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	3301      	adds	r3, #1
 800093c:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8000940:	f102 0210 	add.w	r2, r2, #16
 8000944:	6013      	str	r3, [r2, #0]
 8000946:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 800094a:	f103 0310 	add.w	r3, r3, #16
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b03      	cmp	r3, #3
 8000952:	ddb2      	ble.n	80008ba <draw_text+0x6f2>
	for (int i=0; i<10; i++) {
 8000954:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8000958:	f103 0314 	add.w	r3, r3, #20
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	3301      	adds	r3, #1
 8000960:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8000964:	f102 0214 	add.w	r2, r2, #20
 8000968:	6013      	str	r3, [r2, #0]
 800096a:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 800096e:	f103 0314 	add.w	r3, r3, #20
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b09      	cmp	r3, #9
 8000976:	dd99      	ble.n	80008ac <draw_text+0x6e4>
		}
	}
	break;
 8000978:	f001 b920 	b.w	8001bbc <draw_text+0x19f4>


	case 'F':
	for (int i=0; i<10; i++) {
 800097c:	2300      	movs	r3, #0
 800097e:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8000982:	f102 020c 	add.w	r2, r2, #12
 8000986:	6013      	str	r3, [r2, #0]
 8000988:	e062      	b.n	8000a50 <draw_text+0x888>
		for (int j=0; j<4; j++) {
 800098a:	2300      	movs	r3, #0
 800098c:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8000990:	f102 0208 	add.w	r2, r2, #8
 8000994:	6013      	str	r3, [r2, #0]
 8000996:	e049      	b.n	8000a2c <draw_text+0x864>

			int x_pos = j + x;
 8000998:	f107 0318 	add.w	r3, r7, #24
 800099c:	3b0c      	subs	r3, #12
 800099e:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80009a2:	f102 0208 	add.w	r2, r2, #8
 80009a6:	6812      	ldr	r2, [r2, #0]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 80009b0:	f102 021c 	add.w	r2, r2, #28
 80009b4:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80009b6:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 80009ba:	f102 0218 	add.w	r2, r2, #24
 80009be:	f107 0318 	add.w	r3, r7, #24
 80009c2:	3b10      	subs	r3, #16
 80009c4:	f507 518f 	add.w	r1, r7, #4576	; 0x11e0
 80009c8:	f101 010c 	add.w	r1, r1, #12
 80009cc:	6809      	ldr	r1, [r1, #0]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	440b      	add	r3, r1
 80009d2:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_F[i][j]);
 80009d4:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80009d8:	f103 031c 	add.w	r3, r3, #28
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	b298      	uxth	r0, r3
 80009e0:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80009e4:	f103 0318 	add.w	r3, r3, #24
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	b29c      	uxth	r4, r3
 80009ec:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 80009f0:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80009f4:	f102 020c 	add.w	r2, r2, #12
 80009f8:	6812      	ldr	r2, [r2, #0]
 80009fa:	0091      	lsls	r1, r2, #2
 80009fc:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8000a00:	f102 0208 	add.w	r2, r2, #8
 8000a04:	6812      	ldr	r2, [r2, #0]
 8000a06:	440a      	add	r2, r1
 8000a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	461a      	mov	r2, r3
 8000a10:	4621      	mov	r1, r4
 8000a12:	f001 ffb1 	bl	8002978 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8000a16:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8000a1a:	f103 0308 	add.w	r3, r3, #8
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	3301      	adds	r3, #1
 8000a22:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8000a26:	f102 0208 	add.w	r2, r2, #8
 8000a2a:	6013      	str	r3, [r2, #0]
 8000a2c:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8000a30:	f103 0308 	add.w	r3, r3, #8
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2b03      	cmp	r3, #3
 8000a38:	ddae      	ble.n	8000998 <draw_text+0x7d0>
	for (int i=0; i<10; i++) {
 8000a3a:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8000a3e:	f103 030c 	add.w	r3, r3, #12
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	3301      	adds	r3, #1
 8000a46:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8000a4a:	f102 020c 	add.w	r2, r2, #12
 8000a4e:	6013      	str	r3, [r2, #0]
 8000a50:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8000a54:	f103 030c 	add.w	r3, r3, #12
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b09      	cmp	r3, #9
 8000a5c:	dd95      	ble.n	800098a <draw_text+0x7c2>
		}
	}
	break;
 8000a5e:	f001 b8ad 	b.w	8001bbc <draw_text+0x19f4>


	case 'G':
	for (int i=0; i<10; i++) {
 8000a62:	2300      	movs	r3, #0
 8000a64:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8000a68:	f102 0204 	add.w	r2, r2, #4
 8000a6c:	6013      	str	r3, [r2, #0]
 8000a6e:	e056      	b.n	8000b1e <draw_text+0x956>
		for (int j=0; j<4; j++) {
 8000a70:	2300      	movs	r3, #0
 8000a72:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8000a76:	6013      	str	r3, [r2, #0]
 8000a78:	e041      	b.n	8000afe <draw_text+0x936>

			int x_pos = j + x;
 8000a7a:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000a7e:	f102 0214 	add.w	r2, r2, #20
 8000a82:	f107 0318 	add.w	r3, r7, #24
 8000a86:	3b0c      	subs	r3, #12
 8000a88:	f507 518f 	add.w	r1, r7, #4576	; 0x11e0
 8000a8c:	6809      	ldr	r1, [r1, #0]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	440b      	add	r3, r1
 8000a92:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8000a94:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000a98:	f102 0210 	add.w	r2, r2, #16
 8000a9c:	f107 0318 	add.w	r3, r7, #24
 8000aa0:	3b10      	subs	r3, #16
 8000aa2:	f507 518f 	add.w	r1, r7, #4576	; 0x11e0
 8000aa6:	f101 0104 	add.w	r1, r1, #4
 8000aaa:	6809      	ldr	r1, [r1, #0]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	440b      	add	r3, r1
 8000ab0:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_G[i][j]);
 8000ab2:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000ab6:	f103 0314 	add.w	r3, r3, #20
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	b298      	uxth	r0, r3
 8000abe:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000ac2:	f103 0310 	add.w	r3, r3, #16
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	b29c      	uxth	r4, r3
 8000aca:	f607 4318 	addw	r3, r7, #3096	; 0xc18
 8000ace:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8000ad2:	f102 0204 	add.w	r2, r2, #4
 8000ad6:	6812      	ldr	r2, [r2, #0]
 8000ad8:	0091      	lsls	r1, r2, #2
 8000ada:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8000ade:	6812      	ldr	r2, [r2, #0]
 8000ae0:	440a      	add	r2, r1
 8000ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4621      	mov	r1, r4
 8000aec:	f001 ff44 	bl	8002978 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8000af0:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	3301      	adds	r3, #1
 8000af8:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8000afc:	6013      	str	r3, [r2, #0]
 8000afe:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2b03      	cmp	r3, #3
 8000b06:	ddb8      	ble.n	8000a7a <draw_text+0x8b2>
	for (int i=0; i<10; i++) {
 8000b08:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8000b0c:	f103 0304 	add.w	r3, r3, #4
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	3301      	adds	r3, #1
 8000b14:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8000b18:	f102 0204 	add.w	r2, r2, #4
 8000b1c:	6013      	str	r3, [r2, #0]
 8000b1e:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8000b22:	f103 0304 	add.w	r3, r3, #4
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	2b09      	cmp	r3, #9
 8000b2a:	dda1      	ble.n	8000a70 <draw_text+0x8a8>
		}
	}
	break;
 8000b2c:	f001 b846 	b.w	8001bbc <draw_text+0x19f4>


	case 'H':
	for (int i=0; i<10; i++) {
 8000b30:	2300      	movs	r3, #0
 8000b32:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000b36:	f102 021c 	add.w	r2, r2, #28
 8000b3a:	6013      	str	r3, [r2, #0]
 8000b3c:	e062      	b.n	8000c04 <draw_text+0xa3c>
		for (int j=0; j<4; j++) {
 8000b3e:	2300      	movs	r3, #0
 8000b40:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000b44:	f102 0218 	add.w	r2, r2, #24
 8000b48:	6013      	str	r3, [r2, #0]
 8000b4a:	e049      	b.n	8000be0 <draw_text+0xa18>

			int x_pos = j + x;
 8000b4c:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000b50:	f102 020c 	add.w	r2, r2, #12
 8000b54:	f107 0318 	add.w	r3, r7, #24
 8000b58:	3b0c      	subs	r3, #12
 8000b5a:	f507 518e 	add.w	r1, r7, #4544	; 0x11c0
 8000b5e:	f101 0118 	add.w	r1, r1, #24
 8000b62:	6809      	ldr	r1, [r1, #0]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	440b      	add	r3, r1
 8000b68:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8000b6a:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000b6e:	f102 0208 	add.w	r2, r2, #8
 8000b72:	f107 0318 	add.w	r3, r7, #24
 8000b76:	3b10      	subs	r3, #16
 8000b78:	f507 518e 	add.w	r1, r7, #4544	; 0x11c0
 8000b7c:	f101 011c 	add.w	r1, r1, #28
 8000b80:	6809      	ldr	r1, [r1, #0]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	440b      	add	r3, r1
 8000b86:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_H[i][j]);
 8000b88:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000b8c:	f103 030c 	add.w	r3, r3, #12
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	b298      	uxth	r0, r3
 8000b94:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000b98:	f103 0308 	add.w	r3, r3, #8
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	b29c      	uxth	r4, r3
 8000ba0:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8000ba4:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000ba8:	f102 021c 	add.w	r2, r2, #28
 8000bac:	6812      	ldr	r2, [r2, #0]
 8000bae:	0091      	lsls	r1, r2, #2
 8000bb0:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000bb4:	f102 0218 	add.w	r2, r2, #24
 8000bb8:	6812      	ldr	r2, [r2, #0]
 8000bba:	440a      	add	r2, r1
 8000bbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4621      	mov	r1, r4
 8000bc6:	f001 fed7 	bl	8002978 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8000bca:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8000bce:	f103 0318 	add.w	r3, r3, #24
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000bda:	f102 0218 	add.w	r2, r2, #24
 8000bde:	6013      	str	r3, [r2, #0]
 8000be0:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8000be4:	f103 0318 	add.w	r3, r3, #24
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	2b03      	cmp	r3, #3
 8000bec:	ddae      	ble.n	8000b4c <draw_text+0x984>
	for (int i=0; i<10; i++) {
 8000bee:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8000bf2:	f103 031c 	add.w	r3, r3, #28
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000bfe:	f102 021c 	add.w	r2, r2, #28
 8000c02:	6013      	str	r3, [r2, #0]
 8000c04:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8000c08:	f103 031c 	add.w	r3, r3, #28
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	2b09      	cmp	r3, #9
 8000c10:	dd95      	ble.n	8000b3e <draw_text+0x976>
		}
	}
	break;
 8000c12:	f000 bfd3 	b.w	8001bbc <draw_text+0x19f4>


	case 'I':
	for (int i=0; i<10; i++) {
 8000c16:	2300      	movs	r3, #0
 8000c18:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000c1c:	f102 0214 	add.w	r2, r2, #20
 8000c20:	6013      	str	r3, [r2, #0]
 8000c22:	e060      	b.n	8000ce6 <draw_text+0xb1e>
		for (int j=0; j<3; j++) {
 8000c24:	2300      	movs	r3, #0
 8000c26:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000c2a:	f102 0210 	add.w	r2, r2, #16
 8000c2e:	6013      	str	r3, [r2, #0]
 8000c30:	e047      	b.n	8000cc2 <draw_text+0xafa>

			int x_pos = j + x;
 8000c32:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000c36:	f102 0204 	add.w	r2, r2, #4
 8000c3a:	f107 0318 	add.w	r3, r7, #24
 8000c3e:	3b0c      	subs	r3, #12
 8000c40:	f507 518e 	add.w	r1, r7, #4544	; 0x11c0
 8000c44:	f101 0110 	add.w	r1, r1, #16
 8000c48:	6809      	ldr	r1, [r1, #0]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	440b      	add	r3, r1
 8000c4e:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8000c50:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000c54:	f107 0318 	add.w	r3, r7, #24
 8000c58:	3b10      	subs	r3, #16
 8000c5a:	f507 518e 	add.w	r1, r7, #4544	; 0x11c0
 8000c5e:	f101 0114 	add.w	r1, r1, #20
 8000c62:	6809      	ldr	r1, [r1, #0]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	440b      	add	r3, r1
 8000c68:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_I[i][j]);
 8000c6a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000c6e:	f103 0304 	add.w	r3, r3, #4
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	b298      	uxth	r0, r3
 8000c76:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	b29c      	uxth	r4, r3
 8000c7e:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 8000c82:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8000c86:	f103 0314 	add.w	r3, r3, #20
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	4413      	add	r3, r2
 8000c92:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000c96:	f102 0210 	add.w	r2, r2, #16
 8000c9a:	6812      	ldr	r2, [r2, #0]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	4621      	mov	r1, r4
 8000ca8:	f001 fe66 	bl	8002978 <UB_VGA_SetPixel>
		for (int j=0; j<3; j++) {
 8000cac:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8000cb0:	f103 0310 	add.w	r3, r3, #16
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000cbc:	f102 0210 	add.w	r2, r2, #16
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8000cc6:	f103 0310 	add.w	r3, r3, #16
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	ddb0      	ble.n	8000c32 <draw_text+0xa6a>
	for (int i=0; i<10; i++) {
 8000cd0:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8000cd4:	f103 0314 	add.w	r3, r3, #20
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000ce0:	f102 0214 	add.w	r2, r2, #20
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8000cea:	f103 0314 	add.w	r3, r3, #20
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b09      	cmp	r3, #9
 8000cf2:	dd97      	ble.n	8000c24 <draw_text+0xa5c>
		}
	}
	break;
 8000cf4:	f000 bf62 	b.w	8001bbc <draw_text+0x19f4>


	case 'J':
	for (int i=0; i<10; i++) {
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000cfe:	f102 020c 	add.w	r2, r2, #12
 8000d02:	6013      	str	r3, [r2, #0]
 8000d04:	e062      	b.n	8000dcc <draw_text+0xc04>
		for (int j=0; j<4; j++) {
 8000d06:	2300      	movs	r3, #0
 8000d08:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000d0c:	f102 0208 	add.w	r2, r2, #8
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	e049      	b.n	8000da8 <draw_text+0xbe0>

			int x_pos = j + x;
 8000d14:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8000d18:	f102 021c 	add.w	r2, r2, #28
 8000d1c:	f107 0318 	add.w	r3, r7, #24
 8000d20:	3b0c      	subs	r3, #12
 8000d22:	f507 518e 	add.w	r1, r7, #4544	; 0x11c0
 8000d26:	f101 0108 	add.w	r1, r1, #8
 8000d2a:	6809      	ldr	r1, [r1, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	440b      	add	r3, r1
 8000d30:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8000d32:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8000d36:	f102 0218 	add.w	r2, r2, #24
 8000d3a:	f107 0318 	add.w	r3, r7, #24
 8000d3e:	3b10      	subs	r3, #16
 8000d40:	f507 518e 	add.w	r1, r7, #4544	; 0x11c0
 8000d44:	f101 010c 	add.w	r1, r1, #12
 8000d48:	6809      	ldr	r1, [r1, #0]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	440b      	add	r3, r1
 8000d4e:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_J[i][j]);
 8000d50:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8000d54:	f103 031c 	add.w	r3, r3, #28
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	b298      	uxth	r0, r3
 8000d5c:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8000d60:	f103 0318 	add.w	r3, r3, #24
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	b29c      	uxth	r4, r3
 8000d68:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8000d6c:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000d70:	f102 020c 	add.w	r2, r2, #12
 8000d74:	6812      	ldr	r2, [r2, #0]
 8000d76:	0091      	lsls	r1, r2, #2
 8000d78:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000d7c:	f102 0208 	add.w	r2, r2, #8
 8000d80:	6812      	ldr	r2, [r2, #0]
 8000d82:	440a      	add	r2, r1
 8000d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4621      	mov	r1, r4
 8000d8e:	f001 fdf3 	bl	8002978 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8000d92:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8000d96:	f103 0308 	add.w	r3, r3, #8
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000da2:	f102 0208 	add.w	r2, r2, #8
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8000dac:	f103 0308 	add.w	r3, r3, #8
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2b03      	cmp	r3, #3
 8000db4:	ddae      	ble.n	8000d14 <draw_text+0xb4c>
	for (int i=0; i<10; i++) {
 8000db6:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8000dba:	f103 030c 	add.w	r3, r3, #12
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000dc6:	f102 020c 	add.w	r2, r2, #12
 8000dca:	6013      	str	r3, [r2, #0]
 8000dcc:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8000dd0:	f103 030c 	add.w	r3, r3, #12
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	2b09      	cmp	r3, #9
 8000dd8:	dd95      	ble.n	8000d06 <draw_text+0xb3e>
		}
	}
	break;
 8000dda:	f000 beef 	b.w	8001bbc <draw_text+0x19f4>


	case 'K':
	for (int i=0; i<10; i++) {
 8000dde:	2300      	movs	r3, #0
 8000de0:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000de4:	f102 0204 	add.w	r2, r2, #4
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	e056      	b.n	8000e9a <draw_text+0xcd2>
		for (int j=0; j<4; j++) {
 8000dec:	2300      	movs	r3, #0
 8000dee:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	e041      	b.n	8000e7a <draw_text+0xcb2>

			int x_pos = j + x;
 8000df6:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8000dfa:	f102 0214 	add.w	r2, r2, #20
 8000dfe:	f107 0318 	add.w	r3, r7, #24
 8000e02:	3b0c      	subs	r3, #12
 8000e04:	f507 518e 	add.w	r1, r7, #4544	; 0x11c0
 8000e08:	6809      	ldr	r1, [r1, #0]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	440b      	add	r3, r1
 8000e0e:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8000e10:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8000e14:	f102 0210 	add.w	r2, r2, #16
 8000e18:	f107 0318 	add.w	r3, r7, #24
 8000e1c:	3b10      	subs	r3, #16
 8000e1e:	f507 518e 	add.w	r1, r7, #4544	; 0x11c0
 8000e22:	f101 0104 	add.w	r1, r1, #4
 8000e26:	6809      	ldr	r1, [r1, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	440b      	add	r3, r1
 8000e2c:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_K[i][j]);
 8000e2e:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8000e32:	f103 0314 	add.w	r3, r3, #20
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	b298      	uxth	r0, r3
 8000e3a:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8000e3e:	f103 0310 	add.w	r3, r3, #16
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	b29c      	uxth	r4, r3
 8000e46:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8000e4a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000e4e:	f102 0204 	add.w	r2, r2, #4
 8000e52:	6812      	ldr	r2, [r2, #0]
 8000e54:	0091      	lsls	r1, r2, #2
 8000e56:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000e5a:	6812      	ldr	r2, [r2, #0]
 8000e5c:	440a      	add	r2, r1
 8000e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	461a      	mov	r2, r3
 8000e66:	4621      	mov	r1, r4
 8000e68:	f001 fd86 	bl	8002978 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8000e6c:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	3301      	adds	r3, #1
 8000e74:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b03      	cmp	r3, #3
 8000e82:	ddb8      	ble.n	8000df6 <draw_text+0xc2e>
	for (int i=0; i<10; i++) {
 8000e84:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8000e88:	f103 0304 	add.w	r3, r3, #4
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8000e94:	f102 0204 	add.w	r2, r2, #4
 8000e98:	6013      	str	r3, [r2, #0]
 8000e9a:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8000e9e:	f103 0304 	add.w	r3, r3, #4
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b09      	cmp	r3, #9
 8000ea6:	dda1      	ble.n	8000dec <draw_text+0xc24>
		}
	}
	break;
 8000ea8:	f000 be88 	b.w	8001bbc <draw_text+0x19f4>


	case 'L':
	for (int i=0; i<10; i++) {
 8000eac:	2300      	movs	r3, #0
 8000eae:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8000eb2:	f102 021c 	add.w	r2, r2, #28
 8000eb6:	6013      	str	r3, [r2, #0]
 8000eb8:	e062      	b.n	8000f80 <draw_text+0xdb8>
		for (int j=0; j<4; j++) {
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8000ec0:	f102 0218 	add.w	r2, r2, #24
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	e049      	b.n	8000f5c <draw_text+0xd94>

			int x_pos = j + x;
 8000ec8:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8000ecc:	f102 020c 	add.w	r2, r2, #12
 8000ed0:	f107 0318 	add.w	r3, r7, #24
 8000ed4:	3b0c      	subs	r3, #12
 8000ed6:	f507 518d 	add.w	r1, r7, #4512	; 0x11a0
 8000eda:	f101 0118 	add.w	r1, r1, #24
 8000ede:	6809      	ldr	r1, [r1, #0]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	440b      	add	r3, r1
 8000ee4:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8000ee6:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8000eea:	f102 0208 	add.w	r2, r2, #8
 8000eee:	f107 0318 	add.w	r3, r7, #24
 8000ef2:	3b10      	subs	r3, #16
 8000ef4:	f507 518d 	add.w	r1, r7, #4512	; 0x11a0
 8000ef8:	f101 011c 	add.w	r1, r1, #28
 8000efc:	6809      	ldr	r1, [r1, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	440b      	add	r3, r1
 8000f02:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_L[i][j]);
 8000f04:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8000f08:	f103 030c 	add.w	r3, r3, #12
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	b298      	uxth	r0, r3
 8000f10:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8000f14:	f103 0308 	add.w	r3, r3, #8
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	b29c      	uxth	r4, r3
 8000f1c:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8000f20:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8000f24:	f102 021c 	add.w	r2, r2, #28
 8000f28:	6812      	ldr	r2, [r2, #0]
 8000f2a:	0091      	lsls	r1, r2, #2
 8000f2c:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8000f30:	f102 0218 	add.w	r2, r2, #24
 8000f34:	6812      	ldr	r2, [r2, #0]
 8000f36:	440a      	add	r2, r1
 8000f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4621      	mov	r1, r4
 8000f42:	f001 fd19 	bl	8002978 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8000f46:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8000f4a:	f103 0318 	add.w	r3, r3, #24
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	3301      	adds	r3, #1
 8000f52:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8000f56:	f102 0218 	add.w	r2, r2, #24
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8000f60:	f103 0318 	add.w	r3, r3, #24
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b03      	cmp	r3, #3
 8000f68:	ddae      	ble.n	8000ec8 <draw_text+0xd00>
	for (int i=0; i<10; i++) {
 8000f6a:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8000f6e:	f103 031c 	add.w	r3, r3, #28
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	3301      	adds	r3, #1
 8000f76:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8000f7a:	f102 021c 	add.w	r2, r2, #28
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8000f84:	f103 031c 	add.w	r3, r3, #28
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b09      	cmp	r3, #9
 8000f8c:	dd95      	ble.n	8000eba <draw_text+0xcf2>
		}
	}
	break;
 8000f8e:	f000 be15 	b.w	8001bbc <draw_text+0x19f4>


	case 'M':
	for (int i=0; i<10; i++) {
 8000f92:	2300      	movs	r3, #0
 8000f94:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8000f98:	f102 0214 	add.w	r2, r2, #20
 8000f9c:	6013      	str	r3, [r2, #0]
 8000f9e:	e05e      	b.n	800105e <draw_text+0xe96>
		for (int j=0; j<4; j++) {
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8000fa6:	f102 0210 	add.w	r2, r2, #16
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	e045      	b.n	800103a <draw_text+0xe72>

			int x_pos = j + x;
 8000fae:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8000fb2:	f102 0204 	add.w	r2, r2, #4
 8000fb6:	f107 0318 	add.w	r3, r7, #24
 8000fba:	3b0c      	subs	r3, #12
 8000fbc:	f507 518d 	add.w	r1, r7, #4512	; 0x11a0
 8000fc0:	f101 0110 	add.w	r1, r1, #16
 8000fc4:	6809      	ldr	r1, [r1, #0]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	440b      	add	r3, r1
 8000fca:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8000fcc:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8000fd0:	f107 0318 	add.w	r3, r7, #24
 8000fd4:	3b10      	subs	r3, #16
 8000fd6:	f507 518d 	add.w	r1, r7, #4512	; 0x11a0
 8000fda:	f101 0114 	add.w	r1, r1, #20
 8000fde:	6809      	ldr	r1, [r1, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	440b      	add	r3, r1
 8000fe4:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_M[i][j]);
 8000fe6:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8000fea:	f103 0304 	add.w	r3, r3, #4
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	b298      	uxth	r0, r3
 8000ff2:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	b29c      	uxth	r4, r3
 8000ffa:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8000ffe:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8001002:	f102 0214 	add.w	r2, r2, #20
 8001006:	6812      	ldr	r2, [r2, #0]
 8001008:	0091      	lsls	r1, r2, #2
 800100a:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 800100e:	f102 0210 	add.w	r2, r2, #16
 8001012:	6812      	ldr	r2, [r2, #0]
 8001014:	440a      	add	r2, r1
 8001016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	461a      	mov	r2, r3
 800101e:	4621      	mov	r1, r4
 8001020:	f001 fcaa 	bl	8002978 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8001024:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8001028:	f103 0310 	add.w	r3, r3, #16
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	3301      	adds	r3, #1
 8001030:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8001034:	f102 0210 	add.w	r2, r2, #16
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 800103e:	f103 0310 	add.w	r3, r3, #16
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b03      	cmp	r3, #3
 8001046:	ddb2      	ble.n	8000fae <draw_text+0xde6>
	for (int i=0; i<10; i++) {
 8001048:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 800104c:	f103 0314 	add.w	r3, r3, #20
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	3301      	adds	r3, #1
 8001054:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8001058:	f102 0214 	add.w	r2, r2, #20
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8001062:	f103 0314 	add.w	r3, r3, #20
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b09      	cmp	r3, #9
 800106a:	dd99      	ble.n	8000fa0 <draw_text+0xdd8>
		}
	}
	break;
 800106c:	f000 bda6 	b.w	8001bbc <draw_text+0x19f4>


	case 'N':
	for (int i=0; i<10; i++) {
 8001070:	2300      	movs	r3, #0
 8001072:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8001076:	f102 020c 	add.w	r2, r2, #12
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	e062      	b.n	8001144 <draw_text+0xf7c>
		for (int j=0; j<4; j++) {
 800107e:	2300      	movs	r3, #0
 8001080:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8001084:	f102 0208 	add.w	r2, r2, #8
 8001088:	6013      	str	r3, [r2, #0]
 800108a:	e049      	b.n	8001120 <draw_text+0xf58>

			int x_pos = j + x;
 800108c:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 8001090:	f102 021c 	add.w	r2, r2, #28
 8001094:	f107 0318 	add.w	r3, r7, #24
 8001098:	3b0c      	subs	r3, #12
 800109a:	f507 518d 	add.w	r1, r7, #4512	; 0x11a0
 800109e:	f101 0108 	add.w	r1, r1, #8
 80010a2:	6809      	ldr	r1, [r1, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	440b      	add	r3, r1
 80010a8:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80010aa:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 80010ae:	f102 0218 	add.w	r2, r2, #24
 80010b2:	f107 0318 	add.w	r3, r7, #24
 80010b6:	3b10      	subs	r3, #16
 80010b8:	f507 518d 	add.w	r1, r7, #4512	; 0x11a0
 80010bc:	f101 010c 	add.w	r1, r1, #12
 80010c0:	6809      	ldr	r1, [r1, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	440b      	add	r3, r1
 80010c6:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_N[i][j]);
 80010c8:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 80010cc:	f103 031c 	add.w	r3, r3, #28
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	b298      	uxth	r0, r3
 80010d4:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 80010d8:	f103 0318 	add.w	r3, r3, #24
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	b29c      	uxth	r4, r3
 80010e0:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 80010e4:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 80010e8:	f102 020c 	add.w	r2, r2, #12
 80010ec:	6812      	ldr	r2, [r2, #0]
 80010ee:	0091      	lsls	r1, r2, #2
 80010f0:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 80010f4:	f102 0208 	add.w	r2, r2, #8
 80010f8:	6812      	ldr	r2, [r2, #0]
 80010fa:	440a      	add	r2, r1
 80010fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001100:	b2db      	uxtb	r3, r3
 8001102:	461a      	mov	r2, r3
 8001104:	4621      	mov	r1, r4
 8001106:	f001 fc37 	bl	8002978 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 800110a:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 800110e:	f103 0308 	add.w	r3, r3, #8
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	3301      	adds	r3, #1
 8001116:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 800111a:	f102 0208 	add.w	r2, r2, #8
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8001124:	f103 0308 	add.w	r3, r3, #8
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b03      	cmp	r3, #3
 800112c:	ddae      	ble.n	800108c <draw_text+0xec4>
	for (int i=0; i<10; i++) {
 800112e:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8001132:	f103 030c 	add.w	r3, r3, #12
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 800113e:	f102 020c 	add.w	r2, r2, #12
 8001142:	6013      	str	r3, [r2, #0]
 8001144:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8001148:	f103 030c 	add.w	r3, r3, #12
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b09      	cmp	r3, #9
 8001150:	dd95      	ble.n	800107e <draw_text+0xeb6>
		}
	}
	break;
 8001152:	f000 bd33 	b.w	8001bbc <draw_text+0x19f4>


	case 'O':
	for (int i=0; i<10; i++) {
 8001156:	2300      	movs	r3, #0
 8001158:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 800115c:	f102 0204 	add.w	r2, r2, #4
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e056      	b.n	8001212 <draw_text+0x104a>
		for (int j=0; j<4; j++) {
 8001164:	2300      	movs	r3, #0
 8001166:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	e041      	b.n	80011f2 <draw_text+0x102a>

			int x_pos = j + x;
 800116e:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 8001172:	f102 0214 	add.w	r2, r2, #20
 8001176:	f107 0318 	add.w	r3, r7, #24
 800117a:	3b0c      	subs	r3, #12
 800117c:	f507 518d 	add.w	r1, r7, #4512	; 0x11a0
 8001180:	6809      	ldr	r1, [r1, #0]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	440b      	add	r3, r1
 8001186:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001188:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 800118c:	f102 0210 	add.w	r2, r2, #16
 8001190:	f107 0318 	add.w	r3, r7, #24
 8001194:	3b10      	subs	r3, #16
 8001196:	f507 518d 	add.w	r1, r7, #4512	; 0x11a0
 800119a:	f101 0104 	add.w	r1, r1, #4
 800119e:	6809      	ldr	r1, [r1, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	440b      	add	r3, r1
 80011a4:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_O[i][j]);
 80011a6:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 80011aa:	f103 0314 	add.w	r3, r3, #20
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	b298      	uxth	r0, r3
 80011b2:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 80011b6:	f103 0310 	add.w	r3, r3, #16
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	b29c      	uxth	r4, r3
 80011be:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80011c2:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 80011c6:	f102 0204 	add.w	r2, r2, #4
 80011ca:	6812      	ldr	r2, [r2, #0]
 80011cc:	0091      	lsls	r1, r2, #2
 80011ce:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 80011d2:	6812      	ldr	r2, [r2, #0]
 80011d4:	440a      	add	r2, r1
 80011d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	461a      	mov	r2, r3
 80011de:	4621      	mov	r1, r4
 80011e0:	f001 fbca 	bl	8002978 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 80011e4:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	3301      	adds	r3, #1
 80011ec:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	ddb8      	ble.n	800116e <draw_text+0xfa6>
	for (int i=0; i<10; i++) {
 80011fc:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8001200:	f103 0304 	add.w	r3, r3, #4
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	3301      	adds	r3, #1
 8001208:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 800120c:	f102 0204 	add.w	r2, r2, #4
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8001216:	f103 0304 	add.w	r3, r3, #4
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	2b09      	cmp	r3, #9
 800121e:	dda1      	ble.n	8001164 <draw_text+0xf9c>
		}
	}
	break;
 8001220:	f000 bccc 	b.w	8001bbc <draw_text+0x19f4>


	case 'P':
	for (int i=0; i<10; i++) {
 8001224:	2300      	movs	r3, #0
 8001226:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 800122a:	f102 021c 	add.w	r2, r2, #28
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	e062      	b.n	80012f8 <draw_text+0x1130>
		for (int j=0; j<4; j++) {
 8001232:	2300      	movs	r3, #0
 8001234:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 8001238:	f102 0218 	add.w	r2, r2, #24
 800123c:	6013      	str	r3, [r2, #0]
 800123e:	e049      	b.n	80012d4 <draw_text+0x110c>

			int x_pos = j + x;
 8001240:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 8001244:	f102 020c 	add.w	r2, r2, #12
 8001248:	f107 0318 	add.w	r3, r7, #24
 800124c:	3b0c      	subs	r3, #12
 800124e:	f507 518c 	add.w	r1, r7, #4480	; 0x1180
 8001252:	f101 0118 	add.w	r1, r1, #24
 8001256:	6809      	ldr	r1, [r1, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	440b      	add	r3, r1
 800125c:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 800125e:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 8001262:	f102 0208 	add.w	r2, r2, #8
 8001266:	f107 0318 	add.w	r3, r7, #24
 800126a:	3b10      	subs	r3, #16
 800126c:	f507 518c 	add.w	r1, r7, #4480	; 0x1180
 8001270:	f101 011c 	add.w	r1, r1, #28
 8001274:	6809      	ldr	r1, [r1, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	440b      	add	r3, r1
 800127a:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_P[i][j]);
 800127c:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8001280:	f103 030c 	add.w	r3, r3, #12
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	b298      	uxth	r0, r3
 8001288:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 800128c:	f103 0308 	add.w	r3, r3, #8
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	b29c      	uxth	r4, r3
 8001294:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8001298:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 800129c:	f102 021c 	add.w	r2, r2, #28
 80012a0:	6812      	ldr	r2, [r2, #0]
 80012a2:	0091      	lsls	r1, r2, #2
 80012a4:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 80012a8:	f102 0218 	add.w	r2, r2, #24
 80012ac:	6812      	ldr	r2, [r2, #0]
 80012ae:	440a      	add	r2, r1
 80012b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	461a      	mov	r2, r3
 80012b8:	4621      	mov	r1, r4
 80012ba:	f001 fb5d 	bl	8002978 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 80012be:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80012c2:	f103 0318 	add.w	r3, r3, #24
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	3301      	adds	r3, #1
 80012ca:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 80012ce:	f102 0218 	add.w	r2, r2, #24
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80012d8:	f103 0318 	add.w	r3, r3, #24
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	ddae      	ble.n	8001240 <draw_text+0x1078>
	for (int i=0; i<10; i++) {
 80012e2:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80012e6:	f103 031c 	add.w	r3, r3, #28
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	3301      	adds	r3, #1
 80012ee:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 80012f2:	f102 021c 	add.w	r2, r2, #28
 80012f6:	6013      	str	r3, [r2, #0]
 80012f8:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80012fc:	f103 031c 	add.w	r3, r3, #28
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b09      	cmp	r3, #9
 8001304:	dd95      	ble.n	8001232 <draw_text+0x106a>
		}
	}
	break;
 8001306:	f000 bc59 	b.w	8001bbc <draw_text+0x19f4>


	case 'Q':
	for (int i=0; i<10; i++) {
 800130a:	2300      	movs	r3, #0
 800130c:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 8001310:	f102 0214 	add.w	r2, r2, #20
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e05e      	b.n	80013d6 <draw_text+0x120e>
		for (int j=0; j<4; j++) {
 8001318:	2300      	movs	r3, #0
 800131a:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 800131e:	f102 0210 	add.w	r2, r2, #16
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	e045      	b.n	80013b2 <draw_text+0x11ea>

			int x_pos = j + x;
 8001326:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 800132a:	f102 0204 	add.w	r2, r2, #4
 800132e:	f107 0318 	add.w	r3, r7, #24
 8001332:	3b0c      	subs	r3, #12
 8001334:	f507 518c 	add.w	r1, r7, #4480	; 0x1180
 8001338:	f101 0110 	add.w	r1, r1, #16
 800133c:	6809      	ldr	r1, [r1, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	440b      	add	r3, r1
 8001342:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001344:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 8001348:	f107 0318 	add.w	r3, r7, #24
 800134c:	3b10      	subs	r3, #16
 800134e:	f507 518c 	add.w	r1, r7, #4480	; 0x1180
 8001352:	f101 0114 	add.w	r1, r1, #20
 8001356:	6809      	ldr	r1, [r1, #0]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	440b      	add	r3, r1
 800135c:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_Q[i][j]);
 800135e:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8001362:	f103 0304 	add.w	r3, r3, #4
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	b298      	uxth	r0, r3
 800136a:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	b29c      	uxth	r4, r3
 8001372:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8001376:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 800137a:	f102 0214 	add.w	r2, r2, #20
 800137e:	6812      	ldr	r2, [r2, #0]
 8001380:	0091      	lsls	r1, r2, #2
 8001382:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 8001386:	f102 0210 	add.w	r2, r2, #16
 800138a:	6812      	ldr	r2, [r2, #0]
 800138c:	440a      	add	r2, r1
 800138e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001392:	b2db      	uxtb	r3, r3
 8001394:	461a      	mov	r2, r3
 8001396:	4621      	mov	r1, r4
 8001398:	f001 faee 	bl	8002978 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 800139c:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80013a0:	f103 0310 	add.w	r3, r3, #16
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	3301      	adds	r3, #1
 80013a8:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 80013ac:	f102 0210 	add.w	r2, r2, #16
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80013b6:	f103 0310 	add.w	r3, r3, #16
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b03      	cmp	r3, #3
 80013be:	ddb2      	ble.n	8001326 <draw_text+0x115e>
	for (int i=0; i<10; i++) {
 80013c0:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80013c4:	f103 0314 	add.w	r3, r3, #20
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	3301      	adds	r3, #1
 80013cc:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 80013d0:	f102 0214 	add.w	r2, r2, #20
 80013d4:	6013      	str	r3, [r2, #0]
 80013d6:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80013da:	f103 0314 	add.w	r3, r3, #20
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b09      	cmp	r3, #9
 80013e2:	dd99      	ble.n	8001318 <draw_text+0x1150>
		}
	}
	break;
 80013e4:	e3ea      	b.n	8001bbc <draw_text+0x19f4>


	case 'R':
	for (int i=0; i<10; i++) {
 80013e6:	2300      	movs	r3, #0
 80013e8:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 80013ec:	f102 020c 	add.w	r2, r2, #12
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	e062      	b.n	80014ba <draw_text+0x12f2>
		for (int j=0; j<4; j++) {
 80013f4:	2300      	movs	r3, #0
 80013f6:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 80013fa:	f102 0208 	add.w	r2, r2, #8
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	e049      	b.n	8001496 <draw_text+0x12ce>

			int x_pos = j + x;
 8001402:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8001406:	f102 021c 	add.w	r2, r2, #28
 800140a:	f107 0318 	add.w	r3, r7, #24
 800140e:	3b0c      	subs	r3, #12
 8001410:	f507 518c 	add.w	r1, r7, #4480	; 0x1180
 8001414:	f101 0108 	add.w	r1, r1, #8
 8001418:	6809      	ldr	r1, [r1, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	440b      	add	r3, r1
 800141e:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001420:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8001424:	f102 0218 	add.w	r2, r2, #24
 8001428:	f107 0318 	add.w	r3, r7, #24
 800142c:	3b10      	subs	r3, #16
 800142e:	f507 518c 	add.w	r1, r7, #4480	; 0x1180
 8001432:	f101 010c 	add.w	r1, r1, #12
 8001436:	6809      	ldr	r1, [r1, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	440b      	add	r3, r1
 800143c:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_R[i][j]);
 800143e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8001442:	f103 031c 	add.w	r3, r3, #28
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	b298      	uxth	r0, r3
 800144a:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800144e:	f103 0318 	add.w	r3, r3, #24
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	b29c      	uxth	r4, r3
 8001456:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800145a:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 800145e:	f102 020c 	add.w	r2, r2, #12
 8001462:	6812      	ldr	r2, [r2, #0]
 8001464:	0091      	lsls	r1, r2, #2
 8001466:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 800146a:	f102 0208 	add.w	r2, r2, #8
 800146e:	6812      	ldr	r2, [r2, #0]
 8001470:	440a      	add	r2, r1
 8001472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	4621      	mov	r1, r4
 800147c:	f001 fa7c 	bl	8002978 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8001480:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001484:	f103 0308 	add.w	r3, r3, #8
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	3301      	adds	r3, #1
 800148c:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 8001490:	f102 0208 	add.w	r2, r2, #8
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 800149a:	f103 0308 	add.w	r3, r3, #8
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	ddae      	ble.n	8001402 <draw_text+0x123a>
	for (int i=0; i<10; i++) {
 80014a4:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80014a8:	f103 030c 	add.w	r3, r3, #12
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	3301      	adds	r3, #1
 80014b0:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 80014b4:	f102 020c 	add.w	r2, r2, #12
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80014be:	f103 030c 	add.w	r3, r3, #12
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b09      	cmp	r3, #9
 80014c6:	dd95      	ble.n	80013f4 <draw_text+0x122c>
		}
	}
	break;
 80014c8:	e378      	b.n	8001bbc <draw_text+0x19f4>


	case 'S':
	for (int i=0; i<10; i++) {
 80014ca:	2300      	movs	r3, #0
 80014cc:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 80014d0:	f102 0204 	add.w	r2, r2, #4
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	e056      	b.n	8001586 <draw_text+0x13be>
		for (int j=0; j<4; j++) {
 80014d8:	2300      	movs	r3, #0
 80014da:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 80014de:	6013      	str	r3, [r2, #0]
 80014e0:	e041      	b.n	8001566 <draw_text+0x139e>

			int x_pos = j + x;
 80014e2:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 80014e6:	f102 0214 	add.w	r2, r2, #20
 80014ea:	f107 0318 	add.w	r3, r7, #24
 80014ee:	3b0c      	subs	r3, #12
 80014f0:	f507 518c 	add.w	r1, r7, #4480	; 0x1180
 80014f4:	6809      	ldr	r1, [r1, #0]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	440b      	add	r3, r1
 80014fa:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80014fc:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8001500:	f102 0210 	add.w	r2, r2, #16
 8001504:	f107 0318 	add.w	r3, r7, #24
 8001508:	3b10      	subs	r3, #16
 800150a:	f507 518c 	add.w	r1, r7, #4480	; 0x1180
 800150e:	f101 0104 	add.w	r1, r1, #4
 8001512:	6809      	ldr	r1, [r1, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	440b      	add	r3, r1
 8001518:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_S[i][j]);
 800151a:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800151e:	f103 0314 	add.w	r3, r3, #20
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	b298      	uxth	r0, r3
 8001526:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800152a:	f103 0310 	add.w	r3, r3, #16
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	b29c      	uxth	r4, r3
 8001532:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8001536:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 800153a:	f102 0204 	add.w	r2, r2, #4
 800153e:	6812      	ldr	r2, [r2, #0]
 8001540:	0091      	lsls	r1, r2, #2
 8001542:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 8001546:	6812      	ldr	r2, [r2, #0]
 8001548:	440a      	add	r2, r1
 800154a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800154e:	b2db      	uxtb	r3, r3
 8001550:	461a      	mov	r2, r3
 8001552:	4621      	mov	r1, r4
 8001554:	f001 fa10 	bl	8002978 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8001558:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	3301      	adds	r3, #1
 8001560:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2b03      	cmp	r3, #3
 800156e:	ddb8      	ble.n	80014e2 <draw_text+0x131a>
	for (int i=0; i<10; i++) {
 8001570:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8001574:	f103 0304 	add.w	r3, r3, #4
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	3301      	adds	r3, #1
 800157c:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 8001580:	f102 0204 	add.w	r2, r2, #4
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 800158a:	f103 0304 	add.w	r3, r3, #4
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b09      	cmp	r3, #9
 8001592:	dda1      	ble.n	80014d8 <draw_text+0x1310>
		}
	}
	break;
 8001594:	e312      	b.n	8001bbc <draw_text+0x19f4>


	case 'T':
	for (int i=0; i<10; i++) {
 8001596:	2300      	movs	r3, #0
 8001598:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 800159c:	f102 021c 	add.w	r2, r2, #28
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	e064      	b.n	800166e <draw_text+0x14a6>
		for (int j=0; j<5; j++) {
 80015a4:	2300      	movs	r3, #0
 80015a6:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80015aa:	f102 0218 	add.w	r2, r2, #24
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	e04b      	b.n	800164a <draw_text+0x1482>

			int x_pos = j + x;
 80015b2:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 80015b6:	f102 020c 	add.w	r2, r2, #12
 80015ba:	f107 0318 	add.w	r3, r7, #24
 80015be:	3b0c      	subs	r3, #12
 80015c0:	f507 518b 	add.w	r1, r7, #4448	; 0x1160
 80015c4:	f101 0118 	add.w	r1, r1, #24
 80015c8:	6809      	ldr	r1, [r1, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	440b      	add	r3, r1
 80015ce:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80015d0:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 80015d4:	f102 0208 	add.w	r2, r2, #8
 80015d8:	f107 0318 	add.w	r3, r7, #24
 80015dc:	3b10      	subs	r3, #16
 80015de:	f507 518b 	add.w	r1, r7, #4448	; 0x1160
 80015e2:	f101 011c 	add.w	r1, r1, #28
 80015e6:	6809      	ldr	r1, [r1, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	440b      	add	r3, r1
 80015ec:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_T[i][j]);
 80015ee:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80015f2:	f103 030c 	add.w	r3, r3, #12
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	b298      	uxth	r0, r3
 80015fa:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80015fe:	f103 0308 	add.w	r3, r3, #8
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	b29c      	uxth	r4, r3
 8001606:	f507 717e 	add.w	r1, r7, #1016	; 0x3f8
 800160a:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 800160e:	f103 031c 	add.w	r3, r3, #28
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4613      	mov	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 800161e:	f102 0218 	add.w	r2, r2, #24
 8001622:	6812      	ldr	r2, [r2, #0]
 8001624:	4413      	add	r3, r2
 8001626:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800162a:	b2db      	uxtb	r3, r3
 800162c:	461a      	mov	r2, r3
 800162e:	4621      	mov	r1, r4
 8001630:	f001 f9a2 	bl	8002978 <UB_VGA_SetPixel>
		for (int j=0; j<5; j++) {
 8001634:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8001638:	f103 0318 	add.w	r3, r3, #24
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	3301      	adds	r3, #1
 8001640:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8001644:	f102 0218 	add.w	r2, r2, #24
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 800164e:	f103 0318 	add.w	r3, r3, #24
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b04      	cmp	r3, #4
 8001656:	ddac      	ble.n	80015b2 <draw_text+0x13ea>
	for (int i=0; i<10; i++) {
 8001658:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 800165c:	f103 031c 	add.w	r3, r3, #28
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	3301      	adds	r3, #1
 8001664:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8001668:	f102 021c 	add.w	r2, r2, #28
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8001672:	f103 031c 	add.w	r3, r3, #28
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b09      	cmp	r3, #9
 800167a:	dd93      	ble.n	80015a4 <draw_text+0x13dc>
		}
	}
	break;
 800167c:	e29e      	b.n	8001bbc <draw_text+0x19f4>


	case 'U':
	for (int i=0; i<10; i++) {
 800167e:	2300      	movs	r3, #0
 8001680:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8001684:	f102 0214 	add.w	r2, r2, #20
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	e05e      	b.n	800174a <draw_text+0x1582>
		for (int j=0; j<4; j++) {
 800168c:	2300      	movs	r3, #0
 800168e:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8001692:	f102 0210 	add.w	r2, r2, #16
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	e045      	b.n	8001726 <draw_text+0x155e>

			int x_pos = j + x;
 800169a:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800169e:	f102 0204 	add.w	r2, r2, #4
 80016a2:	f107 0318 	add.w	r3, r7, #24
 80016a6:	3b0c      	subs	r3, #12
 80016a8:	f507 518b 	add.w	r1, r7, #4448	; 0x1160
 80016ac:	f101 0110 	add.w	r1, r1, #16
 80016b0:	6809      	ldr	r1, [r1, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	440b      	add	r3, r1
 80016b6:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80016b8:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 80016bc:	f107 0318 	add.w	r3, r7, #24
 80016c0:	3b10      	subs	r3, #16
 80016c2:	f507 518b 	add.w	r1, r7, #4448	; 0x1160
 80016c6:	f101 0114 	add.w	r1, r1, #20
 80016ca:	6809      	ldr	r1, [r1, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	440b      	add	r3, r1
 80016d0:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_U[i][j]);
 80016d2:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80016d6:	f103 0304 	add.w	r3, r3, #4
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	b298      	uxth	r0, r3
 80016de:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	b29c      	uxth	r4, r3
 80016e6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80016ea:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80016ee:	f102 0214 	add.w	r2, r2, #20
 80016f2:	6812      	ldr	r2, [r2, #0]
 80016f4:	0091      	lsls	r1, r2, #2
 80016f6:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80016fa:	f102 0210 	add.w	r2, r2, #16
 80016fe:	6812      	ldr	r2, [r2, #0]
 8001700:	440a      	add	r2, r1
 8001702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001706:	b2db      	uxtb	r3, r3
 8001708:	461a      	mov	r2, r3
 800170a:	4621      	mov	r1, r4
 800170c:	f001 f934 	bl	8002978 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8001710:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8001714:	f103 0310 	add.w	r3, r3, #16
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	3301      	adds	r3, #1
 800171c:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8001720:	f102 0210 	add.w	r2, r2, #16
 8001724:	6013      	str	r3, [r2, #0]
 8001726:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 800172a:	f103 0310 	add.w	r3, r3, #16
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b03      	cmp	r3, #3
 8001732:	ddb2      	ble.n	800169a <draw_text+0x14d2>
	for (int i=0; i<10; i++) {
 8001734:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8001738:	f103 0314 	add.w	r3, r3, #20
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	3301      	adds	r3, #1
 8001740:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8001744:	f102 0214 	add.w	r2, r2, #20
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 800174e:	f103 0314 	add.w	r3, r3, #20
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b09      	cmp	r3, #9
 8001756:	dd99      	ble.n	800168c <draw_text+0x14c4>
		}
	}
	break;
 8001758:	e230      	b.n	8001bbc <draw_text+0x19f4>


	case 'V':
	for (int i=0; i<10; i++) {
 800175a:	2300      	movs	r3, #0
 800175c:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8001760:	f102 020c 	add.w	r2, r2, #12
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	e062      	b.n	800182e <draw_text+0x1666>
		for (int j=0; j<4; j++) {
 8001768:	2300      	movs	r3, #0
 800176a:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 800176e:	f102 0208 	add.w	r2, r2, #8
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	e049      	b.n	800180a <draw_text+0x1642>

			int x_pos = j + x;
 8001776:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800177a:	f102 021c 	add.w	r2, r2, #28
 800177e:	f107 0318 	add.w	r3, r7, #24
 8001782:	3b0c      	subs	r3, #12
 8001784:	f507 518b 	add.w	r1, r7, #4448	; 0x1160
 8001788:	f101 0108 	add.w	r1, r1, #8
 800178c:	6809      	ldr	r1, [r1, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	440b      	add	r3, r1
 8001792:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001794:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001798:	f102 0218 	add.w	r2, r2, #24
 800179c:	f107 0318 	add.w	r3, r7, #24
 80017a0:	3b10      	subs	r3, #16
 80017a2:	f507 518b 	add.w	r1, r7, #4448	; 0x1160
 80017a6:	f101 010c 	add.w	r1, r1, #12
 80017aa:	6809      	ldr	r1, [r1, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	440b      	add	r3, r1
 80017b0:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_V[i][j]);
 80017b2:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80017b6:	f103 031c 	add.w	r3, r3, #28
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	b298      	uxth	r0, r3
 80017be:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 80017c2:	f103 0318 	add.w	r3, r3, #24
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	b29c      	uxth	r4, r3
 80017ca:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80017ce:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80017d2:	f102 020c 	add.w	r2, r2, #12
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	0091      	lsls	r1, r2, #2
 80017da:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80017de:	f102 0208 	add.w	r2, r2, #8
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	440a      	add	r2, r1
 80017e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	461a      	mov	r2, r3
 80017ee:	4621      	mov	r1, r4
 80017f0:	f001 f8c2 	bl	8002978 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 80017f4:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80017f8:	f103 0308 	add.w	r3, r3, #8
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	3301      	adds	r3, #1
 8001800:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8001804:	f102 0208 	add.w	r2, r2, #8
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 800180e:	f103 0308 	add.w	r3, r3, #8
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b03      	cmp	r3, #3
 8001816:	ddae      	ble.n	8001776 <draw_text+0x15ae>
	for (int i=0; i<10; i++) {
 8001818:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 800181c:	f103 030c 	add.w	r3, r3, #12
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	3301      	adds	r3, #1
 8001824:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8001828:	f102 020c 	add.w	r2, r2, #12
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8001832:	f103 030c 	add.w	r3, r3, #12
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b09      	cmp	r3, #9
 800183a:	dd95      	ble.n	8001768 <draw_text+0x15a0>
		}
	}
	break;
 800183c:	e1be      	b.n	8001bbc <draw_text+0x19f4>


	case 'W':
	for (int i=0; i<10; i++) {
 800183e:	2300      	movs	r3, #0
 8001840:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8001844:	f102 0204 	add.w	r2, r2, #4
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	e056      	b.n	80018fa <draw_text+0x1732>
		for (int j=0; j<4; j++) {
 800184c:	2300      	movs	r3, #0
 800184e:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	e041      	b.n	80018da <draw_text+0x1712>

			int x_pos = j + x;
 8001856:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800185a:	f102 0214 	add.w	r2, r2, #20
 800185e:	f107 0318 	add.w	r3, r7, #24
 8001862:	3b0c      	subs	r3, #12
 8001864:	f507 518b 	add.w	r1, r7, #4448	; 0x1160
 8001868:	6809      	ldr	r1, [r1, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	440b      	add	r3, r1
 800186e:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001870:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001874:	f102 0210 	add.w	r2, r2, #16
 8001878:	f107 0318 	add.w	r3, r7, #24
 800187c:	3b10      	subs	r3, #16
 800187e:	f507 518b 	add.w	r1, r7, #4448	; 0x1160
 8001882:	f101 0104 	add.w	r1, r1, #4
 8001886:	6809      	ldr	r1, [r1, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	440b      	add	r3, r1
 800188c:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_W[i][j]);
 800188e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001892:	f103 0314 	add.w	r3, r3, #20
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	b298      	uxth	r0, r3
 800189a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800189e:	f103 0310 	add.w	r3, r3, #16
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	b29c      	uxth	r4, r3
 80018a6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80018aa:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80018ae:	f102 0204 	add.w	r2, r2, #4
 80018b2:	6812      	ldr	r2, [r2, #0]
 80018b4:	0091      	lsls	r1, r2, #2
 80018b6:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80018ba:	6812      	ldr	r2, [r2, #0]
 80018bc:	440a      	add	r2, r1
 80018be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	461a      	mov	r2, r3
 80018c6:	4621      	mov	r1, r4
 80018c8:	f001 f856 	bl	8002978 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 80018cc:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	3301      	adds	r3, #1
 80018d4:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	ddb8      	ble.n	8001856 <draw_text+0x168e>
	for (int i=0; i<10; i++) {
 80018e4:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80018e8:	f103 0304 	add.w	r3, r3, #4
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	3301      	adds	r3, #1
 80018f0:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80018f4:	f102 0204 	add.w	r2, r2, #4
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 80018fe:	f103 0304 	add.w	r3, r3, #4
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b09      	cmp	r3, #9
 8001906:	dda1      	ble.n	800184c <draw_text+0x1684>
		}
	}
	break;
 8001908:	e158      	b.n	8001bbc <draw_text+0x19f4>


	case 'X':
	for (int i=0; i<10; i++) {
 800190a:	2300      	movs	r3, #0
 800190c:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8001910:	f102 021c 	add.w	r2, r2, #28
 8001914:	6013      	str	r3, [r2, #0]
 8001916:	e062      	b.n	80019de <draw_text+0x1816>
		for (int j=0; j<4; j++) {
 8001918:	2300      	movs	r3, #0
 800191a:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 800191e:	f102 0218 	add.w	r2, r2, #24
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	e049      	b.n	80019ba <draw_text+0x17f2>

			int x_pos = j + x;
 8001926:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800192a:	f102 020c 	add.w	r2, r2, #12
 800192e:	f107 0318 	add.w	r3, r7, #24
 8001932:	3b0c      	subs	r3, #12
 8001934:	f507 518a 	add.w	r1, r7, #4416	; 0x1140
 8001938:	f101 0118 	add.w	r1, r1, #24
 800193c:	6809      	ldr	r1, [r1, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	440b      	add	r3, r1
 8001942:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001944:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001948:	f102 0208 	add.w	r2, r2, #8
 800194c:	f107 0318 	add.w	r3, r7, #24
 8001950:	3b10      	subs	r3, #16
 8001952:	f507 518a 	add.w	r1, r7, #4416	; 0x1140
 8001956:	f101 011c 	add.w	r1, r1, #28
 800195a:	6809      	ldr	r1, [r1, #0]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	440b      	add	r3, r1
 8001960:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_X[i][j]);
 8001962:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001966:	f103 030c 	add.w	r3, r3, #12
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	b298      	uxth	r0, r3
 800196e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001972:	f103 0308 	add.w	r3, r3, #8
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	b29c      	uxth	r4, r3
 800197a:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800197e:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8001982:	f102 021c 	add.w	r2, r2, #28
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	0091      	lsls	r1, r2, #2
 800198a:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 800198e:	f102 0218 	add.w	r2, r2, #24
 8001992:	6812      	ldr	r2, [r2, #0]
 8001994:	440a      	add	r2, r1
 8001996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800199a:	b2db      	uxtb	r3, r3
 800199c:	461a      	mov	r2, r3
 800199e:	4621      	mov	r1, r4
 80019a0:	f000 ffea 	bl	8002978 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 80019a4:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80019a8:	f103 0318 	add.w	r3, r3, #24
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 80019b4:	f102 0218 	add.w	r2, r2, #24
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80019be:	f103 0318 	add.w	r3, r3, #24
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b03      	cmp	r3, #3
 80019c6:	ddae      	ble.n	8001926 <draw_text+0x175e>
	for (int i=0; i<10; i++) {
 80019c8:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80019cc:	f103 031c 	add.w	r3, r3, #28
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	3301      	adds	r3, #1
 80019d4:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 80019d8:	f102 021c 	add.w	r2, r2, #28
 80019dc:	6013      	str	r3, [r2, #0]
 80019de:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80019e2:	f103 031c 	add.w	r3, r3, #28
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b09      	cmp	r3, #9
 80019ea:	dd95      	ble.n	8001918 <draw_text+0x1750>
		}
	}
	break;
 80019ec:	e0e6      	b.n	8001bbc <draw_text+0x19f4>


	case 'Y':
	for (int i=0; i<10; i++) {
 80019ee:	2300      	movs	r3, #0
 80019f0:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 80019f4:	f102 0214 	add.w	r2, r2, #20
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	e061      	b.n	8001ac0 <draw_text+0x18f8>
		for (int j=0; j<5; j++) {
 80019fc:	2300      	movs	r3, #0
 80019fe:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8001a02:	f102 0210 	add.w	r2, r2, #16
 8001a06:	6013      	str	r3, [r2, #0]
 8001a08:	e048      	b.n	8001a9c <draw_text+0x18d4>

			int x_pos = j + x;
 8001a0a:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001a0e:	f102 0204 	add.w	r2, r2, #4
 8001a12:	f107 0318 	add.w	r3, r7, #24
 8001a16:	3b0c      	subs	r3, #12
 8001a18:	f507 518a 	add.w	r1, r7, #4416	; 0x1140
 8001a1c:	f101 0110 	add.w	r1, r1, #16
 8001a20:	6809      	ldr	r1, [r1, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	440b      	add	r3, r1
 8001a26:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001a28:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8001a2c:	f107 0318 	add.w	r3, r7, #24
 8001a30:	3b10      	subs	r3, #16
 8001a32:	f507 518a 	add.w	r1, r7, #4416	; 0x1140
 8001a36:	f101 0114 	add.w	r1, r1, #20
 8001a3a:	6809      	ldr	r1, [r1, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	440b      	add	r3, r1
 8001a40:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_Y[i][j]);
 8001a42:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001a46:	f103 0304 	add.w	r3, r3, #4
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	b298      	uxth	r0, r3
 8001a4e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	b29c      	uxth	r4, r3
 8001a56:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 8001a5a:	3a08      	subs	r2, #8
 8001a5c:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8001a60:	f103 0314 	add.w	r3, r3, #20
 8001a64:	6819      	ldr	r1, [r3, #0]
 8001a66:	460b      	mov	r3, r1
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	f507 518a 	add.w	r1, r7, #4416	; 0x1140
 8001a70:	f101 0110 	add.w	r1, r1, #16
 8001a74:	6809      	ldr	r1, [r1, #0]
 8001a76:	440b      	add	r3, r1
 8001a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4621      	mov	r1, r4
 8001a82:	f000 ff79 	bl	8002978 <UB_VGA_SetPixel>
		for (int j=0; j<5; j++) {
 8001a86:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8001a8a:	f103 0310 	add.w	r3, r3, #16
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	3301      	adds	r3, #1
 8001a92:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8001a96:	f102 0210 	add.w	r2, r2, #16
 8001a9a:	6013      	str	r3, [r2, #0]
 8001a9c:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8001aa0:	f103 0310 	add.w	r3, r3, #16
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	ddaf      	ble.n	8001a0a <draw_text+0x1842>
	for (int i=0; i<10; i++) {
 8001aaa:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8001aae:	f103 0314 	add.w	r3, r3, #20
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8001aba:	f102 0214 	add.w	r2, r2, #20
 8001abe:	6013      	str	r3, [r2, #0]
 8001ac0:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8001ac4:	f103 0314 	add.w	r3, r3, #20
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2b09      	cmp	r3, #9
 8001acc:	dd96      	ble.n	80019fc <draw_text+0x1834>
		}
	}
	break;
 8001ace:	e075      	b.n	8001bbc <draw_text+0x19f4>


	case 'Z':
	for (int i=0; i<10; i++) {
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8001ad6:	f102 020c 	add.w	r2, r2, #12
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	e063      	b.n	8001ba6 <draw_text+0x19de>
		for (int j=0; j<4; j++) {
 8001ade:	2300      	movs	r3, #0
 8001ae0:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8001ae4:	f102 0208 	add.w	r2, r2, #8
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	e04a      	b.n	8001b82 <draw_text+0x19ba>

			int x_pos = j + x;
 8001aec:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001af0:	f102 021c 	add.w	r2, r2, #28
 8001af4:	f107 0318 	add.w	r3, r7, #24
 8001af8:	3b0c      	subs	r3, #12
 8001afa:	f507 518a 	add.w	r1, r7, #4416	; 0x1140
 8001afe:	f101 0108 	add.w	r1, r1, #8
 8001b02:	6809      	ldr	r1, [r1, #0]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	440b      	add	r3, r1
 8001b08:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 8001b0a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001b0e:	f102 0218 	add.w	r2, r2, #24
 8001b12:	f107 0318 	add.w	r3, r7, #24
 8001b16:	3b10      	subs	r3, #16
 8001b18:	f507 518a 	add.w	r1, r7, #4416	; 0x1140
 8001b1c:	f101 010c 	add.w	r1, r1, #12
 8001b20:	6809      	ldr	r1, [r1, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	440b      	add	r3, r1
 8001b26:	6013      	str	r3, [r2, #0]

			UB_VGA_SetPixel(x_pos, y_pos, letter_Z[i][j]);
 8001b28:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001b2c:	f103 031c 	add.w	r3, r3, #28
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	b298      	uxth	r0, r3
 8001b34:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001b38:	f103 0318 	add.w	r3, r3, #24
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	b29c      	uxth	r4, r3
 8001b40:	f107 0318 	add.w	r3, r7, #24
 8001b44:	3b08      	subs	r3, #8
 8001b46:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8001b4a:	f102 020c 	add.w	r2, r2, #12
 8001b4e:	6812      	ldr	r2, [r2, #0]
 8001b50:	0091      	lsls	r1, r2, #2
 8001b52:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8001b56:	f102 0208 	add.w	r2, r2, #8
 8001b5a:	6812      	ldr	r2, [r2, #0]
 8001b5c:	440a      	add	r2, r1
 8001b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	461a      	mov	r2, r3
 8001b66:	4621      	mov	r1, r4
 8001b68:	f000 ff06 	bl	8002978 <UB_VGA_SetPixel>
		for (int j=0; j<4; j++) {
 8001b6c:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8001b70:	f103 0308 	add.w	r3, r3, #8
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	3301      	adds	r3, #1
 8001b78:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8001b7c:	f102 0208 	add.w	r2, r2, #8
 8001b80:	6013      	str	r3, [r2, #0]
 8001b82:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8001b86:	f103 0308 	add.w	r3, r3, #8
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b03      	cmp	r3, #3
 8001b8e:	ddad      	ble.n	8001aec <draw_text+0x1924>
	for (int i=0; i<10; i++) {
 8001b90:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8001b94:	f103 030c 	add.w	r3, r3, #12
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8001ba0:	f102 020c 	add.w	r2, r2, #12
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8001baa:	f103 030c 	add.w	r3, r3, #12
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b09      	cmp	r3, #9
 8001bb2:	dd94      	ble.n	8001ade <draw_text+0x1916>
		}
	}
	break;
 8001bb4:	e002      	b.n	8001bbc <draw_text+0x19f4>


	default:
		UB_VGA_FillScreen(VGA_COL_RED);
 8001bb6:	20e0      	movs	r0, #224	; 0xe0
 8001bb8:	f000 febc 	bl	8002934 <UB_VGA_FillScreen>
	}




}
 8001bbc:	bf00      	nop
 8001bbe:	f507 5790 	add.w	r7, r7, #4608	; 0x1200
 8001bc2:	371c      	adds	r7, #28
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd90      	pop	{r4, r7, pc}

08001bc8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	73fb      	strb	r3, [r7, #15]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	73bb      	strb	r3, [r7, #14]
 8001bd8:	230f      	movs	r3, #15
 8001bda:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	78db      	ldrb	r3, [r3, #3]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d039      	beq.n	8001c58 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001be4:	4b27      	ldr	r3, [pc, #156]	; (8001c84 <NVIC_Init+0xbc>)
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	43db      	mvns	r3, r3
 8001bea:	0a1b      	lsrs	r3, r3, #8
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
 8001bf6:	f1c3 0304 	rsb	r3, r3, #4
 8001bfa:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8001bfc:	7b7a      	ldrb	r2, [r7, #13]
 8001bfe:	7bfb      	ldrb	r3, [r7, #15]
 8001c00:	fa42 f303 	asr.w	r3, r2, r3
 8001c04:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	785b      	ldrb	r3, [r3, #1]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	7bbb      	ldrb	r3, [r7, #14]
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	789a      	ldrb	r2, [r3, #2]
 8001c18:	7b7b      	ldrb	r3, [r7, #13]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	7bfb      	ldrb	r3, [r7, #15]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	011b      	lsls	r3, r3, #4
 8001c28:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001c2a:	4a17      	ldr	r2, [pc, #92]	; (8001c88 <NVIC_Init+0xc0>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4413      	add	r3, r2
 8001c32:	7bfa      	ldrb	r2, [r7, #15]
 8001c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001c38:	4a13      	ldr	r2, [pc, #76]	; (8001c88 <NVIC_Init+0xc0>)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	095b      	lsrs	r3, r3, #5
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	f003 031f 	and.w	r3, r3, #31
 8001c4c:	2101      	movs	r1, #1
 8001c4e:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001c52:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001c56:	e00f      	b.n	8001c78 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001c58:	490b      	ldr	r1, [pc, #44]	; (8001c88 <NVIC_Init+0xc0>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	095b      	lsrs	r3, r3, #5
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	f003 031f 	and.w	r3, r3, #31
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001c70:	f100 0320 	add.w	r3, r0, #32
 8001c74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c78:	bf00      	nop
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	e000ed00 	.word	0xe000ed00
 8001c88:	e000e100 	.word	0xe000e100

08001c8c <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f023 0201 	bic.w	r2, r3, #1
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2221      	movs	r2, #33	; 0x21
 8001cc2:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a46      	ldr	r2, [pc, #280]	; (8001de0 <DMA_DeInit+0x154>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d103      	bne.n	8001cd4 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8001ccc:	4b45      	ldr	r3, [pc, #276]	; (8001de4 <DMA_DeInit+0x158>)
 8001cce:	223d      	movs	r2, #61	; 0x3d
 8001cd0:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8001cd2:	e07e      	b.n	8001dd2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a44      	ldr	r2, [pc, #272]	; (8001de8 <DMA_DeInit+0x15c>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d104      	bne.n	8001ce6 <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8001cdc:	4b41      	ldr	r3, [pc, #260]	; (8001de4 <DMA_DeInit+0x158>)
 8001cde:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8001ce2:	609a      	str	r2, [r3, #8]
}
 8001ce4:	e075      	b.n	8001dd2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a40      	ldr	r2, [pc, #256]	; (8001dec <DMA_DeInit+0x160>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d104      	bne.n	8001cf8 <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8001cee:	4b3d      	ldr	r3, [pc, #244]	; (8001de4 <DMA_DeInit+0x158>)
 8001cf0:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8001cf4:	609a      	str	r2, [r3, #8]
}
 8001cf6:	e06c      	b.n	8001dd2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a3d      	ldr	r2, [pc, #244]	; (8001df0 <DMA_DeInit+0x164>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d104      	bne.n	8001d0a <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8001d00:	4b38      	ldr	r3, [pc, #224]	; (8001de4 <DMA_DeInit+0x158>)
 8001d02:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8001d06:	609a      	str	r2, [r3, #8]
}
 8001d08:	e063      	b.n	8001dd2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a39      	ldr	r2, [pc, #228]	; (8001df4 <DMA_DeInit+0x168>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d103      	bne.n	8001d1a <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8001d12:	4b34      	ldr	r3, [pc, #208]	; (8001de4 <DMA_DeInit+0x158>)
 8001d14:	4a38      	ldr	r2, [pc, #224]	; (8001df8 <DMA_DeInit+0x16c>)
 8001d16:	60da      	str	r2, [r3, #12]
}
 8001d18:	e05b      	b.n	8001dd2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a37      	ldr	r2, [pc, #220]	; (8001dfc <DMA_DeInit+0x170>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d103      	bne.n	8001d2a <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8001d22:	4b30      	ldr	r3, [pc, #192]	; (8001de4 <DMA_DeInit+0x158>)
 8001d24:	4a36      	ldr	r2, [pc, #216]	; (8001e00 <DMA_DeInit+0x174>)
 8001d26:	60da      	str	r2, [r3, #12]
}
 8001d28:	e053      	b.n	8001dd2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a35      	ldr	r2, [pc, #212]	; (8001e04 <DMA_DeInit+0x178>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d103      	bne.n	8001d3a <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8001d32:	4b2c      	ldr	r3, [pc, #176]	; (8001de4 <DMA_DeInit+0x158>)
 8001d34:	4a34      	ldr	r2, [pc, #208]	; (8001e08 <DMA_DeInit+0x17c>)
 8001d36:	60da      	str	r2, [r3, #12]
}
 8001d38:	e04b      	b.n	8001dd2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a33      	ldr	r2, [pc, #204]	; (8001e0c <DMA_DeInit+0x180>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d104      	bne.n	8001d4c <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8001d42:	4b28      	ldr	r3, [pc, #160]	; (8001de4 <DMA_DeInit+0x158>)
 8001d44:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8001d48:	60da      	str	r2, [r3, #12]
}
 8001d4a:	e042      	b.n	8001dd2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	4a30      	ldr	r2, [pc, #192]	; (8001e10 <DMA_DeInit+0x184>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d103      	bne.n	8001d5c <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8001d54:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <DMA_DeInit+0x188>)
 8001d56:	223d      	movs	r2, #61	; 0x3d
 8001d58:	609a      	str	r2, [r3, #8]
}
 8001d5a:	e03a      	b.n	8001dd2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a2e      	ldr	r2, [pc, #184]	; (8001e18 <DMA_DeInit+0x18c>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d104      	bne.n	8001d6e <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8001d64:	4b2b      	ldr	r3, [pc, #172]	; (8001e14 <DMA_DeInit+0x188>)
 8001d66:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8001d6a:	609a      	str	r2, [r3, #8]
}
 8001d6c:	e031      	b.n	8001dd2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a2a      	ldr	r2, [pc, #168]	; (8001e1c <DMA_DeInit+0x190>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d104      	bne.n	8001d80 <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8001d76:	4b27      	ldr	r3, [pc, #156]	; (8001e14 <DMA_DeInit+0x188>)
 8001d78:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8001d7c:	609a      	str	r2, [r3, #8]
}
 8001d7e:	e028      	b.n	8001dd2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a27      	ldr	r2, [pc, #156]	; (8001e20 <DMA_DeInit+0x194>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d104      	bne.n	8001d92 <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8001d88:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <DMA_DeInit+0x188>)
 8001d8a:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8001d8e:	609a      	str	r2, [r3, #8]
}
 8001d90:	e01f      	b.n	8001dd2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a23      	ldr	r2, [pc, #140]	; (8001e24 <DMA_DeInit+0x198>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d103      	bne.n	8001da2 <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <DMA_DeInit+0x188>)
 8001d9c:	4a16      	ldr	r2, [pc, #88]	; (8001df8 <DMA_DeInit+0x16c>)
 8001d9e:	60da      	str	r2, [r3, #12]
}
 8001da0:	e017      	b.n	8001dd2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a20      	ldr	r2, [pc, #128]	; (8001e28 <DMA_DeInit+0x19c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d103      	bne.n	8001db2 <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8001daa:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <DMA_DeInit+0x188>)
 8001dac:	4a14      	ldr	r2, [pc, #80]	; (8001e00 <DMA_DeInit+0x174>)
 8001dae:	60da      	str	r2, [r3, #12]
}
 8001db0:	e00f      	b.n	8001dd2 <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a1d      	ldr	r2, [pc, #116]	; (8001e2c <DMA_DeInit+0x1a0>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d103      	bne.n	8001dc2 <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8001dba:	4b16      	ldr	r3, [pc, #88]	; (8001e14 <DMA_DeInit+0x188>)
 8001dbc:	4a12      	ldr	r2, [pc, #72]	; (8001e08 <DMA_DeInit+0x17c>)
 8001dbe:	60da      	str	r2, [r3, #12]
}
 8001dc0:	e007      	b.n	8001dd2 <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a1a      	ldr	r2, [pc, #104]	; (8001e30 <DMA_DeInit+0x1a4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d103      	bne.n	8001dd2 <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8001dca:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <DMA_DeInit+0x188>)
 8001dcc:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8001dd0:	60da      	str	r2, [r3, #12]
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40026010 	.word	0x40026010
 8001de4:	40026000 	.word	0x40026000
 8001de8:	40026028 	.word	0x40026028
 8001dec:	40026040 	.word	0x40026040
 8001df0:	40026058 	.word	0x40026058
 8001df4:	40026070 	.word	0x40026070
 8001df8:	2000003d 	.word	0x2000003d
 8001dfc:	40026088 	.word	0x40026088
 8001e00:	20000f40 	.word	0x20000f40
 8001e04:	400260a0 	.word	0x400260a0
 8001e08:	203d0000 	.word	0x203d0000
 8001e0c:	400260b8 	.word	0x400260b8
 8001e10:	40026410 	.word	0x40026410
 8001e14:	40026400 	.word	0x40026400
 8001e18:	40026428 	.word	0x40026428
 8001e1c:	40026440 	.word	0x40026440
 8001e20:	40026458 	.word	0x40026458
 8001e24:	40026470 	.word	0x40026470
 8001e28:	40026488 	.word	0x40026488
 8001e2c:	400264a0 	.word	0x400264a0
 8001e30:	400264b8 	.word	0x400264b8

08001e34 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <DMA_Init+0xac>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001e5e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8001e6a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8001e76:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8001e82:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e88:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f023 0307 	bic.w	r3, r3, #7
 8001ea2:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eac:	4313      	orrs	r3, r2
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	691a      	ldr	r2, [r3, #16]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	689a      	ldr	r2, [r3, #8]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	60da      	str	r2, [r3, #12]
}
 8001ed2:	bf00      	nop
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	f01c803f 	.word	0xf01c803f

08001ee4 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	460b      	mov	r3, r1
 8001eee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001ef0:	78fb      	ldrb	r3, [r7, #3]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d006      	beq.n	8001f04 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f043 0201 	orr.w	r2, r3, #1
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 8001f02:	e005      	b.n	8001f10 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f023 0201 	bic.w	r2, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	601a      	str	r2, [r3, #0]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	4613      	mov	r3, r2
 8001f28:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00f      	beq.n	8001f54 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d006      	beq.n	8001f48 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	615a      	str	r2, [r3, #20]
 8001f46:	e005      	b.n	8001f54 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	695b      	ldr	r3, [r3, #20]
 8001f4c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	2b80      	cmp	r3, #128	; 0x80
 8001f58:	d014      	beq.n	8001f84 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d008      	beq.n	8001f72 <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f003 031e 	and.w	r3, r3, #30
 8001f6a:	431a      	orrs	r2, r3
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 8001f70:	e008      	b.n	8001f84 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	f003 031e 	and.w	r3, r3, #30
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	401a      	ands	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	601a      	str	r2, [r3, #0]
}
 8001f84:	bf00      	nop
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b087      	sub	sp, #28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a22      	ldr	r2, [pc, #136]	; (8002034 <DMA_GetITStatus+0xa4>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d802      	bhi.n	8001fb4 <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8001fae:	4b22      	ldr	r3, [pc, #136]	; (8002038 <DMA_GetITStatus+0xa8>)
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	e001      	b.n	8001fb8 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8001fb4:	4b21      	ldr	r3, [pc, #132]	; (800203c <DMA_GetITStatus+0xac>)
 8001fb6:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8001fbe:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00a      	beq.n	8001fdc <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	0adb      	lsrs	r3, r3, #11
 8001fca:	f003 031e 	and.w	r3, r3, #30
 8001fce:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	e004      	b.n	8001fe6 <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fe4:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	e002      	b.n	8001ffe <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8002004:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002008:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	4013      	ands	r3, r2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <DMA_GetITStatus+0x90>
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d002      	beq.n	8002020 <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 800201a:	2301      	movs	r3, #1
 800201c:	75fb      	strb	r3, [r7, #23]
 800201e:	e001      	b.n	8002024 <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8002020:	2300      	movs	r3, #0
 8002022:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8002024:	7dfb      	ldrb	r3, [r7, #23]
}
 8002026:	4618      	mov	r0, r3
 8002028:	371c      	adds	r7, #28
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	4002640f 	.word	0x4002640f
 8002038:	40026000 	.word	0x40026000
 800203c:	40026400 	.word	0x40026400

08002040 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a10      	ldr	r2, [pc, #64]	; (8002090 <DMA_ClearITPendingBit+0x50>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d802      	bhi.n	8002058 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8002052:	4b10      	ldr	r3, [pc, #64]	; (8002094 <DMA_ClearITPendingBit+0x54>)
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	e001      	b.n	800205c <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8002058:	4b0f      	ldr	r3, [pc, #60]	; (8002098 <DMA_ClearITPendingBit+0x58>)
 800205a:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d007      	beq.n	8002076 <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800206c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002070:	68fa      	ldr	r2, [r7, #12]
 8002072:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 8002074:	e006      	b.n	8002084 <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800207c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	6093      	str	r3, [r2, #8]
}
 8002084:	bf00      	nop
 8002086:	3714      	adds	r7, #20
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	4002640f 	.word	0x4002640f
 8002094:	40026000 	.word	0x40026000
 8002098:	40026400 	.word	0x40026400

0800209c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800209c:	b480      	push	{r7}
 800209e:	b087      	sub	sp, #28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	e076      	b.n	80021a6 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80020b8:	2201      	movs	r2, #1
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4013      	ands	r3, r2
 80020ca:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d165      	bne.n	80021a0 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	2103      	movs	r1, #3
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	43db      	mvns	r3, r3
 80020e4:	401a      	ands	r2, r3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	791b      	ldrb	r3, [r3, #4]
 80020f2:	4619      	mov	r1, r3
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	fa01 f303 	lsl.w	r3, r1, r3
 80020fc:	431a      	orrs	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	791b      	ldrb	r3, [r3, #4]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d003      	beq.n	8002112 <GPIO_Init+0x76>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	791b      	ldrb	r3, [r3, #4]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d12e      	bne.n	8002170 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	2103      	movs	r1, #3
 800211c:	fa01 f303 	lsl.w	r3, r1, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	401a      	ands	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	795b      	ldrb	r3, [r3, #5]
 8002130:	4619      	mov	r1, r3
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	fa01 f303 	lsl.w	r3, r1, r3
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685a      	ldr	r2, [r3, #4]
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	b29b      	uxth	r3, r3
 8002148:	4619      	mov	r1, r3
 800214a:	2301      	movs	r3, #1
 800214c:	408b      	lsls	r3, r1
 800214e:	43db      	mvns	r3, r3
 8002150:	401a      	ands	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	7992      	ldrb	r2, [r2, #6]
 800215e:	4611      	mov	r1, r2
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	b292      	uxth	r2, r2
 8002164:	fa01 f202 	lsl.w	r2, r1, r2
 8002168:	b292      	uxth	r2, r2
 800216a:	431a      	orrs	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68da      	ldr	r2, [r3, #12]
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	b29b      	uxth	r3, r3
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	2103      	movs	r1, #3
 800217c:	fa01 f303 	lsl.w	r3, r1, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	401a      	ands	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	79db      	ldrb	r3, [r3, #7]
 8002190:	4619      	mov	r1, r3
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	fa01 f303 	lsl.w	r3, r1, r3
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	3301      	adds	r3, #1
 80021a4:	617b      	str	r3, [r7, #20]
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2b0f      	cmp	r3, #15
 80021aa:	d985      	bls.n	80020b8 <GPIO_Init+0x1c>
    }
  }
}
 80021ac:	bf00      	nop
 80021ae:	371c      	adds	r7, #28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	807b      	strh	r3, [r7, #2]
 80021c4:	4613      	mov	r3, r2
 80021c6:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80021cc:	2300      	movs	r3, #0
 80021ce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80021d0:	787a      	ldrb	r2, [r7, #1]
 80021d2:	887b      	ldrh	r3, [r7, #2]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80021e0:	887b      	ldrh	r3, [r7, #2]
 80021e2:	08db      	lsrs	r3, r3, #3
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	4618      	mov	r0, r3
 80021e8:	887b      	ldrh	r3, [r7, #2]
 80021ea:	08db      	lsrs	r3, r3, #3
 80021ec:	b29b      	uxth	r3, r3
 80021ee:	461a      	mov	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3208      	adds	r2, #8
 80021f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80021f8:	887b      	ldrh	r3, [r7, #2]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	210f      	movs	r1, #15
 8002202:	fa01 f303 	lsl.w	r3, r1, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	ea02 0103 	and.w	r1, r2, r3
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f100 0208 	add.w	r2, r0, #8
 8002212:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8002216:	887b      	ldrh	r3, [r7, #2]
 8002218:	08db      	lsrs	r3, r3, #3
 800221a:	b29b      	uxth	r3, r3
 800221c:	461a      	mov	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	3208      	adds	r2, #8
 8002222:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4313      	orrs	r3, r2
 800222a:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 800222c:	887b      	ldrh	r3, [r7, #2]
 800222e:	08db      	lsrs	r3, r3, #3
 8002230:	b29b      	uxth	r3, r3
 8002232:	461a      	mov	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3208      	adds	r2, #8
 8002238:	68b9      	ldr	r1, [r7, #8]
 800223a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800223e:	bf00      	nop
 8002240:	3714      	adds	r7, #20
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	460b      	mov	r3, r1
 8002256:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8002258:	78fb      	ldrb	r3, [r7, #3]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d006      	beq.n	800226c <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800225e:	490a      	ldr	r1, [pc, #40]	; (8002288 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002260:	4b09      	ldr	r3, [pc, #36]	; (8002288 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4313      	orrs	r3, r2
 8002268:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 800226a:	e006      	b.n	800227a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 800226c:	4906      	ldr	r1, [pc, #24]	; (8002288 <RCC_AHB1PeriphClockCmd+0x3c>)
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <RCC_AHB1PeriphClockCmd+0x3c>)
 8002270:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	43db      	mvns	r3, r3
 8002276:	4013      	ands	r3, r2
 8002278:	630b      	str	r3, [r1, #48]	; 0x30
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	40023800 	.word	0x40023800

0800228c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d006      	beq.n	80022ac <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800229e:	490a      	ldr	r1, [pc, #40]	; (80022c8 <RCC_APB1PeriphClockCmd+0x3c>)
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <RCC_APB1PeriphClockCmd+0x3c>)
 80022a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80022aa:	e006      	b.n	80022ba <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80022ac:	4906      	ldr	r1, [pc, #24]	; (80022c8 <RCC_APB1PeriphClockCmd+0x3c>)
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <RCC_APB1PeriphClockCmd+0x3c>)
 80022b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	43db      	mvns	r3, r3
 80022b6:	4013      	ands	r3, r2
 80022b8:	640b      	str	r3, [r1, #64]	; 0x40
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800

080022cc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80022d8:	78fb      	ldrb	r3, [r7, #3]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d006      	beq.n	80022ec <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80022de:	490a      	ldr	r1, [pc, #40]	; (8002308 <RCC_APB2PeriphClockCmd+0x3c>)
 80022e0:	4b09      	ldr	r3, [pc, #36]	; (8002308 <RCC_APB2PeriphClockCmd+0x3c>)
 80022e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80022ea:	e006      	b.n	80022fa <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80022ec:	4906      	ldr	r1, [pc, #24]	; (8002308 <RCC_APB2PeriphClockCmd+0x3c>)
 80022ee:	4b06      	ldr	r3, [pc, #24]	; (8002308 <RCC_APB2PeriphClockCmd+0x3c>)
 80022f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	43db      	mvns	r3, r3
 80022f6:	4013      	ands	r3, r2
 80022f8:	644b      	str	r3, [r1, #68]	; 0x44
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	40023800 	.word	0x40023800

0800230c <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a29      	ldr	r2, [pc, #164]	; (80023c8 <TIM_TimeBaseInit+0xbc>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d013      	beq.n	8002350 <TIM_TimeBaseInit+0x44>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a28      	ldr	r2, [pc, #160]	; (80023cc <TIM_TimeBaseInit+0xc0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d00f      	beq.n	8002350 <TIM_TimeBaseInit+0x44>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002336:	d00b      	beq.n	8002350 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a25      	ldr	r2, [pc, #148]	; (80023d0 <TIM_TimeBaseInit+0xc4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d007      	beq.n	8002350 <TIM_TimeBaseInit+0x44>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a24      	ldr	r2, [pc, #144]	; (80023d4 <TIM_TimeBaseInit+0xc8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d003      	beq.n	8002350 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a23      	ldr	r2, [pc, #140]	; (80023d8 <TIM_TimeBaseInit+0xcc>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d108      	bne.n	8002362 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8002350:	89fb      	ldrh	r3, [r7, #14]
 8002352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002356:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	885a      	ldrh	r2, [r3, #2]
 800235c:	89fb      	ldrh	r3, [r7, #14]
 800235e:	4313      	orrs	r3, r2
 8002360:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a1d      	ldr	r2, [pc, #116]	; (80023dc <TIM_TimeBaseInit+0xd0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00c      	beq.n	8002384 <TIM_TimeBaseInit+0x78>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a1c      	ldr	r2, [pc, #112]	; (80023e0 <TIM_TimeBaseInit+0xd4>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d008      	beq.n	8002384 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 8002372:	89fb      	ldrh	r3, [r7, #14]
 8002374:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002378:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	891a      	ldrh	r2, [r3, #8]
 800237e:	89fb      	ldrh	r3, [r7, #14]
 8002380:	4313      	orrs	r3, r2
 8002382:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	89fa      	ldrh	r2, [r7, #14]
 8002388:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	881a      	ldrh	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <TIM_TimeBaseInit+0xbc>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d003      	beq.n	80023aa <TIM_TimeBaseInit+0x9e>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a09      	ldr	r2, [pc, #36]	; (80023cc <TIM_TimeBaseInit+0xc0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d104      	bne.n	80023b4 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	7a9b      	ldrb	r3, [r3, #10]
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	829a      	strh	r2, [r3, #20]
}
 80023ba:	bf00      	nop
 80023bc:	3714      	adds	r7, #20
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	40010000 	.word	0x40010000
 80023cc:	40010400 	.word	0x40010400
 80023d0:	40000400 	.word	0x40000400
 80023d4:	40000800 	.word	0x40000800
 80023d8:	40000c00 	.word	0x40000c00
 80023dc:	40001000 	.word	0x40001000
 80023e0:	40001400 	.word	0x40001400

080023e4 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80023f0:	78fb      	ldrb	r3, [r7, #3]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d008      	beq.n	8002408 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002400:	b29a      	uxth	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 8002406:	e007      	b.n	8002418 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	881b      	ldrh	r3, [r3, #0]
 800240c:	b29b      	uxth	r3, r3
 800240e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002412:	b29a      	uxth	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	801a      	strh	r2, [r3, #0]
}
 8002418:	bf00      	nop
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8002430:	78fb      	ldrb	r3, [r7, #3]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d008      	beq.n	8002448 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	881b      	ldrh	r3, [r3, #0]
 800243a:	b29b      	uxth	r3, r3
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	b29a      	uxth	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 8002446:	e007      	b.n	8002458 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	b29b      	uxth	r3, r3
 800244e:	f023 0301 	bic.w	r3, r3, #1
 8002452:	b29a      	uxth	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	801a      	strh	r2, [r3, #0]
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr

08002464 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	817b      	strh	r3, [r7, #10]
 8002472:	2300      	movs	r3, #0
 8002474:	81fb      	strh	r3, [r7, #14]
 8002476:	2300      	movs	r3, #0
 8002478:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	8c1b      	ldrh	r3, [r3, #32]
 800247e:	b29b      	uxth	r3, r3
 8002480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002484:	b29a      	uxth	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	8c1b      	ldrh	r3, [r3, #32]
 800248e:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	889b      	ldrh	r3, [r3, #4]
 8002494:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	8b9b      	ldrh	r3, [r3, #28]
 800249a:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 800249c:	897b      	ldrh	r3, [r7, #10]
 800249e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024a2:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 80024a4:	897b      	ldrh	r3, [r7, #10]
 80024a6:	f023 0303 	bic.w	r3, r3, #3
 80024aa:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	881a      	ldrh	r2, [r3, #0]
 80024b0:	897b      	ldrh	r3, [r7, #10]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 80024b6:	89fb      	ldrh	r3, [r7, #14]
 80024b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024bc:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	899b      	ldrh	r3, [r3, #12]
 80024c2:	021b      	lsls	r3, r3, #8
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	89fb      	ldrh	r3, [r7, #14]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	885b      	ldrh	r3, [r3, #2]
 80024d0:	021b      	lsls	r3, r3, #8
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	89fb      	ldrh	r3, [r7, #14]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	4a22      	ldr	r2, [pc, #136]	; (8002568 <TIM_OC3Init+0x104>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d003      	beq.n	80024ea <TIM_OC3Init+0x86>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4a21      	ldr	r2, [pc, #132]	; (800256c <TIM_OC3Init+0x108>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d12b      	bne.n	8002542 <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80024ea:	89fb      	ldrh	r3, [r7, #14]
 80024ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024f0:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	89db      	ldrh	r3, [r3, #14]
 80024f6:	021b      	lsls	r3, r3, #8
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	89fb      	ldrh	r3, [r7, #14]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 8002500:	89fb      	ldrh	r3, [r7, #14]
 8002502:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002506:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	889b      	ldrh	r3, [r3, #4]
 800250c:	021b      	lsls	r3, r3, #8
 800250e:	b29a      	uxth	r2, r3
 8002510:	89fb      	ldrh	r3, [r7, #14]
 8002512:	4313      	orrs	r3, r2
 8002514:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 8002516:	89bb      	ldrh	r3, [r7, #12]
 8002518:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800251c:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 800251e:	89bb      	ldrh	r3, [r7, #12]
 8002520:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002524:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	8a1b      	ldrh	r3, [r3, #16]
 800252a:	011b      	lsls	r3, r3, #4
 800252c:	b29a      	uxth	r2, r3
 800252e:	89bb      	ldrh	r3, [r7, #12]
 8002530:	4313      	orrs	r3, r2
 8002532:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	8a5b      	ldrh	r3, [r3, #18]
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	b29a      	uxth	r2, r3
 800253c:	89bb      	ldrh	r3, [r7, #12]
 800253e:	4313      	orrs	r3, r2
 8002540:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	89ba      	ldrh	r2, [r7, #12]
 8002546:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	897a      	ldrh	r2, [r7, #10]
 800254c:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	689a      	ldr	r2, [r3, #8]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	89fa      	ldrh	r2, [r7, #14]
 800255a:	841a      	strh	r2, [r3, #32]
}
 800255c:	bf00      	nop
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	40010000 	.word	0x40010000
 800256c:	40010400 	.word	0x40010400

08002570 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800257a:	2300      	movs	r3, #0
 800257c:	81bb      	strh	r3, [r7, #12]
 800257e:	2300      	movs	r3, #0
 8002580:	817b      	strh	r3, [r7, #10]
 8002582:	2300      	movs	r3, #0
 8002584:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	8c1b      	ldrh	r3, [r3, #32]
 800258a:	b29b      	uxth	r3, r3
 800258c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002590:	b29a      	uxth	r2, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	8c1b      	ldrh	r3, [r3, #32]
 800259a:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	889b      	ldrh	r3, [r3, #4]
 80025a0:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	8b9b      	ldrh	r3, [r3, #28]
 80025a6:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 80025a8:	89bb      	ldrh	r3, [r7, #12]
 80025aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025ae:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 80025b0:	89bb      	ldrh	r3, [r7, #12]
 80025b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025b6:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	021b      	lsls	r3, r3, #8
 80025be:	b29a      	uxth	r2, r3
 80025c0:	89bb      	ldrh	r3, [r7, #12]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 80025c6:	897b      	ldrh	r3, [r7, #10]
 80025c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025cc:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	899b      	ldrh	r3, [r3, #12]
 80025d2:	031b      	lsls	r3, r3, #12
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	897b      	ldrh	r3, [r7, #10]
 80025d8:	4313      	orrs	r3, r2
 80025da:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	885b      	ldrh	r3, [r3, #2]
 80025e0:	031b      	lsls	r3, r3, #12
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	897b      	ldrh	r3, [r7, #10]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a12      	ldr	r2, [pc, #72]	; (8002638 <TIM_OC4Init+0xc8>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d003      	beq.n	80025fa <TIM_OC4Init+0x8a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a11      	ldr	r2, [pc, #68]	; (800263c <TIM_OC4Init+0xcc>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d10a      	bne.n	8002610 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 80025fa:	89fb      	ldrh	r3, [r7, #14]
 80025fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002600:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	8a1b      	ldrh	r3, [r3, #16]
 8002606:	019b      	lsls	r3, r3, #6
 8002608:	b29a      	uxth	r2, r3
 800260a:	89fb      	ldrh	r3, [r7, #14]
 800260c:	4313      	orrs	r3, r2
 800260e:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	89fa      	ldrh	r2, [r7, #14]
 8002614:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	89ba      	ldrh	r2, [r7, #12]
 800261a:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	897a      	ldrh	r2, [r7, #10]
 8002628:	841a      	strh	r2, [r3, #32]
}
 800262a:	bf00      	nop
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40010000 	.word	0x40010000
 800263c:	40010400 	.word	0x40010400

08002640 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	8b9b      	ldrh	r3, [r3, #28]
 8002654:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8002656:	89fb      	ldrh	r3, [r7, #14]
 8002658:	f023 0308 	bic.w	r3, r3, #8
 800265c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 800265e:	89fa      	ldrh	r2, [r7, #14]
 8002660:	887b      	ldrh	r3, [r7, #2]
 8002662:	4313      	orrs	r3, r2
 8002664:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	89fa      	ldrh	r2, [r7, #14]
 800266a:	839a      	strh	r2, [r3, #28]
}
 800266c:	bf00      	nop
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	460b      	mov	r3, r1
 8002682:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	8b9b      	ldrh	r3, [r3, #28]
 800268c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 800268e:	89fb      	ldrh	r3, [r7, #14]
 8002690:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002694:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8002696:	887b      	ldrh	r3, [r7, #2]
 8002698:	021b      	lsls	r3, r3, #8
 800269a:	b29a      	uxth	r2, r3
 800269c:	89fb      	ldrh	r3, [r7, #14]
 800269e:	4313      	orrs	r3, r2
 80026a0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	89fa      	ldrh	r2, [r7, #14]
 80026a6:	839a      	strh	r2, [r3, #28]
}
 80026a8:	bf00      	nop
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	460b      	mov	r3, r1
 80026be:	807b      	strh	r3, [r7, #2]
 80026c0:	4613      	mov	r3, r2
 80026c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80026c4:	787b      	ldrb	r3, [r7, #1]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d008      	beq.n	80026dc <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	899b      	ldrh	r3, [r3, #12]
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	887b      	ldrh	r3, [r7, #2]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	b29a      	uxth	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 80026da:	e009      	b.n	80026f0 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	899b      	ldrh	r3, [r3, #12]
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	887b      	ldrh	r3, [r7, #2]
 80026e4:	43db      	mvns	r3, r3
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	4013      	ands	r3, r2
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	819a      	strh	r2, [r3, #12]
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	460b      	mov	r3, r1
 8002706:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8002708:	887b      	ldrh	r3, [r7, #2]
 800270a:	43db      	mvns	r3, r3
 800270c:	b29a      	uxth	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	821a      	strh	r2, [r3, #16]
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	460b      	mov	r3, r1
 8002728:	807b      	strh	r3, [r7, #2]
 800272a:	4613      	mov	r3, r2
 800272c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800272e:	787b      	ldrb	r3, [r7, #1]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d008      	beq.n	8002746 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	899b      	ldrh	r3, [r3, #12]
 8002738:	b29a      	uxth	r2, r3
 800273a:	887b      	ldrh	r3, [r7, #2]
 800273c:	4313      	orrs	r3, r2
 800273e:	b29a      	uxth	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
 8002744:	e009      	b.n	800275a <TIM_DMACmd+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	899b      	ldrh	r3, [r3, #12]
 800274a:	b29a      	uxth	r2, r3
 800274c:	887b      	ldrh	r3, [r7, #2]
 800274e:	43db      	mvns	r3, r3
 8002750:	b29b      	uxth	r3, r3
 8002752:	4013      	ands	r3, r2
 8002754:	b29a      	uxth	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	819a      	strh	r2, [r3, #12]
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr

08002766 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8002766:	b480      	push	{r7}
 8002768:	b083      	sub	sp, #12
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	460b      	mov	r3, r1
 8002770:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8002772:	887b      	ldrh	r3, [r7, #2]
 8002774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002778:	b29a      	uxth	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	809a      	strh	r2, [r3, #4]
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 800278a:	b480      	push	{r7}
 800278c:	b085      	sub	sp, #20
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
 8002792:	460b      	mov	r3, r1
 8002794:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8002796:	2300      	movs	r3, #0
 8002798:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	881b      	ldrh	r3, [r3, #0]
 800279e:	b29a      	uxth	r2, r3
 80027a0:	887b      	ldrh	r3, [r7, #2]
 80027a2:	4013      	ands	r3, r2
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d002      	beq.n	80027b0 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80027aa:	2301      	movs	r3, #1
 80027ac:	73fb      	strb	r3, [r7, #15]
 80027ae:	e001      	b.n	80027b4 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80027b0:	2300      	movs	r3, #0
 80027b2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b087      	sub	sp, #28
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
 80027ca:	460b      	mov	r3, r1
 80027cc:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	2300      	movs	r3, #0
 80027d8:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 80027da:	2300      	movs	r3, #0
 80027dc:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 80027de:	887b      	ldrh	r3, [r7, #2]
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 80027e8:	887b      	ldrh	r3, [r7, #2]
 80027ea:	f003 031f 	and.w	r3, r3, #31
 80027ee:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 80027f0:	2201      	movs	r2, #1
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d107      	bne.n	8002810 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	899b      	ldrh	r3, [r3, #12]
 8002804:	b29b      	uxth	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	4013      	ands	r3, r2
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	e011      	b.n	8002834 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d107      	bne.n	8002826 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	8a1b      	ldrh	r3, [r3, #16]
 800281a:	b29b      	uxth	r3, r3
 800281c:	461a      	mov	r2, r3
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	4013      	ands	r3, r2
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	e006      	b.n	8002834 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	8a9b      	ldrh	r3, [r3, #20]
 800282a:	b29b      	uxth	r3, r3
 800282c:	461a      	mov	r2, r3
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	4013      	ands	r3, r2
 8002832:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8002834:	887b      	ldrh	r3, [r7, #2]
 8002836:	0a1b      	lsrs	r3, r3, #8
 8002838:	b29b      	uxth	r3, r3
 800283a:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 800283c:	2201      	movs	r2, #1
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	b29b      	uxth	r3, r3
 800284c:	461a      	mov	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4013      	ands	r3, r2
 8002852:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d005      	beq.n	8002866 <USART_GetITStatus+0xa4>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d002      	beq.n	8002866 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8002860:	2301      	movs	r3, #1
 8002862:	74fb      	strb	r3, [r7, #19]
 8002864:	e001      	b.n	800286a <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8002866:	2300      	movs	r3, #0
 8002868:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 800286a:	7cfb      	ldrb	r3, [r7, #19]
}
 800286c:	4618      	mov	r0, r3
 800286e:	371c      	adds	r7, #28
 8002870:	46bd      	mov	sp, r7
 8002872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002876:	4770      	bx	lr

08002878 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8002878:	b480      	push	{r7}
 800287a:	b085      	sub	sp, #20
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	460b      	mov	r3, r1
 8002882:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8002884:	2300      	movs	r3, #0
 8002886:	81fb      	strh	r3, [r7, #14]
 8002888:	2300      	movs	r3, #0
 800288a:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 800288c:	887b      	ldrh	r3, [r7, #2]
 800288e:	0a1b      	lsrs	r3, r3, #8
 8002890:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8002892:	89fb      	ldrh	r3, [r7, #14]
 8002894:	2201      	movs	r2, #1
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 800289c:	89bb      	ldrh	r3, [r7, #12]
 800289e:	43db      	mvns	r3, r3
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	801a      	strh	r2, [r3, #0]
}
 80028a6:	bf00      	nop
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <UB_VGA_Screen_Init>:

//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
  uint16_t xp,yp;

  VGA.hsync_cnt=0;
 80028ba:	4b1b      	ldr	r3, [pc, #108]	; (8002928 <UB_VGA_Screen_Init+0x74>)
 80028bc:	2200      	movs	r2, #0
 80028be:	801a      	strh	r2, [r3, #0]
  VGA.start_adr=0;
 80028c0:	4b19      	ldr	r3, [pc, #100]	; (8002928 <UB_VGA_Screen_Init+0x74>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg=0;
 80028c6:	4b18      	ldr	r3, [pc, #96]	; (8002928 <UB_VGA_Screen_Init+0x74>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]

  // RAM init total black
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 80028cc:	2300      	movs	r3, #0
 80028ce:	80bb      	strh	r3, [r7, #4]
 80028d0:	e017      	b.n	8002902 <UB_VGA_Screen_Init+0x4e>
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 80028d2:	2300      	movs	r3, #0
 80028d4:	80fb      	strh	r3, [r7, #6]
 80028d6:	e00d      	b.n	80028f4 <UB_VGA_Screen_Init+0x40>
      VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=0;
 80028d8:	88ba      	ldrh	r2, [r7, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	019b      	lsls	r3, r3, #6
 80028e2:	441a      	add	r2, r3
 80028e4:	88fb      	ldrh	r3, [r7, #6]
 80028e6:	4413      	add	r3, r2
 80028e8:	4a10      	ldr	r2, [pc, #64]	; (800292c <UB_VGA_Screen_Init+0x78>)
 80028ea:	2100      	movs	r1, #0
 80028ec:	54d1      	strb	r1, [r2, r3]
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 80028ee:	88fb      	ldrh	r3, [r7, #6]
 80028f0:	3301      	adds	r3, #1
 80028f2:	80fb      	strh	r3, [r7, #6]
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80028fa:	d9ed      	bls.n	80028d8 <UB_VGA_Screen_Init+0x24>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 80028fc:	88bb      	ldrh	r3, [r7, #4]
 80028fe:	3301      	adds	r3, #1
 8002900:	80bb      	strh	r3, [r7, #4]
 8002902:	88bb      	ldrh	r3, [r7, #4]
 8002904:	2bef      	cmp	r3, #239	; 0xef
 8002906:	d9e4      	bls.n	80028d2 <UB_VGA_Screen_Init+0x1e>
    }
  }

  // init IO-Pins
  P_VGA_InitIO();
 8002908:	f000 f85e 	bl	80029c8 <P_VGA_InitIO>
  // init Timer
  P_VGA_InitTIM();
 800290c:	f000 f8b0 	bl	8002a70 <P_VGA_InitTIM>
  // init DMA
  P_VGA_InitDMA();
 8002910:	f000 f940 	bl	8002b94 <P_VGA_InitDMA>
  // init Interrupts
  P_VGA_InitINT();
 8002914:	f000 f912 	bl	8002b3c <P_VGA_InitINT>

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg=DMA2_Stream5->CR;
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <UB_VGA_Screen_Init+0x7c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a02      	ldr	r2, [pc, #8]	; (8002928 <UB_VGA_Screen_Init+0x74>)
 800291e:	6093      	str	r3, [r2, #8]
}
 8002920:	bf00      	nop
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20000020 	.word	0x20000020
 800292c:	2000002c 	.word	0x2000002c
 8002930:	40026488 	.word	0x40026488

08002934 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 800293e:	2300      	movs	r3, #0
 8002940:	81bb      	strh	r3, [r7, #12]
 8002942:	e012      	b.n	800296a <UB_VGA_FillScreen+0x36>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 8002944:	2300      	movs	r3, #0
 8002946:	81fb      	strh	r3, [r7, #14]
 8002948:	e008      	b.n	800295c <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp,yp,color);
 800294a:	79fa      	ldrb	r2, [r7, #7]
 800294c:	89b9      	ldrh	r1, [r7, #12]
 800294e:	89fb      	ldrh	r3, [r7, #14]
 8002950:	4618      	mov	r0, r3
 8002952:	f000 f811 	bl	8002978 <UB_VGA_SetPixel>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 8002956:	89fb      	ldrh	r3, [r7, #14]
 8002958:	3301      	adds	r3, #1
 800295a:	81fb      	strh	r3, [r7, #14]
 800295c:	89fb      	ldrh	r3, [r7, #14]
 800295e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002962:	d3f2      	bcc.n	800294a <UB_VGA_FillScreen+0x16>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8002964:	89bb      	ldrh	r3, [r7, #12]
 8002966:	3301      	adds	r3, #1
 8002968:	81bb      	strh	r3, [r7, #12]
 800296a:	89bb      	ldrh	r3, [r7, #12]
 800296c:	2bef      	cmp	r3, #239	; 0xef
 800296e:	d9e9      	bls.n	8002944 <UB_VGA_FillScreen+0x10>
    }
  }
}
 8002970:	bf00      	nop
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	80fb      	strh	r3, [r7, #6]
 8002982:	460b      	mov	r3, r1
 8002984:	80bb      	strh	r3, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	70fb      	strb	r3, [r7, #3]
  if(xp>=VGA_DISPLAY_X) xp=0;
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002990:	d301      	bcc.n	8002996 <UB_VGA_SetPixel+0x1e>
 8002992:	2300      	movs	r3, #0
 8002994:	80fb      	strh	r3, [r7, #6]
  if(yp>=VGA_DISPLAY_Y) yp=0;
 8002996:	88bb      	ldrh	r3, [r7, #4]
 8002998:	2bef      	cmp	r3, #239	; 0xef
 800299a:	d901      	bls.n	80029a0 <UB_VGA_SetPixel+0x28>
 800299c:	2300      	movs	r3, #0
 800299e:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=color;
 80029a0:	88ba      	ldrh	r2, [r7, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	019b      	lsls	r3, r3, #6
 80029aa:	441a      	add	r2, r3
 80029ac:	88fb      	ldrh	r3, [r7, #6]
 80029ae:	4413      	add	r3, r2
 80029b0:	4904      	ldr	r1, [pc, #16]	; (80029c4 <UB_VGA_SetPixel+0x4c>)
 80029b2:	78fa      	ldrb	r2, [r7, #3]
 80029b4:	54ca      	strb	r2, [r1, r3]
}
 80029b6:	bf00      	nop
 80029b8:	370c      	adds	r7, #12
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	2000002c 	.word	0x2000002c

080029c8 <P_VGA_InitIO>:
//--------------------------------------------------------------
// interne Funktionen
// init aller IO-Pins
//--------------------------------------------------------------
void P_VGA_InitIO(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
  // init RGB-Pins (PE8 - PE15)
  // as normal GPIOs
  //---------------------------------------------
 
  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 80029ce:	2101      	movs	r1, #1
 80029d0:	2010      	movs	r0, #16
 80029d2:	f7ff fc3b 	bl	800224c <RCC_AHB1PeriphClockCmd>

  // Config as Digital output
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 |
 80029d6:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80029da:	603b      	str	r3, [r7, #0]
        GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80029dc:	2301      	movs	r3, #1
 80029de:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80029e0:	2300      	movs	r3, #0
 80029e2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80029e4:	2301      	movs	r3, #1
 80029e6:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80029e8:	2303      	movs	r3, #3
 80029ea:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOE, &GPIO_InitStructure);
 80029ec:	463b      	mov	r3, r7
 80029ee:	4619      	mov	r1, r3
 80029f0:	481d      	ldr	r0, [pc, #116]	; (8002a68 <P_VGA_InitIO+0xa0>)
 80029f2:	f7ff fb53 	bl	800209c <GPIO_Init>

  GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 80029f6:	4b1c      	ldr	r3, [pc, #112]	; (8002a68 <P_VGA_InitIO+0xa0>)
 80029f8:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 80029fc:	835a      	strh	r2, [r3, #26]
  // init of the H-Sync Pin (PB11)
  // using Timer2 and CH4
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 80029fe:	2101      	movs	r1, #1
 8002a00:	2002      	movs	r0, #2
 8002a02:	f7ff fc23 	bl	800224c <RCC_AHB1PeriphClockCmd>

  // Config Pins as Digital-out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 8002a06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a0a:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8002a10:	2303      	movs	r3, #3
 8002a12:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002a14:	2300      	movs	r3, #0
 8002a16:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002a1c:	463b      	mov	r3, r7
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4812      	ldr	r0, [pc, #72]	; (8002a6c <P_VGA_InitIO+0xa4>)
 8002a22:	f7ff fb3b 	bl	800209c <GPIO_Init>

  // alternative function connect with IO
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_TIM2);
 8002a26:	2201      	movs	r2, #1
 8002a28:	210b      	movs	r1, #11
 8002a2a:	4810      	ldr	r0, [pc, #64]	; (8002a6c <P_VGA_InitIO+0xa4>)
 8002a2c:	f7ff fbc4 	bl	80021b8 <GPIO_PinAFConfig>
  // init of V-Sync Pin (PB12)
  // using GPIO
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8002a30:	2101      	movs	r1, #1
 8002a32:	2002      	movs	r0, #2
 8002a34:	f7ff fc0a 	bl	800224c <RCC_AHB1PeriphClockCmd>

  // Config of the Pins as Digital out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8002a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a3c:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8002a42:	2300      	movs	r3, #0
 8002a44:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8002a46:	2301      	movs	r3, #1
 8002a48:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002a4e:	463b      	mov	r3, r7
 8002a50:	4619      	mov	r1, r3
 8002a52:	4806      	ldr	r0, [pc, #24]	; (8002a6c <P_VGA_InitIO+0xa4>)
 8002a54:	f7ff fb22 	bl	800209c <GPIO_Init>

  GPIOB->BSRRL = GPIO_Pin_12;
 8002a58:	4b04      	ldr	r3, [pc, #16]	; (8002a6c <P_VGA_InitIO+0xa4>)
 8002a5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a5e:	831a      	strh	r2, [r3, #24]
}
 8002a60:	bf00      	nop
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	40020400 	.word	0x40020400

08002a70 <P_VGA_InitTIM>:
//--------------------------------------------------------------
// internal Function
// init Timer
//--------------------------------------------------------------
void P_VGA_InitTIM(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af00      	add	r7, sp, #0
  // init of Timer1 for
  // Pixeldata via DMA
  //---------------------------------------------

  // Clock enable
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 8002a76:	2101      	movs	r1, #1
 8002a78:	2001      	movs	r0, #1
 8002a7a:	f7ff fc27 	bl	80022cc <RCC_APB2PeriphClockCmd>

  // Timer1 init
  TIM_TimeBaseStructure.TIM_Period =  VGA_TIM1_PERIODE;
 8002a7e:	230b      	movs	r3, #11
 8002a80:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM1_PRESCALE;
 8002a82:	2300      	movs	r3, #0
 8002a84:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8002a86:	2300      	movs	r3, #0
 8002a88:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 8002a8e:	f107 0314 	add.w	r3, r7, #20
 8002a92:	4619      	mov	r1, r3
 8002a94:	4828      	ldr	r0, [pc, #160]	; (8002b38 <P_VGA_InitTIM+0xc8>)
 8002a96:	f7ff fc39 	bl	800230c <TIM_TimeBaseInit>
  // CH4 for HSYNC-Signal
  // CH3 for DMA Trigger start
  //---------------------------------------------

  // Clock enable
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	2001      	movs	r0, #1
 8002a9e:	f7ff fbf5 	bl	800228c <RCC_APB1PeriphClockCmd>

  // Timer2 init
  TIM_TimeBaseStructure.TIM_Period = VGA_TIM2_HSYNC_PERIODE;
 8002aa2:	f640 236b 	movw	r3, #2667	; 0xa6b
 8002aa6:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8002aac:	2300      	movs	r3, #0
 8002aae:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8002ab4:	f107 0314 	add.w	r3, r7, #20
 8002ab8:	4619      	mov	r1, r3
 8002aba:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002abe:	f7ff fc25 	bl	800230c <TIM_TimeBaseInit>

  // Timer2 Channel 3 ( for DMA Trigger start)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8002ac2:	2360      	movs	r3, #96	; 0x60
 8002ac4:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HTRIGGER_START-VGA_TIM2_DMA_DELAY;
 8002aca:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8002ace:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8002ad0:	2302      	movs	r3, #2
 8002ad2:	81bb      	strh	r3, [r7, #12]
  TIM_OC3Init(TIM2, &TIM_OCInitStructure);
 8002ad4:	463b      	mov	r3, r7
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002adc:	f7ff fcc2 	bl	8002464 <TIM_OC3Init>
  TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8002ae0:	2108      	movs	r1, #8
 8002ae2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002ae6:	f7ff fdab 	bl	8002640 <TIM_OC3PreloadConfig>

  // Timer2 Channel 4 (for HSYNC)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8002aea:	2360      	movs	r3, #96	; 0x60
 8002aec:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8002aee:	2301      	movs	r3, #1
 8002af0:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HSYNC_IMP;
 8002af2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002af6:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8002af8:	2302      	movs	r3, #2
 8002afa:	81bb      	strh	r3, [r7, #12]
  TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 8002afc:	463b      	mov	r3, r7
 8002afe:	4619      	mov	r1, r3
 8002b00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002b04:	f7ff fd34 	bl	8002570 <TIM_OC4Init>
  TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8002b08:	2108      	movs	r1, #8
 8002b0a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002b0e:	f7ff fdb3 	bl	8002678 <TIM_OC4PreloadConfig>
  //---------------------------------------------
  // enable all Timers
  //---------------------------------------------

  // Timer1 enable
  TIM_ARRPreloadConfig(TIM1, ENABLE);
 8002b12:	2101      	movs	r1, #1
 8002b14:	4808      	ldr	r0, [pc, #32]	; (8002b38 <P_VGA_InitTIM+0xc8>)
 8002b16:	f7ff fc65 	bl	80023e4 <TIM_ARRPreloadConfig>

  // Timer2 enable
  TIM_ARRPreloadConfig(TIM2, ENABLE);
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002b20:	f7ff fc60 	bl	80023e4 <TIM_ARRPreloadConfig>
  TIM_Cmd(TIM2, ENABLE);
 8002b24:	2101      	movs	r1, #1
 8002b26:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002b2a:	f7ff fc7b 	bl	8002424 <TIM_Cmd>

}
 8002b2e:	bf00      	nop
 8002b30:	3720      	adds	r7, #32
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40010000 	.word	0x40010000

08002b3c <P_VGA_InitINT>:
//--------------------------------------------------------------
// internal Function
// init Interrupts
//--------------------------------------------------------------
void P_VGA_InitINT(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
  // init from DMA Interrupt
  // for TransferComplete Interrupt
  // DMA2, Stream5, Channel6
  //---------------------------------------------

  DMA_ITConfig(DMA2_Stream5, DMA_IT_TC, ENABLE);
 8002b42:	2201      	movs	r2, #1
 8002b44:	2110      	movs	r1, #16
 8002b46:	4812      	ldr	r0, [pc, #72]	; (8002b90 <P_VGA_InitINT+0x54>)
 8002b48:	f7ff f9e8 	bl	8001f1c <DMA_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream5_IRQn;
 8002b4c:	2344      	movs	r3, #68	; 0x44
 8002b4e:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002b50:	2300      	movs	r3, #0
 8002b52:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002b54:	2300      	movs	r3, #0
 8002b56:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8002b5c:	1d3b      	adds	r3, r7, #4
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff f832 	bl	8001bc8 <NVIC_Init>
  // init of Timer2 Interrupt
  // for HSync-Counter using Update
  // for DMA Trigger START using CH3
  //---------------------------------------------

  TIM_ITConfig(TIM2,TIM_IT_CC3,ENABLE);
 8002b64:	2201      	movs	r2, #1
 8002b66:	2108      	movs	r1, #8
 8002b68:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002b6c:	f7ff fda2 	bl	80026b4 <TIM_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 8002b70:	231c      	movs	r3, #28
 8002b72:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8002b80:	1d3b      	adds	r3, r7, #4
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff f820 	bl	8001bc8 <NVIC_Init>
}
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40026488 	.word	0x40026488

08002b94 <P_VGA_InitDMA>:
//--------------------------------------------------------------
// internal Function
// init DMA
//--------------------------------------------------------------
void P_VGA_InitDMA(void)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b090      	sub	sp, #64	; 0x40
 8002b98:	af00      	add	r7, sp, #0
  // (look at page 217 of the Ref Manual)
  // DMA=2, Channel=6, Stream=5
  //---------------------------------------------

  // Clock Enable (DMA)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8002ba0:	f7ff fb54 	bl	800224c <RCC_AHB1PeriphClockCmd>

  // DMA init (DMA2, Channel6, Stream5)
  DMA_Cmd(DMA2_Stream5, DISABLE);
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	481b      	ldr	r0, [pc, #108]	; (8002c14 <P_VGA_InitDMA+0x80>)
 8002ba8:	f7ff f99c 	bl	8001ee4 <DMA_Cmd>
  DMA_DeInit(DMA2_Stream5);
 8002bac:	4819      	ldr	r0, [pc, #100]	; (8002c14 <P_VGA_InitDMA+0x80>)
 8002bae:	f7ff f86d 	bl	8001c8c <DMA_DeInit>
  DMA_InitStructure.DMA_Channel = DMA_Channel_6;
 8002bb2:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8002bb6:	607b      	str	r3, [r7, #4]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)VGA_GPIOE_ODR_ADDRESS;
 8002bb8:	4b17      	ldr	r3, [pc, #92]	; (8002c18 <P_VGA_InitDMA+0x84>)
 8002bba:	60bb      	str	r3, [r7, #8]
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&VGA_RAM1;
 8002bbc:	4b17      	ldr	r3, [pc, #92]	; (8002c1c <P_VGA_InitDMA+0x88>)
 8002bbe:	60fb      	str	r3, [r7, #12]
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8002bc0:	2340      	movs	r3, #64	; 0x40
 8002bc2:	613b      	str	r3, [r7, #16]
  DMA_InitStructure.DMA_BufferSize = VGA_DISPLAY_X+1;
 8002bc4:	f240 1341 	movw	r3, #321	; 0x141
 8002bc8:	617b      	str	r3, [r7, #20]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61bb      	str	r3, [r7, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8002bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bd2:	61fb      	str	r3, [r7, #28]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	623b      	str	r3, [r7, #32]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8002be0:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8002be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8002be6:	2300      	movs	r3, #0
 8002be8:	633b      	str	r3, [r7, #48]	; 0x30
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 8002bea:	2301      	movs	r3, #1
 8002bec:	637b      	str	r3, [r7, #52]	; 0x34
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	63bb      	str	r3, [r7, #56]	; 0x38
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  DMA_Init(DMA2_Stream5, &DMA_InitStructure);
 8002bf6:	1d3b      	adds	r3, r7, #4
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4806      	ldr	r0, [pc, #24]	; (8002c14 <P_VGA_InitDMA+0x80>)
 8002bfc:	f7ff f91a 	bl	8001e34 <DMA_Init>

  // DMA-Timer1 enable
  TIM_DMACmd(TIM1,TIM_DMA_Update,ENABLE);
 8002c00:	2201      	movs	r2, #1
 8002c02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c06:	4806      	ldr	r0, [pc, #24]	; (8002c20 <P_VGA_InitDMA+0x8c>)
 8002c08:	f7ff fd89 	bl	800271e <TIM_DMACmd>
}
 8002c0c:	bf00      	nop
 8002c0e:	3740      	adds	r7, #64	; 0x40
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40026488 	.word	0x40026488
 8002c18:	40021015 	.word	0x40021015
 8002c1c:	2000002c 	.word	0x2000002c
 8002c20:	40010000 	.word	0x40010000

08002c24 <TIM2_IRQHandler>:
//
//   CC3-Interrupt    -> starts from DMA
// Watch it.. higher troughput when interrupt flag is left alone
//--------------------------------------------------------------
void TIM2_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0

  // Interrupt of Timer2 CH3 occurred (for Trigger start)
  TIM_ClearITPendingBit(TIM2, TIM_IT_CC3);
 8002c28:	2108      	movs	r1, #8
 8002c2a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002c2e:	f7ff fd65 	bl	80026fc <TIM_ClearITPendingBit>

  VGA.hsync_cnt++;
 8002c32:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <TIM2_IRQHandler+0xa8>)
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	3301      	adds	r3, #1
 8002c38:	b29a      	uxth	r2, r3
 8002c3a:	4b24      	ldr	r3, [pc, #144]	; (8002ccc <TIM2_IRQHandler+0xa8>)
 8002c3c:	801a      	strh	r2, [r3, #0]
  if(VGA.hsync_cnt>=VGA_VSYNC_PERIODE) {
 8002c3e:	4b23      	ldr	r3, [pc, #140]	; (8002ccc <TIM2_IRQHandler+0xa8>)
 8002c40:	881b      	ldrh	r3, [r3, #0]
 8002c42:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 8002c46:	d905      	bls.n	8002c54 <TIM2_IRQHandler+0x30>
    // -----------
    VGA.hsync_cnt=0;
 8002c48:	4b20      	ldr	r3, [pc, #128]	; (8002ccc <TIM2_IRQHandler+0xa8>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr=(uint32_t)(&VGA_RAM1[0]);
 8002c4e:	4a20      	ldr	r2, [pc, #128]	; (8002cd0 <TIM2_IRQHandler+0xac>)
 8002c50:	4b1e      	ldr	r3, [pc, #120]	; (8002ccc <TIM2_IRQHandler+0xa8>)
 8002c52:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  if(VGA.hsync_cnt<VGA_VSYNC_IMP) {
 8002c54:	4b1d      	ldr	r3, [pc, #116]	; (8002ccc <TIM2_IRQHandler+0xa8>)
 8002c56:	881b      	ldrh	r3, [r3, #0]
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d804      	bhi.n	8002c66 <TIM2_IRQHandler+0x42>
    // HSync low
    GPIOB->BSRRH = GPIO_Pin_12;
 8002c5c:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <TIM2_IRQHandler+0xb0>)
 8002c5e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c62:	835a      	strh	r2, [r3, #26]
 8002c64:	e003      	b.n	8002c6e <TIM2_IRQHandler+0x4a>
  }
  else {
    // HSync High
    GPIOB->BSRRL = GPIO_Pin_12;
 8002c66:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <TIM2_IRQHandler+0xb0>)
 8002c68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002c6c:	831a      	strh	r2, [r3, #24]
  }

  // Test for DMA start
  if((VGA.hsync_cnt>=VGA_VSYNC_BILD_START) && (VGA.hsync_cnt<=VGA_VSYNC_BILD_STOP)) {
 8002c6e:	4b17      	ldr	r3, [pc, #92]	; (8002ccc <TIM2_IRQHandler+0xa8>)
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	2b23      	cmp	r3, #35	; 0x23
 8002c74:	d927      	bls.n	8002cc6 <TIM2_IRQHandler+0xa2>
 8002c76:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <TIM2_IRQHandler+0xa8>)
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	f240 2202 	movw	r2, #514	; 0x202
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d821      	bhi.n	8002cc6 <TIM2_IRQHandler+0xa2>
    // after FP start => DMA Transfer

    // DMA2 init
	DMA2_Stream5->CR=VGA.dma2_cr_reg;
 8002c82:	4a15      	ldr	r2, [pc, #84]	; (8002cd8 <TIM2_IRQHandler+0xb4>)
 8002c84:	4b11      	ldr	r3, [pc, #68]	; (8002ccc <TIM2_IRQHandler+0xa8>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR=VGA.start_adr;
 8002c8a:	4a13      	ldr	r2, [pc, #76]	; (8002cd8 <TIM2_IRQHandler+0xb4>)
 8002c8c:	4b0f      	ldr	r3, [pc, #60]	; (8002ccc <TIM2_IRQHandler+0xa8>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1|=TIM_CR1_CEN;
 8002c92:	4a12      	ldr	r2, [pc, #72]	; (8002cdc <TIM2_IRQHandler+0xb8>)
 8002c94:	4b11      	ldr	r3, [pc, #68]	; (8002cdc <TIM2_IRQHandler+0xb8>)
 8002c96:	881b      	ldrh	r3, [r3, #0]
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	f043 0301 	orr.w	r3, r3, #1
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	8013      	strh	r3, [r2, #0]
    // DMA2 enable
    DMA2_Stream5->CR|=DMA_SxCR_EN;
 8002ca2:	4a0d      	ldr	r2, [pc, #52]	; (8002cd8 <TIM2_IRQHandler+0xb4>)
 8002ca4:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <TIM2_IRQHandler+0xb4>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	6013      	str	r3, [r2, #0]

    // Test Adrespointer for high
    if((VGA.hsync_cnt & 0x01)!=0) {
 8002cae:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <TIM2_IRQHandler+0xa8>)
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d005      	beq.n	8002cc6 <TIM2_IRQHandler+0xa2>
      // inc after Hsync
      VGA.start_adr+=(VGA_DISPLAY_X+1);
 8002cba:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <TIM2_IRQHandler+0xa8>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f203 1341 	addw	r3, r3, #321	; 0x141
 8002cc2:	4a02      	ldr	r2, [pc, #8]	; (8002ccc <TIM2_IRQHandler+0xa8>)
 8002cc4:	6053      	str	r3, [r2, #4]
    }
  }
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	20000020 	.word	0x20000020
 8002cd0:	2000002c 	.word	0x2000002c
 8002cd4:	40020400 	.word	0x40020400
 8002cd8:	40026488 	.word	0x40026488
 8002cdc:	40010000 	.word	0x40010000

08002ce0 <DMA2_Stream5_IRQHandler>:
//   after TransferCompleteInterrupt -> stop DMA
//
// still a bit buggy
//--------------------------------------------------------------
void DMA2_Stream5_IRQHandler(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  if(DMA_GetITStatus(DMA2_Stream5, DMA_IT_TCIF5))
 8002ce4:	490d      	ldr	r1, [pc, #52]	; (8002d1c <DMA2_Stream5_IRQHandler+0x3c>)
 8002ce6:	480e      	ldr	r0, [pc, #56]	; (8002d20 <DMA2_Stream5_IRQHandler+0x40>)
 8002ce8:	f7ff f952 	bl	8001f90 <DMA_GetITStatus>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d012      	beq.n	8002d18 <DMA2_Stream5_IRQHandler+0x38>
  {
    // TransferInterruptComplete Interrupt from DMA2
    DMA_ClearITPendingBit(DMA2_Stream5, DMA_IT_TCIF5);
 8002cf2:	490a      	ldr	r1, [pc, #40]	; (8002d1c <DMA2_Stream5_IRQHandler+0x3c>)
 8002cf4:	480a      	ldr	r0, [pc, #40]	; (8002d20 <DMA2_Stream5_IRQHandler+0x40>)
 8002cf6:	f7ff f9a3 	bl	8002040 <DMA_ClearITPendingBit>
    // stop after all pixels => DMA Transfer stop

    // Timer1 stop
    TIM1->CR1&=~TIM_CR1_CEN;
 8002cfa:	4a0a      	ldr	r2, [pc, #40]	; (8002d24 <DMA2_Stream5_IRQHandler+0x44>)
 8002cfc:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <DMA2_Stream5_IRQHandler+0x44>)
 8002cfe:	881b      	ldrh	r3, [r3, #0]
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	f023 0301 	bic.w	r3, r3, #1
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	8013      	strh	r3, [r2, #0]
    // DMA2 disable
    DMA2_Stream5->CR=0;
 8002d0a:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <DMA2_Stream5_IRQHandler+0x40>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	601a      	str	r2, [r3, #0]
    // switch on black
    GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 8002d10:	4b05      	ldr	r3, [pc, #20]	; (8002d28 <DMA2_Stream5_IRQHandler+0x48>)
 8002d12:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8002d16:	835a      	strh	r2, [r3, #26]
  }
}
 8002d18:	bf00      	nop
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	20008800 	.word	0x20008800
 8002d20:	40026488 	.word	0x40026488
 8002d24:	40010000 	.word	0x40010000
 8002d28:	40021000 	.word	0x40021000

08002d2c <USART2_IRQHandler>:
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
}

void USART2_IRQHandler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
	// check if the USART2 receive interrupt flag was set
	if( USART_GetITStatus(USART2, USART_IT_RXNE))
 8002d32:	f240 5125 	movw	r1, #1317	; 0x525
 8002d36:	4827      	ldr	r0, [pc, #156]	; (8002dd4 <USART2_IRQHandler+0xa8>)
 8002d38:	f7ff fd43 	bl	80027c2 <USART_GetITStatus>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d044      	beq.n	8002dcc <USART2_IRQHandler+0xa0>
	{
		USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 8002d42:	f240 5125 	movw	r1, #1317	; 0x525
 8002d46:	4823      	ldr	r0, [pc, #140]	; (8002dd4 <USART2_IRQHandler+0xa8>)
 8002d48:	f7ff fd96 	bl	8002878 <USART_ClearITPendingBit>
		int i;
		char c = USART2->DR & 0xFF;
 8002d4c:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <USART2_IRQHandler+0xa8>)
 8002d4e:	889b      	ldrh	r3, [r3, #4]
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	70fb      	strb	r3, [r7, #3]
//		LCD_XY(10,1);
//		LCD_put("UART:   ");
//		LCD_XY(15,1);
//		LCD_putchar(c);

		if(c > 64 && c < 91)
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	2b40      	cmp	r3, #64	; 0x40
 8002d58:	d905      	bls.n	8002d66 <USART2_IRQHandler+0x3a>
 8002d5a:	78fb      	ldrb	r3, [r7, #3]
 8002d5c:	2b5a      	cmp	r3, #90	; 0x5a
 8002d5e:	d802      	bhi.n	8002d66 <USART2_IRQHandler+0x3a>
			c += 32;
 8002d60:	78fb      	ldrb	r3, [r7, #3]
 8002d62:	3320      	adds	r3, #32
 8002d64:	70fb      	strb	r3, [r7, #3]
		if(c <= 13)
 8002d66:	78fb      	ldrb	r3, [r7, #3]
 8002d68:	2b0d      	cmp	r3, #13
 8002d6a:	d81d      	bhi.n	8002da8 <USART2_IRQHandler+0x7c>
		{
			for(i=0;i<charcounter;i++)
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	607b      	str	r3, [r7, #4]
 8002d70:	e00b      	b.n	8002d8a <USART2_IRQHandler+0x5e>
			{
				USART_SendData(USART2, string[i]); // Echo Char
 8002d72:	4a19      	ldr	r2, [pc, #100]	; (8002dd8 <USART2_IRQHandler+0xac>)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	4413      	add	r3, r2
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4815      	ldr	r0, [pc, #84]	; (8002dd4 <USART2_IRQHandler+0xa8>)
 8002d80:	f7ff fcf1 	bl	8002766 <USART_SendData>
			for(i=0;i<charcounter;i++)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3301      	adds	r3, #1
 8002d88:	607b      	str	r3, [r7, #4]
 8002d8a:	4b14      	ldr	r3, [pc, #80]	; (8002ddc <USART2_IRQHandler+0xb0>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	dbee      	blt.n	8002d72 <USART2_IRQHandler+0x46>
			}
			charcounter = 0;
 8002d94:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <USART2_IRQHandler+0xb0>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	601a      	str	r2, [r3, #0]
			USART_SendData(USART2, c); // Echo Char
 8002d9a:	78fb      	ldrb	r3, [r7, #3]
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	4619      	mov	r1, r3
 8002da0:	480c      	ldr	r0, [pc, #48]	; (8002dd4 <USART2_IRQHandler+0xa8>)
 8002da2:	f7ff fce0 	bl	8002766 <USART_SendData>
 8002da6:	e009      	b.n	8002dbc <USART2_IRQHandler+0x90>
		}
		else
		{
			string[charcounter] = c;
 8002da8:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <USART2_IRQHandler+0xb0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	490a      	ldr	r1, [pc, #40]	; (8002dd8 <USART2_IRQHandler+0xac>)
 8002dae:	78fa      	ldrb	r2, [r7, #3]
 8002db0:	54ca      	strb	r2, [r1, r3]
			charcounter++;
 8002db2:	4b0a      	ldr	r3, [pc, #40]	; (8002ddc <USART2_IRQHandler+0xb0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3301      	adds	r3, #1
 8002db8:	4a08      	ldr	r2, [pc, #32]	; (8002ddc <USART2_IRQHandler+0xb0>)
 8002dba:	6013      	str	r3, [r2, #0]
		}


		while (USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET); // Wait for Empty
 8002dbc:	bf00      	nop
 8002dbe:	2140      	movs	r1, #64	; 0x40
 8002dc0:	4804      	ldr	r0, [pc, #16]	; (8002dd4 <USART2_IRQHandler+0xa8>)
 8002dc2:	f7ff fce2 	bl	800278a <USART_GetFlagStatus>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f8      	beq.n	8002dbe <USART2_IRQHandler+0x92>

	}
}
 8002dcc:	bf00      	nop
 8002dce:	3708      	adds	r7, #8
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40004400 	.word	0x40004400
 8002dd8:	20012d1c 	.word	0x20012d1c
 8002ddc:	2000001c 	.word	0x2000001c

08002de0 <main>:
#include <math.h>
#include "line.h"
#include "text.h"

int main(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
	//  uint32_t n;

	SystemInit(); // System speed to 168MHz
 8002de4:	f000 f864 	bl	8002eb0 <SystemInit>

	UB_VGA_Screen_Init(); // Init VGA-Screen
 8002de8:	f7ff fd64 	bl	80028b4 <UB_VGA_Screen_Init>

	UB_VGA_FillScreen(VGA_COL_BLACK);
 8002dec:	2000      	movs	r0, #0
 8002dee:	f7ff fda1 	bl	8002934 <UB_VGA_FillScreen>
	//draw_rectangle (0,0,50,50,125);
	//draw_bitmap (50, 50);
	draw_text(50, 50, 'Y');
 8002df2:	2259      	movs	r2, #89	; 0x59
 8002df4:	2132      	movs	r1, #50	; 0x32
 8002df6:	2032      	movs	r0, #50	; 0x32
 8002df8:	f7fd f9e6 	bl	80001c8 <draw_text>


  while(1)
 8002dfc:	e7fe      	b.n	8002dfc <main+0x1c>
	...

08002e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002e04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002e06:	e003      	b.n	8002e10 <LoopCopyDataInit>

08002e08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002e08:	4b0c      	ldr	r3, [pc, #48]	; (8002e3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002e0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002e0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002e0e:	3104      	adds	r1, #4

08002e10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002e10:	480b      	ldr	r0, [pc, #44]	; (8002e40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002e12:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002e14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002e16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002e18:	d3f6      	bcc.n	8002e08 <CopyDataInit>
  ldr  r2, =_sbss
 8002e1a:	4a0b      	ldr	r2, [pc, #44]	; (8002e48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002e1c:	e002      	b.n	8002e24 <LoopFillZerobss>

08002e1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002e1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002e20:	f842 3b04 	str.w	r3, [r2], #4

08002e24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002e24:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002e26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002e28:	d3f9      	bcc.n	8002e1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002e2a:	f000 f841 	bl	8002eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e2e:	f000 f8f1 	bl	8003014 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e32:	f7ff ffd5 	bl	8002de0 <main>
  bx  lr    
 8002e36:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002e38:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002e3c:	08003fcc 	.word	0x08003fcc
  ldr  r0, =_sdata
 8002e40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002e44:	20000000 	.word	0x20000000
  ldr  r2, =_sbss
 8002e48:	20000000 	.word	0x20000000
  ldr  r3, = _ebss
 8002e4c:	20012d80 	.word	0x20012d80

08002e50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e50:	e7fe      	b.n	8002e50 <ADC_IRQHandler>

08002e52 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8002e52:	b480      	push	{r7}
 8002e54:	af00      	add	r7, sp, #0
}
 8002e56:	bf00      	nop
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8002e64:	e7fe      	b.n	8002e64 <HardFault_Handler+0x4>

08002e66 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8002e66:	b480      	push	{r7}
 8002e68:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8002e6a:	e7fe      	b.n	8002e6a <MemManage_Handler+0x4>

08002e6c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8002e70:	e7fe      	b.n	8002e70 <BusFault_Handler+0x4>

08002e72 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8002e72:	b480      	push	{r7}
 8002e74:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8002e76:	e7fe      	b.n	8002e76 <UsageFault_Handler+0x4>

08002e78 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	af00      	add	r7, sp, #0
}
 8002e7c:	bf00      	nop
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr

08002e86 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8002e86:	b480      	push	{r7}
 8002e88:	af00      	add	r7, sp, #0
}
 8002e8a:	bf00      	nop
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
}
 8002e98:	bf00      	nop
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr

08002ea2 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8002ea6:	bf00      	nop
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002eb4:	4a16      	ldr	r2, [pc, #88]	; (8002f10 <SystemInit+0x60>)
 8002eb6:	4b16      	ldr	r3, [pc, #88]	; (8002f10 <SystemInit+0x60>)
 8002eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ec0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002ec4:	4a13      	ldr	r2, [pc, #76]	; (8002f14 <SystemInit+0x64>)
 8002ec6:	4b13      	ldr	r3, [pc, #76]	; (8002f14 <SystemInit+0x64>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f043 0301 	orr.w	r3, r3, #1
 8002ece:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002ed0:	4b10      	ldr	r3, [pc, #64]	; (8002f14 <SystemInit+0x64>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002ed6:	4a0f      	ldr	r2, [pc, #60]	; (8002f14 <SystemInit+0x64>)
 8002ed8:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <SystemInit+0x64>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002ee6:	4b0b      	ldr	r3, [pc, #44]	; (8002f14 <SystemInit+0x64>)
 8002ee8:	4a0b      	ldr	r2, [pc, #44]	; (8002f18 <SystemInit+0x68>)
 8002eea:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002eec:	4a09      	ldr	r2, [pc, #36]	; (8002f14 <SystemInit+0x64>)
 8002eee:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <SystemInit+0x64>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ef6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002ef8:	4b06      	ldr	r3, [pc, #24]	; (8002f14 <SystemInit+0x64>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002efe:	f000 f80d 	bl	8002f1c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002f02:	4b03      	ldr	r3, [pc, #12]	; (8002f10 <SystemInit+0x60>)
 8002f04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f08:	609a      	str	r2, [r3, #8]
#endif
}
 8002f0a:	bf00      	nop
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	e000ed00 	.word	0xe000ed00
 8002f14:	40023800 	.word	0x40023800
 8002f18:	24003010 	.word	0x24003010

08002f1c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002f22:	2300      	movs	r3, #0
 8002f24:	607b      	str	r3, [r7, #4]
 8002f26:	2300      	movs	r3, #0
 8002f28:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002f2a:	4a36      	ldr	r2, [pc, #216]	; (8003004 <SetSysClock+0xe8>)
 8002f2c:	4b35      	ldr	r3, [pc, #212]	; (8003004 <SetSysClock+0xe8>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f34:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002f36:	4b33      	ldr	r3, [pc, #204]	; (8003004 <SetSysClock+0xe8>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3301      	adds	r3, #1
 8002f44:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d103      	bne.n	8002f54 <SetSysClock+0x38>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002f52:	d1f0      	bne.n	8002f36 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002f54:	4b2b      	ldr	r3, [pc, #172]	; (8003004 <SetSysClock+0xe8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002f60:	2301      	movs	r3, #1
 8002f62:	603b      	str	r3, [r7, #0]
 8002f64:	e001      	b.n	8002f6a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002f66:	2300      	movs	r3, #0
 8002f68:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d142      	bne.n	8002ff6 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8002f70:	4a24      	ldr	r2, [pc, #144]	; (8003004 <SetSysClock+0xe8>)
 8002f72:	4b24      	ldr	r3, [pc, #144]	; (8003004 <SetSysClock+0xe8>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f7a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8002f7c:	4a22      	ldr	r2, [pc, #136]	; (8003008 <SetSysClock+0xec>)
 8002f7e:	4b22      	ldr	r3, [pc, #136]	; (8003008 <SetSysClock+0xec>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f86:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8002f88:	4a1e      	ldr	r2, [pc, #120]	; (8003004 <SetSysClock+0xe8>)
 8002f8a:	4b1e      	ldr	r3, [pc, #120]	; (8003004 <SetSysClock+0xe8>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002f90:	4a1c      	ldr	r2, [pc, #112]	; (8003004 <SetSysClock+0xe8>)
 8002f92:	4b1c      	ldr	r3, [pc, #112]	; (8003004 <SetSysClock+0xe8>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f9a:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002f9c:	4a19      	ldr	r2, [pc, #100]	; (8003004 <SetSysClock+0xe8>)
 8002f9e:	4b19      	ldr	r3, [pc, #100]	; (8003004 <SetSysClock+0xe8>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8002fa6:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8002fa8:	4b16      	ldr	r3, [pc, #88]	; (8003004 <SetSysClock+0xe8>)
 8002faa:	4a18      	ldr	r2, [pc, #96]	; (800300c <SetSysClock+0xf0>)
 8002fac:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8002fae:	4a15      	ldr	r2, [pc, #84]	; (8003004 <SetSysClock+0xe8>)
 8002fb0:	4b14      	ldr	r3, [pc, #80]	; (8003004 <SetSysClock+0xe8>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fb8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8002fba:	bf00      	nop
 8002fbc:	4b11      	ldr	r3, [pc, #68]	; (8003004 <SetSysClock+0xe8>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d0f9      	beq.n	8002fbc <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8002fc8:	4b11      	ldr	r3, [pc, #68]	; (8003010 <SetSysClock+0xf4>)
 8002fca:	f240 7205 	movw	r2, #1797	; 0x705
 8002fce:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8002fd0:	4a0c      	ldr	r2, [pc, #48]	; (8003004 <SetSysClock+0xe8>)
 8002fd2:	4b0c      	ldr	r3, [pc, #48]	; (8003004 <SetSysClock+0xe8>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f023 0303 	bic.w	r3, r3, #3
 8002fda:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002fdc:	4a09      	ldr	r2, [pc, #36]	; (8003004 <SetSysClock+0xe8>)
 8002fde:	4b09      	ldr	r3, [pc, #36]	; (8003004 <SetSysClock+0xe8>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f043 0302 	orr.w	r3, r3, #2
 8002fe6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002fe8:	bf00      	nop
 8002fea:	4b06      	ldr	r3, [pc, #24]	; (8003004 <SetSysClock+0xe8>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 030c 	and.w	r3, r3, #12
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d1f9      	bne.n	8002fea <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	40023800 	.word	0x40023800
 8003008:	40007000 	.word	0x40007000
 800300c:	07405419 	.word	0x07405419
 8003010:	40023c00 	.word	0x40023c00

08003014 <__libc_init_array>:
 8003014:	b570      	push	{r4, r5, r6, lr}
 8003016:	4e0d      	ldr	r6, [pc, #52]	; (800304c <__libc_init_array+0x38>)
 8003018:	4c0d      	ldr	r4, [pc, #52]	; (8003050 <__libc_init_array+0x3c>)
 800301a:	1ba4      	subs	r4, r4, r6
 800301c:	10a4      	asrs	r4, r4, #2
 800301e:	2500      	movs	r5, #0
 8003020:	42a5      	cmp	r5, r4
 8003022:	d109      	bne.n	8003038 <__libc_init_array+0x24>
 8003024:	4e0b      	ldr	r6, [pc, #44]	; (8003054 <__libc_init_array+0x40>)
 8003026:	4c0c      	ldr	r4, [pc, #48]	; (8003058 <__libc_init_array+0x44>)
 8003028:	f000 f82c 	bl	8003084 <_init>
 800302c:	1ba4      	subs	r4, r4, r6
 800302e:	10a4      	asrs	r4, r4, #2
 8003030:	2500      	movs	r5, #0
 8003032:	42a5      	cmp	r5, r4
 8003034:	d105      	bne.n	8003042 <__libc_init_array+0x2e>
 8003036:	bd70      	pop	{r4, r5, r6, pc}
 8003038:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800303c:	4798      	blx	r3
 800303e:	3501      	adds	r5, #1
 8003040:	e7ee      	b.n	8003020 <__libc_init_array+0xc>
 8003042:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003046:	4798      	blx	r3
 8003048:	3501      	adds	r5, #1
 800304a:	e7f2      	b.n	8003032 <__libc_init_array+0x1e>
 800304c:	08003fc4 	.word	0x08003fc4
 8003050:	08003fc4 	.word	0x08003fc4
 8003054:	08003fc4 	.word	0x08003fc4
 8003058:	08003fc8 	.word	0x08003fc8

0800305c <memcpy>:
 800305c:	b510      	push	{r4, lr}
 800305e:	1e43      	subs	r3, r0, #1
 8003060:	440a      	add	r2, r1
 8003062:	4291      	cmp	r1, r2
 8003064:	d100      	bne.n	8003068 <memcpy+0xc>
 8003066:	bd10      	pop	{r4, pc}
 8003068:	f811 4b01 	ldrb.w	r4, [r1], #1
 800306c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003070:	e7f7      	b.n	8003062 <memcpy+0x6>

08003072 <memset>:
 8003072:	4402      	add	r2, r0
 8003074:	4603      	mov	r3, r0
 8003076:	4293      	cmp	r3, r2
 8003078:	d100      	bne.n	800307c <memset+0xa>
 800307a:	4770      	bx	lr
 800307c:	f803 1b01 	strb.w	r1, [r3], #1
 8003080:	e7f9      	b.n	8003076 <memset+0x4>
	...

08003084 <_init>:
 8003084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003086:	bf00      	nop
 8003088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800308a:	bc08      	pop	{r3}
 800308c:	469e      	mov	lr, r3
 800308e:	4770      	bx	lr

08003090 <_fini>:
 8003090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003092:	bf00      	nop
 8003094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003096:	bc08      	pop	{r3}
 8003098:	469e      	mov	lr, r3
 800309a:	4770      	bx	lr
