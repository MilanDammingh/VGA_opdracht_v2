
Software_ontwikkeling_opdracht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a0dc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  0800a264  0800a264  0001a264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800a518  0800a518  0001a518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800a51c  0800a51c  0001a51c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000680  20000000  0800a520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020680  2**0
                  CONTENTS
  7 .bss          0001330c  20000680  20000680  00020680  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2001398c  2001398c  00020680  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020680  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000c4f5  00000000  00000000  000206b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001c58  00000000  00000000  0002cba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000998  00000000  00000000  0002e800  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000890  00000000  00000000  0002f198  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004d44  00000000  00000000  0002fa28  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003160  00000000  00000000  0003476c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000378cc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002d98  00000000  00000000  00037948  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0003a6e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000680 	.word	0x20000680
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a24c 	.word	0x0800a24c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000684 	.word	0x20000684
 80001c4:	0800a24c 	.word	0x0800a24c

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032a:	f1a4 0401 	sub.w	r4, r4, #1
 800032e:	d1e9      	bne.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f092 0f00 	teq	r2, #0
 80004d6:	bf14      	ite	ne
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	e720      	b.n	8000330 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_ul2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f04f 0500 	mov.w	r5, #0
 80004fe:	e00a      	b.n	8000516 <__aeabi_l2d+0x16>

08000500 <__aeabi_l2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050e:	d502      	bpl.n	8000516 <__aeabi_l2d+0x16>
 8000510:	4240      	negs	r0, r0
 8000512:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000516:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000522:	f43f aedc 	beq.w	80002de <__adddf3+0xe6>
 8000526:	f04f 0203 	mov.w	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053e:	f1c2 0320 	rsb	r3, r2, #32
 8000542:	fa00 fc03 	lsl.w	ip, r0, r3
 8000546:	fa20 f002 	lsr.w	r0, r0, r2
 800054a:	fa01 fe03 	lsl.w	lr, r1, r3
 800054e:	ea40 000e 	orr.w	r0, r0, lr
 8000552:	fa21 f102 	lsr.w	r1, r1, r2
 8000556:	4414      	add	r4, r2
 8000558:	e6c1      	b.n	80002de <__adddf3+0xe6>
 800055a:	bf00      	nop

0800055c <__aeabi_dmul>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000562:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000566:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056a:	bf1d      	ittte	ne
 800056c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000570:	ea94 0f0c 	teqne	r4, ip
 8000574:	ea95 0f0c 	teqne	r5, ip
 8000578:	f000 f8de 	bleq	8000738 <__aeabi_dmul+0x1dc>
 800057c:	442c      	add	r4, r5
 800057e:	ea81 0603 	eor.w	r6, r1, r3
 8000582:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000586:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058e:	bf18      	it	ne
 8000590:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800059c:	d038      	beq.n	8000610 <__aeabi_dmul+0xb4>
 800059e:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a2:	f04f 0500 	mov.w	r5, #0
 80005a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b2:	f04f 0600 	mov.w	r6, #0
 80005b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ba:	f09c 0f00 	teq	ip, #0
 80005be:	bf18      	it	ne
 80005c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d0:	d204      	bcs.n	80005dc <__aeabi_dmul+0x80>
 80005d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d6:	416d      	adcs	r5, r5
 80005d8:	eb46 0606 	adc.w	r6, r6, r6
 80005dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f4:	bf88      	it	hi
 80005f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fa:	d81e      	bhi.n	800063a <__aeabi_dmul+0xde>
 80005fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000614:	ea46 0101 	orr.w	r1, r6, r1
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	ea81 0103 	eor.w	r1, r1, r3
 8000620:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000624:	bfc2      	ittt	gt
 8000626:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062e:	bd70      	popgt	{r4, r5, r6, pc}
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f04f 0e00 	mov.w	lr, #0
 8000638:	3c01      	subs	r4, #1
 800063a:	f300 80ab 	bgt.w	8000794 <__aeabi_dmul+0x238>
 800063e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000642:	bfde      	ittt	le
 8000644:	2000      	movle	r0, #0
 8000646:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064a:	bd70      	pople	{r4, r5, r6, pc}
 800064c:	f1c4 0400 	rsb	r4, r4, #0
 8000650:	3c20      	subs	r4, #32
 8000652:	da35      	bge.n	80006c0 <__aeabi_dmul+0x164>
 8000654:	340c      	adds	r4, #12
 8000656:	dc1b      	bgt.n	8000690 <__aeabi_dmul+0x134>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f305 	lsl.w	r3, r0, r5
 8000664:	fa20 f004 	lsr.w	r0, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800067c:	fa21 f604 	lsr.w	r6, r1, r4
 8000680:	eb42 0106 	adc.w	r1, r2, r6
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f1c4 040c 	rsb	r4, r4, #12
 8000694:	f1c4 0520 	rsb	r5, r4, #32
 8000698:	fa00 f304 	lsl.w	r3, r0, r4
 800069c:	fa20 f005 	lsr.w	r0, r0, r5
 80006a0:	fa01 f204 	lsl.w	r2, r1, r4
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	f141 0100 	adc.w	r1, r1, #0
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f205 	lsl.w	r2, r0, r5
 80006c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006cc:	fa20 f304 	lsr.w	r3, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea43 0302 	orr.w	r3, r3, r2
 80006d8:	fa21 f004 	lsr.w	r0, r1, r4
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	fa21 f204 	lsr.w	r2, r1, r4
 80006e4:	ea20 0002 	bic.w	r0, r0, r2
 80006e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f094 0f00 	teq	r4, #0
 80006fc:	d10f      	bne.n	800071e <__aeabi_dmul+0x1c2>
 80006fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000702:	0040      	lsls	r0, r0, #1
 8000704:	eb41 0101 	adc.w	r1, r1, r1
 8000708:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800070c:	bf08      	it	eq
 800070e:	3c01      	subeq	r4, #1
 8000710:	d0f7      	beq.n	8000702 <__aeabi_dmul+0x1a6>
 8000712:	ea41 0106 	orr.w	r1, r1, r6
 8000716:	f095 0f00 	teq	r5, #0
 800071a:	bf18      	it	ne
 800071c:	4770      	bxne	lr
 800071e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	eb43 0303 	adc.w	r3, r3, r3
 8000728:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3d01      	subeq	r5, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1c6>
 8000732:	ea43 0306 	orr.w	r3, r3, r6
 8000736:	4770      	bx	lr
 8000738:	ea94 0f0c 	teq	r4, ip
 800073c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000740:	bf18      	it	ne
 8000742:	ea95 0f0c 	teqne	r5, ip
 8000746:	d00c      	beq.n	8000762 <__aeabi_dmul+0x206>
 8000748:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074c:	bf18      	it	ne
 800074e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000752:	d1d1      	bne.n	80006f8 <__aeabi_dmul+0x19c>
 8000754:	ea81 0103 	eor.w	r1, r1, r3
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000766:	bf06      	itte	eq
 8000768:	4610      	moveq	r0, r2
 800076a:	4619      	moveq	r1, r3
 800076c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000770:	d019      	beq.n	80007a6 <__aeabi_dmul+0x24a>
 8000772:	ea94 0f0c 	teq	r4, ip
 8000776:	d102      	bne.n	800077e <__aeabi_dmul+0x222>
 8000778:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800077c:	d113      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 800077e:	ea95 0f0c 	teq	r5, ip
 8000782:	d105      	bne.n	8000790 <__aeabi_dmul+0x234>
 8000784:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000788:	bf1c      	itt	ne
 800078a:	4610      	movne	r0, r2
 800078c:	4619      	movne	r1, r3
 800078e:	d10a      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ae:	bd70      	pop	{r4, r5, r6, pc}

080007b0 <__aeabi_ddiv>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007be:	bf1d      	ittte	ne
 80007c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c4:	ea94 0f0c 	teqne	r4, ip
 80007c8:	ea95 0f0c 	teqne	r5, ip
 80007cc:	f000 f8a7 	bleq	800091e <__aeabi_ddiv+0x16e>
 80007d0:	eba4 0405 	sub.w	r4, r4, r5
 80007d4:	ea81 0e03 	eor.w	lr, r1, r3
 80007d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e0:	f000 8088 	beq.w	80008f4 <__aeabi_ddiv+0x144>
 80007e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000800:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000804:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000808:	429d      	cmp	r5, r3
 800080a:	bf08      	it	eq
 800080c:	4296      	cmpeq	r6, r2
 800080e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000812:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000816:	d202      	bcs.n	800081e <__aeabi_ddiv+0x6e>
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	1ab6      	subs	r6, r6, r2
 8000820:	eb65 0503 	sbc.w	r5, r5, r3
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 000c 	orrcs.w	r0, r0, ip
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800088c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000890:	d018      	beq.n	80008c4 <__aeabi_ddiv+0x114>
 8000892:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000896:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ae:	d1c0      	bne.n	8000832 <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	d10b      	bne.n	80008ce <__aeabi_ddiv+0x11e>
 80008b6:	ea41 0100 	orr.w	r1, r1, r0
 80008ba:	f04f 0000 	mov.w	r0, #0
 80008be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c2:	e7b6      	b.n	8000832 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf04      	itt	eq
 80008ca:	4301      	orreq	r1, r0
 80008cc:	2000      	moveq	r0, #0
 80008ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d2:	bf88      	it	hi
 80008d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d8:	f63f aeaf 	bhi.w	800063a <__aeabi_dmul+0xde>
 80008dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e0:	bf04      	itt	eq
 80008e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ea:	f150 0000 	adcs.w	r0, r0, #0
 80008ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000900:	bfc2      	ittt	gt
 8000902:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000906:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090a:	bd70      	popgt	{r4, r5, r6, pc}
 800090c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000910:	f04f 0e00 	mov.w	lr, #0
 8000914:	3c01      	subs	r4, #1
 8000916:	e690      	b.n	800063a <__aeabi_dmul+0xde>
 8000918:	ea45 0e06 	orr.w	lr, r5, r6
 800091c:	e68d      	b.n	800063a <__aeabi_dmul+0xde>
 800091e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000922:	ea94 0f0c 	teq	r4, ip
 8000926:	bf08      	it	eq
 8000928:	ea95 0f0c 	teqeq	r5, ip
 800092c:	f43f af3b 	beq.w	80007a6 <__aeabi_dmul+0x24a>
 8000930:	ea94 0f0c 	teq	r4, ip
 8000934:	d10a      	bne.n	800094c <__aeabi_ddiv+0x19c>
 8000936:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093a:	f47f af34 	bne.w	80007a6 <__aeabi_dmul+0x24a>
 800093e:	ea95 0f0c 	teq	r5, ip
 8000942:	f47f af25 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e72c      	b.n	80007a6 <__aeabi_dmul+0x24a>
 800094c:	ea95 0f0c 	teq	r5, ip
 8000950:	d106      	bne.n	8000960 <__aeabi_ddiv+0x1b0>
 8000952:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000956:	f43f aefd 	beq.w	8000754 <__aeabi_dmul+0x1f8>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e722      	b.n	80007a6 <__aeabi_dmul+0x24a>
 8000960:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096a:	f47f aec5 	bne.w	80006f8 <__aeabi_dmul+0x19c>
 800096e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000972:	f47f af0d 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000976:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097a:	f47f aeeb 	bne.w	8000754 <__aeabi_dmul+0x1f8>
 800097e:	e712      	b.n	80007a6 <__aeabi_dmul+0x24a>

08000980 <__aeabi_d2uiz>:
 8000980:	004a      	lsls	r2, r1, #1
 8000982:	d211      	bcs.n	80009a8 <__aeabi_d2uiz+0x28>
 8000984:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000988:	d211      	bcs.n	80009ae <__aeabi_d2uiz+0x2e>
 800098a:	d50d      	bpl.n	80009a8 <__aeabi_d2uiz+0x28>
 800098c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000990:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000994:	d40e      	bmi.n	80009b4 <__aeabi_d2uiz+0x34>
 8000996:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009a2:	fa23 f002 	lsr.w	r0, r3, r2
 80009a6:	4770      	bx	lr
 80009a8:	f04f 0000 	mov.w	r0, #0
 80009ac:	4770      	bx	lr
 80009ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b2:	d102      	bne.n	80009ba <__aeabi_d2uiz+0x3a>
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295
 80009b8:	4770      	bx	lr
 80009ba:	f04f 0000 	mov.w	r0, #0
 80009be:	4770      	bx	lr

080009c0 <clr_screen>:

/*
 * clearscreen
 */
void clr_screen(uint8_t color)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
	UB_VGA_FillScreen(color);	// Fill screen
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f007 fb61 	bl	8008094 <UB_VGA_FillScreen>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <draw_line>:

/*
 * draw_line
 */
void draw_line(int x1, int y1, int x2, int y2, int tn, int color)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b094      	sub	sp, #80	; 0x50
 80009de:	af00      	add	r7, sp, #0
 80009e0:	60f8      	str	r0, [r7, #12]
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
 80009e6:	603b      	str	r3, [r7, #0]

	int i,dx,dy,sdx,sdy,dxabs,dyabs,x,y,px,py;
	uint8_t stn,tn_draw;

	dx=x2-x1;      /* the horizontal distance of the line */
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
	dy=y2-y1;      /* the vertical distance of the line */
 80009f0:	683a      	ldr	r2, [r7, #0]
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
	dxabs=abs(dx);
 80009f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	bfb8      	it	lt
 80009fe:	425b      	neglt	r3, r3
 8000a00:	623b      	str	r3, [r7, #32]
	dyabs=abs(dy);
 8000a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	bfb8      	it	lt
 8000a08:	425b      	neglt	r3, r3
 8000a0a:	61fb      	str	r3, [r7, #28]
	sdx=sgn(dx);
 8000a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	db06      	blt.n	8000a20 <draw_line+0x46>
 8000a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	bfcc      	ite	gt
 8000a18:	2301      	movgt	r3, #1
 8000a1a:	2300      	movle	r3, #0
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	e001      	b.n	8000a24 <draw_line+0x4a>
 8000a20:	f04f 33ff 	mov.w	r3, #4294967295
 8000a24:	61bb      	str	r3, [r7, #24]
	sdy=sgn(dy);
 8000a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	db06      	blt.n	8000a3a <draw_line+0x60>
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	bfcc      	ite	gt
 8000a32:	2301      	movgt	r3, #1
 8000a34:	2300      	movle	r3, #0
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	e001      	b.n	8000a3e <draw_line+0x64>
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3e:	617b      	str	r3, [r7, #20]
	x=dyabs>>1;
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	105b      	asrs	r3, r3, #1
 8000a44:	64bb      	str	r3, [r7, #72]	; 0x48
	y=dxabs>>1;
 8000a46:	6a3b      	ldr	r3, [r7, #32]
 8000a48:	105b      	asrs	r3, r3, #1
 8000a4a:	647b      	str	r3, [r7, #68]	; 0x44
	px=x1;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	643b      	str	r3, [r7, #64]	; 0x40
	py=y1;
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	63fb      	str	r3, [r7, #60]	; 0x3c

	stn = ((tn%2)==0)? 1:0;  /* even of oneven lijndikte */
 8000a54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	bf0c      	ite	eq
 8000a5e:	2301      	moveq	r3, #1
 8000a60:	2300      	movne	r3, #0
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	74fb      	strb	r3, [r7, #19]
	tn_draw = tn>>1;
 8000a66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a68:	105b      	asrs	r3, r3, #1
 8000a6a:	74bb      	strb	r3, [r7, #18]

	if (dxabs>=dyabs) 	/* the line is more horizontal than vertical */
 8000a6c:	6a3a      	ldr	r2, [r7, #32]
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	f2c0 80c5 	blt.w	8000c00 <draw_line+0x226>
	{
		if(stn==1) /* even line thickness */
 8000a76:	7cfb      	ldrb	r3, [r7, #19]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d15e      	bne.n	8000b3a <draw_line+0x160>
		{
			px=x1;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	643b      	str	r3, [r7, #64]	; 0x40
			py=y1;
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000a84:	2300      	movs	r3, #0
 8000a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a88:	e052      	b.n	8000b30 <draw_line+0x156>
			{
				y+=dyabs;										/* adding dyabs for drawing vertical pixel */
 8000a8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000a8c:	69fb      	ldr	r3, [r7, #28]
 8000a8e:	4413      	add	r3, r2
 8000a90:	647b      	str	r3, [r7, #68]	; 0x44
				if (y>=dxabs)									/* y is higher than the dxabs of line, so py counting -1/0/1 */
 8000a92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000a94:	6a3b      	ldr	r3, [r7, #32]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	db07      	blt.n	8000aaa <draw_line+0xd0>
				{
					y-=dxabs;									/* substracting dxabs of y so counting is reset */
 8000a9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000a9c:	6a3b      	ldr	r3, [r7, #32]
 8000a9e:	1ad3      	subs	r3, r2, r3
 8000aa0:	647b      	str	r3, [r7, #68]	; 0x44
					py+=sdy;
 8000aa2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				for(int k=-tn_draw;k<tn_draw;k++)
 8000aaa:	7cbb      	ldrb	r3, [r7, #18]
 8000aac:	425b      	negs	r3, r3
 8000aae:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ab0:	e033      	b.n	8000b1a <draw_line+0x140>
				{
					if(px>=0 && px <= 320 && py>=0 && py <= 240)	/* pixels inside range VGA screen will be drawn */
 8000ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	db2d      	blt.n	8000b14 <draw_line+0x13a>
 8000ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000aba:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000abe:	dc29      	bgt.n	8000b14 <draw_line+0x13a>
 8000ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	db26      	blt.n	8000b14 <draw_line+0x13a>
 8000ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ac8:	2bf0      	cmp	r3, #240	; 0xf0
 8000aca:	dc23      	bgt.n	8000b14 <draw_line+0x13a>
					{
						UB_VGA_SetPixel(px+k,py-k,color);
 8000acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	4413      	add	r3, r2
 8000ad6:	b298      	uxth	r0, r3
 8000ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000ae6:	b2d2      	uxtb	r2, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f007 faf5 	bl	80080d8 <UB_VGA_SetPixel>
						UB_VGA_SetPixel(px+k,py-k-1,color);
 8000aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	4413      	add	r3, r2
 8000af8:	b298      	uxth	r0, r3
 8000afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	1ad3      	subs	r3, r2, r3
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	3b01      	subs	r3, #1
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f007 fae2 	bl	80080d8 <UB_VGA_SetPixel>
				for(int k=-tn_draw;k<tn_draw;k++)
 8000b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b16:	3301      	adds	r3, #1
 8000b18:	63bb      	str	r3, [r7, #56]	; 0x38
 8000b1a:	7cba      	ldrb	r2, [r7, #18]
 8000b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	dcc7      	bgt.n	8000ab2 <draw_line+0xd8>
					}
				}
				px+=sdx; 										/* -1/0/1 counting pixel */
 8000b22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	4413      	add	r3, r2
 8000b28:	643b      	str	r3, [r7, #64]	; 0x40
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b32:	6a3b      	ldr	r3, [r7, #32]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	dda8      	ble.n	8000a8a <draw_line+0xb0>
				}
				py+=sdy; 										/* -1/0/1 counting pixel */
			}
		}
	}
}
 8000b38:	e125      	b.n	8000d86 <draw_line+0x3ac>
		else if(stn==0)	/* odd line thickness */
 8000b3a:	7cfb      	ldrb	r3, [r7, #19]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	f040 8122 	bne.w	8000d86 <draw_line+0x3ac>
			px=x1;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	643b      	str	r3, [r7, #64]	; 0x40
			py=y1;
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b4e:	e052      	b.n	8000bf6 <draw_line+0x21c>
				y+=dyabs;										/* adding dyabs for drawing vertical pixel */
 8000b50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	4413      	add	r3, r2
 8000b56:	647b      	str	r3, [r7, #68]	; 0x44
				if (y>=dxabs)									/* y is higher than the dxabs of line, so py counting -1/0/1 */
 8000b58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b5a:	6a3b      	ldr	r3, [r7, #32]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	db07      	blt.n	8000b70 <draw_line+0x196>
					y-=dxabs;									/* substracting dxabs of y so counting is reset */
 8000b60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b62:	6a3b      	ldr	r3, [r7, #32]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	647b      	str	r3, [r7, #68]	; 0x44
					py+=sdy;
 8000b68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
				for(int h=0-tn_draw;h<=tn_draw;h++)
 8000b70:	7cbb      	ldrb	r3, [r7, #18]
 8000b72:	425b      	negs	r3, r3
 8000b74:	637b      	str	r3, [r7, #52]	; 0x34
 8000b76:	e033      	b.n	8000be0 <draw_line+0x206>
					if(px>=0 && px <= 320 && py>=0 && py <= 240)	/* pixels inside range VGA screen will be drawn */
 8000b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	db2d      	blt.n	8000bda <draw_line+0x200>
 8000b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b80:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000b84:	dc29      	bgt.n	8000bda <draw_line+0x200>
 8000b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	db26      	blt.n	8000bda <draw_line+0x200>
 8000b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b8e:	2bf0      	cmp	r3, #240	; 0xf0
 8000b90:	dc23      	bgt.n	8000bda <draw_line+0x200>
						UB_VGA_SetPixel(px+h,py-h,color);
 8000b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	4413      	add	r3, r2
 8000b9c:	b298      	uxth	r0, r3
 8000b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000bac:	b2d2      	uxtb	r2, r2
 8000bae:	4619      	mov	r1, r3
 8000bb0:	f007 fa92 	bl	80080d8 <UB_VGA_SetPixel>
						UB_VGA_SetPixel(px+h,py-h-1,color);
 8000bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	4413      	add	r3, r2
 8000bbe:	b298      	uxth	r0, r3
 8000bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f007 fa7f 	bl	80080d8 <UB_VGA_SetPixel>
				for(int h=0-tn_draw;h<=tn_draw;h++)
 8000bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bdc:	3301      	adds	r3, #1
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
 8000be0:	7cba      	ldrb	r2, [r7, #18]
 8000be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000be4:	429a      	cmp	r2, r3
 8000be6:	dac7      	bge.n	8000b78 <draw_line+0x19e>
				px+=sdx; 										/* -1/0/1 counting pixel */
 8000be8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	4413      	add	r3, r2
 8000bee:	643b      	str	r3, [r7, #64]	; 0x40
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000bf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000bf8:	6a3b      	ldr	r3, [r7, #32]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	dda8      	ble.n	8000b50 <draw_line+0x176>
}
 8000bfe:	e0c2      	b.n	8000d86 <draw_line+0x3ac>
		if(stn==1) /* even line thickness */
 8000c00:	7cfb      	ldrb	r3, [r7, #19]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d15e      	bne.n	8000cc4 <draw_line+0x2ea>
			px=x1;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	643b      	str	r3, [r7, #64]	; 0x40
			py=y1;
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000c0e:	2300      	movs	r3, #0
 8000c10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c12:	e052      	b.n	8000cba <draw_line+0x2e0>
				y+=dyabs;										/* adding dyabs for drawing vertical pixel */
 8000c14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	4413      	add	r3, r2
 8000c1a:	647b      	str	r3, [r7, #68]	; 0x44
				if (y>=dxabs)									/* y is higher than the dxabs of line, so py counting -1/0/1 */
 8000c1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c1e:	6a3b      	ldr	r3, [r7, #32]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	db07      	blt.n	8000c34 <draw_line+0x25a>
					y-=dxabs;									/* substracting dxabs of y so counting is reset */
 8000c24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c26:	6a3b      	ldr	r3, [r7, #32]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	647b      	str	r3, [r7, #68]	; 0x44
					py+=sdy;
 8000c2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	4413      	add	r3, r2
 8000c32:	63fb      	str	r3, [r7, #60]	; 0x3c
				for(int k=0-tn_draw;k<tn_draw;k++)
 8000c34:	7cbb      	ldrb	r3, [r7, #18]
 8000c36:	425b      	negs	r3, r3
 8000c38:	633b      	str	r3, [r7, #48]	; 0x30
 8000c3a:	e033      	b.n	8000ca4 <draw_line+0x2ca>
					if(px>=0 && px <= 320 && py>=0 && py <= 240)	/* pixels inside range VGA screen will be drawn */
 8000c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	db2d      	blt.n	8000c9e <draw_line+0x2c4>
 8000c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c44:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000c48:	dc29      	bgt.n	8000c9e <draw_line+0x2c4>
 8000c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	db26      	blt.n	8000c9e <draw_line+0x2c4>
 8000c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c52:	2bf0      	cmp	r3, #240	; 0xf0
 8000c54:	dc23      	bgt.n	8000c9e <draw_line+0x2c4>
						UB_VGA_SetPixel(px+k,py-k,color);
 8000c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	4413      	add	r3, r2
 8000c60:	b298      	uxth	r0, r3
 8000c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	1ad3      	subs	r3, r2, r3
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	4619      	mov	r1, r3
 8000c74:	f007 fa30 	bl	80080d8 <UB_VGA_SetPixel>
						UB_VGA_SetPixel(px+k,py-k-1,color);
 8000c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	4413      	add	r3, r2
 8000c82:	b298      	uxth	r0, r3
 8000c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	3b01      	subs	r3, #1
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000c96:	b2d2      	uxtb	r2, r2
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f007 fa1d 	bl	80080d8 <UB_VGA_SetPixel>
				for(int k=0-tn_draw;k<tn_draw;k++)
 8000c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	633b      	str	r3, [r7, #48]	; 0x30
 8000ca4:	7cba      	ldrb	r2, [r7, #18]
 8000ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	dcc7      	bgt.n	8000c3c <draw_line+0x262>
				px+=sdx; 										/* -1/0/1 counting pixel */
 8000cac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	643b      	str	r3, [r7, #64]	; 0x40
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000cba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000cbc:	6a3b      	ldr	r3, [r7, #32]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	dda8      	ble.n	8000c14 <draw_line+0x23a>
}
 8000cc2:	e060      	b.n	8000d86 <draw_line+0x3ac>
		else if(stn==0)	/* odd line thickness */
 8000cc4:	7cfb      	ldrb	r3, [r7, #19]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d15d      	bne.n	8000d86 <draw_line+0x3ac>
			px=x1;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	643b      	str	r3, [r7, #64]	; 0x40
			py=y1;
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dyabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000cd6:	e052      	b.n	8000d7e <draw_line+0x3a4>
				x+=dxabs;										/* adding dyabs for drawing vertical pixel */
 8000cd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000cda:	6a3b      	ldr	r3, [r7, #32]
 8000cdc:	4413      	add	r3, r2
 8000cde:	64bb      	str	r3, [r7, #72]	; 0x48
				if (x>=dyabs)									/* y is higher than the dxabs of line, so py counting -1/0/1 */
 8000ce0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	db07      	blt.n	8000cf8 <draw_line+0x31e>
					x-=dyabs;									/* substracting dxabs of y so counting is reset */
 8000ce8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	64bb      	str	r3, [r7, #72]	; 0x48
					px+=sdx;
 8000cf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	643b      	str	r3, [r7, #64]	; 0x40
				for(int h=0-tn_draw;h<=tn_draw;h++)
 8000cf8:	7cbb      	ldrb	r3, [r7, #18]
 8000cfa:	425b      	negs	r3, r3
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cfe:	e033      	b.n	8000d68 <draw_line+0x38e>
					if(px>=0 && px <= 320 && py>=0 && py <= 240)	/* pixels inside range VGA screen will be drawn */
 8000d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	db2d      	blt.n	8000d62 <draw_line+0x388>
 8000d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d08:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000d0c:	dc29      	bgt.n	8000d62 <draw_line+0x388>
 8000d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db26      	blt.n	8000d62 <draw_line+0x388>
 8000d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d16:	2bf0      	cmp	r3, #240	; 0xf0
 8000d18:	dc23      	bgt.n	8000d62 <draw_line+0x388>
						UB_VGA_SetPixel(px+h,py-h,color);
 8000d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	4413      	add	r3, r2
 8000d24:	b298      	uxth	r0, r3
 8000d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	4619      	mov	r1, r3
 8000d38:	f007 f9ce 	bl	80080d8 <UB_VGA_SetPixel>
						UB_VGA_SetPixel(px+h,py-h-1,color);
 8000d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	4413      	add	r3, r2
 8000d46:	b298      	uxth	r0, r3
 8000d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	3b01      	subs	r3, #1
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f007 f9bb 	bl	80080d8 <UB_VGA_SetPixel>
				for(int h=0-tn_draw;h<=tn_draw;h++)
 8000d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d64:	3301      	adds	r3, #1
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d68:	7cba      	ldrb	r2, [r7, #18]
 8000d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	dac7      	bge.n	8000d00 <draw_line+0x326>
				py+=sdy; 										/* -1/0/1 counting pixel */
 8000d70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	4413      	add	r3, r2
 8000d76:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dyabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	dda8      	ble.n	8000cd8 <draw_line+0x2fe>
}
 8000d86:	bf00      	nop
 8000d88:	3750      	adds	r7, #80	; 0x50
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <draw_ellips>:

/*
 * draw ellips
 */
void draw_ellips (int x_center,int y_center, int x_rad, int y_rad, int color)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b086      	sub	sp, #24
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	60f8      	str	r0, [r7, #12]
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	603b      	str	r3, [r7, #0]
	for(int y=-y_rad; y<=y_rad; y++) {
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	425b      	negs	r3, r3
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	e03f      	b.n	8000e24 <draw_ellips+0x96>
	    for(int x=-x_rad; x<=x_rad; x++) {
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	425b      	negs	r3, r3
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	e034      	b.n	8000e16 <draw_ellips+0x88>
	        if(x*x*y_rad*y_rad+y*y*x_rad*x_rad <= y_rad*y_rad*x_rad*x_rad)
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	fb02 f303 	mul.w	r3, r2, r3
 8000db4:	683a      	ldr	r2, [r7, #0]
 8000db6:	fb02 f303 	mul.w	r3, r2, r3
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	fb02 f203 	mul.w	r2, r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	6979      	ldr	r1, [r7, #20]
 8000dc4:	fb01 f303 	mul.w	r3, r1, r3
 8000dc8:	6879      	ldr	r1, [r7, #4]
 8000dca:	fb01 f303 	mul.w	r3, r1, r3
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	fb01 f303 	mul.w	r3, r1, r3
 8000dd4:	441a      	add	r2, r3
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	6839      	ldr	r1, [r7, #0]
 8000dda:	fb01 f303 	mul.w	r3, r1, r3
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	fb01 f303 	mul.w	r3, r1, r3
 8000de4:	6879      	ldr	r1, [r7, #4]
 8000de6:	fb01 f303 	mul.w	r3, r1, r3
 8000dea:	429a      	cmp	r2, r3
 8000dec:	dc10      	bgt.n	8000e10 <draw_ellips+0x82>
	        	UB_VGA_SetPixel(x_center+x,y_center+y,color);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	4413      	add	r3, r2
 8000df8:	b298      	uxth	r0, r3
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	4413      	add	r3, r2
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	6a3a      	ldr	r2, [r7, #32]
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	f007 f964 	bl	80080d8 <UB_VGA_SetPixel>
	    for(int x=-x_rad; x<=x_rad; x++) {
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	3301      	adds	r3, #1
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	ddc6      	ble.n	8000dac <draw_ellips+0x1e>
	for(int y=-y_rad; y<=y_rad; y++) {
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	3301      	adds	r3, #1
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	697a      	ldr	r2, [r7, #20]
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	ddbb      	ble.n	8000da4 <draw_ellips+0x16>
	    }
	}
}
 8000e2c:	bf00      	nop
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <draw_rectangle>:

/*
 * draw rectangle
 */
void draw_rectangle (int x1, int y1, int x2, int y2, int color)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
 8000e40:	603b      	str	r3, [r7, #0]
	for(int i=y1;i<=y2;i++)
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	e015      	b.n	8000e74 <draw_rectangle+0x40>
	{
		for(int j=x1;j<=x2;j++)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	e00b      	b.n	8000e66 <draw_rectangle+0x32>
			UB_VGA_SetPixel(j,i,color);
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	b291      	uxth	r1, r2
 8000e56:	6a3a      	ldr	r2, [r7, #32]
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f007 f93c 	bl	80080d8 <UB_VGA_SetPixel>
		for(int j=x1;j<=x2;j++)
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	3301      	adds	r3, #1
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	ddef      	ble.n	8000e4e <draw_rectangle+0x1a>
	for(int i=y1;i<=y2;i++)
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	3301      	adds	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	dde5      	ble.n	8000e48 <draw_rectangle+0x14>
	}
}
 8000e7c:	bf00      	nop
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <draw_triangle>:

/*
 * draw triangle
 */
void draw_triangle(int x1,int y1,int x2,int y2,int xtop,int ytop, int color)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af02      	add	r7, sp, #8
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
 8000e90:	603b      	str	r3, [r7, #0]
	draw_line(x1,y1,x2,y2,1,color);
 8000e92:	6a3b      	ldr	r3, [r7, #32]
 8000e94:	9301      	str	r3, [sp, #4]
 8000e96:	2301      	movs	r3, #1
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	68b9      	ldr	r1, [r7, #8]
 8000ea0:	68f8      	ldr	r0, [r7, #12]
 8000ea2:	f7ff fd9a 	bl	80009da <draw_line>
	draw_line(x1,y1,xtop,ytop,1,color);
 8000ea6:	6a3b      	ldr	r3, [r7, #32]
 8000ea8:	9301      	str	r3, [sp, #4]
 8000eaa:	2301      	movs	r3, #1
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	68b9      	ldr	r1, [r7, #8]
 8000eb4:	68f8      	ldr	r0, [r7, #12]
 8000eb6:	f7ff fd90 	bl	80009da <draw_line>
	draw_line(xtop,ytop,x2,y2,1,color);
 8000eba:	6a3b      	ldr	r3, [r7, #32]
 8000ebc:	9301      	str	r3, [sp, #4]
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	69f9      	ldr	r1, [r7, #28]
 8000ec8:	69b8      	ldr	r0, [r7, #24]
 8000eca:	f7ff fd86 	bl	80009da <draw_line>
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <draw_text>:

/*
 * draw text
 */
void draw_text (int x, int y, char text[], int backcolor, int textcolor) { //functie voor het schrijven van tekst
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b088      	sub	sp, #32
 8000eda:	af02      	add	r7, sp, #8
 8000edc:	60f8      	str	r0, [r7, #12]
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	603b      	str	r3, [r7, #0]

	for(int i=0;i<strlen(text);i++) //uit de "text" string individuele letters en kleuren halen
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	e010      	b.n	8000f0c <draw_text+0x36>
	{
		letter_select(x,y,text[i], backcolor, textcolor);
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	4413      	add	r3, r2
 8000ef0:	781a      	ldrb	r2, [r3, #0]
 8000ef2:	6a3b      	ldr	r3, [r7, #32]
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	68b9      	ldr	r1, [r7, #8]
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	f000 f812 	bl	8000f24 <letter_select>
		x = x + 5;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	3305      	adds	r3, #5
 8000f04:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<strlen(text);i++) //uit de "text" string individuele letters en kleuren halen
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff f965 	bl	80001dc <strlen>
 8000f12:	4602      	mov	r2, r0
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d8e7      	bhi.n	8000eea <draw_text+0x14>
	}
}
 8000f1a:	bf00      	nop
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <letter_select>:

/*
 * letter select
 */
void letter_select(int x, int y, char letter, int backcolor, int textcolor)
{
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	f5ad 5d9b 	sub.w	sp, sp, #4960	; 0x1360
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	f107 0418 	add.w	r4, r7, #24
 8000f32:	3c0c      	subs	r4, #12
 8000f34:	6020      	str	r0, [r4, #0]
 8000f36:	f107 0018 	add.w	r0, r7, #24
 8000f3a:	3810      	subs	r0, #16
 8000f3c:	6001      	str	r1, [r0, #0]
 8000f3e:	4611      	mov	r1, r2
 8000f40:	f107 0218 	add.w	r2, r7, #24
 8000f44:	3a18      	subs	r2, #24
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	f107 0318 	add.w	r3, r7, #24
 8000f4c:	3b11      	subs	r3, #17
 8000f4e:	460a      	mov	r2, r1
 8000f50:	701a      	strb	r2, [r3, #0]
	int letter_A[10][4] = {
 8000f52:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000f56:	f102 0218 	add.w	r2, r2, #24
 8000f5a:	f107 0318 	add.w	r3, r7, #24
 8000f5e:	3b18      	subs	r3, #24
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	6013      	str	r3, [r2, #0]
 8000f64:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000f68:	f102 0218 	add.w	r2, r2, #24
 8000f6c:	f107 0318 	add.w	r3, r7, #24
 8000f70:	3b18      	subs	r3, #24
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	6053      	str	r3, [r2, #4]
 8000f76:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000f7a:	f102 0218 	add.w	r2, r2, #24
 8000f7e:	f107 0318 	add.w	r3, r7, #24
 8000f82:	3b18      	subs	r3, #24
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6093      	str	r3, [r2, #8]
 8000f88:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000f8c:	f102 0218 	add.w	r2, r2, #24
 8000f90:	f107 0318 	add.w	r3, r7, #24
 8000f94:	3b18      	subs	r3, #24
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	60d3      	str	r3, [r2, #12]
 8000f9a:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000f9e:	f102 0218 	add.w	r2, r2, #24
 8000fa2:	f107 0318 	add.w	r3, r7, #24
 8000fa6:	3b18      	subs	r3, #24
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	6113      	str	r3, [r2, #16]
 8000fac:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000fb0:	f102 0218 	add.w	r2, r2, #24
 8000fb4:	f107 0318 	add.w	r3, r7, #24
 8000fb8:	3b18      	subs	r3, #24
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	6153      	str	r3, [r2, #20]
 8000fbe:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000fc2:	f102 0218 	add.w	r2, r2, #24
 8000fc6:	f107 0318 	add.w	r3, r7, #24
 8000fca:	3b18      	subs	r3, #24
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	6193      	str	r3, [r2, #24]
 8000fd0:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000fd4:	f102 0218 	add.w	r2, r2, #24
 8000fd8:	f107 0318 	add.w	r3, r7, #24
 8000fdc:	3b18      	subs	r3, #24
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	61d3      	str	r3, [r2, #28]
 8000fe2:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000fe6:	f102 0218 	add.w	r2, r2, #24
 8000fea:	f107 0318 	add.w	r3, r7, #24
 8000fee:	3b18      	subs	r3, #24
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6213      	str	r3, [r2, #32]
 8000ff4:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8000ff8:	f103 0318 	add.w	r3, r3, #24
 8000ffc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001000:	f102 0208 	add.w	r2, r2, #8
 8001004:	6812      	ldr	r2, [r2, #0]
 8001006:	625a      	str	r2, [r3, #36]	; 0x24
 8001008:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800100c:	f103 0318 	add.w	r3, r3, #24
 8001010:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001014:	f102 0208 	add.w	r2, r2, #8
 8001018:	6812      	ldr	r2, [r2, #0]
 800101a:	629a      	str	r2, [r3, #40]	; 0x28
 800101c:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8001020:	f102 0218 	add.w	r2, r2, #24
 8001024:	f107 0318 	add.w	r3, r7, #24
 8001028:	3b18      	subs	r3, #24
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800102e:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8001032:	f102 0218 	add.w	r2, r2, #24
 8001036:	f107 0318 	add.w	r3, r7, #24
 800103a:	3b18      	subs	r3, #24
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	6313      	str	r3, [r2, #48]	; 0x30
 8001040:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001044:	f103 0318 	add.w	r3, r3, #24
 8001048:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800104c:	f102 0208 	add.w	r2, r2, #8
 8001050:	6812      	ldr	r2, [r2, #0]
 8001052:	635a      	str	r2, [r3, #52]	; 0x34
 8001054:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001058:	f103 0318 	add.w	r3, r3, #24
 800105c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001060:	f102 0208 	add.w	r2, r2, #8
 8001064:	6812      	ldr	r2, [r2, #0]
 8001066:	639a      	str	r2, [r3, #56]	; 0x38
 8001068:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 800106c:	f102 0218 	add.w	r2, r2, #24
 8001070:	f107 0318 	add.w	r3, r7, #24
 8001074:	3b18      	subs	r3, #24
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	63d3      	str	r3, [r2, #60]	; 0x3c
 800107a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800107e:	f103 0318 	add.w	r3, r3, #24
 8001082:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001086:	f102 0208 	add.w	r2, r2, #8
 800108a:	6812      	ldr	r2, [r2, #0]
 800108c:	641a      	str	r2, [r3, #64]	; 0x40
 800108e:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8001092:	f102 0218 	add.w	r2, r2, #24
 8001096:	f107 0318 	add.w	r3, r7, #24
 800109a:	3b18      	subs	r3, #24
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	6453      	str	r3, [r2, #68]	; 0x44
 80010a0:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 80010a4:	f102 0218 	add.w	r2, r2, #24
 80010a8:	f107 0318 	add.w	r3, r7, #24
 80010ac:	3b18      	subs	r3, #24
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6493      	str	r3, [r2, #72]	; 0x48
 80010b2:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80010b6:	f103 0318 	add.w	r3, r3, #24
 80010ba:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80010be:	f102 0208 	add.w	r2, r2, #8
 80010c2:	6812      	ldr	r2, [r2, #0]
 80010c4:	64da      	str	r2, [r3, #76]	; 0x4c
 80010c6:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80010ca:	f103 0318 	add.w	r3, r3, #24
 80010ce:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80010d2:	f102 0208 	add.w	r2, r2, #8
 80010d6:	6812      	ldr	r2, [r2, #0]
 80010d8:	651a      	str	r2, [r3, #80]	; 0x50
 80010da:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 80010de:	f102 0218 	add.w	r2, r2, #24
 80010e2:	f107 0318 	add.w	r3, r7, #24
 80010e6:	3b18      	subs	r3, #24
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	6553      	str	r3, [r2, #84]	; 0x54
 80010ec:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 80010f0:	f102 0218 	add.w	r2, r2, #24
 80010f4:	f107 0318 	add.w	r3, r7, #24
 80010f8:	3b18      	subs	r3, #24
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	6593      	str	r3, [r2, #88]	; 0x58
 80010fe:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001102:	f103 0318 	add.w	r3, r3, #24
 8001106:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800110a:	f102 0208 	add.w	r2, r2, #8
 800110e:	6812      	ldr	r2, [r2, #0]
 8001110:	65da      	str	r2, [r3, #92]	; 0x5c
 8001112:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001116:	f103 0318 	add.w	r3, r3, #24
 800111a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800111e:	f102 0208 	add.w	r2, r2, #8
 8001122:	6812      	ldr	r2, [r2, #0]
 8001124:	661a      	str	r2, [r3, #96]	; 0x60
 8001126:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800112a:	f103 0318 	add.w	r3, r3, #24
 800112e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001132:	f102 0208 	add.w	r2, r2, #8
 8001136:	6812      	ldr	r2, [r2, #0]
 8001138:	665a      	str	r2, [r3, #100]	; 0x64
 800113a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800113e:	f103 0318 	add.w	r3, r3, #24
 8001142:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001146:	f102 0208 	add.w	r2, r2, #8
 800114a:	6812      	ldr	r2, [r2, #0]
 800114c:	669a      	str	r2, [r3, #104]	; 0x68
 800114e:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001152:	f103 0318 	add.w	r3, r3, #24
 8001156:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800115a:	f102 0208 	add.w	r2, r2, #8
 800115e:	6812      	ldr	r2, [r2, #0]
 8001160:	66da      	str	r2, [r3, #108]	; 0x6c
 8001162:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8001166:	f103 0318 	add.w	r3, r3, #24
 800116a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800116e:	f102 0208 	add.w	r2, r2, #8
 8001172:	6812      	ldr	r2, [r2, #0]
 8001174:	671a      	str	r2, [r3, #112]	; 0x70
 8001176:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 800117a:	f102 0218 	add.w	r2, r2, #24
 800117e:	f107 0318 	add.w	r3, r7, #24
 8001182:	3b18      	subs	r3, #24
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	6753      	str	r3, [r2, #116]	; 0x74
 8001188:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 800118c:	f102 0218 	add.w	r2, r2, #24
 8001190:	f107 0318 	add.w	r3, r7, #24
 8001194:	3b18      	subs	r3, #24
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	6793      	str	r3, [r2, #120]	; 0x78
 800119a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800119e:	f103 0318 	add.w	r3, r3, #24
 80011a2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80011a6:	f102 0208 	add.w	r2, r2, #8
 80011aa:	6812      	ldr	r2, [r2, #0]
 80011ac:	67da      	str	r2, [r3, #124]	; 0x7c
 80011ae:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 80011b2:	f102 0218 	add.w	r2, r2, #24
 80011b6:	f107 0318 	add.w	r3, r7, #24
 80011ba:	3b18      	subs	r3, #24
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80011c2:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 80011c6:	f102 0218 	add.w	r2, r2, #24
 80011ca:	f107 0318 	add.w	r3, r7, #24
 80011ce:	3b18      	subs	r3, #24
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80011d6:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 80011da:	f102 0218 	add.w	r2, r2, #24
 80011de:	f107 0318 	add.w	r3, r7, #24
 80011e2:	3b18      	subs	r3, #24
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80011ea:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 80011ee:	f102 0218 	add.w	r2, r2, #24
 80011f2:	f107 0318 	add.w	r3, r7, #24
 80011f6:	3b18      	subs	r3, #24
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80011fe:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8001202:	f102 0218 	add.w	r2, r2, #24
 8001206:	f107 0318 	add.w	r3, r7, #24
 800120a:	3b18      	subs	r3, #24
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001212:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8001216:	f102 0218 	add.w	r2, r2, #24
 800121a:	f107 0318 	add.w	r3, r7, #24
 800121e:	3b18      	subs	r3, #24
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001226:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 800122a:	f102 0218 	add.w	r2, r2, #24
 800122e:	f107 0318 	add.w	r3, r7, #24
 8001232:	3b18      	subs	r3, #24
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800123a:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 800123e:	f102 0218 	add.w	r2, r2, #24
 8001242:	f107 0318 	add.w	r3, r7, #24
 8001246:	3b18      	subs	r3, #24
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, textcolor, textcolor, textcolor, //@@@@
		textcolor, backcolor, backcolor, textcolor, //@..@
		backcolor, backcolor, backcolor, backcolor, //....
		backcolor, backcolor, backcolor, backcolor
	};
	int letter_B[10][4] = {
 800124e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001252:	f102 0218 	add.w	r2, r2, #24
 8001256:	f107 0318 	add.w	r3, r7, #24
 800125a:	3b18      	subs	r3, #24
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001264:	f102 0218 	add.w	r2, r2, #24
 8001268:	f107 0318 	add.w	r3, r7, #24
 800126c:	3b18      	subs	r3, #24
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6053      	str	r3, [r2, #4]
 8001272:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001276:	f102 0218 	add.w	r2, r2, #24
 800127a:	f107 0318 	add.w	r3, r7, #24
 800127e:	3b18      	subs	r3, #24
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6093      	str	r3, [r2, #8]
 8001284:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001288:	f102 0218 	add.w	r2, r2, #24
 800128c:	f107 0318 	add.w	r3, r7, #24
 8001290:	3b18      	subs	r3, #24
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	60d3      	str	r3, [r2, #12]
 8001296:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800129a:	f102 0218 	add.w	r2, r2, #24
 800129e:	f107 0318 	add.w	r3, r7, #24
 80012a2:	3b18      	subs	r3, #24
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6113      	str	r3, [r2, #16]
 80012a8:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80012ac:	f102 0218 	add.w	r2, r2, #24
 80012b0:	f107 0318 	add.w	r3, r7, #24
 80012b4:	3b18      	subs	r3, #24
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	6153      	str	r3, [r2, #20]
 80012ba:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80012be:	f102 0218 	add.w	r2, r2, #24
 80012c2:	f107 0318 	add.w	r3, r7, #24
 80012c6:	3b18      	subs	r3, #24
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6193      	str	r3, [r2, #24]
 80012cc:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80012d0:	f102 0218 	add.w	r2, r2, #24
 80012d4:	f107 0318 	add.w	r3, r7, #24
 80012d8:	3b18      	subs	r3, #24
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	61d3      	str	r3, [r2, #28]
 80012de:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80012e2:	f103 0318 	add.w	r3, r3, #24
 80012e6:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80012ea:	f102 0208 	add.w	r2, r2, #8
 80012ee:	6812      	ldr	r2, [r2, #0]
 80012f0:	621a      	str	r2, [r3, #32]
 80012f2:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80012f6:	f103 0318 	add.w	r3, r3, #24
 80012fa:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80012fe:	f102 0208 	add.w	r2, r2, #8
 8001302:	6812      	ldr	r2, [r2, #0]
 8001304:	625a      	str	r2, [r3, #36]	; 0x24
 8001306:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800130a:	f103 0318 	add.w	r3, r3, #24
 800130e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001312:	f102 0208 	add.w	r2, r2, #8
 8001316:	6812      	ldr	r2, [r2, #0]
 8001318:	629a      	str	r2, [r3, #40]	; 0x28
 800131a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800131e:	f102 0218 	add.w	r2, r2, #24
 8001322:	f107 0318 	add.w	r3, r7, #24
 8001326:	3b18      	subs	r3, #24
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800132c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001330:	f103 0318 	add.w	r3, r3, #24
 8001334:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001338:	f102 0208 	add.w	r2, r2, #8
 800133c:	6812      	ldr	r2, [r2, #0]
 800133e:	631a      	str	r2, [r3, #48]	; 0x30
 8001340:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001344:	f102 0218 	add.w	r2, r2, #24
 8001348:	f107 0318 	add.w	r3, r7, #24
 800134c:	3b18      	subs	r3, #24
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	6353      	str	r3, [r2, #52]	; 0x34
 8001352:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001356:	f102 0218 	add.w	r2, r2, #24
 800135a:	f107 0318 	add.w	r3, r7, #24
 800135e:	3b18      	subs	r3, #24
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6393      	str	r3, [r2, #56]	; 0x38
 8001364:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001368:	f103 0318 	add.w	r3, r3, #24
 800136c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001370:	f102 0208 	add.w	r2, r2, #8
 8001374:	6812      	ldr	r2, [r2, #0]
 8001376:	63da      	str	r2, [r3, #60]	; 0x3c
 8001378:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800137c:	f103 0318 	add.w	r3, r3, #24
 8001380:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001384:	f102 0208 	add.w	r2, r2, #8
 8001388:	6812      	ldr	r2, [r2, #0]
 800138a:	641a      	str	r2, [r3, #64]	; 0x40
 800138c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001390:	f103 0318 	add.w	r3, r3, #24
 8001394:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001398:	f102 0208 	add.w	r2, r2, #8
 800139c:	6812      	ldr	r2, [r2, #0]
 800139e:	645a      	str	r2, [r3, #68]	; 0x44
 80013a0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80013a4:	f103 0318 	add.w	r3, r3, #24
 80013a8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80013ac:	f102 0208 	add.w	r2, r2, #8
 80013b0:	6812      	ldr	r2, [r2, #0]
 80013b2:	649a      	str	r2, [r3, #72]	; 0x48
 80013b4:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80013b8:	f102 0218 	add.w	r2, r2, #24
 80013bc:	f107 0318 	add.w	r3, r7, #24
 80013c0:	3b18      	subs	r3, #24
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c6:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80013ca:	f103 0318 	add.w	r3, r3, #24
 80013ce:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80013d2:	f102 0208 	add.w	r2, r2, #8
 80013d6:	6812      	ldr	r2, [r2, #0]
 80013d8:	651a      	str	r2, [r3, #80]	; 0x50
 80013da:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80013de:	f102 0218 	add.w	r2, r2, #24
 80013e2:	f107 0318 	add.w	r3, r7, #24
 80013e6:	3b18      	subs	r3, #24
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	6553      	str	r3, [r2, #84]	; 0x54
 80013ec:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80013f0:	f102 0218 	add.w	r2, r2, #24
 80013f4:	f107 0318 	add.w	r3, r7, #24
 80013f8:	3b18      	subs	r3, #24
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	6593      	str	r3, [r2, #88]	; 0x58
 80013fe:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001402:	f103 0318 	add.w	r3, r3, #24
 8001406:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800140a:	f102 0208 	add.w	r2, r2, #8
 800140e:	6812      	ldr	r2, [r2, #0]
 8001410:	65da      	str	r2, [r3, #92]	; 0x5c
 8001412:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001416:	f103 0318 	add.w	r3, r3, #24
 800141a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800141e:	f102 0208 	add.w	r2, r2, #8
 8001422:	6812      	ldr	r2, [r2, #0]
 8001424:	661a      	str	r2, [r3, #96]	; 0x60
 8001426:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800142a:	f102 0218 	add.w	r2, r2, #24
 800142e:	f107 0318 	add.w	r3, r7, #24
 8001432:	3b18      	subs	r3, #24
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	6653      	str	r3, [r2, #100]	; 0x64
 8001438:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800143c:	f102 0218 	add.w	r2, r2, #24
 8001440:	f107 0318 	add.w	r3, r7, #24
 8001444:	3b18      	subs	r3, #24
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	6693      	str	r3, [r2, #104]	; 0x68
 800144a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800144e:	f103 0318 	add.w	r3, r3, #24
 8001452:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001456:	f102 0208 	add.w	r2, r2, #8
 800145a:	6812      	ldr	r2, [r2, #0]
 800145c:	66da      	str	r2, [r3, #108]	; 0x6c
 800145e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001462:	f103 0318 	add.w	r3, r3, #24
 8001466:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800146a:	f102 0208 	add.w	r2, r2, #8
 800146e:	6812      	ldr	r2, [r2, #0]
 8001470:	671a      	str	r2, [r3, #112]	; 0x70
 8001472:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001476:	f103 0318 	add.w	r3, r3, #24
 800147a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800147e:	f102 0208 	add.w	r2, r2, #8
 8001482:	6812      	ldr	r2, [r2, #0]
 8001484:	675a      	str	r2, [r3, #116]	; 0x74
 8001486:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800148a:	f103 0318 	add.w	r3, r3, #24
 800148e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001492:	f102 0208 	add.w	r2, r2, #8
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	679a      	str	r2, [r3, #120]	; 0x78
 800149a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800149e:	f102 0218 	add.w	r2, r2, #24
 80014a2:	f107 0318 	add.w	r3, r7, #24
 80014a6:	3b18      	subs	r3, #24
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	67d3      	str	r3, [r2, #124]	; 0x7c
 80014ac:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80014b0:	f102 0218 	add.w	r2, r2, #24
 80014b4:	f107 0318 	add.w	r3, r7, #24
 80014b8:	3b18      	subs	r3, #24
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80014c0:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80014c4:	f102 0218 	add.w	r2, r2, #24
 80014c8:	f107 0318 	add.w	r3, r7, #24
 80014cc:	3b18      	subs	r3, #24
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80014d4:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80014d8:	f102 0218 	add.w	r2, r2, #24
 80014dc:	f107 0318 	add.w	r3, r7, #24
 80014e0:	3b18      	subs	r3, #24
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80014e8:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80014ec:	f102 0218 	add.w	r2, r2, #24
 80014f0:	f107 0318 	add.w	r3, r7, #24
 80014f4:	3b18      	subs	r3, #24
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80014fc:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001500:	f102 0218 	add.w	r2, r2, #24
 8001504:	f107 0318 	add.w	r3, r7, #24
 8001508:	3b18      	subs	r3, #24
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001510:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001514:	f102 0218 	add.w	r2, r2, #24
 8001518:	f107 0318 	add.w	r3, r7, #24
 800151c:	3b18      	subs	r3, #24
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001524:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001528:	f102 0218 	add.w	r2, r2, #24
 800152c:	f107 0318 	add.w	r3, r7, #24
 8001530:	3b18      	subs	r3, #24
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8001538:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800153c:	f102 0218 	add.w	r2, r2, #24
 8001540:	f107 0318 	add.w	r3, r7, #24
 8001544:	3b18      	subs	r3, #24
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, textcolor,  //@..@
		textcolor, textcolor, textcolor, backcolor,  //@@@.
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_C[10][4] = {
 800154c:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001550:	f107 0318 	add.w	r3, r7, #24
 8001554:	3b18      	subs	r3, #24
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 800155e:	f107 0318 	add.w	r3, r7, #24
 8001562:	3b18      	subs	r3, #24
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6053      	str	r3, [r2, #4]
 8001568:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 800156c:	f107 0318 	add.w	r3, r7, #24
 8001570:	3b18      	subs	r3, #24
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6093      	str	r3, [r2, #8]
 8001576:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 800157a:	f107 0318 	add.w	r3, r7, #24
 800157e:	3b18      	subs	r3, #24
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	60d3      	str	r3, [r2, #12]
 8001584:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001588:	f107 0318 	add.w	r3, r7, #24
 800158c:	3b18      	subs	r3, #24
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6113      	str	r3, [r2, #16]
 8001592:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001596:	f107 0318 	add.w	r3, r7, #24
 800159a:	3b18      	subs	r3, #24
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6153      	str	r3, [r2, #20]
 80015a0:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 80015a4:	f107 0318 	add.w	r3, r7, #24
 80015a8:	3b18      	subs	r3, #24
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6193      	str	r3, [r2, #24]
 80015ae:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 80015b2:	f107 0318 	add.w	r3, r7, #24
 80015b6:	3b18      	subs	r3, #24
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	61d3      	str	r3, [r2, #28]
 80015bc:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 80015c0:	f107 0318 	add.w	r3, r7, #24
 80015c4:	3b18      	subs	r3, #24
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6213      	str	r3, [r2, #32]
 80015ca:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 80015ce:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80015d2:	f102 0208 	add.w	r2, r2, #8
 80015d6:	6812      	ldr	r2, [r2, #0]
 80015d8:	625a      	str	r2, [r3, #36]	; 0x24
 80015da:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 80015de:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80015e2:	f102 0208 	add.w	r2, r2, #8
 80015e6:	6812      	ldr	r2, [r2, #0]
 80015e8:	629a      	str	r2, [r3, #40]	; 0x28
 80015ea:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 80015ee:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80015f2:	f102 0208 	add.w	r2, r2, #8
 80015f6:	6812      	ldr	r2, [r2, #0]
 80015f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80015fa:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 80015fe:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001602:	f102 0208 	add.w	r2, r2, #8
 8001606:	6812      	ldr	r2, [r2, #0]
 8001608:	631a      	str	r2, [r3, #48]	; 0x30
 800160a:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 800160e:	f107 0318 	add.w	r3, r7, #24
 8001612:	3b18      	subs	r3, #24
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6353      	str	r3, [r2, #52]	; 0x34
 8001618:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 800161c:	f107 0318 	add.w	r3, r7, #24
 8001620:	3b18      	subs	r3, #24
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6393      	str	r3, [r2, #56]	; 0x38
 8001626:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 800162a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800162e:	f102 0208 	add.w	r2, r2, #8
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	63da      	str	r2, [r3, #60]	; 0x3c
 8001636:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 800163a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800163e:	f102 0208 	add.w	r2, r2, #8
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	641a      	str	r2, [r3, #64]	; 0x40
 8001646:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 800164a:	f107 0318 	add.w	r3, r7, #24
 800164e:	3b18      	subs	r3, #24
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6453      	str	r3, [r2, #68]	; 0x44
 8001654:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001658:	f107 0318 	add.w	r3, r7, #24
 800165c:	3b18      	subs	r3, #24
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6493      	str	r3, [r2, #72]	; 0x48
 8001662:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001666:	f107 0318 	add.w	r3, r7, #24
 800166a:	3b18      	subs	r3, #24
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001670:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8001674:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001678:	f102 0208 	add.w	r2, r2, #8
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	651a      	str	r2, [r3, #80]	; 0x50
 8001680:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001684:	f107 0318 	add.w	r3, r7, #24
 8001688:	3b18      	subs	r3, #24
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6553      	str	r3, [r2, #84]	; 0x54
 800168e:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001692:	f107 0318 	add.w	r3, r7, #24
 8001696:	3b18      	subs	r3, #24
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	6593      	str	r3, [r2, #88]	; 0x58
 800169c:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 80016a0:	f107 0318 	add.w	r3, r7, #24
 80016a4:	3b18      	subs	r3, #24
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	65d3      	str	r3, [r2, #92]	; 0x5c
 80016aa:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 80016ae:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80016b2:	f102 0208 	add.w	r2, r2, #8
 80016b6:	6812      	ldr	r2, [r2, #0]
 80016b8:	661a      	str	r2, [r3, #96]	; 0x60
 80016ba:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 80016be:	f107 0318 	add.w	r3, r7, #24
 80016c2:	3b18      	subs	r3, #24
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6653      	str	r3, [r2, #100]	; 0x64
 80016c8:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 80016cc:	f107 0318 	add.w	r3, r7, #24
 80016d0:	3b18      	subs	r3, #24
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6693      	str	r3, [r2, #104]	; 0x68
 80016d6:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 80016da:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80016de:	f102 0208 	add.w	r2, r2, #8
 80016e2:	6812      	ldr	r2, [r2, #0]
 80016e4:	66da      	str	r2, [r3, #108]	; 0x6c
 80016e6:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 80016ea:	f107 0318 	add.w	r3, r7, #24
 80016ee:	3b18      	subs	r3, #24
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6713      	str	r3, [r2, #112]	; 0x70
 80016f4:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 80016f8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80016fc:	f102 0208 	add.w	r2, r2, #8
 8001700:	6812      	ldr	r2, [r2, #0]
 8001702:	675a      	str	r2, [r3, #116]	; 0x74
 8001704:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8001708:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800170c:	f102 0208 	add.w	r2, r2, #8
 8001710:	6812      	ldr	r2, [r2, #0]
 8001712:	679a      	str	r2, [r3, #120]	; 0x78
 8001714:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001718:	f107 0318 	add.w	r3, r7, #24
 800171c:	3b18      	subs	r3, #24
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	67d3      	str	r3, [r2, #124]	; 0x7c
 8001722:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001726:	f107 0318 	add.w	r3, r7, #24
 800172a:	3b18      	subs	r3, #24
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001732:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001736:	f107 0318 	add.w	r3, r7, #24
 800173a:	3b18      	subs	r3, #24
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8001742:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001746:	f107 0318 	add.w	r3, r7, #24
 800174a:	3b18      	subs	r3, #24
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001752:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001756:	f107 0318 	add.w	r3, r7, #24
 800175a:	3b18      	subs	r3, #24
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001762:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001766:	f107 0318 	add.w	r3, r7, #24
 800176a:	3b18      	subs	r3, #24
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001772:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001776:	f107 0318 	add.w	r3, r7, #24
 800177a:	3b18      	subs	r3, #24
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001782:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001786:	f107 0318 	add.w	r3, r7, #24
 800178a:	3b18      	subs	r3, #24
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8001792:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001796:	f107 0318 	add.w	r3, r7, #24
 800179a:	3b18      	subs	r3, #24
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, textcolor,  //@..@
		backcolor, textcolor, textcolor, backcolor,  //.@@.
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_D[10][4] = {
 80017a2:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80017a6:	f107 0318 	add.w	r3, r7, #24
 80017aa:	3b18      	subs	r3, #24
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80017b4:	f107 0318 	add.w	r3, r7, #24
 80017b8:	3b18      	subs	r3, #24
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6053      	str	r3, [r2, #4]
 80017be:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80017c2:	f107 0318 	add.w	r3, r7, #24
 80017c6:	3b18      	subs	r3, #24
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6093      	str	r3, [r2, #8]
 80017cc:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80017d0:	f107 0318 	add.w	r3, r7, #24
 80017d4:	3b18      	subs	r3, #24
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60d3      	str	r3, [r2, #12]
 80017da:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80017de:	f107 0318 	add.w	r3, r7, #24
 80017e2:	3b18      	subs	r3, #24
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6113      	str	r3, [r2, #16]
 80017e8:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80017ec:	f107 0318 	add.w	r3, r7, #24
 80017f0:	3b18      	subs	r3, #24
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	6153      	str	r3, [r2, #20]
 80017f6:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80017fa:	f107 0318 	add.w	r3, r7, #24
 80017fe:	3b18      	subs	r3, #24
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6193      	str	r3, [r2, #24]
 8001804:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 8001808:	f107 0318 	add.w	r3, r7, #24
 800180c:	3b18      	subs	r3, #24
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	61d3      	str	r3, [r2, #28]
 8001812:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 8001816:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800181a:	f102 0208 	add.w	r2, r2, #8
 800181e:	6812      	ldr	r2, [r2, #0]
 8001820:	621a      	str	r2, [r3, #32]
 8001822:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 8001826:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800182a:	f102 0208 	add.w	r2, r2, #8
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	625a      	str	r2, [r3, #36]	; 0x24
 8001832:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 8001836:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800183a:	f102 0208 	add.w	r2, r2, #8
 800183e:	6812      	ldr	r2, [r2, #0]
 8001840:	629a      	str	r2, [r3, #40]	; 0x28
 8001842:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 8001846:	f107 0318 	add.w	r3, r7, #24
 800184a:	3b18      	subs	r3, #24
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001850:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 8001854:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001858:	f102 0208 	add.w	r2, r2, #8
 800185c:	6812      	ldr	r2, [r2, #0]
 800185e:	631a      	str	r2, [r3, #48]	; 0x30
 8001860:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 8001864:	f107 0318 	add.w	r3, r7, #24
 8001868:	3b18      	subs	r3, #24
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6353      	str	r3, [r2, #52]	; 0x34
 800186e:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 8001872:	f107 0318 	add.w	r3, r7, #24
 8001876:	3b18      	subs	r3, #24
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6393      	str	r3, [r2, #56]	; 0x38
 800187c:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 8001880:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001884:	f102 0208 	add.w	r2, r2, #8
 8001888:	6812      	ldr	r2, [r2, #0]
 800188a:	63da      	str	r2, [r3, #60]	; 0x3c
 800188c:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 8001890:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001894:	f102 0208 	add.w	r2, r2, #8
 8001898:	6812      	ldr	r2, [r2, #0]
 800189a:	641a      	str	r2, [r3, #64]	; 0x40
 800189c:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80018a0:	f107 0318 	add.w	r3, r7, #24
 80018a4:	3b18      	subs	r3, #24
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6453      	str	r3, [r2, #68]	; 0x44
 80018aa:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80018ae:	f107 0318 	add.w	r3, r7, #24
 80018b2:	3b18      	subs	r3, #24
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6493      	str	r3, [r2, #72]	; 0x48
 80018b8:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 80018bc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80018c0:	f102 0208 	add.w	r2, r2, #8
 80018c4:	6812      	ldr	r2, [r2, #0]
 80018c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80018c8:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 80018cc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80018d0:	f102 0208 	add.w	r2, r2, #8
 80018d4:	6812      	ldr	r2, [r2, #0]
 80018d6:	651a      	str	r2, [r3, #80]	; 0x50
 80018d8:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80018dc:	f107 0318 	add.w	r3, r7, #24
 80018e0:	3b18      	subs	r3, #24
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6553      	str	r3, [r2, #84]	; 0x54
 80018e6:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80018ea:	f107 0318 	add.w	r3, r7, #24
 80018ee:	3b18      	subs	r3, #24
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6593      	str	r3, [r2, #88]	; 0x58
 80018f4:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 80018f8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80018fc:	f102 0208 	add.w	r2, r2, #8
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	65da      	str	r2, [r3, #92]	; 0x5c
 8001904:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 8001908:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800190c:	f102 0208 	add.w	r2, r2, #8
 8001910:	6812      	ldr	r2, [r2, #0]
 8001912:	661a      	str	r2, [r3, #96]	; 0x60
 8001914:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 8001918:	f107 0318 	add.w	r3, r7, #24
 800191c:	3b18      	subs	r3, #24
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6653      	str	r3, [r2, #100]	; 0x64
 8001922:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 8001926:	f107 0318 	add.w	r3, r7, #24
 800192a:	3b18      	subs	r3, #24
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6693      	str	r3, [r2, #104]	; 0x68
 8001930:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 8001934:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001938:	f102 0208 	add.w	r2, r2, #8
 800193c:	6812      	ldr	r2, [r2, #0]
 800193e:	66da      	str	r2, [r3, #108]	; 0x6c
 8001940:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 8001944:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001948:	f102 0208 	add.w	r2, r2, #8
 800194c:	6812      	ldr	r2, [r2, #0]
 800194e:	671a      	str	r2, [r3, #112]	; 0x70
 8001950:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 8001954:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001958:	f102 0208 	add.w	r2, r2, #8
 800195c:	6812      	ldr	r2, [r2, #0]
 800195e:	675a      	str	r2, [r3, #116]	; 0x74
 8001960:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 8001964:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001968:	f102 0208 	add.w	r2, r2, #8
 800196c:	6812      	ldr	r2, [r2, #0]
 800196e:	679a      	str	r2, [r3, #120]	; 0x78
 8001970:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 8001974:	f107 0318 	add.w	r3, r7, #24
 8001978:	3b18      	subs	r3, #24
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	67d3      	str	r3, [r2, #124]	; 0x7c
 800197e:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 8001982:	f107 0318 	add.w	r3, r7, #24
 8001986:	3b18      	subs	r3, #24
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800198e:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 8001992:	f107 0318 	add.w	r3, r7, #24
 8001996:	3b18      	subs	r3, #24
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 800199e:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80019a2:	f107 0318 	add.w	r3, r7, #24
 80019a6:	3b18      	subs	r3, #24
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80019ae:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80019b2:	f107 0318 	add.w	r3, r7, #24
 80019b6:	3b18      	subs	r3, #24
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80019be:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80019c2:	f107 0318 	add.w	r3, r7, #24
 80019c6:	3b18      	subs	r3, #24
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019ce:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80019d2:	f107 0318 	add.w	r3, r7, #24
 80019d6:	3b18      	subs	r3, #24
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80019de:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80019e2:	f107 0318 	add.w	r3, r7, #24
 80019e6:	3b18      	subs	r3, #24
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 80019ee:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80019f2:	f107 0318 	add.w	r3, r7, #24
 80019f6:	3b18      	subs	r3, #24
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, textcolor,  //@..@
		textcolor, textcolor, textcolor, backcolor,  //@@@.
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_E[10][4] = {
 80019fe:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001a02:	f107 0318 	add.w	r3, r7, #24
 8001a06:	3b18      	subs	r3, #24
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001a10:	f107 0318 	add.w	r3, r7, #24
 8001a14:	3b18      	subs	r3, #24
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6053      	str	r3, [r2, #4]
 8001a1a:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001a1e:	f107 0318 	add.w	r3, r7, #24
 8001a22:	3b18      	subs	r3, #24
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6093      	str	r3, [r2, #8]
 8001a28:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001a2c:	f107 0318 	add.w	r3, r7, #24
 8001a30:	3b18      	subs	r3, #24
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	60d3      	str	r3, [r2, #12]
 8001a36:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001a3a:	f107 0318 	add.w	r3, r7, #24
 8001a3e:	3b18      	subs	r3, #24
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6113      	str	r3, [r2, #16]
 8001a44:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001a48:	f107 0318 	add.w	r3, r7, #24
 8001a4c:	3b18      	subs	r3, #24
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6153      	str	r3, [r2, #20]
 8001a52:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001a56:	f107 0318 	add.w	r3, r7, #24
 8001a5a:	3b18      	subs	r3, #24
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	6193      	str	r3, [r2, #24]
 8001a60:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001a64:	f107 0318 	add.w	r3, r7, #24
 8001a68:	3b18      	subs	r3, #24
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	61d3      	str	r3, [r2, #28]
 8001a6e:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001a72:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001a76:	f102 0208 	add.w	r2, r2, #8
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	621a      	str	r2, [r3, #32]
 8001a7e:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001a82:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001a86:	f102 0208 	add.w	r2, r2, #8
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	625a      	str	r2, [r3, #36]	; 0x24
 8001a8e:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001a92:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001a96:	f102 0208 	add.w	r2, r2, #8
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	629a      	str	r2, [r3, #40]	; 0x28
 8001a9e:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001aa2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001aa6:	f102 0208 	add.w	r2, r2, #8
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	62da      	str	r2, [r3, #44]	; 0x2c
 8001aae:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001ab2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001ab6:	f102 0208 	add.w	r2, r2, #8
 8001aba:	6812      	ldr	r2, [r2, #0]
 8001abc:	631a      	str	r2, [r3, #48]	; 0x30
 8001abe:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001ac2:	f107 0318 	add.w	r3, r7, #24
 8001ac6:	3b18      	subs	r3, #24
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6353      	str	r3, [r2, #52]	; 0x34
 8001acc:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001ad0:	f107 0318 	add.w	r3, r7, #24
 8001ad4:	3b18      	subs	r3, #24
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	6393      	str	r3, [r2, #56]	; 0x38
 8001ada:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001ade:	f107 0318 	add.w	r3, r7, #24
 8001ae2:	3b18      	subs	r3, #24
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001ae8:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001aec:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001af0:	f102 0208 	add.w	r2, r2, #8
 8001af4:	6812      	ldr	r2, [r2, #0]
 8001af6:	641a      	str	r2, [r3, #64]	; 0x40
 8001af8:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001afc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001b00:	f102 0208 	add.w	r2, r2, #8
 8001b04:	6812      	ldr	r2, [r2, #0]
 8001b06:	645a      	str	r2, [r3, #68]	; 0x44
 8001b08:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001b0c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001b10:	f102 0208 	add.w	r2, r2, #8
 8001b14:	6812      	ldr	r2, [r2, #0]
 8001b16:	649a      	str	r2, [r3, #72]	; 0x48
 8001b18:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001b1c:	f107 0318 	add.w	r3, r7, #24
 8001b20:	3b18      	subs	r3, #24
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b26:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001b2a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001b2e:	f102 0208 	add.w	r2, r2, #8
 8001b32:	6812      	ldr	r2, [r2, #0]
 8001b34:	651a      	str	r2, [r3, #80]	; 0x50
 8001b36:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001b3a:	f107 0318 	add.w	r3, r7, #24
 8001b3e:	3b18      	subs	r3, #24
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6553      	str	r3, [r2, #84]	; 0x54
 8001b44:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001b48:	f107 0318 	add.w	r3, r7, #24
 8001b4c:	3b18      	subs	r3, #24
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6593      	str	r3, [r2, #88]	; 0x58
 8001b52:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001b56:	f107 0318 	add.w	r3, r7, #24
 8001b5a:	3b18      	subs	r3, #24
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001b60:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001b64:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001b68:	f102 0208 	add.w	r2, r2, #8
 8001b6c:	6812      	ldr	r2, [r2, #0]
 8001b6e:	661a      	str	r2, [r3, #96]	; 0x60
 8001b70:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001b74:	f107 0318 	add.w	r3, r7, #24
 8001b78:	3b18      	subs	r3, #24
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	6653      	str	r3, [r2, #100]	; 0x64
 8001b7e:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001b82:	f107 0318 	add.w	r3, r7, #24
 8001b86:	3b18      	subs	r3, #24
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6693      	str	r3, [r2, #104]	; 0x68
 8001b8c:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001b90:	f107 0318 	add.w	r3, r7, #24
 8001b94:	3b18      	subs	r3, #24
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	66d3      	str	r3, [r2, #108]	; 0x6c
 8001b9a:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001b9e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001ba2:	f102 0208 	add.w	r2, r2, #8
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	671a      	str	r2, [r3, #112]	; 0x70
 8001baa:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001bae:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001bb2:	f102 0208 	add.w	r2, r2, #8
 8001bb6:	6812      	ldr	r2, [r2, #0]
 8001bb8:	675a      	str	r2, [r3, #116]	; 0x74
 8001bba:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001bbe:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001bc2:	f102 0208 	add.w	r2, r2, #8
 8001bc6:	6812      	ldr	r2, [r2, #0]
 8001bc8:	679a      	str	r2, [r3, #120]	; 0x78
 8001bca:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001bce:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001bd2:	f102 0208 	add.w	r2, r2, #8
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	67da      	str	r2, [r3, #124]	; 0x7c
 8001bda:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001bde:	f107 0318 	add.w	r3, r7, #24
 8001be2:	3b18      	subs	r3, #24
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001bea:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001bee:	f107 0318 	add.w	r3, r7, #24
 8001bf2:	3b18      	subs	r3, #24
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8001bfa:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001bfe:	f107 0318 	add.w	r3, r7, #24
 8001c02:	3b18      	subs	r3, #24
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001c0a:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001c0e:	f107 0318 	add.w	r3, r7, #24
 8001c12:	3b18      	subs	r3, #24
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c1a:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001c1e:	f107 0318 	add.w	r3, r7, #24
 8001c22:	3b18      	subs	r3, #24
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c2a:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001c2e:	f107 0318 	add.w	r3, r7, #24
 8001c32:	3b18      	subs	r3, #24
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001c3a:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001c3e:	f107 0318 	add.w	r3, r7, #24
 8001c42:	3b18      	subs	r3, #24
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8001c4a:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001c4e:	f107 0318 	add.w	r3, r7, #24
 8001c52:	3b18      	subs	r3, #24
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, backcolor,  //@...
		textcolor, textcolor, textcolor, textcolor,  //@@@@
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_F[10][4] = {
 8001c5a:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001c5e:	f107 0318 	add.w	r3, r7, #24
 8001c62:	3b18      	subs	r3, #24
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6013      	str	r3, [r2, #0]
 8001c68:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001c6c:	f107 0318 	add.w	r3, r7, #24
 8001c70:	3b18      	subs	r3, #24
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6053      	str	r3, [r2, #4]
 8001c76:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001c7a:	f107 0318 	add.w	r3, r7, #24
 8001c7e:	3b18      	subs	r3, #24
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	6093      	str	r3, [r2, #8]
 8001c84:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001c88:	f107 0318 	add.w	r3, r7, #24
 8001c8c:	3b18      	subs	r3, #24
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60d3      	str	r3, [r2, #12]
 8001c92:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001c96:	f107 0318 	add.w	r3, r7, #24
 8001c9a:	3b18      	subs	r3, #24
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6113      	str	r3, [r2, #16]
 8001ca0:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001ca4:	f107 0318 	add.w	r3, r7, #24
 8001ca8:	3b18      	subs	r3, #24
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6153      	str	r3, [r2, #20]
 8001cae:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001cb2:	f107 0318 	add.w	r3, r7, #24
 8001cb6:	3b18      	subs	r3, #24
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6193      	str	r3, [r2, #24]
 8001cbc:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001cc0:	f107 0318 	add.w	r3, r7, #24
 8001cc4:	3b18      	subs	r3, #24
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	61d3      	str	r3, [r2, #28]
 8001cca:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001cce:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001cd2:	f102 0208 	add.w	r2, r2, #8
 8001cd6:	6812      	ldr	r2, [r2, #0]
 8001cd8:	621a      	str	r2, [r3, #32]
 8001cda:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001cde:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001ce2:	f102 0208 	add.w	r2, r2, #8
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	625a      	str	r2, [r3, #36]	; 0x24
 8001cea:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001cee:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001cf2:	f102 0208 	add.w	r2, r2, #8
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	629a      	str	r2, [r3, #40]	; 0x28
 8001cfa:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001cfe:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001d02:	f102 0208 	add.w	r2, r2, #8
 8001d06:	6812      	ldr	r2, [r2, #0]
 8001d08:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d0a:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001d0e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001d12:	f102 0208 	add.w	r2, r2, #8
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	631a      	str	r2, [r3, #48]	; 0x30
 8001d1a:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001d1e:	f107 0318 	add.w	r3, r7, #24
 8001d22:	3b18      	subs	r3, #24
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6353      	str	r3, [r2, #52]	; 0x34
 8001d28:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001d2c:	f107 0318 	add.w	r3, r7, #24
 8001d30:	3b18      	subs	r3, #24
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	6393      	str	r3, [r2, #56]	; 0x38
 8001d36:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001d3a:	f107 0318 	add.w	r3, r7, #24
 8001d3e:	3b18      	subs	r3, #24
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001d44:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001d48:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001d4c:	f102 0208 	add.w	r2, r2, #8
 8001d50:	6812      	ldr	r2, [r2, #0]
 8001d52:	641a      	str	r2, [r3, #64]	; 0x40
 8001d54:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001d58:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001d5c:	f102 0208 	add.w	r2, r2, #8
 8001d60:	6812      	ldr	r2, [r2, #0]
 8001d62:	645a      	str	r2, [r3, #68]	; 0x44
 8001d64:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001d68:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001d6c:	f102 0208 	add.w	r2, r2, #8
 8001d70:	6812      	ldr	r2, [r2, #0]
 8001d72:	649a      	str	r2, [r3, #72]	; 0x48
 8001d74:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001d78:	f107 0318 	add.w	r3, r7, #24
 8001d7c:	3b18      	subs	r3, #24
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d82:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001d86:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001d8a:	f102 0208 	add.w	r2, r2, #8
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	651a      	str	r2, [r3, #80]	; 0x50
 8001d92:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001d96:	f107 0318 	add.w	r3, r7, #24
 8001d9a:	3b18      	subs	r3, #24
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6553      	str	r3, [r2, #84]	; 0x54
 8001da0:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001da4:	f107 0318 	add.w	r3, r7, #24
 8001da8:	3b18      	subs	r3, #24
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6593      	str	r3, [r2, #88]	; 0x58
 8001dae:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001db2:	f107 0318 	add.w	r3, r7, #24
 8001db6:	3b18      	subs	r3, #24
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001dbc:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001dc0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001dc4:	f102 0208 	add.w	r2, r2, #8
 8001dc8:	6812      	ldr	r2, [r2, #0]
 8001dca:	661a      	str	r2, [r3, #96]	; 0x60
 8001dcc:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001dd0:	f107 0318 	add.w	r3, r7, #24
 8001dd4:	3b18      	subs	r3, #24
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6653      	str	r3, [r2, #100]	; 0x64
 8001dda:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001dde:	f107 0318 	add.w	r3, r7, #24
 8001de2:	3b18      	subs	r3, #24
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6693      	str	r3, [r2, #104]	; 0x68
 8001de8:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001dec:	f107 0318 	add.w	r3, r7, #24
 8001df0:	3b18      	subs	r3, #24
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	66d3      	str	r3, [r2, #108]	; 0x6c
 8001df6:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001dfa:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001dfe:	f102 0208 	add.w	r2, r2, #8
 8001e02:	6812      	ldr	r2, [r2, #0]
 8001e04:	671a      	str	r2, [r3, #112]	; 0x70
 8001e06:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001e0a:	f107 0318 	add.w	r3, r7, #24
 8001e0e:	3b18      	subs	r3, #24
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6753      	str	r3, [r2, #116]	; 0x74
 8001e14:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001e18:	f107 0318 	add.w	r3, r7, #24
 8001e1c:	3b18      	subs	r3, #24
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6793      	str	r3, [r2, #120]	; 0x78
 8001e22:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001e26:	f107 0318 	add.w	r3, r7, #24
 8001e2a:	3b18      	subs	r3, #24
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	67d3      	str	r3, [r2, #124]	; 0x7c
 8001e30:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001e34:	f107 0318 	add.w	r3, r7, #24
 8001e38:	3b18      	subs	r3, #24
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e40:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001e44:	f107 0318 	add.w	r3, r7, #24
 8001e48:	3b18      	subs	r3, #24
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8001e50:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001e54:	f107 0318 	add.w	r3, r7, #24
 8001e58:	3b18      	subs	r3, #24
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001e60:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001e64:	f107 0318 	add.w	r3, r7, #24
 8001e68:	3b18      	subs	r3, #24
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e70:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001e74:	f107 0318 	add.w	r3, r7, #24
 8001e78:	3b18      	subs	r3, #24
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e80:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001e84:	f107 0318 	add.w	r3, r7, #24
 8001e88:	3b18      	subs	r3, #24
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001e90:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001e94:	f107 0318 	add.w	r3, r7, #24
 8001e98:	3b18      	subs	r3, #24
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8001ea0:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001ea4:	f107 0318 	add.w	r3, r7, #24
 8001ea8:	3b18      	subs	r3, #24
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, backcolor,  //@...
		textcolor, backcolor, backcolor, backcolor,  //@...
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_G[10][4] = {
 8001eb0:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001eb4:	f107 0318 	add.w	r3, r7, #24
 8001eb8:	3b18      	subs	r3, #24
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001ec2:	f107 0318 	add.w	r3, r7, #24
 8001ec6:	3b18      	subs	r3, #24
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6053      	str	r3, [r2, #4]
 8001ecc:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001ed0:	f107 0318 	add.w	r3, r7, #24
 8001ed4:	3b18      	subs	r3, #24
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6093      	str	r3, [r2, #8]
 8001eda:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001ede:	f107 0318 	add.w	r3, r7, #24
 8001ee2:	3b18      	subs	r3, #24
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	60d3      	str	r3, [r2, #12]
 8001ee8:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001eec:	f107 0318 	add.w	r3, r7, #24
 8001ef0:	3b18      	subs	r3, #24
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6113      	str	r3, [r2, #16]
 8001ef6:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001efa:	f107 0318 	add.w	r3, r7, #24
 8001efe:	3b18      	subs	r3, #24
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6153      	str	r3, [r2, #20]
 8001f04:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001f08:	f107 0318 	add.w	r3, r7, #24
 8001f0c:	3b18      	subs	r3, #24
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6193      	str	r3, [r2, #24]
 8001f12:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001f16:	f107 0318 	add.w	r3, r7, #24
 8001f1a:	3b18      	subs	r3, #24
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	61d3      	str	r3, [r2, #28]
 8001f20:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001f24:	f107 0318 	add.w	r3, r7, #24
 8001f28:	3b18      	subs	r3, #24
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6213      	str	r3, [r2, #32]
 8001f2e:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001f32:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001f36:	f102 0208 	add.w	r2, r2, #8
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	625a      	str	r2, [r3, #36]	; 0x24
 8001f3e:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001f42:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001f46:	f102 0208 	add.w	r2, r2, #8
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	629a      	str	r2, [r3, #40]	; 0x28
 8001f4e:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001f52:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001f56:	f102 0208 	add.w	r2, r2, #8
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f5e:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001f62:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001f66:	f102 0208 	add.w	r2, r2, #8
 8001f6a:	6812      	ldr	r2, [r2, #0]
 8001f6c:	631a      	str	r2, [r3, #48]	; 0x30
 8001f6e:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001f72:	f107 0318 	add.w	r3, r7, #24
 8001f76:	3b18      	subs	r3, #24
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6353      	str	r3, [r2, #52]	; 0x34
 8001f7c:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001f80:	f107 0318 	add.w	r3, r7, #24
 8001f84:	3b18      	subs	r3, #24
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6393      	str	r3, [r2, #56]	; 0x38
 8001f8a:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001f8e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001f92:	f102 0208 	add.w	r2, r2, #8
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f9a:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001f9e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001fa2:	f102 0208 	add.w	r2, r2, #8
 8001fa6:	6812      	ldr	r2, [r2, #0]
 8001fa8:	641a      	str	r2, [r3, #64]	; 0x40
 8001faa:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001fae:	f107 0318 	add.w	r3, r7, #24
 8001fb2:	3b18      	subs	r3, #24
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb8:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001fbc:	f107 0318 	add.w	r3, r7, #24
 8001fc0:	3b18      	subs	r3, #24
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6493      	str	r3, [r2, #72]	; 0x48
 8001fc6:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001fca:	f107 0318 	add.w	r3, r7, #24
 8001fce:	3b18      	subs	r3, #24
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd4:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001fd8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001fdc:	f102 0208 	add.w	r2, r2, #8
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	651a      	str	r2, [r3, #80]	; 0x50
 8001fe4:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001fe8:	f107 0318 	add.w	r3, r7, #24
 8001fec:	3b18      	subs	r3, #24
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6553      	str	r3, [r2, #84]	; 0x54
 8001ff2:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001ff6:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8001ffa:	f102 0208 	add.w	r2, r2, #8
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	659a      	str	r2, [r3, #88]	; 0x58
 8002002:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8002006:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800200a:	f102 0208 	add.w	r2, r2, #8
 800200e:	6812      	ldr	r2, [r2, #0]
 8002010:	65da      	str	r2, [r3, #92]	; 0x5c
 8002012:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8002016:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800201a:	f102 0208 	add.w	r2, r2, #8
 800201e:	6812      	ldr	r2, [r2, #0]
 8002020:	661a      	str	r2, [r3, #96]	; 0x60
 8002022:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8002026:	f107 0318 	add.w	r3, r7, #24
 800202a:	3b18      	subs	r3, #24
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6653      	str	r3, [r2, #100]	; 0x64
 8002030:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8002034:	f107 0318 	add.w	r3, r7, #24
 8002038:	3b18      	subs	r3, #24
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6693      	str	r3, [r2, #104]	; 0x68
 800203e:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8002042:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002046:	f102 0208 	add.w	r2, r2, #8
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	66da      	str	r2, [r3, #108]	; 0x6c
 800204e:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8002052:	f107 0318 	add.w	r3, r7, #24
 8002056:	3b18      	subs	r3, #24
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6713      	str	r3, [r2, #112]	; 0x70
 800205c:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8002060:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002064:	f102 0208 	add.w	r2, r2, #8
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	675a      	str	r2, [r3, #116]	; 0x74
 800206c:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8002070:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002074:	f102 0208 	add.w	r2, r2, #8
 8002078:	6812      	ldr	r2, [r2, #0]
 800207a:	679a      	str	r2, [r3, #120]	; 0x78
 800207c:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8002080:	f107 0318 	add.w	r3, r7, #24
 8002084:	3b18      	subs	r3, #24
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	67d3      	str	r3, [r2, #124]	; 0x7c
 800208a:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 800208e:	f107 0318 	add.w	r3, r7, #24
 8002092:	3b18      	subs	r3, #24
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800209a:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 800209e:	f107 0318 	add.w	r3, r7, #24
 80020a2:	3b18      	subs	r3, #24
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80020aa:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 80020ae:	f107 0318 	add.w	r3, r7, #24
 80020b2:	3b18      	subs	r3, #24
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80020ba:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 80020be:	f107 0318 	add.w	r3, r7, #24
 80020c2:	3b18      	subs	r3, #24
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80020ca:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 80020ce:	f107 0318 	add.w	r3, r7, #24
 80020d2:	3b18      	subs	r3, #24
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020da:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 80020de:	f107 0318 	add.w	r3, r7, #24
 80020e2:	3b18      	subs	r3, #24
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80020ea:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 80020ee:	f107 0318 	add.w	r3, r7, #24
 80020f2:	3b18      	subs	r3, #24
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 80020fa:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 80020fe:	f107 0318 	add.w	r3, r7, #24
 8002102:	3b18      	subs	r3, #24
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, textcolor,  //@..@
		backcolor, textcolor, textcolor, backcolor,  //.@@.
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_H[10][4] = {
 800210a:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 800210e:	f107 0318 	add.w	r3, r7, #24
 8002112:	3b18      	subs	r3, #24
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	6013      	str	r3, [r2, #0]
 8002118:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 800211c:	f107 0318 	add.w	r3, r7, #24
 8002120:	3b18      	subs	r3, #24
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	6053      	str	r3, [r2, #4]
 8002126:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 800212a:	f107 0318 	add.w	r3, r7, #24
 800212e:	3b18      	subs	r3, #24
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	6093      	str	r3, [r2, #8]
 8002134:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8002138:	f107 0318 	add.w	r3, r7, #24
 800213c:	3b18      	subs	r3, #24
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60d3      	str	r3, [r2, #12]
 8002142:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8002146:	f107 0318 	add.w	r3, r7, #24
 800214a:	3b18      	subs	r3, #24
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	6113      	str	r3, [r2, #16]
 8002150:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8002154:	f107 0318 	add.w	r3, r7, #24
 8002158:	3b18      	subs	r3, #24
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6153      	str	r3, [r2, #20]
 800215e:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8002162:	f107 0318 	add.w	r3, r7, #24
 8002166:	3b18      	subs	r3, #24
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6193      	str	r3, [r2, #24]
 800216c:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8002170:	f107 0318 	add.w	r3, r7, #24
 8002174:	3b18      	subs	r3, #24
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	61d3      	str	r3, [r2, #28]
 800217a:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 800217e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002182:	f102 0208 	add.w	r2, r2, #8
 8002186:	6812      	ldr	r2, [r2, #0]
 8002188:	621a      	str	r2, [r3, #32]
 800218a:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 800218e:	f107 0318 	add.w	r3, r7, #24
 8002192:	3b18      	subs	r3, #24
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6253      	str	r3, [r2, #36]	; 0x24
 8002198:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 800219c:	f107 0318 	add.w	r3, r7, #24
 80021a0:	3b18      	subs	r3, #24
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	6293      	str	r3, [r2, #40]	; 0x28
 80021a6:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 80021aa:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80021ae:	f102 0208 	add.w	r2, r2, #8
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80021b6:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 80021ba:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80021be:	f102 0208 	add.w	r2, r2, #8
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	631a      	str	r2, [r3, #48]	; 0x30
 80021c6:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 80021ca:	f107 0318 	add.w	r3, r7, #24
 80021ce:	3b18      	subs	r3, #24
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6353      	str	r3, [r2, #52]	; 0x34
 80021d4:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 80021d8:	f107 0318 	add.w	r3, r7, #24
 80021dc:	3b18      	subs	r3, #24
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6393      	str	r3, [r2, #56]	; 0x38
 80021e2:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 80021e6:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80021ea:	f102 0208 	add.w	r2, r2, #8
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80021f2:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 80021f6:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80021fa:	f102 0208 	add.w	r2, r2, #8
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	641a      	str	r2, [r3, #64]	; 0x40
 8002202:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8002206:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800220a:	f102 0208 	add.w	r2, r2, #8
 800220e:	6812      	ldr	r2, [r2, #0]
 8002210:	645a      	str	r2, [r3, #68]	; 0x44
 8002212:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8002216:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800221a:	f102 0208 	add.w	r2, r2, #8
 800221e:	6812      	ldr	r2, [r2, #0]
 8002220:	649a      	str	r2, [r3, #72]	; 0x48
 8002222:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8002226:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800222a:	f102 0208 	add.w	r2, r2, #8
 800222e:	6812      	ldr	r2, [r2, #0]
 8002230:	64da      	str	r2, [r3, #76]	; 0x4c
 8002232:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8002236:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800223a:	f102 0208 	add.w	r2, r2, #8
 800223e:	6812      	ldr	r2, [r2, #0]
 8002240:	651a      	str	r2, [r3, #80]	; 0x50
 8002242:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8002246:	f107 0318 	add.w	r3, r7, #24
 800224a:	3b18      	subs	r3, #24
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6553      	str	r3, [r2, #84]	; 0x54
 8002250:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8002254:	f107 0318 	add.w	r3, r7, #24
 8002258:	3b18      	subs	r3, #24
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6593      	str	r3, [r2, #88]	; 0x58
 800225e:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8002262:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002266:	f102 0208 	add.w	r2, r2, #8
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	65da      	str	r2, [r3, #92]	; 0x5c
 800226e:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8002272:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002276:	f102 0208 	add.w	r2, r2, #8
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	661a      	str	r2, [r3, #96]	; 0x60
 800227e:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8002282:	f107 0318 	add.w	r3, r7, #24
 8002286:	3b18      	subs	r3, #24
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6653      	str	r3, [r2, #100]	; 0x64
 800228c:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8002290:	f107 0318 	add.w	r3, r7, #24
 8002294:	3b18      	subs	r3, #24
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6693      	str	r3, [r2, #104]	; 0x68
 800229a:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 800229e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80022a2:	f102 0208 	add.w	r2, r2, #8
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	66da      	str	r2, [r3, #108]	; 0x6c
 80022aa:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 80022ae:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80022b2:	f102 0208 	add.w	r2, r2, #8
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	671a      	str	r2, [r3, #112]	; 0x70
 80022ba:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 80022be:	f107 0318 	add.w	r3, r7, #24
 80022c2:	3b18      	subs	r3, #24
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6753      	str	r3, [r2, #116]	; 0x74
 80022c8:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 80022cc:	f107 0318 	add.w	r3, r7, #24
 80022d0:	3b18      	subs	r3, #24
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6793      	str	r3, [r2, #120]	; 0x78
 80022d6:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 80022da:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80022de:	f102 0208 	add.w	r2, r2, #8
 80022e2:	6812      	ldr	r2, [r2, #0]
 80022e4:	67da      	str	r2, [r3, #124]	; 0x7c
 80022e6:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 80022ea:	f107 0318 	add.w	r3, r7, #24
 80022ee:	3b18      	subs	r3, #24
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80022f6:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 80022fa:	f107 0318 	add.w	r3, r7, #24
 80022fe:	3b18      	subs	r3, #24
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8002306:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 800230a:	f107 0318 	add.w	r3, r7, #24
 800230e:	3b18      	subs	r3, #24
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002316:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 800231a:	f107 0318 	add.w	r3, r7, #24
 800231e:	3b18      	subs	r3, #24
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002326:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 800232a:	f107 0318 	add.w	r3, r7, #24
 800232e:	3b18      	subs	r3, #24
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002336:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 800233a:	f107 0318 	add.w	r3, r7, #24
 800233e:	3b18      	subs	r3, #24
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002346:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 800234a:	f107 0318 	add.w	r3, r7, #24
 800234e:	3b18      	subs	r3, #24
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8002356:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 800235a:	f107 0318 	add.w	r3, r7, #24
 800235e:	3b18      	subs	r3, #24
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, textcolor,  //@..@
		textcolor, backcolor, backcolor, textcolor,  //@..@
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_I[10][3] = {
 8002366:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 800236a:	f107 0318 	add.w	r3, r7, #24
 800236e:	3b18      	subs	r3, #24
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6013      	str	r3, [r2, #0]
 8002374:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8002378:	f107 0318 	add.w	r3, r7, #24
 800237c:	3b18      	subs	r3, #24
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6053      	str	r3, [r2, #4]
 8002382:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8002386:	f107 0318 	add.w	r3, r7, #24
 800238a:	3b18      	subs	r3, #24
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6093      	str	r3, [r2, #8]
 8002390:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8002394:	f107 0318 	add.w	r3, r7, #24
 8002398:	3b18      	subs	r3, #24
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	60d3      	str	r3, [r2, #12]
 800239e:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 80023a2:	f107 0318 	add.w	r3, r7, #24
 80023a6:	3b18      	subs	r3, #24
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6113      	str	r3, [r2, #16]
 80023ac:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 80023b0:	f107 0318 	add.w	r3, r7, #24
 80023b4:	3b18      	subs	r3, #24
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6153      	str	r3, [r2, #20]
 80023ba:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 80023be:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80023c2:	f102 0208 	add.w	r2, r2, #8
 80023c6:	6812      	ldr	r2, [r2, #0]
 80023c8:	619a      	str	r2, [r3, #24]
 80023ca:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 80023ce:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80023d2:	f102 0208 	add.w	r2, r2, #8
 80023d6:	6812      	ldr	r2, [r2, #0]
 80023d8:	61da      	str	r2, [r3, #28]
 80023da:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 80023de:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80023e2:	f102 0208 	add.w	r2, r2, #8
 80023e6:	6812      	ldr	r2, [r2, #0]
 80023e8:	621a      	str	r2, [r3, #32]
 80023ea:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 80023ee:	f107 0318 	add.w	r3, r7, #24
 80023f2:	3b18      	subs	r3, #24
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6253      	str	r3, [r2, #36]	; 0x24
 80023f8:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 80023fc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002400:	f102 0208 	add.w	r2, r2, #8
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	629a      	str	r2, [r3, #40]	; 0x28
 8002408:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 800240c:	f107 0318 	add.w	r3, r7, #24
 8002410:	3b18      	subs	r3, #24
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002416:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 800241a:	f107 0318 	add.w	r3, r7, #24
 800241e:	3b18      	subs	r3, #24
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	6313      	str	r3, [r2, #48]	; 0x30
 8002424:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8002428:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800242c:	f102 0208 	add.w	r2, r2, #8
 8002430:	6812      	ldr	r2, [r2, #0]
 8002432:	635a      	str	r2, [r3, #52]	; 0x34
 8002434:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8002438:	f107 0318 	add.w	r3, r7, #24
 800243c:	3b18      	subs	r3, #24
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6393      	str	r3, [r2, #56]	; 0x38
 8002442:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8002446:	f107 0318 	add.w	r3, r7, #24
 800244a:	3b18      	subs	r3, #24
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002450:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8002454:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002458:	f102 0208 	add.w	r2, r2, #8
 800245c:	6812      	ldr	r2, [r2, #0]
 800245e:	641a      	str	r2, [r3, #64]	; 0x40
 8002460:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8002464:	f107 0318 	add.w	r3, r7, #24
 8002468:	3b18      	subs	r3, #24
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6453      	str	r3, [r2, #68]	; 0x44
 800246e:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8002472:	f107 0318 	add.w	r3, r7, #24
 8002476:	3b18      	subs	r3, #24
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6493      	str	r3, [r2, #72]	; 0x48
 800247c:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8002480:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002484:	f102 0208 	add.w	r2, r2, #8
 8002488:	6812      	ldr	r2, [r2, #0]
 800248a:	64da      	str	r2, [r3, #76]	; 0x4c
 800248c:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8002490:	f107 0318 	add.w	r3, r7, #24
 8002494:	3b18      	subs	r3, #24
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6513      	str	r3, [r2, #80]	; 0x50
 800249a:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 800249e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80024a2:	f102 0208 	add.w	r2, r2, #8
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	655a      	str	r2, [r3, #84]	; 0x54
 80024aa:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 80024ae:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80024b2:	f102 0208 	add.w	r2, r2, #8
 80024b6:	6812      	ldr	r2, [r2, #0]
 80024b8:	659a      	str	r2, [r3, #88]	; 0x58
 80024ba:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 80024be:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80024c2:	f102 0208 	add.w	r2, r2, #8
 80024c6:	6812      	ldr	r2, [r2, #0]
 80024c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80024ca:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 80024ce:	f107 0318 	add.w	r3, r7, #24
 80024d2:	3b18      	subs	r3, #24
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6613      	str	r3, [r2, #96]	; 0x60
 80024d8:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 80024dc:	f107 0318 	add.w	r3, r7, #24
 80024e0:	3b18      	subs	r3, #24
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6653      	str	r3, [r2, #100]	; 0x64
 80024e6:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 80024ea:	f107 0318 	add.w	r3, r7, #24
 80024ee:	3b18      	subs	r3, #24
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6693      	str	r3, [r2, #104]	; 0x68
 80024f4:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 80024f8:	f107 0318 	add.w	r3, r7, #24
 80024fc:	3b18      	subs	r3, #24
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	66d3      	str	r3, [r2, #108]	; 0x6c
 8002502:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8002506:	f107 0318 	add.w	r3, r7, #24
 800250a:	3b18      	subs	r3, #24
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6713      	str	r3, [r2, #112]	; 0x70
 8002510:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8002514:	f107 0318 	add.w	r3, r7, #24
 8002518:	3b18      	subs	r3, #24
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	6753      	str	r3, [r2, #116]	; 0x74
		backcolor, textcolor, backcolor,  //.@.
		textcolor, textcolor, textcolor,  //@@@
		backcolor, backcolor, backcolor,  //...
		backcolor, backcolor, backcolor,  //...
	};
	int letter_J[10][4] = {
 800251e:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002522:	f107 0318 	add.w	r3, r7, #24
 8002526:	3b18      	subs	r3, #24
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	6013      	str	r3, [r2, #0]
 800252c:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002530:	f107 0318 	add.w	r3, r7, #24
 8002534:	3b18      	subs	r3, #24
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6053      	str	r3, [r2, #4]
 800253a:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800253e:	f107 0318 	add.w	r3, r7, #24
 8002542:	3b18      	subs	r3, #24
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6093      	str	r3, [r2, #8]
 8002548:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800254c:	f107 0318 	add.w	r3, r7, #24
 8002550:	3b18      	subs	r3, #24
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	60d3      	str	r3, [r2, #12]
 8002556:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800255a:	f107 0318 	add.w	r3, r7, #24
 800255e:	3b18      	subs	r3, #24
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6113      	str	r3, [r2, #16]
 8002564:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002568:	f107 0318 	add.w	r3, r7, #24
 800256c:	3b18      	subs	r3, #24
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6153      	str	r3, [r2, #20]
 8002572:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002576:	f107 0318 	add.w	r3, r7, #24
 800257a:	3b18      	subs	r3, #24
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6193      	str	r3, [r2, #24]
 8002580:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002584:	f107 0318 	add.w	r3, r7, #24
 8002588:	3b18      	subs	r3, #24
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	61d3      	str	r3, [r2, #28]
 800258e:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002592:	f107 0318 	add.w	r3, r7, #24
 8002596:	3b18      	subs	r3, #24
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	6213      	str	r3, [r2, #32]
 800259c:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80025a0:	f107 0318 	add.w	r3, r7, #24
 80025a4:	3b18      	subs	r3, #24
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6253      	str	r3, [r2, #36]	; 0x24
 80025aa:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80025ae:	f107 0318 	add.w	r3, r7, #24
 80025b2:	3b18      	subs	r3, #24
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	6293      	str	r3, [r2, #40]	; 0x28
 80025b8:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 80025bc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80025c0:	f102 0208 	add.w	r2, r2, #8
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80025c8:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80025cc:	f107 0318 	add.w	r3, r7, #24
 80025d0:	3b18      	subs	r3, #24
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6313      	str	r3, [r2, #48]	; 0x30
 80025d6:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80025da:	f107 0318 	add.w	r3, r7, #24
 80025de:	3b18      	subs	r3, #24
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6353      	str	r3, [r2, #52]	; 0x34
 80025e4:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80025e8:	f107 0318 	add.w	r3, r7, #24
 80025ec:	3b18      	subs	r3, #24
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6393      	str	r3, [r2, #56]	; 0x38
 80025f2:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 80025f6:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80025fa:	f102 0208 	add.w	r2, r2, #8
 80025fe:	6812      	ldr	r2, [r2, #0]
 8002600:	63da      	str	r2, [r3, #60]	; 0x3c
 8002602:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002606:	f107 0318 	add.w	r3, r7, #24
 800260a:	3b18      	subs	r3, #24
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6413      	str	r3, [r2, #64]	; 0x40
 8002610:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002614:	f107 0318 	add.w	r3, r7, #24
 8002618:	3b18      	subs	r3, #24
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6453      	str	r3, [r2, #68]	; 0x44
 800261e:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002622:	f107 0318 	add.w	r3, r7, #24
 8002626:	3b18      	subs	r3, #24
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6493      	str	r3, [r2, #72]	; 0x48
 800262c:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8002630:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002634:	f102 0208 	add.w	r2, r2, #8
 8002638:	6812      	ldr	r2, [r2, #0]
 800263a:	64da      	str	r2, [r3, #76]	; 0x4c
 800263c:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002640:	f107 0318 	add.w	r3, r7, #24
 8002644:	3b18      	subs	r3, #24
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	6513      	str	r3, [r2, #80]	; 0x50
 800264a:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800264e:	f107 0318 	add.w	r3, r7, #24
 8002652:	3b18      	subs	r3, #24
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6553      	str	r3, [r2, #84]	; 0x54
 8002658:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800265c:	f107 0318 	add.w	r3, r7, #24
 8002660:	3b18      	subs	r3, #24
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6593      	str	r3, [r2, #88]	; 0x58
 8002666:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 800266a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800266e:	f102 0208 	add.w	r2, r2, #8
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	65da      	str	r2, [r3, #92]	; 0x5c
 8002676:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 800267a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800267e:	f102 0208 	add.w	r2, r2, #8
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	661a      	str	r2, [r3, #96]	; 0x60
 8002686:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800268a:	f107 0318 	add.w	r3, r7, #24
 800268e:	3b18      	subs	r3, #24
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6653      	str	r3, [r2, #100]	; 0x64
 8002694:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002698:	f107 0318 	add.w	r3, r7, #24
 800269c:	3b18      	subs	r3, #24
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6693      	str	r3, [r2, #104]	; 0x68
 80026a2:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 80026a6:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80026aa:	f102 0208 	add.w	r2, r2, #8
 80026ae:	6812      	ldr	r2, [r2, #0]
 80026b0:	66da      	str	r2, [r3, #108]	; 0x6c
 80026b2:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80026b6:	f107 0318 	add.w	r3, r7, #24
 80026ba:	3b18      	subs	r3, #24
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	6713      	str	r3, [r2, #112]	; 0x70
 80026c0:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 80026c4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80026c8:	f102 0208 	add.w	r2, r2, #8
 80026cc:	6812      	ldr	r2, [r2, #0]
 80026ce:	675a      	str	r2, [r3, #116]	; 0x74
 80026d0:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 80026d4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80026d8:	f102 0208 	add.w	r2, r2, #8
 80026dc:	6812      	ldr	r2, [r2, #0]
 80026de:	679a      	str	r2, [r3, #120]	; 0x78
 80026e0:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80026e4:	f107 0318 	add.w	r3, r7, #24
 80026e8:	3b18      	subs	r3, #24
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	67d3      	str	r3, [r2, #124]	; 0x7c
 80026ee:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80026f2:	f107 0318 	add.w	r3, r7, #24
 80026f6:	3b18      	subs	r3, #24
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80026fe:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002702:	f107 0318 	add.w	r3, r7, #24
 8002706:	3b18      	subs	r3, #24
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 800270e:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002712:	f107 0318 	add.w	r3, r7, #24
 8002716:	3b18      	subs	r3, #24
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800271e:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002722:	f107 0318 	add.w	r3, r7, #24
 8002726:	3b18      	subs	r3, #24
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800272e:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002732:	f107 0318 	add.w	r3, r7, #24
 8002736:	3b18      	subs	r3, #24
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800273e:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002742:	f107 0318 	add.w	r3, r7, #24
 8002746:	3b18      	subs	r3, #24
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800274e:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002752:	f107 0318 	add.w	r3, r7, #24
 8002756:	3b18      	subs	r3, #24
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800275e:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002762:	f107 0318 	add.w	r3, r7, #24
 8002766:	3b18      	subs	r3, #24
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, textcolor,  //@..@
		backcolor, textcolor, textcolor, backcolor,  //.@@.
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_K[10][4] = {
 800276e:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002772:	f107 0318 	add.w	r3, r7, #24
 8002776:	3b18      	subs	r3, #24
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002780:	f107 0318 	add.w	r3, r7, #24
 8002784:	3b18      	subs	r3, #24
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	6053      	str	r3, [r2, #4]
 800278a:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 800278e:	f107 0318 	add.w	r3, r7, #24
 8002792:	3b18      	subs	r3, #24
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6093      	str	r3, [r2, #8]
 8002798:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 800279c:	f107 0318 	add.w	r3, r7, #24
 80027a0:	3b18      	subs	r3, #24
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	60d3      	str	r3, [r2, #12]
 80027a6:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80027aa:	f107 0318 	add.w	r3, r7, #24
 80027ae:	3b18      	subs	r3, #24
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6113      	str	r3, [r2, #16]
 80027b4:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80027b8:	f107 0318 	add.w	r3, r7, #24
 80027bc:	3b18      	subs	r3, #24
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6153      	str	r3, [r2, #20]
 80027c2:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80027c6:	f107 0318 	add.w	r3, r7, #24
 80027ca:	3b18      	subs	r3, #24
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6193      	str	r3, [r2, #24]
 80027d0:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80027d4:	f107 0318 	add.w	r3, r7, #24
 80027d8:	3b18      	subs	r3, #24
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	61d3      	str	r3, [r2, #28]
 80027de:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80027e2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80027e6:	f102 0208 	add.w	r2, r2, #8
 80027ea:	6812      	ldr	r2, [r2, #0]
 80027ec:	621a      	str	r2, [r3, #32]
 80027ee:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80027f2:	f107 0318 	add.w	r3, r7, #24
 80027f6:	3b18      	subs	r3, #24
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6253      	str	r3, [r2, #36]	; 0x24
 80027fc:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002800:	f107 0318 	add.w	r3, r7, #24
 8002804:	3b18      	subs	r3, #24
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6293      	str	r3, [r2, #40]	; 0x28
 800280a:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800280e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002812:	f102 0208 	add.w	r2, r2, #8
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	62da      	str	r2, [r3, #44]	; 0x2c
 800281a:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800281e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002822:	f102 0208 	add.w	r2, r2, #8
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	631a      	str	r2, [r3, #48]	; 0x30
 800282a:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 800282e:	f107 0318 	add.w	r3, r7, #24
 8002832:	3b18      	subs	r3, #24
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6353      	str	r3, [r2, #52]	; 0x34
 8002838:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800283c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002840:	f102 0208 	add.w	r2, r2, #8
 8002844:	6812      	ldr	r2, [r2, #0]
 8002846:	639a      	str	r2, [r3, #56]	; 0x38
 8002848:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 800284c:	f107 0318 	add.w	r3, r7, #24
 8002850:	3b18      	subs	r3, #24
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002856:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800285a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800285e:	f102 0208 	add.w	r2, r2, #8
 8002862:	6812      	ldr	r2, [r2, #0]
 8002864:	641a      	str	r2, [r3, #64]	; 0x40
 8002866:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800286a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800286e:	f102 0208 	add.w	r2, r2, #8
 8002872:	6812      	ldr	r2, [r2, #0]
 8002874:	645a      	str	r2, [r3, #68]	; 0x44
 8002876:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 800287a:	f107 0318 	add.w	r3, r7, #24
 800287e:	3b18      	subs	r3, #24
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6493      	str	r3, [r2, #72]	; 0x48
 8002884:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002888:	f107 0318 	add.w	r3, r7, #24
 800288c:	3b18      	subs	r3, #24
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002892:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002896:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800289a:	f102 0208 	add.w	r2, r2, #8
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	651a      	str	r2, [r3, #80]	; 0x50
 80028a2:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80028a6:	f107 0318 	add.w	r3, r7, #24
 80028aa:	3b18      	subs	r3, #24
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6553      	str	r3, [r2, #84]	; 0x54
 80028b0:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80028b4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80028b8:	f102 0208 	add.w	r2, r2, #8
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	659a      	str	r2, [r3, #88]	; 0x58
 80028c0:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80028c4:	f107 0318 	add.w	r3, r7, #24
 80028c8:	3b18      	subs	r3, #24
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	65d3      	str	r3, [r2, #92]	; 0x5c
 80028ce:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80028d2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80028d6:	f102 0208 	add.w	r2, r2, #8
 80028da:	6812      	ldr	r2, [r2, #0]
 80028dc:	661a      	str	r2, [r3, #96]	; 0x60
 80028de:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80028e2:	f107 0318 	add.w	r3, r7, #24
 80028e6:	3b18      	subs	r3, #24
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6653      	str	r3, [r2, #100]	; 0x64
 80028ec:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80028f0:	f107 0318 	add.w	r3, r7, #24
 80028f4:	3b18      	subs	r3, #24
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6693      	str	r3, [r2, #104]	; 0x68
 80028fa:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80028fe:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002902:	f102 0208 	add.w	r2, r2, #8
 8002906:	6812      	ldr	r2, [r2, #0]
 8002908:	66da      	str	r2, [r3, #108]	; 0x6c
 800290a:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800290e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002912:	f102 0208 	add.w	r2, r2, #8
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	671a      	str	r2, [r3, #112]	; 0x70
 800291a:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 800291e:	f107 0318 	add.w	r3, r7, #24
 8002922:	3b18      	subs	r3, #24
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	6753      	str	r3, [r2, #116]	; 0x74
 8002928:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 800292c:	f107 0318 	add.w	r3, r7, #24
 8002930:	3b18      	subs	r3, #24
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6793      	str	r3, [r2, #120]	; 0x78
 8002936:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800293a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800293e:	f102 0208 	add.w	r2, r2, #8
 8002942:	6812      	ldr	r2, [r2, #0]
 8002944:	67da      	str	r2, [r3, #124]	; 0x7c
 8002946:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 800294a:	f107 0318 	add.w	r3, r7, #24
 800294e:	3b18      	subs	r3, #24
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002956:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 800295a:	f107 0318 	add.w	r3, r7, #24
 800295e:	3b18      	subs	r3, #24
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8002966:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 800296a:	f107 0318 	add.w	r3, r7, #24
 800296e:	3b18      	subs	r3, #24
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002976:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 800297a:	f107 0318 	add.w	r3, r7, #24
 800297e:	3b18      	subs	r3, #24
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002986:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 800298a:	f107 0318 	add.w	r3, r7, #24
 800298e:	3b18      	subs	r3, #24
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002996:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 800299a:	f107 0318 	add.w	r3, r7, #24
 800299e:	3b18      	subs	r3, #24
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80029a6:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80029aa:	f107 0318 	add.w	r3, r7, #24
 80029ae:	3b18      	subs	r3, #24
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 80029b6:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80029ba:	f107 0318 	add.w	r3, r7, #24
 80029be:	3b18      	subs	r3, #24
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, textcolor,  //@..@
		textcolor, backcolor, backcolor, textcolor,  //@..@
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_L[10][4] = {
 80029c6:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 80029ca:	f107 0318 	add.w	r3, r7, #24
 80029ce:	3b18      	subs	r3, #24
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 80029d8:	f107 0318 	add.w	r3, r7, #24
 80029dc:	3b18      	subs	r3, #24
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6053      	str	r3, [r2, #4]
 80029e2:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 80029e6:	f107 0318 	add.w	r3, r7, #24
 80029ea:	3b18      	subs	r3, #24
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6093      	str	r3, [r2, #8]
 80029f0:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 80029f4:	f107 0318 	add.w	r3, r7, #24
 80029f8:	3b18      	subs	r3, #24
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	60d3      	str	r3, [r2, #12]
 80029fe:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002a02:	f107 0318 	add.w	r3, r7, #24
 8002a06:	3b18      	subs	r3, #24
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	6113      	str	r3, [r2, #16]
 8002a0c:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002a10:	f107 0318 	add.w	r3, r7, #24
 8002a14:	3b18      	subs	r3, #24
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6153      	str	r3, [r2, #20]
 8002a1a:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002a1e:	f107 0318 	add.w	r3, r7, #24
 8002a22:	3b18      	subs	r3, #24
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6193      	str	r3, [r2, #24]
 8002a28:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002a2c:	f107 0318 	add.w	r3, r7, #24
 8002a30:	3b18      	subs	r3, #24
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	61d3      	str	r3, [r2, #28]
 8002a36:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8002a3a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002a3e:	f102 0208 	add.w	r2, r2, #8
 8002a42:	6812      	ldr	r2, [r2, #0]
 8002a44:	621a      	str	r2, [r3, #32]
 8002a46:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002a4a:	f107 0318 	add.w	r3, r7, #24
 8002a4e:	3b18      	subs	r3, #24
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6253      	str	r3, [r2, #36]	; 0x24
 8002a54:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002a58:	f107 0318 	add.w	r3, r7, #24
 8002a5c:	3b18      	subs	r3, #24
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6293      	str	r3, [r2, #40]	; 0x28
 8002a62:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002a66:	f107 0318 	add.w	r3, r7, #24
 8002a6a:	3b18      	subs	r3, #24
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002a70:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8002a74:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002a78:	f102 0208 	add.w	r2, r2, #8
 8002a7c:	6812      	ldr	r2, [r2, #0]
 8002a7e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a80:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002a84:	f107 0318 	add.w	r3, r7, #24
 8002a88:	3b18      	subs	r3, #24
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6353      	str	r3, [r2, #52]	; 0x34
 8002a8e:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002a92:	f107 0318 	add.w	r3, r7, #24
 8002a96:	3b18      	subs	r3, #24
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6393      	str	r3, [r2, #56]	; 0x38
 8002a9c:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002aa0:	f107 0318 	add.w	r3, r7, #24
 8002aa4:	3b18      	subs	r3, #24
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002aaa:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8002aae:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002ab2:	f102 0208 	add.w	r2, r2, #8
 8002ab6:	6812      	ldr	r2, [r2, #0]
 8002ab8:	641a      	str	r2, [r3, #64]	; 0x40
 8002aba:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002abe:	f107 0318 	add.w	r3, r7, #24
 8002ac2:	3b18      	subs	r3, #24
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6453      	str	r3, [r2, #68]	; 0x44
 8002ac8:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002acc:	f107 0318 	add.w	r3, r7, #24
 8002ad0:	3b18      	subs	r3, #24
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	6493      	str	r3, [r2, #72]	; 0x48
 8002ad6:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002ada:	f107 0318 	add.w	r3, r7, #24
 8002ade:	3b18      	subs	r3, #24
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ae4:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8002ae8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002aec:	f102 0208 	add.w	r2, r2, #8
 8002af0:	6812      	ldr	r2, [r2, #0]
 8002af2:	651a      	str	r2, [r3, #80]	; 0x50
 8002af4:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002af8:	f107 0318 	add.w	r3, r7, #24
 8002afc:	3b18      	subs	r3, #24
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6553      	str	r3, [r2, #84]	; 0x54
 8002b02:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002b06:	f107 0318 	add.w	r3, r7, #24
 8002b0a:	3b18      	subs	r3, #24
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6593      	str	r3, [r2, #88]	; 0x58
 8002b10:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002b14:	f107 0318 	add.w	r3, r7, #24
 8002b18:	3b18      	subs	r3, #24
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002b1e:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8002b22:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002b26:	f102 0208 	add.w	r2, r2, #8
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	661a      	str	r2, [r3, #96]	; 0x60
 8002b2e:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002b32:	f107 0318 	add.w	r3, r7, #24
 8002b36:	3b18      	subs	r3, #24
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6653      	str	r3, [r2, #100]	; 0x64
 8002b3c:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002b40:	f107 0318 	add.w	r3, r7, #24
 8002b44:	3b18      	subs	r3, #24
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6693      	str	r3, [r2, #104]	; 0x68
 8002b4a:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002b4e:	f107 0318 	add.w	r3, r7, #24
 8002b52:	3b18      	subs	r3, #24
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	66d3      	str	r3, [r2, #108]	; 0x6c
 8002b58:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8002b5c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002b60:	f102 0208 	add.w	r2, r2, #8
 8002b64:	6812      	ldr	r2, [r2, #0]
 8002b66:	671a      	str	r2, [r3, #112]	; 0x70
 8002b68:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8002b6c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002b70:	f102 0208 	add.w	r2, r2, #8
 8002b74:	6812      	ldr	r2, [r2, #0]
 8002b76:	675a      	str	r2, [r3, #116]	; 0x74
 8002b78:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8002b7c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002b80:	f102 0208 	add.w	r2, r2, #8
 8002b84:	6812      	ldr	r2, [r2, #0]
 8002b86:	679a      	str	r2, [r3, #120]	; 0x78
 8002b88:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8002b8c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002b90:	f102 0208 	add.w	r2, r2, #8
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	67da      	str	r2, [r3, #124]	; 0x7c
 8002b98:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002b9c:	f107 0318 	add.w	r3, r7, #24
 8002ba0:	3b18      	subs	r3, #24
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ba8:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002bac:	f107 0318 	add.w	r3, r7, #24
 8002bb0:	3b18      	subs	r3, #24
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8002bb8:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002bbc:	f107 0318 	add.w	r3, r7, #24
 8002bc0:	3b18      	subs	r3, #24
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002bc8:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002bcc:	f107 0318 	add.w	r3, r7, #24
 8002bd0:	3b18      	subs	r3, #24
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002bd8:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002bdc:	f107 0318 	add.w	r3, r7, #24
 8002be0:	3b18      	subs	r3, #24
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002be8:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002bec:	f107 0318 	add.w	r3, r7, #24
 8002bf0:	3b18      	subs	r3, #24
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002bf8:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002bfc:	f107 0318 	add.w	r3, r7, #24
 8002c00:	3b18      	subs	r3, #24
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8002c08:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002c0c:	f107 0318 	add.w	r3, r7, #24
 8002c10:	3b18      	subs	r3, #24
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, backcolor,  //@...
		textcolor, textcolor, textcolor, textcolor,  //@@@@
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_M[10][4] = {
 8002c18:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002c1c:	f107 0318 	add.w	r3, r7, #24
 8002c20:	3b18      	subs	r3, #24
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6013      	str	r3, [r2, #0]
 8002c26:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002c2a:	f107 0318 	add.w	r3, r7, #24
 8002c2e:	3b18      	subs	r3, #24
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6053      	str	r3, [r2, #4]
 8002c34:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002c38:	f107 0318 	add.w	r3, r7, #24
 8002c3c:	3b18      	subs	r3, #24
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6093      	str	r3, [r2, #8]
 8002c42:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002c46:	f107 0318 	add.w	r3, r7, #24
 8002c4a:	3b18      	subs	r3, #24
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	60d3      	str	r3, [r2, #12]
 8002c50:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002c54:	f107 0318 	add.w	r3, r7, #24
 8002c58:	3b18      	subs	r3, #24
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6113      	str	r3, [r2, #16]
 8002c5e:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002c62:	f107 0318 	add.w	r3, r7, #24
 8002c66:	3b18      	subs	r3, #24
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6153      	str	r3, [r2, #20]
 8002c6c:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002c70:	f107 0318 	add.w	r3, r7, #24
 8002c74:	3b18      	subs	r3, #24
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6193      	str	r3, [r2, #24]
 8002c7a:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002c7e:	f107 0318 	add.w	r3, r7, #24
 8002c82:	3b18      	subs	r3, #24
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	61d3      	str	r3, [r2, #28]
 8002c88:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002c8c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002c90:	f102 0208 	add.w	r2, r2, #8
 8002c94:	6812      	ldr	r2, [r2, #0]
 8002c96:	621a      	str	r2, [r3, #32]
 8002c98:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002c9c:	f107 0318 	add.w	r3, r7, #24
 8002ca0:	3b18      	subs	r3, #24
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6253      	str	r3, [r2, #36]	; 0x24
 8002ca6:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002caa:	f107 0318 	add.w	r3, r7, #24
 8002cae:	3b18      	subs	r3, #24
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6293      	str	r3, [r2, #40]	; 0x28
 8002cb4:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002cb8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002cbc:	f102 0208 	add.w	r2, r2, #8
 8002cc0:	6812      	ldr	r2, [r2, #0]
 8002cc2:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cc4:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002cc8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002ccc:	f102 0208 	add.w	r2, r2, #8
 8002cd0:	6812      	ldr	r2, [r2, #0]
 8002cd2:	631a      	str	r2, [r3, #48]	; 0x30
 8002cd4:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002cd8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002cdc:	f102 0208 	add.w	r2, r2, #8
 8002ce0:	6812      	ldr	r2, [r2, #0]
 8002ce2:	635a      	str	r2, [r3, #52]	; 0x34
 8002ce4:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002ce8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002cec:	f102 0208 	add.w	r2, r2, #8
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	639a      	str	r2, [r3, #56]	; 0x38
 8002cf4:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002cf8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002cfc:	f102 0208 	add.w	r2, r2, #8
 8002d00:	6812      	ldr	r2, [r2, #0]
 8002d02:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d04:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002d08:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002d0c:	f102 0208 	add.w	r2, r2, #8
 8002d10:	6812      	ldr	r2, [r2, #0]
 8002d12:	641a      	str	r2, [r3, #64]	; 0x40
 8002d14:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002d18:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002d1c:	f102 0208 	add.w	r2, r2, #8
 8002d20:	6812      	ldr	r2, [r2, #0]
 8002d22:	645a      	str	r2, [r3, #68]	; 0x44
 8002d24:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002d28:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002d2c:	f102 0208 	add.w	r2, r2, #8
 8002d30:	6812      	ldr	r2, [r2, #0]
 8002d32:	649a      	str	r2, [r3, #72]	; 0x48
 8002d34:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002d38:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002d3c:	f102 0208 	add.w	r2, r2, #8
 8002d40:	6812      	ldr	r2, [r2, #0]
 8002d42:	64da      	str	r2, [r3, #76]	; 0x4c
 8002d44:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002d48:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002d4c:	f102 0208 	add.w	r2, r2, #8
 8002d50:	6812      	ldr	r2, [r2, #0]
 8002d52:	651a      	str	r2, [r3, #80]	; 0x50
 8002d54:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002d58:	f107 0318 	add.w	r3, r7, #24
 8002d5c:	3b18      	subs	r3, #24
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6553      	str	r3, [r2, #84]	; 0x54
 8002d62:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002d66:	f107 0318 	add.w	r3, r7, #24
 8002d6a:	3b18      	subs	r3, #24
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d70:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002d74:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002d78:	f102 0208 	add.w	r2, r2, #8
 8002d7c:	6812      	ldr	r2, [r2, #0]
 8002d7e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d80:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002d84:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002d88:	f102 0208 	add.w	r2, r2, #8
 8002d8c:	6812      	ldr	r2, [r2, #0]
 8002d8e:	661a      	str	r2, [r3, #96]	; 0x60
 8002d90:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002d94:	f107 0318 	add.w	r3, r7, #24
 8002d98:	3b18      	subs	r3, #24
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6653      	str	r3, [r2, #100]	; 0x64
 8002d9e:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002da2:	f107 0318 	add.w	r3, r7, #24
 8002da6:	3b18      	subs	r3, #24
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	6693      	str	r3, [r2, #104]	; 0x68
 8002dac:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002db0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002db4:	f102 0208 	add.w	r2, r2, #8
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	66da      	str	r2, [r3, #108]	; 0x6c
 8002dbc:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002dc0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002dc4:	f102 0208 	add.w	r2, r2, #8
 8002dc8:	6812      	ldr	r2, [r2, #0]
 8002dca:	671a      	str	r2, [r3, #112]	; 0x70
 8002dcc:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002dd0:	f107 0318 	add.w	r3, r7, #24
 8002dd4:	3b18      	subs	r3, #24
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6753      	str	r3, [r2, #116]	; 0x74
 8002dda:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002dde:	f107 0318 	add.w	r3, r7, #24
 8002de2:	3b18      	subs	r3, #24
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6793      	str	r3, [r2, #120]	; 0x78
 8002de8:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002dec:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002df0:	f102 0208 	add.w	r2, r2, #8
 8002df4:	6812      	ldr	r2, [r2, #0]
 8002df6:	67da      	str	r2, [r3, #124]	; 0x7c
 8002df8:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002dfc:	f107 0318 	add.w	r3, r7, #24
 8002e00:	3b18      	subs	r3, #24
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e08:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002e0c:	f107 0318 	add.w	r3, r7, #24
 8002e10:	3b18      	subs	r3, #24
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8002e18:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002e1c:	f107 0318 	add.w	r3, r7, #24
 8002e20:	3b18      	subs	r3, #24
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002e28:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002e2c:	f107 0318 	add.w	r3, r7, #24
 8002e30:	3b18      	subs	r3, #24
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002e38:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002e3c:	f107 0318 	add.w	r3, r7, #24
 8002e40:	3b18      	subs	r3, #24
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e48:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002e4c:	f107 0318 	add.w	r3, r7, #24
 8002e50:	3b18      	subs	r3, #24
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002e58:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002e5c:	f107 0318 	add.w	r3, r7, #24
 8002e60:	3b18      	subs	r3, #24
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8002e68:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002e6c:	f107 0318 	add.w	r3, r7, #24
 8002e70:	3b18      	subs	r3, #24
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, textcolor,  //@..@
		textcolor, backcolor, backcolor, textcolor,  //@..@
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_N[10][4] = {
 8002e78:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002e7c:	f107 0318 	add.w	r3, r7, #24
 8002e80:	3b18      	subs	r3, #24
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	6013      	str	r3, [r2, #0]
 8002e86:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002e8a:	f107 0318 	add.w	r3, r7, #24
 8002e8e:	3b18      	subs	r3, #24
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6053      	str	r3, [r2, #4]
 8002e94:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002e98:	f107 0318 	add.w	r3, r7, #24
 8002e9c:	3b18      	subs	r3, #24
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6093      	str	r3, [r2, #8]
 8002ea2:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002ea6:	f107 0318 	add.w	r3, r7, #24
 8002eaa:	3b18      	subs	r3, #24
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	60d3      	str	r3, [r2, #12]
 8002eb0:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002eb4:	f107 0318 	add.w	r3, r7, #24
 8002eb8:	3b18      	subs	r3, #24
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6113      	str	r3, [r2, #16]
 8002ebe:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002ec2:	f107 0318 	add.w	r3, r7, #24
 8002ec6:	3b18      	subs	r3, #24
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6153      	str	r3, [r2, #20]
 8002ecc:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002ed0:	f107 0318 	add.w	r3, r7, #24
 8002ed4:	3b18      	subs	r3, #24
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6193      	str	r3, [r2, #24]
 8002eda:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002ede:	f107 0318 	add.w	r3, r7, #24
 8002ee2:	3b18      	subs	r3, #24
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	61d3      	str	r3, [r2, #28]
 8002ee8:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002eec:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002ef0:	f102 0208 	add.w	r2, r2, #8
 8002ef4:	6812      	ldr	r2, [r2, #0]
 8002ef6:	621a      	str	r2, [r3, #32]
 8002ef8:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002efc:	f107 0318 	add.w	r3, r7, #24
 8002f00:	3b18      	subs	r3, #24
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	6253      	str	r3, [r2, #36]	; 0x24
 8002f06:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002f0a:	f107 0318 	add.w	r3, r7, #24
 8002f0e:	3b18      	subs	r3, #24
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6293      	str	r3, [r2, #40]	; 0x28
 8002f14:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002f18:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002f1c:	f102 0208 	add.w	r2, r2, #8
 8002f20:	6812      	ldr	r2, [r2, #0]
 8002f22:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f24:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002f28:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002f2c:	f102 0208 	add.w	r2, r2, #8
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30
 8002f34:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002f38:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002f3c:	f102 0208 	add.w	r2, r2, #8
 8002f40:	6812      	ldr	r2, [r2, #0]
 8002f42:	635a      	str	r2, [r3, #52]	; 0x34
 8002f44:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002f48:	f107 0318 	add.w	r3, r7, #24
 8002f4c:	3b18      	subs	r3, #24
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6393      	str	r3, [r2, #56]	; 0x38
 8002f52:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002f56:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002f5a:	f102 0208 	add.w	r2, r2, #8
 8002f5e:	6812      	ldr	r2, [r2, #0]
 8002f60:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f62:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002f66:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002f6a:	f102 0208 	add.w	r2, r2, #8
 8002f6e:	6812      	ldr	r2, [r2, #0]
 8002f70:	641a      	str	r2, [r3, #64]	; 0x40
 8002f72:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002f76:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002f7a:	f102 0208 	add.w	r2, r2, #8
 8002f7e:	6812      	ldr	r2, [r2, #0]
 8002f80:	645a      	str	r2, [r3, #68]	; 0x44
 8002f82:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002f86:	f107 0318 	add.w	r3, r7, #24
 8002f8a:	3b18      	subs	r3, #24
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6493      	str	r3, [r2, #72]	; 0x48
 8002f90:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002f94:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002f98:	f102 0208 	add.w	r2, r2, #8
 8002f9c:	6812      	ldr	r2, [r2, #0]
 8002f9e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002fa0:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002fa4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002fa8:	f102 0208 	add.w	r2, r2, #8
 8002fac:	6812      	ldr	r2, [r2, #0]
 8002fae:	651a      	str	r2, [r3, #80]	; 0x50
 8002fb0:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002fb4:	f107 0318 	add.w	r3, r7, #24
 8002fb8:	3b18      	subs	r3, #24
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6553      	str	r3, [r2, #84]	; 0x54
 8002fbe:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002fc2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002fc6:	f102 0208 	add.w	r2, r2, #8
 8002fca:	6812      	ldr	r2, [r2, #0]
 8002fcc:	659a      	str	r2, [r3, #88]	; 0x58
 8002fce:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002fd2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002fd6:	f102 0208 	add.w	r2, r2, #8
 8002fda:	6812      	ldr	r2, [r2, #0]
 8002fdc:	65da      	str	r2, [r3, #92]	; 0x5c
 8002fde:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002fe2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8002fe6:	f102 0208 	add.w	r2, r2, #8
 8002fea:	6812      	ldr	r2, [r2, #0]
 8002fec:	661a      	str	r2, [r3, #96]	; 0x60
 8002fee:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002ff2:	f107 0318 	add.w	r3, r7, #24
 8002ff6:	3b18      	subs	r3, #24
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6653      	str	r3, [r2, #100]	; 0x64
 8002ffc:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8003000:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003004:	f102 0208 	add.w	r2, r2, #8
 8003008:	6812      	ldr	r2, [r2, #0]
 800300a:	669a      	str	r2, [r3, #104]	; 0x68
 800300c:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8003010:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003014:	f102 0208 	add.w	r2, r2, #8
 8003018:	6812      	ldr	r2, [r2, #0]
 800301a:	66da      	str	r2, [r3, #108]	; 0x6c
 800301c:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8003020:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003024:	f102 0208 	add.w	r2, r2, #8
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	671a      	str	r2, [r3, #112]	; 0x70
 800302c:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8003030:	f107 0318 	add.w	r3, r7, #24
 8003034:	3b18      	subs	r3, #24
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6753      	str	r3, [r2, #116]	; 0x74
 800303a:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 800303e:	f107 0318 	add.w	r3, r7, #24
 8003042:	3b18      	subs	r3, #24
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6793      	str	r3, [r2, #120]	; 0x78
 8003048:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 800304c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003050:	f102 0208 	add.w	r2, r2, #8
 8003054:	6812      	ldr	r2, [r2, #0]
 8003056:	67da      	str	r2, [r3, #124]	; 0x7c
 8003058:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 800305c:	f107 0318 	add.w	r3, r7, #24
 8003060:	3b18      	subs	r3, #24
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003068:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 800306c:	f107 0318 	add.w	r3, r7, #24
 8003070:	3b18      	subs	r3, #24
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8003078:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 800307c:	f107 0318 	add.w	r3, r7, #24
 8003080:	3b18      	subs	r3, #24
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003088:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 800308c:	f107 0318 	add.w	r3, r7, #24
 8003090:	3b18      	subs	r3, #24
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003098:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 800309c:	f107 0318 	add.w	r3, r7, #24
 80030a0:	3b18      	subs	r3, #24
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80030a8:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 80030ac:	f107 0318 	add.w	r3, r7, #24
 80030b0:	3b18      	subs	r3, #24
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80030b8:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 80030bc:	f107 0318 	add.w	r3, r7, #24
 80030c0:	3b18      	subs	r3, #24
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 80030c8:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 80030cc:	f107 0318 	add.w	r3, r7, #24
 80030d0:	3b18      	subs	r3, #24
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, textcolor, textcolor,  //@.@@
		textcolor, backcolor, backcolor, textcolor,  //@..@
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_O[10][4] = {
 80030d8:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80030dc:	f107 0318 	add.w	r3, r7, #24
 80030e0:	3b18      	subs	r3, #24
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80030ea:	f107 0318 	add.w	r3, r7, #24
 80030ee:	3b18      	subs	r3, #24
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6053      	str	r3, [r2, #4]
 80030f4:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80030f8:	f107 0318 	add.w	r3, r7, #24
 80030fc:	3b18      	subs	r3, #24
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6093      	str	r3, [r2, #8]
 8003102:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8003106:	f107 0318 	add.w	r3, r7, #24
 800310a:	3b18      	subs	r3, #24
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	60d3      	str	r3, [r2, #12]
 8003110:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8003114:	f107 0318 	add.w	r3, r7, #24
 8003118:	3b18      	subs	r3, #24
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6113      	str	r3, [r2, #16]
 800311e:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8003122:	f107 0318 	add.w	r3, r7, #24
 8003126:	3b18      	subs	r3, #24
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6153      	str	r3, [r2, #20]
 800312c:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8003130:	f107 0318 	add.w	r3, r7, #24
 8003134:	3b18      	subs	r3, #24
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	6193      	str	r3, [r2, #24]
 800313a:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 800313e:	f107 0318 	add.w	r3, r7, #24
 8003142:	3b18      	subs	r3, #24
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	61d3      	str	r3, [r2, #28]
 8003148:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 800314c:	f107 0318 	add.w	r3, r7, #24
 8003150:	3b18      	subs	r3, #24
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6213      	str	r3, [r2, #32]
 8003156:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800315a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800315e:	f102 0208 	add.w	r2, r2, #8
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	625a      	str	r2, [r3, #36]	; 0x24
 8003166:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800316a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800316e:	f102 0208 	add.w	r2, r2, #8
 8003172:	6812      	ldr	r2, [r2, #0]
 8003174:	629a      	str	r2, [r3, #40]	; 0x28
 8003176:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 800317a:	f107 0318 	add.w	r3, r7, #24
 800317e:	3b18      	subs	r3, #24
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003184:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8003188:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800318c:	f102 0208 	add.w	r2, r2, #8
 8003190:	6812      	ldr	r2, [r2, #0]
 8003192:	631a      	str	r2, [r3, #48]	; 0x30
 8003194:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8003198:	f107 0318 	add.w	r3, r7, #24
 800319c:	3b18      	subs	r3, #24
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6353      	str	r3, [r2, #52]	; 0x34
 80031a2:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80031a6:	f107 0318 	add.w	r3, r7, #24
 80031aa:	3b18      	subs	r3, #24
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6393      	str	r3, [r2, #56]	; 0x38
 80031b0:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80031b4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80031b8:	f102 0208 	add.w	r2, r2, #8
 80031bc:	6812      	ldr	r2, [r2, #0]
 80031be:	63da      	str	r2, [r3, #60]	; 0x3c
 80031c0:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80031c4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80031c8:	f102 0208 	add.w	r2, r2, #8
 80031cc:	6812      	ldr	r2, [r2, #0]
 80031ce:	641a      	str	r2, [r3, #64]	; 0x40
 80031d0:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80031d4:	f107 0318 	add.w	r3, r7, #24
 80031d8:	3b18      	subs	r3, #24
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6453      	str	r3, [r2, #68]	; 0x44
 80031de:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80031e2:	f107 0318 	add.w	r3, r7, #24
 80031e6:	3b18      	subs	r3, #24
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6493      	str	r3, [r2, #72]	; 0x48
 80031ec:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80031f0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80031f4:	f102 0208 	add.w	r2, r2, #8
 80031f8:	6812      	ldr	r2, [r2, #0]
 80031fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80031fc:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8003200:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003204:	f102 0208 	add.w	r2, r2, #8
 8003208:	6812      	ldr	r2, [r2, #0]
 800320a:	651a      	str	r2, [r3, #80]	; 0x50
 800320c:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8003210:	f107 0318 	add.w	r3, r7, #24
 8003214:	3b18      	subs	r3, #24
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6553      	str	r3, [r2, #84]	; 0x54
 800321a:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 800321e:	f107 0318 	add.w	r3, r7, #24
 8003222:	3b18      	subs	r3, #24
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6593      	str	r3, [r2, #88]	; 0x58
 8003228:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800322c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003230:	f102 0208 	add.w	r2, r2, #8
 8003234:	6812      	ldr	r2, [r2, #0]
 8003236:	65da      	str	r2, [r3, #92]	; 0x5c
 8003238:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800323c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003240:	f102 0208 	add.w	r2, r2, #8
 8003244:	6812      	ldr	r2, [r2, #0]
 8003246:	661a      	str	r2, [r3, #96]	; 0x60
 8003248:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 800324c:	f107 0318 	add.w	r3, r7, #24
 8003250:	3b18      	subs	r3, #24
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6653      	str	r3, [r2, #100]	; 0x64
 8003256:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 800325a:	f107 0318 	add.w	r3, r7, #24
 800325e:	3b18      	subs	r3, #24
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6693      	str	r3, [r2, #104]	; 0x68
 8003264:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8003268:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800326c:	f102 0208 	add.w	r2, r2, #8
 8003270:	6812      	ldr	r2, [r2, #0]
 8003272:	66da      	str	r2, [r3, #108]	; 0x6c
 8003274:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8003278:	f107 0318 	add.w	r3, r7, #24
 800327c:	3b18      	subs	r3, #24
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6713      	str	r3, [r2, #112]	; 0x70
 8003282:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8003286:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800328a:	f102 0208 	add.w	r2, r2, #8
 800328e:	6812      	ldr	r2, [r2, #0]
 8003290:	675a      	str	r2, [r3, #116]	; 0x74
 8003292:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8003296:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800329a:	f102 0208 	add.w	r2, r2, #8
 800329e:	6812      	ldr	r2, [r2, #0]
 80032a0:	679a      	str	r2, [r3, #120]	; 0x78
 80032a2:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80032a6:	f107 0318 	add.w	r3, r7, #24
 80032aa:	3b18      	subs	r3, #24
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	67d3      	str	r3, [r2, #124]	; 0x7c
 80032b0:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80032b4:	f107 0318 	add.w	r3, r7, #24
 80032b8:	3b18      	subs	r3, #24
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032c0:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80032c4:	f107 0318 	add.w	r3, r7, #24
 80032c8:	3b18      	subs	r3, #24
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80032d0:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80032d4:	f107 0318 	add.w	r3, r7, #24
 80032d8:	3b18      	subs	r3, #24
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80032e0:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80032e4:	f107 0318 	add.w	r3, r7, #24
 80032e8:	3b18      	subs	r3, #24
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80032f0:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80032f4:	f107 0318 	add.w	r3, r7, #24
 80032f8:	3b18      	subs	r3, #24
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003300:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8003304:	f107 0318 	add.w	r3, r7, #24
 8003308:	3b18      	subs	r3, #24
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003310:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8003314:	f107 0318 	add.w	r3, r7, #24
 8003318:	3b18      	subs	r3, #24
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8003320:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8003324:	f107 0318 	add.w	r3, r7, #24
 8003328:	3b18      	subs	r3, #24
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, textcolor,  //@..@
		backcolor, textcolor, textcolor, backcolor,  //.@@.
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_P[10][4] = {
 8003330:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003334:	f107 0318 	add.w	r3, r7, #24
 8003338:	3b18      	subs	r3, #24
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003342:	f107 0318 	add.w	r3, r7, #24
 8003346:	3b18      	subs	r3, #24
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6053      	str	r3, [r2, #4]
 800334c:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003350:	f107 0318 	add.w	r3, r7, #24
 8003354:	3b18      	subs	r3, #24
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6093      	str	r3, [r2, #8]
 800335a:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800335e:	f107 0318 	add.w	r3, r7, #24
 8003362:	3b18      	subs	r3, #24
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	60d3      	str	r3, [r2, #12]
 8003368:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800336c:	f107 0318 	add.w	r3, r7, #24
 8003370:	3b18      	subs	r3, #24
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6113      	str	r3, [r2, #16]
 8003376:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800337a:	f107 0318 	add.w	r3, r7, #24
 800337e:	3b18      	subs	r3, #24
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6153      	str	r3, [r2, #20]
 8003384:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003388:	f107 0318 	add.w	r3, r7, #24
 800338c:	3b18      	subs	r3, #24
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6193      	str	r3, [r2, #24]
 8003392:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003396:	f107 0318 	add.w	r3, r7, #24
 800339a:	3b18      	subs	r3, #24
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	61d3      	str	r3, [r2, #28]
 80033a0:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 80033a4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80033a8:	f102 0208 	add.w	r2, r2, #8
 80033ac:	6812      	ldr	r2, [r2, #0]
 80033ae:	621a      	str	r2, [r3, #32]
 80033b0:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 80033b4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80033b8:	f102 0208 	add.w	r2, r2, #8
 80033bc:	6812      	ldr	r2, [r2, #0]
 80033be:	625a      	str	r2, [r3, #36]	; 0x24
 80033c0:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 80033c4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80033c8:	f102 0208 	add.w	r2, r2, #8
 80033cc:	6812      	ldr	r2, [r2, #0]
 80033ce:	629a      	str	r2, [r3, #40]	; 0x28
 80033d0:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 80033d4:	f107 0318 	add.w	r3, r7, #24
 80033d8:	3b18      	subs	r3, #24
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80033de:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 80033e2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80033e6:	f102 0208 	add.w	r2, r2, #8
 80033ea:	6812      	ldr	r2, [r2, #0]
 80033ec:	631a      	str	r2, [r3, #48]	; 0x30
 80033ee:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 80033f2:	f107 0318 	add.w	r3, r7, #24
 80033f6:	3b18      	subs	r3, #24
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6353      	str	r3, [r2, #52]	; 0x34
 80033fc:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003400:	f107 0318 	add.w	r3, r7, #24
 8003404:	3b18      	subs	r3, #24
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6393      	str	r3, [r2, #56]	; 0x38
 800340a:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800340e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003412:	f102 0208 	add.w	r2, r2, #8
 8003416:	6812      	ldr	r2, [r2, #0]
 8003418:	63da      	str	r2, [r3, #60]	; 0x3c
 800341a:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800341e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003422:	f102 0208 	add.w	r2, r2, #8
 8003426:	6812      	ldr	r2, [r2, #0]
 8003428:	641a      	str	r2, [r3, #64]	; 0x40
 800342a:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800342e:	f107 0318 	add.w	r3, r7, #24
 8003432:	3b18      	subs	r3, #24
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	6453      	str	r3, [r2, #68]	; 0x44
 8003438:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800343c:	f107 0318 	add.w	r3, r7, #24
 8003440:	3b18      	subs	r3, #24
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6493      	str	r3, [r2, #72]	; 0x48
 8003446:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800344a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800344e:	f102 0208 	add.w	r2, r2, #8
 8003452:	6812      	ldr	r2, [r2, #0]
 8003454:	64da      	str	r2, [r3, #76]	; 0x4c
 8003456:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800345a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800345e:	f102 0208 	add.w	r2, r2, #8
 8003462:	6812      	ldr	r2, [r2, #0]
 8003464:	651a      	str	r2, [r3, #80]	; 0x50
 8003466:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800346a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800346e:	f102 0208 	add.w	r2, r2, #8
 8003472:	6812      	ldr	r2, [r2, #0]
 8003474:	655a      	str	r2, [r3, #84]	; 0x54
 8003476:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800347a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800347e:	f102 0208 	add.w	r2, r2, #8
 8003482:	6812      	ldr	r2, [r2, #0]
 8003484:	659a      	str	r2, [r3, #88]	; 0x58
 8003486:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800348a:	f107 0318 	add.w	r3, r7, #24
 800348e:	3b18      	subs	r3, #24
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003494:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8003498:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800349c:	f102 0208 	add.w	r2, r2, #8
 80034a0:	6812      	ldr	r2, [r2, #0]
 80034a2:	661a      	str	r2, [r3, #96]	; 0x60
 80034a4:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 80034a8:	f107 0318 	add.w	r3, r7, #24
 80034ac:	3b18      	subs	r3, #24
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6653      	str	r3, [r2, #100]	; 0x64
 80034b2:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 80034b6:	f107 0318 	add.w	r3, r7, #24
 80034ba:	3b18      	subs	r3, #24
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6693      	str	r3, [r2, #104]	; 0x68
 80034c0:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 80034c4:	f107 0318 	add.w	r3, r7, #24
 80034c8:	3b18      	subs	r3, #24
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	66d3      	str	r3, [r2, #108]	; 0x6c
 80034ce:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 80034d2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80034d6:	f102 0208 	add.w	r2, r2, #8
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	671a      	str	r2, [r3, #112]	; 0x70
 80034de:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 80034e2:	f107 0318 	add.w	r3, r7, #24
 80034e6:	3b18      	subs	r3, #24
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6753      	str	r3, [r2, #116]	; 0x74
 80034ec:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 80034f0:	f107 0318 	add.w	r3, r7, #24
 80034f4:	3b18      	subs	r3, #24
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6793      	str	r3, [r2, #120]	; 0x78
 80034fa:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 80034fe:	f107 0318 	add.w	r3, r7, #24
 8003502:	3b18      	subs	r3, #24
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	67d3      	str	r3, [r2, #124]	; 0x7c
 8003508:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800350c:	f107 0318 	add.w	r3, r7, #24
 8003510:	3b18      	subs	r3, #24
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003518:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800351c:	f107 0318 	add.w	r3, r7, #24
 8003520:	3b18      	subs	r3, #24
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8003528:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800352c:	f107 0318 	add.w	r3, r7, #24
 8003530:	3b18      	subs	r3, #24
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003538:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800353c:	f107 0318 	add.w	r3, r7, #24
 8003540:	3b18      	subs	r3, #24
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003548:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800354c:	f107 0318 	add.w	r3, r7, #24
 8003550:	3b18      	subs	r3, #24
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003558:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800355c:	f107 0318 	add.w	r3, r7, #24
 8003560:	3b18      	subs	r3, #24
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003568:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800356c:	f107 0318 	add.w	r3, r7, #24
 8003570:	3b18      	subs	r3, #24
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8003578:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800357c:	f107 0318 	add.w	r3, r7, #24
 8003580:	3b18      	subs	r3, #24
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, backcolor,  //@...
		textcolor, backcolor, backcolor, backcolor,  //@...
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_Q[10][4] = {
 8003588:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 800358c:	f107 0318 	add.w	r3, r7, #24
 8003590:	3b18      	subs	r3, #24
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 800359a:	f107 0318 	add.w	r3, r7, #24
 800359e:	3b18      	subs	r3, #24
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6053      	str	r3, [r2, #4]
 80035a4:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80035a8:	f107 0318 	add.w	r3, r7, #24
 80035ac:	3b18      	subs	r3, #24
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	6093      	str	r3, [r2, #8]
 80035b2:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80035b6:	f107 0318 	add.w	r3, r7, #24
 80035ba:	3b18      	subs	r3, #24
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	60d3      	str	r3, [r2, #12]
 80035c0:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80035c4:	f107 0318 	add.w	r3, r7, #24
 80035c8:	3b18      	subs	r3, #24
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6113      	str	r3, [r2, #16]
 80035ce:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80035d2:	f107 0318 	add.w	r3, r7, #24
 80035d6:	3b18      	subs	r3, #24
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	6153      	str	r3, [r2, #20]
 80035dc:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80035e0:	f107 0318 	add.w	r3, r7, #24
 80035e4:	3b18      	subs	r3, #24
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6193      	str	r3, [r2, #24]
 80035ea:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80035ee:	f107 0318 	add.w	r3, r7, #24
 80035f2:	3b18      	subs	r3, #24
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	61d3      	str	r3, [r2, #28]
 80035f8:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80035fc:	f107 0318 	add.w	r3, r7, #24
 8003600:	3b18      	subs	r3, #24
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6213      	str	r3, [r2, #32]
 8003606:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800360a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800360e:	f102 0208 	add.w	r2, r2, #8
 8003612:	6812      	ldr	r2, [r2, #0]
 8003614:	625a      	str	r2, [r3, #36]	; 0x24
 8003616:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800361a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800361e:	f102 0208 	add.w	r2, r2, #8
 8003622:	6812      	ldr	r2, [r2, #0]
 8003624:	629a      	str	r2, [r3, #40]	; 0x28
 8003626:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 800362a:	f107 0318 	add.w	r3, r7, #24
 800362e:	3b18      	subs	r3, #24
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003634:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8003638:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800363c:	f102 0208 	add.w	r2, r2, #8
 8003640:	6812      	ldr	r2, [r2, #0]
 8003642:	631a      	str	r2, [r3, #48]	; 0x30
 8003644:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003648:	f107 0318 	add.w	r3, r7, #24
 800364c:	3b18      	subs	r3, #24
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6353      	str	r3, [r2, #52]	; 0x34
 8003652:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003656:	f107 0318 	add.w	r3, r7, #24
 800365a:	3b18      	subs	r3, #24
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6393      	str	r3, [r2, #56]	; 0x38
 8003660:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8003664:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003668:	f102 0208 	add.w	r2, r2, #8
 800366c:	6812      	ldr	r2, [r2, #0]
 800366e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003670:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8003674:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003678:	f102 0208 	add.w	r2, r2, #8
 800367c:	6812      	ldr	r2, [r2, #0]
 800367e:	641a      	str	r2, [r3, #64]	; 0x40
 8003680:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003684:	f107 0318 	add.w	r3, r7, #24
 8003688:	3b18      	subs	r3, #24
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6453      	str	r3, [r2, #68]	; 0x44
 800368e:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003692:	f107 0318 	add.w	r3, r7, #24
 8003696:	3b18      	subs	r3, #24
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6493      	str	r3, [r2, #72]	; 0x48
 800369c:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80036a0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80036a4:	f102 0208 	add.w	r2, r2, #8
 80036a8:	6812      	ldr	r2, [r2, #0]
 80036aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80036ac:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80036b0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80036b4:	f102 0208 	add.w	r2, r2, #8
 80036b8:	6812      	ldr	r2, [r2, #0]
 80036ba:	651a      	str	r2, [r3, #80]	; 0x50
 80036bc:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80036c0:	f107 0318 	add.w	r3, r7, #24
 80036c4:	3b18      	subs	r3, #24
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6553      	str	r3, [r2, #84]	; 0x54
 80036ca:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80036ce:	f107 0318 	add.w	r3, r7, #24
 80036d2:	3b18      	subs	r3, #24
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	6593      	str	r3, [r2, #88]	; 0x58
 80036d8:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80036dc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80036e0:	f102 0208 	add.w	r2, r2, #8
 80036e4:	6812      	ldr	r2, [r2, #0]
 80036e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80036e8:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80036ec:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80036f0:	f102 0208 	add.w	r2, r2, #8
 80036f4:	6812      	ldr	r2, [r2, #0]
 80036f6:	661a      	str	r2, [r3, #96]	; 0x60
 80036f8:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80036fc:	f107 0318 	add.w	r3, r7, #24
 8003700:	3b18      	subs	r3, #24
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6653      	str	r3, [r2, #100]	; 0x64
 8003706:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 800370a:	f107 0318 	add.w	r3, r7, #24
 800370e:	3b18      	subs	r3, #24
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6693      	str	r3, [r2, #104]	; 0x68
 8003714:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8003718:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800371c:	f102 0208 	add.w	r2, r2, #8
 8003720:	6812      	ldr	r2, [r2, #0]
 8003722:	66da      	str	r2, [r3, #108]	; 0x6c
 8003724:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003728:	f107 0318 	add.w	r3, r7, #24
 800372c:	3b18      	subs	r3, #24
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6713      	str	r3, [r2, #112]	; 0x70
 8003732:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8003736:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800373a:	f102 0208 	add.w	r2, r2, #8
 800373e:	6812      	ldr	r2, [r2, #0]
 8003740:	675a      	str	r2, [r3, #116]	; 0x74
 8003742:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8003746:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800374a:	f102 0208 	add.w	r2, r2, #8
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	679a      	str	r2, [r3, #120]	; 0x78
 8003752:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003756:	f107 0318 	add.w	r3, r7, #24
 800375a:	3b18      	subs	r3, #24
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	67d3      	str	r3, [r2, #124]	; 0x7c
 8003760:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003764:	f107 0318 	add.w	r3, r7, #24
 8003768:	3b18      	subs	r3, #24
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003770:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003774:	f107 0318 	add.w	r3, r7, #24
 8003778:	3b18      	subs	r3, #24
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8003780:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8003784:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003788:	f102 0208 	add.w	r2, r2, #8
 800378c:	6812      	ldr	r2, [r2, #0]
 800378e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8003792:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003796:	f107 0318 	add.w	r3, r7, #24
 800379a:	3b18      	subs	r3, #24
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80037a2:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80037a6:	f107 0318 	add.w	r3, r7, #24
 80037aa:	3b18      	subs	r3, #24
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037b2:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80037b6:	f107 0318 	add.w	r3, r7, #24
 80037ba:	3b18      	subs	r3, #24
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80037c2:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80037c6:	f107 0318 	add.w	r3, r7, #24
 80037ca:	3b18      	subs	r3, #24
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 80037d2:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80037d6:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80037da:	f102 0208 	add.w	r2, r2, #8
 80037de:	6812      	ldr	r2, [r2, #0]
 80037e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		textcolor, backcolor, backcolor, textcolor,  //@..@
		backcolor, textcolor, textcolor, backcolor,  //.@@.
		backcolor, backcolor, textcolor, backcolor,  //..@.
		backcolor, backcolor, backcolor, textcolor,  //...@
	};
	int letter_R[10][4] = {
 80037e4:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80037e8:	f107 0318 	add.w	r3, r7, #24
 80037ec:	3b18      	subs	r3, #24
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6013      	str	r3, [r2, #0]
 80037f2:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80037f6:	f107 0318 	add.w	r3, r7, #24
 80037fa:	3b18      	subs	r3, #24
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6053      	str	r3, [r2, #4]
 8003800:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8003804:	f107 0318 	add.w	r3, r7, #24
 8003808:	3b18      	subs	r3, #24
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6093      	str	r3, [r2, #8]
 800380e:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8003812:	f107 0318 	add.w	r3, r7, #24
 8003816:	3b18      	subs	r3, #24
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	60d3      	str	r3, [r2, #12]
 800381c:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8003820:	f107 0318 	add.w	r3, r7, #24
 8003824:	3b18      	subs	r3, #24
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6113      	str	r3, [r2, #16]
 800382a:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800382e:	f107 0318 	add.w	r3, r7, #24
 8003832:	3b18      	subs	r3, #24
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6153      	str	r3, [r2, #20]
 8003838:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800383c:	f107 0318 	add.w	r3, r7, #24
 8003840:	3b18      	subs	r3, #24
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6193      	str	r3, [r2, #24]
 8003846:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800384a:	f107 0318 	add.w	r3, r7, #24
 800384e:	3b18      	subs	r3, #24
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	61d3      	str	r3, [r2, #28]
 8003854:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8003858:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800385c:	f102 0208 	add.w	r2, r2, #8
 8003860:	6812      	ldr	r2, [r2, #0]
 8003862:	621a      	str	r2, [r3, #32]
 8003864:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8003868:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800386c:	f102 0208 	add.w	r2, r2, #8
 8003870:	6812      	ldr	r2, [r2, #0]
 8003872:	625a      	str	r2, [r3, #36]	; 0x24
 8003874:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8003878:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800387c:	f102 0208 	add.w	r2, r2, #8
 8003880:	6812      	ldr	r2, [r2, #0]
 8003882:	629a      	str	r2, [r3, #40]	; 0x28
 8003884:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8003888:	f107 0318 	add.w	r3, r7, #24
 800388c:	3b18      	subs	r3, #24
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003892:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8003896:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800389a:	f102 0208 	add.w	r2, r2, #8
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	631a      	str	r2, [r3, #48]	; 0x30
 80038a2:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80038a6:	f107 0318 	add.w	r3, r7, #24
 80038aa:	3b18      	subs	r3, #24
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6353      	str	r3, [r2, #52]	; 0x34
 80038b0:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80038b4:	f107 0318 	add.w	r3, r7, #24
 80038b8:	3b18      	subs	r3, #24
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6393      	str	r3, [r2, #56]	; 0x38
 80038be:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80038c2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80038c6:	f102 0208 	add.w	r2, r2, #8
 80038ca:	6812      	ldr	r2, [r2, #0]
 80038cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80038ce:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80038d2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80038d6:	f102 0208 	add.w	r2, r2, #8
 80038da:	6812      	ldr	r2, [r2, #0]
 80038dc:	641a      	str	r2, [r3, #64]	; 0x40
 80038de:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80038e2:	f107 0318 	add.w	r3, r7, #24
 80038e6:	3b18      	subs	r3, #24
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6453      	str	r3, [r2, #68]	; 0x44
 80038ec:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80038f0:	f107 0318 	add.w	r3, r7, #24
 80038f4:	3b18      	subs	r3, #24
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6493      	str	r3, [r2, #72]	; 0x48
 80038fa:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80038fe:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003902:	f102 0208 	add.w	r2, r2, #8
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	64da      	str	r2, [r3, #76]	; 0x4c
 800390a:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800390e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003912:	f102 0208 	add.w	r2, r2, #8
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	651a      	str	r2, [r3, #80]	; 0x50
 800391a:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800391e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003922:	f102 0208 	add.w	r2, r2, #8
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	655a      	str	r2, [r3, #84]	; 0x54
 800392a:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800392e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003932:	f102 0208 	add.w	r2, r2, #8
 8003936:	6812      	ldr	r2, [r2, #0]
 8003938:	659a      	str	r2, [r3, #88]	; 0x58
 800393a:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800393e:	f107 0318 	add.w	r3, r7, #24
 8003942:	3b18      	subs	r3, #24
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003948:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800394c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003950:	f102 0208 	add.w	r2, r2, #8
 8003954:	6812      	ldr	r2, [r2, #0]
 8003956:	661a      	str	r2, [r3, #96]	; 0x60
 8003958:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800395c:	f107 0318 	add.w	r3, r7, #24
 8003960:	3b18      	subs	r3, #24
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6653      	str	r3, [r2, #100]	; 0x64
 8003966:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800396a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800396e:	f102 0208 	add.w	r2, r2, #8
 8003972:	6812      	ldr	r2, [r2, #0]
 8003974:	669a      	str	r2, [r3, #104]	; 0x68
 8003976:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800397a:	f107 0318 	add.w	r3, r7, #24
 800397e:	3b18      	subs	r3, #24
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	66d3      	str	r3, [r2, #108]	; 0x6c
 8003984:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8003988:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800398c:	f102 0208 	add.w	r2, r2, #8
 8003990:	6812      	ldr	r2, [r2, #0]
 8003992:	671a      	str	r2, [r3, #112]	; 0x70
 8003994:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8003998:	f107 0318 	add.w	r3, r7, #24
 800399c:	3b18      	subs	r3, #24
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	6753      	str	r3, [r2, #116]	; 0x74
 80039a2:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80039a6:	f107 0318 	add.w	r3, r7, #24
 80039aa:	3b18      	subs	r3, #24
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	6793      	str	r3, [r2, #120]	; 0x78
 80039b0:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80039b4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80039b8:	f102 0208 	add.w	r2, r2, #8
 80039bc:	6812      	ldr	r2, [r2, #0]
 80039be:	67da      	str	r2, [r3, #124]	; 0x7c
 80039c0:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80039c4:	f107 0318 	add.w	r3, r7, #24
 80039c8:	3b18      	subs	r3, #24
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80039d0:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80039d4:	f107 0318 	add.w	r3, r7, #24
 80039d8:	3b18      	subs	r3, #24
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80039e0:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80039e4:	f107 0318 	add.w	r3, r7, #24
 80039e8:	3b18      	subs	r3, #24
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80039f0:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80039f4:	f107 0318 	add.w	r3, r7, #24
 80039f8:	3b18      	subs	r3, #24
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a00:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8003a04:	f107 0318 	add.w	r3, r7, #24
 8003a08:	3b18      	subs	r3, #24
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a10:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8003a14:	f107 0318 	add.w	r3, r7, #24
 8003a18:	3b18      	subs	r3, #24
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003a20:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8003a24:	f107 0318 	add.w	r3, r7, #24
 8003a28:	3b18      	subs	r3, #24
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8003a30:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8003a34:	f107 0318 	add.w	r3, r7, #24
 8003a38:	3b18      	subs	r3, #24
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, textcolor, backcolor,  //@.@.
		textcolor, backcolor, backcolor, textcolor,  //@..@
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_S[10][4] = {
 8003a40:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003a44:	f107 0318 	add.w	r3, r7, #24
 8003a48:	3b18      	subs	r3, #24
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003a52:	f107 0318 	add.w	r3, r7, #24
 8003a56:	3b18      	subs	r3, #24
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6053      	str	r3, [r2, #4]
 8003a5c:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003a60:	f107 0318 	add.w	r3, r7, #24
 8003a64:	3b18      	subs	r3, #24
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6093      	str	r3, [r2, #8]
 8003a6a:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003a6e:	f107 0318 	add.w	r3, r7, #24
 8003a72:	3b18      	subs	r3, #24
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	60d3      	str	r3, [r2, #12]
 8003a78:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003a7c:	f107 0318 	add.w	r3, r7, #24
 8003a80:	3b18      	subs	r3, #24
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6113      	str	r3, [r2, #16]
 8003a86:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003a8a:	f107 0318 	add.w	r3, r7, #24
 8003a8e:	3b18      	subs	r3, #24
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6153      	str	r3, [r2, #20]
 8003a94:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003a98:	f107 0318 	add.w	r3, r7, #24
 8003a9c:	3b18      	subs	r3, #24
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6193      	str	r3, [r2, #24]
 8003aa2:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003aa6:	f107 0318 	add.w	r3, r7, #24
 8003aaa:	3b18      	subs	r3, #24
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	61d3      	str	r3, [r2, #28]
 8003ab0:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003ab4:	f107 0318 	add.w	r3, r7, #24
 8003ab8:	3b18      	subs	r3, #24
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	6213      	str	r3, [r2, #32]
 8003abe:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003ac2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003ac6:	f102 0208 	add.w	r2, r2, #8
 8003aca:	6812      	ldr	r2, [r2, #0]
 8003acc:	625a      	str	r2, [r3, #36]	; 0x24
 8003ace:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003ad2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003ad6:	f102 0208 	add.w	r2, r2, #8
 8003ada:	6812      	ldr	r2, [r2, #0]
 8003adc:	629a      	str	r2, [r3, #40]	; 0x28
 8003ade:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003ae2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003ae6:	f102 0208 	add.w	r2, r2, #8
 8003aea:	6812      	ldr	r2, [r2, #0]
 8003aec:	62da      	str	r2, [r3, #44]	; 0x2c
 8003aee:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003af2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003af6:	f102 0208 	add.w	r2, r2, #8
 8003afa:	6812      	ldr	r2, [r2, #0]
 8003afc:	631a      	str	r2, [r3, #48]	; 0x30
 8003afe:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003b02:	f107 0318 	add.w	r3, r7, #24
 8003b06:	3b18      	subs	r3, #24
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6353      	str	r3, [r2, #52]	; 0x34
 8003b0c:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003b10:	f107 0318 	add.w	r3, r7, #24
 8003b14:	3b18      	subs	r3, #24
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6393      	str	r3, [r2, #56]	; 0x38
 8003b1a:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003b1e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003b22:	f102 0208 	add.w	r2, r2, #8
 8003b26:	6812      	ldr	r2, [r2, #0]
 8003b28:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b2a:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003b2e:	f107 0318 	add.w	r3, r7, #24
 8003b32:	3b18      	subs	r3, #24
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6413      	str	r3, [r2, #64]	; 0x40
 8003b38:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003b3c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003b40:	f102 0208 	add.w	r2, r2, #8
 8003b44:	6812      	ldr	r2, [r2, #0]
 8003b46:	645a      	str	r2, [r3, #68]	; 0x44
 8003b48:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003b4c:	f107 0318 	add.w	r3, r7, #24
 8003b50:	3b18      	subs	r3, #24
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6493      	str	r3, [r2, #72]	; 0x48
 8003b56:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003b5a:	f107 0318 	add.w	r3, r7, #24
 8003b5e:	3b18      	subs	r3, #24
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b64:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003b68:	f107 0318 	add.w	r3, r7, #24
 8003b6c:	3b18      	subs	r3, #24
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	6513      	str	r3, [r2, #80]	; 0x50
 8003b72:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003b76:	f107 0318 	add.w	r3, r7, #24
 8003b7a:	3b18      	subs	r3, #24
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6553      	str	r3, [r2, #84]	; 0x54
 8003b80:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003b84:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003b88:	f102 0208 	add.w	r2, r2, #8
 8003b8c:	6812      	ldr	r2, [r2, #0]
 8003b8e:	659a      	str	r2, [r3, #88]	; 0x58
 8003b90:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003b94:	f107 0318 	add.w	r3, r7, #24
 8003b98:	3b18      	subs	r3, #24
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003b9e:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003ba2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003ba6:	f102 0208 	add.w	r2, r2, #8
 8003baa:	6812      	ldr	r2, [r2, #0]
 8003bac:	661a      	str	r2, [r3, #96]	; 0x60
 8003bae:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003bb2:	f107 0318 	add.w	r3, r7, #24
 8003bb6:	3b18      	subs	r3, #24
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6653      	str	r3, [r2, #100]	; 0x64
 8003bbc:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003bc0:	f107 0318 	add.w	r3, r7, #24
 8003bc4:	3b18      	subs	r3, #24
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6693      	str	r3, [r2, #104]	; 0x68
 8003bca:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003bce:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003bd2:	f102 0208 	add.w	r2, r2, #8
 8003bd6:	6812      	ldr	r2, [r2, #0]
 8003bd8:	66da      	str	r2, [r3, #108]	; 0x6c
 8003bda:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003bde:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003be2:	f102 0208 	add.w	r2, r2, #8
 8003be6:	6812      	ldr	r2, [r2, #0]
 8003be8:	671a      	str	r2, [r3, #112]	; 0x70
 8003bea:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003bee:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003bf2:	f102 0208 	add.w	r2, r2, #8
 8003bf6:	6812      	ldr	r2, [r2, #0]
 8003bf8:	675a      	str	r2, [r3, #116]	; 0x74
 8003bfa:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003bfe:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003c02:	f102 0208 	add.w	r2, r2, #8
 8003c06:	6812      	ldr	r2, [r2, #0]
 8003c08:	679a      	str	r2, [r3, #120]	; 0x78
 8003c0a:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003c0e:	f107 0318 	add.w	r3, r7, #24
 8003c12:	3b18      	subs	r3, #24
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	67d3      	str	r3, [r2, #124]	; 0x7c
 8003c18:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003c1c:	f107 0318 	add.w	r3, r7, #24
 8003c20:	3b18      	subs	r3, #24
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c28:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003c2c:	f107 0318 	add.w	r3, r7, #24
 8003c30:	3b18      	subs	r3, #24
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8003c38:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003c3c:	f107 0318 	add.w	r3, r7, #24
 8003c40:	3b18      	subs	r3, #24
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003c48:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003c4c:	f107 0318 	add.w	r3, r7, #24
 8003c50:	3b18      	subs	r3, #24
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003c58:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003c5c:	f107 0318 	add.w	r3, r7, #24
 8003c60:	3b18      	subs	r3, #24
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c68:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003c6c:	f107 0318 	add.w	r3, r7, #24
 8003c70:	3b18      	subs	r3, #24
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003c78:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003c7c:	f107 0318 	add.w	r3, r7, #24
 8003c80:	3b18      	subs	r3, #24
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8003c88:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003c8c:	f107 0318 	add.w	r3, r7, #24
 8003c90:	3b18      	subs	r3, #24
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, textcolor,  //@..@
		textcolor, textcolor, textcolor, backcolor,  //@@@.
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_T[10][5] = {
 8003c98:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003c9c:	f107 0318 	add.w	r3, r7, #24
 8003ca0:	3b18      	subs	r3, #24
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003caa:	f107 0318 	add.w	r3, r7, #24
 8003cae:	3b18      	subs	r3, #24
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	6053      	str	r3, [r2, #4]
 8003cb4:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003cb8:	f107 0318 	add.w	r3, r7, #24
 8003cbc:	3b18      	subs	r3, #24
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	6093      	str	r3, [r2, #8]
 8003cc2:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003cc6:	f107 0318 	add.w	r3, r7, #24
 8003cca:	3b18      	subs	r3, #24
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	60d3      	str	r3, [r2, #12]
 8003cd0:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003cd4:	f107 0318 	add.w	r3, r7, #24
 8003cd8:	3b18      	subs	r3, #24
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	6113      	str	r3, [r2, #16]
 8003cde:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003ce2:	f107 0318 	add.w	r3, r7, #24
 8003ce6:	3b18      	subs	r3, #24
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6153      	str	r3, [r2, #20]
 8003cec:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003cf0:	f107 0318 	add.w	r3, r7, #24
 8003cf4:	3b18      	subs	r3, #24
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6193      	str	r3, [r2, #24]
 8003cfa:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003cfe:	f107 0318 	add.w	r3, r7, #24
 8003d02:	3b18      	subs	r3, #24
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	61d3      	str	r3, [r2, #28]
 8003d08:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003d0c:	f107 0318 	add.w	r3, r7, #24
 8003d10:	3b18      	subs	r3, #24
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	6213      	str	r3, [r2, #32]
 8003d16:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003d1a:	f107 0318 	add.w	r3, r7, #24
 8003d1e:	3b18      	subs	r3, #24
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6253      	str	r3, [r2, #36]	; 0x24
 8003d24:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003d28:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003d2c:	f102 0208 	add.w	r2, r2, #8
 8003d30:	6812      	ldr	r2, [r2, #0]
 8003d32:	629a      	str	r2, [r3, #40]	; 0x28
 8003d34:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003d38:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003d3c:	f102 0208 	add.w	r2, r2, #8
 8003d40:	6812      	ldr	r2, [r2, #0]
 8003d42:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d44:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003d48:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003d4c:	f102 0208 	add.w	r2, r2, #8
 8003d50:	6812      	ldr	r2, [r2, #0]
 8003d52:	631a      	str	r2, [r3, #48]	; 0x30
 8003d54:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003d58:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003d5c:	f102 0208 	add.w	r2, r2, #8
 8003d60:	6812      	ldr	r2, [r2, #0]
 8003d62:	635a      	str	r2, [r3, #52]	; 0x34
 8003d64:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003d68:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003d6c:	f102 0208 	add.w	r2, r2, #8
 8003d70:	6812      	ldr	r2, [r2, #0]
 8003d72:	639a      	str	r2, [r3, #56]	; 0x38
 8003d74:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003d78:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003d7c:	f102 0208 	add.w	r2, r2, #8
 8003d80:	6812      	ldr	r2, [r2, #0]
 8003d82:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d84:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003d88:	f107 0318 	add.w	r3, r7, #24
 8003d8c:	3b18      	subs	r3, #24
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6413      	str	r3, [r2, #64]	; 0x40
 8003d92:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003d96:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003d9a:	f102 0208 	add.w	r2, r2, #8
 8003d9e:	6812      	ldr	r2, [r2, #0]
 8003da0:	645a      	str	r2, [r3, #68]	; 0x44
 8003da2:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003da6:	f107 0318 	add.w	r3, r7, #24
 8003daa:	3b18      	subs	r3, #24
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6493      	str	r3, [r2, #72]	; 0x48
 8003db0:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003db4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003db8:	f102 0208 	add.w	r2, r2, #8
 8003dbc:	6812      	ldr	r2, [r2, #0]
 8003dbe:	64da      	str	r2, [r3, #76]	; 0x4c
 8003dc0:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003dc4:	f107 0318 	add.w	r3, r7, #24
 8003dc8:	3b18      	subs	r3, #24
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6513      	str	r3, [r2, #80]	; 0x50
 8003dce:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003dd2:	f107 0318 	add.w	r3, r7, #24
 8003dd6:	3b18      	subs	r3, #24
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6553      	str	r3, [r2, #84]	; 0x54
 8003ddc:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003de0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003de4:	f102 0208 	add.w	r2, r2, #8
 8003de8:	6812      	ldr	r2, [r2, #0]
 8003dea:	659a      	str	r2, [r3, #88]	; 0x58
 8003dec:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003df0:	f107 0318 	add.w	r3, r7, #24
 8003df4:	3b18      	subs	r3, #24
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003dfa:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003dfe:	f107 0318 	add.w	r3, r7, #24
 8003e02:	3b18      	subs	r3, #24
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	6613      	str	r3, [r2, #96]	; 0x60
 8003e08:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003e0c:	f107 0318 	add.w	r3, r7, #24
 8003e10:	3b18      	subs	r3, #24
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6653      	str	r3, [r2, #100]	; 0x64
 8003e16:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003e1a:	f107 0318 	add.w	r3, r7, #24
 8003e1e:	3b18      	subs	r3, #24
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6693      	str	r3, [r2, #104]	; 0x68
 8003e24:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003e28:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003e2c:	f102 0208 	add.w	r2, r2, #8
 8003e30:	6812      	ldr	r2, [r2, #0]
 8003e32:	66da      	str	r2, [r3, #108]	; 0x6c
 8003e34:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003e38:	f107 0318 	add.w	r3, r7, #24
 8003e3c:	3b18      	subs	r3, #24
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6713      	str	r3, [r2, #112]	; 0x70
 8003e42:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003e46:	f107 0318 	add.w	r3, r7, #24
 8003e4a:	3b18      	subs	r3, #24
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6753      	str	r3, [r2, #116]	; 0x74
 8003e50:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003e54:	f107 0318 	add.w	r3, r7, #24
 8003e58:	3b18      	subs	r3, #24
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	6793      	str	r3, [r2, #120]	; 0x78
 8003e5e:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003e62:	f107 0318 	add.w	r3, r7, #24
 8003e66:	3b18      	subs	r3, #24
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	67d3      	str	r3, [r2, #124]	; 0x7c
 8003e6c:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003e70:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003e74:	f102 0208 	add.w	r2, r2, #8
 8003e78:	6812      	ldr	r2, [r2, #0]
 8003e7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003e7e:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003e82:	f107 0318 	add.w	r3, r7, #24
 8003e86:	3b18      	subs	r3, #24
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8003e8e:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003e92:	f107 0318 	add.w	r3, r7, #24
 8003e96:	3b18      	subs	r3, #24
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003e9e:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003ea2:	f107 0318 	add.w	r3, r7, #24
 8003ea6:	3b18      	subs	r3, #24
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003eae:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003eb2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003eb6:	f102 0208 	add.w	r2, r2, #8
 8003eba:	6812      	ldr	r2, [r2, #0]
 8003ebc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003ec0:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003ec4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003ec8:	f102 0208 	add.w	r2, r2, #8
 8003ecc:	6812      	ldr	r2, [r2, #0]
 8003ece:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8003ed2:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003ed6:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8003eda:	f102 0208 	add.w	r2, r2, #8
 8003ede:	6812      	ldr	r2, [r2, #0]
 8003ee0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003ee4:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003ee8:	f107 0318 	add.w	r3, r7, #24
 8003eec:	3b18      	subs	r3, #24
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003ef4:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003ef8:	f107 0318 	add.w	r3, r7, #24
 8003efc:	3b18      	subs	r3, #24
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8003f04:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003f08:	f107 0318 	add.w	r3, r7, #24
 8003f0c:	3b18      	subs	r3, #24
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8003f14:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003f18:	f107 0318 	add.w	r3, r7, #24
 8003f1c:	3b18      	subs	r3, #24
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8003f24:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003f28:	f107 0318 	add.w	r3, r7, #24
 8003f2c:	3b18      	subs	r3, #24
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 8003f34:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003f38:	f107 0318 	add.w	r3, r7, #24
 8003f3c:	3b18      	subs	r3, #24
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
 8003f44:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003f48:	f107 0318 	add.w	r3, r7, #24
 8003f4c:	3b18      	subs	r3, #24
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
 8003f54:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003f58:	f107 0318 	add.w	r3, r7, #24
 8003f5c:	3b18      	subs	r3, #24
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
 8003f64:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003f68:	f107 0318 	add.w	r3, r7, #24
 8003f6c:	3b18      	subs	r3, #24
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
 8003f74:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003f78:	f107 0318 	add.w	r3, r7, #24
 8003f7c:	3b18      	subs	r3, #24
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003f84:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003f88:	f107 0318 	add.w	r3, r7, #24
 8003f8c:	3b18      	subs	r3, #24
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		backcolor, backcolor, textcolor, backcolor, backcolor,  //..@..
		backcolor, textcolor, textcolor, textcolor, backcolor,  //.@@@.
		backcolor, backcolor, backcolor, backcolor, backcolor,  //.....
		backcolor, backcolor, backcolor, backcolor, backcolor,  //.....
	};
	int letter_U[10][4] = {
 8003f94:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003f98:	f107 0318 	add.w	r3, r7, #24
 8003f9c:	3b18      	subs	r3, #24
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003fa6:	f107 0318 	add.w	r3, r7, #24
 8003faa:	3b18      	subs	r3, #24
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6053      	str	r3, [r2, #4]
 8003fb0:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003fb4:	f107 0318 	add.w	r3, r7, #24
 8003fb8:	3b18      	subs	r3, #24
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6093      	str	r3, [r2, #8]
 8003fbe:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003fc2:	f107 0318 	add.w	r3, r7, #24
 8003fc6:	3b18      	subs	r3, #24
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	60d3      	str	r3, [r2, #12]
 8003fcc:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003fd0:	f107 0318 	add.w	r3, r7, #24
 8003fd4:	3b18      	subs	r3, #24
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6113      	str	r3, [r2, #16]
 8003fda:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003fde:	f107 0318 	add.w	r3, r7, #24
 8003fe2:	3b18      	subs	r3, #24
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6153      	str	r3, [r2, #20]
 8003fe8:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003fec:	f107 0318 	add.w	r3, r7, #24
 8003ff0:	3b18      	subs	r3, #24
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	6193      	str	r3, [r2, #24]
 8003ff6:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003ffa:	f107 0318 	add.w	r3, r7, #24
 8003ffe:	3b18      	subs	r3, #24
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	61d3      	str	r3, [r2, #28]
 8004004:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8004008:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800400c:	f102 0208 	add.w	r2, r2, #8
 8004010:	6812      	ldr	r2, [r2, #0]
 8004012:	621a      	str	r2, [r3, #32]
 8004014:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8004018:	f107 0318 	add.w	r3, r7, #24
 800401c:	3b18      	subs	r3, #24
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6253      	str	r3, [r2, #36]	; 0x24
 8004022:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8004026:	f107 0318 	add.w	r3, r7, #24
 800402a:	3b18      	subs	r3, #24
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6293      	str	r3, [r2, #40]	; 0x28
 8004030:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8004034:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004038:	f102 0208 	add.w	r2, r2, #8
 800403c:	6812      	ldr	r2, [r2, #0]
 800403e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004040:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8004044:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004048:	f102 0208 	add.w	r2, r2, #8
 800404c:	6812      	ldr	r2, [r2, #0]
 800404e:	631a      	str	r2, [r3, #48]	; 0x30
 8004050:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8004054:	f107 0318 	add.w	r3, r7, #24
 8004058:	3b18      	subs	r3, #24
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6353      	str	r3, [r2, #52]	; 0x34
 800405e:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8004062:	f107 0318 	add.w	r3, r7, #24
 8004066:	3b18      	subs	r3, #24
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6393      	str	r3, [r2, #56]	; 0x38
 800406c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8004070:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004074:	f102 0208 	add.w	r2, r2, #8
 8004078:	6812      	ldr	r2, [r2, #0]
 800407a:	63da      	str	r2, [r3, #60]	; 0x3c
 800407c:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8004080:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004084:	f102 0208 	add.w	r2, r2, #8
 8004088:	6812      	ldr	r2, [r2, #0]
 800408a:	641a      	str	r2, [r3, #64]	; 0x40
 800408c:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8004090:	f107 0318 	add.w	r3, r7, #24
 8004094:	3b18      	subs	r3, #24
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6453      	str	r3, [r2, #68]	; 0x44
 800409a:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 800409e:	f107 0318 	add.w	r3, r7, #24
 80040a2:	3b18      	subs	r3, #24
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6493      	str	r3, [r2, #72]	; 0x48
 80040a8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80040ac:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80040b0:	f102 0208 	add.w	r2, r2, #8
 80040b4:	6812      	ldr	r2, [r2, #0]
 80040b6:	64da      	str	r2, [r3, #76]	; 0x4c
 80040b8:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80040bc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80040c0:	f102 0208 	add.w	r2, r2, #8
 80040c4:	6812      	ldr	r2, [r2, #0]
 80040c6:	651a      	str	r2, [r3, #80]	; 0x50
 80040c8:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80040cc:	f107 0318 	add.w	r3, r7, #24
 80040d0:	3b18      	subs	r3, #24
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6553      	str	r3, [r2, #84]	; 0x54
 80040d6:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80040da:	f107 0318 	add.w	r3, r7, #24
 80040de:	3b18      	subs	r3, #24
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6593      	str	r3, [r2, #88]	; 0x58
 80040e4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80040e8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80040ec:	f102 0208 	add.w	r2, r2, #8
 80040f0:	6812      	ldr	r2, [r2, #0]
 80040f2:	65da      	str	r2, [r3, #92]	; 0x5c
 80040f4:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80040f8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80040fc:	f102 0208 	add.w	r2, r2, #8
 8004100:	6812      	ldr	r2, [r2, #0]
 8004102:	661a      	str	r2, [r3, #96]	; 0x60
 8004104:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8004108:	f107 0318 	add.w	r3, r7, #24
 800410c:	3b18      	subs	r3, #24
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6653      	str	r3, [r2, #100]	; 0x64
 8004112:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8004116:	f107 0318 	add.w	r3, r7, #24
 800411a:	3b18      	subs	r3, #24
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	6693      	str	r3, [r2, #104]	; 0x68
 8004120:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8004124:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004128:	f102 0208 	add.w	r2, r2, #8
 800412c:	6812      	ldr	r2, [r2, #0]
 800412e:	66da      	str	r2, [r3, #108]	; 0x6c
 8004130:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8004134:	f107 0318 	add.w	r3, r7, #24
 8004138:	3b18      	subs	r3, #24
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	6713      	str	r3, [r2, #112]	; 0x70
 800413e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8004142:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004146:	f102 0208 	add.w	r2, r2, #8
 800414a:	6812      	ldr	r2, [r2, #0]
 800414c:	675a      	str	r2, [r3, #116]	; 0x74
 800414e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8004152:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004156:	f102 0208 	add.w	r2, r2, #8
 800415a:	6812      	ldr	r2, [r2, #0]
 800415c:	679a      	str	r2, [r3, #120]	; 0x78
 800415e:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8004162:	f107 0318 	add.w	r3, r7, #24
 8004166:	3b18      	subs	r3, #24
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	67d3      	str	r3, [r2, #124]	; 0x7c
 800416c:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8004170:	f107 0318 	add.w	r3, r7, #24
 8004174:	3b18      	subs	r3, #24
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800417c:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8004180:	f107 0318 	add.w	r3, r7, #24
 8004184:	3b18      	subs	r3, #24
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 800418c:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8004190:	f107 0318 	add.w	r3, r7, #24
 8004194:	3b18      	subs	r3, #24
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800419c:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80041a0:	f107 0318 	add.w	r3, r7, #24
 80041a4:	3b18      	subs	r3, #24
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80041ac:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80041b0:	f107 0318 	add.w	r3, r7, #24
 80041b4:	3b18      	subs	r3, #24
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041bc:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80041c0:	f107 0318 	add.w	r3, r7, #24
 80041c4:	3b18      	subs	r3, #24
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80041cc:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80041d0:	f107 0318 	add.w	r3, r7, #24
 80041d4:	3b18      	subs	r3, #24
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 80041dc:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80041e0:	f107 0318 	add.w	r3, r7, #24
 80041e4:	3b18      	subs	r3, #24
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, textcolor,  //@..@
		backcolor, textcolor, textcolor, backcolor,  //.@@.
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_V[10][4] = {
 80041ec:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80041f0:	f107 0318 	add.w	r3, r7, #24
 80041f4:	3b18      	subs	r3, #24
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80041fe:	f107 0318 	add.w	r3, r7, #24
 8004202:	3b18      	subs	r3, #24
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6053      	str	r3, [r2, #4]
 8004208:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 800420c:	f107 0318 	add.w	r3, r7, #24
 8004210:	3b18      	subs	r3, #24
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6093      	str	r3, [r2, #8]
 8004216:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 800421a:	f107 0318 	add.w	r3, r7, #24
 800421e:	3b18      	subs	r3, #24
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	60d3      	str	r3, [r2, #12]
 8004224:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8004228:	f107 0318 	add.w	r3, r7, #24
 800422c:	3b18      	subs	r3, #24
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6113      	str	r3, [r2, #16]
 8004232:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8004236:	f107 0318 	add.w	r3, r7, #24
 800423a:	3b18      	subs	r3, #24
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6153      	str	r3, [r2, #20]
 8004240:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8004244:	f107 0318 	add.w	r3, r7, #24
 8004248:	3b18      	subs	r3, #24
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6193      	str	r3, [r2, #24]
 800424e:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8004252:	f107 0318 	add.w	r3, r7, #24
 8004256:	3b18      	subs	r3, #24
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	61d3      	str	r3, [r2, #28]
 800425c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004260:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004264:	f102 0208 	add.w	r2, r2, #8
 8004268:	6812      	ldr	r2, [r2, #0]
 800426a:	621a      	str	r2, [r3, #32]
 800426c:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8004270:	f107 0318 	add.w	r3, r7, #24
 8004274:	3b18      	subs	r3, #24
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6253      	str	r3, [r2, #36]	; 0x24
 800427a:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 800427e:	f107 0318 	add.w	r3, r7, #24
 8004282:	3b18      	subs	r3, #24
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6293      	str	r3, [r2, #40]	; 0x28
 8004288:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800428c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004290:	f102 0208 	add.w	r2, r2, #8
 8004294:	6812      	ldr	r2, [r2, #0]
 8004296:	62da      	str	r2, [r3, #44]	; 0x2c
 8004298:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800429c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80042a0:	f102 0208 	add.w	r2, r2, #8
 80042a4:	6812      	ldr	r2, [r2, #0]
 80042a6:	631a      	str	r2, [r3, #48]	; 0x30
 80042a8:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80042ac:	f107 0318 	add.w	r3, r7, #24
 80042b0:	3b18      	subs	r3, #24
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6353      	str	r3, [r2, #52]	; 0x34
 80042b6:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80042ba:	f107 0318 	add.w	r3, r7, #24
 80042be:	3b18      	subs	r3, #24
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6393      	str	r3, [r2, #56]	; 0x38
 80042c4:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80042c8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80042cc:	f102 0208 	add.w	r2, r2, #8
 80042d0:	6812      	ldr	r2, [r2, #0]
 80042d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80042d4:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80042d8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80042dc:	f102 0208 	add.w	r2, r2, #8
 80042e0:	6812      	ldr	r2, [r2, #0]
 80042e2:	641a      	str	r2, [r3, #64]	; 0x40
 80042e4:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80042e8:	f107 0318 	add.w	r3, r7, #24
 80042ec:	3b18      	subs	r3, #24
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	6453      	str	r3, [r2, #68]	; 0x44
 80042f2:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80042f6:	f107 0318 	add.w	r3, r7, #24
 80042fa:	3b18      	subs	r3, #24
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6493      	str	r3, [r2, #72]	; 0x48
 8004300:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004304:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004308:	f102 0208 	add.w	r2, r2, #8
 800430c:	6812      	ldr	r2, [r2, #0]
 800430e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004310:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004314:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004318:	f102 0208 	add.w	r2, r2, #8
 800431c:	6812      	ldr	r2, [r2, #0]
 800431e:	651a      	str	r2, [r3, #80]	; 0x50
 8004320:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8004324:	f107 0318 	add.w	r3, r7, #24
 8004328:	3b18      	subs	r3, #24
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6553      	str	r3, [r2, #84]	; 0x54
 800432e:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8004332:	f107 0318 	add.w	r3, r7, #24
 8004336:	3b18      	subs	r3, #24
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	6593      	str	r3, [r2, #88]	; 0x58
 800433c:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004340:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004344:	f102 0208 	add.w	r2, r2, #8
 8004348:	6812      	ldr	r2, [r2, #0]
 800434a:	65da      	str	r2, [r3, #92]	; 0x5c
 800434c:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8004350:	f107 0318 	add.w	r3, r7, #24
 8004354:	3b18      	subs	r3, #24
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	6613      	str	r3, [r2, #96]	; 0x60
 800435a:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800435e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004362:	f102 0208 	add.w	r2, r2, #8
 8004366:	6812      	ldr	r2, [r2, #0]
 8004368:	665a      	str	r2, [r3, #100]	; 0x64
 800436a:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800436e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004372:	f102 0208 	add.w	r2, r2, #8
 8004376:	6812      	ldr	r2, [r2, #0]
 8004378:	669a      	str	r2, [r3, #104]	; 0x68
 800437a:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 800437e:	f107 0318 	add.w	r3, r7, #24
 8004382:	3b18      	subs	r3, #24
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	66d3      	str	r3, [r2, #108]	; 0x6c
 8004388:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 800438c:	f107 0318 	add.w	r3, r7, #24
 8004390:	3b18      	subs	r3, #24
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6713      	str	r3, [r2, #112]	; 0x70
 8004396:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800439a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800439e:	f102 0208 	add.w	r2, r2, #8
 80043a2:	6812      	ldr	r2, [r2, #0]
 80043a4:	675a      	str	r2, [r3, #116]	; 0x74
 80043a6:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80043aa:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80043ae:	f102 0208 	add.w	r2, r2, #8
 80043b2:	6812      	ldr	r2, [r2, #0]
 80043b4:	679a      	str	r2, [r3, #120]	; 0x78
 80043b6:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80043ba:	f107 0318 	add.w	r3, r7, #24
 80043be:	3b18      	subs	r3, #24
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	67d3      	str	r3, [r2, #124]	; 0x7c
 80043c4:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80043c8:	f107 0318 	add.w	r3, r7, #24
 80043cc:	3b18      	subs	r3, #24
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80043d4:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80043d8:	f107 0318 	add.w	r3, r7, #24
 80043dc:	3b18      	subs	r3, #24
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80043e4:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80043e8:	f107 0318 	add.w	r3, r7, #24
 80043ec:	3b18      	subs	r3, #24
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80043f4:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80043f8:	f107 0318 	add.w	r3, r7, #24
 80043fc:	3b18      	subs	r3, #24
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004404:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8004408:	f107 0318 	add.w	r3, r7, #24
 800440c:	3b18      	subs	r3, #24
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004414:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8004418:	f107 0318 	add.w	r3, r7, #24
 800441c:	3b18      	subs	r3, #24
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004424:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8004428:	f107 0318 	add.w	r3, r7, #24
 800442c:	3b18      	subs	r3, #24
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8004434:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8004438:	f107 0318 	add.w	r3, r7, #24
 800443c:	3b18      	subs	r3, #24
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		backcolor, textcolor, textcolor, backcolor,  //.@@.
		backcolor, textcolor, textcolor, backcolor,  //.@@.
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_W[10][4] = {
 8004444:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004448:	f107 0318 	add.w	r3, r7, #24
 800444c:	3b18      	subs	r3, #24
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004456:	f107 0318 	add.w	r3, r7, #24
 800445a:	3b18      	subs	r3, #24
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6053      	str	r3, [r2, #4]
 8004460:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004464:	f107 0318 	add.w	r3, r7, #24
 8004468:	3b18      	subs	r3, #24
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6093      	str	r3, [r2, #8]
 800446e:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004472:	f107 0318 	add.w	r3, r7, #24
 8004476:	3b18      	subs	r3, #24
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	60d3      	str	r3, [r2, #12]
 800447c:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004480:	f107 0318 	add.w	r3, r7, #24
 8004484:	3b18      	subs	r3, #24
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6113      	str	r3, [r2, #16]
 800448a:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800448e:	f107 0318 	add.w	r3, r7, #24
 8004492:	3b18      	subs	r3, #24
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	6153      	str	r3, [r2, #20]
 8004498:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800449c:	f107 0318 	add.w	r3, r7, #24
 80044a0:	3b18      	subs	r3, #24
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6193      	str	r3, [r2, #24]
 80044a6:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80044aa:	f107 0318 	add.w	r3, r7, #24
 80044ae:	3b18      	subs	r3, #24
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	61d3      	str	r3, [r2, #28]
 80044b4:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80044b8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80044bc:	f102 0208 	add.w	r2, r2, #8
 80044c0:	6812      	ldr	r2, [r2, #0]
 80044c2:	621a      	str	r2, [r3, #32]
 80044c4:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80044c8:	f107 0318 	add.w	r3, r7, #24
 80044cc:	3b18      	subs	r3, #24
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6253      	str	r3, [r2, #36]	; 0x24
 80044d2:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80044d6:	f107 0318 	add.w	r3, r7, #24
 80044da:	3b18      	subs	r3, #24
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	6293      	str	r3, [r2, #40]	; 0x28
 80044e0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80044e4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80044e8:	f102 0208 	add.w	r2, r2, #8
 80044ec:	6812      	ldr	r2, [r2, #0]
 80044ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80044f0:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80044f4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80044f8:	f102 0208 	add.w	r2, r2, #8
 80044fc:	6812      	ldr	r2, [r2, #0]
 80044fe:	631a      	str	r2, [r3, #48]	; 0x30
 8004500:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004504:	f107 0318 	add.w	r3, r7, #24
 8004508:	3b18      	subs	r3, #24
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6353      	str	r3, [r2, #52]	; 0x34
 800450e:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004512:	f107 0318 	add.w	r3, r7, #24
 8004516:	3b18      	subs	r3, #24
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6393      	str	r3, [r2, #56]	; 0x38
 800451c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004520:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004524:	f102 0208 	add.w	r2, r2, #8
 8004528:	6812      	ldr	r2, [r2, #0]
 800452a:	63da      	str	r2, [r3, #60]	; 0x3c
 800452c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004530:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004534:	f102 0208 	add.w	r2, r2, #8
 8004538:	6812      	ldr	r2, [r2, #0]
 800453a:	641a      	str	r2, [r3, #64]	; 0x40
 800453c:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004540:	f107 0318 	add.w	r3, r7, #24
 8004544:	3b18      	subs	r3, #24
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	6453      	str	r3, [r2, #68]	; 0x44
 800454a:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800454e:	f107 0318 	add.w	r3, r7, #24
 8004552:	3b18      	subs	r3, #24
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6493      	str	r3, [r2, #72]	; 0x48
 8004558:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800455c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004560:	f102 0208 	add.w	r2, r2, #8
 8004564:	6812      	ldr	r2, [r2, #0]
 8004566:	64da      	str	r2, [r3, #76]	; 0x4c
 8004568:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800456c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004570:	f102 0208 	add.w	r2, r2, #8
 8004574:	6812      	ldr	r2, [r2, #0]
 8004576:	651a      	str	r2, [r3, #80]	; 0x50
 8004578:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800457c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004580:	f102 0208 	add.w	r2, r2, #8
 8004584:	6812      	ldr	r2, [r2, #0]
 8004586:	655a      	str	r2, [r3, #84]	; 0x54
 8004588:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800458c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004590:	f102 0208 	add.w	r2, r2, #8
 8004594:	6812      	ldr	r2, [r2, #0]
 8004596:	659a      	str	r2, [r3, #88]	; 0x58
 8004598:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800459c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80045a0:	f102 0208 	add.w	r2, r2, #8
 80045a4:	6812      	ldr	r2, [r2, #0]
 80045a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80045a8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80045ac:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80045b0:	f102 0208 	add.w	r2, r2, #8
 80045b4:	6812      	ldr	r2, [r2, #0]
 80045b6:	661a      	str	r2, [r3, #96]	; 0x60
 80045b8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80045bc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80045c0:	f102 0208 	add.w	r2, r2, #8
 80045c4:	6812      	ldr	r2, [r2, #0]
 80045c6:	665a      	str	r2, [r3, #100]	; 0x64
 80045c8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80045cc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80045d0:	f102 0208 	add.w	r2, r2, #8
 80045d4:	6812      	ldr	r2, [r2, #0]
 80045d6:	669a      	str	r2, [r3, #104]	; 0x68
 80045d8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80045dc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80045e0:	f102 0208 	add.w	r2, r2, #8
 80045e4:	6812      	ldr	r2, [r2, #0]
 80045e6:	66da      	str	r2, [r3, #108]	; 0x6c
 80045e8:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80045ec:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80045f0:	f102 0208 	add.w	r2, r2, #8
 80045f4:	6812      	ldr	r2, [r2, #0]
 80045f6:	671a      	str	r2, [r3, #112]	; 0x70
 80045f8:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80045fc:	f107 0318 	add.w	r3, r7, #24
 8004600:	3b18      	subs	r3, #24
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6753      	str	r3, [r2, #116]	; 0x74
 8004606:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800460a:	f107 0318 	add.w	r3, r7, #24
 800460e:	3b18      	subs	r3, #24
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6793      	str	r3, [r2, #120]	; 0x78
 8004614:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004618:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800461c:	f102 0208 	add.w	r2, r2, #8
 8004620:	6812      	ldr	r2, [r2, #0]
 8004622:	67da      	str	r2, [r3, #124]	; 0x7c
 8004624:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004628:	f107 0318 	add.w	r3, r7, #24
 800462c:	3b18      	subs	r3, #24
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004634:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004638:	f107 0318 	add.w	r3, r7, #24
 800463c:	3b18      	subs	r3, #24
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8004644:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004648:	f107 0318 	add.w	r3, r7, #24
 800464c:	3b18      	subs	r3, #24
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004654:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004658:	f107 0318 	add.w	r3, r7, #24
 800465c:	3b18      	subs	r3, #24
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004664:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004668:	f107 0318 	add.w	r3, r7, #24
 800466c:	3b18      	subs	r3, #24
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004674:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004678:	f107 0318 	add.w	r3, r7, #24
 800467c:	3b18      	subs	r3, #24
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004684:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004688:	f107 0318 	add.w	r3, r7, #24
 800468c:	3b18      	subs	r3, #24
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8004694:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004698:	f107 0318 	add.w	r3, r7, #24
 800469c:	3b18      	subs	r3, #24
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, textcolor, textcolor, textcolor,  //@@@@
		textcolor, backcolor, backcolor, textcolor,  //@..@
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_X[10][4] = {
 80046a4:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80046a8:	f107 0318 	add.w	r3, r7, #24
 80046ac:	3b18      	subs	r3, #24
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6013      	str	r3, [r2, #0]
 80046b2:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80046b6:	f107 0318 	add.w	r3, r7, #24
 80046ba:	3b18      	subs	r3, #24
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6053      	str	r3, [r2, #4]
 80046c0:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80046c4:	f107 0318 	add.w	r3, r7, #24
 80046c8:	3b18      	subs	r3, #24
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6093      	str	r3, [r2, #8]
 80046ce:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80046d2:	f107 0318 	add.w	r3, r7, #24
 80046d6:	3b18      	subs	r3, #24
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	60d3      	str	r3, [r2, #12]
 80046dc:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80046e0:	f107 0318 	add.w	r3, r7, #24
 80046e4:	3b18      	subs	r3, #24
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6113      	str	r3, [r2, #16]
 80046ea:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80046ee:	f107 0318 	add.w	r3, r7, #24
 80046f2:	3b18      	subs	r3, #24
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	6153      	str	r3, [r2, #20]
 80046f8:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80046fc:	f107 0318 	add.w	r3, r7, #24
 8004700:	3b18      	subs	r3, #24
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6193      	str	r3, [r2, #24]
 8004706:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 800470a:	f107 0318 	add.w	r3, r7, #24
 800470e:	3b18      	subs	r3, #24
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	61d3      	str	r3, [r2, #28]
 8004714:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8004718:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800471c:	f102 0208 	add.w	r2, r2, #8
 8004720:	6812      	ldr	r2, [r2, #0]
 8004722:	621a      	str	r2, [r3, #32]
 8004724:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004728:	f107 0318 	add.w	r3, r7, #24
 800472c:	3b18      	subs	r3, #24
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6253      	str	r3, [r2, #36]	; 0x24
 8004732:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004736:	f107 0318 	add.w	r3, r7, #24
 800473a:	3b18      	subs	r3, #24
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6293      	str	r3, [r2, #40]	; 0x28
 8004740:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8004744:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004748:	f102 0208 	add.w	r2, r2, #8
 800474c:	6812      	ldr	r2, [r2, #0]
 800474e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004750:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8004754:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004758:	f102 0208 	add.w	r2, r2, #8
 800475c:	6812      	ldr	r2, [r2, #0]
 800475e:	631a      	str	r2, [r3, #48]	; 0x30
 8004760:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004764:	f107 0318 	add.w	r3, r7, #24
 8004768:	3b18      	subs	r3, #24
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6353      	str	r3, [r2, #52]	; 0x34
 800476e:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004772:	f107 0318 	add.w	r3, r7, #24
 8004776:	3b18      	subs	r3, #24
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6393      	str	r3, [r2, #56]	; 0x38
 800477c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8004780:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004784:	f102 0208 	add.w	r2, r2, #8
 8004788:	6812      	ldr	r2, [r2, #0]
 800478a:	63da      	str	r2, [r3, #60]	; 0x3c
 800478c:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004790:	f107 0318 	add.w	r3, r7, #24
 8004794:	3b18      	subs	r3, #24
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6413      	str	r3, [r2, #64]	; 0x40
 800479a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800479e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80047a2:	f102 0208 	add.w	r2, r2, #8
 80047a6:	6812      	ldr	r2, [r2, #0]
 80047a8:	645a      	str	r2, [r3, #68]	; 0x44
 80047aa:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80047ae:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80047b2:	f102 0208 	add.w	r2, r2, #8
 80047b6:	6812      	ldr	r2, [r2, #0]
 80047b8:	649a      	str	r2, [r3, #72]	; 0x48
 80047ba:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80047be:	f107 0318 	add.w	r3, r7, #24
 80047c2:	3b18      	subs	r3, #24
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047c8:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80047cc:	f107 0318 	add.w	r3, r7, #24
 80047d0:	3b18      	subs	r3, #24
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6513      	str	r3, [r2, #80]	; 0x50
 80047d6:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80047da:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80047de:	f102 0208 	add.w	r2, r2, #8
 80047e2:	6812      	ldr	r2, [r2, #0]
 80047e4:	655a      	str	r2, [r3, #84]	; 0x54
 80047e6:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80047ea:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80047ee:	f102 0208 	add.w	r2, r2, #8
 80047f2:	6812      	ldr	r2, [r2, #0]
 80047f4:	659a      	str	r2, [r3, #88]	; 0x58
 80047f6:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80047fa:	f107 0318 	add.w	r3, r7, #24
 80047fe:	3b18      	subs	r3, #24
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	65d3      	str	r3, [r2, #92]	; 0x5c
 8004804:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8004808:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800480c:	f102 0208 	add.w	r2, r2, #8
 8004810:	6812      	ldr	r2, [r2, #0]
 8004812:	661a      	str	r2, [r3, #96]	; 0x60
 8004814:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004818:	f107 0318 	add.w	r3, r7, #24
 800481c:	3b18      	subs	r3, #24
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6653      	str	r3, [r2, #100]	; 0x64
 8004822:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004826:	f107 0318 	add.w	r3, r7, #24
 800482a:	3b18      	subs	r3, #24
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6693      	str	r3, [r2, #104]	; 0x68
 8004830:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8004834:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004838:	f102 0208 	add.w	r2, r2, #8
 800483c:	6812      	ldr	r2, [r2, #0]
 800483e:	66da      	str	r2, [r3, #108]	; 0x6c
 8004840:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8004844:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004848:	f102 0208 	add.w	r2, r2, #8
 800484c:	6812      	ldr	r2, [r2, #0]
 800484e:	671a      	str	r2, [r3, #112]	; 0x70
 8004850:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004854:	f107 0318 	add.w	r3, r7, #24
 8004858:	3b18      	subs	r3, #24
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6753      	str	r3, [r2, #116]	; 0x74
 800485e:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004862:	f107 0318 	add.w	r3, r7, #24
 8004866:	3b18      	subs	r3, #24
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	6793      	str	r3, [r2, #120]	; 0x78
 800486c:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8004870:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004874:	f102 0208 	add.w	r2, r2, #8
 8004878:	6812      	ldr	r2, [r2, #0]
 800487a:	67da      	str	r2, [r3, #124]	; 0x7c
 800487c:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004880:	f107 0318 	add.w	r3, r7, #24
 8004884:	3b18      	subs	r3, #24
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800488c:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004890:	f107 0318 	add.w	r3, r7, #24
 8004894:	3b18      	subs	r3, #24
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 800489c:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80048a0:	f107 0318 	add.w	r3, r7, #24
 80048a4:	3b18      	subs	r3, #24
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80048ac:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80048b0:	f107 0318 	add.w	r3, r7, #24
 80048b4:	3b18      	subs	r3, #24
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80048bc:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80048c0:	f107 0318 	add.w	r3, r7, #24
 80048c4:	3b18      	subs	r3, #24
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048cc:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80048d0:	f107 0318 	add.w	r3, r7, #24
 80048d4:	3b18      	subs	r3, #24
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80048dc:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80048e0:	f107 0318 	add.w	r3, r7, #24
 80048e4:	3b18      	subs	r3, #24
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 80048ec:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80048f0:	f107 0318 	add.w	r3, r7, #24
 80048f4:	3b18      	subs	r3, #24
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, textcolor,  //@..@
		textcolor, backcolor, backcolor, textcolor,  //@..@
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_Y[10][5] = {
 80048fc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004900:	3b08      	subs	r3, #8
 8004902:	f107 0218 	add.w	r2, r7, #24
 8004906:	3a18      	subs	r2, #24
 8004908:	6812      	ldr	r2, [r2, #0]
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004910:	3b08      	subs	r3, #8
 8004912:	f107 0218 	add.w	r2, r7, #24
 8004916:	3a18      	subs	r2, #24
 8004918:	6812      	ldr	r2, [r2, #0]
 800491a:	605a      	str	r2, [r3, #4]
 800491c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004920:	3b08      	subs	r3, #8
 8004922:	f107 0218 	add.w	r2, r7, #24
 8004926:	3a18      	subs	r2, #24
 8004928:	6812      	ldr	r2, [r2, #0]
 800492a:	609a      	str	r2, [r3, #8]
 800492c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004930:	3b08      	subs	r3, #8
 8004932:	f107 0218 	add.w	r2, r7, #24
 8004936:	3a18      	subs	r2, #24
 8004938:	6812      	ldr	r2, [r2, #0]
 800493a:	60da      	str	r2, [r3, #12]
 800493c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004940:	3b08      	subs	r3, #8
 8004942:	f107 0218 	add.w	r2, r7, #24
 8004946:	3a18      	subs	r2, #24
 8004948:	6812      	ldr	r2, [r2, #0]
 800494a:	611a      	str	r2, [r3, #16]
 800494c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004950:	3b08      	subs	r3, #8
 8004952:	f107 0218 	add.w	r2, r7, #24
 8004956:	3a18      	subs	r2, #24
 8004958:	6812      	ldr	r2, [r2, #0]
 800495a:	615a      	str	r2, [r3, #20]
 800495c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004960:	3b08      	subs	r3, #8
 8004962:	f107 0218 	add.w	r2, r7, #24
 8004966:	3a18      	subs	r2, #24
 8004968:	6812      	ldr	r2, [r2, #0]
 800496a:	619a      	str	r2, [r3, #24]
 800496c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004970:	3b08      	subs	r3, #8
 8004972:	f107 0218 	add.w	r2, r7, #24
 8004976:	3a18      	subs	r2, #24
 8004978:	6812      	ldr	r2, [r2, #0]
 800497a:	61da      	str	r2, [r3, #28]
 800497c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004980:	3b08      	subs	r3, #8
 8004982:	f107 0218 	add.w	r2, r7, #24
 8004986:	3a18      	subs	r2, #24
 8004988:	6812      	ldr	r2, [r2, #0]
 800498a:	621a      	str	r2, [r3, #32]
 800498c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004990:	3b08      	subs	r3, #8
 8004992:	f107 0218 	add.w	r2, r7, #24
 8004996:	3a18      	subs	r2, #24
 8004998:	6812      	ldr	r2, [r2, #0]
 800499a:	625a      	str	r2, [r3, #36]	; 0x24
 800499c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80049a0:	3b08      	subs	r3, #8
 80049a2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80049a6:	f102 0208 	add.w	r2, r2, #8
 80049aa:	6812      	ldr	r2, [r2, #0]
 80049ac:	629a      	str	r2, [r3, #40]	; 0x28
 80049ae:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80049b2:	3b08      	subs	r3, #8
 80049b4:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80049b8:	f102 0208 	add.w	r2, r2, #8
 80049bc:	6812      	ldr	r2, [r2, #0]
 80049be:	62da      	str	r2, [r3, #44]	; 0x2c
 80049c0:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80049c4:	3b08      	subs	r3, #8
 80049c6:	f107 0218 	add.w	r2, r7, #24
 80049ca:	3a18      	subs	r2, #24
 80049cc:	6812      	ldr	r2, [r2, #0]
 80049ce:	631a      	str	r2, [r3, #48]	; 0x30
 80049d0:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80049d4:	3b08      	subs	r3, #8
 80049d6:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80049da:	f102 0208 	add.w	r2, r2, #8
 80049de:	6812      	ldr	r2, [r2, #0]
 80049e0:	635a      	str	r2, [r3, #52]	; 0x34
 80049e2:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80049e6:	3b08      	subs	r3, #8
 80049e8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80049ec:	f102 0208 	add.w	r2, r2, #8
 80049f0:	6812      	ldr	r2, [r2, #0]
 80049f2:	639a      	str	r2, [r3, #56]	; 0x38
 80049f4:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 80049f8:	3b08      	subs	r3, #8
 80049fa:	f107 0218 	add.w	r2, r7, #24
 80049fe:	3a18      	subs	r2, #24
 8004a00:	6812      	ldr	r2, [r2, #0]
 8004a02:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a04:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004a08:	3b08      	subs	r3, #8
 8004a0a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004a0e:	f102 0208 	add.w	r2, r2, #8
 8004a12:	6812      	ldr	r2, [r2, #0]
 8004a14:	641a      	str	r2, [r3, #64]	; 0x40
 8004a16:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004a1a:	3b08      	subs	r3, #8
 8004a1c:	f107 0218 	add.w	r2, r7, #24
 8004a20:	3a18      	subs	r2, #24
 8004a22:	6812      	ldr	r2, [r2, #0]
 8004a24:	645a      	str	r2, [r3, #68]	; 0x44
 8004a26:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004a2a:	3b08      	subs	r3, #8
 8004a2c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004a30:	f102 0208 	add.w	r2, r2, #8
 8004a34:	6812      	ldr	r2, [r2, #0]
 8004a36:	649a      	str	r2, [r3, #72]	; 0x48
 8004a38:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004a3c:	3b08      	subs	r3, #8
 8004a3e:	f107 0218 	add.w	r2, r7, #24
 8004a42:	3a18      	subs	r2, #24
 8004a44:	6812      	ldr	r2, [r2, #0]
 8004a46:	64da      	str	r2, [r3, #76]	; 0x4c
 8004a48:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004a4c:	3b08      	subs	r3, #8
 8004a4e:	f107 0218 	add.w	r2, r7, #24
 8004a52:	3a18      	subs	r2, #24
 8004a54:	6812      	ldr	r2, [r2, #0]
 8004a56:	651a      	str	r2, [r3, #80]	; 0x50
 8004a58:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004a5c:	3b08      	subs	r3, #8
 8004a5e:	f107 0218 	add.w	r2, r7, #24
 8004a62:	3a18      	subs	r2, #24
 8004a64:	6812      	ldr	r2, [r2, #0]
 8004a66:	655a      	str	r2, [r3, #84]	; 0x54
 8004a68:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004a6c:	3b08      	subs	r3, #8
 8004a6e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004a72:	f102 0208 	add.w	r2, r2, #8
 8004a76:	6812      	ldr	r2, [r2, #0]
 8004a78:	659a      	str	r2, [r3, #88]	; 0x58
 8004a7a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004a7e:	3b08      	subs	r3, #8
 8004a80:	f107 0218 	add.w	r2, r7, #24
 8004a84:	3a18      	subs	r2, #24
 8004a86:	6812      	ldr	r2, [r2, #0]
 8004a88:	65da      	str	r2, [r3, #92]	; 0x5c
 8004a8a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004a8e:	3b08      	subs	r3, #8
 8004a90:	f107 0218 	add.w	r2, r7, #24
 8004a94:	3a18      	subs	r2, #24
 8004a96:	6812      	ldr	r2, [r2, #0]
 8004a98:	661a      	str	r2, [r3, #96]	; 0x60
 8004a9a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004a9e:	3b08      	subs	r3, #8
 8004aa0:	f107 0218 	add.w	r2, r7, #24
 8004aa4:	3a18      	subs	r2, #24
 8004aa6:	6812      	ldr	r2, [r2, #0]
 8004aa8:	665a      	str	r2, [r3, #100]	; 0x64
 8004aaa:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004aae:	3b08      	subs	r3, #8
 8004ab0:	f107 0218 	add.w	r2, r7, #24
 8004ab4:	3a18      	subs	r2, #24
 8004ab6:	6812      	ldr	r2, [r2, #0]
 8004ab8:	669a      	str	r2, [r3, #104]	; 0x68
 8004aba:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004abe:	3b08      	subs	r3, #8
 8004ac0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004ac4:	f102 0208 	add.w	r2, r2, #8
 8004ac8:	6812      	ldr	r2, [r2, #0]
 8004aca:	66da      	str	r2, [r3, #108]	; 0x6c
 8004acc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004ad0:	3b08      	subs	r3, #8
 8004ad2:	f107 0218 	add.w	r2, r7, #24
 8004ad6:	3a18      	subs	r2, #24
 8004ad8:	6812      	ldr	r2, [r2, #0]
 8004ada:	671a      	str	r2, [r3, #112]	; 0x70
 8004adc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004ae0:	3b08      	subs	r3, #8
 8004ae2:	f107 0218 	add.w	r2, r7, #24
 8004ae6:	3a18      	subs	r2, #24
 8004ae8:	6812      	ldr	r2, [r2, #0]
 8004aea:	675a      	str	r2, [r3, #116]	; 0x74
 8004aec:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004af0:	3b08      	subs	r3, #8
 8004af2:	f107 0218 	add.w	r2, r7, #24
 8004af6:	3a18      	subs	r2, #24
 8004af8:	6812      	ldr	r2, [r2, #0]
 8004afa:	679a      	str	r2, [r3, #120]	; 0x78
 8004afc:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004b00:	3b08      	subs	r3, #8
 8004b02:	f107 0218 	add.w	r2, r7, #24
 8004b06:	3a18      	subs	r2, #24
 8004b08:	6812      	ldr	r2, [r2, #0]
 8004b0a:	67da      	str	r2, [r3, #124]	; 0x7c
 8004b0c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004b10:	3b08      	subs	r3, #8
 8004b12:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004b16:	f102 0208 	add.w	r2, r2, #8
 8004b1a:	6812      	ldr	r2, [r2, #0]
 8004b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004b20:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004b24:	3b08      	subs	r3, #8
 8004b26:	f107 0218 	add.w	r2, r7, #24
 8004b2a:	3a18      	subs	r2, #24
 8004b2c:	6812      	ldr	r2, [r2, #0]
 8004b2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8004b32:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004b36:	3b08      	subs	r3, #8
 8004b38:	f107 0218 	add.w	r2, r7, #24
 8004b3c:	3a18      	subs	r2, #24
 8004b3e:	6812      	ldr	r2, [r2, #0]
 8004b40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8004b44:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004b48:	3b08      	subs	r3, #8
 8004b4a:	f107 0218 	add.w	r2, r7, #24
 8004b4e:	3a18      	subs	r2, #24
 8004b50:	6812      	ldr	r2, [r2, #0]
 8004b52:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004b56:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004b5a:	3b08      	subs	r3, #8
 8004b5c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004b60:	f102 0208 	add.w	r2, r2, #8
 8004b64:	6812      	ldr	r2, [r2, #0]
 8004b66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004b6a:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004b6e:	3b08      	subs	r3, #8
 8004b70:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004b74:	f102 0208 	add.w	r2, r2, #8
 8004b78:	6812      	ldr	r2, [r2, #0]
 8004b7a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004b7e:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004b82:	3b08      	subs	r3, #8
 8004b84:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004b88:	f102 0208 	add.w	r2, r2, #8
 8004b8c:	6812      	ldr	r2, [r2, #0]
 8004b8e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004b92:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004b96:	3b08      	subs	r3, #8
 8004b98:	f107 0218 	add.w	r2, r7, #24
 8004b9c:	3a18      	subs	r2, #24
 8004b9e:	6812      	ldr	r2, [r2, #0]
 8004ba0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8004ba4:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004ba8:	3b08      	subs	r3, #8
 8004baa:	f107 0218 	add.w	r2, r7, #24
 8004bae:	3a18      	subs	r2, #24
 8004bb0:	6812      	ldr	r2, [r2, #0]
 8004bb2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8004bb6:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004bba:	3b08      	subs	r3, #8
 8004bbc:	f107 0218 	add.w	r2, r7, #24
 8004bc0:	3a18      	subs	r2, #24
 8004bc2:	6812      	ldr	r2, [r2, #0]
 8004bc4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8004bc8:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004bcc:	3b08      	subs	r3, #8
 8004bce:	f107 0218 	add.w	r2, r7, #24
 8004bd2:	3a18      	subs	r2, #24
 8004bd4:	6812      	ldr	r2, [r2, #0]
 8004bd6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8004bda:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004bde:	3b08      	subs	r3, #8
 8004be0:	f107 0218 	add.w	r2, r7, #24
 8004be4:	3a18      	subs	r2, #24
 8004be6:	6812      	ldr	r2, [r2, #0]
 8004be8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8004bec:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004bf0:	3b08      	subs	r3, #8
 8004bf2:	f107 0218 	add.w	r2, r7, #24
 8004bf6:	3a18      	subs	r2, #24
 8004bf8:	6812      	ldr	r2, [r2, #0]
 8004bfa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004bfe:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004c02:	3b08      	subs	r3, #8
 8004c04:	f107 0218 	add.w	r2, r7, #24
 8004c08:	3a18      	subs	r2, #24
 8004c0a:	6812      	ldr	r2, [r2, #0]
 8004c0c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8004c10:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004c14:	3b08      	subs	r3, #8
 8004c16:	f107 0218 	add.w	r2, r7, #24
 8004c1a:	3a18      	subs	r2, #24
 8004c1c:	6812      	ldr	r2, [r2, #0]
 8004c1e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8004c22:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004c26:	3b08      	subs	r3, #8
 8004c28:	f107 0218 	add.w	r2, r7, #24
 8004c2c:	3a18      	subs	r2, #24
 8004c2e:	6812      	ldr	r2, [r2, #0]
 8004c30:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
 8004c34:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004c38:	3b08      	subs	r3, #8
 8004c3a:	f107 0218 	add.w	r2, r7, #24
 8004c3e:	3a18      	subs	r2, #24
 8004c40:	6812      	ldr	r2, [r2, #0]
 8004c42:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
 8004c46:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8004c4a:	3b08      	subs	r3, #8
 8004c4c:	f107 0218 	add.w	r2, r7, #24
 8004c50:	3a18      	subs	r2, #24
 8004c52:	6812      	ldr	r2, [r2, #0]
 8004c54:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		backcolor, backcolor, textcolor, backcolor, backcolor,  //..@..
		backcolor, textcolor, textcolor, textcolor, backcolor,  //.@@@.
		backcolor, backcolor, backcolor, backcolor, backcolor,  //.....
		backcolor, backcolor, backcolor, backcolor, backcolor,  //.....
	};
	int letter_Z[10][4] = {
 8004c58:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004c5c:	3b08      	subs	r3, #8
 8004c5e:	f107 0218 	add.w	r2, r7, #24
 8004c62:	3a18      	subs	r2, #24
 8004c64:	6812      	ldr	r2, [r2, #0]
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004c6c:	3b08      	subs	r3, #8
 8004c6e:	f107 0218 	add.w	r2, r7, #24
 8004c72:	3a18      	subs	r2, #24
 8004c74:	6812      	ldr	r2, [r2, #0]
 8004c76:	605a      	str	r2, [r3, #4]
 8004c78:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004c7c:	3b08      	subs	r3, #8
 8004c7e:	f107 0218 	add.w	r2, r7, #24
 8004c82:	3a18      	subs	r2, #24
 8004c84:	6812      	ldr	r2, [r2, #0]
 8004c86:	609a      	str	r2, [r3, #8]
 8004c88:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004c8c:	3b08      	subs	r3, #8
 8004c8e:	f107 0218 	add.w	r2, r7, #24
 8004c92:	3a18      	subs	r2, #24
 8004c94:	6812      	ldr	r2, [r2, #0]
 8004c96:	60da      	str	r2, [r3, #12]
 8004c98:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004c9c:	3b08      	subs	r3, #8
 8004c9e:	f107 0218 	add.w	r2, r7, #24
 8004ca2:	3a18      	subs	r2, #24
 8004ca4:	6812      	ldr	r2, [r2, #0]
 8004ca6:	611a      	str	r2, [r3, #16]
 8004ca8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004cac:	3b08      	subs	r3, #8
 8004cae:	f107 0218 	add.w	r2, r7, #24
 8004cb2:	3a18      	subs	r2, #24
 8004cb4:	6812      	ldr	r2, [r2, #0]
 8004cb6:	615a      	str	r2, [r3, #20]
 8004cb8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004cbc:	3b08      	subs	r3, #8
 8004cbe:	f107 0218 	add.w	r2, r7, #24
 8004cc2:	3a18      	subs	r2, #24
 8004cc4:	6812      	ldr	r2, [r2, #0]
 8004cc6:	619a      	str	r2, [r3, #24]
 8004cc8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004ccc:	3b08      	subs	r3, #8
 8004cce:	f107 0218 	add.w	r2, r7, #24
 8004cd2:	3a18      	subs	r2, #24
 8004cd4:	6812      	ldr	r2, [r2, #0]
 8004cd6:	61da      	str	r2, [r3, #28]
 8004cd8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004cdc:	3b08      	subs	r3, #8
 8004cde:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004ce2:	f102 0208 	add.w	r2, r2, #8
 8004ce6:	6812      	ldr	r2, [r2, #0]
 8004ce8:	621a      	str	r2, [r3, #32]
 8004cea:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004cee:	3b08      	subs	r3, #8
 8004cf0:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004cf4:	f102 0208 	add.w	r2, r2, #8
 8004cf8:	6812      	ldr	r2, [r2, #0]
 8004cfa:	625a      	str	r2, [r3, #36]	; 0x24
 8004cfc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004d00:	3b08      	subs	r3, #8
 8004d02:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004d06:	f102 0208 	add.w	r2, r2, #8
 8004d0a:	6812      	ldr	r2, [r2, #0]
 8004d0c:	629a      	str	r2, [r3, #40]	; 0x28
 8004d0e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004d12:	3b08      	subs	r3, #8
 8004d14:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004d18:	f102 0208 	add.w	r2, r2, #8
 8004d1c:	6812      	ldr	r2, [r2, #0]
 8004d1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d20:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004d24:	3b08      	subs	r3, #8
 8004d26:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004d2a:	f102 0208 	add.w	r2, r2, #8
 8004d2e:	6812      	ldr	r2, [r2, #0]
 8004d30:	631a      	str	r2, [r3, #48]	; 0x30
 8004d32:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004d36:	3b08      	subs	r3, #8
 8004d38:	f107 0218 	add.w	r2, r7, #24
 8004d3c:	3a18      	subs	r2, #24
 8004d3e:	6812      	ldr	r2, [r2, #0]
 8004d40:	635a      	str	r2, [r3, #52]	; 0x34
 8004d42:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004d46:	3b08      	subs	r3, #8
 8004d48:	f107 0218 	add.w	r2, r7, #24
 8004d4c:	3a18      	subs	r2, #24
 8004d4e:	6812      	ldr	r2, [r2, #0]
 8004d50:	639a      	str	r2, [r3, #56]	; 0x38
 8004d52:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004d56:	3b08      	subs	r3, #8
 8004d58:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004d5c:	f102 0208 	add.w	r2, r2, #8
 8004d60:	6812      	ldr	r2, [r2, #0]
 8004d62:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d64:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004d68:	3b08      	subs	r3, #8
 8004d6a:	f107 0218 	add.w	r2, r7, #24
 8004d6e:	3a18      	subs	r2, #24
 8004d70:	6812      	ldr	r2, [r2, #0]
 8004d72:	641a      	str	r2, [r3, #64]	; 0x40
 8004d74:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004d78:	3b08      	subs	r3, #8
 8004d7a:	f107 0218 	add.w	r2, r7, #24
 8004d7e:	3a18      	subs	r2, #24
 8004d80:	6812      	ldr	r2, [r2, #0]
 8004d82:	645a      	str	r2, [r3, #68]	; 0x44
 8004d84:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004d88:	3b08      	subs	r3, #8
 8004d8a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004d8e:	f102 0208 	add.w	r2, r2, #8
 8004d92:	6812      	ldr	r2, [r2, #0]
 8004d94:	649a      	str	r2, [r3, #72]	; 0x48
 8004d96:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004d9a:	3b08      	subs	r3, #8
 8004d9c:	f107 0218 	add.w	r2, r7, #24
 8004da0:	3a18      	subs	r2, #24
 8004da2:	6812      	ldr	r2, [r2, #0]
 8004da4:	64da      	str	r2, [r3, #76]	; 0x4c
 8004da6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004daa:	3b08      	subs	r3, #8
 8004dac:	f107 0218 	add.w	r2, r7, #24
 8004db0:	3a18      	subs	r2, #24
 8004db2:	6812      	ldr	r2, [r2, #0]
 8004db4:	651a      	str	r2, [r3, #80]	; 0x50
 8004db6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004dba:	3b08      	subs	r3, #8
 8004dbc:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004dc0:	f102 0208 	add.w	r2, r2, #8
 8004dc4:	6812      	ldr	r2, [r2, #0]
 8004dc6:	655a      	str	r2, [r3, #84]	; 0x54
 8004dc8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004dcc:	3b08      	subs	r3, #8
 8004dce:	f107 0218 	add.w	r2, r7, #24
 8004dd2:	3a18      	subs	r2, #24
 8004dd4:	6812      	ldr	r2, [r2, #0]
 8004dd6:	659a      	str	r2, [r3, #88]	; 0x58
 8004dd8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004ddc:	3b08      	subs	r3, #8
 8004dde:	f107 0218 	add.w	r2, r7, #24
 8004de2:	3a18      	subs	r2, #24
 8004de4:	6812      	ldr	r2, [r2, #0]
 8004de6:	65da      	str	r2, [r3, #92]	; 0x5c
 8004de8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004dec:	3b08      	subs	r3, #8
 8004dee:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004df2:	f102 0208 	add.w	r2, r2, #8
 8004df6:	6812      	ldr	r2, [r2, #0]
 8004df8:	661a      	str	r2, [r3, #96]	; 0x60
 8004dfa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004dfe:	3b08      	subs	r3, #8
 8004e00:	f107 0218 	add.w	r2, r7, #24
 8004e04:	3a18      	subs	r2, #24
 8004e06:	6812      	ldr	r2, [r2, #0]
 8004e08:	665a      	str	r2, [r3, #100]	; 0x64
 8004e0a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004e0e:	3b08      	subs	r3, #8
 8004e10:	f107 0218 	add.w	r2, r7, #24
 8004e14:	3a18      	subs	r2, #24
 8004e16:	6812      	ldr	r2, [r2, #0]
 8004e18:	669a      	str	r2, [r3, #104]	; 0x68
 8004e1a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004e1e:	3b08      	subs	r3, #8
 8004e20:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004e24:	f102 0208 	add.w	r2, r2, #8
 8004e28:	6812      	ldr	r2, [r2, #0]
 8004e2a:	66da      	str	r2, [r3, #108]	; 0x6c
 8004e2c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004e30:	3b08      	subs	r3, #8
 8004e32:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004e36:	f102 0208 	add.w	r2, r2, #8
 8004e3a:	6812      	ldr	r2, [r2, #0]
 8004e3c:	671a      	str	r2, [r3, #112]	; 0x70
 8004e3e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004e42:	3b08      	subs	r3, #8
 8004e44:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004e48:	f102 0208 	add.w	r2, r2, #8
 8004e4c:	6812      	ldr	r2, [r2, #0]
 8004e4e:	675a      	str	r2, [r3, #116]	; 0x74
 8004e50:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004e54:	3b08      	subs	r3, #8
 8004e56:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004e5a:	f102 0208 	add.w	r2, r2, #8
 8004e5e:	6812      	ldr	r2, [r2, #0]
 8004e60:	679a      	str	r2, [r3, #120]	; 0x78
 8004e62:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004e66:	3b08      	subs	r3, #8
 8004e68:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004e6c:	f102 0208 	add.w	r2, r2, #8
 8004e70:	6812      	ldr	r2, [r2, #0]
 8004e72:	67da      	str	r2, [r3, #124]	; 0x7c
 8004e74:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004e78:	3b08      	subs	r3, #8
 8004e7a:	f107 0218 	add.w	r2, r7, #24
 8004e7e:	3a18      	subs	r2, #24
 8004e80:	6812      	ldr	r2, [r2, #0]
 8004e82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004e86:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004e8a:	3b08      	subs	r3, #8
 8004e8c:	f107 0218 	add.w	r2, r7, #24
 8004e90:	3a18      	subs	r2, #24
 8004e92:	6812      	ldr	r2, [r2, #0]
 8004e94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8004e98:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004e9c:	3b08      	subs	r3, #8
 8004e9e:	f107 0218 	add.w	r2, r7, #24
 8004ea2:	3a18      	subs	r2, #24
 8004ea4:	6812      	ldr	r2, [r2, #0]
 8004ea6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8004eaa:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004eae:	3b08      	subs	r3, #8
 8004eb0:	f107 0218 	add.w	r2, r7, #24
 8004eb4:	3a18      	subs	r2, #24
 8004eb6:	6812      	ldr	r2, [r2, #0]
 8004eb8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004ebc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004ec0:	3b08      	subs	r3, #8
 8004ec2:	f107 0218 	add.w	r2, r7, #24
 8004ec6:	3a18      	subs	r2, #24
 8004ec8:	6812      	ldr	r2, [r2, #0]
 8004eca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004ece:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004ed2:	3b08      	subs	r3, #8
 8004ed4:	f107 0218 	add.w	r2, r7, #24
 8004ed8:	3a18      	subs	r2, #24
 8004eda:	6812      	ldr	r2, [r2, #0]
 8004edc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004ee0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004ee4:	3b08      	subs	r3, #8
 8004ee6:	f107 0218 	add.w	r2, r7, #24
 8004eea:	3a18      	subs	r2, #24
 8004eec:	6812      	ldr	r2, [r2, #0]
 8004eee:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004ef2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004ef6:	3b08      	subs	r3, #8
 8004ef8:	f107 0218 	add.w	r2, r7, #24
 8004efc:	3a18      	subs	r2, #24
 8004efe:	6812      	ldr	r2, [r2, #0]
 8004f00:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		textcolor, backcolor, backcolor, textcolor,  //@..@
		textcolor, textcolor, textcolor, textcolor,  //@@@@
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int spatie[10][4] = {
 8004f04:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004f08:	3b08      	subs	r3, #8
 8004f0a:	f107 0218 	add.w	r2, r7, #24
 8004f0e:	3a18      	subs	r2, #24
 8004f10:	6812      	ldr	r2, [r2, #0]
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004f18:	3b08      	subs	r3, #8
 8004f1a:	f107 0218 	add.w	r2, r7, #24
 8004f1e:	3a18      	subs	r2, #24
 8004f20:	6812      	ldr	r2, [r2, #0]
 8004f22:	605a      	str	r2, [r3, #4]
 8004f24:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004f28:	3b08      	subs	r3, #8
 8004f2a:	f107 0218 	add.w	r2, r7, #24
 8004f2e:	3a18      	subs	r2, #24
 8004f30:	6812      	ldr	r2, [r2, #0]
 8004f32:	609a      	str	r2, [r3, #8]
 8004f34:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004f38:	3b08      	subs	r3, #8
 8004f3a:	f107 0218 	add.w	r2, r7, #24
 8004f3e:	3a18      	subs	r2, #24
 8004f40:	6812      	ldr	r2, [r2, #0]
 8004f42:	60da      	str	r2, [r3, #12]
 8004f44:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004f48:	3b08      	subs	r3, #8
 8004f4a:	f107 0218 	add.w	r2, r7, #24
 8004f4e:	3a18      	subs	r2, #24
 8004f50:	6812      	ldr	r2, [r2, #0]
 8004f52:	611a      	str	r2, [r3, #16]
 8004f54:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004f58:	3b08      	subs	r3, #8
 8004f5a:	f107 0218 	add.w	r2, r7, #24
 8004f5e:	3a18      	subs	r2, #24
 8004f60:	6812      	ldr	r2, [r2, #0]
 8004f62:	615a      	str	r2, [r3, #20]
 8004f64:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004f68:	3b08      	subs	r3, #8
 8004f6a:	f107 0218 	add.w	r2, r7, #24
 8004f6e:	3a18      	subs	r2, #24
 8004f70:	6812      	ldr	r2, [r2, #0]
 8004f72:	619a      	str	r2, [r3, #24]
 8004f74:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004f78:	3b08      	subs	r3, #8
 8004f7a:	f107 0218 	add.w	r2, r7, #24
 8004f7e:	3a18      	subs	r2, #24
 8004f80:	6812      	ldr	r2, [r2, #0]
 8004f82:	61da      	str	r2, [r3, #28]
 8004f84:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004f88:	3b08      	subs	r3, #8
 8004f8a:	f107 0218 	add.w	r2, r7, #24
 8004f8e:	3a18      	subs	r2, #24
 8004f90:	6812      	ldr	r2, [r2, #0]
 8004f92:	621a      	str	r2, [r3, #32]
 8004f94:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004f98:	3b08      	subs	r3, #8
 8004f9a:	f107 0218 	add.w	r2, r7, #24
 8004f9e:	3a18      	subs	r2, #24
 8004fa0:	6812      	ldr	r2, [r2, #0]
 8004fa2:	625a      	str	r2, [r3, #36]	; 0x24
 8004fa4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004fa8:	3b08      	subs	r3, #8
 8004faa:	f107 0218 	add.w	r2, r7, #24
 8004fae:	3a18      	subs	r2, #24
 8004fb0:	6812      	ldr	r2, [r2, #0]
 8004fb2:	629a      	str	r2, [r3, #40]	; 0x28
 8004fb4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004fb8:	3b08      	subs	r3, #8
 8004fba:	f107 0218 	add.w	r2, r7, #24
 8004fbe:	3a18      	subs	r2, #24
 8004fc0:	6812      	ldr	r2, [r2, #0]
 8004fc2:	62da      	str	r2, [r3, #44]	; 0x2c
 8004fc4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004fc8:	3b08      	subs	r3, #8
 8004fca:	f107 0218 	add.w	r2, r7, #24
 8004fce:	3a18      	subs	r2, #24
 8004fd0:	6812      	ldr	r2, [r2, #0]
 8004fd2:	631a      	str	r2, [r3, #48]	; 0x30
 8004fd4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004fd8:	3b08      	subs	r3, #8
 8004fda:	f107 0218 	add.w	r2, r7, #24
 8004fde:	3a18      	subs	r2, #24
 8004fe0:	6812      	ldr	r2, [r2, #0]
 8004fe2:	635a      	str	r2, [r3, #52]	; 0x34
 8004fe4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004fe8:	3b08      	subs	r3, #8
 8004fea:	f107 0218 	add.w	r2, r7, #24
 8004fee:	3a18      	subs	r2, #24
 8004ff0:	6812      	ldr	r2, [r2, #0]
 8004ff2:	639a      	str	r2, [r3, #56]	; 0x38
 8004ff4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004ff8:	3b08      	subs	r3, #8
 8004ffa:	f107 0218 	add.w	r2, r7, #24
 8004ffe:	3a18      	subs	r2, #24
 8005000:	6812      	ldr	r2, [r2, #0]
 8005002:	63da      	str	r2, [r3, #60]	; 0x3c
 8005004:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005008:	3b08      	subs	r3, #8
 800500a:	f107 0218 	add.w	r2, r7, #24
 800500e:	3a18      	subs	r2, #24
 8005010:	6812      	ldr	r2, [r2, #0]
 8005012:	641a      	str	r2, [r3, #64]	; 0x40
 8005014:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005018:	3b08      	subs	r3, #8
 800501a:	f107 0218 	add.w	r2, r7, #24
 800501e:	3a18      	subs	r2, #24
 8005020:	6812      	ldr	r2, [r2, #0]
 8005022:	645a      	str	r2, [r3, #68]	; 0x44
 8005024:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005028:	3b08      	subs	r3, #8
 800502a:	f107 0218 	add.w	r2, r7, #24
 800502e:	3a18      	subs	r2, #24
 8005030:	6812      	ldr	r2, [r2, #0]
 8005032:	649a      	str	r2, [r3, #72]	; 0x48
 8005034:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005038:	3b08      	subs	r3, #8
 800503a:	f107 0218 	add.w	r2, r7, #24
 800503e:	3a18      	subs	r2, #24
 8005040:	6812      	ldr	r2, [r2, #0]
 8005042:	64da      	str	r2, [r3, #76]	; 0x4c
 8005044:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005048:	3b08      	subs	r3, #8
 800504a:	f107 0218 	add.w	r2, r7, #24
 800504e:	3a18      	subs	r2, #24
 8005050:	6812      	ldr	r2, [r2, #0]
 8005052:	651a      	str	r2, [r3, #80]	; 0x50
 8005054:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005058:	3b08      	subs	r3, #8
 800505a:	f107 0218 	add.w	r2, r7, #24
 800505e:	3a18      	subs	r2, #24
 8005060:	6812      	ldr	r2, [r2, #0]
 8005062:	655a      	str	r2, [r3, #84]	; 0x54
 8005064:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005068:	3b08      	subs	r3, #8
 800506a:	f107 0218 	add.w	r2, r7, #24
 800506e:	3a18      	subs	r2, #24
 8005070:	6812      	ldr	r2, [r2, #0]
 8005072:	659a      	str	r2, [r3, #88]	; 0x58
 8005074:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005078:	3b08      	subs	r3, #8
 800507a:	f107 0218 	add.w	r2, r7, #24
 800507e:	3a18      	subs	r2, #24
 8005080:	6812      	ldr	r2, [r2, #0]
 8005082:	65da      	str	r2, [r3, #92]	; 0x5c
 8005084:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005088:	3b08      	subs	r3, #8
 800508a:	f107 0218 	add.w	r2, r7, #24
 800508e:	3a18      	subs	r2, #24
 8005090:	6812      	ldr	r2, [r2, #0]
 8005092:	661a      	str	r2, [r3, #96]	; 0x60
 8005094:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005098:	3b08      	subs	r3, #8
 800509a:	f107 0218 	add.w	r2, r7, #24
 800509e:	3a18      	subs	r2, #24
 80050a0:	6812      	ldr	r2, [r2, #0]
 80050a2:	665a      	str	r2, [r3, #100]	; 0x64
 80050a4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80050a8:	3b08      	subs	r3, #8
 80050aa:	f107 0218 	add.w	r2, r7, #24
 80050ae:	3a18      	subs	r2, #24
 80050b0:	6812      	ldr	r2, [r2, #0]
 80050b2:	669a      	str	r2, [r3, #104]	; 0x68
 80050b4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80050b8:	3b08      	subs	r3, #8
 80050ba:	f107 0218 	add.w	r2, r7, #24
 80050be:	3a18      	subs	r2, #24
 80050c0:	6812      	ldr	r2, [r2, #0]
 80050c2:	66da      	str	r2, [r3, #108]	; 0x6c
 80050c4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80050c8:	3b08      	subs	r3, #8
 80050ca:	f107 0218 	add.w	r2, r7, #24
 80050ce:	3a18      	subs	r2, #24
 80050d0:	6812      	ldr	r2, [r2, #0]
 80050d2:	671a      	str	r2, [r3, #112]	; 0x70
 80050d4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80050d8:	3b08      	subs	r3, #8
 80050da:	f107 0218 	add.w	r2, r7, #24
 80050de:	3a18      	subs	r2, #24
 80050e0:	6812      	ldr	r2, [r2, #0]
 80050e2:	675a      	str	r2, [r3, #116]	; 0x74
 80050e4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80050e8:	3b08      	subs	r3, #8
 80050ea:	f107 0218 	add.w	r2, r7, #24
 80050ee:	3a18      	subs	r2, #24
 80050f0:	6812      	ldr	r2, [r2, #0]
 80050f2:	679a      	str	r2, [r3, #120]	; 0x78
 80050f4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80050f8:	3b08      	subs	r3, #8
 80050fa:	f107 0218 	add.w	r2, r7, #24
 80050fe:	3a18      	subs	r2, #24
 8005100:	6812      	ldr	r2, [r2, #0]
 8005102:	67da      	str	r2, [r3, #124]	; 0x7c
 8005104:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005108:	3b08      	subs	r3, #8
 800510a:	f107 0218 	add.w	r2, r7, #24
 800510e:	3a18      	subs	r2, #24
 8005110:	6812      	ldr	r2, [r2, #0]
 8005112:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005116:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800511a:	3b08      	subs	r3, #8
 800511c:	f107 0218 	add.w	r2, r7, #24
 8005120:	3a18      	subs	r2, #24
 8005122:	6812      	ldr	r2, [r2, #0]
 8005124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8005128:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800512c:	3b08      	subs	r3, #8
 800512e:	f107 0218 	add.w	r2, r7, #24
 8005132:	3a18      	subs	r2, #24
 8005134:	6812      	ldr	r2, [r2, #0]
 8005136:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800513a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800513e:	3b08      	subs	r3, #8
 8005140:	f107 0218 	add.w	r2, r7, #24
 8005144:	3a18      	subs	r2, #24
 8005146:	6812      	ldr	r2, [r2, #0]
 8005148:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800514c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005150:	3b08      	subs	r3, #8
 8005152:	f107 0218 	add.w	r2, r7, #24
 8005156:	3a18      	subs	r2, #24
 8005158:	6812      	ldr	r2, [r2, #0]
 800515a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800515e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005162:	3b08      	subs	r3, #8
 8005164:	f107 0218 	add.w	r2, r7, #24
 8005168:	3a18      	subs	r2, #24
 800516a:	6812      	ldr	r2, [r2, #0]
 800516c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005170:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005174:	3b08      	subs	r3, #8
 8005176:	f107 0218 	add.w	r2, r7, #24
 800517a:	3a18      	subs	r2, #24
 800517c:	6812      	ldr	r2, [r2, #0]
 800517e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8005182:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005186:	3b08      	subs	r3, #8
 8005188:	f107 0218 	add.w	r2, r7, #24
 800518c:	3a18      	subs	r2, #24
 800518e:	6812      	ldr	r2, [r2, #0]
 8005190:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int komma[13][3]={
 8005194:	f107 0318 	add.w	r3, r7, #24
 8005198:	3b04      	subs	r3, #4
 800519a:	f107 0218 	add.w	r2, r7, #24
 800519e:	3a18      	subs	r2, #24
 80051a0:	6812      	ldr	r2, [r2, #0]
 80051a2:	601a      	str	r2, [r3, #0]
 80051a4:	f107 0318 	add.w	r3, r7, #24
 80051a8:	3b04      	subs	r3, #4
 80051aa:	f107 0218 	add.w	r2, r7, #24
 80051ae:	3a18      	subs	r2, #24
 80051b0:	6812      	ldr	r2, [r2, #0]
 80051b2:	605a      	str	r2, [r3, #4]
 80051b4:	f107 0318 	add.w	r3, r7, #24
 80051b8:	3b04      	subs	r3, #4
 80051ba:	f107 0218 	add.w	r2, r7, #24
 80051be:	3a18      	subs	r2, #24
 80051c0:	6812      	ldr	r2, [r2, #0]
 80051c2:	609a      	str	r2, [r3, #8]
 80051c4:	f107 0318 	add.w	r3, r7, #24
 80051c8:	3b04      	subs	r3, #4
 80051ca:	f107 0218 	add.w	r2, r7, #24
 80051ce:	3a18      	subs	r2, #24
 80051d0:	6812      	ldr	r2, [r2, #0]
 80051d2:	60da      	str	r2, [r3, #12]
 80051d4:	f107 0318 	add.w	r3, r7, #24
 80051d8:	3b04      	subs	r3, #4
 80051da:	f107 0218 	add.w	r2, r7, #24
 80051de:	3a18      	subs	r2, #24
 80051e0:	6812      	ldr	r2, [r2, #0]
 80051e2:	611a      	str	r2, [r3, #16]
 80051e4:	f107 0318 	add.w	r3, r7, #24
 80051e8:	3b04      	subs	r3, #4
 80051ea:	f107 0218 	add.w	r2, r7, #24
 80051ee:	3a18      	subs	r2, #24
 80051f0:	6812      	ldr	r2, [r2, #0]
 80051f2:	615a      	str	r2, [r3, #20]
 80051f4:	f107 0318 	add.w	r3, r7, #24
 80051f8:	3b04      	subs	r3, #4
 80051fa:	f107 0218 	add.w	r2, r7, #24
 80051fe:	3a18      	subs	r2, #24
 8005200:	6812      	ldr	r2, [r2, #0]
 8005202:	619a      	str	r2, [r3, #24]
 8005204:	f107 0318 	add.w	r3, r7, #24
 8005208:	3b04      	subs	r3, #4
 800520a:	f107 0218 	add.w	r2, r7, #24
 800520e:	3a18      	subs	r2, #24
 8005210:	6812      	ldr	r2, [r2, #0]
 8005212:	61da      	str	r2, [r3, #28]
 8005214:	f107 0318 	add.w	r3, r7, #24
 8005218:	3b04      	subs	r3, #4
 800521a:	f107 0218 	add.w	r2, r7, #24
 800521e:	3a18      	subs	r2, #24
 8005220:	6812      	ldr	r2, [r2, #0]
 8005222:	621a      	str	r2, [r3, #32]
 8005224:	f107 0318 	add.w	r3, r7, #24
 8005228:	3b04      	subs	r3, #4
 800522a:	f107 0218 	add.w	r2, r7, #24
 800522e:	3a18      	subs	r2, #24
 8005230:	6812      	ldr	r2, [r2, #0]
 8005232:	625a      	str	r2, [r3, #36]	; 0x24
 8005234:	f107 0318 	add.w	r3, r7, #24
 8005238:	3b04      	subs	r3, #4
 800523a:	f107 0218 	add.w	r2, r7, #24
 800523e:	3a18      	subs	r2, #24
 8005240:	6812      	ldr	r2, [r2, #0]
 8005242:	629a      	str	r2, [r3, #40]	; 0x28
 8005244:	f107 0318 	add.w	r3, r7, #24
 8005248:	3b04      	subs	r3, #4
 800524a:	f107 0218 	add.w	r2, r7, #24
 800524e:	3a18      	subs	r2, #24
 8005250:	6812      	ldr	r2, [r2, #0]
 8005252:	62da      	str	r2, [r3, #44]	; 0x2c
 8005254:	f107 0318 	add.w	r3, r7, #24
 8005258:	3b04      	subs	r3, #4
 800525a:	f107 0218 	add.w	r2, r7, #24
 800525e:	3a18      	subs	r2, #24
 8005260:	6812      	ldr	r2, [r2, #0]
 8005262:	631a      	str	r2, [r3, #48]	; 0x30
 8005264:	f107 0318 	add.w	r3, r7, #24
 8005268:	3b04      	subs	r3, #4
 800526a:	f107 0218 	add.w	r2, r7, #24
 800526e:	3a18      	subs	r2, #24
 8005270:	6812      	ldr	r2, [r2, #0]
 8005272:	635a      	str	r2, [r3, #52]	; 0x34
 8005274:	f107 0318 	add.w	r3, r7, #24
 8005278:	3b04      	subs	r3, #4
 800527a:	f107 0218 	add.w	r2, r7, #24
 800527e:	3a18      	subs	r2, #24
 8005280:	6812      	ldr	r2, [r2, #0]
 8005282:	639a      	str	r2, [r3, #56]	; 0x38
 8005284:	f107 0318 	add.w	r3, r7, #24
 8005288:	3b04      	subs	r3, #4
 800528a:	f107 0218 	add.w	r2, r7, #24
 800528e:	3a18      	subs	r2, #24
 8005290:	6812      	ldr	r2, [r2, #0]
 8005292:	63da      	str	r2, [r3, #60]	; 0x3c
 8005294:	f107 0318 	add.w	r3, r7, #24
 8005298:	3b04      	subs	r3, #4
 800529a:	f107 0218 	add.w	r2, r7, #24
 800529e:	3a18      	subs	r2, #24
 80052a0:	6812      	ldr	r2, [r2, #0]
 80052a2:	641a      	str	r2, [r3, #64]	; 0x40
 80052a4:	f107 0318 	add.w	r3, r7, #24
 80052a8:	3b04      	subs	r3, #4
 80052aa:	f107 0218 	add.w	r2, r7, #24
 80052ae:	3a18      	subs	r2, #24
 80052b0:	6812      	ldr	r2, [r2, #0]
 80052b2:	645a      	str	r2, [r3, #68]	; 0x44
 80052b4:	f107 0318 	add.w	r3, r7, #24
 80052b8:	3b04      	subs	r3, #4
 80052ba:	f107 0218 	add.w	r2, r7, #24
 80052be:	3a18      	subs	r2, #24
 80052c0:	6812      	ldr	r2, [r2, #0]
 80052c2:	649a      	str	r2, [r3, #72]	; 0x48
 80052c4:	f107 0318 	add.w	r3, r7, #24
 80052c8:	3b04      	subs	r3, #4
 80052ca:	f107 0218 	add.w	r2, r7, #24
 80052ce:	3a18      	subs	r2, #24
 80052d0:	6812      	ldr	r2, [r2, #0]
 80052d2:	64da      	str	r2, [r3, #76]	; 0x4c
 80052d4:	f107 0318 	add.w	r3, r7, #24
 80052d8:	3b04      	subs	r3, #4
 80052da:	f107 0218 	add.w	r2, r7, #24
 80052de:	3a18      	subs	r2, #24
 80052e0:	6812      	ldr	r2, [r2, #0]
 80052e2:	651a      	str	r2, [r3, #80]	; 0x50
 80052e4:	f107 0318 	add.w	r3, r7, #24
 80052e8:	3b04      	subs	r3, #4
 80052ea:	f107 0218 	add.w	r2, r7, #24
 80052ee:	3a18      	subs	r2, #24
 80052f0:	6812      	ldr	r2, [r2, #0]
 80052f2:	655a      	str	r2, [r3, #84]	; 0x54
 80052f4:	f107 0318 	add.w	r3, r7, #24
 80052f8:	3b04      	subs	r3, #4
 80052fa:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80052fe:	f102 0208 	add.w	r2, r2, #8
 8005302:	6812      	ldr	r2, [r2, #0]
 8005304:	659a      	str	r2, [r3, #88]	; 0x58
 8005306:	f107 0318 	add.w	r3, r7, #24
 800530a:	3b04      	subs	r3, #4
 800530c:	f107 0218 	add.w	r2, r7, #24
 8005310:	3a18      	subs	r2, #24
 8005312:	6812      	ldr	r2, [r2, #0]
 8005314:	65da      	str	r2, [r3, #92]	; 0x5c
 8005316:	f107 0318 	add.w	r3, r7, #24
 800531a:	3b04      	subs	r3, #4
 800531c:	f107 0218 	add.w	r2, r7, #24
 8005320:	3a18      	subs	r2, #24
 8005322:	6812      	ldr	r2, [r2, #0]
 8005324:	661a      	str	r2, [r3, #96]	; 0x60
 8005326:	f107 0318 	add.w	r3, r7, #24
 800532a:	3b04      	subs	r3, #4
 800532c:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8005330:	f102 0208 	add.w	r2, r2, #8
 8005334:	6812      	ldr	r2, [r2, #0]
 8005336:	665a      	str	r2, [r3, #100]	; 0x64
 8005338:	f107 0318 	add.w	r3, r7, #24
 800533c:	3b04      	subs	r3, #4
 800533e:	f107 0218 	add.w	r2, r7, #24
 8005342:	3a18      	subs	r2, #24
 8005344:	6812      	ldr	r2, [r2, #0]
 8005346:	669a      	str	r2, [r3, #104]	; 0x68
 8005348:	f107 0318 	add.w	r3, r7, #24
 800534c:	3b04      	subs	r3, #4
 800534e:	f107 0218 	add.w	r2, r7, #24
 8005352:	3a18      	subs	r2, #24
 8005354:	6812      	ldr	r2, [r2, #0]
 8005356:	66da      	str	r2, [r3, #108]	; 0x6c
 8005358:	f107 0318 	add.w	r3, r7, #24
 800535c:	3b04      	subs	r3, #4
 800535e:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8005362:	f102 0208 	add.w	r2, r2, #8
 8005366:	6812      	ldr	r2, [r2, #0]
 8005368:	671a      	str	r2, [r3, #112]	; 0x70
 800536a:	f107 0318 	add.w	r3, r7, #24
 800536e:	3b04      	subs	r3, #4
 8005370:	f107 0218 	add.w	r2, r7, #24
 8005374:	3a18      	subs	r2, #24
 8005376:	6812      	ldr	r2, [r2, #0]
 8005378:	675a      	str	r2, [r3, #116]	; 0x74
 800537a:	f107 0318 	add.w	r3, r7, #24
 800537e:	3b04      	subs	r3, #4
 8005380:	f107 0218 	add.w	r2, r7, #24
 8005384:	3a18      	subs	r2, #24
 8005386:	6812      	ldr	r2, [r2, #0]
 8005388:	679a      	str	r2, [r3, #120]	; 0x78
 800538a:	f107 0318 	add.w	r3, r7, #24
 800538e:	3b04      	subs	r3, #4
 8005390:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8005394:	f102 0208 	add.w	r2, r2, #8
 8005398:	6812      	ldr	r2, [r2, #0]
 800539a:	67da      	str	r2, [r3, #124]	; 0x7c
 800539c:	f107 0318 	add.w	r3, r7, #24
 80053a0:	3b04      	subs	r3, #4
 80053a2:	f107 0218 	add.w	r2, r7, #24
 80053a6:	3a18      	subs	r2, #24
 80053a8:	6812      	ldr	r2, [r2, #0]
 80053aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80053ae:	f107 0318 	add.w	r3, r7, #24
 80053b2:	3b04      	subs	r3, #4
 80053b4:	f107 0218 	add.w	r2, r7, #24
 80053b8:	3a18      	subs	r2, #24
 80053ba:	6812      	ldr	r2, [r2, #0]
 80053bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80053c0:	f107 0318 	add.w	r3, r7, #24
 80053c4:	3b04      	subs	r3, #4
 80053c6:	f107 0218 	add.w	r2, r7, #24
 80053ca:	3a18      	subs	r2, #24
 80053cc:	6812      	ldr	r2, [r2, #0]
 80053ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80053d2:	f107 0318 	add.w	r3, r7, #24
 80053d6:	3b04      	subs	r3, #4
 80053d8:	f107 0218 	add.w	r2, r7, #24
 80053dc:	3a18      	subs	r2, #24
 80053de:	6812      	ldr	r2, [r2, #0]
 80053e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80053e4:	f107 0318 	add.w	r3, r7, #24
 80053e8:	3b04      	subs	r3, #4
 80053ea:	f107 0218 	add.w	r2, r7, #24
 80053ee:	3a18      	subs	r2, #24
 80053f0:	6812      	ldr	r2, [r2, #0]
 80053f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80053f6:	f107 0318 	add.w	r3, r7, #24
 80053fa:	3b04      	subs	r3, #4
 80053fc:	f107 0218 	add.w	r2, r7, #24
 8005400:	3a18      	subs	r2, #24
 8005402:	6812      	ldr	r2, [r2, #0]
 8005404:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005408:	f107 0318 	add.w	r3, r7, #24
 800540c:	3b04      	subs	r3, #4
 800540e:	f107 0218 	add.w	r2, r7, #24
 8005412:	3a18      	subs	r2, #24
 8005414:	6812      	ldr	r2, [r2, #0]
 8005416:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		backcolor, textcolor, backcolor, 	//....
		backcolor, backcolor, backcolor, 	//....
		backcolor, backcolor, backcolor, 	//....
	};

	switch (letter)
 800541a:	f107 0318 	add.w	r3, r7, #24
 800541e:	3b11      	subs	r3, #17
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	3b20      	subs	r3, #32
 8005424:	2b5a      	cmp	r3, #90	; 0x5a
 8005426:	f201 84e3 	bhi.w	8006df0 <letter_select+0x5ecc>
 800542a:	a201      	add	r2, pc, #4	; (adr r2, 8005430 <letter_select+0x450c>)
 800542c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005430:	08006c41 	.word	0x08006c41
 8005434:	08006df1 	.word	0x08006df1
 8005438:	08006df1 	.word	0x08006df1
 800543c:	08006df1 	.word	0x08006df1
 8005440:	08006df1 	.word	0x08006df1
 8005444:	08006df1 	.word	0x08006df1
 8005448:	08006df1 	.word	0x08006df1
 800544c:	08006df1 	.word	0x08006df1
 8005450:	08006df1 	.word	0x08006df1
 8005454:	08006df1 	.word	0x08006df1
 8005458:	08006df1 	.word	0x08006df1
 800545c:	08006df1 	.word	0x08006df1
 8005460:	08006d07 	.word	0x08006d07
 8005464:	08006df1 	.word	0x08006df1
 8005468:	08006df1 	.word	0x08006df1
 800546c:	08006df1 	.word	0x08006df1
 8005470:	08006df1 	.word	0x08006df1
 8005474:	08006df1 	.word	0x08006df1
 8005478:	08006df1 	.word	0x08006df1
 800547c:	08006df1 	.word	0x08006df1
 8005480:	08006df1 	.word	0x08006df1
 8005484:	08006df1 	.word	0x08006df1
 8005488:	08006df1 	.word	0x08006df1
 800548c:	08006df1 	.word	0x08006df1
 8005490:	08006df1 	.word	0x08006df1
 8005494:	08006df1 	.word	0x08006df1
 8005498:	08006df1 	.word	0x08006df1
 800549c:	08006df1 	.word	0x08006df1
 80054a0:	08006df1 	.word	0x08006df1
 80054a4:	08006df1 	.word	0x08006df1
 80054a8:	08006df1 	.word	0x08006df1
 80054ac:	08006df1 	.word	0x08006df1
 80054b0:	08006df1 	.word	0x08006df1
 80054b4:	08006df1 	.word	0x08006df1
 80054b8:	08006df1 	.word	0x08006df1
 80054bc:	08006df1 	.word	0x08006df1
 80054c0:	08006df1 	.word	0x08006df1
 80054c4:	08006df1 	.word	0x08006df1
 80054c8:	08006df1 	.word	0x08006df1
 80054cc:	08006df1 	.word	0x08006df1
 80054d0:	08006df1 	.word	0x08006df1
 80054d4:	08006df1 	.word	0x08006df1
 80054d8:	08006df1 	.word	0x08006df1
 80054dc:	08006df1 	.word	0x08006df1
 80054e0:	08006df1 	.word	0x08006df1
 80054e4:	08006df1 	.word	0x08006df1
 80054e8:	08006df1 	.word	0x08006df1
 80054ec:	08006df1 	.word	0x08006df1
 80054f0:	08006df1 	.word	0x08006df1
 80054f4:	08006df1 	.word	0x08006df1
 80054f8:	08006df1 	.word	0x08006df1
 80054fc:	08006df1 	.word	0x08006df1
 8005500:	08006df1 	.word	0x08006df1
 8005504:	08006df1 	.word	0x08006df1
 8005508:	08006df1 	.word	0x08006df1
 800550c:	08006df1 	.word	0x08006df1
 8005510:	08006df1 	.word	0x08006df1
 8005514:	08006df1 	.word	0x08006df1
 8005518:	08006df1 	.word	0x08006df1
 800551c:	08006df1 	.word	0x08006df1
 8005520:	08006df1 	.word	0x08006df1
 8005524:	08006df1 	.word	0x08006df1
 8005528:	08006df1 	.word	0x08006df1
 800552c:	08006df1 	.word	0x08006df1
 8005530:	08006df1 	.word	0x08006df1
 8005534:	0800559d 	.word	0x0800559d
 8005538:	08005687 	.word	0x08005687
 800553c:	08005771 	.word	0x08005771
 8005540:	08005837 	.word	0x08005837
 8005544:	0800591d 	.word	0x0800591d
 8005548:	08005a03 	.word	0x08005a03
 800554c:	08005ae9 	.word	0x08005ae9
 8005550:	08005baf 	.word	0x08005baf
 8005554:	08005c95 	.word	0x08005c95
 8005558:	08005d7f 	.word	0x08005d7f
 800555c:	08005e65 	.word	0x08005e65
 8005560:	08005f2b 	.word	0x08005f2b
 8005564:	08006011 	.word	0x08006011
 8005568:	080060f7 	.word	0x080060f7
 800556c:	080061dd 	.word	0x080061dd
 8005570:	080062a3 	.word	0x080062a3
 8005574:	08006389 	.word	0x08006389
 8005578:	0800646f 	.word	0x0800646f
 800557c:	08006555 	.word	0x08006555
 8005580:	08006619 	.word	0x08006619
 8005584:	08006701 	.word	0x08006701
 8005588:	080067e5 	.word	0x080067e5
 800558c:	080068c9 	.word	0x080068c9
 8005590:	0800698d 	.word	0x0800698d
 8005594:	08006a71 	.word	0x08006a71
 8005598:	08006b5b 	.word	0x08006b5b
	{
	case 'a':
		for (int i=0; i<10; i++)
 800559c:	2300      	movs	r3, #0
 800559e:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 80055a2:	f102 0214 	add.w	r2, r2, #20
 80055a6:	6013      	str	r3, [r2, #0]
 80055a8:	e064      	b.n	8005674 <letter_select+0x4750>
		{
			for (int j=0; j<4; j++)
 80055aa:	2300      	movs	r3, #0
 80055ac:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 80055b0:	f102 0210 	add.w	r2, r2, #16
 80055b4:	6013      	str	r3, [r2, #0]
 80055b6:	e04b      	b.n	8005650 <letter_select+0x472c>
			{
				int x_pos = j + x;
 80055b8:	f107 0318 	add.w	r3, r7, #24
 80055bc:	3b0c      	subs	r3, #12
 80055be:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 80055c2:	f102 0210 	add.w	r2, r2, #16
 80055c6:	6812      	ldr	r2, [r2, #0]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4413      	add	r3, r2
 80055cc:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80055d0:	f102 0214 	add.w	r2, r2, #20
 80055d4:	6013      	str	r3, [r2, #0]
				int y_pos = i + y;
 80055d6:	f107 0318 	add.w	r3, r7, #24
 80055da:	3b10      	subs	r3, #16
 80055dc:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 80055e0:	f102 0214 	add.w	r2, r2, #20
 80055e4:	6812      	ldr	r2, [r2, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4413      	add	r3, r2
 80055ea:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80055ee:	f102 0210 	add.w	r2, r2, #16
 80055f2:	6013      	str	r3, [r2, #0]
				UB_VGA_SetPixel(x_pos, y_pos, letter_A[i][j]);
 80055f4:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 80055f8:	f103 0314 	add.w	r3, r3, #20
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	b298      	uxth	r0, r3
 8005600:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8005604:	f103 0310 	add.w	r3, r3, #16
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	b29c      	uxth	r4, r3
 800560c:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8005610:	f103 0318 	add.w	r3, r3, #24
 8005614:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8005618:	f102 0214 	add.w	r2, r2, #20
 800561c:	6812      	ldr	r2, [r2, #0]
 800561e:	0091      	lsls	r1, r2, #2
 8005620:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8005624:	f102 0210 	add.w	r2, r2, #16
 8005628:	6812      	ldr	r2, [r2, #0]
 800562a:	440a      	add	r2, r1
 800562c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005630:	b2db      	uxtb	r3, r3
 8005632:	461a      	mov	r2, r3
 8005634:	4621      	mov	r1, r4
 8005636:	f002 fd4f 	bl	80080d8 <UB_VGA_SetPixel>
			for (int j=0; j<4; j++)
 800563a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800563e:	f103 0310 	add.w	r3, r3, #16
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3301      	adds	r3, #1
 8005646:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800564a:	f102 0210 	add.w	r2, r2, #16
 800564e:	6013      	str	r3, [r2, #0]
 8005650:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8005654:	f103 0310 	add.w	r3, r3, #16
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b03      	cmp	r3, #3
 800565c:	ddac      	ble.n	80055b8 <letter_select+0x4694>
		for (int i=0; i<10; i++)
 800565e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8005662:	f103 0314 	add.w	r3, r3, #20
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	3301      	adds	r3, #1
 800566a:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800566e:	f102 0214 	add.w	r2, r2, #20
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8005678:	f103 0314 	add.w	r3, r3, #20
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b09      	cmp	r3, #9
 8005680:	dd93      	ble.n	80055aa <letter_select+0x4686>
			}
		}
		break;
 8005682:	f001 bbb5 	b.w	8006df0 <letter_select+0x5ecc>
	case 'b':
		for (int i=0; i<10; i++)
 8005686:	2300      	movs	r3, #0
 8005688:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800568c:	f102 020c 	add.w	r2, r2, #12
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	e064      	b.n	800575e <letter_select+0x483a>
		{
			for (int j=0; j<4; j++)
 8005694:	2300      	movs	r3, #0
 8005696:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800569a:	f102 0208 	add.w	r2, r2, #8
 800569e:	6013      	str	r3, [r2, #0]
 80056a0:	e04b      	b.n	800573a <letter_select+0x4816>
			{
				int x_pos = j + x;
 80056a2:	f107 0318 	add.w	r3, r7, #24
 80056a6:	3b0c      	subs	r3, #12
 80056a8:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 80056ac:	f102 0208 	add.w	r2, r2, #8
 80056b0:	6812      	ldr	r2, [r2, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4413      	add	r3, r2
 80056b6:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80056ba:	f102 020c 	add.w	r2, r2, #12
 80056be:	6013      	str	r3, [r2, #0]
				int y_pos = i + y;
 80056c0:	f107 0318 	add.w	r3, r7, #24
 80056c4:	3b10      	subs	r3, #16
 80056c6:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 80056ca:	f102 020c 	add.w	r2, r2, #12
 80056ce:	6812      	ldr	r2, [r2, #0]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4413      	add	r3, r2
 80056d4:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80056d8:	f102 0208 	add.w	r2, r2, #8
 80056dc:	6013      	str	r3, [r2, #0]
				UB_VGA_SetPixel(x_pos, y_pos, letter_B[i][j]);
 80056de:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 80056e2:	f103 030c 	add.w	r3, r3, #12
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	b298      	uxth	r0, r3
 80056ea:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 80056ee:	f103 0308 	add.w	r3, r3, #8
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	b29c      	uxth	r4, r3
 80056f6:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80056fa:	f103 0318 	add.w	r3, r3, #24
 80056fe:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8005702:	f102 020c 	add.w	r2, r2, #12
 8005706:	6812      	ldr	r2, [r2, #0]
 8005708:	0091      	lsls	r1, r2, #2
 800570a:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800570e:	f102 0208 	add.w	r2, r2, #8
 8005712:	6812      	ldr	r2, [r2, #0]
 8005714:	440a      	add	r2, r1
 8005716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800571a:	b2db      	uxtb	r3, r3
 800571c:	461a      	mov	r2, r3
 800571e:	4621      	mov	r1, r4
 8005720:	f002 fcda 	bl	80080d8 <UB_VGA_SetPixel>
			for (int j=0; j<4; j++)
 8005724:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8005728:	f103 0308 	add.w	r3, r3, #8
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	3301      	adds	r3, #1
 8005730:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8005734:	f102 0208 	add.w	r2, r2, #8
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800573e:	f103 0308 	add.w	r3, r3, #8
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2b03      	cmp	r3, #3
 8005746:	ddac      	ble.n	80056a2 <letter_select+0x477e>
		for (int i=0; i<10; i++)
 8005748:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800574c:	f103 030c 	add.w	r3, r3, #12
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	3301      	adds	r3, #1
 8005754:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8005758:	f102 020c 	add.w	r2, r2, #12
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8005762:	f103 030c 	add.w	r3, r3, #12
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b09      	cmp	r3, #9
 800576a:	dd93      	ble.n	8005694 <letter_select+0x4770>
			}
		}
		break;
 800576c:	f001 bb40 	b.w	8006df0 <letter_select+0x5ecc>
	case 'c':
		for (int i=0; i<10; i++)
 8005770:	2300      	movs	r3, #0
 8005772:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8005776:	f102 0204 	add.w	r2, r2, #4
 800577a:	6013      	str	r3, [r2, #0]
 800577c:	e052      	b.n	8005824 <letter_select+0x4900>
		{
			for (int j=0; j<4; j++)
 800577e:	2300      	movs	r3, #0
 8005780:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8005784:	6013      	str	r3, [r2, #0]
 8005786:	e03d      	b.n	8005804 <letter_select+0x48e0>
			{
				int x_pos = j + x;
 8005788:	f107 0318 	add.w	r3, r7, #24
 800578c:	3b0c      	subs	r3, #12
 800578e:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8005792:	6812      	ldr	r2, [r2, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4413      	add	r3, r2
 8005798:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 800579c:	f102 0204 	add.w	r2, r2, #4
 80057a0:	6013      	str	r3, [r2, #0]
				int y_pos = i + y;
 80057a2:	f107 0318 	add.w	r3, r7, #24
 80057a6:	3b10      	subs	r3, #16
 80057a8:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 80057ac:	f102 0204 	add.w	r2, r2, #4
 80057b0:	6812      	ldr	r2, [r2, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4413      	add	r3, r2
 80057b6:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 80057ba:	6013      	str	r3, [r2, #0]
				UB_VGA_SetPixel(x_pos, y_pos, letter_C[i][j]);
 80057bc:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 80057c0:	f103 0304 	add.w	r3, r3, #4
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	b298      	uxth	r0, r3
 80057c8:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	b29c      	uxth	r4, r3
 80057d0:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 80057d4:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 80057d8:	f102 0204 	add.w	r2, r2, #4
 80057dc:	6812      	ldr	r2, [r2, #0]
 80057de:	0091      	lsls	r1, r2, #2
 80057e0:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 80057e4:	6812      	ldr	r2, [r2, #0]
 80057e6:	440a      	add	r2, r1
 80057e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	461a      	mov	r2, r3
 80057f0:	4621      	mov	r1, r4
 80057f2:	f002 fc71 	bl	80080d8 <UB_VGA_SetPixel>
			for (int j=0; j<4; j++)
 80057f6:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3301      	adds	r3, #1
 80057fe:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b03      	cmp	r3, #3
 800580c:	ddbc      	ble.n	8005788 <letter_select+0x4864>
		for (int i=0; i<10; i++)
 800580e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8005812:	f103 0304 	add.w	r3, r3, #4
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3301      	adds	r3, #1
 800581a:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800581e:	f102 0204 	add.w	r2, r2, #4
 8005822:	6013      	str	r3, [r2, #0]
 8005824:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8005828:	f103 0304 	add.w	r3, r3, #4
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2b09      	cmp	r3, #9
 8005830:	dda5      	ble.n	800577e <letter_select+0x485a>
			}
		}
		break;
 8005832:	f001 badd 	b.w	8006df0 <letter_select+0x5ecc>
	case 'd':
		for (int i=0; i<10; i++)
 8005836:	2300      	movs	r3, #0
 8005838:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800583c:	f102 021c 	add.w	r2, r2, #28
 8005840:	6013      	str	r3, [r2, #0]
 8005842:	e062      	b.n	800590a <letter_select+0x49e6>
		{
			for (int j=0; j<4; j++)
 8005844:	2300      	movs	r3, #0
 8005846:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800584a:	f102 0218 	add.w	r2, r2, #24
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	e049      	b.n	80058e6 <letter_select+0x49c2>
			{
				int x_pos = j + x;
 8005852:	f107 0318 	add.w	r3, r7, #24
 8005856:	3b0c      	subs	r3, #12
 8005858:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800585c:	f102 0218 	add.w	r2, r2, #24
 8005860:	6812      	ldr	r2, [r2, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4413      	add	r3, r2
 8005866:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800586a:	f102 021c 	add.w	r2, r2, #28
 800586e:	6013      	str	r3, [r2, #0]
				int y_pos = i + y;
 8005870:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8005874:	f102 0218 	add.w	r2, r2, #24
 8005878:	f107 0318 	add.w	r3, r7, #24
 800587c:	3b10      	subs	r3, #16
 800587e:	f507 519a 	add.w	r1, r7, #4928	; 0x1340
 8005882:	f101 011c 	add.w	r1, r1, #28
 8005886:	6809      	ldr	r1, [r1, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	440b      	add	r3, r1
 800588c:	6013      	str	r3, [r2, #0]
				UB_VGA_SetPixel(x_pos, y_pos, letter_D[i][j]);
 800588e:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8005892:	f103 031c 	add.w	r3, r3, #28
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	b298      	uxth	r0, r3
 800589a:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800589e:	f103 0318 	add.w	r3, r3, #24
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	b29c      	uxth	r4, r3
 80058a6:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 80058aa:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80058ae:	f102 021c 	add.w	r2, r2, #28
 80058b2:	6812      	ldr	r2, [r2, #0]
 80058b4:	0091      	lsls	r1, r2, #2
 80058b6:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80058ba:	f102 0218 	add.w	r2, r2, #24
 80058be:	6812      	ldr	r2, [r2, #0]
 80058c0:	440a      	add	r2, r1
 80058c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	461a      	mov	r2, r3
 80058ca:	4621      	mov	r1, r4
 80058cc:	f002 fc04 	bl	80080d8 <UB_VGA_SetPixel>
			for (int j=0; j<4; j++)
 80058d0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80058d4:	f103 0318 	add.w	r3, r3, #24
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	3301      	adds	r3, #1
 80058dc:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80058e0:	f102 0218 	add.w	r2, r2, #24
 80058e4:	6013      	str	r3, [r2, #0]
 80058e6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80058ea:	f103 0318 	add.w	r3, r3, #24
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b03      	cmp	r3, #3
 80058f2:	ddae      	ble.n	8005852 <letter_select+0x492e>
		for (int i=0; i<10; i++)
 80058f4:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80058f8:	f103 031c 	add.w	r3, r3, #28
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	3301      	adds	r3, #1
 8005900:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8005904:	f102 021c 	add.w	r2, r2, #28
 8005908:	6013      	str	r3, [r2, #0]
 800590a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800590e:	f103 031c 	add.w	r3, r3, #28
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b09      	cmp	r3, #9
 8005916:	dd95      	ble.n	8005844 <letter_select+0x4920>
			}
		}
		break;
 8005918:	f001 ba6a 	b.w	8006df0 <letter_select+0x5ecc>
	case 'e':
		for (int i=0; i<10; i++)
 800591c:	2300      	movs	r3, #0
 800591e:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8005922:	f102 0214 	add.w	r2, r2, #20
 8005926:	6013      	str	r3, [r2, #0]
 8005928:	e062      	b.n	80059f0 <letter_select+0x4acc>
		{
			for (int j=0; j<4; j++)
 800592a:	2300      	movs	r3, #0
 800592c:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8005930:	f102 0210 	add.w	r2, r2, #16
 8005934:	6013      	str	r3, [r2, #0]
 8005936:	e049      	b.n	80059cc <letter_select+0x4aa8>
			{
				int x_pos = j + x;
 8005938:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800593c:	f102 0214 	add.w	r2, r2, #20
 8005940:	f107 0318 	add.w	r3, r7, #24
 8005944:	3b0c      	subs	r3, #12
 8005946:	f507 519a 	add.w	r1, r7, #4928	; 0x1340
 800594a:	f101 0110 	add.w	r1, r1, #16
 800594e:	6809      	ldr	r1, [r1, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	440b      	add	r3, r1
 8005954:	6013      	str	r3, [r2, #0]
				int y_pos = i + y;
 8005956:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800595a:	f102 0210 	add.w	r2, r2, #16
 800595e:	f107 0318 	add.w	r3, r7, #24
 8005962:	3b10      	subs	r3, #16
 8005964:	f507 519a 	add.w	r1, r7, #4928	; 0x1340
 8005968:	f101 0114 	add.w	r1, r1, #20
 800596c:	6809      	ldr	r1, [r1, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	440b      	add	r3, r1
 8005972:	6013      	str	r3, [r2, #0]
				UB_VGA_SetPixel(x_pos, y_pos, letter_E[i][j]);
 8005974:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8005978:	f103 0314 	add.w	r3, r3, #20
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	b298      	uxth	r0, r3
 8005980:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8005984:	f103 0310 	add.w	r3, r3, #16
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	b29c      	uxth	r4, r3
 800598c:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8005990:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8005994:	f102 0214 	add.w	r2, r2, #20
 8005998:	6812      	ldr	r2, [r2, #0]
 800599a:	0091      	lsls	r1, r2, #2
 800599c:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80059a0:	f102 0210 	add.w	r2, r2, #16
 80059a4:	6812      	ldr	r2, [r2, #0]
 80059a6:	440a      	add	r2, r1
 80059a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	461a      	mov	r2, r3
 80059b0:	4621      	mov	r1, r4
 80059b2:	f002 fb91 	bl	80080d8 <UB_VGA_SetPixel>
			for (int j=0; j<4; j++)
 80059b6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80059ba:	f103 0310 	add.w	r3, r3, #16
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	3301      	adds	r3, #1
 80059c2:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80059c6:	f102 0210 	add.w	r2, r2, #16
 80059ca:	6013      	str	r3, [r2, #0]
 80059cc:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80059d0:	f103 0310 	add.w	r3, r3, #16
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b03      	cmp	r3, #3
 80059d8:	ddae      	ble.n	8005938 <letter_select+0x4a14>
		for (int i=0; i<10; i++)
 80059da:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80059de:	f103 0314 	add.w	r3, r3, #20
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3301      	adds	r3, #1
 80059e6:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80059ea:	f102 0214 	add.w	r2, r2, #20
 80059ee:	6013      	str	r3, [r2, #0]
 80059f0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80059f4:	f103 0314 	add.w	r3, r3, #20
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b09      	cmp	r3, #9
 80059fc:	dd95      	ble.n	800592a <letter_select+0x4a06>
			}
		}
		break;
 80059fe:	f001 b9f7 	b.w	8006df0 <letter_select+0x5ecc>
	case 'f':
		for (int i=0; i<10; i++)
 8005a02:	2300      	movs	r3, #0
 8005a04:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8005a08:	f102 020c 	add.w	r2, r2, #12
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	e062      	b.n	8005ad6 <letter_select+0x4bb2>
		{
			for (int j=0; j<4; j++)
 8005a10:	2300      	movs	r3, #0
 8005a12:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8005a16:	f102 0208 	add.w	r2, r2, #8
 8005a1a:	6013      	str	r3, [r2, #0]
 8005a1c:	e049      	b.n	8005ab2 <letter_select+0x4b8e>
			{
				int x_pos = j + x;
 8005a1e:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8005a22:	f102 020c 	add.w	r2, r2, #12
 8005a26:	f107 0318 	add.w	r3, r7, #24
 8005a2a:	3b0c      	subs	r3, #12
 8005a2c:	f507 519a 	add.w	r1, r7, #4928	; 0x1340
 8005a30:	f101 0108 	add.w	r1, r1, #8
 8005a34:	6809      	ldr	r1, [r1, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	440b      	add	r3, r1
 8005a3a:	6013      	str	r3, [r2, #0]
				int y_pos = i + y;
 8005a3c:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8005a40:	f102 0208 	add.w	r2, r2, #8
 8005a44:	f107 0318 	add.w	r3, r7, #24
 8005a48:	3b10      	subs	r3, #16
 8005a4a:	f507 519a 	add.w	r1, r7, #4928	; 0x1340
 8005a4e:	f101 010c 	add.w	r1, r1, #12
 8005a52:	6809      	ldr	r1, [r1, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	440b      	add	r3, r1
 8005a58:	6013      	str	r3, [r2, #0]
				UB_VGA_SetPixel(x_pos, y_pos, letter_F[i][j]);
 8005a5a:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8005a5e:	f103 030c 	add.w	r3, r3, #12
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	b298      	uxth	r0, r3
 8005a66:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8005a6a:	f103 0308 	add.w	r3, r3, #8
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	b29c      	uxth	r4, r3
 8005a72:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8005a76:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8005a7a:	f102 020c 	add.w	r2, r2, #12
 8005a7e:	6812      	ldr	r2, [r2, #0]
 8005a80:	0091      	lsls	r1, r2, #2
 8005a82:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8005a86:	f102 0208 	add.w	r2, r2, #8
 8005a8a:	6812      	ldr	r2, [r2, #0]
 8005a8c:	440a      	add	r2, r1
 8005a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	461a      	mov	r2, r3
 8005a96:	4621      	mov	r1, r4
 8005a98:	f002 fb1e 	bl	80080d8 <UB_VGA_SetPixel>
			for (int j=0; j<4; j++)
 8005a9c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8005aa0:	f103 0308 	add.w	r3, r3, #8
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8005aac:	f102 0208 	add.w	r2, r2, #8
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8005ab6:	f103 0308 	add.w	r3, r3, #8
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b03      	cmp	r3, #3
 8005abe:	ddae      	ble.n	8005a1e <letter_select+0x4afa>
		for (int i=0; i<10; i++)
 8005ac0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8005ac4:	f103 030c 	add.w	r3, r3, #12
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3301      	adds	r3, #1
 8005acc:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8005ad0:	f102 020c 	add.w	r2, r2, #12
 8005ad4:	6013      	str	r3, [r2, #0]
 8005ad6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8005ada:	f103 030c 	add.w	r3, r3, #12
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b09      	cmp	r3, #9
 8005ae2:	dd95      	ble.n	8005a10 <letter_select+0x4aec>
			}
		}
		break;
 8005ae4:	f001 b984 	b.w	8006df0 <letter_select+0x5ecc>
	case 'g':
		for (int i=0; i<10; i++)
 8005ae8:	2300      	movs	r3, #0
 8005aea:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8005aee:	f102 0204 	add.w	r2, r2, #4
 8005af2:	6013      	str	r3, [r2, #0]
 8005af4:	e052      	b.n	8005b9c <letter_select+0x4c78>
		{
			for (int j=0; j<4; j++)
 8005af6:	2300      	movs	r3, #0
 8005af8:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	e03d      	b.n	8005b7c <letter_select+0x4c58>
			{
				int x_pos = j + x;
 8005b00:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8005b04:	f102 0204 	add.w	r2, r2, #4
 8005b08:	f107 0318 	add.w	r3, r7, #24
 8005b0c:	3b0c      	subs	r3, #12
 8005b0e:	f507 519a 	add.w	r1, r7, #4928	; 0x1340
 8005b12:	6809      	ldr	r1, [r1, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	440b      	add	r3, r1
 8005b18:	6013      	str	r3, [r2, #0]
				int y_pos = i + y;
 8005b1a:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8005b1e:	f107 0318 	add.w	r3, r7, #24
 8005b22:	3b10      	subs	r3, #16
 8005b24:	f507 519a 	add.w	r1, r7, #4928	; 0x1340
 8005b28:	f101 0104 	add.w	r1, r1, #4
 8005b2c:	6809      	ldr	r1, [r1, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	440b      	add	r3, r1
 8005b32:	6013      	str	r3, [r2, #0]
				UB_VGA_SetPixel(x_pos, y_pos, letter_G[i][j]);
 8005b34:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8005b38:	f103 0304 	add.w	r3, r3, #4
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	b298      	uxth	r0, r3
 8005b40:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	b29c      	uxth	r4, r3
 8005b48:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8005b4c:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8005b50:	f102 0204 	add.w	r2, r2, #4
 8005b54:	6812      	ldr	r2, [r2, #0]
 8005b56:	0091      	lsls	r1, r2, #2
 8005b58:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8005b5c:	6812      	ldr	r2, [r2, #0]
 8005b5e:	440a      	add	r2, r1
 8005b60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	461a      	mov	r2, r3
 8005b68:	4621      	mov	r1, r4
 8005b6a:	f002 fab5 	bl	80080d8 <UB_VGA_SetPixel>
			for (int j=0; j<4; j++)
 8005b6e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	3301      	adds	r3, #1
 8005b76:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8005b7a:	6013      	str	r3, [r2, #0]
 8005b7c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2b03      	cmp	r3, #3
 8005b84:	ddbc      	ble.n	8005b00 <letter_select+0x4bdc>
		for (int i=0; i<10; i++)
 8005b86:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8005b8a:	f103 0304 	add.w	r3, r3, #4
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	3301      	adds	r3, #1
 8005b92:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8005b96:	f102 0204 	add.w	r2, r2, #4
 8005b9a:	6013      	str	r3, [r2, #0]
 8005b9c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8005ba0:	f103 0304 	add.w	r3, r3, #4
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b09      	cmp	r3, #9
 8005ba8:	dda5      	ble.n	8005af6 <letter_select+0x4bd2>
			}
		}
		break;
 8005baa:	f001 b921 	b.w	8006df0 <letter_select+0x5ecc>
	case 'h':
		for (int i=0; i<10; i++)
 8005bae:	2300      	movs	r3, #0
 8005bb0:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005bb4:	f102 021c 	add.w	r2, r2, #28
 8005bb8:	6013      	str	r3, [r2, #0]
 8005bba:	e062      	b.n	8005c82 <letter_select+0x4d5e>
		{
			for (int j=0; j<4; j++)
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005bc2:	f102 0218 	add.w	r2, r2, #24
 8005bc6:	6013      	str	r3, [r2, #0]
 8005bc8:	e049      	b.n	8005c5e <letter_select+0x4d3a>
			{
				int x_pos = j + x;
 8005bca:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8005bce:	f102 021c 	add.w	r2, r2, #28
 8005bd2:	f107 0318 	add.w	r3, r7, #24
 8005bd6:	3b0c      	subs	r3, #12
 8005bd8:	f507 5199 	add.w	r1, r7, #4896	; 0x1320
 8005bdc:	f101 0118 	add.w	r1, r1, #24
 8005be0:	6809      	ldr	r1, [r1, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	440b      	add	r3, r1
 8005be6:	6013      	str	r3, [r2, #0]
				int y_pos = i + y;
 8005be8:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8005bec:	f102 0218 	add.w	r2, r2, #24
 8005bf0:	f107 0318 	add.w	r3, r7, #24
 8005bf4:	3b10      	subs	r3, #16
 8005bf6:	f507 5199 	add.w	r1, r7, #4896	; 0x1320
 8005bfa:	f101 011c 	add.w	r1, r1, #28
 8005bfe:	6809      	ldr	r1, [r1, #0]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	440b      	add	r3, r1
 8005c04:	6013      	str	r3, [r2, #0]
				UB_VGA_SetPixel(x_pos, y_pos, letter_H[i][j]);
 8005c06:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8005c0a:	f103 031c 	add.w	r3, r3, #28
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	b298      	uxth	r0, r3
 8005c12:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8005c16:	f103 0318 	add.w	r3, r3, #24
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	b29c      	uxth	r4, r3
 8005c1e:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8005c22:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005c26:	f102 021c 	add.w	r2, r2, #28
 8005c2a:	6812      	ldr	r2, [r2, #0]
 8005c2c:	0091      	lsls	r1, r2, #2
 8005c2e:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005c32:	f102 0218 	add.w	r2, r2, #24
 8005c36:	6812      	ldr	r2, [r2, #0]
 8005c38:	440a      	add	r2, r1
 8005c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	461a      	mov	r2, r3
 8005c42:	4621      	mov	r1, r4
 8005c44:	f002 fa48 	bl	80080d8 <UB_VGA_SetPixel>
			for (int j=0; j<4; j++)
 8005c48:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005c4c:	f103 0318 	add.w	r3, r3, #24
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	3301      	adds	r3, #1
 8005c54:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005c58:	f102 0218 	add.w	r2, r2, #24
 8005c5c:	6013      	str	r3, [r2, #0]
 8005c5e:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005c62:	f103 0318 	add.w	r3, r3, #24
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2b03      	cmp	r3, #3
 8005c6a:	ddae      	ble.n	8005bca <letter_select+0x4ca6>
		for (int i=0; i<10; i++)
 8005c6c:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005c70:	f103 031c 	add.w	r3, r3, #28
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	3301      	adds	r3, #1
 8005c78:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005c7c:	f102 021c 	add.w	r2, r2, #28
 8005c80:	6013      	str	r3, [r2, #0]
 8005c82:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005c86:	f103 031c 	add.w	r3, r3, #28
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b09      	cmp	r3, #9
 8005c8e:	dd95      	ble.n	8005bbc <letter_select+0x4c98>
			}
		}
		break;
 8005c90:	f001 b8ae 	b.w	8006df0 <letter_select+0x5ecc>
	case 'i':
		for (int i=0; i<10; i++)
 8005c94:	2300      	movs	r3, #0
 8005c96:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005c9a:	f102 0214 	add.w	r2, r2, #20
 8005c9e:	6013      	str	r3, [r2, #0]
 8005ca0:	e064      	b.n	8005d6c <letter_select+0x4e48>
		{
			for (int j=0; j<3; j++)
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005ca8:	f102 0210 	add.w	r2, r2, #16
 8005cac:	6013      	str	r3, [r2, #0]
 8005cae:	e04b      	b.n	8005d48 <letter_select+0x4e24>
			{
				int x_pos = j + x;
 8005cb0:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8005cb4:	f102 0214 	add.w	r2, r2, #20
 8005cb8:	f107 0318 	add.w	r3, r7, #24
 8005cbc:	3b0c      	subs	r3, #12
 8005cbe:	f507 5199 	add.w	r1, r7, #4896	; 0x1320
 8005cc2:	f101 0110 	add.w	r1, r1, #16
 8005cc6:	6809      	ldr	r1, [r1, #0]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	440b      	add	r3, r1
 8005ccc:	6013      	str	r3, [r2, #0]
				int y_pos = i + y;
 8005cce:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8005cd2:	f102 0210 	add.w	r2, r2, #16
 8005cd6:	f107 0318 	add.w	r3, r7, #24
 8005cda:	3b10      	subs	r3, #16
 8005cdc:	f507 5199 	add.w	r1, r7, #4896	; 0x1320
 8005ce0:	f101 0114 	add.w	r1, r1, #20
 8005ce4:	6809      	ldr	r1, [r1, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	440b      	add	r3, r1
 8005cea:	6013      	str	r3, [r2, #0]
				UB_VGA_SetPixel(x_pos, y_pos, letter_I[i][j]);
 8005cec:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8005cf0:	f103 0314 	add.w	r3, r3, #20
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	b298      	uxth	r0, r3
 8005cf8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8005cfc:	f103 0310 	add.w	r3, r3, #16
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	b29c      	uxth	r4, r3
 8005d04:	f507 6144 	add.w	r1, r7, #3136	; 0xc40
 8005d08:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005d0c:	f103 0314 	add.w	r3, r3, #20
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	4613      	mov	r3, r2
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	4413      	add	r3, r2
 8005d18:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005d1c:	f102 0210 	add.w	r2, r2, #16
 8005d20:	6812      	ldr	r2, [r2, #0]
 8005d22:	4413      	add	r3, r2
 8005d24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	4621      	mov	r1, r4
 8005d2e:	f002 f9d3 	bl	80080d8 <UB_VGA_SetPixel>
			for (int j=0; j<3; j++)
 8005d32:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005d36:	f103 0310 	add.w	r3, r3, #16
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005d42:	f102 0210 	add.w	r2, r2, #16
 8005d46:	6013      	str	r3, [r2, #0]
 8005d48:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005d4c:	f103 0310 	add.w	r3, r3, #16
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	ddac      	ble.n	8005cb0 <letter_select+0x4d8c>
		for (int i=0; i<10; i++)
 8005d56:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005d5a:	f103 0314 	add.w	r3, r3, #20
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	3301      	adds	r3, #1
 8005d62:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005d66:	f102 0214 	add.w	r2, r2, #20
 8005d6a:	6013      	str	r3, [r2, #0]
 8005d6c:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005d70:	f103 0314 	add.w	r3, r3, #20
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b09      	cmp	r3, #9
 8005d78:	dd93      	ble.n	8005ca2 <letter_select+0x4d7e>
			}
		}
		break;
 8005d7a:	f001 b839 	b.w	8006df0 <letter_select+0x5ecc>
	case 'j':
		for (int i=0; i<10; i++)
 8005d7e:	2300      	movs	r3, #0
 8005d80:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005d84:	f102 020c 	add.w	r2, r2, #12
 8005d88:	6013      	str	r3, [r2, #0]
 8005d8a:	e062      	b.n	8005e52 <letter_select+0x4f2e>
		{
			for (int j=0; j<4; j++)
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005d92:	f102 0208 	add.w	r2, r2, #8
 8005d96:	6013      	str	r3, [r2, #0]
 8005d98:	e049      	b.n	8005e2e <letter_select+0x4f0a>
			{
				int x_pos = j + x;
 8005d9a:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8005d9e:	f102 020c 	add.w	r2, r2, #12
 8005da2:	f107 0318 	add.w	r3, r7, #24
 8005da6:	3b0c      	subs	r3, #12
 8005da8:	f507 5199 	add.w	r1, r7, #4896	; 0x1320
 8005dac:	f101 0108 	add.w	r1, r1, #8
 8005db0:	6809      	ldr	r1, [r1, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	440b      	add	r3, r1
 8005db6:	6013      	str	r3, [r2, #0]
				int y_pos = i + y;
 8005db8:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8005dbc:	f102 0208 	add.w	r2, r2, #8
 8005dc0:	f107 0318 	add.w	r3, r7, #24
 8005dc4:	3b10      	subs	r3, #16
 8005dc6:	f507 5199 	add.w	r1, r7, #4896	; 0x1320
 8005dca:	f101 010c 	add.w	r1, r1, #12
 8005dce:	6809      	ldr	r1, [r1, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	440b      	add	r3, r1
 8005dd4:	6013      	str	r3, [r2, #0]
				UB_VGA_SetPixel(x_pos, y_pos, letter_J[i][j]);
 8005dd6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8005dda:	f103 030c 	add.w	r3, r3, #12
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	b298      	uxth	r0, r3
 8005de2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8005de6:	f103 0308 	add.w	r3, r3, #8
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	b29c      	uxth	r4, r3
 8005dee:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8005df2:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005df6:	f102 020c 	add.w	r2, r2, #12
 8005dfa:	6812      	ldr	r2, [r2, #0]
 8005dfc:	0091      	lsls	r1, r2, #2
 8005dfe:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005e02:	f102 0208 	add.w	r2, r2, #8
 8005e06:	6812      	ldr	r2, [r2, #0]
 8005e08:	440a      	add	r2, r1
 8005e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	461a      	mov	r2, r3
 8005e12:	4621      	mov	r1, r4
 8005e14:	f002 f960 	bl	80080d8 <UB_VGA_SetPixel>
			for (int j=0; j<4; j++)
 8005e18:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005e1c:	f103 0308 	add.w	r3, r3, #8
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	3301      	adds	r3, #1
 8005e24:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005e28:	f102 0208 	add.w	r2, r2, #8
 8005e2c:	6013      	str	r3, [r2, #0]
 8005e2e:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005e32:	f103 0308 	add.w	r3, r3, #8
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b03      	cmp	r3, #3
 8005e3a:	ddae      	ble.n	8005d9a <letter_select+0x4e76>
		for (int i=0; i<10; i++)
 8005e3c:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005e40:	f103 030c 	add.w	r3, r3, #12
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3301      	adds	r3, #1
 8005e48:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005e4c:	f102 020c 	add.w	r2, r2, #12
 8005e50:	6013      	str	r3, [r2, #0]
 8005e52:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005e56:	f103 030c 	add.w	r3, r3, #12
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b09      	cmp	r3, #9
 8005e5e:	dd95      	ble.n	8005d8c <letter_select+0x4e68>
			}
		}
		break;
 8005e60:	f000 bfc6 	b.w	8006df0 <letter_select+0x5ecc>
	case 'k':
		for (int i=0; i<10; i++)
 8005e64:	2300      	movs	r3, #0
 8005e66:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005e6a:	f102 0204 	add.w	r2, r2, #4
 8005e6e:	6013      	str	r3, [r2, #0]
 8005e70:	e052      	b.n	8005f18 <letter_select+0x4ff4>
		{
			for (int j=0; j<4; j++)
 8005e72:	2300      	movs	r3, #0
 8005e74:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005e78:	6013      	str	r3, [r2, #0]
 8005e7a:	e03d      	b.n	8005ef8 <letter_select+0x4fd4>
			{
				int x_pos = j + x;
 8005e7c:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8005e80:	f102 0204 	add.w	r2, r2, #4
 8005e84:	f107 0318 	add.w	r3, r7, #24
 8005e88:	3b0c      	subs	r3, #12
 8005e8a:	f507 5199 	add.w	r1, r7, #4896	; 0x1320
 8005e8e:	6809      	ldr	r1, [r1, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	440b      	add	r3, r1
 8005e94:	6013      	str	r3, [r2, #0]
				int y_pos = i + y;
 8005e96:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 8005e9a:	f107 0318 	add.w	r3, r7, #24
 8005e9e:	3b10      	subs	r3, #16
 8005ea0:	f507 5199 	add.w	r1, r7, #4896	; 0x1320
 8005ea4:	f101 0104 	add.w	r1, r1, #4
 8005ea8:	6809      	ldr	r1, [r1, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	440b      	add	r3, r1
 8005eae:	6013      	str	r3, [r2, #0]
				UB_VGA_SetPixel(x_pos, y_pos, letter_K[i][j]);
 8005eb0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8005eb4:	f103 0304 	add.w	r3, r3, #4
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	b298      	uxth	r0, r3
 8005ebc:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	b29c      	uxth	r4, r3
 8005ec4:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8005ec8:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005ecc:	f102 0204 	add.w	r2, r2, #4
 8005ed0:	6812      	ldr	r2, [r2, #0]
 8005ed2:	0091      	lsls	r1, r2, #2
 8005ed4:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005ed8:	6812      	ldr	r2, [r2, #0]
 8005eda:	440a      	add	r2, r1
 8005edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	4621      	mov	r1, r4
 8005ee6:	f002 f8f7 	bl	80080d8 <UB_VGA_SetPixel>
			for (int j=0; j<4; j++)
 8005eea:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005ef6:	6013      	str	r3, [r2, #0]
 8005ef8:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2b03      	cmp	r3, #3
 8005f00:	ddbc      	ble.n	8005e7c <letter_select+0x4f58>
		for (int i=0; i<10; i++)
 8005f02:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005f06:	f103 0304 	add.w	r3, r3, #4
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8005f12:	f102 0204 	add.w	r2, r2, #4
 8005f16:	6013      	str	r3, [r2, #0]
 8005f18:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005f1c:	f103 0304 	add.w	r3, r3, #4
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2b09      	cmp	r3, #9
 8005f24:	dda5      	ble.n	8005e72 <letter_select+0x4f4e>
			}
		}
		break;
 8005f26:	f000 bf63 	b.w	8006df0 <letter_select+0x5ecc>
	case 'l':
		for (int i=0; i<10; i++)
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005f30:	f102 021c 	add.w	r2, r2, #28
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	e062      	b.n	8005ffe <letter_select+0x50da>
		{
			for (int j=0; j<4; j++)
 8005f38:	2300      	movs	r3, #0
 8005f3a:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005f3e:	f102 0218 	add.w	r2, r2, #24
 8005f42:	6013      	str	r3, [r2, #0]
 8005f44:	e049      	b.n	8005fda <letter_select+0x50b6>
			{
				int x_pos = j + x;
 8005f46:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8005f4a:	f102 021c 	add.w	r2, r2, #28
 8005f4e:	f107 0318 	add.w	r3, r7, #24
 8005f52:	3b0c      	subs	r3, #12
 8005f54:	f507 5198 	add.w	r1, r7, #4864	; 0x1300
 8005f58:	f101 0118 	add.w	r1, r1, #24
 8005f5c:	6809      	ldr	r1, [r1, #0]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	440b      	add	r3, r1
 8005f62:	6013      	str	r3, [r2, #0]
				int y_pos = i + y;
 8005f64:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8005f68:	f102 0218 	add.w	r2, r2, #24
 8005f6c:	f107 0318 	add.w	r3, r7, #24
 8005f70:	3b10      	subs	r3, #16
 8005f72:	f507 5198 	add.w	r1, r7, #4864	; 0x1300
 8005f76:	f101 011c 	add.w	r1, r1, #28
 8005f7a:	6809      	ldr	r1, [r1, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	440b      	add	r3, r1
 8005f80:	6013      	str	r3, [r2, #0]
				UB_VGA_SetPixel(x_pos, y_pos, letter_L[i][j]);
 8005f82:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8005f86:	f103 031c 	add.w	r3, r3, #28
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	b298      	uxth	r0, r3
 8005f8e:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8005f92:	f103 0318 	add.w	r3, r3, #24
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	b29c      	uxth	r4, r3
 8005f9a:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8005f9e:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005fa2:	f102 021c 	add.w	r2, r2, #28
 8005fa6:	6812      	ldr	r2, [r2, #0]
 8005fa8:	0091      	lsls	r1, r2, #2
 8005faa:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005fae:	f102 0218 	add.w	r2, r2, #24
 8005fb2:	6812      	ldr	r2, [r2, #0]
 8005fb4:	440a      	add	r2, r1
 8005fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	4621      	mov	r1, r4
 8005fc0:	f002 f88a 	bl	80080d8 <UB_VGA_SetPixel>
			for (int j=0; j<4; j++)
 8005fc4:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8005fc8:	f103 0318 	add.w	r3, r3, #24
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005fd4:	f102 0218 	add.w	r2, r2, #24
 8005fd8:	6013      	str	r3, [r2, #0]
 8005fda:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8005fde:	f103 0318 	add.w	r3, r3, #24
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b03      	cmp	r3, #3
 8005fe6:	ddae      	ble.n	8005f46 <letter_select+0x5022>
		for (int i=0; i<10; i++)
 8005fe8:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8005fec:	f103 031c 	add.w	r3, r3, #28
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8005ff8:	f102 021c 	add.w	r2, r2, #28
 8005ffc:	6013      	str	r3, [r2, #0]
 8005ffe:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8006002:	f103 031c 	add.w	r3, r3, #28
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b09      	cmp	r3, #9
 800600a:	dd95      	ble.n	8005f38 <letter_select+0x5014>
			}
		}
		break;
 800600c:	f000 bef0 	b.w	8006df0 <letter_select+0x5ecc>
	case 'm':
		for (int i=0; i<10; i++)
 8006010:	2300      	movs	r3, #0
 8006012:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8006016:	f102 0214 	add.w	r2, r2, #20
 800601a:	6013      	str	r3, [r2, #0]
 800601c:	e062      	b.n	80060e4 <letter_select+0x51c0>
		{
			for (int j=0; j<4; j++)
 800601e:	2300      	movs	r3, #0
 8006020:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8006024:	f102 0210 	add.w	r2, r2, #16
 8006028:	6013      	str	r3, [r2, #0]
 800602a:	e049      	b.n	80060c0 <letter_select+0x519c>
			{
				int x_pos = j + x;
 800602c:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8006030:	f102 0214 	add.w	r2, r2, #20
 8006034:	f107 0318 	add.w	r3, r7, #24
 8006038:	3b0c      	subs	r3, #12
 800603a:	f507 5198 	add.w	r1, r7, #4864	; 0x1300
 800603e:	f101 0110 	add.w	r1, r1, #16
 8006042:	6809      	ldr	r1, [r1, #0]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	440b      	add	r3, r1
 8006048:	6013      	str	r3, [r2, #0]
				int y_pos = i + y;
 800604a:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 800604e:	f102 0210 	add.w	r2, r2, #16
 8006052:	f107 0318 	add.w	r3, r7, #24
 8006056:	3b10      	subs	r3, #16
 8006058:	f507 5198 	add.w	r1, r7, #4864	; 0x1300
 800605c:	f101 0114 	add.w	r1, r1, #20
 8006060:	6809      	ldr	r1, [r1, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	440b      	add	r3, r1
 8006066:	6013      	str	r3, [r2, #0]
				UB_VGA_SetPixel(x_pos, y_pos, letter_M[i][j]);
 8006068:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 800606c:	f103 0314 	add.w	r3, r3, #20
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	b298      	uxth	r0, r3
 8006074:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8006078:	f103 0310 	add.w	r3, r3, #16
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	b29c      	uxth	r4, r3
 8006080:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8006084:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8006088:	f102 0214 	add.w	r2, r2, #20
 800608c:	6812      	ldr	r2, [r2, #0]
 800608e:	0091      	lsls	r1, r2, #2
 8006090:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8006094:	f102 0210 	add.w	r2, r2, #16
 8006098:	6812      	ldr	r2, [r2, #0]
 800609a:	440a      	add	r2, r1
 800609c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060a0:	b2db      	uxtb	r3, r3
 80060a2:	461a      	mov	r2, r3
 80060a4:	4621      	mov	r1, r4
 80060a6:	f002 f817 	bl	80080d8 <UB_VGA_SetPixel>
			for (int j=0; j<4; j++)
 80060aa:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 80060ae:	f103 0310 	add.w	r3, r3, #16
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3301      	adds	r3, #1
 80060b6:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 80060ba:	f102 0210 	add.w	r2, r2, #16
 80060be:	6013      	str	r3, [r2, #0]
 80060c0:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 80060c4:	f103 0310 	add.w	r3, r3, #16
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	ddae      	ble.n	800602c <letter_select+0x5108>
		for (int i=0; i<10; i++)
 80060ce:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 80060d2:	f103 0314 	add.w	r3, r3, #20
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	3301      	adds	r3, #1
 80060da:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 80060de:	f102 0214 	add.w	r2, r2, #20
 80060e2:	6013      	str	r3, [r2, #0]
 80060e4:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 80060e8:	f103 0314 	add.w	r3, r3, #20
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b09      	cmp	r3, #9
 80060f0:	dd95      	ble.n	800601e <letter_select+0x50fa>
			}
		}
		break;
 80060f2:	f000 be7d 	b.w	8006df0 <letter_select+0x5ecc>
	case 'n':
		for (int i=0; i<10; i++)
 80060f6:	2300      	movs	r3, #0
 80060f8:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 80060fc:	f102 020c 	add.w	r2, r2, #12
 8006100:	6013      	str	r3, [r2, #0]
 8006102:	e062      	b.n	80061ca <letter_select+0x52a6>
		{
			for (int j=0; j<4; j++)
 8006104:	2300      	movs	r3, #0
 8006106:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 800610a:	f102 0208 	add.w	r2, r2, #8
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	e049      	b.n	80061a6 <letter_select+0x5282>
			{
				int x_pos = j + x;
 8006112:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8006116:	f102 020c 	add.w	r2, r2, #12
 800611a:	f107 0318 	add.w	r3, r7, #24
 800611e:	3b0c      	subs	r3, #12
 8006120:	f507 5198 	add.w	r1, r7, #4864	; 0x1300
 8006124:	f101 0108 	add.w	r1, r1, #8
 8006128:	6809      	ldr	r1, [r1, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	440b      	add	r3, r1
 800612e:	6013      	str	r3, [r2, #0]
				int y_pos = i + y;
 8006130:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8006134:	f102 0208 	add.w	r2, r2, #8
 8006138:	f107 0318 	add.w	r3, r7, #24
 800613c:	3b10      	subs	r3, #16
 800613e:	f507 5198 	add.w	r1, r7, #4864	; 0x1300
 8006142:	f101 010c 	add.w	r1, r1, #12
 8006146:	6809      	ldr	r1, [r1, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	440b      	add	r3, r1
 800614c:	6013      	str	r3, [r2, #0]
				UB_VGA_SetPixel(x_pos, y_pos, letter_N[i][j]);
 800614e:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8006152:	f103 030c 	add.w	r3, r3, #12
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	b298      	uxth	r0, r3
 800615a:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 800615e:	f103 0308 	add.w	r3, r3, #8
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	b29c      	uxth	r4, r3
 8006166:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 800616a:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 800616e:	f102 020c 	add.w	r2, r2, #12
 8006172:	6812      	ldr	r2, [r2, #0]
 8006174:	0091      	lsls	r1, r2, #2
 8006176:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 800617a:	f102 0208 	add.w	r2, r2, #8
 800617e:	6812      	ldr	r2, [r2, #0]
 8006180:	440a      	add	r2, r1
 8006182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006186:	b2db      	uxtb	r3, r3
 8006188:	461a      	mov	r2, r3
 800618a:	4621      	mov	r1, r4
 800618c:	f001 ffa4 	bl	80080d8 <UB_VGA_SetPixel>
			for (int j=0; j<4; j++)
 8006190:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8006194:	f103 0308 	add.w	r3, r3, #8
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	3301      	adds	r3, #1
 800619c:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 80061a0:	f102 0208 	add.w	r2, r2, #8
 80061a4:	6013      	str	r3, [r2, #0]
 80061a6:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 80061aa:	f103 0308 	add.w	r3, r3, #8
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b03      	cmp	r3, #3
 80061b2:	ddae      	ble.n	8006112 <letter_select+0x51ee>
		for (int i=0; i<10; i++)
 80061b4:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 80061b8:	f103 030c 	add.w	r3, r3, #12
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	3301      	adds	r3, #1
 80061c0:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 80061c4:	f102 020c 	add.w	r2, r2, #12
 80061c8:	6013      	str	r3, [r2, #0]
 80061ca:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 80061ce:	f103 030c 	add.w	r3, r3, #12
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2b09      	cmp	r3, #9
 80061d6:	dd95      	ble.n	8006104 <letter_select+0x51e0>
			}
		}
		break;
 80061d8:	f000 be0a 	b.w	8006df0 <letter_select+0x5ecc>


	case 'o':
		for (int i=0; i<10; i++)
 80061dc:	2300      	movs	r3, #0
 80061de:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 80061e2:	f102 0204 	add.w	r2, r2, #4
 80061e6:	6013      	str	r3, [r2, #0]
 80061e8:	e052      	b.n	8006290 <letter_select+0x536c>
		{
			for (int j=0; j<4; j++)
 80061ea:	2300      	movs	r3, #0
 80061ec:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 80061f0:	6013      	str	r3, [r2, #0]
 80061f2:	e03d      	b.n	8006270 <letter_select+0x534c>
			{
				int x_pos = j + x;
 80061f4:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80061f8:	f102 0204 	add.w	r2, r2, #4
 80061fc:	f107 0318 	add.w	r3, r7, #24
 8006200:	3b0c      	subs	r3, #12
 8006202:	f507 5198 	add.w	r1, r7, #4864	; 0x1300
 8006206:	6809      	ldr	r1, [r1, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	440b      	add	r3, r1
 800620c:	6013      	str	r3, [r2, #0]
				int y_pos = i + y;
 800620e:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 8006212:	f107 0318 	add.w	r3, r7, #24
 8006216:	3b10      	subs	r3, #16
 8006218:	f507 5198 	add.w	r1, r7, #4864	; 0x1300
 800621c:	f101 0104 	add.w	r1, r1, #4
 8006220:	6809      	ldr	r1, [r1, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	440b      	add	r3, r1
 8006226:	6013      	str	r3, [r2, #0]
				UB_VGA_SetPixel(x_pos, y_pos, letter_O[i][j]);
 8006228:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 800622c:	f103 0304 	add.w	r3, r3, #4
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	b298      	uxth	r0, r3
 8006234:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	b29c      	uxth	r4, r3
 800623c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8006240:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8006244:	f102 0204 	add.w	r2, r2, #4
 8006248:	6812      	ldr	r2, [r2, #0]
 800624a:	0091      	lsls	r1, r2, #2
 800624c:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8006250:	6812      	ldr	r2, [r2, #0]
 8006252:	440a      	add	r2, r1
 8006254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006258:	b2db      	uxtb	r3, r3
 800625a:	461a      	mov	r2, r3
 800625c:	4621      	mov	r1, r4
 800625e:	f001 ff3b 	bl	80080d8 <UB_VGA_SetPixel>
			for (int j=0; j<4; j++)
 8006262:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3301      	adds	r3, #1
 800626a:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2b03      	cmp	r3, #3
 8006278:	ddbc      	ble.n	80061f4 <letter_select+0x52d0>
		for (int i=0; i<10; i++)
 800627a:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800627e:	f103 0304 	add.w	r3, r3, #4
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	3301      	adds	r3, #1
 8006286:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 800628a:	f102 0204 	add.w	r2, r2, #4
 800628e:	6013      	str	r3, [r2, #0]
 8006290:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8006294:	f103 0304 	add.w	r3, r3, #4
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2b09      	cmp	r3, #9
 800629c:	dda5      	ble.n	80061ea <letter_select+0x52c6>
			}
		}
		break;
 800629e:	f000 bda7 	b.w	8006df0 <letter_select+0x5ecc>
	case 'p':
		for (int i=0; i<10; i++)
 80062a2:	2300      	movs	r3, #0
 80062a4:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 80062a8:	f102 021c 	add.w	r2, r2, #28
 80062ac:	6013      	str	r3, [r2, #0]
 80062ae:	e062      	b.n	8006376 <letter_select+0x5452>
		{
			for (int j=0; j<4; j++)
 80062b0:	2300      	movs	r3, #0
 80062b2:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 80062b6:	f102 0218 	add.w	r2, r2, #24
 80062ba:	6013      	str	r3, [r2, #0]
 80062bc:	e049      	b.n	8006352 <letter_select+0x542e>
			{
				int x_pos = j + x;
 80062be:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80062c2:	f102 021c 	add.w	r2, r2, #28
 80062c6:	f107 0318 	add.w	r3, r7, #24
 80062ca:	3b0c      	subs	r3, #12
 80062cc:	f507 5197 	add.w	r1, r7, #4832	; 0x12e0
 80062d0:	f101 0118 	add.w	r1, r1, #24
 80062d4:	6809      	ldr	r1, [r1, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	440b      	add	r3, r1
 80062da:	6013      	str	r3, [r2, #0]
				int y_pos = i + y;
 80062dc:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80062e0:	f102 0218 	add.w	r2, r2, #24
 80062e4:	f107 0318 	add.w	r3, r7, #24
 80062e8:	3b10      	subs	r3, #16
 80062ea:	f507 5197 	add.w	r1, r7, #4832	; 0x12e0
 80062ee:	f101 011c 	add.w	r1, r1, #28
 80062f2:	6809      	ldr	r1, [r1, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	440b      	add	r3, r1
 80062f8:	6013      	str	r3, [r2, #0]
				UB_VGA_SetPixel(x_pos, y_pos, letter_P[i][j]);
 80062fa:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80062fe:	f103 031c 	add.w	r3, r3, #28
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	b298      	uxth	r0, r3
 8006306:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 800630a:	f103 0318 	add.w	r3, r3, #24
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	b29c      	uxth	r4, r3
 8006312:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8006316:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 800631a:	f102 021c 	add.w	r2, r2, #28
 800631e:	6812      	ldr	r2, [r2, #0]
 8006320:	0091      	lsls	r1, r2, #2
 8006322:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8006326:	f102 0218 	add.w	r2, r2, #24
 800632a:	6812      	ldr	r2, [r2, #0]
 800632c:	440a      	add	r2, r1
 800632e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006332:	b2db      	uxtb	r3, r3
 8006334:	461a      	mov	r2, r3
 8006336:	4621      	mov	r1, r4
 8006338:	f001 fece 	bl	80080d8 <UB_VGA_SetPixel>
			for (int j=0; j<4; j++)
 800633c:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8006340:	f103 0318 	add.w	r3, r3, #24
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	3301      	adds	r3, #1
 8006348:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 800634c:	f102 0218 	add.w	r2, r2, #24
 8006350:	6013      	str	r3, [r2, #0]
 8006352:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8006356:	f103 0318 	add.w	r3, r3, #24
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b03      	cmp	r3, #3
 800635e:	ddae      	ble.n	80062be <letter_select+0x539a>
		for (int i=0; i<10; i++)
 8006360:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8006364:	f103 031c 	add.w	r3, r3, #28
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3301      	adds	r3, #1
 800636c:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8006370:	f102 021c 	add.w	r2, r2, #28
 8006374:	6013      	str	r3, [r2, #0]
 8006376:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800637a:	f103 031c 	add.w	r3, r3, #28
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b09      	cmp	r3, #9
 8006382:	dd95      	ble.n	80062b0 <letter_select+0x538c>
			}
		}
		break;
 8006384:	f000 bd34 	b.w	8006df0 <letter_select+0x5ecc>
	case 'q':
		for (int i=0; i<10; i++)
 8006388:	2300      	movs	r3, #0
 800638a:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 800638e:	f102 0214 	add.w	r2, r2, #20
 8006392:	6013      	str	r3, [r2, #0]
 8006394:	e062      	b.n	800645c <letter_select+0x5538>
		{
			for (int j=0; j<4; j++)
 8006396:	2300      	movs	r3, #0
 8006398:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 800639c:	f102 0210 	add.w	r2, r2, #16
 80063a0:	6013      	str	r3, [r2, #0]
 80063a2:	e049      	b.n	8006438 <letter_select+0x5514>
			{
				int x_pos = j + x;
 80063a4:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80063a8:	f102 0214 	add.w	r2, r2, #20
 80063ac:	f107 0318 	add.w	r3, r7, #24
 80063b0:	3b0c      	subs	r3, #12
 80063b2:	f507 5197 	add.w	r1, r7, #4832	; 0x12e0
 80063b6:	f101 0110 	add.w	r1, r1, #16
 80063ba:	6809      	ldr	r1, [r1, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	440b      	add	r3, r1
 80063c0:	6013      	str	r3, [r2, #0]
				int y_pos = i + y;
 80063c2:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80063c6:	f102 0210 	add.w	r2, r2, #16
 80063ca:	f107 0318 	add.w	r3, r7, #24
 80063ce:	3b10      	subs	r3, #16
 80063d0:	f507 5197 	add.w	r1, r7, #4832	; 0x12e0
 80063d4:	f101 0114 	add.w	r1, r1, #20
 80063d8:	6809      	ldr	r1, [r1, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	440b      	add	r3, r1
 80063de:	6013      	str	r3, [r2, #0]
				UB_VGA_SetPixel(x_pos, y_pos, letter_Q[i][j]);
 80063e0:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80063e4:	f103 0314 	add.w	r3, r3, #20
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	b298      	uxth	r0, r3
 80063ec:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80063f0:	f103 0310 	add.w	r3, r3, #16
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	b29c      	uxth	r4, r3
 80063f8:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80063fc:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8006400:	f102 0214 	add.w	r2, r2, #20
 8006404:	6812      	ldr	r2, [r2, #0]
 8006406:	0091      	lsls	r1, r2, #2
 8006408:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 800640c:	f102 0210 	add.w	r2, r2, #16
 8006410:	6812      	ldr	r2, [r2, #0]
 8006412:	440a      	add	r2, r1
 8006414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006418:	b2db      	uxtb	r3, r3
 800641a:	461a      	mov	r2, r3
 800641c:	4621      	mov	r1, r4
 800641e:	f001 fe5b 	bl	80080d8 <UB_VGA_SetPixel>
			for (int j=0; j<4; j++)
 8006422:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8006426:	f103 0310 	add.w	r3, r3, #16
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	3301      	adds	r3, #1
 800642e:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8006432:	f102 0210 	add.w	r2, r2, #16
 8006436:	6013      	str	r3, [r2, #0]
 8006438:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800643c:	f103 0310 	add.w	r3, r3, #16
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2b03      	cmp	r3, #3
 8006444:	ddae      	ble.n	80063a4 <letter_select+0x5480>
		for (int i=0; i<10; i++)
 8006446:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800644a:	f103 0314 	add.w	r3, r3, #20
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3301      	adds	r3, #1
 8006452:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8006456:	f102 0214 	add.w	r2, r2, #20
 800645a:	6013      	str	r3, [r2, #0]
 800645c:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8006460:	f103 0314 	add.w	r3, r3, #20
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b09      	cmp	r3, #9
 8006468:	dd95      	ble.n	8006396 <letter_select+0x5472>
			}
		}
		break;
 800646a:	f000 bcc1 	b.w	8006df0 <letter_select+0x5ecc>
	case 'r':
		for (int i=0; i<10; i++)
 800646e:	2300      	movs	r3, #0
 8006470:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8006474:	f102 020c 	add.w	r2, r2, #12
 8006478:	6013      	str	r3, [r2, #0]
 800647a:	e062      	b.n	8006542 <letter_select+0x561e>
		{
			for (int j=0; j<4; j++)
 800647c:	2300      	movs	r3, #0
 800647e:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8006482:	f102 0208 	add.w	r2, r2, #8
 8006486:	6013      	str	r3, [r2, #0]
 8006488:	e049      	b.n	800651e <letter_select+0x55fa>
			{
				int x_pos = j + x;
 800648a:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 800648e:	f102 020c 	add.w	r2, r2, #12
 8006492:	f107 0318 	add.w	r3, r7, #24
 8006496:	3b0c      	subs	r3, #12
 8006498:	f507 5197 	add.w	r1, r7, #4832	; 0x12e0
 800649c:	f101 0108 	add.w	r1, r1, #8
 80064a0:	6809      	ldr	r1, [r1, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	440b      	add	r3, r1
 80064a6:	6013      	str	r3, [r2, #0]
				int y_pos = i + y;
 80064a8:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80064ac:	f102 0208 	add.w	r2, r2, #8
 80064b0:	f107 0318 	add.w	r3, r7, #24
 80064b4:	3b10      	subs	r3, #16
 80064b6:	f507 5197 	add.w	r1, r7, #4832	; 0x12e0
 80064ba:	f101 010c 	add.w	r1, r1, #12
 80064be:	6809      	ldr	r1, [r1, #0]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	440b      	add	r3, r1
 80064c4:	6013      	str	r3, [r2, #0]
				UB_VGA_SetPixel(x_pos, y_pos, letter_R[i][j]);
 80064c6:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80064ca:	f103 030c 	add.w	r3, r3, #12
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	b298      	uxth	r0, r3
 80064d2:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80064d6:	f103 0308 	add.w	r3, r3, #8
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	b29c      	uxth	r4, r3
 80064de:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80064e2:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 80064e6:	f102 020c 	add.w	r2, r2, #12
 80064ea:	6812      	ldr	r2, [r2, #0]
 80064ec:	0091      	lsls	r1, r2, #2
 80064ee:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 80064f2:	f102 0208 	add.w	r2, r2, #8
 80064f6:	6812      	ldr	r2, [r2, #0]
 80064f8:	440a      	add	r2, r1
 80064fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	461a      	mov	r2, r3
 8006502:	4621      	mov	r1, r4
 8006504:	f001 fde8 	bl	80080d8 <UB_VGA_SetPixel>
			for (int j=0; j<4; j++)
 8006508:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800650c:	f103 0308 	add.w	r3, r3, #8
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	3301      	adds	r3, #1
 8006514:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8006518:	f102 0208 	add.w	r2, r2, #8
 800651c:	6013      	str	r3, [r2, #0]
 800651e:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8006522:	f103 0308 	add.w	r3, r3, #8
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	2b03      	cmp	r3, #3
 800652a:	ddae      	ble.n	800648a <letter_select+0x5566>
		for (int i=0; i<10; i++)
 800652c:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8006530:	f103 030c 	add.w	r3, r3, #12
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	3301      	adds	r3, #1
 8006538:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 800653c:	f102 020c 	add.w	r2, r2, #12
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8006546:	f103 030c 	add.w	r3, r3, #12
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b09      	cmp	r3, #9
 800654e:	dd95      	ble.n	800647c <letter_select+0x5558>
			}
		}
		break;
 8006550:	f000 bc4e 	b.w	8006df0 <letter_select+0x5ecc>

	case 's':
		for (int i=0; i<10; i++)
 8006554:	2300      	movs	r3, #0
 8006556:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 800655a:	f102 0204 	add.w	r2, r2, #4
 800655e:	6013      	str	r3, [r2, #0]
 8006560:	e052      	b.n	8006608 <letter_select+0x56e4>
		{
			for (int j=0; j<4; j++)
 8006562:	2300      	movs	r3, #0
 8006564:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8006568:	6013      	str	r3, [r2, #0]
 800656a:	e03d      	b.n	80065e8 <letter_select+0x56c4>
			{
				int x_pos = j + x;
 800656c:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8006570:	f102 0204 	add.w	r2, r2, #4
 8006574:	f107 0318 	add.w	r3, r7, #24
 8006578:	3b0c      	subs	r3, #12
 800657a:	f507 5197 	add.w	r1, r7, #4832	; 0x12e0
 800657e:	6809      	ldr	r1, [r1, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	440b      	add	r3, r1
 8006584:	6013      	str	r3, [r2, #0]
				int y_pos = i + y;
 8006586:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 800658a:	f107 0318 	add.w	r3, r7, #24
 800658e:	3b10      	subs	r3, #16
 8006590:	f507 5197 	add.w	r1, r7, #4832	; 0x12e0
 8006594:	f101 0104 	add.w	r1, r1, #4
 8006598:	6809      	ldr	r1, [r1, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	440b      	add	r3, r1
 800659e:	6013      	str	r3, [r2, #0]
				UB_VGA_SetPixel(x_pos, y_pos, letter_S[i][j]);
 80065a0:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80065a4:	f103 0304 	add.w	r3, r3, #4
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	b298      	uxth	r0, r3
 80065ac:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	b29c      	uxth	r4, r3
 80065b4:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80065b8:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 80065bc:	f102 0204 	add.w	r2, r2, #4
 80065c0:	6812      	ldr	r2, [r2, #0]
 80065c2:	0091      	lsls	r1, r2, #2
 80065c4:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 80065c8:	6812      	ldr	r2, [r2, #0]
 80065ca:	440a      	add	r2, r1
 80065cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	461a      	mov	r2, r3
 80065d4:	4621      	mov	r1, r4
 80065d6:	f001 fd7f 	bl	80080d8 <UB_VGA_SetPixel>
			for (int j=0; j<4; j++)
 80065da:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	3301      	adds	r3, #1
 80065e2:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 80065e6:	6013      	str	r3, [r2, #0]
 80065e8:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b03      	cmp	r3, #3
 80065f0:	ddbc      	ble.n	800656c <letter_select+0x5648>
		for (int i=0; i<10; i++)
 80065f2:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 80065f6:	f103 0304 	add.w	r3, r3, #4
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3301      	adds	r3, #1
 80065fe:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8006602:	f102 0204 	add.w	r2, r2, #4
 8006606:	6013      	str	r3, [r2, #0]
 8006608:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800660c:	f103 0304 	add.w	r3, r3, #4
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b09      	cmp	r3, #9
 8006614:	dda5      	ble.n	8006562 <letter_select+0x563e>
			}
		}
		break;
 8006616:	e3eb      	b.n	8006df0 <letter_select+0x5ecc>
	case 't':
		for (int i=0; i<10; i++)
 8006618:	2300      	movs	r3, #0
 800661a:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800661e:	f102 021c 	add.w	r2, r2, #28
 8006622:	6013      	str	r3, [r2, #0]
 8006624:	e064      	b.n	80066f0 <letter_select+0x57cc>
		{
			for (int j=0; j<5; j++)
 8006626:	2300      	movs	r3, #0
 8006628:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800662c:	f102 0218 	add.w	r2, r2, #24
 8006630:	6013      	str	r3, [r2, #0]
 8006632:	e04b      	b.n	80066cc <letter_select+0x57a8>
			{
				int x_pos = j + x;
 8006634:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8006638:	f102 021c 	add.w	r2, r2, #28
 800663c:	f107 0318 	add.w	r3, r7, #24
 8006640:	3b0c      	subs	r3, #12
 8006642:	f507 5196 	add.w	r1, r7, #4800	; 0x12c0
 8006646:	f101 0118 	add.w	r1, r1, #24
 800664a:	6809      	ldr	r1, [r1, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	440b      	add	r3, r1
 8006650:	6013      	str	r3, [r2, #0]
				int y_pos = i + y;
 8006652:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8006656:	f102 0218 	add.w	r2, r2, #24
 800665a:	f107 0318 	add.w	r3, r7, #24
 800665e:	3b10      	subs	r3, #16
 8006660:	f507 5196 	add.w	r1, r7, #4800	; 0x12c0
 8006664:	f101 011c 	add.w	r1, r1, #28
 8006668:	6809      	ldr	r1, [r1, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	440b      	add	r3, r1
 800666e:	6013      	str	r3, [r2, #0]
				UB_VGA_SetPixel(x_pos, y_pos, letter_T[i][j]);
 8006670:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8006674:	f103 031c 	add.w	r3, r3, #28
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	b298      	uxth	r0, r3
 800667c:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8006680:	f103 0318 	add.w	r3, r3, #24
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	b29c      	uxth	r4, r3
 8006688:	f507 61a7 	add.w	r1, r7, #1336	; 0x538
 800668c:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8006690:	f103 031c 	add.w	r3, r3, #28
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	4613      	mov	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80066a0:	f102 0218 	add.w	r2, r2, #24
 80066a4:	6812      	ldr	r2, [r2, #0]
 80066a6:	4413      	add	r3, r2
 80066a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	461a      	mov	r2, r3
 80066b0:	4621      	mov	r1, r4
 80066b2:	f001 fd11 	bl	80080d8 <UB_VGA_SetPixel>
			for (int j=0; j<5; j++)
 80066b6:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80066ba:	f103 0318 	add.w	r3, r3, #24
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	3301      	adds	r3, #1
 80066c2:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80066c6:	f102 0218 	add.w	r2, r2, #24
 80066ca:	6013      	str	r3, [r2, #0]
 80066cc:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80066d0:	f103 0318 	add.w	r3, r3, #24
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b04      	cmp	r3, #4
 80066d8:	ddac      	ble.n	8006634 <letter_select+0x5710>
		for (int i=0; i<10; i++)
 80066da:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80066de:	f103 031c 	add.w	r3, r3, #28
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	3301      	adds	r3, #1
 80066e6:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80066ea:	f102 021c 	add.w	r2, r2, #28
 80066ee:	6013      	str	r3, [r2, #0]
 80066f0:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80066f4:	f103 031c 	add.w	r3, r3, #28
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2b09      	cmp	r3, #9
 80066fc:	dd93      	ble.n	8006626 <letter_select+0x5702>
			}
		}
		break;
 80066fe:	e377      	b.n	8006df0 <letter_select+0x5ecc>
	case 'u':
		for (int i=0; i<10; i++)
 8006700:	2300      	movs	r3, #0
 8006702:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8006706:	f102 0214 	add.w	r2, r2, #20
 800670a:	6013      	str	r3, [r2, #0]
 800670c:	e062      	b.n	80067d4 <letter_select+0x58b0>
		{
			for (int j=0; j<4; j++)
 800670e:	2300      	movs	r3, #0
 8006710:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8006714:	f102 0210 	add.w	r2, r2, #16
 8006718:	6013      	str	r3, [r2, #0]
 800671a:	e049      	b.n	80067b0 <letter_select+0x588c>
			{
				int x_pos = j + x;
 800671c:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8006720:	f102 0214 	add.w	r2, r2, #20
 8006724:	f107 0318 	add.w	r3, r7, #24
 8006728:	3b0c      	subs	r3, #12
 800672a:	f507 5196 	add.w	r1, r7, #4800	; 0x12c0
 800672e:	f101 0110 	add.w	r1, r1, #16
 8006732:	6809      	ldr	r1, [r1, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	440b      	add	r3, r1
 8006738:	6013      	str	r3, [r2, #0]
				int y_pos = i + y;
 800673a:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 800673e:	f102 0210 	add.w	r2, r2, #16
 8006742:	f107 0318 	add.w	r3, r7, #24
 8006746:	3b10      	subs	r3, #16
 8006748:	f507 5196 	add.w	r1, r7, #4800	; 0x12c0
 800674c:	f101 0114 	add.w	r1, r1, #20
 8006750:	6809      	ldr	r1, [r1, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	440b      	add	r3, r1
 8006756:	6013      	str	r3, [r2, #0]
				UB_VGA_SetPixel(x_pos, y_pos, letter_U[i][j]);
 8006758:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 800675c:	f103 0314 	add.w	r3, r3, #20
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	b298      	uxth	r0, r3
 8006764:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8006768:	f103 0310 	add.w	r3, r3, #16
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	b29c      	uxth	r4, r3
 8006770:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8006774:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8006778:	f102 0214 	add.w	r2, r2, #20
 800677c:	6812      	ldr	r2, [r2, #0]
 800677e:	0091      	lsls	r1, r2, #2
 8006780:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8006784:	f102 0210 	add.w	r2, r2, #16
 8006788:	6812      	ldr	r2, [r2, #0]
 800678a:	440a      	add	r2, r1
 800678c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006790:	b2db      	uxtb	r3, r3
 8006792:	461a      	mov	r2, r3
 8006794:	4621      	mov	r1, r4
 8006796:	f001 fc9f 	bl	80080d8 <UB_VGA_SetPixel>
			for (int j=0; j<4; j++)
 800679a:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800679e:	f103 0310 	add.w	r3, r3, #16
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	3301      	adds	r3, #1
 80067a6:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80067aa:	f102 0210 	add.w	r2, r2, #16
 80067ae:	6013      	str	r3, [r2, #0]
 80067b0:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80067b4:	f103 0310 	add.w	r3, r3, #16
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2b03      	cmp	r3, #3
 80067bc:	ddae      	ble.n	800671c <letter_select+0x57f8>
		for (int i=0; i<10; i++)
 80067be:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80067c2:	f103 0314 	add.w	r3, r3, #20
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	3301      	adds	r3, #1
 80067ca:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80067ce:	f102 0214 	add.w	r2, r2, #20
 80067d2:	6013      	str	r3, [r2, #0]
 80067d4:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80067d8:	f103 0314 	add.w	r3, r3, #20
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2b09      	cmp	r3, #9
 80067e0:	dd95      	ble.n	800670e <letter_select+0x57ea>
			}
		}
		break;
 80067e2:	e305      	b.n	8006df0 <letter_select+0x5ecc>


	case 'v':
		for (int i=0; i<10; i++)
 80067e4:	2300      	movs	r3, #0
 80067e6:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80067ea:	f102 020c 	add.w	r2, r2, #12
 80067ee:	6013      	str	r3, [r2, #0]
 80067f0:	e062      	b.n	80068b8 <letter_select+0x5994>
		{
			for (int j=0; j<4; j++)
 80067f2:	2300      	movs	r3, #0
 80067f4:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80067f8:	f102 0208 	add.w	r2, r2, #8
 80067fc:	6013      	str	r3, [r2, #0]
 80067fe:	e049      	b.n	8006894 <letter_select+0x5970>
			{
				int x_pos = j + x;
 8006800:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8006804:	f102 020c 	add.w	r2, r2, #12
 8006808:	f107 0318 	add.w	r3, r7, #24
 800680c:	3b0c      	subs	r3, #12
 800680e:	f507 5196 	add.w	r1, r7, #4800	; 0x12c0
 8006812:	f101 0108 	add.w	r1, r1, #8
 8006816:	6809      	ldr	r1, [r1, #0]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	440b      	add	r3, r1
 800681c:	6013      	str	r3, [r2, #0]
				int y_pos = i + y;
 800681e:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8006822:	f102 0208 	add.w	r2, r2, #8
 8006826:	f107 0318 	add.w	r3, r7, #24
 800682a:	3b10      	subs	r3, #16
 800682c:	f507 5196 	add.w	r1, r7, #4800	; 0x12c0
 8006830:	f101 010c 	add.w	r1, r1, #12
 8006834:	6809      	ldr	r1, [r1, #0]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	440b      	add	r3, r1
 800683a:	6013      	str	r3, [r2, #0]
				UB_VGA_SetPixel(x_pos, y_pos, letter_V[i][j]);
 800683c:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8006840:	f103 030c 	add.w	r3, r3, #12
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	b298      	uxth	r0, r3
 8006848:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 800684c:	f103 0308 	add.w	r3, r3, #8
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	b29c      	uxth	r4, r3
 8006854:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8006858:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800685c:	f102 020c 	add.w	r2, r2, #12
 8006860:	6812      	ldr	r2, [r2, #0]
 8006862:	0091      	lsls	r1, r2, #2
 8006864:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8006868:	f102 0208 	add.w	r2, r2, #8
 800686c:	6812      	ldr	r2, [r2, #0]
 800686e:	440a      	add	r2, r1
 8006870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006874:	b2db      	uxtb	r3, r3
 8006876:	461a      	mov	r2, r3
 8006878:	4621      	mov	r1, r4
 800687a:	f001 fc2d 	bl	80080d8 <UB_VGA_SetPixel>
			for (int j=0; j<4; j++)
 800687e:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8006882:	f103 0308 	add.w	r3, r3, #8
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	3301      	adds	r3, #1
 800688a:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800688e:	f102 0208 	add.w	r2, r2, #8
 8006892:	6013      	str	r3, [r2, #0]
 8006894:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8006898:	f103 0308 	add.w	r3, r3, #8
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	2b03      	cmp	r3, #3
 80068a0:	ddae      	ble.n	8006800 <letter_select+0x58dc>
		for (int i=0; i<10; i++)
 80068a2:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80068a6:	f103 030c 	add.w	r3, r3, #12
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	3301      	adds	r3, #1
 80068ae:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80068b2:	f102 020c 	add.w	r2, r2, #12
 80068b6:	6013      	str	r3, [r2, #0]
 80068b8:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80068bc:	f103 030c 	add.w	r3, r3, #12
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2b09      	cmp	r3, #9
 80068c4:	dd95      	ble.n	80067f2 <letter_select+0x58ce>
			}
		}
		break;
 80068c6:	e293      	b.n	8006df0 <letter_select+0x5ecc>
	case 'w':
		for (int i=0; i<10; i++)
 80068c8:	2300      	movs	r3, #0
 80068ca:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80068ce:	f102 0204 	add.w	r2, r2, #4
 80068d2:	6013      	str	r3, [r2, #0]
 80068d4:	e052      	b.n	800697c <letter_select+0x5a58>
		{
			for (int j=0; j<4; j++)
 80068d6:	2300      	movs	r3, #0
 80068d8:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80068dc:	6013      	str	r3, [r2, #0]
 80068de:	e03d      	b.n	800695c <letter_select+0x5a38>
			{
				int x_pos = j + x;
 80068e0:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80068e4:	f102 0204 	add.w	r2, r2, #4
 80068e8:	f107 0318 	add.w	r3, r7, #24
 80068ec:	3b0c      	subs	r3, #12
 80068ee:	f507 5196 	add.w	r1, r7, #4800	; 0x12c0
 80068f2:	6809      	ldr	r1, [r1, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	440b      	add	r3, r1
 80068f8:	6013      	str	r3, [r2, #0]
				int y_pos = i + y;
 80068fa:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80068fe:	f107 0318 	add.w	r3, r7, #24
 8006902:	3b10      	subs	r3, #16
 8006904:	f507 5196 	add.w	r1, r7, #4800	; 0x12c0
 8006908:	f101 0104 	add.w	r1, r1, #4
 800690c:	6809      	ldr	r1, [r1, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	440b      	add	r3, r1
 8006912:	6013      	str	r3, [r2, #0]
				UB_VGA_SetPixel(x_pos, y_pos, letter_W[i][j]);
 8006914:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8006918:	f103 0304 	add.w	r3, r3, #4
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	b298      	uxth	r0, r3
 8006920:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	b29c      	uxth	r4, r3
 8006928:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800692c:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8006930:	f102 0204 	add.w	r2, r2, #4
 8006934:	6812      	ldr	r2, [r2, #0]
 8006936:	0091      	lsls	r1, r2, #2
 8006938:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800693c:	6812      	ldr	r2, [r2, #0]
 800693e:	440a      	add	r2, r1
 8006940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006944:	b2db      	uxtb	r3, r3
 8006946:	461a      	mov	r2, r3
 8006948:	4621      	mov	r1, r4
 800694a:	f001 fbc5 	bl	80080d8 <UB_VGA_SetPixel>
			for (int j=0; j<4; j++)
 800694e:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	3301      	adds	r3, #1
 8006956:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800695a:	6013      	str	r3, [r2, #0]
 800695c:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b03      	cmp	r3, #3
 8006964:	ddbc      	ble.n	80068e0 <letter_select+0x59bc>
		for (int i=0; i<10; i++)
 8006966:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800696a:	f103 0304 	add.w	r3, r3, #4
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	3301      	adds	r3, #1
 8006972:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8006976:	f102 0204 	add.w	r2, r2, #4
 800697a:	6013      	str	r3, [r2, #0]
 800697c:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8006980:	f103 0304 	add.w	r3, r3, #4
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b09      	cmp	r3, #9
 8006988:	dda5      	ble.n	80068d6 <letter_select+0x59b2>
			}
		}
		break;
 800698a:	e231      	b.n	8006df0 <letter_select+0x5ecc>

	case 'x':
		for (int i=0; i<10; i++)
 800698c:	2300      	movs	r3, #0
 800698e:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8006992:	f102 021c 	add.w	r2, r2, #28
 8006996:	6013      	str	r3, [r2, #0]
 8006998:	e062      	b.n	8006a60 <letter_select+0x5b3c>
		{
			for (int j=0; j<4; j++)
 800699a:	2300      	movs	r3, #0
 800699c:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 80069a0:	f102 0218 	add.w	r2, r2, #24
 80069a4:	6013      	str	r3, [r2, #0]
 80069a6:	e049      	b.n	8006a3c <letter_select+0x5b18>
			{
				int x_pos = j + x;
 80069a8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80069ac:	f102 021c 	add.w	r2, r2, #28
 80069b0:	f107 0318 	add.w	r3, r7, #24
 80069b4:	3b0c      	subs	r3, #12
 80069b6:	f507 5195 	add.w	r1, r7, #4768	; 0x12a0
 80069ba:	f101 0118 	add.w	r1, r1, #24
 80069be:	6809      	ldr	r1, [r1, #0]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	440b      	add	r3, r1
 80069c4:	6013      	str	r3, [r2, #0]
				int y_pos = i + y;
 80069c6:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80069ca:	f102 0218 	add.w	r2, r2, #24
 80069ce:	f107 0318 	add.w	r3, r7, #24
 80069d2:	3b10      	subs	r3, #16
 80069d4:	f507 5195 	add.w	r1, r7, #4768	; 0x12a0
 80069d8:	f101 011c 	add.w	r1, r1, #28
 80069dc:	6809      	ldr	r1, [r1, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	440b      	add	r3, r1
 80069e2:	6013      	str	r3, [r2, #0]
				UB_VGA_SetPixel(x_pos, y_pos, letter_X[i][j]);
 80069e4:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80069e8:	f103 031c 	add.w	r3, r3, #28
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	b298      	uxth	r0, r3
 80069f0:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80069f4:	f103 0318 	add.w	r3, r3, #24
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	b29c      	uxth	r4, r3
 80069fc:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8006a00:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8006a04:	f102 021c 	add.w	r2, r2, #28
 8006a08:	6812      	ldr	r2, [r2, #0]
 8006a0a:	0091      	lsls	r1, r2, #2
 8006a0c:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8006a10:	f102 0218 	add.w	r2, r2, #24
 8006a14:	6812      	ldr	r2, [r2, #0]
 8006a16:	440a      	add	r2, r1
 8006a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	461a      	mov	r2, r3
 8006a20:	4621      	mov	r1, r4
 8006a22:	f001 fb59 	bl	80080d8 <UB_VGA_SetPixel>
			for (int j=0; j<4; j++)
 8006a26:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8006a2a:	f103 0318 	add.w	r3, r3, #24
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3301      	adds	r3, #1
 8006a32:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8006a36:	f102 0218 	add.w	r2, r2, #24
 8006a3a:	6013      	str	r3, [r2, #0]
 8006a3c:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8006a40:	f103 0318 	add.w	r3, r3, #24
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b03      	cmp	r3, #3
 8006a48:	ddae      	ble.n	80069a8 <letter_select+0x5a84>
		for (int i=0; i<10; i++)
 8006a4a:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8006a4e:	f103 031c 	add.w	r3, r3, #28
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3301      	adds	r3, #1
 8006a56:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8006a5a:	f102 021c 	add.w	r2, r2, #28
 8006a5e:	6013      	str	r3, [r2, #0]
 8006a60:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8006a64:	f103 031c 	add.w	r3, r3, #28
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b09      	cmp	r3, #9
 8006a6c:	dd95      	ble.n	800699a <letter_select+0x5a76>
			}
		}
		break;
 8006a6e:	e1bf      	b.n	8006df0 <letter_select+0x5ecc>
	case 'y':
		for (int i=0; i<10; i++)
 8006a70:	2300      	movs	r3, #0
 8006a72:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8006a76:	f102 0214 	add.w	r2, r2, #20
 8006a7a:	6013      	str	r3, [r2, #0]
 8006a7c:	e065      	b.n	8006b4a <letter_select+0x5c26>
		{
			for (int j=0; j<5; j++)
 8006a7e:	2300      	movs	r3, #0
 8006a80:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8006a84:	f102 0210 	add.w	r2, r2, #16
 8006a88:	6013      	str	r3, [r2, #0]
 8006a8a:	e04c      	b.n	8006b26 <letter_select+0x5c02>
			{
				int x_pos = j + x;
 8006a8c:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8006a90:	f102 0214 	add.w	r2, r2, #20
 8006a94:	f107 0318 	add.w	r3, r7, #24
 8006a98:	3b0c      	subs	r3, #12
 8006a9a:	f507 5195 	add.w	r1, r7, #4768	; 0x12a0
 8006a9e:	f101 0110 	add.w	r1, r1, #16
 8006aa2:	6809      	ldr	r1, [r1, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	440b      	add	r3, r1
 8006aa8:	6013      	str	r3, [r2, #0]
				int y_pos = i + y;
 8006aaa:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8006aae:	f102 0210 	add.w	r2, r2, #16
 8006ab2:	f107 0318 	add.w	r3, r7, #24
 8006ab6:	3b10      	subs	r3, #16
 8006ab8:	f507 5195 	add.w	r1, r7, #4768	; 0x12a0
 8006abc:	f101 0114 	add.w	r1, r1, #20
 8006ac0:	6809      	ldr	r1, [r1, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	440b      	add	r3, r1
 8006ac6:	6013      	str	r3, [r2, #0]
				UB_VGA_SetPixel(x_pos, y_pos, letter_Y[i][j]);
 8006ac8:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8006acc:	f103 0314 	add.w	r3, r3, #20
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	b298      	uxth	r0, r3
 8006ad4:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8006ad8:	f103 0310 	add.w	r3, r3, #16
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	b29c      	uxth	r4, r3
 8006ae0:	f507 72fc 	add.w	r2, r7, #504	; 0x1f8
 8006ae4:	3a08      	subs	r2, #8
 8006ae6:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8006aea:	f103 0314 	add.w	r3, r3, #20
 8006aee:	6819      	ldr	r1, [r3, #0]
 8006af0:	460b      	mov	r3, r1
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	440b      	add	r3, r1
 8006af6:	f507 5195 	add.w	r1, r7, #4768	; 0x12a0
 8006afa:	f101 0110 	add.w	r1, r1, #16
 8006afe:	6809      	ldr	r1, [r1, #0]
 8006b00:	440b      	add	r3, r1
 8006b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	461a      	mov	r2, r3
 8006b0a:	4621      	mov	r1, r4
 8006b0c:	f001 fae4 	bl	80080d8 <UB_VGA_SetPixel>
			for (int j=0; j<5; j++)
 8006b10:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8006b14:	f103 0310 	add.w	r3, r3, #16
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8006b20:	f102 0210 	add.w	r2, r2, #16
 8006b24:	6013      	str	r3, [r2, #0]
 8006b26:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8006b2a:	f103 0310 	add.w	r3, r3, #16
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b04      	cmp	r3, #4
 8006b32:	ddab      	ble.n	8006a8c <letter_select+0x5b68>
		for (int i=0; i<10; i++)
 8006b34:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8006b38:	f103 0314 	add.w	r3, r3, #20
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8006b44:	f102 0214 	add.w	r2, r2, #20
 8006b48:	6013      	str	r3, [r2, #0]
 8006b4a:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8006b4e:	f103 0314 	add.w	r3, r3, #20
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2b09      	cmp	r3, #9
 8006b56:	dd92      	ble.n	8006a7e <letter_select+0x5b5a>
			}
		}
		break;
 8006b58:	e14a      	b.n	8006df0 <letter_select+0x5ecc>


	case 'z':
		for (int i=0; i<10; i++)
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8006b60:	f102 020c 	add.w	r2, r2, #12
 8006b64:	6013      	str	r3, [r2, #0]
 8006b66:	e063      	b.n	8006c30 <letter_select+0x5d0c>
		{
			for (int j=0; j<4; j++)
 8006b68:	2300      	movs	r3, #0
 8006b6a:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8006b6e:	f102 0208 	add.w	r2, r2, #8
 8006b72:	6013      	str	r3, [r2, #0]
 8006b74:	e04a      	b.n	8006c0c <letter_select+0x5ce8>
			{
				int x_pos = j + x;
 8006b76:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8006b7a:	f102 020c 	add.w	r2, r2, #12
 8006b7e:	f107 0318 	add.w	r3, r7, #24
 8006b82:	3b0c      	subs	r3, #12
 8006b84:	f507 5195 	add.w	r1, r7, #4768	; 0x12a0
 8006b88:	f101 0108 	add.w	r1, r1, #8
 8006b8c:	6809      	ldr	r1, [r1, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	440b      	add	r3, r1
 8006b92:	6013      	str	r3, [r2, #0]
				int y_pos = i + y;
 8006b94:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8006b98:	f102 0208 	add.w	r2, r2, #8
 8006b9c:	f107 0318 	add.w	r3, r7, #24
 8006ba0:	3b10      	subs	r3, #16
 8006ba2:	f507 5195 	add.w	r1, r7, #4768	; 0x12a0
 8006ba6:	f101 010c 	add.w	r1, r1, #12
 8006baa:	6809      	ldr	r1, [r1, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	440b      	add	r3, r1
 8006bb0:	6013      	str	r3, [r2, #0]
				UB_VGA_SetPixel(x_pos, y_pos, letter_Z[i][j]);
 8006bb2:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8006bb6:	f103 030c 	add.w	r3, r3, #12
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	b298      	uxth	r0, r3
 8006bbe:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8006bc2:	f103 0308 	add.w	r3, r3, #8
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	b29c      	uxth	r4, r3
 8006bca:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8006bce:	3b08      	subs	r3, #8
 8006bd0:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8006bd4:	f102 020c 	add.w	r2, r2, #12
 8006bd8:	6812      	ldr	r2, [r2, #0]
 8006bda:	0091      	lsls	r1, r2, #2
 8006bdc:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8006be0:	f102 0208 	add.w	r2, r2, #8
 8006be4:	6812      	ldr	r2, [r2, #0]
 8006be6:	440a      	add	r2, r1
 8006be8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	461a      	mov	r2, r3
 8006bf0:	4621      	mov	r1, r4
 8006bf2:	f001 fa71 	bl	80080d8 <UB_VGA_SetPixel>
			for (int j=0; j<4; j++)
 8006bf6:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8006bfa:	f103 0308 	add.w	r3, r3, #8
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	3301      	adds	r3, #1
 8006c02:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8006c06:	f102 0208 	add.w	r2, r2, #8
 8006c0a:	6013      	str	r3, [r2, #0]
 8006c0c:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8006c10:	f103 0308 	add.w	r3, r3, #8
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	ddad      	ble.n	8006b76 <letter_select+0x5c52>
		for (int i=0; i<10; i++)
 8006c1a:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8006c1e:	f103 030c 	add.w	r3, r3, #12
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	3301      	adds	r3, #1
 8006c26:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8006c2a:	f102 020c 	add.w	r2, r2, #12
 8006c2e:	6013      	str	r3, [r2, #0]
 8006c30:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8006c34:	f103 030c 	add.w	r3, r3, #12
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b09      	cmp	r3, #9
 8006c3c:	dd94      	ble.n	8006b68 <letter_select+0x5c44>
			}
		}
		break;
 8006c3e:	e0d7      	b.n	8006df0 <letter_select+0x5ecc>
	case ' ':
		for (int i=0; i<10; i++)
 8006c40:	2300      	movs	r3, #0
 8006c42:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8006c46:	f102 0204 	add.w	r2, r2, #4
 8006c4a:	6013      	str	r3, [r2, #0]
 8006c4c:	e053      	b.n	8006cf6 <letter_select+0x5dd2>
		{
			for (int j=0; j<4; j++)
 8006c4e:	2300      	movs	r3, #0
 8006c50:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8006c54:	6013      	str	r3, [r2, #0]
 8006c56:	e03e      	b.n	8006cd6 <letter_select+0x5db2>
			{
				int x_pos = j + x;
 8006c58:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8006c5c:	f102 0204 	add.w	r2, r2, #4
 8006c60:	f107 0318 	add.w	r3, r7, #24
 8006c64:	3b0c      	subs	r3, #12
 8006c66:	f507 5195 	add.w	r1, r7, #4768	; 0x12a0
 8006c6a:	6809      	ldr	r1, [r1, #0]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	440b      	add	r3, r1
 8006c70:	6013      	str	r3, [r2, #0]
				int y_pos = i + y;
 8006c72:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8006c76:	f107 0318 	add.w	r3, r7, #24
 8006c7a:	3b10      	subs	r3, #16
 8006c7c:	f507 5195 	add.w	r1, r7, #4768	; 0x12a0
 8006c80:	f101 0104 	add.w	r1, r1, #4
 8006c84:	6809      	ldr	r1, [r1, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	440b      	add	r3, r1
 8006c8a:	6013      	str	r3, [r2, #0]
				UB_VGA_SetPixel(x_pos, y_pos, spatie[i][j]);
 8006c8c:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8006c90:	f103 0304 	add.w	r3, r3, #4
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	b298      	uxth	r0, r3
 8006c98:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	b29c      	uxth	r4, r3
 8006ca0:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006ca4:	3b08      	subs	r3, #8
 8006ca6:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8006caa:	f102 0204 	add.w	r2, r2, #4
 8006cae:	6812      	ldr	r2, [r2, #0]
 8006cb0:	0091      	lsls	r1, r2, #2
 8006cb2:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8006cb6:	6812      	ldr	r2, [r2, #0]
 8006cb8:	440a      	add	r2, r1
 8006cba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	4621      	mov	r1, r4
 8006cc4:	f001 fa08 	bl	80080d8 <UB_VGA_SetPixel>
			for (int j=0; j<4; j++)
 8006cc8:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2b03      	cmp	r3, #3
 8006cde:	ddbb      	ble.n	8006c58 <letter_select+0x5d34>
		for (int i=0; i<10; i++)
 8006ce0:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8006ce4:	f103 0304 	add.w	r3, r3, #4
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	3301      	adds	r3, #1
 8006cec:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8006cf0:	f102 0204 	add.w	r2, r2, #4
 8006cf4:	6013      	str	r3, [r2, #0]
 8006cf6:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8006cfa:	f103 0304 	add.w	r3, r3, #4
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b09      	cmp	r3, #9
 8006d02:	dda4      	ble.n	8006c4e <letter_select+0x5d2a>
			}
		}
		break;
 8006d04:	e074      	b.n	8006df0 <letter_select+0x5ecc>
	case ',':
		for (int i=0; i<13; i++)
 8006d06:	2300      	movs	r3, #0
 8006d08:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8006d0c:	f102 021c 	add.w	r2, r2, #28
 8006d10:	6013      	str	r3, [r2, #0]
 8006d12:	e065      	b.n	8006de0 <letter_select+0x5ebc>
		{
			for (int j=0; j<3; j++)
 8006d14:	2300      	movs	r3, #0
 8006d16:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8006d1a:	f102 0218 	add.w	r2, r2, #24
 8006d1e:	6013      	str	r3, [r2, #0]
 8006d20:	e04c      	b.n	8006dbc <letter_select+0x5e98>
			{
				int x_pos = j + x;
 8006d22:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8006d26:	f102 021c 	add.w	r2, r2, #28
 8006d2a:	f107 0318 	add.w	r3, r7, #24
 8006d2e:	3b0c      	subs	r3, #12
 8006d30:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 8006d34:	f101 0118 	add.w	r1, r1, #24
 8006d38:	6809      	ldr	r1, [r1, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	440b      	add	r3, r1
 8006d3e:	6013      	str	r3, [r2, #0]
				int y_pos = i + y;
 8006d40:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8006d44:	f102 0218 	add.w	r2, r2, #24
 8006d48:	f107 0318 	add.w	r3, r7, #24
 8006d4c:	3b10      	subs	r3, #16
 8006d4e:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 8006d52:	f101 011c 	add.w	r1, r1, #28
 8006d56:	6809      	ldr	r1, [r1, #0]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	440b      	add	r3, r1
 8006d5c:	6013      	str	r3, [r2, #0]
				UB_VGA_SetPixel(x_pos, y_pos, komma[i][j]);
 8006d5e:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8006d62:	f103 031c 	add.w	r3, r3, #28
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	b298      	uxth	r0, r3
 8006d6a:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8006d6e:	f103 0318 	add.w	r3, r3, #24
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	b29c      	uxth	r4, r3
 8006d76:	f107 0218 	add.w	r2, r7, #24
 8006d7a:	3a04      	subs	r2, #4
 8006d7c:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8006d80:	f103 031c 	add.w	r3, r3, #28
 8006d84:	6819      	ldr	r1, [r3, #0]
 8006d86:	460b      	mov	r3, r1
 8006d88:	005b      	lsls	r3, r3, #1
 8006d8a:	440b      	add	r3, r1
 8006d8c:	f507 5194 	add.w	r1, r7, #4736	; 0x1280
 8006d90:	f101 0118 	add.w	r1, r1, #24
 8006d94:	6809      	ldr	r1, [r1, #0]
 8006d96:	440b      	add	r3, r1
 8006d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	461a      	mov	r2, r3
 8006da0:	4621      	mov	r1, r4
 8006da2:	f001 f999 	bl	80080d8 <UB_VGA_SetPixel>
			for (int j=0; j<3; j++)
 8006da6:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8006daa:	f103 0318 	add.w	r3, r3, #24
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	3301      	adds	r3, #1
 8006db2:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8006db6:	f102 0218 	add.w	r2, r2, #24
 8006dba:	6013      	str	r3, [r2, #0]
 8006dbc:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8006dc0:	f103 0318 	add.w	r3, r3, #24
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	ddab      	ble.n	8006d22 <letter_select+0x5dfe>
		for (int i=0; i<13; i++)
 8006dca:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8006dce:	f103 031c 	add.w	r3, r3, #28
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	f507 5294 	add.w	r2, r7, #4736	; 0x1280
 8006dda:	f102 021c 	add.w	r2, r2, #28
 8006dde:	6013      	str	r3, [r2, #0]
 8006de0:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8006de4:	f103 031c 	add.w	r3, r3, #28
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2b0c      	cmp	r3, #12
 8006dec:	dd92      	ble.n	8006d14 <letter_select+0x5df0>
			}
		}
		break;
 8006dee:	bf00      	nop

	}
}
 8006df0:	bf00      	nop
 8006df2:	f507 579b 	add.w	r7, r7, #4960	; 0x1360
 8006df6:	371c      	adds	r7, #28
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd90      	pop	{r4, r7, pc}

08006dfc <draw_bitmap>:

/*
 * bitmap
 */
void draw_bitmap (int bitmap_selector, int x, int y, int backcolor) {
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	607a      	str	r2, [r7, #4]
 8006e08:	603b      	str	r3, [r7, #0]
				UB_VGA_SetPixel(x_pos, y_pos, arrow_left[i][j]);
			}
		}
	}
*/
}
 8006e0a:	bf00      	nop
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <wait_ms>:

/*
 * wacht
 */
void wait_ms(int time_ms)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b082      	sub	sp, #8
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
	DELAY_ms(time_ms);	// Delay in ms
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4618      	mov	r0, r3
 8006e22:	f001 f8d9 	bl	8007fd8 <DELAY_ms>
}
 8006e26:	bf00      	nop
 8006e28:	3708      	adds	r7, #8
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
	...

08006e30 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	73fb      	strb	r3, [r7, #15]
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	73bb      	strb	r3, [r7, #14]
 8006e40:	230f      	movs	r3, #15
 8006e42:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	78db      	ldrb	r3, [r3, #3]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d039      	beq.n	8006ec0 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8006e4c:	4b27      	ldr	r3, [pc, #156]	; (8006eec <NVIC_Init+0xbc>)
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	43db      	mvns	r3, r3
 8006e52:	0a1b      	lsrs	r3, r3, #8
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	f003 0307 	and.w	r3, r3, #7
 8006e5a:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8006e5c:	7bfb      	ldrb	r3, [r7, #15]
 8006e5e:	f1c3 0304 	rsb	r3, r3, #4
 8006e62:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8006e64:	7b7a      	ldrb	r2, [r7, #13]
 8006e66:	7bfb      	ldrb	r3, [r7, #15]
 8006e68:	fa42 f303 	asr.w	r3, r2, r3
 8006e6c:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	785b      	ldrb	r3, [r3, #1]
 8006e72:	461a      	mov	r2, r3
 8006e74:	7bbb      	ldrb	r3, [r7, #14]
 8006e76:	fa02 f303 	lsl.w	r3, r2, r3
 8006e7a:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	789a      	ldrb	r2, [r3, #2]
 8006e80:	7b7b      	ldrb	r3, [r7, #13]
 8006e82:	4013      	ands	r3, r2
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
 8006e8e:	011b      	lsls	r3, r3, #4
 8006e90:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8006e92:	4a17      	ldr	r2, [pc, #92]	; (8006ef0 <NVIC_Init+0xc0>)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	781b      	ldrb	r3, [r3, #0]
 8006e98:	4413      	add	r3, r2
 8006e9a:	7bfa      	ldrb	r2, [r7, #15]
 8006e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8006ea0:	4a13      	ldr	r2, [pc, #76]	; (8006ef0 <NVIC_Init+0xc0>)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	095b      	lsrs	r3, r3, #5
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	f003 031f 	and.w	r3, r3, #31
 8006eb4:	2101      	movs	r1, #1
 8006eb6:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8006eba:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8006ebe:	e00f      	b.n	8006ee0 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8006ec0:	490b      	ldr	r1, [pc, #44]	; (8006ef0 <NVIC_Init+0xc0>)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	095b      	lsrs	r3, r3, #5
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	f003 031f 	and.w	r3, r3, #31
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8006ed8:	f100 0320 	add.w	r3, r0, #32
 8006edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006ee0:	bf00      	nop
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr
 8006eec:	e000ed00 	.word	0xe000ed00
 8006ef0:	e000e100 	.word	0xe000e100

08006ef4 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f023 0201 	bic.w	r2, r3, #1
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2221      	movs	r2, #33	; 0x21
 8006f2a:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a46      	ldr	r2, [pc, #280]	; (8007048 <DMA_DeInit+0x154>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d103      	bne.n	8006f3c <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8006f34:	4b45      	ldr	r3, [pc, #276]	; (800704c <DMA_DeInit+0x158>)
 8006f36:	223d      	movs	r2, #61	; 0x3d
 8006f38:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8006f3a:	e07e      	b.n	800703a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	4a44      	ldr	r2, [pc, #272]	; (8007050 <DMA_DeInit+0x15c>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d104      	bne.n	8006f4e <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8006f44:	4b41      	ldr	r3, [pc, #260]	; (800704c <DMA_DeInit+0x158>)
 8006f46:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8006f4a:	609a      	str	r2, [r3, #8]
}
 8006f4c:	e075      	b.n	800703a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a40      	ldr	r2, [pc, #256]	; (8007054 <DMA_DeInit+0x160>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d104      	bne.n	8006f60 <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8006f56:	4b3d      	ldr	r3, [pc, #244]	; (800704c <DMA_DeInit+0x158>)
 8006f58:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8006f5c:	609a      	str	r2, [r3, #8]
}
 8006f5e:	e06c      	b.n	800703a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a3d      	ldr	r2, [pc, #244]	; (8007058 <DMA_DeInit+0x164>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d104      	bne.n	8006f72 <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8006f68:	4b38      	ldr	r3, [pc, #224]	; (800704c <DMA_DeInit+0x158>)
 8006f6a:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8006f6e:	609a      	str	r2, [r3, #8]
}
 8006f70:	e063      	b.n	800703a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	4a39      	ldr	r2, [pc, #228]	; (800705c <DMA_DeInit+0x168>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d103      	bne.n	8006f82 <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8006f7a:	4b34      	ldr	r3, [pc, #208]	; (800704c <DMA_DeInit+0x158>)
 8006f7c:	4a38      	ldr	r2, [pc, #224]	; (8007060 <DMA_DeInit+0x16c>)
 8006f7e:	60da      	str	r2, [r3, #12]
}
 8006f80:	e05b      	b.n	800703a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	4a37      	ldr	r2, [pc, #220]	; (8007064 <DMA_DeInit+0x170>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d103      	bne.n	8006f92 <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8006f8a:	4b30      	ldr	r3, [pc, #192]	; (800704c <DMA_DeInit+0x158>)
 8006f8c:	4a36      	ldr	r2, [pc, #216]	; (8007068 <DMA_DeInit+0x174>)
 8006f8e:	60da      	str	r2, [r3, #12]
}
 8006f90:	e053      	b.n	800703a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	4a35      	ldr	r2, [pc, #212]	; (800706c <DMA_DeInit+0x178>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d103      	bne.n	8006fa2 <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8006f9a:	4b2c      	ldr	r3, [pc, #176]	; (800704c <DMA_DeInit+0x158>)
 8006f9c:	4a34      	ldr	r2, [pc, #208]	; (8007070 <DMA_DeInit+0x17c>)
 8006f9e:	60da      	str	r2, [r3, #12]
}
 8006fa0:	e04b      	b.n	800703a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	4a33      	ldr	r2, [pc, #204]	; (8007074 <DMA_DeInit+0x180>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d104      	bne.n	8006fb4 <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8006faa:	4b28      	ldr	r3, [pc, #160]	; (800704c <DMA_DeInit+0x158>)
 8006fac:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8006fb0:	60da      	str	r2, [r3, #12]
}
 8006fb2:	e042      	b.n	800703a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a30      	ldr	r2, [pc, #192]	; (8007078 <DMA_DeInit+0x184>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d103      	bne.n	8006fc4 <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8006fbc:	4b2f      	ldr	r3, [pc, #188]	; (800707c <DMA_DeInit+0x188>)
 8006fbe:	223d      	movs	r2, #61	; 0x3d
 8006fc0:	609a      	str	r2, [r3, #8]
}
 8006fc2:	e03a      	b.n	800703a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a2e      	ldr	r2, [pc, #184]	; (8007080 <DMA_DeInit+0x18c>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d104      	bne.n	8006fd6 <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8006fcc:	4b2b      	ldr	r3, [pc, #172]	; (800707c <DMA_DeInit+0x188>)
 8006fce:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8006fd2:	609a      	str	r2, [r3, #8]
}
 8006fd4:	e031      	b.n	800703a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a2a      	ldr	r2, [pc, #168]	; (8007084 <DMA_DeInit+0x190>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d104      	bne.n	8006fe8 <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8006fde:	4b27      	ldr	r3, [pc, #156]	; (800707c <DMA_DeInit+0x188>)
 8006fe0:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8006fe4:	609a      	str	r2, [r3, #8]
}
 8006fe6:	e028      	b.n	800703a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a27      	ldr	r2, [pc, #156]	; (8007088 <DMA_DeInit+0x194>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d104      	bne.n	8006ffa <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8006ff0:	4b22      	ldr	r3, [pc, #136]	; (800707c <DMA_DeInit+0x188>)
 8006ff2:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8006ff6:	609a      	str	r2, [r3, #8]
}
 8006ff8:	e01f      	b.n	800703a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a23      	ldr	r2, [pc, #140]	; (800708c <DMA_DeInit+0x198>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d103      	bne.n	800700a <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8007002:	4b1e      	ldr	r3, [pc, #120]	; (800707c <DMA_DeInit+0x188>)
 8007004:	4a16      	ldr	r2, [pc, #88]	; (8007060 <DMA_DeInit+0x16c>)
 8007006:	60da      	str	r2, [r3, #12]
}
 8007008:	e017      	b.n	800703a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a20      	ldr	r2, [pc, #128]	; (8007090 <DMA_DeInit+0x19c>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d103      	bne.n	800701a <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8007012:	4b1a      	ldr	r3, [pc, #104]	; (800707c <DMA_DeInit+0x188>)
 8007014:	4a14      	ldr	r2, [pc, #80]	; (8007068 <DMA_DeInit+0x174>)
 8007016:	60da      	str	r2, [r3, #12]
}
 8007018:	e00f      	b.n	800703a <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a1d      	ldr	r2, [pc, #116]	; (8007094 <DMA_DeInit+0x1a0>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d103      	bne.n	800702a <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8007022:	4b16      	ldr	r3, [pc, #88]	; (800707c <DMA_DeInit+0x188>)
 8007024:	4a12      	ldr	r2, [pc, #72]	; (8007070 <DMA_DeInit+0x17c>)
 8007026:	60da      	str	r2, [r3, #12]
}
 8007028:	e007      	b.n	800703a <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a1a      	ldr	r2, [pc, #104]	; (8007098 <DMA_DeInit+0x1a4>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d103      	bne.n	800703a <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8007032:	4b12      	ldr	r3, [pc, #72]	; (800707c <DMA_DeInit+0x188>)
 8007034:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8007038:	60da      	str	r2, [r3, #12]
}
 800703a:	bf00      	nop
 800703c:	370c      	adds	r7, #12
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	40026010 	.word	0x40026010
 800704c:	40026000 	.word	0x40026000
 8007050:	40026028 	.word	0x40026028
 8007054:	40026040 	.word	0x40026040
 8007058:	40026058 	.word	0x40026058
 800705c:	40026070 	.word	0x40026070
 8007060:	2000003d 	.word	0x2000003d
 8007064:	40026088 	.word	0x40026088
 8007068:	20000f40 	.word	0x20000f40
 800706c:	400260a0 	.word	0x400260a0
 8007070:	203d0000 	.word	0x203d0000
 8007074:	400260b8 	.word	0x400260b8
 8007078:	40026410 	.word	0x40026410
 800707c:	40026400 	.word	0x40026400
 8007080:	40026428 	.word	0x40026428
 8007084:	40026440 	.word	0x40026440
 8007088:	40026458 	.word	0x40026458
 800708c:	40026470 	.word	0x40026470
 8007090:	40026488 	.word	0x40026488
 8007094:	400264a0 	.word	0x400264a0
 8007098:	400264b8 	.word	0x400264b8

0800709c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80070a6:	2300      	movs	r3, #0
 80070a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	4b25      	ldr	r3, [pc, #148]	; (8007148 <DMA_Init+0xac>)
 80070b4:	4013      	ands	r3, r2
 80070b6:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	68db      	ldr	r3, [r3, #12]
 80070c0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80070c6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 80070d2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	6a1b      	ldr	r3, [r3, #32]
 80070d8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 80070de:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e4:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 80070ea:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f0:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 80070f2:	68fa      	ldr	r2, [r7, #12]
 80070f4:	4313      	orrs	r3, r2
 80070f6:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f023 0307 	bic.w	r3, r3, #7
 800710a:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007114:	4313      	orrs	r3, r2
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	4313      	orrs	r3, r2
 800711a:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	691a      	ldr	r2, [r3, #16]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	685a      	ldr	r2, [r3, #4]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	689a      	ldr	r2, [r3, #8]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	60da      	str	r2, [r3, #12]
}
 800713a:	bf00      	nop
 800713c:	3714      	adds	r7, #20
 800713e:	46bd      	mov	sp, r7
 8007140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007144:	4770      	bx	lr
 8007146:	bf00      	nop
 8007148:	f01c803f 	.word	0xf01c803f

0800714c <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	460b      	mov	r3, r1
 8007156:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007158:	78fb      	ldrb	r3, [r7, #3]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d006      	beq.n	800716c <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f043 0201 	orr.w	r2, r3, #1
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 800716a:	e005      	b.n	8007178 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f023 0201 	bic.w	r2, r3, #1
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	601a      	str	r2, [r3, #0]
}
 8007178:	bf00      	nop
 800717a:	370c      	adds	r7, #12
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr

08007184 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	60f8      	str	r0, [r7, #12]
 800718c:	60b9      	str	r1, [r7, #8]
 800718e:	4613      	mov	r3, r2
 8007190:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007198:	2b00      	cmp	r3, #0
 800719a:	d00f      	beq.n	80071bc <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 800719c:	79fb      	ldrb	r3, [r7, #7]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d006      	beq.n	80071b0 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	695b      	ldr	r3, [r3, #20]
 80071a6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	615a      	str	r2, [r3, #20]
 80071ae:	e005      	b.n	80071bc <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	695b      	ldr	r3, [r3, #20]
 80071b4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	2b80      	cmp	r3, #128	; 0x80
 80071c0:	d014      	beq.n	80071ec <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 80071c2:	79fb      	ldrb	r3, [r7, #7]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d008      	beq.n	80071da <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	f003 031e 	and.w	r3, r3, #30
 80071d2:	431a      	orrs	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 80071d8:	e008      	b.n	80071ec <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	f003 031e 	and.w	r3, r3, #30
 80071e4:	43db      	mvns	r3, r3
 80071e6:	401a      	ands	r2, r3
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	601a      	str	r2, [r3, #0]
}
 80071ec:	bf00      	nop
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8007202:	2300      	movs	r3, #0
 8007204:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 8007206:	2300      	movs	r3, #0
 8007208:	60fb      	str	r3, [r7, #12]
 800720a:	2300      	movs	r3, #0
 800720c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a22      	ldr	r2, [pc, #136]	; (800729c <DMA_GetITStatus+0xa4>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d802      	bhi.n	800721c <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8007216:	4b22      	ldr	r3, [pc, #136]	; (80072a0 <DMA_GetITStatus+0xa8>)
 8007218:	613b      	str	r3, [r7, #16]
 800721a:	e001      	b.n	8007220 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 800721c:	4b21      	ldr	r3, [pc, #132]	; (80072a4 <DMA_GetITStatus+0xac>)
 800721e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8007226:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00a      	beq.n	8007244 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	0adb      	lsrs	r3, r3, #11
 8007232:	f003 031e 	and.w	r3, r3, #30
 8007236:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4013      	ands	r3, r2
 8007240:	60bb      	str	r3, [r7, #8]
 8007242:	e004      	b.n	800724e <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	695b      	ldr	r3, [r3, #20]
 8007248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800724c:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007254:	2b00      	cmp	r3, #0
 8007256:	d003      	beq.n	8007260 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	60fb      	str	r3, [r7, #12]
 800725e:	e002      	b.n	8007266 <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 800726c:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8007270:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8007272:	68fa      	ldr	r2, [r7, #12]
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	4013      	ands	r3, r2
 8007278:	2b00      	cmp	r3, #0
 800727a:	d005      	beq.n	8007288 <DMA_GetITStatus+0x90>
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d002      	beq.n	8007288 <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8007282:	2301      	movs	r3, #1
 8007284:	75fb      	strb	r3, [r7, #23]
 8007286:	e001      	b.n	800728c <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 8007288:	2300      	movs	r3, #0
 800728a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 800728c:	7dfb      	ldrb	r3, [r7, #23]
}
 800728e:	4618      	mov	r0, r3
 8007290:	371c      	adds	r7, #28
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	4002640f 	.word	0x4002640f
 80072a0:	40026000 	.word	0x40026000
 80072a4:	40026400 	.word	0x40026400

080072a8 <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	4a10      	ldr	r2, [pc, #64]	; (80072f8 <DMA_ClearITPendingBit+0x50>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d802      	bhi.n	80072c0 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80072ba:	4b10      	ldr	r3, [pc, #64]	; (80072fc <DMA_ClearITPendingBit+0x54>)
 80072bc:	60fb      	str	r3, [r7, #12]
 80072be:	e001      	b.n	80072c4 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80072c0:	4b0f      	ldr	r3, [pc, #60]	; (8007300 <DMA_ClearITPendingBit+0x58>)
 80072c2:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d007      	beq.n	80072de <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80072d4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 80072dc:	e006      	b.n	80072ec <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80072e4:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80072e8:	68fa      	ldr	r2, [r7, #12]
 80072ea:	6093      	str	r3, [r2, #8]
}
 80072ec:	bf00      	nop
 80072ee:	3714      	adds	r7, #20
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	4002640f 	.word	0x4002640f
 80072fc:	40026000 	.word	0x40026000
 8007300:	40026400 	.word	0x40026400

08007304 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8007304:	b480      	push	{r7}
 8007306:	b087      	sub	sp, #28
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800730e:	2300      	movs	r3, #0
 8007310:	617b      	str	r3, [r7, #20]
 8007312:	2300      	movs	r3, #0
 8007314:	613b      	str	r3, [r7, #16]
 8007316:	2300      	movs	r3, #0
 8007318:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800731a:	2300      	movs	r3, #0
 800731c:	617b      	str	r3, [r7, #20]
 800731e:	e076      	b.n	800740e <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8007320:	2201      	movs	r2, #1
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	fa02 f303 	lsl.w	r3, r2, r3
 8007328:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	4013      	ands	r3, r2
 8007332:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8007334:	68fa      	ldr	r2, [r7, #12]
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	429a      	cmp	r2, r3
 800733a:	d165      	bne.n	8007408 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	005b      	lsls	r3, r3, #1
 8007344:	2103      	movs	r1, #3
 8007346:	fa01 f303 	lsl.w	r3, r1, r3
 800734a:	43db      	mvns	r3, r3
 800734c:	401a      	ands	r2, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	791b      	ldrb	r3, [r3, #4]
 800735a:	4619      	mov	r1, r3
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	005b      	lsls	r3, r3, #1
 8007360:	fa01 f303 	lsl.w	r3, r1, r3
 8007364:	431a      	orrs	r2, r3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	791b      	ldrb	r3, [r3, #4]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d003      	beq.n	800737a <GPIO_Init+0x76>
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	791b      	ldrb	r3, [r3, #4]
 8007376:	2b02      	cmp	r3, #2
 8007378:	d12e      	bne.n	80073d8 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	689a      	ldr	r2, [r3, #8]
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	005b      	lsls	r3, r3, #1
 8007382:	2103      	movs	r1, #3
 8007384:	fa01 f303 	lsl.w	r3, r1, r3
 8007388:	43db      	mvns	r3, r3
 800738a:	401a      	ands	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	689a      	ldr	r2, [r3, #8]
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	795b      	ldrb	r3, [r3, #5]
 8007398:	4619      	mov	r1, r3
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	005b      	lsls	r3, r3, #1
 800739e:	fa01 f303 	lsl.w	r3, r1, r3
 80073a2:	431a      	orrs	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685a      	ldr	r2, [r3, #4]
 80073ac:	697b      	ldr	r3, [r7, #20]
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	4619      	mov	r1, r3
 80073b2:	2301      	movs	r3, #1
 80073b4:	408b      	lsls	r3, r1
 80073b6:	43db      	mvns	r3, r3
 80073b8:	401a      	ands	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	7992      	ldrb	r2, [r2, #6]
 80073c6:	4611      	mov	r1, r2
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	b292      	uxth	r2, r2
 80073cc:	fa01 f202 	lsl.w	r2, r1, r2
 80073d0:	b292      	uxth	r2, r2
 80073d2:	431a      	orrs	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	68da      	ldr	r2, [r3, #12]
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	b29b      	uxth	r3, r3
 80073e0:	005b      	lsls	r3, r3, #1
 80073e2:	2103      	movs	r1, #3
 80073e4:	fa01 f303 	lsl.w	r3, r1, r3
 80073e8:	43db      	mvns	r3, r3
 80073ea:	401a      	ands	r2, r3
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68da      	ldr	r2, [r3, #12]
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	79db      	ldrb	r3, [r3, #7]
 80073f8:	4619      	mov	r1, r3
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	005b      	lsls	r3, r3, #1
 80073fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007402:	431a      	orrs	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	3301      	adds	r3, #1
 800740c:	617b      	str	r3, [r7, #20]
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	2b0f      	cmp	r3, #15
 8007412:	d985      	bls.n	8007320 <GPIO_Init+0x1c>
    }
  }
}
 8007414:	bf00      	nop
 8007416:	371c      	adds	r7, #28
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	460b      	mov	r3, r1
 800742a:	807b      	strh	r3, [r7, #2]
 800742c:	4613      	mov	r3, r2
 800742e:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8007430:	2300      	movs	r3, #0
 8007432:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8007434:	2300      	movs	r3, #0
 8007436:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8007438:	787a      	ldrb	r2, [r7, #1]
 800743a:	887b      	ldrh	r3, [r7, #2]
 800743c:	f003 0307 	and.w	r3, r3, #7
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	fa02 f303 	lsl.w	r3, r2, r3
 8007446:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8007448:	887b      	ldrh	r3, [r7, #2]
 800744a:	08db      	lsrs	r3, r3, #3
 800744c:	b29b      	uxth	r3, r3
 800744e:	4618      	mov	r0, r3
 8007450:	887b      	ldrh	r3, [r7, #2]
 8007452:	08db      	lsrs	r3, r3, #3
 8007454:	b29b      	uxth	r3, r3
 8007456:	461a      	mov	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	3208      	adds	r2, #8
 800745c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007460:	887b      	ldrh	r3, [r7, #2]
 8007462:	f003 0307 	and.w	r3, r3, #7
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	210f      	movs	r1, #15
 800746a:	fa01 f303 	lsl.w	r3, r1, r3
 800746e:	43db      	mvns	r3, r3
 8007470:	ea02 0103 	and.w	r1, r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f100 0208 	add.w	r2, r0, #8
 800747a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800747e:	887b      	ldrh	r3, [r7, #2]
 8007480:	08db      	lsrs	r3, r3, #3
 8007482:	b29b      	uxth	r3, r3
 8007484:	461a      	mov	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	3208      	adds	r2, #8
 800748a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	4313      	orrs	r3, r2
 8007492:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8007494:	887b      	ldrh	r3, [r7, #2]
 8007496:	08db      	lsrs	r3, r3, #3
 8007498:	b29b      	uxth	r3, r3
 800749a:	461a      	mov	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	3208      	adds	r2, #8
 80074a0:	68b9      	ldr	r1, [r7, #8]
 80074a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80074a6:	bf00      	nop
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
	...

080074b4 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b089      	sub	sp, #36	; 0x24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80074bc:	2300      	movs	r3, #0
 80074be:	61bb      	str	r3, [r7, #24]
 80074c0:	2300      	movs	r3, #0
 80074c2:	617b      	str	r3, [r7, #20]
 80074c4:	2300      	movs	r3, #0
 80074c6:	61fb      	str	r3, [r7, #28]
 80074c8:	2302      	movs	r3, #2
 80074ca:	613b      	str	r3, [r7, #16]
 80074cc:	2300      	movs	r3, #0
 80074ce:	60fb      	str	r3, [r7, #12]
 80074d0:	2302      	movs	r3, #2
 80074d2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80074d4:	4b47      	ldr	r3, [pc, #284]	; (80075f4 <RCC_GetClocksFreq+0x140>)
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	f003 030c 	and.w	r3, r3, #12
 80074dc:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	2b04      	cmp	r3, #4
 80074e2:	d007      	beq.n	80074f4 <RCC_GetClocksFreq+0x40>
 80074e4:	2b08      	cmp	r3, #8
 80074e6:	d009      	beq.n	80074fc <RCC_GetClocksFreq+0x48>
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d13d      	bne.n	8007568 <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a42      	ldr	r2, [pc, #264]	; (80075f8 <RCC_GetClocksFreq+0x144>)
 80074f0:	601a      	str	r2, [r3, #0]
      break;
 80074f2:	e03d      	b.n	8007570 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a41      	ldr	r2, [pc, #260]	; (80075fc <RCC_GetClocksFreq+0x148>)
 80074f8:	601a      	str	r2, [r3, #0]
      break;
 80074fa:	e039      	b.n	8007570 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80074fc:	4b3d      	ldr	r3, [pc, #244]	; (80075f4 <RCC_GetClocksFreq+0x140>)
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	0d9b      	lsrs	r3, r3, #22
 8007502:	f003 0301 	and.w	r3, r3, #1
 8007506:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007508:	4b3a      	ldr	r3, [pc, #232]	; (80075f4 <RCC_GetClocksFreq+0x140>)
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007510:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00c      	beq.n	8007532 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8007518:	4a38      	ldr	r2, [pc, #224]	; (80075fc <RCC_GetClocksFreq+0x148>)
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007520:	4a34      	ldr	r2, [pc, #208]	; (80075f4 <RCC_GetClocksFreq+0x140>)
 8007522:	6852      	ldr	r2, [r2, #4]
 8007524:	0992      	lsrs	r2, r2, #6
 8007526:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800752a:	fb02 f303 	mul.w	r3, r2, r3
 800752e:	61fb      	str	r3, [r7, #28]
 8007530:	e00b      	b.n	800754a <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8007532:	4a31      	ldr	r2, [pc, #196]	; (80075f8 <RCC_GetClocksFreq+0x144>)
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	fbb2 f3f3 	udiv	r3, r2, r3
 800753a:	4a2e      	ldr	r2, [pc, #184]	; (80075f4 <RCC_GetClocksFreq+0x140>)
 800753c:	6852      	ldr	r2, [r2, #4]
 800753e:	0992      	lsrs	r2, r2, #6
 8007540:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007544:	fb02 f303 	mul.w	r3, r2, r3
 8007548:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800754a:	4b2a      	ldr	r3, [pc, #168]	; (80075f4 <RCC_GetClocksFreq+0x140>)
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	0c1b      	lsrs	r3, r3, #16
 8007550:	f003 0303 	and.w	r3, r3, #3
 8007554:	3301      	adds	r3, #1
 8007556:	005b      	lsls	r3, r3, #1
 8007558:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800755a:	69fa      	ldr	r2, [r7, #28]
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	601a      	str	r2, [r3, #0]
      break;
 8007566:	e003      	b.n	8007570 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a23      	ldr	r2, [pc, #140]	; (80075f8 <RCC_GetClocksFreq+0x144>)
 800756c:	601a      	str	r2, [r3, #0]
      break;
 800756e:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8007570:	4b20      	ldr	r3, [pc, #128]	; (80075f4 <RCC_GetClocksFreq+0x140>)
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007578:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	091b      	lsrs	r3, r3, #4
 800757e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8007580:	4a1f      	ldr	r2, [pc, #124]	; (8007600 <RCC_GetClocksFreq+0x14c>)
 8007582:	69bb      	ldr	r3, [r7, #24]
 8007584:	4413      	add	r3, r2
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	b2db      	uxtb	r3, r3
 800758a:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	40da      	lsrs	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8007598:	4b16      	ldr	r3, [pc, #88]	; (80075f4 <RCC_GetClocksFreq+0x140>)
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80075a0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	0a9b      	lsrs	r3, r3, #10
 80075a6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80075a8:	4a15      	ldr	r2, [pc, #84]	; (8007600 <RCC_GetClocksFreq+0x14c>)
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	4413      	add	r3, r2
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	40da      	lsrs	r2, r3
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80075c0:	4b0c      	ldr	r3, [pc, #48]	; (80075f4 <RCC_GetClocksFreq+0x140>)
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80075c8:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	0b5b      	lsrs	r3, r3, #13
 80075ce:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80075d0:	4a0b      	ldr	r2, [pc, #44]	; (8007600 <RCC_GetClocksFreq+0x14c>)
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	4413      	add	r3, r2
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	685a      	ldr	r2, [r3, #4]
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	40da      	lsrs	r2, r3
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	60da      	str	r2, [r3, #12]
}
 80075e8:	bf00      	nop
 80075ea:	3724      	adds	r7, #36	; 0x24
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr
 80075f4:	40023800 	.word	0x40023800
 80075f8:	00f42400 	.word	0x00f42400
 80075fc:	007a1200 	.word	0x007a1200
 8007600:	20000000 	.word	0x20000000

08007604 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	460b      	mov	r3, r1
 800760e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8007610:	78fb      	ldrb	r3, [r7, #3]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d006      	beq.n	8007624 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8007616:	490a      	ldr	r1, [pc, #40]	; (8007640 <RCC_AHB1PeriphClockCmd+0x3c>)
 8007618:	4b09      	ldr	r3, [pc, #36]	; (8007640 <RCC_AHB1PeriphClockCmd+0x3c>)
 800761a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4313      	orrs	r3, r2
 8007620:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8007622:	e006      	b.n	8007632 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8007624:	4906      	ldr	r1, [pc, #24]	; (8007640 <RCC_AHB1PeriphClockCmd+0x3c>)
 8007626:	4b06      	ldr	r3, [pc, #24]	; (8007640 <RCC_AHB1PeriphClockCmd+0x3c>)
 8007628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	43db      	mvns	r3, r3
 800762e:	4013      	ands	r3, r2
 8007630:	630b      	str	r3, [r1, #48]	; 0x30
}
 8007632:	bf00      	nop
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop
 8007640:	40023800 	.word	0x40023800

08007644 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	460b      	mov	r3, r1
 800764e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007650:	78fb      	ldrb	r3, [r7, #3]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d006      	beq.n	8007664 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8007656:	490a      	ldr	r1, [pc, #40]	; (8007680 <RCC_APB1PeriphClockCmd+0x3c>)
 8007658:	4b09      	ldr	r3, [pc, #36]	; (8007680 <RCC_APB1PeriphClockCmd+0x3c>)
 800765a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4313      	orrs	r3, r2
 8007660:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8007662:	e006      	b.n	8007672 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8007664:	4906      	ldr	r1, [pc, #24]	; (8007680 <RCC_APB1PeriphClockCmd+0x3c>)
 8007666:	4b06      	ldr	r3, [pc, #24]	; (8007680 <RCC_APB1PeriphClockCmd+0x3c>)
 8007668:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	43db      	mvns	r3, r3
 800766e:	4013      	ands	r3, r2
 8007670:	640b      	str	r3, [r1, #64]	; 0x40
}
 8007672:	bf00      	nop
 8007674:	370c      	adds	r7, #12
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	40023800 	.word	0x40023800

08007684 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	460b      	mov	r3, r1
 800768e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8007690:	78fb      	ldrb	r3, [r7, #3]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d006      	beq.n	80076a4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8007696:	490a      	ldr	r1, [pc, #40]	; (80076c0 <RCC_APB2PeriphClockCmd+0x3c>)
 8007698:	4b09      	ldr	r3, [pc, #36]	; (80076c0 <RCC_APB2PeriphClockCmd+0x3c>)
 800769a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4313      	orrs	r3, r2
 80076a0:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80076a2:	e006      	b.n	80076b2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80076a4:	4906      	ldr	r1, [pc, #24]	; (80076c0 <RCC_APB2PeriphClockCmd+0x3c>)
 80076a6:	4b06      	ldr	r3, [pc, #24]	; (80076c0 <RCC_APB2PeriphClockCmd+0x3c>)
 80076a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	43db      	mvns	r3, r3
 80076ae:	4013      	ands	r3, r2
 80076b0:	644b      	str	r3, [r1, #68]	; 0x44
}
 80076b2:	bf00      	nop
 80076b4:	370c      	adds	r7, #12
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	40023800 	.word	0x40023800

080076c4 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
 80076cc:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80076ce:	2300      	movs	r3, #0
 80076d0:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	881b      	ldrh	r3, [r3, #0]
 80076d6:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a29      	ldr	r2, [pc, #164]	; (8007780 <TIM_TimeBaseInit+0xbc>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d013      	beq.n	8007708 <TIM_TimeBaseInit+0x44>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a28      	ldr	r2, [pc, #160]	; (8007784 <TIM_TimeBaseInit+0xc0>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d00f      	beq.n	8007708 <TIM_TimeBaseInit+0x44>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ee:	d00b      	beq.n	8007708 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a25      	ldr	r2, [pc, #148]	; (8007788 <TIM_TimeBaseInit+0xc4>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d007      	beq.n	8007708 <TIM_TimeBaseInit+0x44>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a24      	ldr	r2, [pc, #144]	; (800778c <TIM_TimeBaseInit+0xc8>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d003      	beq.n	8007708 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a23      	ldr	r2, [pc, #140]	; (8007790 <TIM_TimeBaseInit+0xcc>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d108      	bne.n	800771a <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 8007708:	89fb      	ldrh	r3, [r7, #14]
 800770a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800770e:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	885a      	ldrh	r2, [r3, #2]
 8007714:	89fb      	ldrh	r3, [r7, #14]
 8007716:	4313      	orrs	r3, r2
 8007718:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a1d      	ldr	r2, [pc, #116]	; (8007794 <TIM_TimeBaseInit+0xd0>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d00c      	beq.n	800773c <TIM_TimeBaseInit+0x78>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a1c      	ldr	r2, [pc, #112]	; (8007798 <TIM_TimeBaseInit+0xd4>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d008      	beq.n	800773c <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 800772a:	89fb      	ldrh	r3, [r7, #14]
 800772c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007730:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	891a      	ldrh	r2, [r3, #8]
 8007736:	89fb      	ldrh	r3, [r7, #14]
 8007738:	4313      	orrs	r3, r2
 800773a:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	89fa      	ldrh	r2, [r7, #14]
 8007740:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	881a      	ldrh	r2, [r3, #0]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a0a      	ldr	r2, [pc, #40]	; (8007780 <TIM_TimeBaseInit+0xbc>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d003      	beq.n	8007762 <TIM_TimeBaseInit+0x9e>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a09      	ldr	r2, [pc, #36]	; (8007784 <TIM_TimeBaseInit+0xc0>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d104      	bne.n	800776c <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	7a9b      	ldrb	r3, [r3, #10]
 8007766:	b29a      	uxth	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	829a      	strh	r2, [r3, #20]
}
 8007772:	bf00      	nop
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop
 8007780:	40010000 	.word	0x40010000
 8007784:	40010400 	.word	0x40010400
 8007788:	40000400 	.word	0x40000400
 800778c:	40000800 	.word	0x40000800
 8007790:	40000c00 	.word	0x40000c00
 8007794:	40001000 	.word	0x40001000
 8007798:	40001400 	.word	0x40001400

0800779c <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
 80077a4:	460b      	mov	r3, r1
 80077a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80077a8:	78fb      	ldrb	r3, [r7, #3]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d008      	beq.n	80077c0 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	881b      	ldrh	r3, [r3, #0]
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 80077be:	e007      	b.n	80077d0 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	881b      	ldrh	r3, [r3, #0]
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	801a      	strh	r2, [r3, #0]
}
 80077d0:	bf00      	nop
 80077d2:	370c      	adds	r7, #12
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	460b      	mov	r3, r1
 80077e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80077e8:	78fb      	ldrb	r3, [r7, #3]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d008      	beq.n	8007800 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	b29b      	uxth	r3, r3
 80077f4:	f043 0301 	orr.w	r3, r3, #1
 80077f8:	b29a      	uxth	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80077fe:	e007      	b.n	8007810 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	881b      	ldrh	r3, [r3, #0]
 8007804:	b29b      	uxth	r3, r3
 8007806:	f023 0301 	bic.w	r3, r3, #1
 800780a:	b29a      	uxth	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	801a      	strh	r2, [r3, #0]
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr

0800781c <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8007826:	2300      	movs	r3, #0
 8007828:	817b      	strh	r3, [r7, #10]
 800782a:	2300      	movs	r3, #0
 800782c:	81fb      	strh	r3, [r7, #14]
 800782e:	2300      	movs	r3, #0
 8007830:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	8c1b      	ldrh	r3, [r3, #32]
 8007836:	b29b      	uxth	r3, r3
 8007838:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800783c:	b29a      	uxth	r2, r3
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	8c1b      	ldrh	r3, [r3, #32]
 8007846:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	889b      	ldrh	r3, [r3, #4]
 800784c:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	8b9b      	ldrh	r3, [r3, #28]
 8007852:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8007854:	897b      	ldrh	r3, [r7, #10]
 8007856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800785a:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 800785c:	897b      	ldrh	r3, [r7, #10]
 800785e:	f023 0303 	bic.w	r3, r3, #3
 8007862:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	881a      	ldrh	r2, [r3, #0]
 8007868:	897b      	ldrh	r3, [r7, #10]
 800786a:	4313      	orrs	r3, r2
 800786c:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 800786e:	89fb      	ldrh	r3, [r7, #14]
 8007870:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007874:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	899b      	ldrh	r3, [r3, #12]
 800787a:	021b      	lsls	r3, r3, #8
 800787c:	b29a      	uxth	r2, r3
 800787e:	89fb      	ldrh	r3, [r7, #14]
 8007880:	4313      	orrs	r3, r2
 8007882:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	885b      	ldrh	r3, [r3, #2]
 8007888:	021b      	lsls	r3, r3, #8
 800788a:	b29a      	uxth	r2, r3
 800788c:	89fb      	ldrh	r3, [r7, #14]
 800788e:	4313      	orrs	r3, r2
 8007890:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a22      	ldr	r2, [pc, #136]	; (8007920 <TIM_OC3Init+0x104>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d003      	beq.n	80078a2 <TIM_OC3Init+0x86>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a21      	ldr	r2, [pc, #132]	; (8007924 <TIM_OC3Init+0x108>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d12b      	bne.n	80078fa <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 80078a2:	89fb      	ldrh	r3, [r7, #14]
 80078a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80078a8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	89db      	ldrh	r3, [r3, #14]
 80078ae:	021b      	lsls	r3, r3, #8
 80078b0:	b29a      	uxth	r2, r3
 80078b2:	89fb      	ldrh	r3, [r7, #14]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 80078b8:	89fb      	ldrh	r3, [r7, #14]
 80078ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078be:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	889b      	ldrh	r3, [r3, #4]
 80078c4:	021b      	lsls	r3, r3, #8
 80078c6:	b29a      	uxth	r2, r3
 80078c8:	89fb      	ldrh	r3, [r7, #14]
 80078ca:	4313      	orrs	r3, r2
 80078cc:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 80078ce:	89bb      	ldrh	r3, [r7, #12]
 80078d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078d4:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80078d6:	89bb      	ldrh	r3, [r7, #12]
 80078d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80078dc:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	8a1b      	ldrh	r3, [r3, #16]
 80078e2:	011b      	lsls	r3, r3, #4
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	89bb      	ldrh	r3, [r7, #12]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	8a5b      	ldrh	r3, [r3, #18]
 80078f0:	011b      	lsls	r3, r3, #4
 80078f2:	b29a      	uxth	r2, r3
 80078f4:	89bb      	ldrh	r3, [r7, #12]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	89ba      	ldrh	r2, [r7, #12]
 80078fe:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	897a      	ldrh	r2, [r7, #10]
 8007904:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	689a      	ldr	r2, [r3, #8]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	89fa      	ldrh	r2, [r7, #14]
 8007912:	841a      	strh	r2, [r3, #32]
}
 8007914:	bf00      	nop
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr
 8007920:	40010000 	.word	0x40010000
 8007924:	40010400 	.word	0x40010400

08007928 <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8007928:	b480      	push	{r7}
 800792a:	b085      	sub	sp, #20
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
 8007930:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8007932:	2300      	movs	r3, #0
 8007934:	81bb      	strh	r3, [r7, #12]
 8007936:	2300      	movs	r3, #0
 8007938:	817b      	strh	r3, [r7, #10]
 800793a:	2300      	movs	r3, #0
 800793c:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	8c1b      	ldrh	r3, [r3, #32]
 8007942:	b29b      	uxth	r3, r3
 8007944:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007948:	b29a      	uxth	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	8c1b      	ldrh	r3, [r3, #32]
 8007952:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	889b      	ldrh	r3, [r3, #4]
 8007958:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	8b9b      	ldrh	r3, [r3, #28]
 800795e:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8007960:	89bb      	ldrh	r3, [r7, #12]
 8007962:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007966:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 8007968:	89bb      	ldrh	r3, [r7, #12]
 800796a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800796e:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	881b      	ldrh	r3, [r3, #0]
 8007974:	021b      	lsls	r3, r3, #8
 8007976:	b29a      	uxth	r2, r3
 8007978:	89bb      	ldrh	r3, [r7, #12]
 800797a:	4313      	orrs	r3, r2
 800797c:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 800797e:	897b      	ldrh	r3, [r7, #10]
 8007980:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007984:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	899b      	ldrh	r3, [r3, #12]
 800798a:	031b      	lsls	r3, r3, #12
 800798c:	b29a      	uxth	r2, r3
 800798e:	897b      	ldrh	r3, [r7, #10]
 8007990:	4313      	orrs	r3, r2
 8007992:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	885b      	ldrh	r3, [r3, #2]
 8007998:	031b      	lsls	r3, r3, #12
 800799a:	b29a      	uxth	r2, r3
 800799c:	897b      	ldrh	r3, [r7, #10]
 800799e:	4313      	orrs	r3, r2
 80079a0:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a12      	ldr	r2, [pc, #72]	; (80079f0 <TIM_OC4Init+0xc8>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d003      	beq.n	80079b2 <TIM_OC4Init+0x8a>
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	4a11      	ldr	r2, [pc, #68]	; (80079f4 <TIM_OC4Init+0xcc>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d10a      	bne.n	80079c8 <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 80079b2:	89fb      	ldrh	r3, [r7, #14]
 80079b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079b8:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	8a1b      	ldrh	r3, [r3, #16]
 80079be:	019b      	lsls	r3, r3, #6
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	89fb      	ldrh	r3, [r7, #14]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	89fa      	ldrh	r2, [r7, #14]
 80079cc:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	89ba      	ldrh	r2, [r7, #12]
 80079d2:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	689a      	ldr	r2, [r3, #8]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	897a      	ldrh	r2, [r7, #10]
 80079e0:	841a      	strh	r2, [r3, #32]
}
 80079e2:	bf00      	nop
 80079e4:	3714      	adds	r7, #20
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	40010000 	.word	0x40010000
 80079f4:	40010400 	.word	0x40010400

080079f8 <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	460b      	mov	r3, r1
 8007a02:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8007a04:	2300      	movs	r3, #0
 8007a06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	8b9b      	ldrh	r3, [r3, #28]
 8007a0c:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 8007a0e:	89fb      	ldrh	r3, [r7, #14]
 8007a10:	f023 0308 	bic.w	r3, r3, #8
 8007a14:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8007a16:	89fa      	ldrh	r2, [r7, #14]
 8007a18:	887b      	ldrh	r3, [r7, #2]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	89fa      	ldrh	r2, [r7, #14]
 8007a22:	839a      	strh	r2, [r3, #28]
}
 8007a24:	bf00      	nop
 8007a26:	3714      	adds	r7, #20
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b085      	sub	sp, #20
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	8b9b      	ldrh	r3, [r3, #28]
 8007a44:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 8007a46:	89fb      	ldrh	r3, [r7, #14]
 8007a48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a4c:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8007a4e:	887b      	ldrh	r3, [r7, #2]
 8007a50:	021b      	lsls	r3, r3, #8
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	89fb      	ldrh	r3, [r7, #14]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	89fa      	ldrh	r2, [r7, #14]
 8007a5e:	839a      	strh	r2, [r3, #28]
}
 8007a60:	bf00      	nop
 8007a62:	3714      	adds	r7, #20
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr

08007a6c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
 8007a74:	460b      	mov	r3, r1
 8007a76:	807b      	strh	r3, [r7, #2]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8007a7c:	787b      	ldrb	r3, [r7, #1]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d008      	beq.n	8007a94 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	899b      	ldrh	r3, [r3, #12]
 8007a86:	b29a      	uxth	r2, r3
 8007a88:	887b      	ldrh	r3, [r7, #2]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	b29a      	uxth	r2, r3
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8007a92:	e009      	b.n	8007aa8 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	899b      	ldrh	r3, [r3, #12]
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	887b      	ldrh	r3, [r7, #2]
 8007a9c:	43db      	mvns	r3, r3
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	819a      	strh	r2, [r3, #12]
}
 8007aa8:	bf00      	nop
 8007aaa:	370c      	adds	r7, #12
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b083      	sub	sp, #12
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	460b      	mov	r3, r1
 8007abe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8007ac0:	887b      	ldrh	r3, [r7, #2]
 8007ac2:	43db      	mvns	r3, r3
 8007ac4:	b29a      	uxth	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	821a      	strh	r2, [r3, #16]
}
 8007aca:	bf00      	nop
 8007acc:	370c      	adds	r7, #12
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr

08007ad6 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 8007ad6:	b480      	push	{r7}
 8007ad8:	b083      	sub	sp, #12
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	460b      	mov	r3, r1
 8007ae0:	807b      	strh	r3, [r7, #2]
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8007ae6:	787b      	ldrb	r3, [r7, #1]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d008      	beq.n	8007afe <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	899b      	ldrh	r3, [r3, #12]
 8007af0:	b29a      	uxth	r2, r3
 8007af2:	887b      	ldrh	r3, [r7, #2]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	b29a      	uxth	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
 8007afc:	e009      	b.n	8007b12 <TIM_DMACmd+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	899b      	ldrh	r3, [r3, #12]
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	887b      	ldrh	r3, [r7, #2]
 8007b06:	43db      	mvns	r3, r3
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	b29a      	uxth	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	819a      	strh	r2, [r3, #12]
}
 8007b12:	bf00      	nop
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
	...

08007b20 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b08a      	sub	sp, #40	; 0x28
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8007b2e:	2300      	movs	r3, #0
 8007b30:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8007b32:	2300      	movs	r3, #0
 8007b34:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8007b36:	2300      	movs	r3, #0
 8007b38:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	8a1b      	ldrh	r3, [r3, #16]
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8007b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007b48:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	88db      	ldrh	r3, [r3, #6]
 8007b4e:	461a      	mov	r2, r3
 8007b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b52:	4313      	orrs	r3, r2
 8007b54:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8007b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	899b      	ldrh	r3, [r3, #12]
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8007b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b68:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8007b6c:	f023 030c 	bic.w	r3, r3, #12
 8007b70:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	889a      	ldrh	r2, [r3, #4]
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	891b      	ldrh	r3, [r3, #8]
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8007b82:	4313      	orrs	r3, r2
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	461a      	mov	r2, r3
 8007b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8007b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b90:	b29a      	uxth	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	8a9b      	ldrh	r3, [r3, #20]
 8007b9a:	b29b      	uxth	r3, r3
 8007b9c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ba4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	899b      	ldrh	r3, [r3, #12]
 8007baa:	461a      	mov	r2, r3
 8007bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8007bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8007bba:	f107 0308 	add.w	r3, r7, #8
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f7ff fc78 	bl	80074b4 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a30      	ldr	r2, [pc, #192]	; (8007c88 <USART_Init+0x168>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d003      	beq.n	8007bd4 <USART_Init+0xb4>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a2f      	ldr	r2, [pc, #188]	; (8007c8c <USART_Init+0x16c>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d102      	bne.n	8007bda <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	623b      	str	r3, [r7, #32]
 8007bd8:	e001      	b.n	8007bde <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	899b      	ldrh	r3, [r3, #12]
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	b21b      	sxth	r3, r3
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	da0c      	bge.n	8007c04 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8007bea:	6a3a      	ldr	r2, [r7, #32]
 8007bec:	4613      	mov	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	009a      	lsls	r2, r3, #2
 8007bf4:	441a      	add	r2, r3
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	005b      	lsls	r3, r3, #1
 8007bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c00:	61fb      	str	r3, [r7, #28]
 8007c02:	e00b      	b.n	8007c1c <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8007c04:	6a3a      	ldr	r2, [r7, #32]
 8007c06:	4613      	mov	r3, r2
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4413      	add	r3, r2
 8007c0c:	009a      	lsls	r2, r3, #2
 8007c0e:	441a      	add	r2, r3
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c1a:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	4a1c      	ldr	r2, [pc, #112]	; (8007c90 <USART_Init+0x170>)
 8007c20:	fba2 2303 	umull	r2, r3, r2, r3
 8007c24:	095b      	lsrs	r3, r3, #5
 8007c26:	011b      	lsls	r3, r3, #4
 8007c28:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8007c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2c:	091b      	lsrs	r3, r3, #4
 8007c2e:	2264      	movs	r2, #100	; 0x64
 8007c30:	fb02 f303 	mul.w	r3, r2, r3
 8007c34:	69fa      	ldr	r2, [r7, #28]
 8007c36:	1ad3      	subs	r3, r2, r3
 8007c38:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	899b      	ldrh	r3, [r3, #12]
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	b21b      	sxth	r3, r3
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	da0c      	bge.n	8007c60 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	00db      	lsls	r3, r3, #3
 8007c4a:	3332      	adds	r3, #50	; 0x32
 8007c4c:	4a10      	ldr	r2, [pc, #64]	; (8007c90 <USART_Init+0x170>)
 8007c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007c52:	095b      	lsrs	r3, r3, #5
 8007c54:	f003 0307 	and.w	r3, r3, #7
 8007c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8007c5e:	e00b      	b.n	8007c78 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	011b      	lsls	r3, r3, #4
 8007c64:	3332      	adds	r3, #50	; 0x32
 8007c66:	4a0a      	ldr	r2, [pc, #40]	; (8007c90 <USART_Init+0x170>)
 8007c68:	fba2 2303 	umull	r2, r3, r2, r3
 8007c6c:	095b      	lsrs	r3, r3, #5
 8007c6e:	f003 030f 	and.w	r3, r3, #15
 8007c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c74:	4313      	orrs	r3, r2
 8007c76:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8007c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	811a      	strh	r2, [r3, #8]
}
 8007c80:	bf00      	nop
 8007c82:	3728      	adds	r7, #40	; 0x28
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	40011000 	.word	0x40011000
 8007c8c:	40011400 	.word	0x40011400
 8007c90:	51eb851f 	.word	0x51eb851f

08007c94 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b083      	sub	sp, #12
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8007ca0:	78fb      	ldrb	r3, [r7, #3]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d008      	beq.n	8007cb8 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	899b      	ldrh	r3, [r3, #12]
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8007cb6:	e007      	b.n	8007cc8 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	899b      	ldrh	r3, [r3, #12]
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cc2:	b29a      	uxth	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	819a      	strh	r2, [r3, #12]
}
 8007cc8:	bf00      	nop
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8007ce0:	887b      	ldrh	r3, [r7, #2]
 8007ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	809a      	strh	r2, [r3, #4]
}
 8007cec:	bf00      	nop
 8007cee:	370c      	adds	r7, #12
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	460b      	mov	r3, r1
 8007d02:	807b      	strh	r3, [r7, #2]
 8007d04:	4613      	mov	r3, r2
 8007d06:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	613b      	str	r3, [r7, #16]
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	60fb      	str	r3, [r7, #12]
 8007d10:	2300      	movs	r3, #0
 8007d12:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8007d14:	2300      	movs	r3, #0
 8007d16:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8007d1c:	887b      	ldrh	r3, [r7, #2]
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	095b      	lsrs	r3, r3, #5
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8007d26:	887b      	ldrh	r3, [r7, #2]
 8007d28:	f003 031f 	and.w	r3, r3, #31
 8007d2c:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8007d2e:	2201      	movs	r2, #1
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	fa02 f303 	lsl.w	r3, r2, r3
 8007d36:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d103      	bne.n	8007d46 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	330c      	adds	r3, #12
 8007d42:	617b      	str	r3, [r7, #20]
 8007d44:	e009      	b.n	8007d5a <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	d103      	bne.n	8007d54 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	3310      	adds	r3, #16
 8007d50:	617b      	str	r3, [r7, #20]
 8007d52:	e002      	b.n	8007d5a <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	3314      	adds	r3, #20
 8007d58:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8007d5a:	787b      	ldrb	r3, [r7, #1]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d006      	beq.n	8007d6e <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	697a      	ldr	r2, [r7, #20]
 8007d64:	6811      	ldr	r1, [r2, #0]
 8007d66:	68ba      	ldr	r2, [r7, #8]
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8007d6c:	e006      	b.n	8007d7c <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	697a      	ldr	r2, [r7, #20]
 8007d72:	6811      	ldr	r1, [r2, #0]
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	43d2      	mvns	r2, r2
 8007d78:	400a      	ands	r2, r1
 8007d7a:	601a      	str	r2, [r3, #0]
}
 8007d7c:	bf00      	nop
 8007d7e:	371c      	adds	r7, #28
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	460b      	mov	r3, r1
 8007d92:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8007d94:	2300      	movs	r3, #0
 8007d96:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	881b      	ldrh	r3, [r3, #0]
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	887b      	ldrh	r3, [r7, #2]
 8007da0:	4013      	ands	r3, r2
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d002      	beq.n	8007dae <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8007da8:	2301      	movs	r3, #1
 8007daa:	73fb      	strb	r3, [r7, #15]
 8007dac:	e001      	b.n	8007db2 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8007dae:	2300      	movs	r3, #0
 8007db0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3714      	adds	r7, #20
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b087      	sub	sp, #28
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	460b      	mov	r3, r1
 8007dca:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	60fb      	str	r3, [r7, #12]
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	617b      	str	r3, [r7, #20]
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8007ddc:	887b      	ldrh	r3, [r7, #2]
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	095b      	lsrs	r3, r3, #5
 8007de2:	b2db      	uxtb	r3, r3
 8007de4:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8007de6:	887b      	ldrh	r3, [r7, #2]
 8007de8:	f003 031f 	and.w	r3, r3, #31
 8007dec:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8007dee:	2201      	movs	r2, #1
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	fa02 f303 	lsl.w	r3, r2, r3
 8007df6:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d107      	bne.n	8007e0e <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	899b      	ldrh	r3, [r3, #12]
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	461a      	mov	r2, r3
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	4013      	ands	r3, r2
 8007e0a:	617b      	str	r3, [r7, #20]
 8007e0c:	e011      	b.n	8007e32 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	d107      	bne.n	8007e24 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	8a1b      	ldrh	r3, [r3, #16]
 8007e18:	b29b      	uxth	r3, r3
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	697b      	ldr	r3, [r7, #20]
 8007e1e:	4013      	ands	r3, r2
 8007e20:	617b      	str	r3, [r7, #20]
 8007e22:	e006      	b.n	8007e32 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	8a9b      	ldrh	r3, [r3, #20]
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	461a      	mov	r2, r3
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	4013      	ands	r3, r2
 8007e30:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8007e32:	887b      	ldrh	r3, [r7, #2]
 8007e34:	0a1b      	lsrs	r3, r3, #8
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e42:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	881b      	ldrh	r3, [r3, #0]
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	4013      	ands	r3, r2
 8007e50:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d005      	beq.n	8007e64 <USART_GetITStatus+0xa4>
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d002      	beq.n	8007e64 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	74fb      	strb	r3, [r7, #19]
 8007e62:	e001      	b.n	8007e68 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8007e64:	2300      	movs	r3, #0
 8007e66:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8007e68:	7cfb      	ldrb	r3, [r7, #19]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	371c      	adds	r7, #28
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr

08007e76 <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8007e76:	b480      	push	{r7}
 8007e78:	b085      	sub	sp, #20
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	460b      	mov	r3, r1
 8007e80:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8007e82:	2300      	movs	r3, #0
 8007e84:	81fb      	strh	r3, [r7, #14]
 8007e86:	2300      	movs	r3, #0
 8007e88:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8007e8a:	887b      	ldrh	r3, [r7, #2]
 8007e8c:	0a1b      	lsrs	r3, r3, #8
 8007e8e:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8007e90:	89fb      	ldrh	r3, [r7, #14]
 8007e92:	2201      	movs	r2, #1
 8007e94:	fa02 f303 	lsl.w	r3, r2, r3
 8007e98:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8007e9a:	89bb      	ldrh	r3, [r7, #12]
 8007e9c:	43db      	mvns	r3, r3
 8007e9e:	b29a      	uxth	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	801a      	strh	r2, [r3, #0]
}
 8007ea4:	bf00      	nop
 8007ea6:	3714      	adds	r7, #20
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <DELAY_init>:
uint32_t D_mS; // Global variable (ms)
uint32_t D_S; // Global variable (s)


void DELAY_init(void)
{
 8007eb0:	b590      	push	{r4, r7, lr}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
	RCC_ClocksTypeDef Clocks;
	RCC_GetClocksFreq(&Clocks);
 8007eb6:	463b      	mov	r3, r7
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7ff fafb 	bl	80074b4 <RCC_GetClocksFreq>
	G_CLK = Clocks.SYSCLK_Frequency;	// Read the systemclock
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	4a3f      	ldr	r2, [pc, #252]	; (8007fc0 <DELAY_init+0x110>)
 8007ec2:	6013      	str	r3, [r2, #0]
	D_S  = (G_CLK*1.25)/9/2;	// Number of instructions in one second
 8007ec4:	4b3e      	ldr	r3, [pc, #248]	; (8007fc0 <DELAY_init+0x110>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7f8 fad1 	bl	8000470 <__aeabi_ui2d>
 8007ece:	f04f 0200 	mov.w	r2, #0
 8007ed2:	4b3c      	ldr	r3, [pc, #240]	; (8007fc4 <DELAY_init+0x114>)
 8007ed4:	f7f8 fb42 	bl	800055c <__aeabi_dmul>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	460c      	mov	r4, r1
 8007edc:	4618      	mov	r0, r3
 8007ede:	4621      	mov	r1, r4
 8007ee0:	f04f 0200 	mov.w	r2, #0
 8007ee4:	4b38      	ldr	r3, [pc, #224]	; (8007fc8 <DELAY_init+0x118>)
 8007ee6:	f7f8 fc63 	bl	80007b0 <__aeabi_ddiv>
 8007eea:	4603      	mov	r3, r0
 8007eec:	460c      	mov	r4, r1
 8007eee:	4618      	mov	r0, r3
 8007ef0:	4621      	mov	r1, r4
 8007ef2:	f04f 0200 	mov.w	r2, #0
 8007ef6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007efa:	f7f8 fc59 	bl	80007b0 <__aeabi_ddiv>
 8007efe:	4603      	mov	r3, r0
 8007f00:	460c      	mov	r4, r1
 8007f02:	4618      	mov	r0, r3
 8007f04:	4621      	mov	r1, r4
 8007f06:	f7f8 fd3b 	bl	8000980 <__aeabi_d2uiz>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	4b2f      	ldr	r3, [pc, #188]	; (8007fcc <DELAY_init+0x11c>)
 8007f0e:	601a      	str	r2, [r3, #0]
	D_mS = (G_CLK*1.25)/9000/2; // Number of instructions in one millisecond
 8007f10:	4b2b      	ldr	r3, [pc, #172]	; (8007fc0 <DELAY_init+0x110>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7f8 faab 	bl	8000470 <__aeabi_ui2d>
 8007f1a:	f04f 0200 	mov.w	r2, #0
 8007f1e:	4b29      	ldr	r3, [pc, #164]	; (8007fc4 <DELAY_init+0x114>)
 8007f20:	f7f8 fb1c 	bl	800055c <__aeabi_dmul>
 8007f24:	4603      	mov	r3, r0
 8007f26:	460c      	mov	r4, r1
 8007f28:	4618      	mov	r0, r3
 8007f2a:	4621      	mov	r1, r4
 8007f2c:	a320      	add	r3, pc, #128	; (adr r3, 8007fb0 <DELAY_init+0x100>)
 8007f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f32:	f7f8 fc3d 	bl	80007b0 <__aeabi_ddiv>
 8007f36:	4603      	mov	r3, r0
 8007f38:	460c      	mov	r4, r1
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	4621      	mov	r1, r4
 8007f3e:	f04f 0200 	mov.w	r2, #0
 8007f42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f46:	f7f8 fc33 	bl	80007b0 <__aeabi_ddiv>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	460c      	mov	r4, r1
 8007f4e:	4618      	mov	r0, r3
 8007f50:	4621      	mov	r1, r4
 8007f52:	f7f8 fd15 	bl	8000980 <__aeabi_d2uiz>
 8007f56:	4602      	mov	r2, r0
 8007f58:	4b1d      	ldr	r3, [pc, #116]	; (8007fd0 <DELAY_init+0x120>)
 8007f5a:	601a      	str	r2, [r3, #0]
	D_uS = (G_CLK*1.25)/9000000/2; // Number of instructions in one microsecond, largest rounding error
 8007f5c:	4b18      	ldr	r3, [pc, #96]	; (8007fc0 <DELAY_init+0x110>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4618      	mov	r0, r3
 8007f62:	f7f8 fa85 	bl	8000470 <__aeabi_ui2d>
 8007f66:	f04f 0200 	mov.w	r2, #0
 8007f6a:	4b16      	ldr	r3, [pc, #88]	; (8007fc4 <DELAY_init+0x114>)
 8007f6c:	f7f8 faf6 	bl	800055c <__aeabi_dmul>
 8007f70:	4603      	mov	r3, r0
 8007f72:	460c      	mov	r4, r1
 8007f74:	4618      	mov	r0, r3
 8007f76:	4621      	mov	r1, r4
 8007f78:	a30f      	add	r3, pc, #60	; (adr r3, 8007fb8 <DELAY_init+0x108>)
 8007f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f7e:	f7f8 fc17 	bl	80007b0 <__aeabi_ddiv>
 8007f82:	4603      	mov	r3, r0
 8007f84:	460c      	mov	r4, r1
 8007f86:	4618      	mov	r0, r3
 8007f88:	4621      	mov	r1, r4
 8007f8a:	f04f 0200 	mov.w	r2, #0
 8007f8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f92:	f7f8 fc0d 	bl	80007b0 <__aeabi_ddiv>
 8007f96:	4603      	mov	r3, r0
 8007f98:	460c      	mov	r4, r1
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	f7f8 fcef 	bl	8000980 <__aeabi_d2uiz>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	4b0b      	ldr	r3, [pc, #44]	; (8007fd4 <DELAY_init+0x124>)
 8007fa6:	601a      	str	r2, [r3, #0]
}
 8007fa8:	bf00      	nop
 8007faa:	3714      	adds	r7, #20
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd90      	pop	{r4, r7, pc}
 8007fb0:	00000000 	.word	0x00000000
 8007fb4:	40c19400 	.word	0x40c19400
 8007fb8:	00000000 	.word	0x00000000
 8007fbc:	41612a88 	.word	0x41612a88
 8007fc0:	20013878 	.word	0x20013878
 8007fc4:	3ff40000 	.word	0x3ff40000
 8007fc8:	40220000 	.word	0x40220000
 8007fcc:	2001387c 	.word	0x2001387c
 8007fd0:	20013898 	.word	0x20013898
 8007fd4:	20013894 	.word	0x20013894

08007fd8 <DELAY_ms>:
        time--;
    }
}

void DELAY_ms(volatile unsigned int time)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
    volatile unsigned int i;

    while(time>0)		// Run x times 1 millisecond
 8007fe0:	e00d      	b.n	8007ffe <DELAY_ms+0x26>
    {
        for(i=0;i<D_mS;i++);
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	60fb      	str	r3, [r7, #12]
 8007fe6:	e002      	b.n	8007fee <DELAY_ms+0x16>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	3301      	adds	r3, #1
 8007fec:	60fb      	str	r3, [r7, #12]
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	4b07      	ldr	r3, [pc, #28]	; (8008010 <DELAY_ms+0x38>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d3f7      	bcc.n	8007fe8 <DELAY_ms+0x10>
        time--;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	607b      	str	r3, [r7, #4]
    while(time>0)		// Run x times 1 millisecond
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1ee      	bne.n	8007fe2 <DELAY_ms+0xa>
    }
}
 8008004:	bf00      	nop
 8008006:	3714      	adds	r7, #20
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr
 8008010:	20013898 	.word	0x20013898

08008014 <UB_VGA_Screen_Init>:

//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
  uint16_t xp,yp;

  VGA.hsync_cnt=0;
 800801a:	4b1b      	ldr	r3, [pc, #108]	; (8008088 <UB_VGA_Screen_Init+0x74>)
 800801c:	2200      	movs	r2, #0
 800801e:	801a      	strh	r2, [r3, #0]
  VGA.start_adr=0;
 8008020:	4b19      	ldr	r3, [pc, #100]	; (8008088 <UB_VGA_Screen_Init+0x74>)
 8008022:	2200      	movs	r2, #0
 8008024:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg=0;
 8008026:	4b18      	ldr	r3, [pc, #96]	; (8008088 <UB_VGA_Screen_Init+0x74>)
 8008028:	2200      	movs	r2, #0
 800802a:	609a      	str	r2, [r3, #8]

  // RAM init total black
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 800802c:	2300      	movs	r3, #0
 800802e:	80bb      	strh	r3, [r7, #4]
 8008030:	e017      	b.n	8008062 <UB_VGA_Screen_Init+0x4e>
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 8008032:	2300      	movs	r3, #0
 8008034:	80fb      	strh	r3, [r7, #6]
 8008036:	e00d      	b.n	8008054 <UB_VGA_Screen_Init+0x40>
      VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=0;
 8008038:	88ba      	ldrh	r2, [r7, #4]
 800803a:	4613      	mov	r3, r2
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4413      	add	r3, r2
 8008040:	019b      	lsls	r3, r3, #6
 8008042:	441a      	add	r2, r3
 8008044:	88fb      	ldrh	r3, [r7, #6]
 8008046:	4413      	add	r3, r2
 8008048:	4a10      	ldr	r2, [pc, #64]	; (800808c <UB_VGA_Screen_Init+0x78>)
 800804a:	2100      	movs	r1, #0
 800804c:	54d1      	strb	r1, [r2, r3]
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 800804e:	88fb      	ldrh	r3, [r7, #6]
 8008050:	3301      	adds	r3, #1
 8008052:	80fb      	strh	r3, [r7, #6]
 8008054:	88fb      	ldrh	r3, [r7, #6]
 8008056:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800805a:	d9ed      	bls.n	8008038 <UB_VGA_Screen_Init+0x24>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 800805c:	88bb      	ldrh	r3, [r7, #4]
 800805e:	3301      	adds	r3, #1
 8008060:	80bb      	strh	r3, [r7, #4]
 8008062:	88bb      	ldrh	r3, [r7, #4]
 8008064:	2bef      	cmp	r3, #239	; 0xef
 8008066:	d9e4      	bls.n	8008032 <UB_VGA_Screen_Init+0x1e>
    }
  }

  // init IO-Pins
  P_VGA_InitIO();
 8008068:	f000 f85e 	bl	8008128 <P_VGA_InitIO>
  // init Timer
  P_VGA_InitTIM();
 800806c:	f000 f8b0 	bl	80081d0 <P_VGA_InitTIM>
  // init DMA
  P_VGA_InitDMA();
 8008070:	f000 f940 	bl	80082f4 <P_VGA_InitDMA>
  // init Interrupts
  P_VGA_InitINT();
 8008074:	f000 f912 	bl	800829c <P_VGA_InitINT>

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg=DMA2_Stream5->CR;
 8008078:	4b05      	ldr	r3, [pc, #20]	; (8008090 <UB_VGA_Screen_Init+0x7c>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a02      	ldr	r2, [pc, #8]	; (8008088 <UB_VGA_Screen_Init+0x74>)
 800807e:	6093      	str	r3, [r2, #8]
}
 8008080:	bf00      	nop
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	200006d8 	.word	0x200006d8
 800808c:	20000778 	.word	0x20000778
 8008090:	40026488 	.word	0x40026488

08008094 <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	4603      	mov	r3, r0
 800809c:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 800809e:	2300      	movs	r3, #0
 80080a0:	81bb      	strh	r3, [r7, #12]
 80080a2:	e012      	b.n	80080ca <UB_VGA_FillScreen+0x36>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 80080a4:	2300      	movs	r3, #0
 80080a6:	81fb      	strh	r3, [r7, #14]
 80080a8:	e008      	b.n	80080bc <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp,yp,color);
 80080aa:	79fa      	ldrb	r2, [r7, #7]
 80080ac:	89b9      	ldrh	r1, [r7, #12]
 80080ae:	89fb      	ldrh	r3, [r7, #14]
 80080b0:	4618      	mov	r0, r3
 80080b2:	f000 f811 	bl	80080d8 <UB_VGA_SetPixel>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 80080b6:	89fb      	ldrh	r3, [r7, #14]
 80080b8:	3301      	adds	r3, #1
 80080ba:	81fb      	strh	r3, [r7, #14]
 80080bc:	89fb      	ldrh	r3, [r7, #14]
 80080be:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80080c2:	d3f2      	bcc.n	80080aa <UB_VGA_FillScreen+0x16>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 80080c4:	89bb      	ldrh	r3, [r7, #12]
 80080c6:	3301      	adds	r3, #1
 80080c8:	81bb      	strh	r3, [r7, #12]
 80080ca:	89bb      	ldrh	r3, [r7, #12]
 80080cc:	2bef      	cmp	r3, #239	; 0xef
 80080ce:	d9e9      	bls.n	80080a4 <UB_VGA_FillScreen+0x10>
    }
  }
}
 80080d0:	bf00      	nop
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	4603      	mov	r3, r0
 80080e0:	80fb      	strh	r3, [r7, #6]
 80080e2:	460b      	mov	r3, r1
 80080e4:	80bb      	strh	r3, [r7, #4]
 80080e6:	4613      	mov	r3, r2
 80080e8:	70fb      	strb	r3, [r7, #3]
  if(xp>=VGA_DISPLAY_X) xp=0;
 80080ea:	88fb      	ldrh	r3, [r7, #6]
 80080ec:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80080f0:	d301      	bcc.n	80080f6 <UB_VGA_SetPixel+0x1e>
 80080f2:	2300      	movs	r3, #0
 80080f4:	80fb      	strh	r3, [r7, #6]
  if(yp>=VGA_DISPLAY_Y) yp=0;
 80080f6:	88bb      	ldrh	r3, [r7, #4]
 80080f8:	2bef      	cmp	r3, #239	; 0xef
 80080fa:	d901      	bls.n	8008100 <UB_VGA_SetPixel+0x28>
 80080fc:	2300      	movs	r3, #0
 80080fe:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=color;
 8008100:	88ba      	ldrh	r2, [r7, #4]
 8008102:	4613      	mov	r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4413      	add	r3, r2
 8008108:	019b      	lsls	r3, r3, #6
 800810a:	441a      	add	r2, r3
 800810c:	88fb      	ldrh	r3, [r7, #6]
 800810e:	4413      	add	r3, r2
 8008110:	4904      	ldr	r1, [pc, #16]	; (8008124 <UB_VGA_SetPixel+0x4c>)
 8008112:	78fa      	ldrb	r2, [r7, #3]
 8008114:	54ca      	strb	r2, [r1, r3]
}
 8008116:	bf00      	nop
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	20000778 	.word	0x20000778

08008128 <P_VGA_InitIO>:
//--------------------------------------------------------------
// interne Funktionen
// init aller IO-Pins
//--------------------------------------------------------------
void P_VGA_InitIO(void)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
  // init RGB-Pins (PE8 - PE15)
  // as normal GPIOs
  //---------------------------------------------
 
  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 800812e:	2101      	movs	r1, #1
 8008130:	2010      	movs	r0, #16
 8008132:	f7ff fa67 	bl	8007604 <RCC_AHB1PeriphClockCmd>

  // Config as Digital output
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 |
 8008136:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800813a:	603b      	str	r3, [r7, #0]
        GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800813c:	2301      	movs	r3, #1
 800813e:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8008140:	2300      	movs	r3, #0
 8008142:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8008144:	2301      	movs	r3, #1
 8008146:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8008148:	2303      	movs	r3, #3
 800814a:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOE, &GPIO_InitStructure);
 800814c:	463b      	mov	r3, r7
 800814e:	4619      	mov	r1, r3
 8008150:	481d      	ldr	r0, [pc, #116]	; (80081c8 <P_VGA_InitIO+0xa0>)
 8008152:	f7ff f8d7 	bl	8007304 <GPIO_Init>

  GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 8008156:	4b1c      	ldr	r3, [pc, #112]	; (80081c8 <P_VGA_InitIO+0xa0>)
 8008158:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 800815c:	835a      	strh	r2, [r3, #26]
  // init of the H-Sync Pin (PB11)
  // using Timer2 and CH4
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 800815e:	2101      	movs	r1, #1
 8008160:	2002      	movs	r0, #2
 8008162:	f7ff fa4f 	bl	8007604 <RCC_AHB1PeriphClockCmd>

  // Config Pins as Digital-out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 8008166:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800816a:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 800816c:	2302      	movs	r3, #2
 800816e:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8008170:	2303      	movs	r3, #3
 8008172:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8008174:	2300      	movs	r3, #0
 8008176:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8008178:	2301      	movs	r3, #1
 800817a:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 800817c:	463b      	mov	r3, r7
 800817e:	4619      	mov	r1, r3
 8008180:	4812      	ldr	r0, [pc, #72]	; (80081cc <P_VGA_InitIO+0xa4>)
 8008182:	f7ff f8bf 	bl	8007304 <GPIO_Init>

  // alternative function connect with IO
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_TIM2);
 8008186:	2201      	movs	r2, #1
 8008188:	210b      	movs	r1, #11
 800818a:	4810      	ldr	r0, [pc, #64]	; (80081cc <P_VGA_InitIO+0xa4>)
 800818c:	f7ff f948 	bl	8007420 <GPIO_PinAFConfig>
  // init of V-Sync Pin (PB12)
  // using GPIO
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8008190:	2101      	movs	r1, #1
 8008192:	2002      	movs	r0, #2
 8008194:	f7ff fa36 	bl	8007604 <RCC_AHB1PeriphClockCmd>

  // Config of the Pins as Digital out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8008198:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800819c:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800819e:	2301      	movs	r3, #1
 80081a0:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80081a2:	2300      	movs	r3, #0
 80081a4:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80081a6:	2301      	movs	r3, #1
 80081a8:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 80081aa:	2303      	movs	r3, #3
 80081ac:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 80081ae:	463b      	mov	r3, r7
 80081b0:	4619      	mov	r1, r3
 80081b2:	4806      	ldr	r0, [pc, #24]	; (80081cc <P_VGA_InitIO+0xa4>)
 80081b4:	f7ff f8a6 	bl	8007304 <GPIO_Init>

  GPIOB->BSRRL = GPIO_Pin_12;
 80081b8:	4b04      	ldr	r3, [pc, #16]	; (80081cc <P_VGA_InitIO+0xa4>)
 80081ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80081be:	831a      	strh	r2, [r3, #24]
}
 80081c0:	bf00      	nop
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	40021000 	.word	0x40021000
 80081cc:	40020400 	.word	0x40020400

080081d0 <P_VGA_InitTIM>:
//--------------------------------------------------------------
// internal Function
// init Timer
//--------------------------------------------------------------
void P_VGA_InitTIM(void)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b088      	sub	sp, #32
 80081d4:	af00      	add	r7, sp, #0
  // init of Timer1 for
  // Pixeldata via DMA
  //---------------------------------------------

  // Clock enable
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 80081d6:	2101      	movs	r1, #1
 80081d8:	2001      	movs	r0, #1
 80081da:	f7ff fa53 	bl	8007684 <RCC_APB2PeriphClockCmd>

  // Timer1 init
  TIM_TimeBaseStructure.TIM_Period =  VGA_TIM1_PERIODE;
 80081de:	230b      	movs	r3, #11
 80081e0:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM1_PRESCALE;
 80081e2:	2300      	movs	r3, #0
 80081e4:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80081e6:	2300      	movs	r3, #0
 80081e8:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80081ea:	2300      	movs	r3, #0
 80081ec:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 80081ee:	f107 0314 	add.w	r3, r7, #20
 80081f2:	4619      	mov	r1, r3
 80081f4:	4828      	ldr	r0, [pc, #160]	; (8008298 <P_VGA_InitTIM+0xc8>)
 80081f6:	f7ff fa65 	bl	80076c4 <TIM_TimeBaseInit>
  // CH4 for HSYNC-Signal
  // CH3 for DMA Trigger start
  //---------------------------------------------

  // Clock enable
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80081fa:	2101      	movs	r1, #1
 80081fc:	2001      	movs	r0, #1
 80081fe:	f7ff fa21 	bl	8007644 <RCC_APB1PeriphClockCmd>

  // Timer2 init
  TIM_TimeBaseStructure.TIM_Period = VGA_TIM2_HSYNC_PERIODE;
 8008202:	f640 236b 	movw	r3, #2667	; 0xa6b
 8008206:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 8008208:	2300      	movs	r3, #0
 800820a:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 800820c:	2300      	movs	r3, #0
 800820e:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8008210:	2300      	movs	r3, #0
 8008212:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 8008214:	f107 0314 	add.w	r3, r7, #20
 8008218:	4619      	mov	r1, r3
 800821a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800821e:	f7ff fa51 	bl	80076c4 <TIM_TimeBaseInit>

  // Timer2 Channel 3 ( for DMA Trigger start)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8008222:	2360      	movs	r3, #96	; 0x60
 8008224:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8008226:	2301      	movs	r3, #1
 8008228:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HTRIGGER_START-VGA_TIM2_DMA_DELAY;
 800822a:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 800822e:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8008230:	2302      	movs	r3, #2
 8008232:	81bb      	strh	r3, [r7, #12]
  TIM_OC3Init(TIM2, &TIM_OCInitStructure);
 8008234:	463b      	mov	r3, r7
 8008236:	4619      	mov	r1, r3
 8008238:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800823c:	f7ff faee 	bl	800781c <TIM_OC3Init>
  TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8008240:	2108      	movs	r1, #8
 8008242:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008246:	f7ff fbd7 	bl	80079f8 <TIM_OC3PreloadConfig>

  // Timer2 Channel 4 (for HSYNC)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 800824a:	2360      	movs	r3, #96	; 0x60
 800824c:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 800824e:	2301      	movs	r3, #1
 8008250:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HSYNC_IMP;
 8008252:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8008256:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8008258:	2302      	movs	r3, #2
 800825a:	81bb      	strh	r3, [r7, #12]
  TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 800825c:	463b      	mov	r3, r7
 800825e:	4619      	mov	r1, r3
 8008260:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008264:	f7ff fb60 	bl	8007928 <TIM_OC4Init>
  TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8008268:	2108      	movs	r1, #8
 800826a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800826e:	f7ff fbdf 	bl	8007a30 <TIM_OC4PreloadConfig>
  //---------------------------------------------
  // enable all Timers
  //---------------------------------------------

  // Timer1 enable
  TIM_ARRPreloadConfig(TIM1, ENABLE);
 8008272:	2101      	movs	r1, #1
 8008274:	4808      	ldr	r0, [pc, #32]	; (8008298 <P_VGA_InitTIM+0xc8>)
 8008276:	f7ff fa91 	bl	800779c <TIM_ARRPreloadConfig>

  // Timer2 enable
  TIM_ARRPreloadConfig(TIM2, ENABLE);
 800827a:	2101      	movs	r1, #1
 800827c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8008280:	f7ff fa8c 	bl	800779c <TIM_ARRPreloadConfig>
  TIM_Cmd(TIM2, ENABLE);
 8008284:	2101      	movs	r1, #1
 8008286:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800828a:	f7ff faa7 	bl	80077dc <TIM_Cmd>

}
 800828e:	bf00      	nop
 8008290:	3720      	adds	r7, #32
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	40010000 	.word	0x40010000

0800829c <P_VGA_InitINT>:
//--------------------------------------------------------------
// internal Function
// init Interrupts
//--------------------------------------------------------------
void P_VGA_InitINT(void)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b082      	sub	sp, #8
 80082a0:	af00      	add	r7, sp, #0
  // init from DMA Interrupt
  // for TransferComplete Interrupt
  // DMA2, Stream5, Channel6
  //---------------------------------------------

  DMA_ITConfig(DMA2_Stream5, DMA_IT_TC, ENABLE);
 80082a2:	2201      	movs	r2, #1
 80082a4:	2110      	movs	r1, #16
 80082a6:	4812      	ldr	r0, [pc, #72]	; (80082f0 <P_VGA_InitINT+0x54>)
 80082a8:	f7fe ff6c 	bl	8007184 <DMA_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream5_IRQn;
 80082ac:	2344      	movs	r3, #68	; 0x44
 80082ae:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80082b0:	2300      	movs	r3, #0
 80082b2:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80082b4:	2300      	movs	r3, #0
 80082b6:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80082b8:	2301      	movs	r3, #1
 80082ba:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 80082bc:	1d3b      	adds	r3, r7, #4
 80082be:	4618      	mov	r0, r3
 80082c0:	f7fe fdb6 	bl	8006e30 <NVIC_Init>
  // init of Timer2 Interrupt
  // for HSync-Counter using Update
  // for DMA Trigger START using CH3
  //---------------------------------------------

  TIM_ITConfig(TIM2,TIM_IT_CC3,ENABLE);
 80082c4:	2201      	movs	r2, #1
 80082c6:	2108      	movs	r1, #8
 80082c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80082cc:	f7ff fbce 	bl	8007a6c <TIM_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80082d0:	231c      	movs	r3, #28
 80082d2:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80082d4:	2300      	movs	r3, #0
 80082d6:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80082d8:	2300      	movs	r3, #0
 80082da:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80082dc:	2301      	movs	r3, #1
 80082de:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 80082e0:	1d3b      	adds	r3, r7, #4
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fe fda4 	bl	8006e30 <NVIC_Init>
}
 80082e8:	bf00      	nop
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	40026488 	.word	0x40026488

080082f4 <P_VGA_InitDMA>:
//--------------------------------------------------------------
// internal Function
// init DMA
//--------------------------------------------------------------
void P_VGA_InitDMA(void)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b090      	sub	sp, #64	; 0x40
 80082f8:	af00      	add	r7, sp, #0
  // (look at page 217 of the Ref Manual)
  // DMA=2, Channel=6, Stream=5
  //---------------------------------------------

  // Clock Enable (DMA)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 80082fa:	2101      	movs	r1, #1
 80082fc:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8008300:	f7ff f980 	bl	8007604 <RCC_AHB1PeriphClockCmd>

  // DMA init (DMA2, Channel6, Stream5)
  DMA_Cmd(DMA2_Stream5, DISABLE);
 8008304:	2100      	movs	r1, #0
 8008306:	481b      	ldr	r0, [pc, #108]	; (8008374 <P_VGA_InitDMA+0x80>)
 8008308:	f7fe ff20 	bl	800714c <DMA_Cmd>
  DMA_DeInit(DMA2_Stream5);
 800830c:	4819      	ldr	r0, [pc, #100]	; (8008374 <P_VGA_InitDMA+0x80>)
 800830e:	f7fe fdf1 	bl	8006ef4 <DMA_DeInit>
  DMA_InitStructure.DMA_Channel = DMA_Channel_6;
 8008312:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8008316:	607b      	str	r3, [r7, #4]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)VGA_GPIOE_ODR_ADDRESS;
 8008318:	4b17      	ldr	r3, [pc, #92]	; (8008378 <P_VGA_InitDMA+0x84>)
 800831a:	60bb      	str	r3, [r7, #8]
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&VGA_RAM1;
 800831c:	4b17      	ldr	r3, [pc, #92]	; (800837c <P_VGA_InitDMA+0x88>)
 800831e:	60fb      	str	r3, [r7, #12]
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 8008320:	2340      	movs	r3, #64	; 0x40
 8008322:	613b      	str	r3, [r7, #16]
  DMA_InitStructure.DMA_BufferSize = VGA_DISPLAY_X+1;
 8008324:	f240 1341 	movw	r3, #321	; 0x141
 8008328:	617b      	str	r3, [r7, #20]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 800832a:	2300      	movs	r3, #0
 800832c:	61bb      	str	r3, [r7, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800832e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008332:	61fb      	str	r3, [r7, #28]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 8008334:	2300      	movs	r3, #0
 8008336:	623b      	str	r3, [r7, #32]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8008338:	2300      	movs	r3, #0
 800833a:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 800833c:	2300      	movs	r3, #0
 800833e:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8008340:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8008344:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 8008346:	2300      	movs	r3, #0
 8008348:	633b      	str	r3, [r7, #48]	; 0x30
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 800834a:	2301      	movs	r3, #1
 800834c:	637b      	str	r3, [r7, #52]	; 0x34
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 800834e:	2300      	movs	r3, #0
 8008350:	63bb      	str	r3, [r7, #56]	; 0x38
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 8008352:	2300      	movs	r3, #0
 8008354:	63fb      	str	r3, [r7, #60]	; 0x3c
  DMA_Init(DMA2_Stream5, &DMA_InitStructure);
 8008356:	1d3b      	adds	r3, r7, #4
 8008358:	4619      	mov	r1, r3
 800835a:	4806      	ldr	r0, [pc, #24]	; (8008374 <P_VGA_InitDMA+0x80>)
 800835c:	f7fe fe9e 	bl	800709c <DMA_Init>

  // DMA-Timer1 enable
  TIM_DMACmd(TIM1,TIM_DMA_Update,ENABLE);
 8008360:	2201      	movs	r2, #1
 8008362:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008366:	4806      	ldr	r0, [pc, #24]	; (8008380 <P_VGA_InitDMA+0x8c>)
 8008368:	f7ff fbb5 	bl	8007ad6 <TIM_DMACmd>
}
 800836c:	bf00      	nop
 800836e:	3740      	adds	r7, #64	; 0x40
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}
 8008374:	40026488 	.word	0x40026488
 8008378:	40021015 	.word	0x40021015
 800837c:	20000778 	.word	0x20000778
 8008380:	40010000 	.word	0x40010000

08008384 <TIM2_IRQHandler>:
//
//   CC3-Interrupt    -> starts from DMA
// Watch it.. higher troughput when interrupt flag is left alone
//--------------------------------------------------------------
void TIM2_IRQHandler(void)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	af00      	add	r7, sp, #0

  // Interrupt of Timer2 CH3 occurred (for Trigger start)
  TIM_ClearITPendingBit(TIM2, TIM_IT_CC3);
 8008388:	2108      	movs	r1, #8
 800838a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800838e:	f7ff fb91 	bl	8007ab4 <TIM_ClearITPendingBit>

  VGA.hsync_cnt++;
 8008392:	4b26      	ldr	r3, [pc, #152]	; (800842c <TIM2_IRQHandler+0xa8>)
 8008394:	881b      	ldrh	r3, [r3, #0]
 8008396:	3301      	adds	r3, #1
 8008398:	b29a      	uxth	r2, r3
 800839a:	4b24      	ldr	r3, [pc, #144]	; (800842c <TIM2_IRQHandler+0xa8>)
 800839c:	801a      	strh	r2, [r3, #0]
  if(VGA.hsync_cnt>=VGA_VSYNC_PERIODE) {
 800839e:	4b23      	ldr	r3, [pc, #140]	; (800842c <TIM2_IRQHandler+0xa8>)
 80083a0:	881b      	ldrh	r3, [r3, #0]
 80083a2:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 80083a6:	d905      	bls.n	80083b4 <TIM2_IRQHandler+0x30>
    // -----------
    VGA.hsync_cnt=0;
 80083a8:	4b20      	ldr	r3, [pc, #128]	; (800842c <TIM2_IRQHandler+0xa8>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr=(uint32_t)(&VGA_RAM1[0]);
 80083ae:	4a20      	ldr	r2, [pc, #128]	; (8008430 <TIM2_IRQHandler+0xac>)
 80083b0:	4b1e      	ldr	r3, [pc, #120]	; (800842c <TIM2_IRQHandler+0xa8>)
 80083b2:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  if(VGA.hsync_cnt<VGA_VSYNC_IMP) {
 80083b4:	4b1d      	ldr	r3, [pc, #116]	; (800842c <TIM2_IRQHandler+0xa8>)
 80083b6:	881b      	ldrh	r3, [r3, #0]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d804      	bhi.n	80083c6 <TIM2_IRQHandler+0x42>
    // HSync low
    GPIOB->BSRRH = GPIO_Pin_12;
 80083bc:	4b1d      	ldr	r3, [pc, #116]	; (8008434 <TIM2_IRQHandler+0xb0>)
 80083be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80083c2:	835a      	strh	r2, [r3, #26]
 80083c4:	e003      	b.n	80083ce <TIM2_IRQHandler+0x4a>
  }
  else {
    // HSync High
    GPIOB->BSRRL = GPIO_Pin_12;
 80083c6:	4b1b      	ldr	r3, [pc, #108]	; (8008434 <TIM2_IRQHandler+0xb0>)
 80083c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80083cc:	831a      	strh	r2, [r3, #24]
  }

  // Test for DMA start
  if((VGA.hsync_cnt>=VGA_VSYNC_BILD_START) && (VGA.hsync_cnt<=VGA_VSYNC_BILD_STOP)) {
 80083ce:	4b17      	ldr	r3, [pc, #92]	; (800842c <TIM2_IRQHandler+0xa8>)
 80083d0:	881b      	ldrh	r3, [r3, #0]
 80083d2:	2b23      	cmp	r3, #35	; 0x23
 80083d4:	d927      	bls.n	8008426 <TIM2_IRQHandler+0xa2>
 80083d6:	4b15      	ldr	r3, [pc, #84]	; (800842c <TIM2_IRQHandler+0xa8>)
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	f240 2202 	movw	r2, #514	; 0x202
 80083de:	4293      	cmp	r3, r2
 80083e0:	d821      	bhi.n	8008426 <TIM2_IRQHandler+0xa2>
    // after FP start => DMA Transfer

    // DMA2 init
	DMA2_Stream5->CR=VGA.dma2_cr_reg;
 80083e2:	4a15      	ldr	r2, [pc, #84]	; (8008438 <TIM2_IRQHandler+0xb4>)
 80083e4:	4b11      	ldr	r3, [pc, #68]	; (800842c <TIM2_IRQHandler+0xa8>)
 80083e6:	689b      	ldr	r3, [r3, #8]
 80083e8:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR=VGA.start_adr;
 80083ea:	4a13      	ldr	r2, [pc, #76]	; (8008438 <TIM2_IRQHandler+0xb4>)
 80083ec:	4b0f      	ldr	r3, [pc, #60]	; (800842c <TIM2_IRQHandler+0xa8>)
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1|=TIM_CR1_CEN;
 80083f2:	4a12      	ldr	r2, [pc, #72]	; (800843c <TIM2_IRQHandler+0xb8>)
 80083f4:	4b11      	ldr	r3, [pc, #68]	; (800843c <TIM2_IRQHandler+0xb8>)
 80083f6:	881b      	ldrh	r3, [r3, #0]
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	f043 0301 	orr.w	r3, r3, #1
 80083fe:	b29b      	uxth	r3, r3
 8008400:	8013      	strh	r3, [r2, #0]
    // DMA2 enable
    DMA2_Stream5->CR|=DMA_SxCR_EN;
 8008402:	4a0d      	ldr	r2, [pc, #52]	; (8008438 <TIM2_IRQHandler+0xb4>)
 8008404:	4b0c      	ldr	r3, [pc, #48]	; (8008438 <TIM2_IRQHandler+0xb4>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f043 0301 	orr.w	r3, r3, #1
 800840c:	6013      	str	r3, [r2, #0]

    // Test Adrespointer for high
    if((VGA.hsync_cnt & 0x01)!=0) {
 800840e:	4b07      	ldr	r3, [pc, #28]	; (800842c <TIM2_IRQHandler+0xa8>)
 8008410:	881b      	ldrh	r3, [r3, #0]
 8008412:	f003 0301 	and.w	r3, r3, #1
 8008416:	2b00      	cmp	r3, #0
 8008418:	d005      	beq.n	8008426 <TIM2_IRQHandler+0xa2>
      // inc after Hsync
      VGA.start_adr+=(VGA_DISPLAY_X+1);
 800841a:	4b04      	ldr	r3, [pc, #16]	; (800842c <TIM2_IRQHandler+0xa8>)
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	f203 1341 	addw	r3, r3, #321	; 0x141
 8008422:	4a02      	ldr	r2, [pc, #8]	; (800842c <TIM2_IRQHandler+0xa8>)
 8008424:	6053      	str	r3, [r2, #4]
    }
  }
}
 8008426:	bf00      	nop
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	200006d8 	.word	0x200006d8
 8008430:	20000778 	.word	0x20000778
 8008434:	40020400 	.word	0x40020400
 8008438:	40026488 	.word	0x40026488
 800843c:	40010000 	.word	0x40010000

08008440 <DMA2_Stream5_IRQHandler>:
//   after TransferCompleteInterrupt -> stop DMA
//
// still a bit buggy
//--------------------------------------------------------------
void DMA2_Stream5_IRQHandler(void)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	af00      	add	r7, sp, #0
  if(DMA_GetITStatus(DMA2_Stream5, DMA_IT_TCIF5))
 8008444:	490d      	ldr	r1, [pc, #52]	; (800847c <DMA2_Stream5_IRQHandler+0x3c>)
 8008446:	480e      	ldr	r0, [pc, #56]	; (8008480 <DMA2_Stream5_IRQHandler+0x40>)
 8008448:	f7fe fed6 	bl	80071f8 <DMA_GetITStatus>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d012      	beq.n	8008478 <DMA2_Stream5_IRQHandler+0x38>
  {
    // TransferInterruptComplete Interrupt from DMA2
    DMA_ClearITPendingBit(DMA2_Stream5, DMA_IT_TCIF5);
 8008452:	490a      	ldr	r1, [pc, #40]	; (800847c <DMA2_Stream5_IRQHandler+0x3c>)
 8008454:	480a      	ldr	r0, [pc, #40]	; (8008480 <DMA2_Stream5_IRQHandler+0x40>)
 8008456:	f7fe ff27 	bl	80072a8 <DMA_ClearITPendingBit>
    // stop after all pixels => DMA Transfer stop

    // Timer1 stop
    TIM1->CR1&=~TIM_CR1_CEN;
 800845a:	4a0a      	ldr	r2, [pc, #40]	; (8008484 <DMA2_Stream5_IRQHandler+0x44>)
 800845c:	4b09      	ldr	r3, [pc, #36]	; (8008484 <DMA2_Stream5_IRQHandler+0x44>)
 800845e:	881b      	ldrh	r3, [r3, #0]
 8008460:	b29b      	uxth	r3, r3
 8008462:	f023 0301 	bic.w	r3, r3, #1
 8008466:	b29b      	uxth	r3, r3
 8008468:	8013      	strh	r3, [r2, #0]
    // DMA2 disable
    DMA2_Stream5->CR=0;
 800846a:	4b05      	ldr	r3, [pc, #20]	; (8008480 <DMA2_Stream5_IRQHandler+0x40>)
 800846c:	2200      	movs	r2, #0
 800846e:	601a      	str	r2, [r3, #0]
    // switch on black
    GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 8008470:	4b05      	ldr	r3, [pc, #20]	; (8008488 <DMA2_Stream5_IRQHandler+0x48>)
 8008472:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8008476:	835a      	strh	r2, [r3, #26]
  }
}
 8008478:	bf00      	nop
 800847a:	bd80      	pop	{r7, pc}
 800847c:	20008800 	.word	0x20008800
 8008480:	40026488 	.word	0x40026488
 8008484:	40010000 	.word	0x40010000
 8008488:	40021000 	.word	0x40021000

0800848c <UART_init>:

char string[100];
int charcounter = 0;

void UART_init(void)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b086      	sub	sp, #24
 8008490:	af00      	add	r7, sp, #0

  /* --------------------------- System Clocks Configuration -----------------*/
  /* USART2 clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8008492:	2101      	movs	r1, #1
 8008494:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8008498:	f7ff f8d4 	bl	8007644 <RCC_APB1PeriphClockCmd>

  /* GPIOA clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800849c:	2101      	movs	r1, #1
 800849e:	2001      	movs	r0, #1
 80084a0:	f7ff f8b0 	bl	8007604 <RCC_AHB1PeriphClockCmd>

  GPIO_InitTypeDef GPIO_InitStructure;

  /*-------------------------- GPIO Configuration ----------------------------*/
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 80084a4:	230c      	movs	r3, #12
 80084a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80084a8:	2302      	movs	r3, #2
 80084aa:	753b      	strb	r3, [r7, #20]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80084ac:	2300      	movs	r3, #0
 80084ae:	75bb      	strb	r3, [r7, #22]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 80084b0:	2301      	movs	r3, #1
 80084b2:	75fb      	strb	r3, [r7, #23]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80084b4:	2302      	movs	r3, #2
 80084b6:	757b      	strb	r3, [r7, #21]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 80084b8:	f107 0310 	add.w	r3, r7, #16
 80084bc:	4619      	mov	r1, r3
 80084be:	4816      	ldr	r0, [pc, #88]	; (8008518 <UART_init+0x8c>)
 80084c0:	f7fe ff20 	bl	8007304 <GPIO_Init>

  /* Connect USART pins to AF */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);   // USART2_TX
 80084c4:	2207      	movs	r2, #7
 80084c6:	2102      	movs	r1, #2
 80084c8:	4813      	ldr	r0, [pc, #76]	; (8008518 <UART_init+0x8c>)
 80084ca:	f7fe ffa9 	bl	8007420 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);  // USART2_RX
 80084ce:	2207      	movs	r2, #7
 80084d0:	2103      	movs	r1, #3
 80084d2:	4811      	ldr	r0, [pc, #68]	; (8008518 <UART_init+0x8c>)
 80084d4:	f7fe ffa4 	bl	8007420 <GPIO_PinAFConfig>
      - One Stop Bit
      - No parity
      - Hardware flow control disabled (RTS and CTS signals)
      - Receive and transmit enabled
*/
USART_InitStructure.USART_BaudRate = 115200;
 80084d8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80084dc:	603b      	str	r3, [r7, #0]
USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80084de:	2300      	movs	r3, #0
 80084e0:	80bb      	strh	r3, [r7, #4]
USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80084e2:	2300      	movs	r3, #0
 80084e4:	80fb      	strh	r3, [r7, #6]
USART_InitStructure.USART_Parity = USART_Parity_No;
 80084e6:	2300      	movs	r3, #0
 80084e8:	813b      	strh	r3, [r7, #8]
USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80084ea:	2300      	movs	r3, #0
 80084ec:	81bb      	strh	r3, [r7, #12]

USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80084ee:	230c      	movs	r3, #12
 80084f0:	817b      	strh	r3, [r7, #10]

USART_Init(USART2, &USART_InitStructure);
 80084f2:	463b      	mov	r3, r7
 80084f4:	4619      	mov	r1, r3
 80084f6:	4809      	ldr	r0, [pc, #36]	; (800851c <UART_init+0x90>)
 80084f8:	f7ff fb12 	bl	8007b20 <USART_Init>
USART_ITConfig(USART2,USART_IT_RXNE,ENABLE);
 80084fc:	2201      	movs	r2, #1
 80084fe:	f240 5125 	movw	r1, #1317	; 0x525
 8008502:	4806      	ldr	r0, [pc, #24]	; (800851c <UART_init+0x90>)
 8008504:	f7ff fbf8 	bl	8007cf8 <USART_ITConfig>

USART_Cmd(USART2, ENABLE);
 8008508:	2101      	movs	r1, #1
 800850a:	4804      	ldr	r0, [pc, #16]	; (800851c <UART_init+0x90>)
 800850c:	f7ff fbc2 	bl	8007c94 <USART_Cmd>

}
 8008510:	bf00      	nop
 8008512:	3718      	adds	r7, #24
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}
 8008518:	40020000 	.word	0x40020000
 800851c:	40004400 	.word	0x40004400

08008520 <UART_putchar>:

void UART_putchar(char c)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	4603      	mov	r3, r0
 8008528:	71fb      	strb	r3, [r7, #7]
		while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET); // Wait for Empty
 800852a:	bf00      	nop
 800852c:	2180      	movs	r1, #128	; 0x80
 800852e:	4808      	ldr	r0, [pc, #32]	; (8008550 <UART_putchar+0x30>)
 8008530:	f7ff fc2a 	bl	8007d88 <USART_GetFlagStatus>
 8008534:	4603      	mov	r3, r0
 8008536:	2b00      	cmp	r3, #0
 8008538:	d0f8      	beq.n	800852c <UART_putchar+0xc>
		USART_SendData(USART2, c);
 800853a:	79fb      	ldrb	r3, [r7, #7]
 800853c:	b29b      	uxth	r3, r3
 800853e:	4619      	mov	r1, r3
 8008540:	4803      	ldr	r0, [pc, #12]	; (8008550 <UART_putchar+0x30>)
 8008542:	f7ff fbc7 	bl	8007cd4 <USART_SendData>

}
 8008546:	bf00      	nop
 8008548:	3708      	adds	r7, #8
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	40004400 	.word	0x40004400

08008554 <UART_puts>:

void UART_puts(char *s)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
	volatile unsigned int i;
	for (i=0; s[i]; i++)
 800855c:	2300      	movs	r3, #0
 800855e:	60fb      	str	r3, [r7, #12]
 8008560:	e009      	b.n	8008576 <UART_puts+0x22>
	{
		UART_putchar(s[i]);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	4413      	add	r3, r2
 8008568:	781b      	ldrb	r3, [r3, #0]
 800856a:	4618      	mov	r0, r3
 800856c:	f7ff ffd8 	bl	8008520 <UART_putchar>
	for (i=0; s[i]; i++)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	3301      	adds	r3, #1
 8008574:	60fb      	str	r3, [r7, #12]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	4413      	add	r3, r2
 800857c:	781b      	ldrb	r3, [r3, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1ef      	bne.n	8008562 <UART_puts+0xe>
		//while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET); // Wait for Empty
		//USART_SendData(USART2, s[i]);
	}
}
 8008582:	bf00      	nop
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
	...

0800858c <USART2_IRQHandler>:
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
}

void USART2_IRQHandler(void)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
	// check if the USART2 receive interrupt flag was set
	if( USART_GetITStatus(USART2, USART_IT_RXNE))
 8008592:	f240 5125 	movw	r1, #1317	; 0x525
 8008596:	4827      	ldr	r0, [pc, #156]	; (8008634 <USART2_IRQHandler+0xa8>)
 8008598:	f7ff fc12 	bl	8007dc0 <USART_GetITStatus>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d044      	beq.n	800862c <USART2_IRQHandler+0xa0>
	{
		USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 80085a2:	f240 5125 	movw	r1, #1317	; 0x525
 80085a6:	4823      	ldr	r0, [pc, #140]	; (8008634 <USART2_IRQHandler+0xa8>)
 80085a8:	f7ff fc65 	bl	8007e76 <USART_ClearITPendingBit>
		int i;
		char c = USART2->DR & 0xFF;
 80085ac:	4b21      	ldr	r3, [pc, #132]	; (8008634 <USART2_IRQHandler+0xa8>)
 80085ae:	889b      	ldrh	r3, [r3, #4]
 80085b0:	b29b      	uxth	r3, r3
 80085b2:	70fb      	strb	r3, [r7, #3]
//		LCD_XY(10,1);
//		LCD_put("UART:   ");
//		LCD_XY(15,1);
//		LCD_putchar(c);

		if(c > 64 && c < 91)
 80085b4:	78fb      	ldrb	r3, [r7, #3]
 80085b6:	2b40      	cmp	r3, #64	; 0x40
 80085b8:	d905      	bls.n	80085c6 <USART2_IRQHandler+0x3a>
 80085ba:	78fb      	ldrb	r3, [r7, #3]
 80085bc:	2b5a      	cmp	r3, #90	; 0x5a
 80085be:	d802      	bhi.n	80085c6 <USART2_IRQHandler+0x3a>
			c += 32;
 80085c0:	78fb      	ldrb	r3, [r7, #3]
 80085c2:	3320      	adds	r3, #32
 80085c4:	70fb      	strb	r3, [r7, #3]
		if(c <= 13)
 80085c6:	78fb      	ldrb	r3, [r7, #3]
 80085c8:	2b0d      	cmp	r3, #13
 80085ca:	d81d      	bhi.n	8008608 <USART2_IRQHandler+0x7c>
		{
			for(i=0;i<charcounter;i++)
 80085cc:	2300      	movs	r3, #0
 80085ce:	607b      	str	r3, [r7, #4]
 80085d0:	e00b      	b.n	80085ea <USART2_IRQHandler+0x5e>
			{
				USART_SendData(USART2, string[i]); // Echo Char
 80085d2:	4a19      	ldr	r2, [pc, #100]	; (8008638 <USART2_IRQHandler+0xac>)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	4413      	add	r3, r2
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	b29b      	uxth	r3, r3
 80085dc:	4619      	mov	r1, r3
 80085de:	4815      	ldr	r0, [pc, #84]	; (8008634 <USART2_IRQHandler+0xa8>)
 80085e0:	f7ff fb78 	bl	8007cd4 <USART_SendData>
			for(i=0;i<charcounter;i++)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	3301      	adds	r3, #1
 80085e8:	607b      	str	r3, [r7, #4]
 80085ea:	4b14      	ldr	r3, [pc, #80]	; (800863c <USART2_IRQHandler+0xb0>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	dbee      	blt.n	80085d2 <USART2_IRQHandler+0x46>
			}
			charcounter = 0;
 80085f4:	4b11      	ldr	r3, [pc, #68]	; (800863c <USART2_IRQHandler+0xb0>)
 80085f6:	2200      	movs	r2, #0
 80085f8:	601a      	str	r2, [r3, #0]
			USART_SendData(USART2, c); // Echo Char
 80085fa:	78fb      	ldrb	r3, [r7, #3]
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	4619      	mov	r1, r3
 8008600:	480c      	ldr	r0, [pc, #48]	; (8008634 <USART2_IRQHandler+0xa8>)
 8008602:	f7ff fb67 	bl	8007cd4 <USART_SendData>
 8008606:	e009      	b.n	800861c <USART2_IRQHandler+0x90>
		}
		else
		{
			string[charcounter] = c;
 8008608:	4b0c      	ldr	r3, [pc, #48]	; (800863c <USART2_IRQHandler+0xb0>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	490a      	ldr	r1, [pc, #40]	; (8008638 <USART2_IRQHandler+0xac>)
 800860e:	78fa      	ldrb	r2, [r7, #3]
 8008610:	54ca      	strb	r2, [r1, r3]
			charcounter++;
 8008612:	4b0a      	ldr	r3, [pc, #40]	; (800863c <USART2_IRQHandler+0xb0>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	3301      	adds	r3, #1
 8008618:	4a08      	ldr	r2, [pc, #32]	; (800863c <USART2_IRQHandler+0xb0>)
 800861a:	6013      	str	r3, [r2, #0]
		}


		while (USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET); // Wait for Empty
 800861c:	bf00      	nop
 800861e:	2140      	movs	r1, #64	; 0x40
 8008620:	4804      	ldr	r0, [pc, #16]	; (8008634 <USART2_IRQHandler+0xa8>)
 8008622:	f7ff fbb1 	bl	8007d88 <USART_GetFlagStatus>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d0f8      	beq.n	800861e <USART2_IRQHandler+0x92>

	}
}
 800862c:	bf00      	nop
 800862e:	3708      	adds	r7, #8
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	40004400 	.word	0x40004400
 8008638:	2001389c 	.word	0x2001389c
 800863c:	2000069c 	.word	0x2000069c

08008640 <UART_get>:

// Ontvang een karakter via de UART
// niet echt nodig als routine maar als wrapper voor compatabiliteit. Let op geen -1 als er geen char is ontvangen!

char UART_get(void)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
    char uart_char = -1;
 8008646:	23ff      	movs	r3, #255	; 0xff
 8008648:	71fb      	strb	r3, [r7, #7]
    if (USART_GetFlagStatus(USART2, USART_FLAG_RXNE)== SET)  // check for data available
 800864a:	2120      	movs	r1, #32
 800864c:	4807      	ldr	r0, [pc, #28]	; (800866c <UART_get+0x2c>)
 800864e:	f7ff fb9b 	bl	8007d88 <USART_GetFlagStatus>
 8008652:	4603      	mov	r3, r0
 8008654:	2b01      	cmp	r3, #1
 8008656:	d103      	bne.n	8008660 <UART_get+0x20>
    	 uart_char= USART2->DR & 0xFF; // and read the data from peripheral
 8008658:	4b04      	ldr	r3, [pc, #16]	; (800866c <UART_get+0x2c>)
 800865a:	889b      	ldrh	r3, [r3, #4]
 800865c:	b29b      	uxth	r3, r3
 800865e:	71fb      	strb	r3, [r7, #7]
    return uart_char;
 8008660:	79fb      	ldrb	r3, [r7, #7]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3708      	adds	r7, #8
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	40004400 	.word	0x40004400

08008670 <UART_gets>:
// args: char *readbuffer
//       int   echo, when TRUE, send read-char to UART
// remark: ARM sends -1 if buffer is empty
//         LF is cleared if set in terminal-program
void UART_gets(char *s, int echo)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
	while (TRUE)
	{
	 	*s = UART_get();
 800867a:	f7ff ffe1 	bl	8008640 <UART_get>
 800867e:	4603      	mov	r3, r0
 8008680:	461a      	mov	r2, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	701a      	strb	r2, [r3, #0]

	 	if (*s==-1)             // check for data available
	 		continue;

	 	if (*s==0xff || *s==LF) // if no data or LF, continue
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	781b      	ldrb	r3, [r3, #0]
 800868a:	2bff      	cmp	r3, #255	; 0xff
 800868c:	d017      	beq.n	80086be <UART_gets+0x4e>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	781b      	ldrb	r3, [r3, #0]
 8008692:	2b0a      	cmp	r3, #10
 8008694:	d013      	beq.n	80086be <UART_gets+0x4e>
			continue;


		if (echo)              // if output-flag set
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d004      	beq.n	80086a6 <UART_gets+0x36>
			UART_putchar(*s);  // to read what u entered
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	4618      	mov	r0, r3
 80086a2:	f7ff ff3d 	bl	8008520 <UART_putchar>


		if (*s==CR)            // if enter pressed
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	2b0d      	cmp	r3, #13
 80086ac:	d103      	bne.n	80086b6 <UART_gets+0x46>
		{
			*s = '\0';         // ignore char and close string
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	701a      	strb	r2, [r3, #0]
		    return;            // buf ready, exit loop
 80086b4:	e005      	b.n	80086c2 <UART_gets+0x52>
		}
		s++;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	3301      	adds	r3, #1
 80086ba:	607b      	str	r3, [r7, #4]
 80086bc:	e7dd      	b.n	800867a <UART_gets+0xa>
			continue;
 80086be:	bf00      	nop
	 	*s = UART_get();
 80086c0:	e7db      	b.n	800867a <UART_gets+0xa>
	}
}
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <IO_Init>:
 *      Author: Milan Dammingh
 */
#include "IO_layer.h"

void IO_Init()
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	af00      	add	r7, sp, #0
	UB_VGA_Screen_Init(); // Init VGA-Screen
 80086cc:	f7ff fca2 	bl	8008014 <UB_VGA_Screen_Init>
	UART_init();
 80086d0:	f7ff fedc 	bl	800848c <UART_init>
	DELAY_init();
 80086d4:	f7ff fbec 	bl	8007eb0 <DELAY_init>
}
 80086d8:	bf00      	nop
 80086da:	bd80      	pop	{r7, pc}

080086dc <input_uart>:
 *      Author: Milan Dammingh
 */
#include "front_layer.h"

void input_uart()
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
	int fill;
	UART_gets(parameters,TRUE);		// Get data from terminal
 80086e2:	2101      	movs	r1, #1
 80086e4:	48a7      	ldr	r0, [pc, #668]	; (8008984 <input_uart+0x2a8>)
 80086e6:	f7ff ffc3 	bl	8008670 <UART_gets>
	fl_token = strtok (parameters,",");	// Put first argument in fl_token
 80086ea:	49a7      	ldr	r1, [pc, #668]	; (8008988 <input_uart+0x2ac>)
 80086ec:	48a5      	ldr	r0, [pc, #660]	; (8008984 <input_uart+0x2a8>)
 80086ee:	f001 f949 	bl	8009984 <strtok>
 80086f2:	4602      	mov	r2, r0
 80086f4:	4ba5      	ldr	r3, [pc, #660]	; (800898c <input_uart+0x2b0>)
 80086f6:	601a      	str	r2, [r3, #0]
	strcpy(functions,fl_token);			// String compare to functions
 80086f8:	4ba4      	ldr	r3, [pc, #656]	; (800898c <input_uart+0x2b0>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4619      	mov	r1, r3
 80086fe:	48a4      	ldr	r0, [pc, #656]	; (8008990 <input_uart+0x2b4>)
 8008700:	f001 f938 	bl	8009974 <strcpy>

	if(strcmp(functions, "clearscherm")==0)	// Function is clearscreen
 8008704:	49a3      	ldr	r1, [pc, #652]	; (8008994 <input_uart+0x2b8>)
 8008706:	48a2      	ldr	r0, [pc, #648]	; (8008990 <input_uart+0x2b4>)
 8008708:	f7f7 fd5e 	bl	80001c8 <strcmp>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d127      	bne.n	8008762 <input_uart+0x86>
	{
		fill=0;
 8008712:	2300      	movs	r3, #0
 8008714:	607b      	str	r3, [r7, #4]
		while(fl_token != NULL)				// While something in fl_token execute code below
 8008716:	e01d      	b.n	8008754 <input_uart+0x78>
		{
		  switch(fill)						// Fill char string with each parameter
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d002      	beq.n	8008724 <input_uart+0x48>
 800871e:	2b01      	cmp	r3, #1
 8008720:	d007      	beq.n	8008732 <input_uart+0x56>
 8008722:	e00d      	b.n	8008740 <input_uart+0x64>
		  {
			case 0:
			  strcpy(clearscrn_args.function,fl_token);
 8008724:	4b99      	ldr	r3, [pc, #612]	; (800898c <input_uart+0x2b0>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4619      	mov	r1, r3
 800872a:	489b      	ldr	r0, [pc, #620]	; (8008998 <input_uart+0x2bc>)
 800872c:	f001 f922 	bl	8009974 <strcpy>
			  break;
 8008730:	e006      	b.n	8008740 <input_uart+0x64>
			case 1:
			  strcpy(clearscrn_args.color,fl_token);
 8008732:	4b96      	ldr	r3, [pc, #600]	; (800898c <input_uart+0x2b0>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4619      	mov	r1, r3
 8008738:	4898      	ldr	r0, [pc, #608]	; (800899c <input_uart+0x2c0>)
 800873a:	f001 f91b 	bl	8009974 <strcpy>
			  break;
 800873e:	bf00      	nop
		  }
		  fill++;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	3301      	adds	r3, #1
 8008744:	607b      	str	r3, [r7, #4]
		  fl_token = strtok (NULL, ",");
 8008746:	4990      	ldr	r1, [pc, #576]	; (8008988 <input_uart+0x2ac>)
 8008748:	2000      	movs	r0, #0
 800874a:	f001 f91b 	bl	8009984 <strtok>
 800874e:	4602      	mov	r2, r0
 8008750:	4b8e      	ldr	r3, [pc, #568]	; (800898c <input_uart+0x2b0>)
 8008752:	601a      	str	r2, [r3, #0]
		while(fl_token != NULL)				// While something in fl_token execute code below
 8008754:	4b8d      	ldr	r3, [pc, #564]	; (800898c <input_uart+0x2b0>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1dd      	bne.n	8008718 <input_uart+0x3c>
		}
		func_chooser();
 800875c:	f000 fd9c 	bl	8009298 <func_chooser>
 8008760:	e275      	b.n	8008c4e <input_uart+0x572>
	}
	else if(strcmp(functions, "lijn")==0)
 8008762:	498f      	ldr	r1, [pc, #572]	; (80089a0 <input_uart+0x2c4>)
 8008764:	488a      	ldr	r0, [pc, #552]	; (8008990 <input_uart+0x2b4>)
 8008766:	f7f7 fd2f 	bl	80001c8 <strcmp>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d159      	bne.n	8008824 <input_uart+0x148>
	{
		fill=0;
 8008770:	2300      	movs	r3, #0
 8008772:	607b      	str	r3, [r7, #4]
		while(fl_token!= NULL)
 8008774:	e04f      	b.n	8008816 <input_uart+0x13a>
		{
			switch(fill)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2b06      	cmp	r3, #6
 800877a:	d842      	bhi.n	8008802 <input_uart+0x126>
 800877c:	a201      	add	r2, pc, #4	; (adr r2, 8008784 <input_uart+0xa8>)
 800877e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008782:	bf00      	nop
 8008784:	080087a1 	.word	0x080087a1
 8008788:	080087af 	.word	0x080087af
 800878c:	080087bd 	.word	0x080087bd
 8008790:	080087cb 	.word	0x080087cb
 8008794:	080087d9 	.word	0x080087d9
 8008798:	080087e7 	.word	0x080087e7
 800879c:	080087f5 	.word	0x080087f5
			{
				case 0:
					strcpy(line_args.function,fl_token);
 80087a0:	4b7a      	ldr	r3, [pc, #488]	; (800898c <input_uart+0x2b0>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4619      	mov	r1, r3
 80087a6:	487f      	ldr	r0, [pc, #508]	; (80089a4 <input_uart+0x2c8>)
 80087a8:	f001 f8e4 	bl	8009974 <strcpy>
					break;
 80087ac:	e029      	b.n	8008802 <input_uart+0x126>
				case 1:
					strcpy(line_args.x1,fl_token);
 80087ae:	4b77      	ldr	r3, [pc, #476]	; (800898c <input_uart+0x2b0>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4619      	mov	r1, r3
 80087b4:	487c      	ldr	r0, [pc, #496]	; (80089a8 <input_uart+0x2cc>)
 80087b6:	f001 f8dd 	bl	8009974 <strcpy>
					break;
 80087ba:	e022      	b.n	8008802 <input_uart+0x126>
				case 2:
					strcpy(line_args.y1,fl_token);
 80087bc:	4b73      	ldr	r3, [pc, #460]	; (800898c <input_uart+0x2b0>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4619      	mov	r1, r3
 80087c2:	487a      	ldr	r0, [pc, #488]	; (80089ac <input_uart+0x2d0>)
 80087c4:	f001 f8d6 	bl	8009974 <strcpy>
					break;
 80087c8:	e01b      	b.n	8008802 <input_uart+0x126>
				case 3:
					strcpy(line_args.x2,fl_token);
 80087ca:	4b70      	ldr	r3, [pc, #448]	; (800898c <input_uart+0x2b0>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4619      	mov	r1, r3
 80087d0:	4877      	ldr	r0, [pc, #476]	; (80089b0 <input_uart+0x2d4>)
 80087d2:	f001 f8cf 	bl	8009974 <strcpy>
					break;
 80087d6:	e014      	b.n	8008802 <input_uart+0x126>
				case 4:
					strcpy(line_args.y2,fl_token);
 80087d8:	4b6c      	ldr	r3, [pc, #432]	; (800898c <input_uart+0x2b0>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4619      	mov	r1, r3
 80087de:	4875      	ldr	r0, [pc, #468]	; (80089b4 <input_uart+0x2d8>)
 80087e0:	f001 f8c8 	bl	8009974 <strcpy>
					break;
 80087e4:	e00d      	b.n	8008802 <input_uart+0x126>
				case 5:
					strcpy(line_args.thickness,fl_token);
 80087e6:	4b69      	ldr	r3, [pc, #420]	; (800898c <input_uart+0x2b0>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4619      	mov	r1, r3
 80087ec:	4872      	ldr	r0, [pc, #456]	; (80089b8 <input_uart+0x2dc>)
 80087ee:	f001 f8c1 	bl	8009974 <strcpy>
					break;
 80087f2:	e006      	b.n	8008802 <input_uart+0x126>
				case 6:
					strcpy(line_args.color,fl_token);
 80087f4:	4b65      	ldr	r3, [pc, #404]	; (800898c <input_uart+0x2b0>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4619      	mov	r1, r3
 80087fa:	4870      	ldr	r0, [pc, #448]	; (80089bc <input_uart+0x2e0>)
 80087fc:	f001 f8ba 	bl	8009974 <strcpy>
					break;
 8008800:	bf00      	nop
			}
			fill++;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	3301      	adds	r3, #1
 8008806:	607b      	str	r3, [r7, #4]
			fl_token = strtok (NULL, ",");
 8008808:	495f      	ldr	r1, [pc, #380]	; (8008988 <input_uart+0x2ac>)
 800880a:	2000      	movs	r0, #0
 800880c:	f001 f8ba 	bl	8009984 <strtok>
 8008810:	4602      	mov	r2, r0
 8008812:	4b5e      	ldr	r3, [pc, #376]	; (800898c <input_uart+0x2b0>)
 8008814:	601a      	str	r2, [r3, #0]
		while(fl_token!= NULL)
 8008816:	4b5d      	ldr	r3, [pc, #372]	; (800898c <input_uart+0x2b0>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d1ab      	bne.n	8008776 <input_uart+0x9a>
		}
		func_chooser();
 800881e:	f000 fd3b 	bl	8009298 <func_chooser>
 8008822:	e214      	b.n	8008c4e <input_uart+0x572>
	}
	else if(strcmp(functions, "ellips")==0)
 8008824:	4966      	ldr	r1, [pc, #408]	; (80089c0 <input_uart+0x2e4>)
 8008826:	485a      	ldr	r0, [pc, #360]	; (8008990 <input_uart+0x2b4>)
 8008828:	f7f7 fcce 	bl	80001c8 <strcmp>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d14f      	bne.n	80088d2 <input_uart+0x1f6>
	{
		fill=0;
 8008832:	2300      	movs	r3, #0
 8008834:	607b      	str	r3, [r7, #4]
		while(fl_token != NULL)
 8008836:	e045      	b.n	80088c4 <input_uart+0x1e8>
		{
			switch(fill)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2b05      	cmp	r3, #5
 800883c:	d838      	bhi.n	80088b0 <input_uart+0x1d4>
 800883e:	a201      	add	r2, pc, #4	; (adr r2, 8008844 <input_uart+0x168>)
 8008840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008844:	0800885d 	.word	0x0800885d
 8008848:	0800886b 	.word	0x0800886b
 800884c:	08008879 	.word	0x08008879
 8008850:	08008887 	.word	0x08008887
 8008854:	08008895 	.word	0x08008895
 8008858:	080088a3 	.word	0x080088a3
			{
				case 0:
					strcpy(ellips_args.function,fl_token);
 800885c:	4b4b      	ldr	r3, [pc, #300]	; (800898c <input_uart+0x2b0>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4619      	mov	r1, r3
 8008862:	4858      	ldr	r0, [pc, #352]	; (80089c4 <input_uart+0x2e8>)
 8008864:	f001 f886 	bl	8009974 <strcpy>
					break;
 8008868:	e022      	b.n	80088b0 <input_uart+0x1d4>
				case 1:
					strcpy(ellips_args.x_center,fl_token);
 800886a:	4b48      	ldr	r3, [pc, #288]	; (800898c <input_uart+0x2b0>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4619      	mov	r1, r3
 8008870:	4855      	ldr	r0, [pc, #340]	; (80089c8 <input_uart+0x2ec>)
 8008872:	f001 f87f 	bl	8009974 <strcpy>
					break;
 8008876:	e01b      	b.n	80088b0 <input_uart+0x1d4>
				case 2:
					strcpy(ellips_args.y_center,fl_token);
 8008878:	4b44      	ldr	r3, [pc, #272]	; (800898c <input_uart+0x2b0>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4619      	mov	r1, r3
 800887e:	4853      	ldr	r0, [pc, #332]	; (80089cc <input_uart+0x2f0>)
 8008880:	f001 f878 	bl	8009974 <strcpy>
					break;
 8008884:	e014      	b.n	80088b0 <input_uart+0x1d4>
				case 3:
					strcpy(ellips_args.x_rad,fl_token);
 8008886:	4b41      	ldr	r3, [pc, #260]	; (800898c <input_uart+0x2b0>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4619      	mov	r1, r3
 800888c:	4850      	ldr	r0, [pc, #320]	; (80089d0 <input_uart+0x2f4>)
 800888e:	f001 f871 	bl	8009974 <strcpy>
					break;
 8008892:	e00d      	b.n	80088b0 <input_uart+0x1d4>
				case 4:
					strcpy(ellips_args.y_rad,fl_token);
 8008894:	4b3d      	ldr	r3, [pc, #244]	; (800898c <input_uart+0x2b0>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4619      	mov	r1, r3
 800889a:	484e      	ldr	r0, [pc, #312]	; (80089d4 <input_uart+0x2f8>)
 800889c:	f001 f86a 	bl	8009974 <strcpy>
					break;
 80088a0:	e006      	b.n	80088b0 <input_uart+0x1d4>
				case 5:
					strcpy(ellips_args.color,fl_token);
 80088a2:	4b3a      	ldr	r3, [pc, #232]	; (800898c <input_uart+0x2b0>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4619      	mov	r1, r3
 80088a8:	484b      	ldr	r0, [pc, #300]	; (80089d8 <input_uart+0x2fc>)
 80088aa:	f001 f863 	bl	8009974 <strcpy>
					break;
 80088ae:	bf00      	nop
			}
			fill++;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	3301      	adds	r3, #1
 80088b4:	607b      	str	r3, [r7, #4]
			fl_token = strtok (NULL, ",");
 80088b6:	4934      	ldr	r1, [pc, #208]	; (8008988 <input_uart+0x2ac>)
 80088b8:	2000      	movs	r0, #0
 80088ba:	f001 f863 	bl	8009984 <strtok>
 80088be:	4602      	mov	r2, r0
 80088c0:	4b32      	ldr	r3, [pc, #200]	; (800898c <input_uart+0x2b0>)
 80088c2:	601a      	str	r2, [r3, #0]
		while(fl_token != NULL)
 80088c4:	4b31      	ldr	r3, [pc, #196]	; (800898c <input_uart+0x2b0>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d1b5      	bne.n	8008838 <input_uart+0x15c>
		}
		func_chooser();
 80088cc:	f000 fce4 	bl	8009298 <func_chooser>
 80088d0:	e1bd      	b.n	8008c4e <input_uart+0x572>
	}
	else if(strcmp(functions, "rechthoek")==0)
 80088d2:	4942      	ldr	r1, [pc, #264]	; (80089dc <input_uart+0x300>)
 80088d4:	482e      	ldr	r0, [pc, #184]	; (8008990 <input_uart+0x2b4>)
 80088d6:	f7f7 fc77 	bl	80001c8 <strcmp>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f040 808b 	bne.w	80089f8 <input_uart+0x31c>
	{
		fill=0;
 80088e2:	2300      	movs	r3, #0
 80088e4:	607b      	str	r3, [r7, #4]
		while(fl_token != NULL)
 80088e6:	e045      	b.n	8008974 <input_uart+0x298>
		{
			switch(fill)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2b05      	cmp	r3, #5
 80088ec:	d838      	bhi.n	8008960 <input_uart+0x284>
 80088ee:	a201      	add	r2, pc, #4	; (adr r2, 80088f4 <input_uart+0x218>)
 80088f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f4:	0800890d 	.word	0x0800890d
 80088f8:	0800891b 	.word	0x0800891b
 80088fc:	08008929 	.word	0x08008929
 8008900:	08008937 	.word	0x08008937
 8008904:	08008945 	.word	0x08008945
 8008908:	08008953 	.word	0x08008953
			{
				case 0:
					strcpy(rectangle_args.function,fl_token);
 800890c:	4b1f      	ldr	r3, [pc, #124]	; (800898c <input_uart+0x2b0>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4619      	mov	r1, r3
 8008912:	4833      	ldr	r0, [pc, #204]	; (80089e0 <input_uart+0x304>)
 8008914:	f001 f82e 	bl	8009974 <strcpy>
					break;
 8008918:	e022      	b.n	8008960 <input_uart+0x284>
				case 1:
					strcpy(rectangle_args.x1,fl_token);
 800891a:	4b1c      	ldr	r3, [pc, #112]	; (800898c <input_uart+0x2b0>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	4619      	mov	r1, r3
 8008920:	4830      	ldr	r0, [pc, #192]	; (80089e4 <input_uart+0x308>)
 8008922:	f001 f827 	bl	8009974 <strcpy>
					break;
 8008926:	e01b      	b.n	8008960 <input_uart+0x284>
				case 2:
					strcpy(rectangle_args.y1,fl_token);
 8008928:	4b18      	ldr	r3, [pc, #96]	; (800898c <input_uart+0x2b0>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4619      	mov	r1, r3
 800892e:	482e      	ldr	r0, [pc, #184]	; (80089e8 <input_uart+0x30c>)
 8008930:	f001 f820 	bl	8009974 <strcpy>
					break;
 8008934:	e014      	b.n	8008960 <input_uart+0x284>
				case 3:
					strcpy(rectangle_args.x2,fl_token);
 8008936:	4b15      	ldr	r3, [pc, #84]	; (800898c <input_uart+0x2b0>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4619      	mov	r1, r3
 800893c:	482b      	ldr	r0, [pc, #172]	; (80089ec <input_uart+0x310>)
 800893e:	f001 f819 	bl	8009974 <strcpy>
					break;
 8008942:	e00d      	b.n	8008960 <input_uart+0x284>
				case 4:
					strcpy(rectangle_args.y2,fl_token);
 8008944:	4b11      	ldr	r3, [pc, #68]	; (800898c <input_uart+0x2b0>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	4619      	mov	r1, r3
 800894a:	4829      	ldr	r0, [pc, #164]	; (80089f0 <input_uart+0x314>)
 800894c:	f001 f812 	bl	8009974 <strcpy>
					break;
 8008950:	e006      	b.n	8008960 <input_uart+0x284>
				case 5:
					strcpy(rectangle_args.color,fl_token);
 8008952:	4b0e      	ldr	r3, [pc, #56]	; (800898c <input_uart+0x2b0>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4619      	mov	r1, r3
 8008958:	4826      	ldr	r0, [pc, #152]	; (80089f4 <input_uart+0x318>)
 800895a:	f001 f80b 	bl	8009974 <strcpy>
					break;
 800895e:	bf00      	nop
			}
			fill++;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	3301      	adds	r3, #1
 8008964:	607b      	str	r3, [r7, #4]
			fl_token = strtok (NULL, ",");
 8008966:	4908      	ldr	r1, [pc, #32]	; (8008988 <input_uart+0x2ac>)
 8008968:	2000      	movs	r0, #0
 800896a:	f001 f80b 	bl	8009984 <strtok>
 800896e:	4602      	mov	r2, r0
 8008970:	4b06      	ldr	r3, [pc, #24]	; (800898c <input_uart+0x2b0>)
 8008972:	601a      	str	r2, [r3, #0]
		while(fl_token != NULL)
 8008974:	4b05      	ldr	r3, [pc, #20]	; (800898c <input_uart+0x2b0>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1b5      	bne.n	80088e8 <input_uart+0x20c>
		}
		func_chooser();
 800897c:	f000 fc8c 	bl	8009298 <func_chooser>
 8008980:	e165      	b.n	8008c4e <input_uart+0x572>
 8008982:	bf00      	nop
 8008984:	20013918 	.word	0x20013918
 8008988:	0800a264 	.word	0x0800a264
 800898c:	20013900 	.word	0x20013900
 8008990:	20013880 	.word	0x20013880
 8008994:	0800a268 	.word	0x0800a268
 8008998:	200006e4 	.word	0x200006e4
 800899c:	20000761 	.word	0x20000761
 80089a0:	0800a274 	.word	0x0800a274
 80089a4:	20013590 	.word	0x20013590
 80089a8:	2001359a 	.word	0x2001359a
 80089ac:	2001359f 	.word	0x2001359f
 80089b0:	200135a4 	.word	0x200135a4
 80089b4:	200135a9 	.word	0x200135a9
 80089b8:	200135cc 	.word	0x200135cc
 80089bc:	2001360d 	.word	0x2001360d
 80089c0:	0800a27c 	.word	0x0800a27c
 80089c4:	200137e0 	.word	0x200137e0
 80089c8:	20013808 	.word	0x20013808
 80089cc:	2001380d 	.word	0x2001380d
 80089d0:	20013812 	.word	0x20013812
 80089d4:	20013817 	.word	0x20013817
 80089d8:	2001385d 	.word	0x2001385d
 80089dc:	0800a284 	.word	0x0800a284
 80089e0:	20013468 	.word	0x20013468
 80089e4:	20013472 	.word	0x20013472
 80089e8:	20013477 	.word	0x20013477
 80089ec:	2001347c 	.word	0x2001347c
 80089f0:	20013481 	.word	0x20013481
 80089f4:	200134e5 	.word	0x200134e5
	}
	else if(strcmp(functions, "driehoek")==0)
 80089f8:	4998      	ldr	r1, [pc, #608]	; (8008c5c <input_uart+0x580>)
 80089fa:	4899      	ldr	r0, [pc, #612]	; (8008c60 <input_uart+0x584>)
 80089fc:	f7f7 fbe4 	bl	80001c8 <strcmp>
 8008a00:	4603      	mov	r3, r0
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d161      	bne.n	8008aca <input_uart+0x3ee>
	{
		fill=0;
 8008a06:	2300      	movs	r3, #0
 8008a08:	607b      	str	r3, [r7, #4]
		while(fl_token != NULL)
 8008a0a:	e057      	b.n	8008abc <input_uart+0x3e0>
		{
			switch(fill)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2b07      	cmp	r3, #7
 8008a10:	d84a      	bhi.n	8008aa8 <input_uart+0x3cc>
 8008a12:	a201      	add	r2, pc, #4	; (adr r2, 8008a18 <input_uart+0x33c>)
 8008a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a18:	08008a39 	.word	0x08008a39
 8008a1c:	08008a47 	.word	0x08008a47
 8008a20:	08008a55 	.word	0x08008a55
 8008a24:	08008a63 	.word	0x08008a63
 8008a28:	08008a71 	.word	0x08008a71
 8008a2c:	08008a7f 	.word	0x08008a7f
 8008a30:	08008a8d 	.word	0x08008a8d
 8008a34:	08008a9b 	.word	0x08008a9b
			{
				case 0:
					strcpy(triangle_args.function,fl_token);
 8008a38:	4b8a      	ldr	r3, [pc, #552]	; (8008c64 <input_uart+0x588>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	488a      	ldr	r0, [pc, #552]	; (8008c68 <input_uart+0x58c>)
 8008a40:	f000 ff98 	bl	8009974 <strcpy>
					break;
 8008a44:	e030      	b.n	8008aa8 <input_uart+0x3cc>
				case 1:
					strcpy(triangle_args.x1,fl_token);
 8008a46:	4b87      	ldr	r3, [pc, #540]	; (8008c64 <input_uart+0x588>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	4887      	ldr	r0, [pc, #540]	; (8008c6c <input_uart+0x590>)
 8008a4e:	f000 ff91 	bl	8009974 <strcpy>
					break;
 8008a52:	e029      	b.n	8008aa8 <input_uart+0x3cc>
				case 2:
					strcpy(triangle_args.y1,fl_token);
 8008a54:	4b83      	ldr	r3, [pc, #524]	; (8008c64 <input_uart+0x588>)
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4619      	mov	r1, r3
 8008a5a:	4885      	ldr	r0, [pc, #532]	; (8008c70 <input_uart+0x594>)
 8008a5c:	f000 ff8a 	bl	8009974 <strcpy>
					break;
 8008a60:	e022      	b.n	8008aa8 <input_uart+0x3cc>
				case 3:
					strcpy(triangle_args.x2,fl_token);
 8008a62:	4b80      	ldr	r3, [pc, #512]	; (8008c64 <input_uart+0x588>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4619      	mov	r1, r3
 8008a68:	4882      	ldr	r0, [pc, #520]	; (8008c74 <input_uart+0x598>)
 8008a6a:	f000 ff83 	bl	8009974 <strcpy>
					break;
 8008a6e:	e01b      	b.n	8008aa8 <input_uart+0x3cc>
				case 4:
					strcpy(triangle_args.y2,fl_token);
 8008a70:	4b7c      	ldr	r3, [pc, #496]	; (8008c64 <input_uart+0x588>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4619      	mov	r1, r3
 8008a76:	4880      	ldr	r0, [pc, #512]	; (8008c78 <input_uart+0x59c>)
 8008a78:	f000 ff7c 	bl	8009974 <strcpy>
					break;
 8008a7c:	e014      	b.n	8008aa8 <input_uart+0x3cc>
				case 5:
					strcpy(triangle_args.xtop,fl_token);
 8008a7e:	4b79      	ldr	r3, [pc, #484]	; (8008c64 <input_uart+0x588>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4619      	mov	r1, r3
 8008a84:	487d      	ldr	r0, [pc, #500]	; (8008c7c <input_uart+0x5a0>)
 8008a86:	f000 ff75 	bl	8009974 <strcpy>
					break;
 8008a8a:	e00d      	b.n	8008aa8 <input_uart+0x3cc>
				case 6:
					strcpy(triangle_args.ytop,fl_token);
 8008a8c:	4b75      	ldr	r3, [pc, #468]	; (8008c64 <input_uart+0x588>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4619      	mov	r1, r3
 8008a92:	487b      	ldr	r0, [pc, #492]	; (8008c80 <input_uart+0x5a4>)
 8008a94:	f000 ff6e 	bl	8009974 <strcpy>
					break;
 8008a98:	e006      	b.n	8008aa8 <input_uart+0x3cc>
				case 7:
					strcpy(triangle_args.color,fl_token);
 8008a9a:	4b72      	ldr	r3, [pc, #456]	; (8008c64 <input_uart+0x588>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	4878      	ldr	r0, [pc, #480]	; (8008c84 <input_uart+0x5a8>)
 8008aa2:	f000 ff67 	bl	8009974 <strcpy>
					break;
 8008aa6:	bf00      	nop
			}
			fill++;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	3301      	adds	r3, #1
 8008aac:	607b      	str	r3, [r7, #4]
			fl_token = strtok (NULL, ",");
 8008aae:	4976      	ldr	r1, [pc, #472]	; (8008c88 <input_uart+0x5ac>)
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	f000 ff67 	bl	8009984 <strtok>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	4b6a      	ldr	r3, [pc, #424]	; (8008c64 <input_uart+0x588>)
 8008aba:	601a      	str	r2, [r3, #0]
		while(fl_token != NULL)
 8008abc:	4b69      	ldr	r3, [pc, #420]	; (8008c64 <input_uart+0x588>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d1a3      	bne.n	8008a0c <input_uart+0x330>
		}
		func_chooser();
 8008ac4:	f000 fbe8 	bl	8009298 <func_chooser>
 8008ac8:	e0c1      	b.n	8008c4e <input_uart+0x572>
	}
	else if(strcmp(functions, "tekst")==0)
 8008aca:	4970      	ldr	r1, [pc, #448]	; (8008c8c <input_uart+0x5b0>)
 8008acc:	4864      	ldr	r0, [pc, #400]	; (8008c60 <input_uart+0x584>)
 8008ace:	f7f7 fb7b 	bl	80001c8 <strcmp>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d147      	bne.n	8008b68 <input_uart+0x48c>
	{
		fill=0;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	607b      	str	r3, [r7, #4]
		while(fl_token != NULL)
 8008adc:	e03d      	b.n	8008b5a <input_uart+0x47e>
		{
			switch(fill)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2b04      	cmp	r3, #4
 8008ae2:	d830      	bhi.n	8008b46 <input_uart+0x46a>
 8008ae4:	a201      	add	r2, pc, #4	; (adr r2, 8008aec <input_uart+0x410>)
 8008ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aea:	bf00      	nop
 8008aec:	08008b01 	.word	0x08008b01
 8008af0:	08008b0f 	.word	0x08008b0f
 8008af4:	08008b1d 	.word	0x08008b1d
 8008af8:	08008b2b 	.word	0x08008b2b
 8008afc:	08008b39 	.word	0x08008b39
			{
				case 0:
					strcpy(text_args.function,fl_token);
 8008b00:	4b58      	ldr	r3, [pc, #352]	; (8008c64 <input_uart+0x588>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	4619      	mov	r1, r3
 8008b06:	4862      	ldr	r0, [pc, #392]	; (8008c90 <input_uart+0x5b4>)
 8008b08:	f000 ff34 	bl	8009974 <strcpy>
					break;
 8008b0c:	e01b      	b.n	8008b46 <input_uart+0x46a>
				case 1:
					strcpy(text_args.x1,fl_token);
 8008b0e:	4b55      	ldr	r3, [pc, #340]	; (8008c64 <input_uart+0x588>)
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	4619      	mov	r1, r3
 8008b14:	485f      	ldr	r0, [pc, #380]	; (8008c94 <input_uart+0x5b8>)
 8008b16:	f000 ff2d 	bl	8009974 <strcpy>
					break;
 8008b1a:	e014      	b.n	8008b46 <input_uart+0x46a>
				case 2:
					strcpy(text_args.y1,fl_token);
 8008b1c:	4b51      	ldr	r3, [pc, #324]	; (8008c64 <input_uart+0x588>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4619      	mov	r1, r3
 8008b22:	485d      	ldr	r0, [pc, #372]	; (8008c98 <input_uart+0x5bc>)
 8008b24:	f000 ff26 	bl	8009974 <strcpy>
					break;
 8008b28:	e00d      	b.n	8008b46 <input_uart+0x46a>
				case 3:
					strcpy(text_args.text_in,fl_token);
 8008b2a:	4b4e      	ldr	r3, [pc, #312]	; (8008c64 <input_uart+0x588>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4619      	mov	r1, r3
 8008b30:	485a      	ldr	r0, [pc, #360]	; (8008c9c <input_uart+0x5c0>)
 8008b32:	f000 ff1f 	bl	8009974 <strcpy>
					break;
 8008b36:	e006      	b.n	8008b46 <input_uart+0x46a>
				case 4:
					strcpy(text_args.color,fl_token);
 8008b38:	4b4a      	ldr	r3, [pc, #296]	; (8008c64 <input_uart+0x588>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4619      	mov	r1, r3
 8008b3e:	4858      	ldr	r0, [pc, #352]	; (8008ca0 <input_uart+0x5c4>)
 8008b40:	f000 ff18 	bl	8009974 <strcpy>
					break;
 8008b44:	bf00      	nop

			}
			fill++;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	3301      	adds	r3, #1
 8008b4a:	607b      	str	r3, [r7, #4]
			fl_token = strtok (NULL, ",");
 8008b4c:	494e      	ldr	r1, [pc, #312]	; (8008c88 <input_uart+0x5ac>)
 8008b4e:	2000      	movs	r0, #0
 8008b50:	f000 ff18 	bl	8009984 <strtok>
 8008b54:	4602      	mov	r2, r0
 8008b56:	4b43      	ldr	r3, [pc, #268]	; (8008c64 <input_uart+0x588>)
 8008b58:	601a      	str	r2, [r3, #0]
		while(fl_token != NULL)
 8008b5a:	4b42      	ldr	r3, [pc, #264]	; (8008c64 <input_uart+0x588>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1bd      	bne.n	8008ade <input_uart+0x402>
		}
		func_chooser();
 8008b62:	f000 fb99 	bl	8009298 <func_chooser>
 8008b66:	e072      	b.n	8008c4e <input_uart+0x572>
	}
	else if(strcmp(functions, "bitmap")==0)
 8008b68:	494e      	ldr	r1, [pc, #312]	; (8008ca4 <input_uart+0x5c8>)
 8008b6a:	483d      	ldr	r0, [pc, #244]	; (8008c60 <input_uart+0x584>)
 8008b6c:	f7f7 fb2c 	bl	80001c8 <strcmp>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d13d      	bne.n	8008bf2 <input_uart+0x516>
	{
		fill=0;
 8008b76:	2300      	movs	r3, #0
 8008b78:	607b      	str	r3, [r7, #4]
		while(fl_token != NULL)
 8008b7a:	e033      	b.n	8008be4 <input_uart+0x508>
		{
			switch(fill)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2b03      	cmp	r3, #3
 8008b80:	d826      	bhi.n	8008bd0 <input_uart+0x4f4>
 8008b82:	a201      	add	r2, pc, #4	; (adr r2, 8008b88 <input_uart+0x4ac>)
 8008b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b88:	08008b99 	.word	0x08008b99
 8008b8c:	08008ba7 	.word	0x08008ba7
 8008b90:	08008bb5 	.word	0x08008bb5
 8008b94:	08008bc3 	.word	0x08008bc3
			{
				case 0:
					strcpy(bitmap_args.function,fl_token);
 8008b98:	4b32      	ldr	r3, [pc, #200]	; (8008c64 <input_uart+0x588>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	4842      	ldr	r0, [pc, #264]	; (8008ca8 <input_uart+0x5cc>)
 8008ba0:	f000 fee8 	bl	8009974 <strcpy>
					break;
 8008ba4:	e014      	b.n	8008bd0 <input_uart+0x4f4>
				case 1:
					strcpy(bitmap_args.bitmap_nr,fl_token);
 8008ba6:	4b2f      	ldr	r3, [pc, #188]	; (8008c64 <input_uart+0x588>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4619      	mov	r1, r3
 8008bac:	483f      	ldr	r0, [pc, #252]	; (8008cac <input_uart+0x5d0>)
 8008bae:	f000 fee1 	bl	8009974 <strcpy>
					break;
 8008bb2:	e00d      	b.n	8008bd0 <input_uart+0x4f4>
				case 2:
					strcpy(bitmap_args.x1,fl_token);
 8008bb4:	4b2b      	ldr	r3, [pc, #172]	; (8008c64 <input_uart+0x588>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	4619      	mov	r1, r3
 8008bba:	483d      	ldr	r0, [pc, #244]	; (8008cb0 <input_uart+0x5d4>)
 8008bbc:	f000 feda 	bl	8009974 <strcpy>
					break;
 8008bc0:	e006      	b.n	8008bd0 <input_uart+0x4f4>
				case 3:
					strcpy(bitmap_args.y1,fl_token);
 8008bc2:	4b28      	ldr	r3, [pc, #160]	; (8008c64 <input_uart+0x588>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	483a      	ldr	r0, [pc, #232]	; (8008cb4 <input_uart+0x5d8>)
 8008bca:	f000 fed3 	bl	8009974 <strcpy>
					break;
 8008bce:	bf00      	nop
			}
			fill++;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	607b      	str	r3, [r7, #4]
			fl_token = strtok (NULL, ",");
 8008bd6:	492c      	ldr	r1, [pc, #176]	; (8008c88 <input_uart+0x5ac>)
 8008bd8:	2000      	movs	r0, #0
 8008bda:	f000 fed3 	bl	8009984 <strtok>
 8008bde:	4602      	mov	r2, r0
 8008be0:	4b20      	ldr	r3, [pc, #128]	; (8008c64 <input_uart+0x588>)
 8008be2:	601a      	str	r2, [r3, #0]
		while(fl_token != NULL)
 8008be4:	4b1f      	ldr	r3, [pc, #124]	; (8008c64 <input_uart+0x588>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d1c7      	bne.n	8008b7c <input_uart+0x4a0>
		}
		func_chooser();
 8008bec:	f000 fb54 	bl	8009298 <func_chooser>
 8008bf0:	e02d      	b.n	8008c4e <input_uart+0x572>
	}
	else if(strcmp(functions, "wacht")==0)
 8008bf2:	4931      	ldr	r1, [pc, #196]	; (8008cb8 <input_uart+0x5dc>)
 8008bf4:	481a      	ldr	r0, [pc, #104]	; (8008c60 <input_uart+0x584>)
 8008bf6:	f7f7 fae7 	bl	80001c8 <strcmp>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d126      	bne.n	8008c4e <input_uart+0x572>
	{
		fill=0;
 8008c00:	2300      	movs	r3, #0
 8008c02:	607b      	str	r3, [r7, #4]
		while(fl_token != NULL)
 8008c04:	e01d      	b.n	8008c42 <input_uart+0x566>
		{
			switch(fill)
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d002      	beq.n	8008c12 <input_uart+0x536>
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	d007      	beq.n	8008c20 <input_uart+0x544>
 8008c10:	e00d      	b.n	8008c2e <input_uart+0x552>
			{
			case 0:
				strcpy(wait_args.function,fl_token);
 8008c12:	4b14      	ldr	r3, [pc, #80]	; (8008c64 <input_uart+0x588>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4619      	mov	r1, r3
 8008c18:	4828      	ldr	r0, [pc, #160]	; (8008cbc <input_uart+0x5e0>)
 8008c1a:	f000 feab 	bl	8009974 <strcpy>
				break;
 8008c1e:	e006      	b.n	8008c2e <input_uart+0x552>
			case 1:
				strcpy(wait_args.time_ms,fl_token);
 8008c20:	4b10      	ldr	r3, [pc, #64]	; (8008c64 <input_uart+0x588>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4619      	mov	r1, r3
 8008c26:	4826      	ldr	r0, [pc, #152]	; (8008cc0 <input_uart+0x5e4>)
 8008c28:	f000 fea4 	bl	8009974 <strcpy>
				break;
 8008c2c:	bf00      	nop
			}
			fill++;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	3301      	adds	r3, #1
 8008c32:	607b      	str	r3, [r7, #4]
			fl_token = strtok (NULL, ",");
 8008c34:	4914      	ldr	r1, [pc, #80]	; (8008c88 <input_uart+0x5ac>)
 8008c36:	2000      	movs	r0, #0
 8008c38:	f000 fea4 	bl	8009984 <strtok>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	4b09      	ldr	r3, [pc, #36]	; (8008c64 <input_uart+0x588>)
 8008c40:	601a      	str	r2, [r3, #0]
		while(fl_token != NULL)
 8008c42:	4b08      	ldr	r3, [pc, #32]	; (8008c64 <input_uart+0x588>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d1dd      	bne.n	8008c06 <input_uart+0x52a>
		}
		func_chooser();
 8008c4a:	f000 fb25 	bl	8009298 <func_chooser>
	}

	error_handling();
 8008c4e:	f000 f839 	bl	8008cc4 <error_handling>

}
 8008c52:	bf00      	nop
 8008c54:	3708      	adds	r7, #8
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	0800a290 	.word	0x0800a290
 8008c60:	20013880 	.word	0x20013880
 8008c64:	20013900 	.word	0x20013900
 8008c68:	200134fc 	.word	0x200134fc
 8008c6c:	20013506 	.word	0x20013506
 8008c70:	2001350b 	.word	0x2001350b
 8008c74:	20013510 	.word	0x20013510
 8008c78:	20013515 	.word	0x20013515
 8008c7c:	2001351a 	.word	0x2001351a
 8008c80:	2001351f 	.word	0x2001351f
 8008c84:	20013579 	.word	0x20013579
 8008c88:	0800a264 	.word	0x0800a264
 8008c8c:	0800a29c 	.word	0x0800a29c
 8008c90:	200136b8 	.word	0x200136b8
 8008c94:	200136c2 	.word	0x200136c2
 8008c98:	200136c7 	.word	0x200136c7
 8008c9c:	200136f9 	.word	0x200136f9
 8008ca0:	20013735 	.word	0x20013735
 8008ca4:	0800a2a4 	.word	0x0800a2a4
 8008ca8:	20013624 	.word	0x20013624
 8008cac:	20013697 	.word	0x20013697
 8008cb0:	2001362e 	.word	0x2001362e
 8008cb4:	20013633 	.word	0x20013633
 8008cb8:	0800a2ac 	.word	0x0800a2ac
 8008cbc:	2001374c 	.word	0x2001374c
 8008cc0:	200137c4 	.word	0x200137c4

08008cc4 <error_handling>:

void error_handling()
{
 8008cc4:	b598      	push	{r3, r4, r7, lr}
 8008cc6:	af00      	add	r7, sp, #0
	// functie controle
	if(strcmp(fl_token,"clearscherm") || strcmp(fl_token,"lijn") || strcmp(fl_token,"ellips") || strcmp(fl_token,"rechthoek") ||
 8008cc8:	4bb3      	ldr	r3, [pc, #716]	; (8008f98 <error_handling+0x2d4>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	49b3      	ldr	r1, [pc, #716]	; (8008f9c <error_handling+0x2d8>)
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f7f7 fa7a 	bl	80001c8 <strcmp>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d141      	bne.n	8008d5e <error_handling+0x9a>
 8008cda:	4baf      	ldr	r3, [pc, #700]	; (8008f98 <error_handling+0x2d4>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	49b0      	ldr	r1, [pc, #704]	; (8008fa0 <error_handling+0x2dc>)
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	f7f7 fa71 	bl	80001c8 <strcmp>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d138      	bne.n	8008d5e <error_handling+0x9a>
 8008cec:	4baa      	ldr	r3, [pc, #680]	; (8008f98 <error_handling+0x2d4>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	49ac      	ldr	r1, [pc, #688]	; (8008fa4 <error_handling+0x2e0>)
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7f7 fa68 	bl	80001c8 <strcmp>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d12f      	bne.n	8008d5e <error_handling+0x9a>
 8008cfe:	4ba6      	ldr	r3, [pc, #664]	; (8008f98 <error_handling+0x2d4>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	49a9      	ldr	r1, [pc, #676]	; (8008fa8 <error_handling+0x2e4>)
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7f7 fa5f 	bl	80001c8 <strcmp>
 8008d0a:	4603      	mov	r3, r0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d126      	bne.n	8008d5e <error_handling+0x9a>
			strcmp(fl_token,"driehoek") || strcmp(fl_token,"tekst") || strcmp(fl_token,"bitmap") || strcmp(fl_token,"wacht"));
 8008d10:	4ba1      	ldr	r3, [pc, #644]	; (8008f98 <error_handling+0x2d4>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	49a5      	ldr	r1, [pc, #660]	; (8008fac <error_handling+0x2e8>)
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7f7 fa56 	bl	80001c8 <strcmp>
 8008d1c:	4603      	mov	r3, r0
	if(strcmp(fl_token,"clearscherm") || strcmp(fl_token,"lijn") || strcmp(fl_token,"ellips") || strcmp(fl_token,"rechthoek") ||
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d11d      	bne.n	8008d5e <error_handling+0x9a>
			strcmp(fl_token,"driehoek") || strcmp(fl_token,"tekst") || strcmp(fl_token,"bitmap") || strcmp(fl_token,"wacht"));
 8008d22:	4b9d      	ldr	r3, [pc, #628]	; (8008f98 <error_handling+0x2d4>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	49a2      	ldr	r1, [pc, #648]	; (8008fb0 <error_handling+0x2ec>)
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7f7 fa4d 	bl	80001c8 <strcmp>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d114      	bne.n	8008d5e <error_handling+0x9a>
 8008d34:	4b98      	ldr	r3, [pc, #608]	; (8008f98 <error_handling+0x2d4>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	499e      	ldr	r1, [pc, #632]	; (8008fb4 <error_handling+0x2f0>)
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7f7 fa44 	bl	80001c8 <strcmp>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d10b      	bne.n	8008d5e <error_handling+0x9a>
 8008d46:	4b94      	ldr	r3, [pc, #592]	; (8008f98 <error_handling+0x2d4>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	499b      	ldr	r1, [pc, #620]	; (8008fb8 <error_handling+0x2f4>)
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7f7 fa3b 	bl	80001c8 <strcmp>
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d102      	bne.n	8008d5e <error_handling+0x9a>
	else
	{
		// Error handling
		UART_puts("ERROR 1: wrong typed function\r");
 8008d58:	4898      	ldr	r0, [pc, #608]	; (8008fbc <error_handling+0x2f8>)
 8008d5a:	f7ff fbfb 	bl	8008554 <UART_puts>
	}



	// out of range checker
	if(atoi(line_args.x1) < 0 || atoi(line_args.x1) > 320) UART_puts("ERROR 2: pixel out of range\r");
 8008d5e:	4898      	ldr	r0, [pc, #608]	; (8008fc0 <error_handling+0x2fc>)
 8008d60:	f000 fde0 	bl	8009924 <atoi>
 8008d64:	4603      	mov	r3, r0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	db06      	blt.n	8008d78 <error_handling+0xb4>
 8008d6a:	4895      	ldr	r0, [pc, #596]	; (8008fc0 <error_handling+0x2fc>)
 8008d6c:	f000 fdda 	bl	8009924 <atoi>
 8008d70:	4603      	mov	r3, r0
 8008d72:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008d76:	dd03      	ble.n	8008d80 <error_handling+0xbc>
 8008d78:	4892      	ldr	r0, [pc, #584]	; (8008fc4 <error_handling+0x300>)
 8008d7a:	f7ff fbeb 	bl	8008554 <UART_puts>
 8008d7e:	e1bf      	b.n	8009100 <error_handling+0x43c>
	else if(atoi(line_args.y1) < 0 || atoi(line_args.y1) > 240) UART_puts("ERROR 2: pixel out of range\r");
 8008d80:	4891      	ldr	r0, [pc, #580]	; (8008fc8 <error_handling+0x304>)
 8008d82:	f000 fdcf 	bl	8009924 <atoi>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	db05      	blt.n	8008d98 <error_handling+0xd4>
 8008d8c:	488e      	ldr	r0, [pc, #568]	; (8008fc8 <error_handling+0x304>)
 8008d8e:	f000 fdc9 	bl	8009924 <atoi>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2bf0      	cmp	r3, #240	; 0xf0
 8008d96:	dd03      	ble.n	8008da0 <error_handling+0xdc>
 8008d98:	488a      	ldr	r0, [pc, #552]	; (8008fc4 <error_handling+0x300>)
 8008d9a:	f7ff fbdb 	bl	8008554 <UART_puts>
 8008d9e:	e1af      	b.n	8009100 <error_handling+0x43c>
	else if(atoi(line_args.x2) < 0 || atoi(line_args.x2) > 320) UART_puts("ERROR 2: pixel out of range\r");
 8008da0:	488a      	ldr	r0, [pc, #552]	; (8008fcc <error_handling+0x308>)
 8008da2:	f000 fdbf 	bl	8009924 <atoi>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	db06      	blt.n	8008dba <error_handling+0xf6>
 8008dac:	4887      	ldr	r0, [pc, #540]	; (8008fcc <error_handling+0x308>)
 8008dae:	f000 fdb9 	bl	8009924 <atoi>
 8008db2:	4603      	mov	r3, r0
 8008db4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008db8:	dd03      	ble.n	8008dc2 <error_handling+0xfe>
 8008dba:	4882      	ldr	r0, [pc, #520]	; (8008fc4 <error_handling+0x300>)
 8008dbc:	f7ff fbca 	bl	8008554 <UART_puts>
 8008dc0:	e19e      	b.n	8009100 <error_handling+0x43c>
	else if(atoi(line_args.y2) < 0 || atoi(line_args.y2) > 240) UART_puts("ERROR 2: pixel out of range\r");
 8008dc2:	4883      	ldr	r0, [pc, #524]	; (8008fd0 <error_handling+0x30c>)
 8008dc4:	f000 fdae 	bl	8009924 <atoi>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	db05      	blt.n	8008dda <error_handling+0x116>
 8008dce:	4880      	ldr	r0, [pc, #512]	; (8008fd0 <error_handling+0x30c>)
 8008dd0:	f000 fda8 	bl	8009924 <atoi>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	2bf0      	cmp	r3, #240	; 0xf0
 8008dd8:	dd03      	ble.n	8008de2 <error_handling+0x11e>
 8008dda:	487a      	ldr	r0, [pc, #488]	; (8008fc4 <error_handling+0x300>)
 8008ddc:	f7ff fbba 	bl	8008554 <UART_puts>
 8008de0:	e18e      	b.n	8009100 <error_handling+0x43c>

	else if(atoi(ellips_args.x_center) < 0 || atoi(ellips_args.x_center) > 320) UART_puts("ERROR 2: pixel out of range\r");
 8008de2:	487c      	ldr	r0, [pc, #496]	; (8008fd4 <error_handling+0x310>)
 8008de4:	f000 fd9e 	bl	8009924 <atoi>
 8008de8:	4603      	mov	r3, r0
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	db06      	blt.n	8008dfc <error_handling+0x138>
 8008dee:	4879      	ldr	r0, [pc, #484]	; (8008fd4 <error_handling+0x310>)
 8008df0:	f000 fd98 	bl	8009924 <atoi>
 8008df4:	4603      	mov	r3, r0
 8008df6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008dfa:	dd03      	ble.n	8008e04 <error_handling+0x140>
 8008dfc:	4871      	ldr	r0, [pc, #452]	; (8008fc4 <error_handling+0x300>)
 8008dfe:	f7ff fba9 	bl	8008554 <UART_puts>
 8008e02:	e17d      	b.n	8009100 <error_handling+0x43c>
	else if(atoi(ellips_args.y_center) < 0 || atoi(ellips_args.y_center) > 240) UART_puts("ERROR 2: pixel out of range\r");
 8008e04:	4874      	ldr	r0, [pc, #464]	; (8008fd8 <error_handling+0x314>)
 8008e06:	f000 fd8d 	bl	8009924 <atoi>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	db05      	blt.n	8008e1c <error_handling+0x158>
 8008e10:	4871      	ldr	r0, [pc, #452]	; (8008fd8 <error_handling+0x314>)
 8008e12:	f000 fd87 	bl	8009924 <atoi>
 8008e16:	4603      	mov	r3, r0
 8008e18:	2bf0      	cmp	r3, #240	; 0xf0
 8008e1a:	dd03      	ble.n	8008e24 <error_handling+0x160>
 8008e1c:	4869      	ldr	r0, [pc, #420]	; (8008fc4 <error_handling+0x300>)
 8008e1e:	f7ff fb99 	bl	8008554 <UART_puts>
 8008e22:	e16d      	b.n	8009100 <error_handling+0x43c>
	else if((atoi(ellips_args.x_center) - atoi(ellips_args.x_rad)) < 0 || (atoi(ellips_args.x_center) + atoi(ellips_args.x_rad)) > 320) UART_puts("ERROR 2: pixel out of range\r");
 8008e24:	486b      	ldr	r0, [pc, #428]	; (8008fd4 <error_handling+0x310>)
 8008e26:	f000 fd7d 	bl	8009924 <atoi>
 8008e2a:	4604      	mov	r4, r0
 8008e2c:	486b      	ldr	r0, [pc, #428]	; (8008fdc <error_handling+0x318>)
 8008e2e:	f000 fd79 	bl	8009924 <atoi>
 8008e32:	4603      	mov	r3, r0
 8008e34:	1ae3      	subs	r3, r4, r3
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	db0b      	blt.n	8008e52 <error_handling+0x18e>
 8008e3a:	4866      	ldr	r0, [pc, #408]	; (8008fd4 <error_handling+0x310>)
 8008e3c:	f000 fd72 	bl	8009924 <atoi>
 8008e40:	4604      	mov	r4, r0
 8008e42:	4866      	ldr	r0, [pc, #408]	; (8008fdc <error_handling+0x318>)
 8008e44:	f000 fd6e 	bl	8009924 <atoi>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	4423      	add	r3, r4
 8008e4c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008e50:	dd03      	ble.n	8008e5a <error_handling+0x196>
 8008e52:	485c      	ldr	r0, [pc, #368]	; (8008fc4 <error_handling+0x300>)
 8008e54:	f7ff fb7e 	bl	8008554 <UART_puts>
 8008e58:	e152      	b.n	8009100 <error_handling+0x43c>
	else if((atoi(ellips_args.y_center) - atoi(ellips_args.y_rad)) < 0 || (atoi(ellips_args.y_center) + atoi(ellips_args.y_rad)) > 240) UART_puts("ERROR 2: pixel out of range\r");
 8008e5a:	485f      	ldr	r0, [pc, #380]	; (8008fd8 <error_handling+0x314>)
 8008e5c:	f000 fd62 	bl	8009924 <atoi>
 8008e60:	4604      	mov	r4, r0
 8008e62:	485f      	ldr	r0, [pc, #380]	; (8008fe0 <error_handling+0x31c>)
 8008e64:	f000 fd5e 	bl	8009924 <atoi>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	1ae3      	subs	r3, r4, r3
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	db0a      	blt.n	8008e86 <error_handling+0x1c2>
 8008e70:	4859      	ldr	r0, [pc, #356]	; (8008fd8 <error_handling+0x314>)
 8008e72:	f000 fd57 	bl	8009924 <atoi>
 8008e76:	4604      	mov	r4, r0
 8008e78:	4859      	ldr	r0, [pc, #356]	; (8008fe0 <error_handling+0x31c>)
 8008e7a:	f000 fd53 	bl	8009924 <atoi>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	4423      	add	r3, r4
 8008e82:	2bf0      	cmp	r3, #240	; 0xf0
 8008e84:	dd03      	ble.n	8008e8e <error_handling+0x1ca>
 8008e86:	484f      	ldr	r0, [pc, #316]	; (8008fc4 <error_handling+0x300>)
 8008e88:	f7ff fb64 	bl	8008554 <UART_puts>
 8008e8c:	e138      	b.n	8009100 <error_handling+0x43c>

	else if(atoi(rectangle_args.x1) < 0 || atoi(rectangle_args.x1) > 320) UART_puts("ERROR 2: pixel out of range\r");
 8008e8e:	4855      	ldr	r0, [pc, #340]	; (8008fe4 <error_handling+0x320>)
 8008e90:	f000 fd48 	bl	8009924 <atoi>
 8008e94:	4603      	mov	r3, r0
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	db06      	blt.n	8008ea8 <error_handling+0x1e4>
 8008e9a:	4852      	ldr	r0, [pc, #328]	; (8008fe4 <error_handling+0x320>)
 8008e9c:	f000 fd42 	bl	8009924 <atoi>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008ea6:	dd03      	ble.n	8008eb0 <error_handling+0x1ec>
 8008ea8:	4846      	ldr	r0, [pc, #280]	; (8008fc4 <error_handling+0x300>)
 8008eaa:	f7ff fb53 	bl	8008554 <UART_puts>
 8008eae:	e127      	b.n	8009100 <error_handling+0x43c>
	else if(atoi(rectangle_args.y1) < 0 || atoi(rectangle_args.y1) > 240) UART_puts("ERROR 2: pixel out of range\r");
 8008eb0:	484d      	ldr	r0, [pc, #308]	; (8008fe8 <error_handling+0x324>)
 8008eb2:	f000 fd37 	bl	8009924 <atoi>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	db05      	blt.n	8008ec8 <error_handling+0x204>
 8008ebc:	484a      	ldr	r0, [pc, #296]	; (8008fe8 <error_handling+0x324>)
 8008ebe:	f000 fd31 	bl	8009924 <atoi>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2bf0      	cmp	r3, #240	; 0xf0
 8008ec6:	dd03      	ble.n	8008ed0 <error_handling+0x20c>
 8008ec8:	483e      	ldr	r0, [pc, #248]	; (8008fc4 <error_handling+0x300>)
 8008eca:	f7ff fb43 	bl	8008554 <UART_puts>
 8008ece:	e117      	b.n	8009100 <error_handling+0x43c>
	else if(atoi(rectangle_args.x2) < 0 || atoi(rectangle_args.x2) > 320) UART_puts("ERROR 2: pixel out of range\r");
 8008ed0:	4846      	ldr	r0, [pc, #280]	; (8008fec <error_handling+0x328>)
 8008ed2:	f000 fd27 	bl	8009924 <atoi>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	db06      	blt.n	8008eea <error_handling+0x226>
 8008edc:	4843      	ldr	r0, [pc, #268]	; (8008fec <error_handling+0x328>)
 8008ede:	f000 fd21 	bl	8009924 <atoi>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008ee8:	dd03      	ble.n	8008ef2 <error_handling+0x22e>
 8008eea:	4836      	ldr	r0, [pc, #216]	; (8008fc4 <error_handling+0x300>)
 8008eec:	f7ff fb32 	bl	8008554 <UART_puts>
 8008ef0:	e106      	b.n	8009100 <error_handling+0x43c>
	else if(atoi(rectangle_args.y2) < 0 || atoi(rectangle_args.y2) > 240) UART_puts("ERROR 2: pixel out of range\r");
 8008ef2:	483f      	ldr	r0, [pc, #252]	; (8008ff0 <error_handling+0x32c>)
 8008ef4:	f000 fd16 	bl	8009924 <atoi>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	db05      	blt.n	8008f0a <error_handling+0x246>
 8008efe:	483c      	ldr	r0, [pc, #240]	; (8008ff0 <error_handling+0x32c>)
 8008f00:	f000 fd10 	bl	8009924 <atoi>
 8008f04:	4603      	mov	r3, r0
 8008f06:	2bf0      	cmp	r3, #240	; 0xf0
 8008f08:	dd03      	ble.n	8008f12 <error_handling+0x24e>
 8008f0a:	482e      	ldr	r0, [pc, #184]	; (8008fc4 <error_handling+0x300>)
 8008f0c:	f7ff fb22 	bl	8008554 <UART_puts>
 8008f10:	e0f6      	b.n	8009100 <error_handling+0x43c>

	else if(atoi(triangle_args.x1) < 0 || atoi(triangle_args.x1) > 320) UART_puts("ERROR 2: pixel out of range\r");
 8008f12:	4838      	ldr	r0, [pc, #224]	; (8008ff4 <error_handling+0x330>)
 8008f14:	f000 fd06 	bl	8009924 <atoi>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	db06      	blt.n	8008f2c <error_handling+0x268>
 8008f1e:	4835      	ldr	r0, [pc, #212]	; (8008ff4 <error_handling+0x330>)
 8008f20:	f000 fd00 	bl	8009924 <atoi>
 8008f24:	4603      	mov	r3, r0
 8008f26:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008f2a:	dd03      	ble.n	8008f34 <error_handling+0x270>
 8008f2c:	4825      	ldr	r0, [pc, #148]	; (8008fc4 <error_handling+0x300>)
 8008f2e:	f7ff fb11 	bl	8008554 <UART_puts>
 8008f32:	e0e5      	b.n	8009100 <error_handling+0x43c>
	else if(atoi(triangle_args.y1) < 0 || atoi(triangle_args.y1) > 240) UART_puts("ERROR 2: pixel out of range\r");
 8008f34:	4830      	ldr	r0, [pc, #192]	; (8008ff8 <error_handling+0x334>)
 8008f36:	f000 fcf5 	bl	8009924 <atoi>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	db05      	blt.n	8008f4c <error_handling+0x288>
 8008f40:	482d      	ldr	r0, [pc, #180]	; (8008ff8 <error_handling+0x334>)
 8008f42:	f000 fcef 	bl	8009924 <atoi>
 8008f46:	4603      	mov	r3, r0
 8008f48:	2bf0      	cmp	r3, #240	; 0xf0
 8008f4a:	dd03      	ble.n	8008f54 <error_handling+0x290>
 8008f4c:	481d      	ldr	r0, [pc, #116]	; (8008fc4 <error_handling+0x300>)
 8008f4e:	f7ff fb01 	bl	8008554 <UART_puts>
 8008f52:	e0d5      	b.n	8009100 <error_handling+0x43c>
	else if(atoi(triangle_args.x2) < 0 || atoi(triangle_args.x2) > 320) UART_puts("ERROR 2: pixel out of range\r");
 8008f54:	4829      	ldr	r0, [pc, #164]	; (8008ffc <error_handling+0x338>)
 8008f56:	f000 fce5 	bl	8009924 <atoi>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	db06      	blt.n	8008f6e <error_handling+0x2aa>
 8008f60:	4826      	ldr	r0, [pc, #152]	; (8008ffc <error_handling+0x338>)
 8008f62:	f000 fcdf 	bl	8009924 <atoi>
 8008f66:	4603      	mov	r3, r0
 8008f68:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008f6c:	dd03      	ble.n	8008f76 <error_handling+0x2b2>
 8008f6e:	4815      	ldr	r0, [pc, #84]	; (8008fc4 <error_handling+0x300>)
 8008f70:	f7ff faf0 	bl	8008554 <UART_puts>
 8008f74:	e0c4      	b.n	8009100 <error_handling+0x43c>
	else if(atoi(triangle_args.y2) < 0 || atoi(triangle_args.y2) > 240) UART_puts("ERROR 2: pixel out of range\r");
 8008f76:	4822      	ldr	r0, [pc, #136]	; (8009000 <error_handling+0x33c>)
 8008f78:	f000 fcd4 	bl	8009924 <atoi>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	db05      	blt.n	8008f8e <error_handling+0x2ca>
 8008f82:	481f      	ldr	r0, [pc, #124]	; (8009000 <error_handling+0x33c>)
 8008f84:	f000 fcce 	bl	8009924 <atoi>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2bf0      	cmp	r3, #240	; 0xf0
 8008f8c:	dd3a      	ble.n	8009004 <error_handling+0x340>
 8008f8e:	480d      	ldr	r0, [pc, #52]	; (8008fc4 <error_handling+0x300>)
 8008f90:	f7ff fae0 	bl	8008554 <UART_puts>
 8008f94:	e0b4      	b.n	8009100 <error_handling+0x43c>
 8008f96:	bf00      	nop
 8008f98:	20013900 	.word	0x20013900
 8008f9c:	0800a268 	.word	0x0800a268
 8008fa0:	0800a274 	.word	0x0800a274
 8008fa4:	0800a27c 	.word	0x0800a27c
 8008fa8:	0800a284 	.word	0x0800a284
 8008fac:	0800a290 	.word	0x0800a290
 8008fb0:	0800a29c 	.word	0x0800a29c
 8008fb4:	0800a2a4 	.word	0x0800a2a4
 8008fb8:	0800a2ac 	.word	0x0800a2ac
 8008fbc:	0800a2b4 	.word	0x0800a2b4
 8008fc0:	2001359a 	.word	0x2001359a
 8008fc4:	0800a2d4 	.word	0x0800a2d4
 8008fc8:	2001359f 	.word	0x2001359f
 8008fcc:	200135a4 	.word	0x200135a4
 8008fd0:	200135a9 	.word	0x200135a9
 8008fd4:	20013808 	.word	0x20013808
 8008fd8:	2001380d 	.word	0x2001380d
 8008fdc:	20013812 	.word	0x20013812
 8008fe0:	20013817 	.word	0x20013817
 8008fe4:	20013472 	.word	0x20013472
 8008fe8:	20013477 	.word	0x20013477
 8008fec:	2001347c 	.word	0x2001347c
 8008ff0:	20013481 	.word	0x20013481
 8008ff4:	20013506 	.word	0x20013506
 8008ff8:	2001350b 	.word	0x2001350b
 8008ffc:	20013510 	.word	0x20013510
 8009000:	20013515 	.word	0x20013515
	else if(atoi(triangle_args.xtop) < 0 || atoi(triangle_args.xtop) > 320) UART_puts("ERROR 2: pixel out of range\r");
 8009004:	483f      	ldr	r0, [pc, #252]	; (8009104 <error_handling+0x440>)
 8009006:	f000 fc8d 	bl	8009924 <atoi>
 800900a:	4603      	mov	r3, r0
 800900c:	2b00      	cmp	r3, #0
 800900e:	db06      	blt.n	800901e <error_handling+0x35a>
 8009010:	483c      	ldr	r0, [pc, #240]	; (8009104 <error_handling+0x440>)
 8009012:	f000 fc87 	bl	8009924 <atoi>
 8009016:	4603      	mov	r3, r0
 8009018:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800901c:	dd03      	ble.n	8009026 <error_handling+0x362>
 800901e:	483a      	ldr	r0, [pc, #232]	; (8009108 <error_handling+0x444>)
 8009020:	f7ff fa98 	bl	8008554 <UART_puts>
 8009024:	e06c      	b.n	8009100 <error_handling+0x43c>
	else if(atoi(triangle_args.ytop) < 0 || atoi(triangle_args.ytop) > 240) UART_puts("ERROR 2: pixel out of range\r");
 8009026:	4839      	ldr	r0, [pc, #228]	; (800910c <error_handling+0x448>)
 8009028:	f000 fc7c 	bl	8009924 <atoi>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	db05      	blt.n	800903e <error_handling+0x37a>
 8009032:	4836      	ldr	r0, [pc, #216]	; (800910c <error_handling+0x448>)
 8009034:	f000 fc76 	bl	8009924 <atoi>
 8009038:	4603      	mov	r3, r0
 800903a:	2bf0      	cmp	r3, #240	; 0xf0
 800903c:	dd03      	ble.n	8009046 <error_handling+0x382>
 800903e:	4832      	ldr	r0, [pc, #200]	; (8009108 <error_handling+0x444>)
 8009040:	f7ff fa88 	bl	8008554 <UART_puts>
 8009044:	e05c      	b.n	8009100 <error_handling+0x43c>

	else if(atoi(text_args.x1) < 0 || atoi(text_args.x1) > 320) UART_puts("ERROR 2: pixel out of range\r");
 8009046:	4832      	ldr	r0, [pc, #200]	; (8009110 <error_handling+0x44c>)
 8009048:	f000 fc6c 	bl	8009924 <atoi>
 800904c:	4603      	mov	r3, r0
 800904e:	2b00      	cmp	r3, #0
 8009050:	db06      	blt.n	8009060 <error_handling+0x39c>
 8009052:	482f      	ldr	r0, [pc, #188]	; (8009110 <error_handling+0x44c>)
 8009054:	f000 fc66 	bl	8009924 <atoi>
 8009058:	4603      	mov	r3, r0
 800905a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800905e:	dd03      	ble.n	8009068 <error_handling+0x3a4>
 8009060:	4829      	ldr	r0, [pc, #164]	; (8009108 <error_handling+0x444>)
 8009062:	f7ff fa77 	bl	8008554 <UART_puts>
 8009066:	e04b      	b.n	8009100 <error_handling+0x43c>
	else if(atoi(text_args.y2) < 0 || atoi(text_args.y2) > 240) UART_puts("ERROR 2: pixel out of range\r");
 8009068:	482a      	ldr	r0, [pc, #168]	; (8009114 <error_handling+0x450>)
 800906a:	f000 fc5b 	bl	8009924 <atoi>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	db05      	blt.n	8009080 <error_handling+0x3bc>
 8009074:	4827      	ldr	r0, [pc, #156]	; (8009114 <error_handling+0x450>)
 8009076:	f000 fc55 	bl	8009924 <atoi>
 800907a:	4603      	mov	r3, r0
 800907c:	2bf0      	cmp	r3, #240	; 0xf0
 800907e:	dd03      	ble.n	8009088 <error_handling+0x3c4>
 8009080:	4821      	ldr	r0, [pc, #132]	; (8009108 <error_handling+0x444>)
 8009082:	f7ff fa67 	bl	8008554 <UART_puts>
 8009086:	e03b      	b.n	8009100 <error_handling+0x43c>

	else if(atoi(bitmap_args.x1) < 0 || atoi(bitmap_args.x1) > 320) UART_puts("ERROR 2: pixel out of range\r");
 8009088:	4823      	ldr	r0, [pc, #140]	; (8009118 <error_handling+0x454>)
 800908a:	f000 fc4b 	bl	8009924 <atoi>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	db06      	blt.n	80090a2 <error_handling+0x3de>
 8009094:	4820      	ldr	r0, [pc, #128]	; (8009118 <error_handling+0x454>)
 8009096:	f000 fc45 	bl	8009924 <atoi>
 800909a:	4603      	mov	r3, r0
 800909c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80090a0:	dd03      	ble.n	80090aa <error_handling+0x3e6>
 80090a2:	4819      	ldr	r0, [pc, #100]	; (8009108 <error_handling+0x444>)
 80090a4:	f7ff fa56 	bl	8008554 <UART_puts>
 80090a8:	e02a      	b.n	8009100 <error_handling+0x43c>
	else if(atoi(bitmap_args.y1) < 0 || atoi(bitmap_args.y1) > 240) UART_puts("ERROR 2: pixel out of range\r");
 80090aa:	481c      	ldr	r0, [pc, #112]	; (800911c <error_handling+0x458>)
 80090ac:	f000 fc3a 	bl	8009924 <atoi>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	db05      	blt.n	80090c2 <error_handling+0x3fe>
 80090b6:	4819      	ldr	r0, [pc, #100]	; (800911c <error_handling+0x458>)
 80090b8:	f000 fc34 	bl	8009924 <atoi>
 80090bc:	4603      	mov	r3, r0
 80090be:	2bf0      	cmp	r3, #240	; 0xf0
 80090c0:	dd03      	ble.n	80090ca <error_handling+0x406>
 80090c2:	4811      	ldr	r0, [pc, #68]	; (8009108 <error_handling+0x444>)
 80090c4:	f7ff fa46 	bl	8008554 <UART_puts>
 80090c8:	e01a      	b.n	8009100 <error_handling+0x43c>
	else if(atoi(bitmap_args.x1)+40 > 320) UART_puts("ERROR 2: pixel out of range\r");
 80090ca:	4813      	ldr	r0, [pc, #76]	; (8009118 <error_handling+0x454>)
 80090cc:	f000 fc2a 	bl	8009924 <atoi>
 80090d0:	4603      	mov	r3, r0
 80090d2:	3328      	adds	r3, #40	; 0x28
 80090d4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80090d8:	dd03      	ble.n	80090e2 <error_handling+0x41e>
 80090da:	480b      	ldr	r0, [pc, #44]	; (8009108 <error_handling+0x444>)
 80090dc:	f7ff fa3a 	bl	8008554 <UART_puts>
	else if(atoi(bitmap_args.y1)+40 > 240) UART_puts("ERROR 2: pixel out of range\r");
	else UART_puts("error handling failed\r");
}
 80090e0:	e00e      	b.n	8009100 <error_handling+0x43c>
	else if(atoi(bitmap_args.y1)+40 > 240) UART_puts("ERROR 2: pixel out of range\r");
 80090e2:	480e      	ldr	r0, [pc, #56]	; (800911c <error_handling+0x458>)
 80090e4:	f000 fc1e 	bl	8009924 <atoi>
 80090e8:	4603      	mov	r3, r0
 80090ea:	3328      	adds	r3, #40	; 0x28
 80090ec:	2bf0      	cmp	r3, #240	; 0xf0
 80090ee:	dd03      	ble.n	80090f8 <error_handling+0x434>
 80090f0:	4805      	ldr	r0, [pc, #20]	; (8009108 <error_handling+0x444>)
 80090f2:	f7ff fa2f 	bl	8008554 <UART_puts>
}
 80090f6:	e003      	b.n	8009100 <error_handling+0x43c>
	else UART_puts("error handling failed\r");
 80090f8:	4809      	ldr	r0, [pc, #36]	; (8009120 <error_handling+0x45c>)
 80090fa:	f7ff fa2b 	bl	8008554 <UART_puts>
}
 80090fe:	e7ff      	b.n	8009100 <error_handling+0x43c>
 8009100:	bf00      	nop
 8009102:	bd98      	pop	{r3, r4, r7, pc}
 8009104:	2001351a 	.word	0x2001351a
 8009108:	0800a2d4 	.word	0x0800a2d4
 800910c:	2001351f 	.word	0x2001351f
 8009110:	200136c2 	.word	0x200136c2
 8009114:	200136d1 	.word	0x200136d1
 8009118:	2001362e 	.word	0x2001362e
 800911c:	20013633 	.word	0x20013633
 8009120:	0800a2f4 	.word	0x0800a2f4

08009124 <color>:
#include "logic_layer.h"



int color(char *color_input)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b082      	sub	sp, #8
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
	if(strcmp(color_input, "zwart")==0) return zwart;
 800912c:	494a      	ldr	r1, [pc, #296]	; (8009258 <color+0x134>)
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f7f7 f84a 	bl	80001c8 <strcmp>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d101      	bne.n	800913e <color+0x1a>
 800913a:	2300      	movs	r3, #0
 800913c:	e087      	b.n	800924e <color+0x12a>
	else if(strcmp(color_input, "blauw")==0) return blauw;
 800913e:	4947      	ldr	r1, [pc, #284]	; (800925c <color+0x138>)
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f7f7 f841 	bl	80001c8 <strcmp>
 8009146:	4603      	mov	r3, r0
 8009148:	2b00      	cmp	r3, #0
 800914a:	d101      	bne.n	8009150 <color+0x2c>
 800914c:	2303      	movs	r3, #3
 800914e:	e07e      	b.n	800924e <color+0x12a>
	else if(strcmp(color_input, "lichtblauw")==0) return lichtblauw;
 8009150:	4943      	ldr	r1, [pc, #268]	; (8009260 <color+0x13c>)
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f7f7 f838 	bl	80001c8 <strcmp>
 8009158:	4603      	mov	r3, r0
 800915a:	2b00      	cmp	r3, #0
 800915c:	d101      	bne.n	8009162 <color+0x3e>
 800915e:	2373      	movs	r3, #115	; 0x73
 8009160:	e075      	b.n	800924e <color+0x12a>
	else if(strcmp(color_input, "groen")==0) return groen;
 8009162:	4940      	ldr	r1, [pc, #256]	; (8009264 <color+0x140>)
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f7f7 f82f 	bl	80001c8 <strcmp>
 800916a:	4603      	mov	r3, r0
 800916c:	2b00      	cmp	r3, #0
 800916e:	d101      	bne.n	8009174 <color+0x50>
 8009170:	231c      	movs	r3, #28
 8009172:	e06c      	b.n	800924e <color+0x12a>
	else if(strcmp(color_input, "lichtgroen")==0) return lichtgroen;
 8009174:	493c      	ldr	r1, [pc, #240]	; (8009268 <color+0x144>)
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f7f7 f826 	bl	80001c8 <strcmp>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d101      	bne.n	8009186 <color+0x62>
 8009182:	235c      	movs	r3, #92	; 0x5c
 8009184:	e063      	b.n	800924e <color+0x12a>
	else if(strcmp(color_input, "rood")==0) return rood;
 8009186:	4939      	ldr	r1, [pc, #228]	; (800926c <color+0x148>)
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f7f7 f81d 	bl	80001c8 <strcmp>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d101      	bne.n	8009198 <color+0x74>
 8009194:	23e0      	movs	r3, #224	; 0xe0
 8009196:	e05a      	b.n	800924e <color+0x12a>
	else if(strcmp(color_input, "lichtrood")==0) return lichtrood;
 8009198:	4935      	ldr	r1, [pc, #212]	; (8009270 <color+0x14c>)
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f7f7 f814 	bl	80001c8 <strcmp>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d101      	bne.n	80091aa <color+0x86>
 80091a6:	23e9      	movs	r3, #233	; 0xe9
 80091a8:	e051      	b.n	800924e <color+0x12a>
	else if(strcmp(color_input, "wit")==0) return wit;
 80091aa:	4932      	ldr	r1, [pc, #200]	; (8009274 <color+0x150>)
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f7f7 f80b 	bl	80001c8 <strcmp>
 80091b2:	4603      	mov	r3, r0
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d101      	bne.n	80091bc <color+0x98>
 80091b8:	23ff      	movs	r3, #255	; 0xff
 80091ba:	e048      	b.n	800924e <color+0x12a>
	else if(strcmp(color_input, "cyaan")==0) return cyaan;
 80091bc:	492e      	ldr	r1, [pc, #184]	; (8009278 <color+0x154>)
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f7f7 f802 	bl	80001c8 <strcmp>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d101      	bne.n	80091ce <color+0xaa>
 80091ca:	231f      	movs	r3, #31
 80091cc:	e03f      	b.n	800924e <color+0x12a>
	else if(strcmp(color_input, "lichtcyaan")==0) return lichtcyaan;
 80091ce:	492b      	ldr	r1, [pc, #172]	; (800927c <color+0x158>)
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f7f6 fff9 	bl	80001c8 <strcmp>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d101      	bne.n	80091e0 <color+0xbc>
 80091dc:	237f      	movs	r3, #127	; 0x7f
 80091de:	e036      	b.n	800924e <color+0x12a>
	else if(strcmp(color_input, "magenta")==0) return magenta;
 80091e0:	4927      	ldr	r1, [pc, #156]	; (8009280 <color+0x15c>)
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f7f6 fff0 	bl	80001c8 <strcmp>
 80091e8:	4603      	mov	r3, r0
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d101      	bne.n	80091f2 <color+0xce>
 80091ee:	23e3      	movs	r3, #227	; 0xe3
 80091f0:	e02d      	b.n	800924e <color+0x12a>
	else if(strcmp(color_input, "lichtmagenta")==0) return lichtmagenta;
 80091f2:	4924      	ldr	r1, [pc, #144]	; (8009284 <color+0x160>)
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f7f6 ffe7 	bl	80001c8 <strcmp>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d101      	bne.n	8009204 <color+0xe0>
 8009200:	23e2      	movs	r3, #226	; 0xe2
 8009202:	e024      	b.n	800924e <color+0x12a>
	else if(strcmp(color_input, "geel")==0) return geel;
 8009204:	4920      	ldr	r1, [pc, #128]	; (8009288 <color+0x164>)
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f7f6 ffde 	bl	80001c8 <strcmp>
 800920c:	4603      	mov	r3, r0
 800920e:	2b00      	cmp	r3, #0
 8009210:	d101      	bne.n	8009216 <color+0xf2>
 8009212:	23fc      	movs	r3, #252	; 0xfc
 8009214:	e01b      	b.n	800924e <color+0x12a>
	else if(strcmp(color_input, "bruin")==0) return bruin;
 8009216:	491d      	ldr	r1, [pc, #116]	; (800928c <color+0x168>)
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f7f6 ffd5 	bl	80001c8 <strcmp>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d101      	bne.n	8009228 <color+0x104>
 8009224:	2388      	movs	r3, #136	; 0x88
 8009226:	e012      	b.n	800924e <color+0x12a>
	else if(strcmp(color_input, "grijs")==0) return grijs;
 8009228:	4919      	ldr	r1, [pc, #100]	; (8009290 <color+0x16c>)
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f7f6 ffcc 	bl	80001c8 <strcmp>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d101      	bne.n	800923a <color+0x116>
 8009236:	23e6      	movs	r3, #230	; 0xe6
 8009238:	e009      	b.n	800924e <color+0x12a>
	else if(strcmp(color_input, "paars")==0) return paars;
 800923a:	4916      	ldr	r1, [pc, #88]	; (8009294 <color+0x170>)
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f7f6 ffc3 	bl	80001c8 <strcmp>
 8009242:	4603      	mov	r3, r0
 8009244:	2b00      	cmp	r3, #0
 8009246:	d101      	bne.n	800924c <color+0x128>
 8009248:	2350      	movs	r3, #80	; 0x50
 800924a:	e000      	b.n	800924e <color+0x12a>
	else return paars;
 800924c:	2350      	movs	r3, #80	; 0x50
};
 800924e:	4618      	mov	r0, r3
 8009250:	3708      	adds	r7, #8
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}
 8009256:	bf00      	nop
 8009258:	0800a30c 	.word	0x0800a30c
 800925c:	0800a314 	.word	0x0800a314
 8009260:	0800a31c 	.word	0x0800a31c
 8009264:	0800a328 	.word	0x0800a328
 8009268:	0800a330 	.word	0x0800a330
 800926c:	0800a33c 	.word	0x0800a33c
 8009270:	0800a344 	.word	0x0800a344
 8009274:	0800a350 	.word	0x0800a350
 8009278:	0800a354 	.word	0x0800a354
 800927c:	0800a35c 	.word	0x0800a35c
 8009280:	0800a368 	.word	0x0800a368
 8009284:	0800a370 	.word	0x0800a370
 8009288:	0800a380 	.word	0x0800a380
 800928c:	0800a388 	.word	0x0800a388
 8009290:	0800a390 	.word	0x0800a390
 8009294:	0800a398 	.word	0x0800a398

08009298 <func_chooser>:


void func_chooser()
{
 8009298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800929c:	b08c      	sub	sp, #48	; 0x30
 800929e:	af04      	add	r7, sp, #16
	if(!strcmp(clearscrn_args.function,"clearscherm"))
 80092a0:	49aa      	ldr	r1, [pc, #680]	; (800954c <func_chooser+0x2b4>)
 80092a2:	48ab      	ldr	r0, [pc, #684]	; (8009550 <func_chooser+0x2b8>)
 80092a4:	f7f6 ff90 	bl	80001c8 <strcmp>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d11f      	bne.n	80092ee <func_chooser+0x56>
	{
		UART_puts("function = "); UART_puts(clearscrn_args.function); UART_puts("\r");
 80092ae:	48a9      	ldr	r0, [pc, #676]	; (8009554 <func_chooser+0x2bc>)
 80092b0:	f7ff f950 	bl	8008554 <UART_puts>
 80092b4:	48a6      	ldr	r0, [pc, #664]	; (8009550 <func_chooser+0x2b8>)
 80092b6:	f7ff f94d 	bl	8008554 <UART_puts>
 80092ba:	48a7      	ldr	r0, [pc, #668]	; (8009558 <func_chooser+0x2c0>)
 80092bc:	f7ff f94a 	bl	8008554 <UART_puts>
		clr_screen(color(clearscrn_args.color));
 80092c0:	48a6      	ldr	r0, [pc, #664]	; (800955c <func_chooser+0x2c4>)
 80092c2:	f7ff ff2f 	bl	8009124 <color>
 80092c6:	4603      	mov	r3, r0
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7f7 fb78 	bl	80009c0 <clr_screen>

		for(int i=0;i<sizeof(clearscrn_args.function);i++)
 80092d0:	2300      	movs	r3, #0
 80092d2:	61fb      	str	r3, [r7, #28]
 80092d4:	e007      	b.n	80092e6 <func_chooser+0x4e>
			clearscrn_args.function[i] = 0;
 80092d6:	4a9e      	ldr	r2, [pc, #632]	; (8009550 <func_chooser+0x2b8>)
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	4413      	add	r3, r2
 80092dc:	2200      	movs	r2, #0
 80092de:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<sizeof(clearscrn_args.function);i++)
 80092e0:	69fb      	ldr	r3, [r7, #28]
 80092e2:	3301      	adds	r3, #1
 80092e4:	61fb      	str	r3, [r7, #28]
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	2b09      	cmp	r3, #9
 80092ea:	d9f4      	bls.n	80092d6 <func_chooser+0x3e>
	else
	{
		// Error handling
		UART_puts("error handling");
	}
}
 80092ec:	e1df      	b.n	80096ae <func_chooser+0x416>
	else if(!strcmp(line_args.function,"lijn"))
 80092ee:	499c      	ldr	r1, [pc, #624]	; (8009560 <func_chooser+0x2c8>)
 80092f0:	489c      	ldr	r0, [pc, #624]	; (8009564 <func_chooser+0x2cc>)
 80092f2:	f7f6 ff69 	bl	80001c8 <strcmp>
 80092f6:	4603      	mov	r3, r0
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d137      	bne.n	800936c <func_chooser+0xd4>
		UART_puts("function = "); UART_puts(line_args.function); UART_puts("\r");
 80092fc:	4895      	ldr	r0, [pc, #596]	; (8009554 <func_chooser+0x2bc>)
 80092fe:	f7ff f929 	bl	8008554 <UART_puts>
 8009302:	4898      	ldr	r0, [pc, #608]	; (8009564 <func_chooser+0x2cc>)
 8009304:	f7ff f926 	bl	8008554 <UART_puts>
 8009308:	4893      	ldr	r0, [pc, #588]	; (8009558 <func_chooser+0x2c0>)
 800930a:	f7ff f923 	bl	8008554 <UART_puts>
		draw_line(atoi(line_args.x1),atoi(line_args.y1),atoi(line_args.x2),atoi(line_args.y2),atoi(line_args.thickness),color(line_args.color));
 800930e:	4896      	ldr	r0, [pc, #600]	; (8009568 <func_chooser+0x2d0>)
 8009310:	f000 fb08 	bl	8009924 <atoi>
 8009314:	4605      	mov	r5, r0
 8009316:	4895      	ldr	r0, [pc, #596]	; (800956c <func_chooser+0x2d4>)
 8009318:	f000 fb04 	bl	8009924 <atoi>
 800931c:	4606      	mov	r6, r0
 800931e:	4894      	ldr	r0, [pc, #592]	; (8009570 <func_chooser+0x2d8>)
 8009320:	f000 fb00 	bl	8009924 <atoi>
 8009324:	4680      	mov	r8, r0
 8009326:	4893      	ldr	r0, [pc, #588]	; (8009574 <func_chooser+0x2dc>)
 8009328:	f000 fafc 	bl	8009924 <atoi>
 800932c:	4681      	mov	r9, r0
 800932e:	4892      	ldr	r0, [pc, #584]	; (8009578 <func_chooser+0x2e0>)
 8009330:	f000 faf8 	bl	8009924 <atoi>
 8009334:	4604      	mov	r4, r0
 8009336:	4891      	ldr	r0, [pc, #580]	; (800957c <func_chooser+0x2e4>)
 8009338:	f7ff fef4 	bl	8009124 <color>
 800933c:	4603      	mov	r3, r0
 800933e:	9301      	str	r3, [sp, #4]
 8009340:	9400      	str	r4, [sp, #0]
 8009342:	464b      	mov	r3, r9
 8009344:	4642      	mov	r2, r8
 8009346:	4631      	mov	r1, r6
 8009348:	4628      	mov	r0, r5
 800934a:	f7f7 fb46 	bl	80009da <draw_line>
		for(int i=0;i<sizeof(line_args.function);i++)
 800934e:	2300      	movs	r3, #0
 8009350:	61bb      	str	r3, [r7, #24]
 8009352:	e007      	b.n	8009364 <func_chooser+0xcc>
			line_args.function[i] = 0;
 8009354:	4a83      	ldr	r2, [pc, #524]	; (8009564 <func_chooser+0x2cc>)
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	4413      	add	r3, r2
 800935a:	2200      	movs	r2, #0
 800935c:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<sizeof(line_args.function);i++)
 800935e:	69bb      	ldr	r3, [r7, #24]
 8009360:	3301      	adds	r3, #1
 8009362:	61bb      	str	r3, [r7, #24]
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	2b09      	cmp	r3, #9
 8009368:	d9f4      	bls.n	8009354 <func_chooser+0xbc>
}
 800936a:	e1a0      	b.n	80096ae <func_chooser+0x416>
	else if(!strcmp(ellips_args.function,"ellips"))
 800936c:	4984      	ldr	r1, [pc, #528]	; (8009580 <func_chooser+0x2e8>)
 800936e:	4885      	ldr	r0, [pc, #532]	; (8009584 <func_chooser+0x2ec>)
 8009370:	f7f6 ff2a 	bl	80001c8 <strcmp>
 8009374:	4603      	mov	r3, r0
 8009376:	2b00      	cmp	r3, #0
 8009378:	d132      	bne.n	80093e0 <func_chooser+0x148>
		UART_puts("function = "); UART_puts(ellips_args.function); UART_puts("\r");
 800937a:	4876      	ldr	r0, [pc, #472]	; (8009554 <func_chooser+0x2bc>)
 800937c:	f7ff f8ea 	bl	8008554 <UART_puts>
 8009380:	4880      	ldr	r0, [pc, #512]	; (8009584 <func_chooser+0x2ec>)
 8009382:	f7ff f8e7 	bl	8008554 <UART_puts>
 8009386:	4874      	ldr	r0, [pc, #464]	; (8009558 <func_chooser+0x2c0>)
 8009388:	f7ff f8e4 	bl	8008554 <UART_puts>
		draw_ellips(atoi(ellips_args.x_center),atoi(ellips_args.y_center),atoi(ellips_args.x_rad),atoi(ellips_args.y_rad),color(ellips_args.color));
 800938c:	487e      	ldr	r0, [pc, #504]	; (8009588 <func_chooser+0x2f0>)
 800938e:	f000 fac9 	bl	8009924 <atoi>
 8009392:	4604      	mov	r4, r0
 8009394:	487d      	ldr	r0, [pc, #500]	; (800958c <func_chooser+0x2f4>)
 8009396:	f000 fac5 	bl	8009924 <atoi>
 800939a:	4605      	mov	r5, r0
 800939c:	487c      	ldr	r0, [pc, #496]	; (8009590 <func_chooser+0x2f8>)
 800939e:	f000 fac1 	bl	8009924 <atoi>
 80093a2:	4606      	mov	r6, r0
 80093a4:	487b      	ldr	r0, [pc, #492]	; (8009594 <func_chooser+0x2fc>)
 80093a6:	f000 fabd 	bl	8009924 <atoi>
 80093aa:	4680      	mov	r8, r0
 80093ac:	487a      	ldr	r0, [pc, #488]	; (8009598 <func_chooser+0x300>)
 80093ae:	f7ff feb9 	bl	8009124 <color>
 80093b2:	4603      	mov	r3, r0
 80093b4:	9300      	str	r3, [sp, #0]
 80093b6:	4643      	mov	r3, r8
 80093b8:	4632      	mov	r2, r6
 80093ba:	4629      	mov	r1, r5
 80093bc:	4620      	mov	r0, r4
 80093be:	f7f7 fce6 	bl	8000d8e <draw_ellips>
		for(int i=0;i<sizeof(ellips_args.function);i++)
 80093c2:	2300      	movs	r3, #0
 80093c4:	617b      	str	r3, [r7, #20]
 80093c6:	e007      	b.n	80093d8 <func_chooser+0x140>
			ellips_args.function[i] = 0;
 80093c8:	4a6e      	ldr	r2, [pc, #440]	; (8009584 <func_chooser+0x2ec>)
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	4413      	add	r3, r2
 80093ce:	2200      	movs	r2, #0
 80093d0:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<sizeof(ellips_args.function);i++)
 80093d2:	697b      	ldr	r3, [r7, #20]
 80093d4:	3301      	adds	r3, #1
 80093d6:	617b      	str	r3, [r7, #20]
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	2b09      	cmp	r3, #9
 80093dc:	d9f4      	bls.n	80093c8 <func_chooser+0x130>
}
 80093de:	e166      	b.n	80096ae <func_chooser+0x416>
	else if(!strcmp(rectangle_args.function,"rechthoek"))
 80093e0:	496e      	ldr	r1, [pc, #440]	; (800959c <func_chooser+0x304>)
 80093e2:	486f      	ldr	r0, [pc, #444]	; (80095a0 <func_chooser+0x308>)
 80093e4:	f7f6 fef0 	bl	80001c8 <strcmp>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d132      	bne.n	8009454 <func_chooser+0x1bc>
		UART_puts("function = "); UART_puts(rectangle_args.function); UART_puts("\r");
 80093ee:	4859      	ldr	r0, [pc, #356]	; (8009554 <func_chooser+0x2bc>)
 80093f0:	f7ff f8b0 	bl	8008554 <UART_puts>
 80093f4:	486a      	ldr	r0, [pc, #424]	; (80095a0 <func_chooser+0x308>)
 80093f6:	f7ff f8ad 	bl	8008554 <UART_puts>
 80093fa:	4857      	ldr	r0, [pc, #348]	; (8009558 <func_chooser+0x2c0>)
 80093fc:	f7ff f8aa 	bl	8008554 <UART_puts>
		draw_rectangle(atoi(rectangle_args.x1),atoi(rectangle_args.y1),atoi(rectangle_args.x2),atoi(rectangle_args.y2),color(rectangle_args.color));
 8009400:	4868      	ldr	r0, [pc, #416]	; (80095a4 <func_chooser+0x30c>)
 8009402:	f000 fa8f 	bl	8009924 <atoi>
 8009406:	4604      	mov	r4, r0
 8009408:	4867      	ldr	r0, [pc, #412]	; (80095a8 <func_chooser+0x310>)
 800940a:	f000 fa8b 	bl	8009924 <atoi>
 800940e:	4605      	mov	r5, r0
 8009410:	4866      	ldr	r0, [pc, #408]	; (80095ac <func_chooser+0x314>)
 8009412:	f000 fa87 	bl	8009924 <atoi>
 8009416:	4606      	mov	r6, r0
 8009418:	4865      	ldr	r0, [pc, #404]	; (80095b0 <func_chooser+0x318>)
 800941a:	f000 fa83 	bl	8009924 <atoi>
 800941e:	4680      	mov	r8, r0
 8009420:	4864      	ldr	r0, [pc, #400]	; (80095b4 <func_chooser+0x31c>)
 8009422:	f7ff fe7f 	bl	8009124 <color>
 8009426:	4603      	mov	r3, r0
 8009428:	9300      	str	r3, [sp, #0]
 800942a:	4643      	mov	r3, r8
 800942c:	4632      	mov	r2, r6
 800942e:	4629      	mov	r1, r5
 8009430:	4620      	mov	r0, r4
 8009432:	f7f7 fcff 	bl	8000e34 <draw_rectangle>
		for(int i=0;i<sizeof(rectangle_args.function);i++)
 8009436:	2300      	movs	r3, #0
 8009438:	613b      	str	r3, [r7, #16]
 800943a:	e007      	b.n	800944c <func_chooser+0x1b4>
			rectangle_args.function[i] = 0;
 800943c:	4a58      	ldr	r2, [pc, #352]	; (80095a0 <func_chooser+0x308>)
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	4413      	add	r3, r2
 8009442:	2200      	movs	r2, #0
 8009444:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<sizeof(rectangle_args.function);i++)
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	3301      	adds	r3, #1
 800944a:	613b      	str	r3, [r7, #16]
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	2b09      	cmp	r3, #9
 8009450:	d9f4      	bls.n	800943c <func_chooser+0x1a4>
}
 8009452:	e12c      	b.n	80096ae <func_chooser+0x416>
	else if(!strcmp(triangle_args.function,"driehoek"))
 8009454:	4958      	ldr	r1, [pc, #352]	; (80095b8 <func_chooser+0x320>)
 8009456:	4859      	ldr	r0, [pc, #356]	; (80095bc <func_chooser+0x324>)
 8009458:	f7f6 feb6 	bl	80001c8 <strcmp>
 800945c:	4603      	mov	r3, r0
 800945e:	2b00      	cmp	r3, #0
 8009460:	d13c      	bne.n	80094dc <func_chooser+0x244>
		UART_puts("function = "); UART_puts(triangle_args.function); UART_puts("\r");
 8009462:	483c      	ldr	r0, [pc, #240]	; (8009554 <func_chooser+0x2bc>)
 8009464:	f7ff f876 	bl	8008554 <UART_puts>
 8009468:	4854      	ldr	r0, [pc, #336]	; (80095bc <func_chooser+0x324>)
 800946a:	f7ff f873 	bl	8008554 <UART_puts>
 800946e:	483a      	ldr	r0, [pc, #232]	; (8009558 <func_chooser+0x2c0>)
 8009470:	f7ff f870 	bl	8008554 <UART_puts>
		draw_triangle(atoi(triangle_args.x1),atoi(triangle_args.y1),atoi(triangle_args.x2),atoi(triangle_args.y2),atoi(triangle_args.xtop),atoi(triangle_args.ytop),color(triangle_args.color));
 8009474:	4852      	ldr	r0, [pc, #328]	; (80095c0 <func_chooser+0x328>)
 8009476:	f000 fa55 	bl	8009924 <atoi>
 800947a:	4606      	mov	r6, r0
 800947c:	4851      	ldr	r0, [pc, #324]	; (80095c4 <func_chooser+0x32c>)
 800947e:	f000 fa51 	bl	8009924 <atoi>
 8009482:	4680      	mov	r8, r0
 8009484:	4850      	ldr	r0, [pc, #320]	; (80095c8 <func_chooser+0x330>)
 8009486:	f000 fa4d 	bl	8009924 <atoi>
 800948a:	4681      	mov	r9, r0
 800948c:	484f      	ldr	r0, [pc, #316]	; (80095cc <func_chooser+0x334>)
 800948e:	f000 fa49 	bl	8009924 <atoi>
 8009492:	4682      	mov	sl, r0
 8009494:	484e      	ldr	r0, [pc, #312]	; (80095d0 <func_chooser+0x338>)
 8009496:	f000 fa45 	bl	8009924 <atoi>
 800949a:	4604      	mov	r4, r0
 800949c:	484d      	ldr	r0, [pc, #308]	; (80095d4 <func_chooser+0x33c>)
 800949e:	f000 fa41 	bl	8009924 <atoi>
 80094a2:	4605      	mov	r5, r0
 80094a4:	484c      	ldr	r0, [pc, #304]	; (80095d8 <func_chooser+0x340>)
 80094a6:	f7ff fe3d 	bl	8009124 <color>
 80094aa:	4603      	mov	r3, r0
 80094ac:	9302      	str	r3, [sp, #8]
 80094ae:	9501      	str	r5, [sp, #4]
 80094b0:	9400      	str	r4, [sp, #0]
 80094b2:	4653      	mov	r3, sl
 80094b4:	464a      	mov	r2, r9
 80094b6:	4641      	mov	r1, r8
 80094b8:	4630      	mov	r0, r6
 80094ba:	f7f7 fce3 	bl	8000e84 <draw_triangle>
		for(int i=0;i<sizeof(triangle_args.function);i++)
 80094be:	2300      	movs	r3, #0
 80094c0:	60fb      	str	r3, [r7, #12]
 80094c2:	e007      	b.n	80094d4 <func_chooser+0x23c>
			triangle_args.function[i] = 0;
 80094c4:	4a3d      	ldr	r2, [pc, #244]	; (80095bc <func_chooser+0x324>)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	4413      	add	r3, r2
 80094ca:	2200      	movs	r2, #0
 80094cc:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<sizeof(triangle_args.function);i++)
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	3301      	adds	r3, #1
 80094d2:	60fb      	str	r3, [r7, #12]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2b09      	cmp	r3, #9
 80094d8:	d9f4      	bls.n	80094c4 <func_chooser+0x22c>
}
 80094da:	e0e8      	b.n	80096ae <func_chooser+0x416>
	else if(!strcmp(text_args.function,"tekst"))
 80094dc:	493f      	ldr	r1, [pc, #252]	; (80095dc <func_chooser+0x344>)
 80094de:	4840      	ldr	r0, [pc, #256]	; (80095e0 <func_chooser+0x348>)
 80094e0:	f7f6 fe72 	bl	80001c8 <strcmp>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	f040 8084 	bne.w	80095f4 <func_chooser+0x35c>
		UART_puts("function = "); UART_puts(text_args.function); UART_puts("\r");
 80094ec:	4819      	ldr	r0, [pc, #100]	; (8009554 <func_chooser+0x2bc>)
 80094ee:	f7ff f831 	bl	8008554 <UART_puts>
 80094f2:	483b      	ldr	r0, [pc, #236]	; (80095e0 <func_chooser+0x348>)
 80094f4:	f7ff f82e 	bl	8008554 <UART_puts>
 80094f8:	4817      	ldr	r0, [pc, #92]	; (8009558 <func_chooser+0x2c0>)
 80094fa:	f7ff f82b 	bl	8008554 <UART_puts>
		for(int i=0;i<sizeof(text_args.function);i++)
 80094fe:	2300      	movs	r3, #0
 8009500:	60bb      	str	r3, [r7, #8]
 8009502:	e007      	b.n	8009514 <func_chooser+0x27c>
			text_args.function[i] = 0;
 8009504:	4a36      	ldr	r2, [pc, #216]	; (80095e0 <func_chooser+0x348>)
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	4413      	add	r3, r2
 800950a:	2200      	movs	r2, #0
 800950c:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<sizeof(text_args.function);i++)
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	3301      	adds	r3, #1
 8009512:	60bb      	str	r3, [r7, #8]
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	2b09      	cmp	r3, #9
 8009518:	d9f4      	bls.n	8009504 <func_chooser+0x26c>
		draw_text(atoi(text_args.x1),atoi(text_args.y1),text_args.text_in,color(clearscrn_args.color),color(text_args.color));
 800951a:	4832      	ldr	r0, [pc, #200]	; (80095e4 <func_chooser+0x34c>)
 800951c:	f000 fa02 	bl	8009924 <atoi>
 8009520:	4604      	mov	r4, r0
 8009522:	4831      	ldr	r0, [pc, #196]	; (80095e8 <func_chooser+0x350>)
 8009524:	f000 f9fe 	bl	8009924 <atoi>
 8009528:	4605      	mov	r5, r0
 800952a:	480c      	ldr	r0, [pc, #48]	; (800955c <func_chooser+0x2c4>)
 800952c:	f7ff fdfa 	bl	8009124 <color>
 8009530:	4606      	mov	r6, r0
 8009532:	482e      	ldr	r0, [pc, #184]	; (80095ec <func_chooser+0x354>)
 8009534:	f7ff fdf6 	bl	8009124 <color>
 8009538:	4603      	mov	r3, r0
 800953a:	9300      	str	r3, [sp, #0]
 800953c:	4633      	mov	r3, r6
 800953e:	4a2c      	ldr	r2, [pc, #176]	; (80095f0 <func_chooser+0x358>)
 8009540:	4629      	mov	r1, r5
 8009542:	4620      	mov	r0, r4
 8009544:	f7f7 fcc7 	bl	8000ed6 <draw_text>
}
 8009548:	e0b1      	b.n	80096ae <func_chooser+0x416>
 800954a:	bf00      	nop
 800954c:	0800a3a0 	.word	0x0800a3a0
 8009550:	200006e4 	.word	0x200006e4
 8009554:	0800a3ac 	.word	0x0800a3ac
 8009558:	0800a3b8 	.word	0x0800a3b8
 800955c:	20000761 	.word	0x20000761
 8009560:	0800a3bc 	.word	0x0800a3bc
 8009564:	20013590 	.word	0x20013590
 8009568:	2001359a 	.word	0x2001359a
 800956c:	2001359f 	.word	0x2001359f
 8009570:	200135a4 	.word	0x200135a4
 8009574:	200135a9 	.word	0x200135a9
 8009578:	200135cc 	.word	0x200135cc
 800957c:	2001360d 	.word	0x2001360d
 8009580:	0800a3c4 	.word	0x0800a3c4
 8009584:	200137e0 	.word	0x200137e0
 8009588:	20013808 	.word	0x20013808
 800958c:	2001380d 	.word	0x2001380d
 8009590:	20013812 	.word	0x20013812
 8009594:	20013817 	.word	0x20013817
 8009598:	2001385d 	.word	0x2001385d
 800959c:	0800a3cc 	.word	0x0800a3cc
 80095a0:	20013468 	.word	0x20013468
 80095a4:	20013472 	.word	0x20013472
 80095a8:	20013477 	.word	0x20013477
 80095ac:	2001347c 	.word	0x2001347c
 80095b0:	20013481 	.word	0x20013481
 80095b4:	200134e5 	.word	0x200134e5
 80095b8:	0800a3d8 	.word	0x0800a3d8
 80095bc:	200134fc 	.word	0x200134fc
 80095c0:	20013506 	.word	0x20013506
 80095c4:	2001350b 	.word	0x2001350b
 80095c8:	20013510 	.word	0x20013510
 80095cc:	20013515 	.word	0x20013515
 80095d0:	2001351a 	.word	0x2001351a
 80095d4:	2001351f 	.word	0x2001351f
 80095d8:	20013579 	.word	0x20013579
 80095dc:	0800a3e4 	.word	0x0800a3e4
 80095e0:	200136b8 	.word	0x200136b8
 80095e4:	200136c2 	.word	0x200136c2
 80095e8:	200136c7 	.word	0x200136c7
 80095ec:	20013735 	.word	0x20013735
 80095f0:	200136f9 	.word	0x200136f9
	else if(!strcmp(bitmap_args.function,"bitmap"))
 80095f4:	4930      	ldr	r1, [pc, #192]	; (80096b8 <func_chooser+0x420>)
 80095f6:	4831      	ldr	r0, [pc, #196]	; (80096bc <func_chooser+0x424>)
 80095f8:	f7f6 fde6 	bl	80001c8 <strcmp>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d12c      	bne.n	800965c <func_chooser+0x3c4>
		UART_puts("function = "); UART_puts(bitmap_args.function); UART_puts("\r");
 8009602:	482f      	ldr	r0, [pc, #188]	; (80096c0 <func_chooser+0x428>)
 8009604:	f7fe ffa6 	bl	8008554 <UART_puts>
 8009608:	482c      	ldr	r0, [pc, #176]	; (80096bc <func_chooser+0x424>)
 800960a:	f7fe ffa3 	bl	8008554 <UART_puts>
 800960e:	482d      	ldr	r0, [pc, #180]	; (80096c4 <func_chooser+0x42c>)
 8009610:	f7fe ffa0 	bl	8008554 <UART_puts>
		draw_bitmap(atoi(bitmap_args.bitmap_nr),atoi(bitmap_args.x1),atoi(bitmap_args.y1),color(clearscrn_args.color));
 8009614:	482c      	ldr	r0, [pc, #176]	; (80096c8 <func_chooser+0x430>)
 8009616:	f000 f985 	bl	8009924 <atoi>
 800961a:	4604      	mov	r4, r0
 800961c:	482b      	ldr	r0, [pc, #172]	; (80096cc <func_chooser+0x434>)
 800961e:	f000 f981 	bl	8009924 <atoi>
 8009622:	4605      	mov	r5, r0
 8009624:	482a      	ldr	r0, [pc, #168]	; (80096d0 <func_chooser+0x438>)
 8009626:	f000 f97d 	bl	8009924 <atoi>
 800962a:	4606      	mov	r6, r0
 800962c:	4829      	ldr	r0, [pc, #164]	; (80096d4 <func_chooser+0x43c>)
 800962e:	f7ff fd79 	bl	8009124 <color>
 8009632:	4603      	mov	r3, r0
 8009634:	4632      	mov	r2, r6
 8009636:	4629      	mov	r1, r5
 8009638:	4620      	mov	r0, r4
 800963a:	f7fd fbdf 	bl	8006dfc <draw_bitmap>
		for(int i=0;i<sizeof(bitmap_args.function);i++)
 800963e:	2300      	movs	r3, #0
 8009640:	607b      	str	r3, [r7, #4]
 8009642:	e007      	b.n	8009654 <func_chooser+0x3bc>
			bitmap_args.function[i] = 0;
 8009644:	4a1d      	ldr	r2, [pc, #116]	; (80096bc <func_chooser+0x424>)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	4413      	add	r3, r2
 800964a:	2200      	movs	r2, #0
 800964c:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<sizeof(bitmap_args.function);i++)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	3301      	adds	r3, #1
 8009652:	607b      	str	r3, [r7, #4]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2b09      	cmp	r3, #9
 8009658:	d9f4      	bls.n	8009644 <func_chooser+0x3ac>
}
 800965a:	e028      	b.n	80096ae <func_chooser+0x416>
	else if(!strcmp(wait_args.function,"wacht"))
 800965c:	491e      	ldr	r1, [pc, #120]	; (80096d8 <func_chooser+0x440>)
 800965e:	481f      	ldr	r0, [pc, #124]	; (80096dc <func_chooser+0x444>)
 8009660:	f7f6 fdb2 	bl	80001c8 <strcmp>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d11e      	bne.n	80096a8 <func_chooser+0x410>
		UART_puts("function = "); UART_puts(wait_args.function); UART_puts("\r");
 800966a:	4815      	ldr	r0, [pc, #84]	; (80096c0 <func_chooser+0x428>)
 800966c:	f7fe ff72 	bl	8008554 <UART_puts>
 8009670:	481a      	ldr	r0, [pc, #104]	; (80096dc <func_chooser+0x444>)
 8009672:	f7fe ff6f 	bl	8008554 <UART_puts>
 8009676:	4813      	ldr	r0, [pc, #76]	; (80096c4 <func_chooser+0x42c>)
 8009678:	f7fe ff6c 	bl	8008554 <UART_puts>
		for(int i=0;i<sizeof(wait_args.function);i++)
 800967c:	2300      	movs	r3, #0
 800967e:	603b      	str	r3, [r7, #0]
 8009680:	e007      	b.n	8009692 <func_chooser+0x3fa>
			wait_args.function[i] = 0;
 8009682:	4a16      	ldr	r2, [pc, #88]	; (80096dc <func_chooser+0x444>)
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	4413      	add	r3, r2
 8009688:	2200      	movs	r2, #0
 800968a:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<sizeof(wait_args.function);i++)
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	3301      	adds	r3, #1
 8009690:	603b      	str	r3, [r7, #0]
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	2b09      	cmp	r3, #9
 8009696:	d9f4      	bls.n	8009682 <func_chooser+0x3ea>
		wait_ms(atoi(wait_args.time_ms));
 8009698:	4811      	ldr	r0, [pc, #68]	; (80096e0 <func_chooser+0x448>)
 800969a:	f000 f943 	bl	8009924 <atoi>
 800969e:	4603      	mov	r3, r0
 80096a0:	4618      	mov	r0, r3
 80096a2:	f7fd fbb8 	bl	8006e16 <wait_ms>
}
 80096a6:	e002      	b.n	80096ae <func_chooser+0x416>
		UART_puts("error handling");
 80096a8:	480e      	ldr	r0, [pc, #56]	; (80096e4 <func_chooser+0x44c>)
 80096aa:	f7fe ff53 	bl	8008554 <UART_puts>
}
 80096ae:	bf00      	nop
 80096b0:	3720      	adds	r7, #32
 80096b2:	46bd      	mov	sp, r7
 80096b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096b8:	0800a3ec 	.word	0x0800a3ec
 80096bc:	20013624 	.word	0x20013624
 80096c0:	0800a3ac 	.word	0x0800a3ac
 80096c4:	0800a3b8 	.word	0x0800a3b8
 80096c8:	20013697 	.word	0x20013697
 80096cc:	2001362e 	.word	0x2001362e
 80096d0:	20013633 	.word	0x20013633
 80096d4:	20000761 	.word	0x20000761
 80096d8:	0800a3f4 	.word	0x0800a3f4
 80096dc:	2001374c 	.word	0x2001374c
 80096e0:	200137c4 	.word	0x200137c4
 80096e4:	0800a3fc 	.word	0x0800a3fc

080096e8 <main>:
//--------------------------------------------------------------

#include "main.h"

int main(void)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af02      	add	r7, sp, #8
	//_____________________________INIT______________________________________________
	SystemInit(); // System speed to 168MHz
 80096ee:	f000 f867 	bl	80097c0 <SystemInit>
	IO_Init();
 80096f2:	f7fe ffe9 	bl	80086c8 <IO_Init>

	draw_line(30,30,60,60,3,wit);
 80096f6:	23ff      	movs	r3, #255	; 0xff
 80096f8:	9301      	str	r3, [sp, #4]
 80096fa:	2303      	movs	r3, #3
 80096fc:	9300      	str	r3, [sp, #0]
 80096fe:	233c      	movs	r3, #60	; 0x3c
 8009700:	223c      	movs	r2, #60	; 0x3c
 8009702:	211e      	movs	r1, #30
 8009704:	201e      	movs	r0, #30
 8009706:	f7f7 f968 	bl	80009da <draw_line>

	while(1)
	{
		input_uart();
 800970a:	f7fe ffe7 	bl	80086dc <input_uart>
 800970e:	e7fc      	b.n	800970a <main+0x22>

08009710 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8009710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009748 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009714:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009716:	e003      	b.n	8009720 <LoopCopyDataInit>

08009718 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009718:	4b0c      	ldr	r3, [pc, #48]	; (800974c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800971a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800971c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800971e:	3104      	adds	r1, #4

08009720 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009720:	480b      	ldr	r0, [pc, #44]	; (8009750 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009722:	4b0c      	ldr	r3, [pc, #48]	; (8009754 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009724:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009726:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009728:	d3f6      	bcc.n	8009718 <CopyDataInit>
  ldr  r2, =_sbss
 800972a:	4a0b      	ldr	r2, [pc, #44]	; (8009758 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800972c:	e002      	b.n	8009734 <LoopFillZerobss>

0800972e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800972e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009730:	f842 3b04 	str.w	r3, [r2], #4

08009734 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009734:	4b09      	ldr	r3, [pc, #36]	; (800975c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009736:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009738:	d3f9      	bcc.n	800972e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800973a:	f000 f841 	bl	80097c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800973e:	f000 f8f5 	bl	800992c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009742:	f7ff ffd1 	bl	80096e8 <main>
  bx  lr    
 8009746:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8009748:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800974c:	0800a520 	.word	0x0800a520
  ldr  r0, =_sdata
 8009750:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009754:	20000680 	.word	0x20000680
  ldr  r2, =_sbss
 8009758:	20000680 	.word	0x20000680
  ldr  r3, = _ebss
 800975c:	2001398c 	.word	0x2001398c

08009760 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009760:	e7fe      	b.n	8009760 <ADC_IRQHandler>

08009762 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8009762:	b480      	push	{r7}
 8009764:	af00      	add	r7, sp, #0
}
 8009766:	bf00      	nop
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8009770:	b480      	push	{r7}
 8009772:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8009774:	e7fe      	b.n	8009774 <HardFault_Handler+0x4>

08009776 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8009776:	b480      	push	{r7}
 8009778:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800977a:	e7fe      	b.n	800977a <MemManage_Handler+0x4>

0800977c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800977c:	b480      	push	{r7}
 800977e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8009780:	e7fe      	b.n	8009780 <BusFault_Handler+0x4>

08009782 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8009782:	b480      	push	{r7}
 8009784:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8009786:	e7fe      	b.n	8009786 <UsageFault_Handler+0x4>

08009788 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8009788:	b480      	push	{r7}
 800978a:	af00      	add	r7, sp, #0
}
 800978c:	bf00      	nop
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr

08009796 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8009796:	b480      	push	{r7}
 8009798:	af00      	add	r7, sp, #0
}
 800979a:	bf00      	nop
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80097a4:	b480      	push	{r7}
 80097a6:	af00      	add	r7, sp, #0
}
 80097a8:	bf00      	nop
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80097b2:	b480      	push	{r7}
 80097b4:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80097b6:	bf00      	nop
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr

080097c0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80097c4:	4a16      	ldr	r2, [pc, #88]	; (8009820 <SystemInit+0x60>)
 80097c6:	4b16      	ldr	r3, [pc, #88]	; (8009820 <SystemInit+0x60>)
 80097c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80097d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80097d4:	4a13      	ldr	r2, [pc, #76]	; (8009824 <SystemInit+0x64>)
 80097d6:	4b13      	ldr	r3, [pc, #76]	; (8009824 <SystemInit+0x64>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f043 0301 	orr.w	r3, r3, #1
 80097de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80097e0:	4b10      	ldr	r3, [pc, #64]	; (8009824 <SystemInit+0x64>)
 80097e2:	2200      	movs	r2, #0
 80097e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80097e6:	4a0f      	ldr	r2, [pc, #60]	; (8009824 <SystemInit+0x64>)
 80097e8:	4b0e      	ldr	r3, [pc, #56]	; (8009824 <SystemInit+0x64>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80097f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097f4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80097f6:	4b0b      	ldr	r3, [pc, #44]	; (8009824 <SystemInit+0x64>)
 80097f8:	4a0b      	ldr	r2, [pc, #44]	; (8009828 <SystemInit+0x68>)
 80097fa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80097fc:	4a09      	ldr	r2, [pc, #36]	; (8009824 <SystemInit+0x64>)
 80097fe:	4b09      	ldr	r3, [pc, #36]	; (8009824 <SystemInit+0x64>)
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009806:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009808:	4b06      	ldr	r3, [pc, #24]	; (8009824 <SystemInit+0x64>)
 800980a:	2200      	movs	r2, #0
 800980c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800980e:	f000 f80d 	bl	800982c <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009812:	4b03      	ldr	r3, [pc, #12]	; (8009820 <SystemInit+0x60>)
 8009814:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009818:	609a      	str	r2, [r3, #8]
#endif
}
 800981a:	bf00      	nop
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	e000ed00 	.word	0xe000ed00
 8009824:	40023800 	.word	0x40023800
 8009828:	24003010 	.word	0x24003010

0800982c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8009832:	2300      	movs	r3, #0
 8009834:	607b      	str	r3, [r7, #4]
 8009836:	2300      	movs	r3, #0
 8009838:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800983a:	4a36      	ldr	r2, [pc, #216]	; (8009914 <SetSysClock+0xe8>)
 800983c:	4b35      	ldr	r3, [pc, #212]	; (8009914 <SetSysClock+0xe8>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009844:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8009846:	4b33      	ldr	r3, [pc, #204]	; (8009914 <SetSysClock+0xe8>)
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800984e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	3301      	adds	r3, #1
 8009854:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8009856:	683b      	ldr	r3, [r7, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d103      	bne.n	8009864 <SetSysClock+0x38>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8009862:	d1f0      	bne.n	8009846 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8009864:	4b2b      	ldr	r3, [pc, #172]	; (8009914 <SetSysClock+0xe8>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800986c:	2b00      	cmp	r3, #0
 800986e:	d002      	beq.n	8009876 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8009870:	2301      	movs	r3, #1
 8009872:	603b      	str	r3, [r7, #0]
 8009874:	e001      	b.n	800987a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8009876:	2300      	movs	r3, #0
 8009878:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	2b01      	cmp	r3, #1
 800987e:	d142      	bne.n	8009906 <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8009880:	4a24      	ldr	r2, [pc, #144]	; (8009914 <SetSysClock+0xe8>)
 8009882:	4b24      	ldr	r3, [pc, #144]	; (8009914 <SetSysClock+0xe8>)
 8009884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800988a:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800988c:	4a22      	ldr	r2, [pc, #136]	; (8009918 <SetSysClock+0xec>)
 800988e:	4b22      	ldr	r3, [pc, #136]	; (8009918 <SetSysClock+0xec>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009896:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8009898:	4a1e      	ldr	r2, [pc, #120]	; (8009914 <SetSysClock+0xe8>)
 800989a:	4b1e      	ldr	r3, [pc, #120]	; (8009914 <SetSysClock+0xe8>)
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80098a0:	4a1c      	ldr	r2, [pc, #112]	; (8009914 <SetSysClock+0xe8>)
 80098a2:	4b1c      	ldr	r3, [pc, #112]	; (8009914 <SetSysClock+0xe8>)
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098aa:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80098ac:	4a19      	ldr	r2, [pc, #100]	; (8009914 <SetSysClock+0xe8>)
 80098ae:	4b19      	ldr	r3, [pc, #100]	; (8009914 <SetSysClock+0xe8>)
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80098b6:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80098b8:	4b16      	ldr	r3, [pc, #88]	; (8009914 <SetSysClock+0xe8>)
 80098ba:	4a18      	ldr	r2, [pc, #96]	; (800991c <SetSysClock+0xf0>)
 80098bc:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80098be:	4a15      	ldr	r2, [pc, #84]	; (8009914 <SetSysClock+0xe8>)
 80098c0:	4b14      	ldr	r3, [pc, #80]	; (8009914 <SetSysClock+0xe8>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80098c8:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80098ca:	bf00      	nop
 80098cc:	4b11      	ldr	r3, [pc, #68]	; (8009914 <SetSysClock+0xe8>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d0f9      	beq.n	80098cc <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80098d8:	4b11      	ldr	r3, [pc, #68]	; (8009920 <SetSysClock+0xf4>)
 80098da:	f240 7205 	movw	r2, #1797	; 0x705
 80098de:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80098e0:	4a0c      	ldr	r2, [pc, #48]	; (8009914 <SetSysClock+0xe8>)
 80098e2:	4b0c      	ldr	r3, [pc, #48]	; (8009914 <SetSysClock+0xe8>)
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	f023 0303 	bic.w	r3, r3, #3
 80098ea:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80098ec:	4a09      	ldr	r2, [pc, #36]	; (8009914 <SetSysClock+0xe8>)
 80098ee:	4b09      	ldr	r3, [pc, #36]	; (8009914 <SetSysClock+0xe8>)
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	f043 0302 	orr.w	r3, r3, #2
 80098f6:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80098f8:	bf00      	nop
 80098fa:	4b06      	ldr	r3, [pc, #24]	; (8009914 <SetSysClock+0xe8>)
 80098fc:	689b      	ldr	r3, [r3, #8]
 80098fe:	f003 030c 	and.w	r3, r3, #12
 8009902:	2b08      	cmp	r3, #8
 8009904:	d1f9      	bne.n	80098fa <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 8009906:	bf00      	nop
 8009908:	370c      	adds	r7, #12
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr
 8009912:	bf00      	nop
 8009914:	40023800 	.word	0x40023800
 8009918:	40007000 	.word	0x40007000
 800991c:	07405419 	.word	0x07405419
 8009920:	40023c00 	.word	0x40023c00

08009924 <atoi>:
 8009924:	220a      	movs	r2, #10
 8009926:	2100      	movs	r1, #0
 8009928:	f000 b902 	b.w	8009b30 <strtol>

0800992c <__libc_init_array>:
 800992c:	b570      	push	{r4, r5, r6, lr}
 800992e:	4e0d      	ldr	r6, [pc, #52]	; (8009964 <__libc_init_array+0x38>)
 8009930:	4c0d      	ldr	r4, [pc, #52]	; (8009968 <__libc_init_array+0x3c>)
 8009932:	1ba4      	subs	r4, r4, r6
 8009934:	10a4      	asrs	r4, r4, #2
 8009936:	2500      	movs	r5, #0
 8009938:	42a5      	cmp	r5, r4
 800993a:	d109      	bne.n	8009950 <__libc_init_array+0x24>
 800993c:	4e0b      	ldr	r6, [pc, #44]	; (800996c <__libc_init_array+0x40>)
 800993e:	4c0c      	ldr	r4, [pc, #48]	; (8009970 <__libc_init_array+0x44>)
 8009940:	f000 fc84 	bl	800a24c <_init>
 8009944:	1ba4      	subs	r4, r4, r6
 8009946:	10a4      	asrs	r4, r4, #2
 8009948:	2500      	movs	r5, #0
 800994a:	42a5      	cmp	r5, r4
 800994c:	d105      	bne.n	800995a <__libc_init_array+0x2e>
 800994e:	bd70      	pop	{r4, r5, r6, pc}
 8009950:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009954:	4798      	blx	r3
 8009956:	3501      	adds	r5, #1
 8009958:	e7ee      	b.n	8009938 <__libc_init_array+0xc>
 800995a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800995e:	4798      	blx	r3
 8009960:	3501      	adds	r5, #1
 8009962:	e7f2      	b.n	800994a <__libc_init_array+0x1e>
 8009964:	0800a518 	.word	0x0800a518
 8009968:	0800a518 	.word	0x0800a518
 800996c:	0800a518 	.word	0x0800a518
 8009970:	0800a51c 	.word	0x0800a51c

08009974 <strcpy>:
 8009974:	4603      	mov	r3, r0
 8009976:	f811 2b01 	ldrb.w	r2, [r1], #1
 800997a:	f803 2b01 	strb.w	r2, [r3], #1
 800997e:	2a00      	cmp	r2, #0
 8009980:	d1f9      	bne.n	8009976 <strcpy+0x2>
 8009982:	4770      	bx	lr

08009984 <strtok>:
 8009984:	4b14      	ldr	r3, [pc, #80]	; (80099d8 <strtok+0x54>)
 8009986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800998a:	681d      	ldr	r5, [r3, #0]
 800998c:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
 8009990:	4606      	mov	r6, r0
 8009992:	460f      	mov	r7, r1
 8009994:	b9bc      	cbnz	r4, 80099c6 <strtok+0x42>
 8009996:	2050      	movs	r0, #80	; 0x50
 8009998:	f000 f8e4 	bl	8009b64 <malloc>
 800999c:	f8c5 00e8 	str.w	r0, [r5, #232]	; 0xe8
 80099a0:	6004      	str	r4, [r0, #0]
 80099a2:	6044      	str	r4, [r0, #4]
 80099a4:	6084      	str	r4, [r0, #8]
 80099a6:	60c4      	str	r4, [r0, #12]
 80099a8:	6104      	str	r4, [r0, #16]
 80099aa:	6144      	str	r4, [r0, #20]
 80099ac:	6184      	str	r4, [r0, #24]
 80099ae:	6284      	str	r4, [r0, #40]	; 0x28
 80099b0:	62c4      	str	r4, [r0, #44]	; 0x2c
 80099b2:	6304      	str	r4, [r0, #48]	; 0x30
 80099b4:	6344      	str	r4, [r0, #52]	; 0x34
 80099b6:	6384      	str	r4, [r0, #56]	; 0x38
 80099b8:	63c4      	str	r4, [r0, #60]	; 0x3c
 80099ba:	6404      	str	r4, [r0, #64]	; 0x40
 80099bc:	6444      	str	r4, [r0, #68]	; 0x44
 80099be:	6484      	str	r4, [r0, #72]	; 0x48
 80099c0:	64c4      	str	r4, [r0, #76]	; 0x4c
 80099c2:	7704      	strb	r4, [r0, #28]
 80099c4:	6244      	str	r4, [r0, #36]	; 0x24
 80099c6:	f8d5 20e8 	ldr.w	r2, [r5, #232]	; 0xe8
 80099ca:	4639      	mov	r1, r7
 80099cc:	4630      	mov	r0, r6
 80099ce:	2301      	movs	r3, #1
 80099d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099d4:	f000 b802 	b.w	80099dc <__strtok_r>
 80099d8:	20000010 	.word	0x20000010

080099dc <__strtok_r>:
 80099dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099de:	b918      	cbnz	r0, 80099e8 <__strtok_r+0xc>
 80099e0:	6810      	ldr	r0, [r2, #0]
 80099e2:	b908      	cbnz	r0, 80099e8 <__strtok_r+0xc>
 80099e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099e6:	4620      	mov	r0, r4
 80099e8:	4604      	mov	r4, r0
 80099ea:	460f      	mov	r7, r1
 80099ec:	f814 5b01 	ldrb.w	r5, [r4], #1
 80099f0:	f817 6b01 	ldrb.w	r6, [r7], #1
 80099f4:	b91e      	cbnz	r6, 80099fe <__strtok_r+0x22>
 80099f6:	b965      	cbnz	r5, 8009a12 <__strtok_r+0x36>
 80099f8:	6015      	str	r5, [r2, #0]
 80099fa:	4628      	mov	r0, r5
 80099fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099fe:	42b5      	cmp	r5, r6
 8009a00:	d1f6      	bne.n	80099f0 <__strtok_r+0x14>
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d1ef      	bne.n	80099e6 <__strtok_r+0xa>
 8009a06:	6014      	str	r4, [r2, #0]
 8009a08:	7003      	strb	r3, [r0, #0]
 8009a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a0c:	461c      	mov	r4, r3
 8009a0e:	e00c      	b.n	8009a2a <__strtok_r+0x4e>
 8009a10:	b915      	cbnz	r5, 8009a18 <__strtok_r+0x3c>
 8009a12:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009a16:	460e      	mov	r6, r1
 8009a18:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009a1c:	42ab      	cmp	r3, r5
 8009a1e:	d1f7      	bne.n	8009a10 <__strtok_r+0x34>
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d0f3      	beq.n	8009a0c <__strtok_r+0x30>
 8009a24:	2300      	movs	r3, #0
 8009a26:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009a2a:	6014      	str	r4, [r2, #0]
 8009a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009a2e <_strtol_l.isra.0>:
 8009a2e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a32:	4680      	mov	r8, r0
 8009a34:	4689      	mov	r9, r1
 8009a36:	4692      	mov	sl, r2
 8009a38:	461f      	mov	r7, r3
 8009a3a:	468b      	mov	fp, r1
 8009a3c:	465d      	mov	r5, fp
 8009a3e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009a40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a44:	f000 f88a 	bl	8009b5c <__locale_ctype_ptr_l>
 8009a48:	4420      	add	r0, r4
 8009a4a:	7846      	ldrb	r6, [r0, #1]
 8009a4c:	f016 0608 	ands.w	r6, r6, #8
 8009a50:	d10b      	bne.n	8009a6a <_strtol_l.isra.0+0x3c>
 8009a52:	2c2d      	cmp	r4, #45	; 0x2d
 8009a54:	d10b      	bne.n	8009a6e <_strtol_l.isra.0+0x40>
 8009a56:	782c      	ldrb	r4, [r5, #0]
 8009a58:	2601      	movs	r6, #1
 8009a5a:	f10b 0502 	add.w	r5, fp, #2
 8009a5e:	b167      	cbz	r7, 8009a7a <_strtol_l.isra.0+0x4c>
 8009a60:	2f10      	cmp	r7, #16
 8009a62:	d114      	bne.n	8009a8e <_strtol_l.isra.0+0x60>
 8009a64:	2c30      	cmp	r4, #48	; 0x30
 8009a66:	d00a      	beq.n	8009a7e <_strtol_l.isra.0+0x50>
 8009a68:	e011      	b.n	8009a8e <_strtol_l.isra.0+0x60>
 8009a6a:	46ab      	mov	fp, r5
 8009a6c:	e7e6      	b.n	8009a3c <_strtol_l.isra.0+0xe>
 8009a6e:	2c2b      	cmp	r4, #43	; 0x2b
 8009a70:	bf04      	itt	eq
 8009a72:	782c      	ldrbeq	r4, [r5, #0]
 8009a74:	f10b 0502 	addeq.w	r5, fp, #2
 8009a78:	e7f1      	b.n	8009a5e <_strtol_l.isra.0+0x30>
 8009a7a:	2c30      	cmp	r4, #48	; 0x30
 8009a7c:	d127      	bne.n	8009ace <_strtol_l.isra.0+0xa0>
 8009a7e:	782b      	ldrb	r3, [r5, #0]
 8009a80:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009a84:	2b58      	cmp	r3, #88	; 0x58
 8009a86:	d14b      	bne.n	8009b20 <_strtol_l.isra.0+0xf2>
 8009a88:	786c      	ldrb	r4, [r5, #1]
 8009a8a:	2710      	movs	r7, #16
 8009a8c:	3502      	adds	r5, #2
 8009a8e:	2e00      	cmp	r6, #0
 8009a90:	bf0c      	ite	eq
 8009a92:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009a96:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	fbb1 fef7 	udiv	lr, r1, r7
 8009aa0:	4610      	mov	r0, r2
 8009aa2:	fb07 1c1e 	mls	ip, r7, lr, r1
 8009aa6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009aaa:	2b09      	cmp	r3, #9
 8009aac:	d811      	bhi.n	8009ad2 <_strtol_l.isra.0+0xa4>
 8009aae:	461c      	mov	r4, r3
 8009ab0:	42a7      	cmp	r7, r4
 8009ab2:	dd1d      	ble.n	8009af0 <_strtol_l.isra.0+0xc2>
 8009ab4:	1c53      	adds	r3, r2, #1
 8009ab6:	d007      	beq.n	8009ac8 <_strtol_l.isra.0+0x9a>
 8009ab8:	4586      	cmp	lr, r0
 8009aba:	d316      	bcc.n	8009aea <_strtol_l.isra.0+0xbc>
 8009abc:	d101      	bne.n	8009ac2 <_strtol_l.isra.0+0x94>
 8009abe:	45a4      	cmp	ip, r4
 8009ac0:	db13      	blt.n	8009aea <_strtol_l.isra.0+0xbc>
 8009ac2:	fb00 4007 	mla	r0, r0, r7, r4
 8009ac6:	2201      	movs	r2, #1
 8009ac8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009acc:	e7eb      	b.n	8009aa6 <_strtol_l.isra.0+0x78>
 8009ace:	270a      	movs	r7, #10
 8009ad0:	e7dd      	b.n	8009a8e <_strtol_l.isra.0+0x60>
 8009ad2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009ad6:	2b19      	cmp	r3, #25
 8009ad8:	d801      	bhi.n	8009ade <_strtol_l.isra.0+0xb0>
 8009ada:	3c37      	subs	r4, #55	; 0x37
 8009adc:	e7e8      	b.n	8009ab0 <_strtol_l.isra.0+0x82>
 8009ade:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009ae2:	2b19      	cmp	r3, #25
 8009ae4:	d804      	bhi.n	8009af0 <_strtol_l.isra.0+0xc2>
 8009ae6:	3c57      	subs	r4, #87	; 0x57
 8009ae8:	e7e2      	b.n	8009ab0 <_strtol_l.isra.0+0x82>
 8009aea:	f04f 32ff 	mov.w	r2, #4294967295
 8009aee:	e7eb      	b.n	8009ac8 <_strtol_l.isra.0+0x9a>
 8009af0:	1c53      	adds	r3, r2, #1
 8009af2:	d108      	bne.n	8009b06 <_strtol_l.isra.0+0xd8>
 8009af4:	2322      	movs	r3, #34	; 0x22
 8009af6:	f8c8 3000 	str.w	r3, [r8]
 8009afa:	4608      	mov	r0, r1
 8009afc:	f1ba 0f00 	cmp.w	sl, #0
 8009b00:	d107      	bne.n	8009b12 <_strtol_l.isra.0+0xe4>
 8009b02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b06:	b106      	cbz	r6, 8009b0a <_strtol_l.isra.0+0xdc>
 8009b08:	4240      	negs	r0, r0
 8009b0a:	f1ba 0f00 	cmp.w	sl, #0
 8009b0e:	d00c      	beq.n	8009b2a <_strtol_l.isra.0+0xfc>
 8009b10:	b122      	cbz	r2, 8009b1c <_strtol_l.isra.0+0xee>
 8009b12:	3d01      	subs	r5, #1
 8009b14:	f8ca 5000 	str.w	r5, [sl]
 8009b18:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b1c:	464d      	mov	r5, r9
 8009b1e:	e7f9      	b.n	8009b14 <_strtol_l.isra.0+0xe6>
 8009b20:	2430      	movs	r4, #48	; 0x30
 8009b22:	2f00      	cmp	r7, #0
 8009b24:	d1b3      	bne.n	8009a8e <_strtol_l.isra.0+0x60>
 8009b26:	2708      	movs	r7, #8
 8009b28:	e7b1      	b.n	8009a8e <_strtol_l.isra.0+0x60>
 8009b2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009b30 <strtol>:
 8009b30:	4b08      	ldr	r3, [pc, #32]	; (8009b54 <strtol+0x24>)
 8009b32:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b34:	681c      	ldr	r4, [r3, #0]
 8009b36:	4d08      	ldr	r5, [pc, #32]	; (8009b58 <strtol+0x28>)
 8009b38:	6a23      	ldr	r3, [r4, #32]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	bf08      	it	eq
 8009b3e:	462b      	moveq	r3, r5
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	4613      	mov	r3, r2
 8009b44:	460a      	mov	r2, r1
 8009b46:	4601      	mov	r1, r0
 8009b48:	4620      	mov	r0, r4
 8009b4a:	f7ff ff70 	bl	8009a2e <_strtol_l.isra.0>
 8009b4e:	b003      	add	sp, #12
 8009b50:	bd30      	pop	{r4, r5, pc}
 8009b52:	bf00      	nop
 8009b54:	20000010 	.word	0x20000010
 8009b58:	20000104 	.word	0x20000104

08009b5c <__locale_ctype_ptr_l>:
 8009b5c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009b60:	4770      	bx	lr
	...

08009b64 <malloc>:
 8009b64:	4b02      	ldr	r3, [pc, #8]	; (8009b70 <malloc+0xc>)
 8009b66:	4601      	mov	r1, r0
 8009b68:	6818      	ldr	r0, [r3, #0]
 8009b6a:	f000 b803 	b.w	8009b74 <_malloc_r>
 8009b6e:	bf00      	nop
 8009b70:	20000010 	.word	0x20000010

08009b74 <_malloc_r>:
 8009b74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b78:	f101 040b 	add.w	r4, r1, #11
 8009b7c:	2c16      	cmp	r4, #22
 8009b7e:	4681      	mov	r9, r0
 8009b80:	d907      	bls.n	8009b92 <_malloc_r+0x1e>
 8009b82:	f034 0407 	bics.w	r4, r4, #7
 8009b86:	d505      	bpl.n	8009b94 <_malloc_r+0x20>
 8009b88:	230c      	movs	r3, #12
 8009b8a:	f8c9 3000 	str.w	r3, [r9]
 8009b8e:	2600      	movs	r6, #0
 8009b90:	e131      	b.n	8009df6 <_malloc_r+0x282>
 8009b92:	2410      	movs	r4, #16
 8009b94:	428c      	cmp	r4, r1
 8009b96:	d3f7      	bcc.n	8009b88 <_malloc_r+0x14>
 8009b98:	4648      	mov	r0, r9
 8009b9a:	f000 fa0b 	bl	8009fb4 <__malloc_lock>
 8009b9e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8009ba2:	4d9c      	ldr	r5, [pc, #624]	; (8009e14 <_malloc_r+0x2a0>)
 8009ba4:	d236      	bcs.n	8009c14 <_malloc_r+0xa0>
 8009ba6:	f104 0208 	add.w	r2, r4, #8
 8009baa:	442a      	add	r2, r5
 8009bac:	f1a2 0108 	sub.w	r1, r2, #8
 8009bb0:	6856      	ldr	r6, [r2, #4]
 8009bb2:	428e      	cmp	r6, r1
 8009bb4:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8009bb8:	d102      	bne.n	8009bc0 <_malloc_r+0x4c>
 8009bba:	68d6      	ldr	r6, [r2, #12]
 8009bbc:	42b2      	cmp	r2, r6
 8009bbe:	d010      	beq.n	8009be2 <_malloc_r+0x6e>
 8009bc0:	6873      	ldr	r3, [r6, #4]
 8009bc2:	68f2      	ldr	r2, [r6, #12]
 8009bc4:	68b1      	ldr	r1, [r6, #8]
 8009bc6:	f023 0303 	bic.w	r3, r3, #3
 8009bca:	60ca      	str	r2, [r1, #12]
 8009bcc:	4433      	add	r3, r6
 8009bce:	6091      	str	r1, [r2, #8]
 8009bd0:	685a      	ldr	r2, [r3, #4]
 8009bd2:	f042 0201 	orr.w	r2, r2, #1
 8009bd6:	605a      	str	r2, [r3, #4]
 8009bd8:	4648      	mov	r0, r9
 8009bda:	f000 f9f1 	bl	8009fc0 <__malloc_unlock>
 8009bde:	3608      	adds	r6, #8
 8009be0:	e109      	b.n	8009df6 <_malloc_r+0x282>
 8009be2:	3302      	adds	r3, #2
 8009be4:	4a8c      	ldr	r2, [pc, #560]	; (8009e18 <_malloc_r+0x2a4>)
 8009be6:	692e      	ldr	r6, [r5, #16]
 8009be8:	4296      	cmp	r6, r2
 8009bea:	4611      	mov	r1, r2
 8009bec:	d06d      	beq.n	8009cca <_malloc_r+0x156>
 8009bee:	6870      	ldr	r0, [r6, #4]
 8009bf0:	f020 0003 	bic.w	r0, r0, #3
 8009bf4:	1b07      	subs	r7, r0, r4
 8009bf6:	2f0f      	cmp	r7, #15
 8009bf8:	dd47      	ble.n	8009c8a <_malloc_r+0x116>
 8009bfa:	1933      	adds	r3, r6, r4
 8009bfc:	f044 0401 	orr.w	r4, r4, #1
 8009c00:	6074      	str	r4, [r6, #4]
 8009c02:	616b      	str	r3, [r5, #20]
 8009c04:	612b      	str	r3, [r5, #16]
 8009c06:	60da      	str	r2, [r3, #12]
 8009c08:	609a      	str	r2, [r3, #8]
 8009c0a:	f047 0201 	orr.w	r2, r7, #1
 8009c0e:	605a      	str	r2, [r3, #4]
 8009c10:	5037      	str	r7, [r6, r0]
 8009c12:	e7e1      	b.n	8009bd8 <_malloc_r+0x64>
 8009c14:	0a63      	lsrs	r3, r4, #9
 8009c16:	d02a      	beq.n	8009c6e <_malloc_r+0xfa>
 8009c18:	2b04      	cmp	r3, #4
 8009c1a:	d812      	bhi.n	8009c42 <_malloc_r+0xce>
 8009c1c:	09a3      	lsrs	r3, r4, #6
 8009c1e:	3338      	adds	r3, #56	; 0x38
 8009c20:	1c5a      	adds	r2, r3, #1
 8009c22:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8009c26:	f1a2 0008 	sub.w	r0, r2, #8
 8009c2a:	6856      	ldr	r6, [r2, #4]
 8009c2c:	4286      	cmp	r6, r0
 8009c2e:	d006      	beq.n	8009c3e <_malloc_r+0xca>
 8009c30:	6872      	ldr	r2, [r6, #4]
 8009c32:	f022 0203 	bic.w	r2, r2, #3
 8009c36:	1b11      	subs	r1, r2, r4
 8009c38:	290f      	cmp	r1, #15
 8009c3a:	dd1c      	ble.n	8009c76 <_malloc_r+0x102>
 8009c3c:	3b01      	subs	r3, #1
 8009c3e:	3301      	adds	r3, #1
 8009c40:	e7d0      	b.n	8009be4 <_malloc_r+0x70>
 8009c42:	2b14      	cmp	r3, #20
 8009c44:	d801      	bhi.n	8009c4a <_malloc_r+0xd6>
 8009c46:	335b      	adds	r3, #91	; 0x5b
 8009c48:	e7ea      	b.n	8009c20 <_malloc_r+0xac>
 8009c4a:	2b54      	cmp	r3, #84	; 0x54
 8009c4c:	d802      	bhi.n	8009c54 <_malloc_r+0xe0>
 8009c4e:	0b23      	lsrs	r3, r4, #12
 8009c50:	336e      	adds	r3, #110	; 0x6e
 8009c52:	e7e5      	b.n	8009c20 <_malloc_r+0xac>
 8009c54:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8009c58:	d802      	bhi.n	8009c60 <_malloc_r+0xec>
 8009c5a:	0be3      	lsrs	r3, r4, #15
 8009c5c:	3377      	adds	r3, #119	; 0x77
 8009c5e:	e7df      	b.n	8009c20 <_malloc_r+0xac>
 8009c60:	f240 5254 	movw	r2, #1364	; 0x554
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d804      	bhi.n	8009c72 <_malloc_r+0xfe>
 8009c68:	0ca3      	lsrs	r3, r4, #18
 8009c6a:	337c      	adds	r3, #124	; 0x7c
 8009c6c:	e7d8      	b.n	8009c20 <_malloc_r+0xac>
 8009c6e:	233f      	movs	r3, #63	; 0x3f
 8009c70:	e7d6      	b.n	8009c20 <_malloc_r+0xac>
 8009c72:	237e      	movs	r3, #126	; 0x7e
 8009c74:	e7d4      	b.n	8009c20 <_malloc_r+0xac>
 8009c76:	2900      	cmp	r1, #0
 8009c78:	68f1      	ldr	r1, [r6, #12]
 8009c7a:	db04      	blt.n	8009c86 <_malloc_r+0x112>
 8009c7c:	68b3      	ldr	r3, [r6, #8]
 8009c7e:	60d9      	str	r1, [r3, #12]
 8009c80:	608b      	str	r3, [r1, #8]
 8009c82:	18b3      	adds	r3, r6, r2
 8009c84:	e7a4      	b.n	8009bd0 <_malloc_r+0x5c>
 8009c86:	460e      	mov	r6, r1
 8009c88:	e7d0      	b.n	8009c2c <_malloc_r+0xb8>
 8009c8a:	2f00      	cmp	r7, #0
 8009c8c:	616a      	str	r2, [r5, #20]
 8009c8e:	612a      	str	r2, [r5, #16]
 8009c90:	db05      	blt.n	8009c9e <_malloc_r+0x12a>
 8009c92:	4430      	add	r0, r6
 8009c94:	6843      	ldr	r3, [r0, #4]
 8009c96:	f043 0301 	orr.w	r3, r3, #1
 8009c9a:	6043      	str	r3, [r0, #4]
 8009c9c:	e79c      	b.n	8009bd8 <_malloc_r+0x64>
 8009c9e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009ca2:	d244      	bcs.n	8009d2e <_malloc_r+0x1ba>
 8009ca4:	08c0      	lsrs	r0, r0, #3
 8009ca6:	1087      	asrs	r7, r0, #2
 8009ca8:	2201      	movs	r2, #1
 8009caa:	fa02 f707 	lsl.w	r7, r2, r7
 8009cae:	686a      	ldr	r2, [r5, #4]
 8009cb0:	3001      	adds	r0, #1
 8009cb2:	433a      	orrs	r2, r7
 8009cb4:	606a      	str	r2, [r5, #4]
 8009cb6:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8009cba:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8009cbe:	60b7      	str	r7, [r6, #8]
 8009cc0:	3a08      	subs	r2, #8
 8009cc2:	60f2      	str	r2, [r6, #12]
 8009cc4:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8009cc8:	60fe      	str	r6, [r7, #12]
 8009cca:	2001      	movs	r0, #1
 8009ccc:	109a      	asrs	r2, r3, #2
 8009cce:	fa00 f202 	lsl.w	r2, r0, r2
 8009cd2:	6868      	ldr	r0, [r5, #4]
 8009cd4:	4282      	cmp	r2, r0
 8009cd6:	f200 80a1 	bhi.w	8009e1c <_malloc_r+0x2a8>
 8009cda:	4202      	tst	r2, r0
 8009cdc:	d106      	bne.n	8009cec <_malloc_r+0x178>
 8009cde:	f023 0303 	bic.w	r3, r3, #3
 8009ce2:	0052      	lsls	r2, r2, #1
 8009ce4:	4202      	tst	r2, r0
 8009ce6:	f103 0304 	add.w	r3, r3, #4
 8009cea:	d0fa      	beq.n	8009ce2 <_malloc_r+0x16e>
 8009cec:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8009cf0:	46e0      	mov	r8, ip
 8009cf2:	469e      	mov	lr, r3
 8009cf4:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8009cf8:	4546      	cmp	r6, r8
 8009cfa:	d153      	bne.n	8009da4 <_malloc_r+0x230>
 8009cfc:	f10e 0e01 	add.w	lr, lr, #1
 8009d00:	f01e 0f03 	tst.w	lr, #3
 8009d04:	f108 0808 	add.w	r8, r8, #8
 8009d08:	d1f4      	bne.n	8009cf4 <_malloc_r+0x180>
 8009d0a:	0798      	lsls	r0, r3, #30
 8009d0c:	d179      	bne.n	8009e02 <_malloc_r+0x28e>
 8009d0e:	686b      	ldr	r3, [r5, #4]
 8009d10:	ea23 0302 	bic.w	r3, r3, r2
 8009d14:	606b      	str	r3, [r5, #4]
 8009d16:	6868      	ldr	r0, [r5, #4]
 8009d18:	0052      	lsls	r2, r2, #1
 8009d1a:	4282      	cmp	r2, r0
 8009d1c:	d87e      	bhi.n	8009e1c <_malloc_r+0x2a8>
 8009d1e:	2a00      	cmp	r2, #0
 8009d20:	d07c      	beq.n	8009e1c <_malloc_r+0x2a8>
 8009d22:	4673      	mov	r3, lr
 8009d24:	4202      	tst	r2, r0
 8009d26:	d1e1      	bne.n	8009cec <_malloc_r+0x178>
 8009d28:	3304      	adds	r3, #4
 8009d2a:	0052      	lsls	r2, r2, #1
 8009d2c:	e7fa      	b.n	8009d24 <_malloc_r+0x1b0>
 8009d2e:	0a42      	lsrs	r2, r0, #9
 8009d30:	2a04      	cmp	r2, #4
 8009d32:	d815      	bhi.n	8009d60 <_malloc_r+0x1ec>
 8009d34:	0982      	lsrs	r2, r0, #6
 8009d36:	3238      	adds	r2, #56	; 0x38
 8009d38:	1c57      	adds	r7, r2, #1
 8009d3a:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8009d3e:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8009d42:	45be      	cmp	lr, r7
 8009d44:	d126      	bne.n	8009d94 <_malloc_r+0x220>
 8009d46:	2001      	movs	r0, #1
 8009d48:	1092      	asrs	r2, r2, #2
 8009d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8009d4e:	6868      	ldr	r0, [r5, #4]
 8009d50:	4310      	orrs	r0, r2
 8009d52:	6068      	str	r0, [r5, #4]
 8009d54:	f8c6 e00c 	str.w	lr, [r6, #12]
 8009d58:	60b7      	str	r7, [r6, #8]
 8009d5a:	f8ce 6008 	str.w	r6, [lr, #8]
 8009d5e:	e7b3      	b.n	8009cc8 <_malloc_r+0x154>
 8009d60:	2a14      	cmp	r2, #20
 8009d62:	d801      	bhi.n	8009d68 <_malloc_r+0x1f4>
 8009d64:	325b      	adds	r2, #91	; 0x5b
 8009d66:	e7e7      	b.n	8009d38 <_malloc_r+0x1c4>
 8009d68:	2a54      	cmp	r2, #84	; 0x54
 8009d6a:	d802      	bhi.n	8009d72 <_malloc_r+0x1fe>
 8009d6c:	0b02      	lsrs	r2, r0, #12
 8009d6e:	326e      	adds	r2, #110	; 0x6e
 8009d70:	e7e2      	b.n	8009d38 <_malloc_r+0x1c4>
 8009d72:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009d76:	d802      	bhi.n	8009d7e <_malloc_r+0x20a>
 8009d78:	0bc2      	lsrs	r2, r0, #15
 8009d7a:	3277      	adds	r2, #119	; 0x77
 8009d7c:	e7dc      	b.n	8009d38 <_malloc_r+0x1c4>
 8009d7e:	f240 5754 	movw	r7, #1364	; 0x554
 8009d82:	42ba      	cmp	r2, r7
 8009d84:	bf9a      	itte	ls
 8009d86:	0c82      	lsrls	r2, r0, #18
 8009d88:	327c      	addls	r2, #124	; 0x7c
 8009d8a:	227e      	movhi	r2, #126	; 0x7e
 8009d8c:	e7d4      	b.n	8009d38 <_malloc_r+0x1c4>
 8009d8e:	68bf      	ldr	r7, [r7, #8]
 8009d90:	45be      	cmp	lr, r7
 8009d92:	d004      	beq.n	8009d9e <_malloc_r+0x22a>
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	f022 0203 	bic.w	r2, r2, #3
 8009d9a:	4290      	cmp	r0, r2
 8009d9c:	d3f7      	bcc.n	8009d8e <_malloc_r+0x21a>
 8009d9e:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8009da2:	e7d7      	b.n	8009d54 <_malloc_r+0x1e0>
 8009da4:	6870      	ldr	r0, [r6, #4]
 8009da6:	68f7      	ldr	r7, [r6, #12]
 8009da8:	f020 0003 	bic.w	r0, r0, #3
 8009dac:	eba0 0a04 	sub.w	sl, r0, r4
 8009db0:	f1ba 0f0f 	cmp.w	sl, #15
 8009db4:	dd10      	ble.n	8009dd8 <_malloc_r+0x264>
 8009db6:	68b2      	ldr	r2, [r6, #8]
 8009db8:	1933      	adds	r3, r6, r4
 8009dba:	f044 0401 	orr.w	r4, r4, #1
 8009dbe:	6074      	str	r4, [r6, #4]
 8009dc0:	60d7      	str	r7, [r2, #12]
 8009dc2:	60ba      	str	r2, [r7, #8]
 8009dc4:	f04a 0201 	orr.w	r2, sl, #1
 8009dc8:	616b      	str	r3, [r5, #20]
 8009dca:	612b      	str	r3, [r5, #16]
 8009dcc:	60d9      	str	r1, [r3, #12]
 8009dce:	6099      	str	r1, [r3, #8]
 8009dd0:	605a      	str	r2, [r3, #4]
 8009dd2:	f846 a000 	str.w	sl, [r6, r0]
 8009dd6:	e6ff      	b.n	8009bd8 <_malloc_r+0x64>
 8009dd8:	f1ba 0f00 	cmp.w	sl, #0
 8009ddc:	db0f      	blt.n	8009dfe <_malloc_r+0x28a>
 8009dde:	4430      	add	r0, r6
 8009de0:	6843      	ldr	r3, [r0, #4]
 8009de2:	f043 0301 	orr.w	r3, r3, #1
 8009de6:	6043      	str	r3, [r0, #4]
 8009de8:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8009dec:	4648      	mov	r0, r9
 8009dee:	60df      	str	r7, [r3, #12]
 8009df0:	60bb      	str	r3, [r7, #8]
 8009df2:	f000 f8e5 	bl	8009fc0 <__malloc_unlock>
 8009df6:	4630      	mov	r0, r6
 8009df8:	b003      	add	sp, #12
 8009dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dfe:	463e      	mov	r6, r7
 8009e00:	e77a      	b.n	8009cf8 <_malloc_r+0x184>
 8009e02:	f85c 0908 	ldr.w	r0, [ip], #-8
 8009e06:	4584      	cmp	ip, r0
 8009e08:	f103 33ff 	add.w	r3, r3, #4294967295
 8009e0c:	f43f af7d 	beq.w	8009d0a <_malloc_r+0x196>
 8009e10:	e781      	b.n	8009d16 <_malloc_r+0x1a2>
 8009e12:	bf00      	nop
 8009e14:	20000270 	.word	0x20000270
 8009e18:	20000278 	.word	0x20000278
 8009e1c:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8009e20:	f8db 6004 	ldr.w	r6, [fp, #4]
 8009e24:	f026 0603 	bic.w	r6, r6, #3
 8009e28:	42b4      	cmp	r4, r6
 8009e2a:	d803      	bhi.n	8009e34 <_malloc_r+0x2c0>
 8009e2c:	1b33      	subs	r3, r6, r4
 8009e2e:	2b0f      	cmp	r3, #15
 8009e30:	f300 8096 	bgt.w	8009f60 <_malloc_r+0x3ec>
 8009e34:	4a4f      	ldr	r2, [pc, #316]	; (8009f74 <_malloc_r+0x400>)
 8009e36:	6817      	ldr	r7, [r2, #0]
 8009e38:	4a4f      	ldr	r2, [pc, #316]	; (8009f78 <_malloc_r+0x404>)
 8009e3a:	6811      	ldr	r1, [r2, #0]
 8009e3c:	3710      	adds	r7, #16
 8009e3e:	3101      	adds	r1, #1
 8009e40:	eb0b 0306 	add.w	r3, fp, r6
 8009e44:	4427      	add	r7, r4
 8009e46:	d005      	beq.n	8009e54 <_malloc_r+0x2e0>
 8009e48:	494c      	ldr	r1, [pc, #304]	; (8009f7c <_malloc_r+0x408>)
 8009e4a:	3901      	subs	r1, #1
 8009e4c:	440f      	add	r7, r1
 8009e4e:	3101      	adds	r1, #1
 8009e50:	4249      	negs	r1, r1
 8009e52:	400f      	ands	r7, r1
 8009e54:	4639      	mov	r1, r7
 8009e56:	4648      	mov	r0, r9
 8009e58:	9201      	str	r2, [sp, #4]
 8009e5a:	9300      	str	r3, [sp, #0]
 8009e5c:	f000 f8b6 	bl	8009fcc <_sbrk_r>
 8009e60:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009e64:	4680      	mov	r8, r0
 8009e66:	d056      	beq.n	8009f16 <_malloc_r+0x3a2>
 8009e68:	9b00      	ldr	r3, [sp, #0]
 8009e6a:	9a01      	ldr	r2, [sp, #4]
 8009e6c:	4283      	cmp	r3, r0
 8009e6e:	d901      	bls.n	8009e74 <_malloc_r+0x300>
 8009e70:	45ab      	cmp	fp, r5
 8009e72:	d150      	bne.n	8009f16 <_malloc_r+0x3a2>
 8009e74:	4842      	ldr	r0, [pc, #264]	; (8009f80 <_malloc_r+0x40c>)
 8009e76:	6801      	ldr	r1, [r0, #0]
 8009e78:	4543      	cmp	r3, r8
 8009e7a:	eb07 0e01 	add.w	lr, r7, r1
 8009e7e:	f8c0 e000 	str.w	lr, [r0]
 8009e82:	4940      	ldr	r1, [pc, #256]	; (8009f84 <_malloc_r+0x410>)
 8009e84:	4682      	mov	sl, r0
 8009e86:	d113      	bne.n	8009eb0 <_malloc_r+0x33c>
 8009e88:	420b      	tst	r3, r1
 8009e8a:	d111      	bne.n	8009eb0 <_malloc_r+0x33c>
 8009e8c:	68ab      	ldr	r3, [r5, #8]
 8009e8e:	443e      	add	r6, r7
 8009e90:	f046 0601 	orr.w	r6, r6, #1
 8009e94:	605e      	str	r6, [r3, #4]
 8009e96:	4a3c      	ldr	r2, [pc, #240]	; (8009f88 <_malloc_r+0x414>)
 8009e98:	f8da 3000 	ldr.w	r3, [sl]
 8009e9c:	6811      	ldr	r1, [r2, #0]
 8009e9e:	428b      	cmp	r3, r1
 8009ea0:	bf88      	it	hi
 8009ea2:	6013      	strhi	r3, [r2, #0]
 8009ea4:	4a39      	ldr	r2, [pc, #228]	; (8009f8c <_malloc_r+0x418>)
 8009ea6:	6811      	ldr	r1, [r2, #0]
 8009ea8:	428b      	cmp	r3, r1
 8009eaa:	bf88      	it	hi
 8009eac:	6013      	strhi	r3, [r2, #0]
 8009eae:	e032      	b.n	8009f16 <_malloc_r+0x3a2>
 8009eb0:	6810      	ldr	r0, [r2, #0]
 8009eb2:	3001      	adds	r0, #1
 8009eb4:	bf1b      	ittet	ne
 8009eb6:	eba8 0303 	subne.w	r3, r8, r3
 8009eba:	4473      	addne	r3, lr
 8009ebc:	f8c2 8000 	streq.w	r8, [r2]
 8009ec0:	f8ca 3000 	strne.w	r3, [sl]
 8009ec4:	f018 0007 	ands.w	r0, r8, #7
 8009ec8:	bf1c      	itt	ne
 8009eca:	f1c0 0008 	rsbne	r0, r0, #8
 8009ece:	4480      	addne	r8, r0
 8009ed0:	4b2a      	ldr	r3, [pc, #168]	; (8009f7c <_malloc_r+0x408>)
 8009ed2:	4447      	add	r7, r8
 8009ed4:	4418      	add	r0, r3
 8009ed6:	400f      	ands	r7, r1
 8009ed8:	1bc7      	subs	r7, r0, r7
 8009eda:	4639      	mov	r1, r7
 8009edc:	4648      	mov	r0, r9
 8009ede:	f000 f875 	bl	8009fcc <_sbrk_r>
 8009ee2:	1c43      	adds	r3, r0, #1
 8009ee4:	bf08      	it	eq
 8009ee6:	4640      	moveq	r0, r8
 8009ee8:	f8da 3000 	ldr.w	r3, [sl]
 8009eec:	f8c5 8008 	str.w	r8, [r5, #8]
 8009ef0:	bf08      	it	eq
 8009ef2:	2700      	moveq	r7, #0
 8009ef4:	eba0 0008 	sub.w	r0, r0, r8
 8009ef8:	443b      	add	r3, r7
 8009efa:	4407      	add	r7, r0
 8009efc:	f047 0701 	orr.w	r7, r7, #1
 8009f00:	45ab      	cmp	fp, r5
 8009f02:	f8ca 3000 	str.w	r3, [sl]
 8009f06:	f8c8 7004 	str.w	r7, [r8, #4]
 8009f0a:	d0c4      	beq.n	8009e96 <_malloc_r+0x322>
 8009f0c:	2e0f      	cmp	r6, #15
 8009f0e:	d810      	bhi.n	8009f32 <_malloc_r+0x3be>
 8009f10:	2301      	movs	r3, #1
 8009f12:	f8c8 3004 	str.w	r3, [r8, #4]
 8009f16:	68ab      	ldr	r3, [r5, #8]
 8009f18:	685a      	ldr	r2, [r3, #4]
 8009f1a:	f022 0203 	bic.w	r2, r2, #3
 8009f1e:	4294      	cmp	r4, r2
 8009f20:	eba2 0304 	sub.w	r3, r2, r4
 8009f24:	d801      	bhi.n	8009f2a <_malloc_r+0x3b6>
 8009f26:	2b0f      	cmp	r3, #15
 8009f28:	dc1a      	bgt.n	8009f60 <_malloc_r+0x3ec>
 8009f2a:	4648      	mov	r0, r9
 8009f2c:	f000 f848 	bl	8009fc0 <__malloc_unlock>
 8009f30:	e62d      	b.n	8009b8e <_malloc_r+0x1a>
 8009f32:	f8db 3004 	ldr.w	r3, [fp, #4]
 8009f36:	3e0c      	subs	r6, #12
 8009f38:	f026 0607 	bic.w	r6, r6, #7
 8009f3c:	f003 0301 	and.w	r3, r3, #1
 8009f40:	4333      	orrs	r3, r6
 8009f42:	f8cb 3004 	str.w	r3, [fp, #4]
 8009f46:	eb0b 0306 	add.w	r3, fp, r6
 8009f4a:	2205      	movs	r2, #5
 8009f4c:	2e0f      	cmp	r6, #15
 8009f4e:	605a      	str	r2, [r3, #4]
 8009f50:	609a      	str	r2, [r3, #8]
 8009f52:	d9a0      	bls.n	8009e96 <_malloc_r+0x322>
 8009f54:	f10b 0108 	add.w	r1, fp, #8
 8009f58:	4648      	mov	r0, r9
 8009f5a:	f000 f8ab 	bl	800a0b4 <_free_r>
 8009f5e:	e79a      	b.n	8009e96 <_malloc_r+0x322>
 8009f60:	68ae      	ldr	r6, [r5, #8]
 8009f62:	f044 0201 	orr.w	r2, r4, #1
 8009f66:	4434      	add	r4, r6
 8009f68:	f043 0301 	orr.w	r3, r3, #1
 8009f6c:	6072      	str	r2, [r6, #4]
 8009f6e:	60ac      	str	r4, [r5, #8]
 8009f70:	6063      	str	r3, [r4, #4]
 8009f72:	e631      	b.n	8009bd8 <_malloc_r+0x64>
 8009f74:	200006d0 	.word	0x200006d0
 8009f78:	20000678 	.word	0x20000678
 8009f7c:	00000080 	.word	0x00000080
 8009f80:	200006a0 	.word	0x200006a0
 8009f84:	0000007f 	.word	0x0000007f
 8009f88:	200006c8 	.word	0x200006c8
 8009f8c:	200006cc 	.word	0x200006cc

08009f90 <__ascii_mbtowc>:
 8009f90:	b082      	sub	sp, #8
 8009f92:	b901      	cbnz	r1, 8009f96 <__ascii_mbtowc+0x6>
 8009f94:	a901      	add	r1, sp, #4
 8009f96:	b142      	cbz	r2, 8009faa <__ascii_mbtowc+0x1a>
 8009f98:	b14b      	cbz	r3, 8009fae <__ascii_mbtowc+0x1e>
 8009f9a:	7813      	ldrb	r3, [r2, #0]
 8009f9c:	600b      	str	r3, [r1, #0]
 8009f9e:	7812      	ldrb	r2, [r2, #0]
 8009fa0:	1c10      	adds	r0, r2, #0
 8009fa2:	bf18      	it	ne
 8009fa4:	2001      	movne	r0, #1
 8009fa6:	b002      	add	sp, #8
 8009fa8:	4770      	bx	lr
 8009faa:	4610      	mov	r0, r2
 8009fac:	e7fb      	b.n	8009fa6 <__ascii_mbtowc+0x16>
 8009fae:	f06f 0001 	mvn.w	r0, #1
 8009fb2:	e7f8      	b.n	8009fa6 <__ascii_mbtowc+0x16>

08009fb4 <__malloc_lock>:
 8009fb4:	4801      	ldr	r0, [pc, #4]	; (8009fbc <__malloc_lock+0x8>)
 8009fb6:	f000 b939 	b.w	800a22c <__retarget_lock_acquire_recursive>
 8009fba:	bf00      	nop
 8009fbc:	20013980 	.word	0x20013980

08009fc0 <__malloc_unlock>:
 8009fc0:	4801      	ldr	r0, [pc, #4]	; (8009fc8 <__malloc_unlock+0x8>)
 8009fc2:	f000 b934 	b.w	800a22e <__retarget_lock_release_recursive>
 8009fc6:	bf00      	nop
 8009fc8:	20013980 	.word	0x20013980

08009fcc <_sbrk_r>:
 8009fcc:	b538      	push	{r3, r4, r5, lr}
 8009fce:	4c06      	ldr	r4, [pc, #24]	; (8009fe8 <_sbrk_r+0x1c>)
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	4605      	mov	r5, r0
 8009fd4:	4608      	mov	r0, r1
 8009fd6:	6023      	str	r3, [r4, #0]
 8009fd8:	f000 f92a 	bl	800a230 <_sbrk>
 8009fdc:	1c43      	adds	r3, r0, #1
 8009fde:	d102      	bne.n	8009fe6 <_sbrk_r+0x1a>
 8009fe0:	6823      	ldr	r3, [r4, #0]
 8009fe2:	b103      	cbz	r3, 8009fe6 <_sbrk_r+0x1a>
 8009fe4:	602b      	str	r3, [r5, #0]
 8009fe6:	bd38      	pop	{r3, r4, r5, pc}
 8009fe8:	20013988 	.word	0x20013988

08009fec <__ascii_wctomb>:
 8009fec:	b149      	cbz	r1, 800a002 <__ascii_wctomb+0x16>
 8009fee:	2aff      	cmp	r2, #255	; 0xff
 8009ff0:	bf85      	ittet	hi
 8009ff2:	238a      	movhi	r3, #138	; 0x8a
 8009ff4:	6003      	strhi	r3, [r0, #0]
 8009ff6:	700a      	strbls	r2, [r1, #0]
 8009ff8:	f04f 30ff 	movhi.w	r0, #4294967295
 8009ffc:	bf98      	it	ls
 8009ffe:	2001      	movls	r0, #1
 800a000:	4770      	bx	lr
 800a002:	4608      	mov	r0, r1
 800a004:	4770      	bx	lr
	...

0800a008 <_malloc_trim_r>:
 800a008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a00c:	4f25      	ldr	r7, [pc, #148]	; (800a0a4 <_malloc_trim_r+0x9c>)
 800a00e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800a0b0 <_malloc_trim_r+0xa8>
 800a012:	4689      	mov	r9, r1
 800a014:	4606      	mov	r6, r0
 800a016:	f7ff ffcd 	bl	8009fb4 <__malloc_lock>
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	685d      	ldr	r5, [r3, #4]
 800a01e:	f1a8 0411 	sub.w	r4, r8, #17
 800a022:	f025 0503 	bic.w	r5, r5, #3
 800a026:	eba4 0409 	sub.w	r4, r4, r9
 800a02a:	442c      	add	r4, r5
 800a02c:	fbb4 f4f8 	udiv	r4, r4, r8
 800a030:	3c01      	subs	r4, #1
 800a032:	fb08 f404 	mul.w	r4, r8, r4
 800a036:	4544      	cmp	r4, r8
 800a038:	da05      	bge.n	800a046 <_malloc_trim_r+0x3e>
 800a03a:	4630      	mov	r0, r6
 800a03c:	f7ff ffc0 	bl	8009fc0 <__malloc_unlock>
 800a040:	2000      	movs	r0, #0
 800a042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a046:	2100      	movs	r1, #0
 800a048:	4630      	mov	r0, r6
 800a04a:	f7ff ffbf 	bl	8009fcc <_sbrk_r>
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	442b      	add	r3, r5
 800a052:	4298      	cmp	r0, r3
 800a054:	d1f1      	bne.n	800a03a <_malloc_trim_r+0x32>
 800a056:	4261      	negs	r1, r4
 800a058:	4630      	mov	r0, r6
 800a05a:	f7ff ffb7 	bl	8009fcc <_sbrk_r>
 800a05e:	3001      	adds	r0, #1
 800a060:	d110      	bne.n	800a084 <_malloc_trim_r+0x7c>
 800a062:	2100      	movs	r1, #0
 800a064:	4630      	mov	r0, r6
 800a066:	f7ff ffb1 	bl	8009fcc <_sbrk_r>
 800a06a:	68ba      	ldr	r2, [r7, #8]
 800a06c:	1a83      	subs	r3, r0, r2
 800a06e:	2b0f      	cmp	r3, #15
 800a070:	dde3      	ble.n	800a03a <_malloc_trim_r+0x32>
 800a072:	490d      	ldr	r1, [pc, #52]	; (800a0a8 <_malloc_trim_r+0xa0>)
 800a074:	6809      	ldr	r1, [r1, #0]
 800a076:	1a40      	subs	r0, r0, r1
 800a078:	490c      	ldr	r1, [pc, #48]	; (800a0ac <_malloc_trim_r+0xa4>)
 800a07a:	f043 0301 	orr.w	r3, r3, #1
 800a07e:	6008      	str	r0, [r1, #0]
 800a080:	6053      	str	r3, [r2, #4]
 800a082:	e7da      	b.n	800a03a <_malloc_trim_r+0x32>
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	4a09      	ldr	r2, [pc, #36]	; (800a0ac <_malloc_trim_r+0xa4>)
 800a088:	1b2d      	subs	r5, r5, r4
 800a08a:	f045 0501 	orr.w	r5, r5, #1
 800a08e:	605d      	str	r5, [r3, #4]
 800a090:	6813      	ldr	r3, [r2, #0]
 800a092:	4630      	mov	r0, r6
 800a094:	1b1c      	subs	r4, r3, r4
 800a096:	6014      	str	r4, [r2, #0]
 800a098:	f7ff ff92 	bl	8009fc0 <__malloc_unlock>
 800a09c:	2001      	movs	r0, #1
 800a09e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0a2:	bf00      	nop
 800a0a4:	20000270 	.word	0x20000270
 800a0a8:	20000678 	.word	0x20000678
 800a0ac:	200006a0 	.word	0x200006a0
 800a0b0:	00000080 	.word	0x00000080

0800a0b4 <_free_r>:
 800a0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0b8:	4604      	mov	r4, r0
 800a0ba:	4688      	mov	r8, r1
 800a0bc:	2900      	cmp	r1, #0
 800a0be:	f000 80ab 	beq.w	800a218 <_free_r+0x164>
 800a0c2:	f7ff ff77 	bl	8009fb4 <__malloc_lock>
 800a0c6:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800a0ca:	4d54      	ldr	r5, [pc, #336]	; (800a21c <_free_r+0x168>)
 800a0cc:	f022 0001 	bic.w	r0, r2, #1
 800a0d0:	f1a8 0308 	sub.w	r3, r8, #8
 800a0d4:	181f      	adds	r7, r3, r0
 800a0d6:	68a9      	ldr	r1, [r5, #8]
 800a0d8:	687e      	ldr	r6, [r7, #4]
 800a0da:	428f      	cmp	r7, r1
 800a0dc:	f026 0603 	bic.w	r6, r6, #3
 800a0e0:	f002 0201 	and.w	r2, r2, #1
 800a0e4:	d11b      	bne.n	800a11e <_free_r+0x6a>
 800a0e6:	4430      	add	r0, r6
 800a0e8:	b93a      	cbnz	r2, 800a0fa <_free_r+0x46>
 800a0ea:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800a0ee:	1a9b      	subs	r3, r3, r2
 800a0f0:	4410      	add	r0, r2
 800a0f2:	6899      	ldr	r1, [r3, #8]
 800a0f4:	68da      	ldr	r2, [r3, #12]
 800a0f6:	60ca      	str	r2, [r1, #12]
 800a0f8:	6091      	str	r1, [r2, #8]
 800a0fa:	f040 0201 	orr.w	r2, r0, #1
 800a0fe:	605a      	str	r2, [r3, #4]
 800a100:	60ab      	str	r3, [r5, #8]
 800a102:	4b47      	ldr	r3, [pc, #284]	; (800a220 <_free_r+0x16c>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4298      	cmp	r0, r3
 800a108:	d304      	bcc.n	800a114 <_free_r+0x60>
 800a10a:	4b46      	ldr	r3, [pc, #280]	; (800a224 <_free_r+0x170>)
 800a10c:	4620      	mov	r0, r4
 800a10e:	6819      	ldr	r1, [r3, #0]
 800a110:	f7ff ff7a 	bl	800a008 <_malloc_trim_r>
 800a114:	4620      	mov	r0, r4
 800a116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a11a:	f7ff bf51 	b.w	8009fc0 <__malloc_unlock>
 800a11e:	607e      	str	r6, [r7, #4]
 800a120:	2a00      	cmp	r2, #0
 800a122:	d139      	bne.n	800a198 <_free_r+0xe4>
 800a124:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800a128:	1a5b      	subs	r3, r3, r1
 800a12a:	4408      	add	r0, r1
 800a12c:	6899      	ldr	r1, [r3, #8]
 800a12e:	f105 0e08 	add.w	lr, r5, #8
 800a132:	4571      	cmp	r1, lr
 800a134:	d032      	beq.n	800a19c <_free_r+0xe8>
 800a136:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800a13a:	f8c1 e00c 	str.w	lr, [r1, #12]
 800a13e:	f8ce 1008 	str.w	r1, [lr, #8]
 800a142:	19b9      	adds	r1, r7, r6
 800a144:	6849      	ldr	r1, [r1, #4]
 800a146:	07c9      	lsls	r1, r1, #31
 800a148:	d40a      	bmi.n	800a160 <_free_r+0xac>
 800a14a:	4430      	add	r0, r6
 800a14c:	68b9      	ldr	r1, [r7, #8]
 800a14e:	bb3a      	cbnz	r2, 800a1a0 <_free_r+0xec>
 800a150:	4e35      	ldr	r6, [pc, #212]	; (800a228 <_free_r+0x174>)
 800a152:	42b1      	cmp	r1, r6
 800a154:	d124      	bne.n	800a1a0 <_free_r+0xec>
 800a156:	616b      	str	r3, [r5, #20]
 800a158:	612b      	str	r3, [r5, #16]
 800a15a:	2201      	movs	r2, #1
 800a15c:	60d9      	str	r1, [r3, #12]
 800a15e:	6099      	str	r1, [r3, #8]
 800a160:	f040 0101 	orr.w	r1, r0, #1
 800a164:	6059      	str	r1, [r3, #4]
 800a166:	5018      	str	r0, [r3, r0]
 800a168:	2a00      	cmp	r2, #0
 800a16a:	d1d3      	bne.n	800a114 <_free_r+0x60>
 800a16c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800a170:	d21a      	bcs.n	800a1a8 <_free_r+0xf4>
 800a172:	08c0      	lsrs	r0, r0, #3
 800a174:	1081      	asrs	r1, r0, #2
 800a176:	2201      	movs	r2, #1
 800a178:	408a      	lsls	r2, r1
 800a17a:	6869      	ldr	r1, [r5, #4]
 800a17c:	3001      	adds	r0, #1
 800a17e:	430a      	orrs	r2, r1
 800a180:	606a      	str	r2, [r5, #4]
 800a182:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800a186:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800a18a:	6099      	str	r1, [r3, #8]
 800a18c:	3a08      	subs	r2, #8
 800a18e:	60da      	str	r2, [r3, #12]
 800a190:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800a194:	60cb      	str	r3, [r1, #12]
 800a196:	e7bd      	b.n	800a114 <_free_r+0x60>
 800a198:	2200      	movs	r2, #0
 800a19a:	e7d2      	b.n	800a142 <_free_r+0x8e>
 800a19c:	2201      	movs	r2, #1
 800a19e:	e7d0      	b.n	800a142 <_free_r+0x8e>
 800a1a0:	68fe      	ldr	r6, [r7, #12]
 800a1a2:	60ce      	str	r6, [r1, #12]
 800a1a4:	60b1      	str	r1, [r6, #8]
 800a1a6:	e7db      	b.n	800a160 <_free_r+0xac>
 800a1a8:	0a42      	lsrs	r2, r0, #9
 800a1aa:	2a04      	cmp	r2, #4
 800a1ac:	d813      	bhi.n	800a1d6 <_free_r+0x122>
 800a1ae:	0982      	lsrs	r2, r0, #6
 800a1b0:	3238      	adds	r2, #56	; 0x38
 800a1b2:	1c51      	adds	r1, r2, #1
 800a1b4:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800a1b8:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800a1bc:	428e      	cmp	r6, r1
 800a1be:	d124      	bne.n	800a20a <_free_r+0x156>
 800a1c0:	2001      	movs	r0, #1
 800a1c2:	1092      	asrs	r2, r2, #2
 800a1c4:	fa00 f202 	lsl.w	r2, r0, r2
 800a1c8:	6868      	ldr	r0, [r5, #4]
 800a1ca:	4302      	orrs	r2, r0
 800a1cc:	606a      	str	r2, [r5, #4]
 800a1ce:	60de      	str	r6, [r3, #12]
 800a1d0:	6099      	str	r1, [r3, #8]
 800a1d2:	60b3      	str	r3, [r6, #8]
 800a1d4:	e7de      	b.n	800a194 <_free_r+0xe0>
 800a1d6:	2a14      	cmp	r2, #20
 800a1d8:	d801      	bhi.n	800a1de <_free_r+0x12a>
 800a1da:	325b      	adds	r2, #91	; 0x5b
 800a1dc:	e7e9      	b.n	800a1b2 <_free_r+0xfe>
 800a1de:	2a54      	cmp	r2, #84	; 0x54
 800a1e0:	d802      	bhi.n	800a1e8 <_free_r+0x134>
 800a1e2:	0b02      	lsrs	r2, r0, #12
 800a1e4:	326e      	adds	r2, #110	; 0x6e
 800a1e6:	e7e4      	b.n	800a1b2 <_free_r+0xfe>
 800a1e8:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a1ec:	d802      	bhi.n	800a1f4 <_free_r+0x140>
 800a1ee:	0bc2      	lsrs	r2, r0, #15
 800a1f0:	3277      	adds	r2, #119	; 0x77
 800a1f2:	e7de      	b.n	800a1b2 <_free_r+0xfe>
 800a1f4:	f240 5154 	movw	r1, #1364	; 0x554
 800a1f8:	428a      	cmp	r2, r1
 800a1fa:	bf9a      	itte	ls
 800a1fc:	0c82      	lsrls	r2, r0, #18
 800a1fe:	327c      	addls	r2, #124	; 0x7c
 800a200:	227e      	movhi	r2, #126	; 0x7e
 800a202:	e7d6      	b.n	800a1b2 <_free_r+0xfe>
 800a204:	6889      	ldr	r1, [r1, #8]
 800a206:	428e      	cmp	r6, r1
 800a208:	d004      	beq.n	800a214 <_free_r+0x160>
 800a20a:	684a      	ldr	r2, [r1, #4]
 800a20c:	f022 0203 	bic.w	r2, r2, #3
 800a210:	4290      	cmp	r0, r2
 800a212:	d3f7      	bcc.n	800a204 <_free_r+0x150>
 800a214:	68ce      	ldr	r6, [r1, #12]
 800a216:	e7da      	b.n	800a1ce <_free_r+0x11a>
 800a218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a21c:	20000270 	.word	0x20000270
 800a220:	2000067c 	.word	0x2000067c
 800a224:	200006d0 	.word	0x200006d0
 800a228:	20000278 	.word	0x20000278

0800a22c <__retarget_lock_acquire_recursive>:
 800a22c:	4770      	bx	lr

0800a22e <__retarget_lock_release_recursive>:
 800a22e:	4770      	bx	lr

0800a230 <_sbrk>:
 800a230:	4b04      	ldr	r3, [pc, #16]	; (800a244 <_sbrk+0x14>)
 800a232:	6819      	ldr	r1, [r3, #0]
 800a234:	4602      	mov	r2, r0
 800a236:	b909      	cbnz	r1, 800a23c <_sbrk+0xc>
 800a238:	4903      	ldr	r1, [pc, #12]	; (800a248 <_sbrk+0x18>)
 800a23a:	6019      	str	r1, [r3, #0]
 800a23c:	6818      	ldr	r0, [r3, #0]
 800a23e:	4402      	add	r2, r0
 800a240:	601a      	str	r2, [r3, #0]
 800a242:	4770      	bx	lr
 800a244:	200006d4 	.word	0x200006d4
 800a248:	2001398c 	.word	0x2001398c

0800a24c <_init>:
 800a24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a24e:	bf00      	nop
 800a250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a252:	bc08      	pop	{r3}
 800a254:	469e      	mov	lr, r3
 800a256:	4770      	bx	lr

0800a258 <_fini>:
 800a258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a25a:	bf00      	nop
 800a25c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a25e:	bc08      	pop	{r3}
 800a260:	469e      	mov	lr, r3
 800a262:	4770      	bx	lr
