
Software_ontwikkeling_opdracht.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009090  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002cc  08009218  08009218  00019218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080094e4  080094e4  000194e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080094e8  080094e8  000194e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000680  20000000  080094ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020680  2**0
                  CONTENTS
  7 .bss          0001332c  20000680  20000680  00020680  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  200139ac  200139ac  00020680  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020680  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000bb67  00000000  00000000  000206b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001c58  00000000  00000000  0002c217  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000009a0  00000000  00000000  0002de70  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000898  00000000  00000000  0002e810  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004c25  00000000  00000000  0002f0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000031b1  00000000  00000000  00033ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00036e7e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002db0  00000000  00000000  00036efc  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00039cac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000680 	.word	0x20000680
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009200 	.word	0x08009200

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000684 	.word	0x20000684
 80001c4:	08009200 	.word	0x08009200

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032a:	f1a4 0401 	sub.w	r4, r4, #1
 800032e:	d1e9      	bne.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f092 0f00 	teq	r2, #0
 80004d6:	bf14      	ite	ne
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	e720      	b.n	8000330 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_ul2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f04f 0500 	mov.w	r5, #0
 80004fe:	e00a      	b.n	8000516 <__aeabi_l2d+0x16>

08000500 <__aeabi_l2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050e:	d502      	bpl.n	8000516 <__aeabi_l2d+0x16>
 8000510:	4240      	negs	r0, r0
 8000512:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000516:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000522:	f43f aedc 	beq.w	80002de <__adddf3+0xe6>
 8000526:	f04f 0203 	mov.w	r2, #3
 800052a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052e:	bf18      	it	ne
 8000530:	3203      	addne	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053e:	f1c2 0320 	rsb	r3, r2, #32
 8000542:	fa00 fc03 	lsl.w	ip, r0, r3
 8000546:	fa20 f002 	lsr.w	r0, r0, r2
 800054a:	fa01 fe03 	lsl.w	lr, r1, r3
 800054e:	ea40 000e 	orr.w	r0, r0, lr
 8000552:	fa21 f102 	lsr.w	r1, r1, r2
 8000556:	4414      	add	r4, r2
 8000558:	e6c1      	b.n	80002de <__adddf3+0xe6>
 800055a:	bf00      	nop

0800055c <__aeabi_dmul>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000562:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000566:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800056a:	bf1d      	ittte	ne
 800056c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000570:	ea94 0f0c 	teqne	r4, ip
 8000574:	ea95 0f0c 	teqne	r5, ip
 8000578:	f000 f8de 	bleq	8000738 <__aeabi_dmul+0x1dc>
 800057c:	442c      	add	r4, r5
 800057e:	ea81 0603 	eor.w	r6, r1, r3
 8000582:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000586:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800058a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058e:	bf18      	it	ne
 8000590:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800059c:	d038      	beq.n	8000610 <__aeabi_dmul+0xb4>
 800059e:	fba0 ce02 	umull	ip, lr, r0, r2
 80005a2:	f04f 0500 	mov.w	r5, #0
 80005a6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ae:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005b2:	f04f 0600 	mov.w	r6, #0
 80005b6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ba:	f09c 0f00 	teq	ip, #0
 80005be:	bf18      	it	ne
 80005c0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d0:	d204      	bcs.n	80005dc <__aeabi_dmul+0x80>
 80005d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d6:	416d      	adcs	r5, r5
 80005d8:	eb46 0606 	adc.w	r6, r6, r6
 80005dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f4:	bf88      	it	hi
 80005f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005fa:	d81e      	bhi.n	800063a <__aeabi_dmul+0xde>
 80005fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000614:	ea46 0101 	orr.w	r1, r6, r1
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	ea81 0103 	eor.w	r1, r1, r3
 8000620:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000624:	bfc2      	ittt	gt
 8000626:	ebd4 050c 	rsbsgt	r5, r4, ip
 800062a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062e:	bd70      	popgt	{r4, r5, r6, pc}
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f04f 0e00 	mov.w	lr, #0
 8000638:	3c01      	subs	r4, #1
 800063a:	f300 80ab 	bgt.w	8000794 <__aeabi_dmul+0x238>
 800063e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000642:	bfde      	ittt	le
 8000644:	2000      	movle	r0, #0
 8000646:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800064a:	bd70      	pople	{r4, r5, r6, pc}
 800064c:	f1c4 0400 	rsb	r4, r4, #0
 8000650:	3c20      	subs	r4, #32
 8000652:	da35      	bge.n	80006c0 <__aeabi_dmul+0x164>
 8000654:	340c      	adds	r4, #12
 8000656:	dc1b      	bgt.n	8000690 <__aeabi_dmul+0x134>
 8000658:	f104 0414 	add.w	r4, r4, #20
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f305 	lsl.w	r3, r0, r5
 8000664:	fa20 f004 	lsr.w	r0, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800067c:	fa21 f604 	lsr.w	r6, r1, r4
 8000680:	eb42 0106 	adc.w	r1, r2, r6
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f1c4 040c 	rsb	r4, r4, #12
 8000694:	f1c4 0520 	rsb	r5, r4, #32
 8000698:	fa00 f304 	lsl.w	r3, r0, r4
 800069c:	fa20 f005 	lsr.w	r0, r0, r5
 80006a0:	fa01 f204 	lsl.w	r2, r1, r4
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	f141 0100 	adc.w	r1, r1, #0
 80006b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b8:	bf08      	it	eq
 80006ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f205 	lsl.w	r2, r0, r5
 80006c8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006cc:	fa20 f304 	lsr.w	r3, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea43 0302 	orr.w	r3, r3, r2
 80006d8:	fa21 f004 	lsr.w	r0, r1, r4
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	fa21 f204 	lsr.w	r2, r1, r4
 80006e4:	ea20 0002 	bic.w	r0, r0, r2
 80006e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f094 0f00 	teq	r4, #0
 80006fc:	d10f      	bne.n	800071e <__aeabi_dmul+0x1c2>
 80006fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000702:	0040      	lsls	r0, r0, #1
 8000704:	eb41 0101 	adc.w	r1, r1, r1
 8000708:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800070c:	bf08      	it	eq
 800070e:	3c01      	subeq	r4, #1
 8000710:	d0f7      	beq.n	8000702 <__aeabi_dmul+0x1a6>
 8000712:	ea41 0106 	orr.w	r1, r1, r6
 8000716:	f095 0f00 	teq	r5, #0
 800071a:	bf18      	it	ne
 800071c:	4770      	bxne	lr
 800071e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000722:	0052      	lsls	r2, r2, #1
 8000724:	eb43 0303 	adc.w	r3, r3, r3
 8000728:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3d01      	subeq	r5, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1c6>
 8000732:	ea43 0306 	orr.w	r3, r3, r6
 8000736:	4770      	bx	lr
 8000738:	ea94 0f0c 	teq	r4, ip
 800073c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000740:	bf18      	it	ne
 8000742:	ea95 0f0c 	teqne	r5, ip
 8000746:	d00c      	beq.n	8000762 <__aeabi_dmul+0x206>
 8000748:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074c:	bf18      	it	ne
 800074e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000752:	d1d1      	bne.n	80006f8 <__aeabi_dmul+0x19c>
 8000754:	ea81 0103 	eor.w	r1, r1, r3
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800075c:	f04f 0000 	mov.w	r0, #0
 8000760:	bd70      	pop	{r4, r5, r6, pc}
 8000762:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000766:	bf06      	itte	eq
 8000768:	4610      	moveq	r0, r2
 800076a:	4619      	moveq	r1, r3
 800076c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000770:	d019      	beq.n	80007a6 <__aeabi_dmul+0x24a>
 8000772:	ea94 0f0c 	teq	r4, ip
 8000776:	d102      	bne.n	800077e <__aeabi_dmul+0x222>
 8000778:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800077c:	d113      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 800077e:	ea95 0f0c 	teq	r5, ip
 8000782:	d105      	bne.n	8000790 <__aeabi_dmul+0x234>
 8000784:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000788:	bf1c      	itt	ne
 800078a:	4610      	movne	r0, r2
 800078c:	4619      	movne	r1, r3
 800078e:	d10a      	bne.n	80007a6 <__aeabi_dmul+0x24a>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ae:	bd70      	pop	{r4, r5, r6, pc}

080007b0 <__aeabi_ddiv>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007be:	bf1d      	ittte	ne
 80007c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c4:	ea94 0f0c 	teqne	r4, ip
 80007c8:	ea95 0f0c 	teqne	r5, ip
 80007cc:	f000 f8a7 	bleq	800091e <__aeabi_ddiv+0x16e>
 80007d0:	eba4 0405 	sub.w	r4, r4, r5
 80007d4:	ea81 0e03 	eor.w	lr, r1, r3
 80007d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e0:	f000 8088 	beq.w	80008f4 <__aeabi_ddiv+0x144>
 80007e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000800:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000804:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000808:	429d      	cmp	r5, r3
 800080a:	bf08      	it	eq
 800080c:	4296      	cmpeq	r6, r2
 800080e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000812:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000816:	d202      	bcs.n	800081e <__aeabi_ddiv+0x6e>
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	1ab6      	subs	r6, r6, r2
 8000820:	eb65 0503 	sbc.w	r5, r5, r3
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000832:	ebb6 0e02 	subs.w	lr, r6, r2
 8000836:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083a:	bf22      	ittt	cs
 800083c:	1ab6      	subcs	r6, r6, r2
 800083e:	4675      	movcs	r5, lr
 8000840:	ea40 000c 	orrcs.w	r0, r0, ip
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	ebb6 0e02 	subs.w	lr, r6, r2
 800084e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000852:	bf22      	ittt	cs
 8000854:	1ab6      	subcs	r6, r6, r2
 8000856:	4675      	movcs	r5, lr
 8000858:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	ebb6 0e02 	subs.w	lr, r6, r2
 8000866:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086a:	bf22      	ittt	cs
 800086c:	1ab6      	subcs	r6, r6, r2
 800086e:	4675      	movcs	r5, lr
 8000870:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	ebb6 0e02 	subs.w	lr, r6, r2
 800087e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000882:	bf22      	ittt	cs
 8000884:	1ab6      	subcs	r6, r6, r2
 8000886:	4675      	movcs	r5, lr
 8000888:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800088c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000890:	d018      	beq.n	80008c4 <__aeabi_ddiv+0x114>
 8000892:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000896:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800089a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ae:	d1c0      	bne.n	8000832 <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	d10b      	bne.n	80008ce <__aeabi_ddiv+0x11e>
 80008b6:	ea41 0100 	orr.w	r1, r1, r0
 80008ba:	f04f 0000 	mov.w	r0, #0
 80008be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008c2:	e7b6      	b.n	8000832 <__aeabi_ddiv+0x82>
 80008c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c8:	bf04      	itt	eq
 80008ca:	4301      	orreq	r1, r0
 80008cc:	2000      	moveq	r0, #0
 80008ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d2:	bf88      	it	hi
 80008d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d8:	f63f aeaf 	bhi.w	800063a <__aeabi_dmul+0xde>
 80008dc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e0:	bf04      	itt	eq
 80008e2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ea:	f150 0000 	adcs.w	r0, r0, #0
 80008ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000900:	bfc2      	ittt	gt
 8000902:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000906:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090a:	bd70      	popgt	{r4, r5, r6, pc}
 800090c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000910:	f04f 0e00 	mov.w	lr, #0
 8000914:	3c01      	subs	r4, #1
 8000916:	e690      	b.n	800063a <__aeabi_dmul+0xde>
 8000918:	ea45 0e06 	orr.w	lr, r5, r6
 800091c:	e68d      	b.n	800063a <__aeabi_dmul+0xde>
 800091e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000922:	ea94 0f0c 	teq	r4, ip
 8000926:	bf08      	it	eq
 8000928:	ea95 0f0c 	teqeq	r5, ip
 800092c:	f43f af3b 	beq.w	80007a6 <__aeabi_dmul+0x24a>
 8000930:	ea94 0f0c 	teq	r4, ip
 8000934:	d10a      	bne.n	800094c <__aeabi_ddiv+0x19c>
 8000936:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800093a:	f47f af34 	bne.w	80007a6 <__aeabi_dmul+0x24a>
 800093e:	ea95 0f0c 	teq	r5, ip
 8000942:	f47f af25 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e72c      	b.n	80007a6 <__aeabi_dmul+0x24a>
 800094c:	ea95 0f0c 	teq	r5, ip
 8000950:	d106      	bne.n	8000960 <__aeabi_ddiv+0x1b0>
 8000952:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000956:	f43f aefd 	beq.w	8000754 <__aeabi_dmul+0x1f8>
 800095a:	4610      	mov	r0, r2
 800095c:	4619      	mov	r1, r3
 800095e:	e722      	b.n	80007a6 <__aeabi_dmul+0x24a>
 8000960:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000964:	bf18      	it	ne
 8000966:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800096a:	f47f aec5 	bne.w	80006f8 <__aeabi_dmul+0x19c>
 800096e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000972:	f47f af0d 	bne.w	8000790 <__aeabi_dmul+0x234>
 8000976:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800097a:	f47f aeeb 	bne.w	8000754 <__aeabi_dmul+0x1f8>
 800097e:	e712      	b.n	80007a6 <__aeabi_dmul+0x24a>

08000980 <__aeabi_d2uiz>:
 8000980:	004a      	lsls	r2, r1, #1
 8000982:	d211      	bcs.n	80009a8 <__aeabi_d2uiz+0x28>
 8000984:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000988:	d211      	bcs.n	80009ae <__aeabi_d2uiz+0x2e>
 800098a:	d50d      	bpl.n	80009a8 <__aeabi_d2uiz+0x28>
 800098c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000990:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000994:	d40e      	bmi.n	80009b4 <__aeabi_d2uiz+0x34>
 8000996:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800099a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009a2:	fa23 f002 	lsr.w	r0, r3, r2
 80009a6:	4770      	bx	lr
 80009a8:	f04f 0000 	mov.w	r0, #0
 80009ac:	4770      	bx	lr
 80009ae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b2:	d102      	bne.n	80009ba <__aeabi_d2uiz+0x3a>
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295
 80009b8:	4770      	bx	lr
 80009ba:	f04f 0000 	mov.w	r0, #0
 80009be:	4770      	bx	lr

080009c0 <clr_screen>:

/********************************************//**
 *	clear screen by filling it with one color
 ***********************************************/
void clr_screen(uint8_t color)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
	UB_VGA_FillScreen(color);	// Fill screen
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	4618      	mov	r0, r3
 80009ce:	f006 facd 	bl	8006f6c <UB_VGA_FillScreen>
}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <draw_line>:
 *  - y2
 *  - thickness
 *  - color written in dutch
 ***********************************************/
void draw_line(int x1, int y1, int x2, int y2, int tn, int color)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b094      	sub	sp, #80	; 0x50
 80009de:	af00      	add	r7, sp, #0
 80009e0:	60f8      	str	r0, [r7, #12]
 80009e2:	60b9      	str	r1, [r7, #8]
 80009e4:	607a      	str	r2, [r7, #4]
 80009e6:	603b      	str	r3, [r7, #0]

	int i,dx,dy,sdx,sdy,dxabs,dyabs,x,y,px,py;
	uint8_t stn,tn_draw;

	dx=x2-x1;      /* the horizontal distance of the line */
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
	dy=y2-y1;      /* the vertical distance of the line */
 80009f0:	683a      	ldr	r2, [r7, #0]
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	627b      	str	r3, [r7, #36]	; 0x24
	dxabs=abs(dx);
 80009f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	bfb8      	it	lt
 80009fe:	425b      	neglt	r3, r3
 8000a00:	623b      	str	r3, [r7, #32]
	dyabs=abs(dy);
 8000a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	bfb8      	it	lt
 8000a08:	425b      	neglt	r3, r3
 8000a0a:	61fb      	str	r3, [r7, #28]
	sdx=sgn(dx);
 8000a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	db06      	blt.n	8000a20 <draw_line+0x46>
 8000a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	bfcc      	ite	gt
 8000a18:	2301      	movgt	r3, #1
 8000a1a:	2300      	movle	r3, #0
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	e001      	b.n	8000a24 <draw_line+0x4a>
 8000a20:	f04f 33ff 	mov.w	r3, #4294967295
 8000a24:	61bb      	str	r3, [r7, #24]
	sdy=sgn(dy);
 8000a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	db06      	blt.n	8000a3a <draw_line+0x60>
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	bfcc      	ite	gt
 8000a32:	2301      	movgt	r3, #1
 8000a34:	2300      	movle	r3, #0
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	e001      	b.n	8000a3e <draw_line+0x64>
 8000a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a3e:	617b      	str	r3, [r7, #20]
	x=dyabs>>1;
 8000a40:	69fb      	ldr	r3, [r7, #28]
 8000a42:	105b      	asrs	r3, r3, #1
 8000a44:	64bb      	str	r3, [r7, #72]	; 0x48
	y=dxabs>>1;
 8000a46:	6a3b      	ldr	r3, [r7, #32]
 8000a48:	105b      	asrs	r3, r3, #1
 8000a4a:	647b      	str	r3, [r7, #68]	; 0x44
	px=x1;
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	643b      	str	r3, [r7, #64]	; 0x40
	py=y1;
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	63fb      	str	r3, [r7, #60]	; 0x3c

	stn = ((tn%2)==0)? 1:0;  /* even of oneven lijndikte */
 8000a54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	bf0c      	ite	eq
 8000a5e:	2301      	moveq	r3, #1
 8000a60:	2300      	movne	r3, #0
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	74fb      	strb	r3, [r7, #19]
	tn_draw = tn>>1;
 8000a66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000a68:	105b      	asrs	r3, r3, #1
 8000a6a:	74bb      	strb	r3, [r7, #18]

	if (dxabs>=dyabs) 	/* the line is more horizontal than vertical */
 8000a6c:	6a3a      	ldr	r2, [r7, #32]
 8000a6e:	69fb      	ldr	r3, [r7, #28]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	f2c0 80c5 	blt.w	8000c00 <draw_line+0x226>
	{
		if(stn==1) /* even line thickness */
 8000a76:	7cfb      	ldrb	r3, [r7, #19]
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d15e      	bne.n	8000b3a <draw_line+0x160>
		{
			px=x1;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	643b      	str	r3, [r7, #64]	; 0x40
			py=y1;
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000a84:	2300      	movs	r3, #0
 8000a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000a88:	e052      	b.n	8000b30 <draw_line+0x156>
			{
				y+=dyabs;										/* adding dyabs for drawing vertical pixel */
 8000a8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000a8c:	69fb      	ldr	r3, [r7, #28]
 8000a8e:	4413      	add	r3, r2
 8000a90:	647b      	str	r3, [r7, #68]	; 0x44
				if (y>=dxabs)									/* y is higher than the dxabs of line, so py counting -1/0/1 */
 8000a92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000a94:	6a3b      	ldr	r3, [r7, #32]
 8000a96:	429a      	cmp	r2, r3
 8000a98:	db07      	blt.n	8000aaa <draw_line+0xd0>
				{
					y-=dxabs;									/* substracting dxabs of y so counting is reset */
 8000a9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000a9c:	6a3b      	ldr	r3, [r7, #32]
 8000a9e:	1ad3      	subs	r3, r2, r3
 8000aa0:	647b      	str	r3, [r7, #68]	; 0x44
					py+=sdy;
 8000aa2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000aa4:	697b      	ldr	r3, [r7, #20]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				for(int k=-tn_draw;k<tn_draw;k++)
 8000aaa:	7cbb      	ldrb	r3, [r7, #18]
 8000aac:	425b      	negs	r3, r3
 8000aae:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ab0:	e033      	b.n	8000b1a <draw_line+0x140>
				{
					if(px>=0 && px <= 320 && py>=0 && py <= 240)	/* pixels inside range VGA screen will be drawn */
 8000ab2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	db2d      	blt.n	8000b14 <draw_line+0x13a>
 8000ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000aba:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000abe:	dc29      	bgt.n	8000b14 <draw_line+0x13a>
 8000ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	db26      	blt.n	8000b14 <draw_line+0x13a>
 8000ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ac8:	2bf0      	cmp	r3, #240	; 0xf0
 8000aca:	dc23      	bgt.n	8000b14 <draw_line+0x13a>
					{
						UB_VGA_SetPixel(px+k,py-k,color);
 8000acc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ad2:	b29b      	uxth	r3, r3
 8000ad4:	4413      	add	r3, r2
 8000ad6:	b298      	uxth	r0, r3
 8000ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000ade:	b29b      	uxth	r3, r3
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000ae6:	b2d2      	uxtb	r2, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f006 fa61 	bl	8006fb0 <UB_VGA_SetPixel>
						UB_VGA_SetPixel(px+k,py-k-1,color);
 8000aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000af0:	b29a      	uxth	r2, r3
 8000af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000af4:	b29b      	uxth	r3, r3
 8000af6:	4413      	add	r3, r2
 8000af8:	b298      	uxth	r0, r3
 8000afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000afc:	b29a      	uxth	r2, r3
 8000afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	1ad3      	subs	r3, r2, r3
 8000b04:	b29b      	uxth	r3, r3
 8000b06:	3b01      	subs	r3, #1
 8000b08:	b29b      	uxth	r3, r3
 8000b0a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000b0c:	b2d2      	uxtb	r2, r2
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f006 fa4e 	bl	8006fb0 <UB_VGA_SetPixel>
				for(int k=-tn_draw;k<tn_draw;k++)
 8000b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b16:	3301      	adds	r3, #1
 8000b18:	63bb      	str	r3, [r7, #56]	; 0x38
 8000b1a:	7cba      	ldrb	r2, [r7, #18]
 8000b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	dcc7      	bgt.n	8000ab2 <draw_line+0xd8>
					}
				}
				px+=sdx; 										/* -1/0/1 counting pixel */
 8000b22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000b24:	69bb      	ldr	r3, [r7, #24]
 8000b26:	4413      	add	r3, r2
 8000b28:	643b      	str	r3, [r7, #64]	; 0x40
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000b32:	6a3b      	ldr	r3, [r7, #32]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	dda8      	ble.n	8000a8a <draw_line+0xb0>
				}
				py+=sdy; 										/* -1/0/1 counting pixel */
			}
		}
	}
}
 8000b38:	e125      	b.n	8000d86 <draw_line+0x3ac>
		else if(stn==0)	/* odd line thickness */
 8000b3a:	7cfb      	ldrb	r3, [r7, #19]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	f040 8122 	bne.w	8000d86 <draw_line+0x3ac>
			px=x1;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	643b      	str	r3, [r7, #64]	; 0x40
			py=y1;
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000b4e:	e052      	b.n	8000bf6 <draw_line+0x21c>
				y+=dyabs;										/* adding dyabs for drawing vertical pixel */
 8000b50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	4413      	add	r3, r2
 8000b56:	647b      	str	r3, [r7, #68]	; 0x44
				if (y>=dxabs)									/* y is higher than the dxabs of line, so py counting -1/0/1 */
 8000b58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b5a:	6a3b      	ldr	r3, [r7, #32]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	db07      	blt.n	8000b70 <draw_line+0x196>
					y-=dxabs;									/* substracting dxabs of y so counting is reset */
 8000b60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000b62:	6a3b      	ldr	r3, [r7, #32]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	647b      	str	r3, [r7, #68]	; 0x44
					py+=sdy;
 8000b68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
				for(int h=0-tn_draw;h<=tn_draw;h++)
 8000b70:	7cbb      	ldrb	r3, [r7, #18]
 8000b72:	425b      	negs	r3, r3
 8000b74:	637b      	str	r3, [r7, #52]	; 0x34
 8000b76:	e033      	b.n	8000be0 <draw_line+0x206>
					if(px>=0 && px <= 320 && py>=0 && py <= 240)	/* pixels inside range VGA screen will be drawn */
 8000b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	db2d      	blt.n	8000bda <draw_line+0x200>
 8000b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b80:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000b84:	dc29      	bgt.n	8000bda <draw_line+0x200>
 8000b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	db26      	blt.n	8000bda <draw_line+0x200>
 8000b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000b8e:	2bf0      	cmp	r3, #240	; 0xf0
 8000b90:	dc23      	bgt.n	8000bda <draw_line+0x200>
						UB_VGA_SetPixel(px+h,py-h,color);
 8000b92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	4413      	add	r3, r2
 8000b9c:	b298      	uxth	r0, r3
 8000b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	1ad3      	subs	r3, r2, r3
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000bac:	b2d2      	uxtb	r2, r2
 8000bae:	4619      	mov	r1, r3
 8000bb0:	f006 f9fe 	bl	8006fb0 <UB_VGA_SetPixel>
						UB_VGA_SetPixel(px+h,py-h-1,color);
 8000bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000bb6:	b29a      	uxth	r2, r3
 8000bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	4413      	add	r3, r2
 8000bbe:	b298      	uxth	r0, r3
 8000bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	3b01      	subs	r3, #1
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	f006 f9eb 	bl	8006fb0 <UB_VGA_SetPixel>
				for(int h=0-tn_draw;h<=tn_draw;h++)
 8000bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bdc:	3301      	adds	r3, #1
 8000bde:	637b      	str	r3, [r7, #52]	; 0x34
 8000be0:	7cba      	ldrb	r2, [r7, #18]
 8000be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000be4:	429a      	cmp	r2, r3
 8000be6:	dac7      	bge.n	8000b78 <draw_line+0x19e>
				px+=sdx; 										/* -1/0/1 counting pixel */
 8000be8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000bea:	69bb      	ldr	r3, [r7, #24]
 8000bec:	4413      	add	r3, r2
 8000bee:	643b      	str	r3, [r7, #64]	; 0x40
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000bf6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000bf8:	6a3b      	ldr	r3, [r7, #32]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	dda8      	ble.n	8000b50 <draw_line+0x176>
}
 8000bfe:	e0c2      	b.n	8000d86 <draw_line+0x3ac>
		if(stn==1) /* even line thickness */
 8000c00:	7cfb      	ldrb	r3, [r7, #19]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d15e      	bne.n	8000cc4 <draw_line+0x2ea>
			px=x1;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	643b      	str	r3, [r7, #64]	; 0x40
			py=y1;
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000c0e:	2300      	movs	r3, #0
 8000c10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000c12:	e052      	b.n	8000cba <draw_line+0x2e0>
				y+=dyabs;										/* adding dyabs for drawing vertical pixel */
 8000c14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	4413      	add	r3, r2
 8000c1a:	647b      	str	r3, [r7, #68]	; 0x44
				if (y>=dxabs)									/* y is higher than the dxabs of line, so py counting -1/0/1 */
 8000c1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c1e:	6a3b      	ldr	r3, [r7, #32]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	db07      	blt.n	8000c34 <draw_line+0x25a>
					y-=dxabs;									/* substracting dxabs of y so counting is reset */
 8000c24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000c26:	6a3b      	ldr	r3, [r7, #32]
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	647b      	str	r3, [r7, #68]	; 0x44
					py+=sdy;
 8000c2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	4413      	add	r3, r2
 8000c32:	63fb      	str	r3, [r7, #60]	; 0x3c
				for(int k=0-tn_draw;k<tn_draw;k++)
 8000c34:	7cbb      	ldrb	r3, [r7, #18]
 8000c36:	425b      	negs	r3, r3
 8000c38:	633b      	str	r3, [r7, #48]	; 0x30
 8000c3a:	e033      	b.n	8000ca4 <draw_line+0x2ca>
					if(px>=0 && px <= 320 && py>=0 && py <= 240)	/* pixels inside range VGA screen will be drawn */
 8000c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	db2d      	blt.n	8000c9e <draw_line+0x2c4>
 8000c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c44:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000c48:	dc29      	bgt.n	8000c9e <draw_line+0x2c4>
 8000c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	db26      	blt.n	8000c9e <draw_line+0x2c4>
 8000c50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c52:	2bf0      	cmp	r3, #240	; 0xf0
 8000c54:	dc23      	bgt.n	8000c9e <draw_line+0x2c4>
						UB_VGA_SetPixel(px+k,py-k,color);
 8000c56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c58:	b29a      	uxth	r2, r3
 8000c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	4413      	add	r3, r2
 8000c60:	b298      	uxth	r0, r3
 8000c62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	1ad3      	subs	r3, r2, r3
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	4619      	mov	r1, r3
 8000c74:	f006 f99c 	bl	8006fb0 <UB_VGA_SetPixel>
						UB_VGA_SetPixel(px+k,py-k-1,color);
 8000c78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c7e:	b29b      	uxth	r3, r3
 8000c80:	4413      	add	r3, r2
 8000c82:	b298      	uxth	r0, r3
 8000c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000c8a:	b29b      	uxth	r3, r3
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	3b01      	subs	r3, #1
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000c96:	b2d2      	uxtb	r2, r2
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f006 f989 	bl	8006fb0 <UB_VGA_SetPixel>
				for(int k=0-tn_draw;k<tn_draw;k++)
 8000c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	633b      	str	r3, [r7, #48]	; 0x30
 8000ca4:	7cba      	ldrb	r2, [r7, #18]
 8000ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	dcc7      	bgt.n	8000c3c <draw_line+0x262>
				px+=sdx; 										/* -1/0/1 counting pixel */
 8000cac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	643b      	str	r3, [r7, #64]	; 0x40
			for(i=0;i<=dxabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000cba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000cbc:	6a3b      	ldr	r3, [r7, #32]
 8000cbe:	429a      	cmp	r2, r3
 8000cc0:	dda8      	ble.n	8000c14 <draw_line+0x23a>
}
 8000cc2:	e060      	b.n	8000d86 <draw_line+0x3ac>
		else if(stn==0)	/* odd line thickness */
 8000cc4:	7cfb      	ldrb	r3, [r7, #19]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d15d      	bne.n	8000d86 <draw_line+0x3ac>
			px=x1;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	643b      	str	r3, [r7, #64]	; 0x40
			py=y1;
 8000cce:	68bb      	ldr	r3, [r7, #8]
 8000cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dyabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000cd6:	e052      	b.n	8000d7e <draw_line+0x3a4>
				x+=dxabs;										/* adding dyabs for drawing vertical pixel */
 8000cd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000cda:	6a3b      	ldr	r3, [r7, #32]
 8000cdc:	4413      	add	r3, r2
 8000cde:	64bb      	str	r3, [r7, #72]	; 0x48
				if (x>=dyabs)									/* y is higher than the dxabs of line, so py counting -1/0/1 */
 8000ce0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	db07      	blt.n	8000cf8 <draw_line+0x31e>
					x-=dyabs;									/* substracting dxabs of y so counting is reset */
 8000ce8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	64bb      	str	r3, [r7, #72]	; 0x48
					px+=sdx;
 8000cf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	4413      	add	r3, r2
 8000cf6:	643b      	str	r3, [r7, #64]	; 0x40
				for(int h=0-tn_draw;h<=tn_draw;h++)
 8000cf8:	7cbb      	ldrb	r3, [r7, #18]
 8000cfa:	425b      	negs	r3, r3
 8000cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000cfe:	e033      	b.n	8000d68 <draw_line+0x38e>
					if(px>=0 && px <= 320 && py>=0 && py <= 240)	/* pixels inside range VGA screen will be drawn */
 8000d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	db2d      	blt.n	8000d62 <draw_line+0x388>
 8000d06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d08:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000d0c:	dc29      	bgt.n	8000d62 <draw_line+0x388>
 8000d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	db26      	blt.n	8000d62 <draw_line+0x388>
 8000d14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d16:	2bf0      	cmp	r3, #240	; 0xf0
 8000d18:	dc23      	bgt.n	8000d62 <draw_line+0x388>
						UB_VGA_SetPixel(px+h,py-h,color);
 8000d1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d1c:	b29a      	uxth	r2, r3
 8000d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	4413      	add	r3, r2
 8000d24:	b298      	uxth	r0, r3
 8000d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d2c:	b29b      	uxth	r3, r3
 8000d2e:	1ad3      	subs	r3, r2, r3
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	4619      	mov	r1, r3
 8000d38:	f006 f93a 	bl	8006fb0 <UB_VGA_SetPixel>
						UB_VGA_SetPixel(px+h,py-h-1,color);
 8000d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	4413      	add	r3, r2
 8000d46:	b298      	uxth	r0, r3
 8000d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000d4a:	b29a      	uxth	r2, r3
 8000d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	1ad3      	subs	r3, r2, r3
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	3b01      	subs	r3, #1
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f006 f927 	bl	8006fb0 <UB_VGA_SetPixel>
				for(int h=0-tn_draw;h<=tn_draw;h++)
 8000d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d64:	3301      	adds	r3, #1
 8000d66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d68:	7cba      	ldrb	r2, [r7, #18]
 8000d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	dac7      	bge.n	8000d00 <draw_line+0x326>
				py+=sdy; 										/* -1/0/1 counting pixel */
 8000d70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	4413      	add	r3, r2
 8000d76:	63fb      	str	r3, [r7, #60]	; 0x3c
			for(i=0;i<=dyabs;i++)								/* for loop van 0 tot en met het verschil van de pixels */
 8000d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000d7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	dda8      	ble.n	8000cd8 <draw_line+0x2fe>
}
 8000d86:	bf00      	nop
 8000d88:	3750      	adds	r7, #80	; 0x50
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <draw_ellips>:
 *  - x radius
 *  - y radius
 *  - color written in dutch
 ***********************************************/
void draw_ellips (int x_center,int y_center, int x_rad, int y_rad, int color)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b086      	sub	sp, #24
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	60f8      	str	r0, [r7, #12]
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	603b      	str	r3, [r7, #0]
	for(int y=-y_rad; y<=y_rad; y++) {
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	425b      	negs	r3, r3
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	e03f      	b.n	8000e24 <draw_ellips+0x96>
	    for(int x=-x_rad; x<=x_rad; x++) {
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	425b      	negs	r3, r3
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	e034      	b.n	8000e16 <draw_ellips+0x88>
	        if(x*x*y_rad*y_rad+y*y*x_rad*x_rad <= y_rad*y_rad*x_rad*x_rad)
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	fb02 f303 	mul.w	r3, r2, r3
 8000db4:	683a      	ldr	r2, [r7, #0]
 8000db6:	fb02 f303 	mul.w	r3, r2, r3
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	fb02 f203 	mul.w	r2, r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	6979      	ldr	r1, [r7, #20]
 8000dc4:	fb01 f303 	mul.w	r3, r1, r3
 8000dc8:	6879      	ldr	r1, [r7, #4]
 8000dca:	fb01 f303 	mul.w	r3, r1, r3
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	fb01 f303 	mul.w	r3, r1, r3
 8000dd4:	441a      	add	r2, r3
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	6839      	ldr	r1, [r7, #0]
 8000dda:	fb01 f303 	mul.w	r3, r1, r3
 8000dde:	6879      	ldr	r1, [r7, #4]
 8000de0:	fb01 f303 	mul.w	r3, r1, r3
 8000de4:	6879      	ldr	r1, [r7, #4]
 8000de6:	fb01 f303 	mul.w	r3, r1, r3
 8000dea:	429a      	cmp	r2, r3
 8000dec:	dc10      	bgt.n	8000e10 <draw_ellips+0x82>
	        	UB_VGA_SetPixel(x_center+x,y_center+y,color);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	4413      	add	r3, r2
 8000df8:	b298      	uxth	r0, r3
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	4413      	add	r3, r2
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	6a3a      	ldr	r2, [r7, #32]
 8000e08:	b2d2      	uxtb	r2, r2
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	f006 f8d0 	bl	8006fb0 <UB_VGA_SetPixel>
	    for(int x=-x_rad; x<=x_rad; x++) {
 8000e10:	693b      	ldr	r3, [r7, #16]
 8000e12:	3301      	adds	r3, #1
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	429a      	cmp	r2, r3
 8000e1c:	ddc6      	ble.n	8000dac <draw_ellips+0x1e>
	for(int y=-y_rad; y<=y_rad; y++) {
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	3301      	adds	r3, #1
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	697a      	ldr	r2, [r7, #20]
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	ddbb      	ble.n	8000da4 <draw_ellips+0x16>
	    }
	}
}
 8000e2c:	bf00      	nop
 8000e2e:	3718      	adds	r7, #24
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <draw_rectangle>:
 * - x2 (right bottom corner)
 * - y2 (right bottom corner)
 * - color written in dutch
 ***********************************************/
void draw_rectangle (int x1, int y1, int x2, int y2, int color)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b086      	sub	sp, #24
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
 8000e40:	603b      	str	r3, [r7, #0]
	for(int i=y1;i<=y2;i++)
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	e015      	b.n	8000e74 <draw_rectangle+0x40>
	{
		for(int j=x1;j<=x2;j++)
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	e00b      	b.n	8000e66 <draw_rectangle+0x32>
			UB_VGA_SetPixel(j,i,color);
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	697a      	ldr	r2, [r7, #20]
 8000e54:	b291      	uxth	r1, r2
 8000e56:	6a3a      	ldr	r2, [r7, #32]
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f006 f8a8 	bl	8006fb0 <UB_VGA_SetPixel>
		for(int j=x1;j<=x2;j++)
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	3301      	adds	r3, #1
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	693a      	ldr	r2, [r7, #16]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	ddef      	ble.n	8000e4e <draw_rectangle+0x1a>
	for(int i=y1;i<=y2;i++)
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	3301      	adds	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	dde5      	ble.n	8000e48 <draw_rectangle+0x14>
	}
}
 8000e7c:	bf00      	nop
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <draw_triangle>:
 * - x3
 * - y3
 * - color written in dutch
 ***********************************************/
void draw_triangle(int x1,int y1,int x2,int y2,int xtop,int ytop, int color)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af02      	add	r7, sp, #8
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
 8000e90:	603b      	str	r3, [r7, #0]
	draw_line(x1,y1,x2,y2,1,color);
 8000e92:	6a3b      	ldr	r3, [r7, #32]
 8000e94:	9301      	str	r3, [sp, #4]
 8000e96:	2301      	movs	r3, #1
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	68b9      	ldr	r1, [r7, #8]
 8000ea0:	68f8      	ldr	r0, [r7, #12]
 8000ea2:	f7ff fd9a 	bl	80009da <draw_line>
	draw_line(x1,y1,xtop,ytop,1,color);
 8000ea6:	6a3b      	ldr	r3, [r7, #32]
 8000ea8:	9301      	str	r3, [sp, #4]
 8000eaa:	2301      	movs	r3, #1
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	69ba      	ldr	r2, [r7, #24]
 8000eb2:	68b9      	ldr	r1, [r7, #8]
 8000eb4:	68f8      	ldr	r0, [r7, #12]
 8000eb6:	f7ff fd90 	bl	80009da <draw_line>
	draw_line(xtop,ytop,x2,y2,1,color);
 8000eba:	6a3b      	ldr	r3, [r7, #32]
 8000ebc:	9301      	str	r3, [sp, #4]
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	687a      	ldr	r2, [r7, #4]
 8000ec6:	69f9      	ldr	r1, [r7, #28]
 8000ec8:	69b8      	ldr	r0, [r7, #24]
 8000eca:	f7ff fd86 	bl	80009da <draw_line>
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <draw_text>:
 * - y1
 * - text you want to see on the screen
 * - backcolor = color of last time clearscreen was called
 * - textcolor
 ***********************************************/
void draw_text (int x, int y, char text[], int backcolor, int textcolor) {
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b088      	sub	sp, #32
 8000eda:	af02      	add	r7, sp, #8
 8000edc:	60f8      	str	r0, [r7, #12]
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	603b      	str	r3, [r7, #0]

	for(int i=0;i<strlen(text);i++) //uit de "text" string individuele letters en kleuren halen
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
 8000ee8:	e010      	b.n	8000f0c <draw_text+0x36>
	{
		letter_select(x,y,text[i], backcolor, textcolor);
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	4413      	add	r3, r2
 8000ef0:	781a      	ldrb	r2, [r3, #0]
 8000ef2:	6a3b      	ldr	r3, [r7, #32]
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	68b9      	ldr	r1, [r7, #8]
 8000efa:	68f8      	ldr	r0, [r7, #12]
 8000efc:	f000 f812 	bl	8000f24 <letter_select>
		x = x + 5;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	3305      	adds	r3, #5
 8000f04:	60fb      	str	r3, [r7, #12]
	for(int i=0;i<strlen(text);i++) //uit de "text" string individuele letters en kleuren halen
 8000f06:	697b      	ldr	r3, [r7, #20]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff f965 	bl	80001dc <strlen>
 8000f12:	4602      	mov	r2, r0
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d8e7      	bhi.n	8000eea <draw_text+0x14>
	}
}
 8000f1a:	bf00      	nop
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <letter_select>:

/********************************************//**
 * select the letten you want to draw with the same colors as draw_text()
 ***********************************************/
void letter_select(int x, int y, char letter, int backcolor, int textcolor)
{
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	f5ad 5d8e 	sub.w	sp, sp, #4544	; 0x11c0
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000f32:	3c1c      	subs	r4, #28
 8000f34:	6020      	str	r0, [r4, #0]
 8000f36:	f107 0008 	add.w	r0, r7, #8
 8000f3a:	6001      	str	r1, [r0, #0]
 8000f3c:	4611      	mov	r1, r2
 8000f3e:	f107 0208 	add.w	r2, r7, #8
 8000f42:	3a08      	subs	r2, #8
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	460a      	mov	r2, r1
 8000f4e:	701a      	strb	r2, [r3, #0]
	int letter_A[10][4] = {
 8000f50:	f107 0308 	add.w	r3, r7, #8
 8000f54:	3b08      	subs	r3, #8
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000f5c:	f102 0218 	add.w	r2, r2, #24
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	f107 0308 	add.w	r3, r7, #8
 8000f66:	3b08      	subs	r3, #8
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8000f6e:	f102 021c 	add.w	r2, r2, #28
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	f107 0308 	add.w	r3, r7, #8
 8000f78:	3b08      	subs	r3, #8
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	3b08      	subs	r3, #8
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8000f8e:	f102 0204 	add.w	r2, r2, #4
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	3b08      	subs	r3, #8
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8000fa0:	f102 0208 	add.w	r2, r2, #8
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	3b08      	subs	r3, #8
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8000fb2:	f102 020c 	add.w	r2, r2, #12
 8000fb6:	6013      	str	r3, [r2, #0]
 8000fb8:	f107 0308 	add.w	r3, r7, #8
 8000fbc:	3b08      	subs	r3, #8
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8000fc4:	f102 0210 	add.w	r2, r2, #16
 8000fc8:	6013      	str	r3, [r2, #0]
 8000fca:	f107 0308 	add.w	r3, r7, #8
 8000fce:	3b08      	subs	r3, #8
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8000fd6:	f102 0214 	add.w	r2, r2, #20
 8000fda:	6013      	str	r3, [r2, #0]
 8000fdc:	f107 0308 	add.w	r3, r7, #8
 8000fe0:	3b08      	subs	r3, #8
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8000fe8:	f102 0218 	add.w	r2, r2, #24
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8000ff2:	f103 0318 	add.w	r3, r3, #24
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8000ffc:	f102 021c 	add.w	r2, r2, #28
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8001006:	f103 0318 	add.w	r3, r3, #24
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	f107 0308 	add.w	r3, r7, #8
 8001016:	3b08      	subs	r3, #8
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 800101e:	f102 0204 	add.w	r2, r2, #4
 8001022:	6013      	str	r3, [r2, #0]
 8001024:	f107 0308 	add.w	r3, r7, #8
 8001028:	3b08      	subs	r3, #8
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8001030:	f102 0208 	add.w	r2, r2, #8
 8001034:	6013      	str	r3, [r2, #0]
 8001036:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800103a:	f103 0318 	add.w	r3, r3, #24
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8001044:	f102 020c 	add.w	r2, r2, #12
 8001048:	6013      	str	r3, [r2, #0]
 800104a:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800104e:	f103 0318 	add.w	r3, r3, #24
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8001058:	f102 0210 	add.w	r2, r2, #16
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	f107 0308 	add.w	r3, r7, #8
 8001062:	3b08      	subs	r3, #8
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 800106a:	f102 0214 	add.w	r2, r2, #20
 800106e:	6013      	str	r3, [r2, #0]
 8001070:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8001074:	f103 0318 	add.w	r3, r3, #24
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 800107e:	f102 0218 	add.w	r2, r2, #24
 8001082:	6013      	str	r3, [r2, #0]
 8001084:	f107 0308 	add.w	r3, r7, #8
 8001088:	3b08      	subs	r3, #8
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8001090:	f102 021c 	add.w	r2, r2, #28
 8001094:	6013      	str	r3, [r2, #0]
 8001096:	f107 0308 	add.w	r3, r7, #8
 800109a:	3b08      	subs	r3, #8
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80010a8:	f103 0318 	add.w	r3, r3, #24
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80010b2:	f102 0204 	add.w	r2, r2, #4
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80010bc:	f103 0318 	add.w	r3, r3, #24
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80010c6:	f102 0208 	add.w	r2, r2, #8
 80010ca:	6013      	str	r3, [r2, #0]
 80010cc:	f107 0308 	add.w	r3, r7, #8
 80010d0:	3b08      	subs	r3, #8
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80010d8:	f102 020c 	add.w	r2, r2, #12
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	3b08      	subs	r3, #8
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80010ea:	f102 0210 	add.w	r2, r2, #16
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80010f4:	f103 0318 	add.w	r3, r3, #24
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80010fe:	f102 0214 	add.w	r2, r2, #20
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8001108:	f103 0318 	add.w	r3, r3, #24
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8001112:	f102 0218 	add.w	r2, r2, #24
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800111c:	f103 0318 	add.w	r3, r3, #24
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8001126:	f102 021c 	add.w	r2, r2, #28
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8001130:	f103 0318 	add.w	r3, r3, #24
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 800113a:	6013      	str	r3, [r2, #0]
 800113c:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8001140:	f103 0318 	add.w	r3, r3, #24
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 800114a:	f102 0204 	add.w	r2, r2, #4
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8001154:	f103 0318 	add.w	r3, r3, #24
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 800115e:	f102 0208 	add.w	r2, r2, #8
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	f107 0308 	add.w	r3, r7, #8
 8001168:	3b08      	subs	r3, #8
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 8001170:	f102 020c 	add.w	r2, r2, #12
 8001174:	6013      	str	r3, [r2, #0]
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	3b08      	subs	r3, #8
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 8001182:	f102 0210 	add.w	r2, r2, #16
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800118c:	f103 0318 	add.w	r3, r3, #24
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 8001196:	f102 0214 	add.w	r2, r2, #20
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	f107 0308 	add.w	r3, r7, #8
 80011a0:	3b08      	subs	r3, #8
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 80011a8:	f102 0218 	add.w	r2, r2, #24
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	f107 0308 	add.w	r3, r7, #8
 80011b2:	3b08      	subs	r3, #8
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 80011ba:	f102 021c 	add.w	r2, r2, #28
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	f107 0308 	add.w	r3, r7, #8
 80011c4:	3b08      	subs	r3, #8
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	f107 0308 	add.w	r3, r7, #8
 80011d2:	3b08      	subs	r3, #8
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 80011da:	f102 0204 	add.w	r2, r2, #4
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	f107 0308 	add.w	r3, r7, #8
 80011e4:	3b08      	subs	r3, #8
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 80011ec:	f102 0208 	add.w	r2, r2, #8
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	3b08      	subs	r3, #8
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 80011fe:	f102 020c 	add.w	r2, r2, #12
 8001202:	6013      	str	r3, [r2, #0]
 8001204:	f107 0308 	add.w	r3, r7, #8
 8001208:	3b08      	subs	r3, #8
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8001210:	f102 0210 	add.w	r2, r2, #16
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	f107 0308 	add.w	r3, r7, #8
 800121a:	3b08      	subs	r3, #8
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8001222:	f102 0214 	add.w	r2, r2, #20
 8001226:	6013      	str	r3, [r2, #0]
		textcolor, textcolor, textcolor, textcolor, //@@@@
		textcolor, backcolor, backcolor, textcolor, //@..@
		backcolor, backcolor, backcolor, backcolor, //....
		backcolor, backcolor, backcolor, backcolor
	};
	int letter_B[10][4] = {
 8001228:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800122c:	f102 0218 	add.w	r2, r2, #24
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	3b08      	subs	r3, #8
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800123e:	f102 0218 	add.w	r2, r2, #24
 8001242:	f107 0308 	add.w	r3, r7, #8
 8001246:	3b08      	subs	r3, #8
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	6053      	str	r3, [r2, #4]
 800124c:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001250:	f102 0218 	add.w	r2, r2, #24
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	3b08      	subs	r3, #8
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6093      	str	r3, [r2, #8]
 800125e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001262:	f102 0218 	add.w	r2, r2, #24
 8001266:	f107 0308 	add.w	r3, r7, #8
 800126a:	3b08      	subs	r3, #8
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	60d3      	str	r3, [r2, #12]
 8001270:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001274:	f102 0218 	add.w	r2, r2, #24
 8001278:	f107 0308 	add.w	r3, r7, #8
 800127c:	3b08      	subs	r3, #8
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6113      	str	r3, [r2, #16]
 8001282:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001286:	f102 0218 	add.w	r2, r2, #24
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	3b08      	subs	r3, #8
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	6153      	str	r3, [r2, #20]
 8001294:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001298:	f102 0218 	add.w	r2, r2, #24
 800129c:	f107 0308 	add.w	r3, r7, #8
 80012a0:	3b08      	subs	r3, #8
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6193      	str	r3, [r2, #24]
 80012a6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80012aa:	f102 0218 	add.w	r2, r2, #24
 80012ae:	f107 0308 	add.w	r3, r7, #8
 80012b2:	3b08      	subs	r3, #8
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	61d3      	str	r3, [r2, #28]
 80012b8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80012bc:	f103 0318 	add.w	r3, r3, #24
 80012c0:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80012c4:	f102 0218 	add.w	r2, r2, #24
 80012c8:	6812      	ldr	r2, [r2, #0]
 80012ca:	621a      	str	r2, [r3, #32]
 80012cc:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80012d0:	f103 0318 	add.w	r3, r3, #24
 80012d4:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80012d8:	f102 0218 	add.w	r2, r2, #24
 80012dc:	6812      	ldr	r2, [r2, #0]
 80012de:	625a      	str	r2, [r3, #36]	; 0x24
 80012e0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80012e4:	f103 0318 	add.w	r3, r3, #24
 80012e8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80012ec:	f102 0218 	add.w	r2, r2, #24
 80012f0:	6812      	ldr	r2, [r2, #0]
 80012f2:	629a      	str	r2, [r3, #40]	; 0x28
 80012f4:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80012f8:	f102 0218 	add.w	r2, r2, #24
 80012fc:	f107 0308 	add.w	r3, r7, #8
 8001300:	3b08      	subs	r3, #8
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001306:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800130a:	f103 0318 	add.w	r3, r3, #24
 800130e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001312:	f102 0218 	add.w	r2, r2, #24
 8001316:	6812      	ldr	r2, [r2, #0]
 8001318:	631a      	str	r2, [r3, #48]	; 0x30
 800131a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800131e:	f102 0218 	add.w	r2, r2, #24
 8001322:	f107 0308 	add.w	r3, r7, #8
 8001326:	3b08      	subs	r3, #8
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	6353      	str	r3, [r2, #52]	; 0x34
 800132c:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001330:	f102 0218 	add.w	r2, r2, #24
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	3b08      	subs	r3, #8
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6393      	str	r3, [r2, #56]	; 0x38
 800133e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001342:	f103 0318 	add.w	r3, r3, #24
 8001346:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800134a:	f102 0218 	add.w	r2, r2, #24
 800134e:	6812      	ldr	r2, [r2, #0]
 8001350:	63da      	str	r2, [r3, #60]	; 0x3c
 8001352:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001356:	f103 0318 	add.w	r3, r3, #24
 800135a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800135e:	f102 0218 	add.w	r2, r2, #24
 8001362:	6812      	ldr	r2, [r2, #0]
 8001364:	641a      	str	r2, [r3, #64]	; 0x40
 8001366:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800136a:	f103 0318 	add.w	r3, r3, #24
 800136e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001372:	f102 0218 	add.w	r2, r2, #24
 8001376:	6812      	ldr	r2, [r2, #0]
 8001378:	645a      	str	r2, [r3, #68]	; 0x44
 800137a:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800137e:	f103 0318 	add.w	r3, r3, #24
 8001382:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001386:	f102 0218 	add.w	r2, r2, #24
 800138a:	6812      	ldr	r2, [r2, #0]
 800138c:	649a      	str	r2, [r3, #72]	; 0x48
 800138e:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001392:	f102 0218 	add.w	r2, r2, #24
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	3b08      	subs	r3, #8
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a0:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80013a4:	f103 0318 	add.w	r3, r3, #24
 80013a8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80013ac:	f102 0218 	add.w	r2, r2, #24
 80013b0:	6812      	ldr	r2, [r2, #0]
 80013b2:	651a      	str	r2, [r3, #80]	; 0x50
 80013b4:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80013b8:	f102 0218 	add.w	r2, r2, #24
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	3b08      	subs	r3, #8
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6553      	str	r3, [r2, #84]	; 0x54
 80013c6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80013ca:	f102 0218 	add.w	r2, r2, #24
 80013ce:	f107 0308 	add.w	r3, r7, #8
 80013d2:	3b08      	subs	r3, #8
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6593      	str	r3, [r2, #88]	; 0x58
 80013d8:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80013dc:	f103 0318 	add.w	r3, r3, #24
 80013e0:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80013e4:	f102 0218 	add.w	r2, r2, #24
 80013e8:	6812      	ldr	r2, [r2, #0]
 80013ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80013ec:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80013f0:	f103 0318 	add.w	r3, r3, #24
 80013f4:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80013f8:	f102 0218 	add.w	r2, r2, #24
 80013fc:	6812      	ldr	r2, [r2, #0]
 80013fe:	661a      	str	r2, [r3, #96]	; 0x60
 8001400:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001404:	f102 0218 	add.w	r2, r2, #24
 8001408:	f107 0308 	add.w	r3, r7, #8
 800140c:	3b08      	subs	r3, #8
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6653      	str	r3, [r2, #100]	; 0x64
 8001412:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001416:	f102 0218 	add.w	r2, r2, #24
 800141a:	f107 0308 	add.w	r3, r7, #8
 800141e:	3b08      	subs	r3, #8
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6693      	str	r3, [r2, #104]	; 0x68
 8001424:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001428:	f103 0318 	add.w	r3, r3, #24
 800142c:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001430:	f102 0218 	add.w	r2, r2, #24
 8001434:	6812      	ldr	r2, [r2, #0]
 8001436:	66da      	str	r2, [r3, #108]	; 0x6c
 8001438:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800143c:	f103 0318 	add.w	r3, r3, #24
 8001440:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001444:	f102 0218 	add.w	r2, r2, #24
 8001448:	6812      	ldr	r2, [r2, #0]
 800144a:	671a      	str	r2, [r3, #112]	; 0x70
 800144c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001450:	f103 0318 	add.w	r3, r3, #24
 8001454:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001458:	f102 0218 	add.w	r2, r2, #24
 800145c:	6812      	ldr	r2, [r2, #0]
 800145e:	675a      	str	r2, [r3, #116]	; 0x74
 8001460:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001464:	f103 0318 	add.w	r3, r3, #24
 8001468:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800146c:	f102 0218 	add.w	r2, r2, #24
 8001470:	6812      	ldr	r2, [r2, #0]
 8001472:	679a      	str	r2, [r3, #120]	; 0x78
 8001474:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001478:	f102 0218 	add.w	r2, r2, #24
 800147c:	f107 0308 	add.w	r3, r7, #8
 8001480:	3b08      	subs	r3, #8
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	67d3      	str	r3, [r2, #124]	; 0x7c
 8001486:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800148a:	f102 0218 	add.w	r2, r2, #24
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	3b08      	subs	r3, #8
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800149a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 800149e:	f102 0218 	add.w	r2, r2, #24
 80014a2:	f107 0308 	add.w	r3, r7, #8
 80014a6:	3b08      	subs	r3, #8
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80014ae:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80014b2:	f102 0218 	add.w	r2, r2, #24
 80014b6:	f107 0308 	add.w	r3, r7, #8
 80014ba:	3b08      	subs	r3, #8
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80014c2:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80014c6:	f102 0218 	add.w	r2, r2, #24
 80014ca:	f107 0308 	add.w	r3, r7, #8
 80014ce:	3b08      	subs	r3, #8
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80014d6:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80014da:	f102 0218 	add.w	r2, r2, #24
 80014de:	f107 0308 	add.w	r3, r7, #8
 80014e2:	3b08      	subs	r3, #8
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014ea:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80014ee:	f102 0218 	add.w	r2, r2, #24
 80014f2:	f107 0308 	add.w	r3, r7, #8
 80014f6:	3b08      	subs	r3, #8
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80014fe:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001502:	f102 0218 	add.w	r2, r2, #24
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	3b08      	subs	r3, #8
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8001512:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8001516:	f102 0218 	add.w	r2, r2, #24
 800151a:	f107 0308 	add.w	r3, r7, #8
 800151e:	3b08      	subs	r3, #8
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, textcolor,  //@..@
		textcolor, textcolor, textcolor, backcolor,  //@@@.
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_C[10][4] = {
 8001526:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 800152a:	f107 0308 	add.w	r3, r7, #8
 800152e:	3b08      	subs	r3, #8
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6013      	str	r3, [r2, #0]
 8001534:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001538:	f107 0308 	add.w	r3, r7, #8
 800153c:	3b08      	subs	r3, #8
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6053      	str	r3, [r2, #4]
 8001542:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001546:	f107 0308 	add.w	r3, r7, #8
 800154a:	3b08      	subs	r3, #8
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6093      	str	r3, [r2, #8]
 8001550:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001554:	f107 0308 	add.w	r3, r7, #8
 8001558:	3b08      	subs	r3, #8
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	60d3      	str	r3, [r2, #12]
 800155e:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	3b08      	subs	r3, #8
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6113      	str	r3, [r2, #16]
 800156c:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001570:	f107 0308 	add.w	r3, r7, #8
 8001574:	3b08      	subs	r3, #8
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6153      	str	r3, [r2, #20]
 800157a:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 800157e:	f107 0308 	add.w	r3, r7, #8
 8001582:	3b08      	subs	r3, #8
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6193      	str	r3, [r2, #24]
 8001588:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 800158c:	f107 0308 	add.w	r3, r7, #8
 8001590:	3b08      	subs	r3, #8
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	61d3      	str	r3, [r2, #28]
 8001596:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 800159a:	f107 0308 	add.w	r3, r7, #8
 800159e:	3b08      	subs	r3, #8
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6213      	str	r3, [r2, #32]
 80015a4:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 80015a8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80015ac:	f102 0218 	add.w	r2, r2, #24
 80015b0:	6812      	ldr	r2, [r2, #0]
 80015b2:	625a      	str	r2, [r3, #36]	; 0x24
 80015b4:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 80015b8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80015bc:	f102 0218 	add.w	r2, r2, #24
 80015c0:	6812      	ldr	r2, [r2, #0]
 80015c2:	629a      	str	r2, [r3, #40]	; 0x28
 80015c4:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 80015c8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80015cc:	f102 0218 	add.w	r2, r2, #24
 80015d0:	6812      	ldr	r2, [r2, #0]
 80015d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80015d4:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 80015d8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80015dc:	f102 0218 	add.w	r2, r2, #24
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	631a      	str	r2, [r3, #48]	; 0x30
 80015e4:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 80015e8:	f107 0308 	add.w	r3, r7, #8
 80015ec:	3b08      	subs	r3, #8
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	6353      	str	r3, [r2, #52]	; 0x34
 80015f2:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 80015f6:	f107 0308 	add.w	r3, r7, #8
 80015fa:	3b08      	subs	r3, #8
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6393      	str	r3, [r2, #56]	; 0x38
 8001600:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8001604:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001608:	f102 0218 	add.w	r2, r2, #24
 800160c:	6812      	ldr	r2, [r2, #0]
 800160e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001610:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8001614:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001618:	f102 0218 	add.w	r2, r2, #24
 800161c:	6812      	ldr	r2, [r2, #0]
 800161e:	641a      	str	r2, [r3, #64]	; 0x40
 8001620:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001624:	f107 0308 	add.w	r3, r7, #8
 8001628:	3b08      	subs	r3, #8
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6453      	str	r3, [r2, #68]	; 0x44
 800162e:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001632:	f107 0308 	add.w	r3, r7, #8
 8001636:	3b08      	subs	r3, #8
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6493      	str	r3, [r2, #72]	; 0x48
 800163c:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001640:	f107 0308 	add.w	r3, r7, #8
 8001644:	3b08      	subs	r3, #8
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164a:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 800164e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001652:	f102 0218 	add.w	r2, r2, #24
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	651a      	str	r2, [r3, #80]	; 0x50
 800165a:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 800165e:	f107 0308 	add.w	r3, r7, #8
 8001662:	3b08      	subs	r3, #8
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	6553      	str	r3, [r2, #84]	; 0x54
 8001668:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 800166c:	f107 0308 	add.w	r3, r7, #8
 8001670:	3b08      	subs	r3, #8
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6593      	str	r3, [r2, #88]	; 0x58
 8001676:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 800167a:	f107 0308 	add.w	r3, r7, #8
 800167e:	3b08      	subs	r3, #8
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001684:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 8001688:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800168c:	f102 0218 	add.w	r2, r2, #24
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	661a      	str	r2, [r3, #96]	; 0x60
 8001694:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001698:	f107 0308 	add.w	r3, r7, #8
 800169c:	3b08      	subs	r3, #8
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6653      	str	r3, [r2, #100]	; 0x64
 80016a2:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	3b08      	subs	r3, #8
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6693      	str	r3, [r2, #104]	; 0x68
 80016b0:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 80016b4:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80016b8:	f102 0218 	add.w	r2, r2, #24
 80016bc:	6812      	ldr	r2, [r2, #0]
 80016be:	66da      	str	r2, [r3, #108]	; 0x6c
 80016c0:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 80016c4:	f107 0308 	add.w	r3, r7, #8
 80016c8:	3b08      	subs	r3, #8
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6713      	str	r3, [r2, #112]	; 0x70
 80016ce:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 80016d2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80016d6:	f102 0218 	add.w	r2, r2, #24
 80016da:	6812      	ldr	r2, [r2, #0]
 80016dc:	675a      	str	r2, [r3, #116]	; 0x74
 80016de:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 80016e2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80016e6:	f102 0218 	add.w	r2, r2, #24
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	679a      	str	r2, [r3, #120]	; 0x78
 80016ee:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 80016f2:	f107 0308 	add.w	r3, r7, #8
 80016f6:	3b08      	subs	r3, #8
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	67d3      	str	r3, [r2, #124]	; 0x7c
 80016fc:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001700:	f107 0308 	add.w	r3, r7, #8
 8001704:	3b08      	subs	r3, #8
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800170c:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001710:	f107 0308 	add.w	r3, r7, #8
 8001714:	3b08      	subs	r3, #8
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 800171c:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001720:	f107 0308 	add.w	r3, r7, #8
 8001724:	3b08      	subs	r3, #8
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800172c:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001730:	f107 0308 	add.w	r3, r7, #8
 8001734:	3b08      	subs	r3, #8
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800173c:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001740:	f107 0308 	add.w	r3, r7, #8
 8001744:	3b08      	subs	r3, #8
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800174c:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001750:	f107 0308 	add.w	r3, r7, #8
 8001754:	3b08      	subs	r3, #8
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800175c:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001760:	f107 0308 	add.w	r3, r7, #8
 8001764:	3b08      	subs	r3, #8
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800176c:	f607 72d8 	addw	r2, r7, #4056	; 0xfd8
 8001770:	f107 0308 	add.w	r3, r7, #8
 8001774:	3b08      	subs	r3, #8
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, textcolor,  //@..@
		backcolor, textcolor, textcolor, backcolor,  //.@@.
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_D[10][4] = {
 800177c:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 8001780:	f107 0308 	add.w	r3, r7, #8
 8001784:	3b08      	subs	r3, #8
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	3b08      	subs	r3, #8
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6053      	str	r3, [r2, #4]
 8001798:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 800179c:	f107 0308 	add.w	r3, r7, #8
 80017a0:	3b08      	subs	r3, #8
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6093      	str	r3, [r2, #8]
 80017a6:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80017aa:	f107 0308 	add.w	r3, r7, #8
 80017ae:	3b08      	subs	r3, #8
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	60d3      	str	r3, [r2, #12]
 80017b4:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80017b8:	f107 0308 	add.w	r3, r7, #8
 80017bc:	3b08      	subs	r3, #8
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6113      	str	r3, [r2, #16]
 80017c2:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80017c6:	f107 0308 	add.w	r3, r7, #8
 80017ca:	3b08      	subs	r3, #8
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6153      	str	r3, [r2, #20]
 80017d0:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80017d4:	f107 0308 	add.w	r3, r7, #8
 80017d8:	3b08      	subs	r3, #8
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6193      	str	r3, [r2, #24]
 80017de:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80017e2:	f107 0308 	add.w	r3, r7, #8
 80017e6:	3b08      	subs	r3, #8
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	61d3      	str	r3, [r2, #28]
 80017ec:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 80017f0:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80017f4:	f102 0218 	add.w	r2, r2, #24
 80017f8:	6812      	ldr	r2, [r2, #0]
 80017fa:	621a      	str	r2, [r3, #32]
 80017fc:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 8001800:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001804:	f102 0218 	add.w	r2, r2, #24
 8001808:	6812      	ldr	r2, [r2, #0]
 800180a:	625a      	str	r2, [r3, #36]	; 0x24
 800180c:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 8001810:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001814:	f102 0218 	add.w	r2, r2, #24
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	629a      	str	r2, [r3, #40]	; 0x28
 800181c:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 8001820:	f107 0308 	add.w	r3, r7, #8
 8001824:	3b08      	subs	r3, #8
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	62d3      	str	r3, [r2, #44]	; 0x2c
 800182a:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 800182e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001832:	f102 0218 	add.w	r2, r2, #24
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	631a      	str	r2, [r3, #48]	; 0x30
 800183a:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	3b08      	subs	r3, #8
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6353      	str	r3, [r2, #52]	; 0x34
 8001848:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 800184c:	f107 0308 	add.w	r3, r7, #8
 8001850:	3b08      	subs	r3, #8
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	6393      	str	r3, [r2, #56]	; 0x38
 8001856:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 800185a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800185e:	f102 0218 	add.w	r2, r2, #24
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	63da      	str	r2, [r3, #60]	; 0x3c
 8001866:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 800186a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800186e:	f102 0218 	add.w	r2, r2, #24
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	641a      	str	r2, [r3, #64]	; 0x40
 8001876:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 800187a:	f107 0308 	add.w	r3, r7, #8
 800187e:	3b08      	subs	r3, #8
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6453      	str	r3, [r2, #68]	; 0x44
 8001884:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 8001888:	f107 0308 	add.w	r3, r7, #8
 800188c:	3b08      	subs	r3, #8
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6493      	str	r3, [r2, #72]	; 0x48
 8001892:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 8001896:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800189a:	f102 0218 	add.w	r2, r2, #24
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80018a2:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 80018a6:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80018aa:	f102 0218 	add.w	r2, r2, #24
 80018ae:	6812      	ldr	r2, [r2, #0]
 80018b0:	651a      	str	r2, [r3, #80]	; 0x50
 80018b2:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80018b6:	f107 0308 	add.w	r3, r7, #8
 80018ba:	3b08      	subs	r3, #8
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6553      	str	r3, [r2, #84]	; 0x54
 80018c0:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80018c4:	f107 0308 	add.w	r3, r7, #8
 80018c8:	3b08      	subs	r3, #8
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6593      	str	r3, [r2, #88]	; 0x58
 80018ce:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 80018d2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80018d6:	f102 0218 	add.w	r2, r2, #24
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80018de:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 80018e2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80018e6:	f102 0218 	add.w	r2, r2, #24
 80018ea:	6812      	ldr	r2, [r2, #0]
 80018ec:	661a      	str	r2, [r3, #96]	; 0x60
 80018ee:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80018f2:	f107 0308 	add.w	r3, r7, #8
 80018f6:	3b08      	subs	r3, #8
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6653      	str	r3, [r2, #100]	; 0x64
 80018fc:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 8001900:	f107 0308 	add.w	r3, r7, #8
 8001904:	3b08      	subs	r3, #8
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6693      	str	r3, [r2, #104]	; 0x68
 800190a:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 800190e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001912:	f102 0218 	add.w	r2, r2, #24
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	66da      	str	r2, [r3, #108]	; 0x6c
 800191a:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 800191e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001922:	f102 0218 	add.w	r2, r2, #24
 8001926:	6812      	ldr	r2, [r2, #0]
 8001928:	671a      	str	r2, [r3, #112]	; 0x70
 800192a:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 800192e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001932:	f102 0218 	add.w	r2, r2, #24
 8001936:	6812      	ldr	r2, [r2, #0]
 8001938:	675a      	str	r2, [r3, #116]	; 0x74
 800193a:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 800193e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001942:	f102 0218 	add.w	r2, r2, #24
 8001946:	6812      	ldr	r2, [r2, #0]
 8001948:	679a      	str	r2, [r3, #120]	; 0x78
 800194a:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 800194e:	f107 0308 	add.w	r3, r7, #8
 8001952:	3b08      	subs	r3, #8
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	67d3      	str	r3, [r2, #124]	; 0x7c
 8001958:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 800195c:	f107 0308 	add.w	r3, r7, #8
 8001960:	3b08      	subs	r3, #8
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001968:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 800196c:	f107 0308 	add.w	r3, r7, #8
 8001970:	3b08      	subs	r3, #8
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8001978:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 800197c:	f107 0308 	add.w	r3, r7, #8
 8001980:	3b08      	subs	r3, #8
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001988:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 800198c:	f107 0308 	add.w	r3, r7, #8
 8001990:	3b08      	subs	r3, #8
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001998:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 800199c:	f107 0308 	add.w	r3, r7, #8
 80019a0:	3b08      	subs	r3, #8
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019a8:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80019ac:	f107 0308 	add.w	r3, r7, #8
 80019b0:	3b08      	subs	r3, #8
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80019b8:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80019bc:	f107 0308 	add.w	r3, r7, #8
 80019c0:	3b08      	subs	r3, #8
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 80019c8:	f607 7238 	addw	r2, r7, #3896	; 0xf38
 80019cc:	f107 0308 	add.w	r3, r7, #8
 80019d0:	3b08      	subs	r3, #8
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, textcolor,  //@..@
		textcolor, textcolor, textcolor, backcolor,  //@@@.
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_E[10][4] = {
 80019d8:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 80019dc:	f107 0308 	add.w	r3, r7, #8
 80019e0:	3b08      	subs	r3, #8
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 80019ea:	f107 0308 	add.w	r3, r7, #8
 80019ee:	3b08      	subs	r3, #8
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6053      	str	r3, [r2, #4]
 80019f4:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 80019f8:	f107 0308 	add.w	r3, r7, #8
 80019fc:	3b08      	subs	r3, #8
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6093      	str	r3, [r2, #8]
 8001a02:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001a06:	f107 0308 	add.w	r3, r7, #8
 8001a0a:	3b08      	subs	r3, #8
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	60d3      	str	r3, [r2, #12]
 8001a10:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001a14:	f107 0308 	add.w	r3, r7, #8
 8001a18:	3b08      	subs	r3, #8
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6113      	str	r3, [r2, #16]
 8001a1e:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001a22:	f107 0308 	add.w	r3, r7, #8
 8001a26:	3b08      	subs	r3, #8
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6153      	str	r3, [r2, #20]
 8001a2c:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001a30:	f107 0308 	add.w	r3, r7, #8
 8001a34:	3b08      	subs	r3, #8
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6193      	str	r3, [r2, #24]
 8001a3a:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001a3e:	f107 0308 	add.w	r3, r7, #8
 8001a42:	3b08      	subs	r3, #8
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	61d3      	str	r3, [r2, #28]
 8001a48:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001a4c:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001a50:	f102 0218 	add.w	r2, r2, #24
 8001a54:	6812      	ldr	r2, [r2, #0]
 8001a56:	621a      	str	r2, [r3, #32]
 8001a58:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001a5c:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001a60:	f102 0218 	add.w	r2, r2, #24
 8001a64:	6812      	ldr	r2, [r2, #0]
 8001a66:	625a      	str	r2, [r3, #36]	; 0x24
 8001a68:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001a6c:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001a70:	f102 0218 	add.w	r2, r2, #24
 8001a74:	6812      	ldr	r2, [r2, #0]
 8001a76:	629a      	str	r2, [r3, #40]	; 0x28
 8001a78:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001a7c:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001a80:	f102 0218 	add.w	r2, r2, #24
 8001a84:	6812      	ldr	r2, [r2, #0]
 8001a86:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a88:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001a8c:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001a90:	f102 0218 	add.w	r2, r2, #24
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	631a      	str	r2, [r3, #48]	; 0x30
 8001a98:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001a9c:	f107 0308 	add.w	r3, r7, #8
 8001aa0:	3b08      	subs	r3, #8
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6353      	str	r3, [r2, #52]	; 0x34
 8001aa6:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001aaa:	f107 0308 	add.w	r3, r7, #8
 8001aae:	3b08      	subs	r3, #8
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6393      	str	r3, [r2, #56]	; 0x38
 8001ab4:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001ab8:	f107 0308 	add.w	r3, r7, #8
 8001abc:	3b08      	subs	r3, #8
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001ac2:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001ac6:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001aca:	f102 0218 	add.w	r2, r2, #24
 8001ace:	6812      	ldr	r2, [r2, #0]
 8001ad0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ad2:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001ad6:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001ada:	f102 0218 	add.w	r2, r2, #24
 8001ade:	6812      	ldr	r2, [r2, #0]
 8001ae0:	645a      	str	r2, [r3, #68]	; 0x44
 8001ae2:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001ae6:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001aea:	f102 0218 	add.w	r2, r2, #24
 8001aee:	6812      	ldr	r2, [r2, #0]
 8001af0:	649a      	str	r2, [r3, #72]	; 0x48
 8001af2:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001af6:	f107 0308 	add.w	r3, r7, #8
 8001afa:	3b08      	subs	r3, #8
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b00:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001b04:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001b08:	f102 0218 	add.w	r2, r2, #24
 8001b0c:	6812      	ldr	r2, [r2, #0]
 8001b0e:	651a      	str	r2, [r3, #80]	; 0x50
 8001b10:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001b14:	f107 0308 	add.w	r3, r7, #8
 8001b18:	3b08      	subs	r3, #8
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	6553      	str	r3, [r2, #84]	; 0x54
 8001b1e:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001b22:	f107 0308 	add.w	r3, r7, #8
 8001b26:	3b08      	subs	r3, #8
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b2c:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001b30:	f107 0308 	add.w	r3, r7, #8
 8001b34:	3b08      	subs	r3, #8
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001b3a:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001b3e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001b42:	f102 0218 	add.w	r2, r2, #24
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	661a      	str	r2, [r3, #96]	; 0x60
 8001b4a:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001b4e:	f107 0308 	add.w	r3, r7, #8
 8001b52:	3b08      	subs	r3, #8
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6653      	str	r3, [r2, #100]	; 0x64
 8001b58:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001b5c:	f107 0308 	add.w	r3, r7, #8
 8001b60:	3b08      	subs	r3, #8
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6693      	str	r3, [r2, #104]	; 0x68
 8001b66:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001b6a:	f107 0308 	add.w	r3, r7, #8
 8001b6e:	3b08      	subs	r3, #8
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	66d3      	str	r3, [r2, #108]	; 0x6c
 8001b74:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001b78:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001b7c:	f102 0218 	add.w	r2, r2, #24
 8001b80:	6812      	ldr	r2, [r2, #0]
 8001b82:	671a      	str	r2, [r3, #112]	; 0x70
 8001b84:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001b88:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001b8c:	f102 0218 	add.w	r2, r2, #24
 8001b90:	6812      	ldr	r2, [r2, #0]
 8001b92:	675a      	str	r2, [r3, #116]	; 0x74
 8001b94:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001b98:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001b9c:	f102 0218 	add.w	r2, r2, #24
 8001ba0:	6812      	ldr	r2, [r2, #0]
 8001ba2:	679a      	str	r2, [r3, #120]	; 0x78
 8001ba4:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 8001ba8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001bac:	f102 0218 	add.w	r2, r2, #24
 8001bb0:	6812      	ldr	r2, [r2, #0]
 8001bb2:	67da      	str	r2, [r3, #124]	; 0x7c
 8001bb4:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001bb8:	f107 0308 	add.w	r3, r7, #8
 8001bbc:	3b08      	subs	r3, #8
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001bc4:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001bc8:	f107 0308 	add.w	r3, r7, #8
 8001bcc:	3b08      	subs	r3, #8
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8001bd4:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001bd8:	f107 0308 	add.w	r3, r7, #8
 8001bdc:	3b08      	subs	r3, #8
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001be4:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001be8:	f107 0308 	add.w	r3, r7, #8
 8001bec:	3b08      	subs	r3, #8
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001bf4:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001bf8:	f107 0308 	add.w	r3, r7, #8
 8001bfc:	3b08      	subs	r3, #8
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c04:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001c08:	f107 0308 	add.w	r3, r7, #8
 8001c0c:	3b08      	subs	r3, #8
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001c14:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001c18:	f107 0308 	add.w	r3, r7, #8
 8001c1c:	3b08      	subs	r3, #8
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8001c24:	f607 6298 	addw	r2, r7, #3736	; 0xe98
 8001c28:	f107 0308 	add.w	r3, r7, #8
 8001c2c:	3b08      	subs	r3, #8
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, backcolor,  //@...
		textcolor, textcolor, textcolor, textcolor,  //@@@@
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_F[10][4] = {
 8001c34:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001c38:	f107 0308 	add.w	r3, r7, #8
 8001c3c:	3b08      	subs	r3, #8
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001c46:	f107 0308 	add.w	r3, r7, #8
 8001c4a:	3b08      	subs	r3, #8
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6053      	str	r3, [r2, #4]
 8001c50:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001c54:	f107 0308 	add.w	r3, r7, #8
 8001c58:	3b08      	subs	r3, #8
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6093      	str	r3, [r2, #8]
 8001c5e:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001c62:	f107 0308 	add.w	r3, r7, #8
 8001c66:	3b08      	subs	r3, #8
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	60d3      	str	r3, [r2, #12]
 8001c6c:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001c70:	f107 0308 	add.w	r3, r7, #8
 8001c74:	3b08      	subs	r3, #8
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	6113      	str	r3, [r2, #16]
 8001c7a:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001c7e:	f107 0308 	add.w	r3, r7, #8
 8001c82:	3b08      	subs	r3, #8
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6153      	str	r3, [r2, #20]
 8001c88:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001c8c:	f107 0308 	add.w	r3, r7, #8
 8001c90:	3b08      	subs	r3, #8
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6193      	str	r3, [r2, #24]
 8001c96:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001c9a:	f107 0308 	add.w	r3, r7, #8
 8001c9e:	3b08      	subs	r3, #8
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	61d3      	str	r3, [r2, #28]
 8001ca4:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001ca8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001cac:	f102 0218 	add.w	r2, r2, #24
 8001cb0:	6812      	ldr	r2, [r2, #0]
 8001cb2:	621a      	str	r2, [r3, #32]
 8001cb4:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001cb8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001cbc:	f102 0218 	add.w	r2, r2, #24
 8001cc0:	6812      	ldr	r2, [r2, #0]
 8001cc2:	625a      	str	r2, [r3, #36]	; 0x24
 8001cc4:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001cc8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001ccc:	f102 0218 	add.w	r2, r2, #24
 8001cd0:	6812      	ldr	r2, [r2, #0]
 8001cd2:	629a      	str	r2, [r3, #40]	; 0x28
 8001cd4:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001cd8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001cdc:	f102 0218 	add.w	r2, r2, #24
 8001ce0:	6812      	ldr	r2, [r2, #0]
 8001ce2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ce4:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001ce8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001cec:	f102 0218 	add.w	r2, r2, #24
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	631a      	str	r2, [r3, #48]	; 0x30
 8001cf4:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001cf8:	f107 0308 	add.w	r3, r7, #8
 8001cfc:	3b08      	subs	r3, #8
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6353      	str	r3, [r2, #52]	; 0x34
 8001d02:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001d06:	f107 0308 	add.w	r3, r7, #8
 8001d0a:	3b08      	subs	r3, #8
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6393      	str	r3, [r2, #56]	; 0x38
 8001d10:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001d14:	f107 0308 	add.w	r3, r7, #8
 8001d18:	3b08      	subs	r3, #8
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001d1e:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001d22:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001d26:	f102 0218 	add.w	r2, r2, #24
 8001d2a:	6812      	ldr	r2, [r2, #0]
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40
 8001d2e:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001d32:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001d36:	f102 0218 	add.w	r2, r2, #24
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	645a      	str	r2, [r3, #68]	; 0x44
 8001d3e:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001d42:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001d46:	f102 0218 	add.w	r2, r2, #24
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	649a      	str	r2, [r3, #72]	; 0x48
 8001d4e:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001d52:	f107 0308 	add.w	r3, r7, #8
 8001d56:	3b08      	subs	r3, #8
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d5c:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001d60:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001d64:	f102 0218 	add.w	r2, r2, #24
 8001d68:	6812      	ldr	r2, [r2, #0]
 8001d6a:	651a      	str	r2, [r3, #80]	; 0x50
 8001d6c:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001d70:	f107 0308 	add.w	r3, r7, #8
 8001d74:	3b08      	subs	r3, #8
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6553      	str	r3, [r2, #84]	; 0x54
 8001d7a:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001d7e:	f107 0308 	add.w	r3, r7, #8
 8001d82:	3b08      	subs	r3, #8
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6593      	str	r3, [r2, #88]	; 0x58
 8001d88:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001d8c:	f107 0308 	add.w	r3, r7, #8
 8001d90:	3b08      	subs	r3, #8
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001d96:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001d9a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001d9e:	f102 0218 	add.w	r2, r2, #24
 8001da2:	6812      	ldr	r2, [r2, #0]
 8001da4:	661a      	str	r2, [r3, #96]	; 0x60
 8001da6:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001daa:	f107 0308 	add.w	r3, r7, #8
 8001dae:	3b08      	subs	r3, #8
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6653      	str	r3, [r2, #100]	; 0x64
 8001db4:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001db8:	f107 0308 	add.w	r3, r7, #8
 8001dbc:	3b08      	subs	r3, #8
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6693      	str	r3, [r2, #104]	; 0x68
 8001dc2:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001dc6:	f107 0308 	add.w	r3, r7, #8
 8001dca:	3b08      	subs	r3, #8
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	66d3      	str	r3, [r2, #108]	; 0x6c
 8001dd0:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 8001dd4:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001dd8:	f102 0218 	add.w	r2, r2, #24
 8001ddc:	6812      	ldr	r2, [r2, #0]
 8001dde:	671a      	str	r2, [r3, #112]	; 0x70
 8001de0:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001de4:	f107 0308 	add.w	r3, r7, #8
 8001de8:	3b08      	subs	r3, #8
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6753      	str	r3, [r2, #116]	; 0x74
 8001dee:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001df2:	f107 0308 	add.w	r3, r7, #8
 8001df6:	3b08      	subs	r3, #8
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6793      	str	r3, [r2, #120]	; 0x78
 8001dfc:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001e00:	f107 0308 	add.w	r3, r7, #8
 8001e04:	3b08      	subs	r3, #8
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	67d3      	str	r3, [r2, #124]	; 0x7c
 8001e0a:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001e0e:	f107 0308 	add.w	r3, r7, #8
 8001e12:	3b08      	subs	r3, #8
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e1a:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001e1e:	f107 0308 	add.w	r3, r7, #8
 8001e22:	3b08      	subs	r3, #8
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8001e2a:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001e2e:	f107 0308 	add.w	r3, r7, #8
 8001e32:	3b08      	subs	r3, #8
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001e3a:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001e3e:	f107 0308 	add.w	r3, r7, #8
 8001e42:	3b08      	subs	r3, #8
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e4a:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001e4e:	f107 0308 	add.w	r3, r7, #8
 8001e52:	3b08      	subs	r3, #8
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e5a:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001e5e:	f107 0308 	add.w	r3, r7, #8
 8001e62:	3b08      	subs	r3, #8
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001e6a:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001e6e:	f107 0308 	add.w	r3, r7, #8
 8001e72:	3b08      	subs	r3, #8
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8001e7a:	f607 52f8 	addw	r2, r7, #3576	; 0xdf8
 8001e7e:	f107 0308 	add.w	r3, r7, #8
 8001e82:	3b08      	subs	r3, #8
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, backcolor,  //@...
		textcolor, backcolor, backcolor, backcolor,  //@...
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_G[10][4] = {
 8001e8a:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001e8e:	f107 0308 	add.w	r3, r7, #8
 8001e92:	3b08      	subs	r3, #8
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001e9c:	f107 0308 	add.w	r3, r7, #8
 8001ea0:	3b08      	subs	r3, #8
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6053      	str	r3, [r2, #4]
 8001ea6:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001eaa:	f107 0308 	add.w	r3, r7, #8
 8001eae:	3b08      	subs	r3, #8
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6093      	str	r3, [r2, #8]
 8001eb4:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001eb8:	f107 0308 	add.w	r3, r7, #8
 8001ebc:	3b08      	subs	r3, #8
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60d3      	str	r3, [r2, #12]
 8001ec2:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001ec6:	f107 0308 	add.w	r3, r7, #8
 8001eca:	3b08      	subs	r3, #8
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6113      	str	r3, [r2, #16]
 8001ed0:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001ed4:	f107 0308 	add.w	r3, r7, #8
 8001ed8:	3b08      	subs	r3, #8
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6153      	str	r3, [r2, #20]
 8001ede:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001ee2:	f107 0308 	add.w	r3, r7, #8
 8001ee6:	3b08      	subs	r3, #8
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6193      	str	r3, [r2, #24]
 8001eec:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001ef0:	f107 0308 	add.w	r3, r7, #8
 8001ef4:	3b08      	subs	r3, #8
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	61d3      	str	r3, [r2, #28]
 8001efa:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001efe:	f107 0308 	add.w	r3, r7, #8
 8001f02:	3b08      	subs	r3, #8
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6213      	str	r3, [r2, #32]
 8001f08:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001f0c:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001f10:	f102 0218 	add.w	r2, r2, #24
 8001f14:	6812      	ldr	r2, [r2, #0]
 8001f16:	625a      	str	r2, [r3, #36]	; 0x24
 8001f18:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001f1c:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001f20:	f102 0218 	add.w	r2, r2, #24
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	629a      	str	r2, [r3, #40]	; 0x28
 8001f28:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001f2c:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001f30:	f102 0218 	add.w	r2, r2, #24
 8001f34:	6812      	ldr	r2, [r2, #0]
 8001f36:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f38:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001f3c:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001f40:	f102 0218 	add.w	r2, r2, #24
 8001f44:	6812      	ldr	r2, [r2, #0]
 8001f46:	631a      	str	r2, [r3, #48]	; 0x30
 8001f48:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001f4c:	f107 0308 	add.w	r3, r7, #8
 8001f50:	3b08      	subs	r3, #8
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6353      	str	r3, [r2, #52]	; 0x34
 8001f56:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001f5a:	f107 0308 	add.w	r3, r7, #8
 8001f5e:	3b08      	subs	r3, #8
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6393      	str	r3, [r2, #56]	; 0x38
 8001f64:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001f68:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001f6c:	f102 0218 	add.w	r2, r2, #24
 8001f70:	6812      	ldr	r2, [r2, #0]
 8001f72:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f74:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001f78:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001f7c:	f102 0218 	add.w	r2, r2, #24
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	641a      	str	r2, [r3, #64]	; 0x40
 8001f84:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001f88:	f107 0308 	add.w	r3, r7, #8
 8001f8c:	3b08      	subs	r3, #8
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6453      	str	r3, [r2, #68]	; 0x44
 8001f92:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001f96:	f107 0308 	add.w	r3, r7, #8
 8001f9a:	3b08      	subs	r3, #8
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6493      	str	r3, [r2, #72]	; 0x48
 8001fa0:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001fa4:	f107 0308 	add.w	r3, r7, #8
 8001fa8:	3b08      	subs	r3, #8
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fae:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001fb2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001fb6:	f102 0218 	add.w	r2, r2, #24
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	651a      	str	r2, [r3, #80]	; 0x50
 8001fbe:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8001fc2:	f107 0308 	add.w	r3, r7, #8
 8001fc6:	3b08      	subs	r3, #8
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6553      	str	r3, [r2, #84]	; 0x54
 8001fcc:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001fd0:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001fd4:	f102 0218 	add.w	r2, r2, #24
 8001fd8:	6812      	ldr	r2, [r2, #0]
 8001fda:	659a      	str	r2, [r3, #88]	; 0x58
 8001fdc:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001fe0:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001fe4:	f102 0218 	add.w	r2, r2, #24
 8001fe8:	6812      	ldr	r2, [r2, #0]
 8001fea:	65da      	str	r2, [r3, #92]	; 0x5c
 8001fec:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 8001ff0:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8001ff4:	f102 0218 	add.w	r2, r2, #24
 8001ff8:	6812      	ldr	r2, [r2, #0]
 8001ffa:	661a      	str	r2, [r3, #96]	; 0x60
 8001ffc:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8002000:	f107 0308 	add.w	r3, r7, #8
 8002004:	3b08      	subs	r3, #8
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6653      	str	r3, [r2, #100]	; 0x64
 800200a:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 800200e:	f107 0308 	add.w	r3, r7, #8
 8002012:	3b08      	subs	r3, #8
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6693      	str	r3, [r2, #104]	; 0x68
 8002018:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 800201c:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002020:	f102 0218 	add.w	r2, r2, #24
 8002024:	6812      	ldr	r2, [r2, #0]
 8002026:	66da      	str	r2, [r3, #108]	; 0x6c
 8002028:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 800202c:	f107 0308 	add.w	r3, r7, #8
 8002030:	3b08      	subs	r3, #8
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6713      	str	r3, [r2, #112]	; 0x70
 8002036:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 800203a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800203e:	f102 0218 	add.w	r2, r2, #24
 8002042:	6812      	ldr	r2, [r2, #0]
 8002044:	675a      	str	r2, [r3, #116]	; 0x74
 8002046:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 800204a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800204e:	f102 0218 	add.w	r2, r2, #24
 8002052:	6812      	ldr	r2, [r2, #0]
 8002054:	679a      	str	r2, [r3, #120]	; 0x78
 8002056:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 800205a:	f107 0308 	add.w	r3, r7, #8
 800205e:	3b08      	subs	r3, #8
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	67d3      	str	r3, [r2, #124]	; 0x7c
 8002064:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8002068:	f107 0308 	add.w	r3, r7, #8
 800206c:	3b08      	subs	r3, #8
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002074:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8002078:	f107 0308 	add.w	r3, r7, #8
 800207c:	3b08      	subs	r3, #8
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8002084:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8002088:	f107 0308 	add.w	r3, r7, #8
 800208c:	3b08      	subs	r3, #8
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002094:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 8002098:	f107 0308 	add.w	r3, r7, #8
 800209c:	3b08      	subs	r3, #8
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80020a4:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 80020a8:	f107 0308 	add.w	r3, r7, #8
 80020ac:	3b08      	subs	r3, #8
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020b4:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 80020b8:	f107 0308 	add.w	r3, r7, #8
 80020bc:	3b08      	subs	r3, #8
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80020c4:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 80020c8:	f107 0308 	add.w	r3, r7, #8
 80020cc:	3b08      	subs	r3, #8
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 80020d4:	f607 5258 	addw	r2, r7, #3416	; 0xd58
 80020d8:	f107 0308 	add.w	r3, r7, #8
 80020dc:	3b08      	subs	r3, #8
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, textcolor,  //@..@
		backcolor, textcolor, textcolor, backcolor,  //.@@.
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_H[10][4] = {
 80020e4:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 80020e8:	f107 0308 	add.w	r3, r7, #8
 80020ec:	3b08      	subs	r3, #8
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 80020f6:	f107 0308 	add.w	r3, r7, #8
 80020fa:	3b08      	subs	r3, #8
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6053      	str	r3, [r2, #4]
 8002100:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8002104:	f107 0308 	add.w	r3, r7, #8
 8002108:	3b08      	subs	r3, #8
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	6093      	str	r3, [r2, #8]
 800210e:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8002112:	f107 0308 	add.w	r3, r7, #8
 8002116:	3b08      	subs	r3, #8
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	60d3      	str	r3, [r2, #12]
 800211c:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8002120:	f107 0308 	add.w	r3, r7, #8
 8002124:	3b08      	subs	r3, #8
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6113      	str	r3, [r2, #16]
 800212a:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 800212e:	f107 0308 	add.w	r3, r7, #8
 8002132:	3b08      	subs	r3, #8
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6153      	str	r3, [r2, #20]
 8002138:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 800213c:	f107 0308 	add.w	r3, r7, #8
 8002140:	3b08      	subs	r3, #8
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6193      	str	r3, [r2, #24]
 8002146:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 800214a:	f107 0308 	add.w	r3, r7, #8
 800214e:	3b08      	subs	r3, #8
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	61d3      	str	r3, [r2, #28]
 8002154:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8002158:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800215c:	f102 0218 	add.w	r2, r2, #24
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	621a      	str	r2, [r3, #32]
 8002164:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8002168:	f107 0308 	add.w	r3, r7, #8
 800216c:	3b08      	subs	r3, #8
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6253      	str	r3, [r2, #36]	; 0x24
 8002172:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8002176:	f107 0308 	add.w	r3, r7, #8
 800217a:	3b08      	subs	r3, #8
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6293      	str	r3, [r2, #40]	; 0x28
 8002180:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8002184:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002188:	f102 0218 	add.w	r2, r2, #24
 800218c:	6812      	ldr	r2, [r2, #0]
 800218e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002190:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8002194:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002198:	f102 0218 	add.w	r2, r2, #24
 800219c:	6812      	ldr	r2, [r2, #0]
 800219e:	631a      	str	r2, [r3, #48]	; 0x30
 80021a0:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 80021a4:	f107 0308 	add.w	r3, r7, #8
 80021a8:	3b08      	subs	r3, #8
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6353      	str	r3, [r2, #52]	; 0x34
 80021ae:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 80021b2:	f107 0308 	add.w	r3, r7, #8
 80021b6:	3b08      	subs	r3, #8
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6393      	str	r3, [r2, #56]	; 0x38
 80021bc:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 80021c0:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80021c4:	f102 0218 	add.w	r2, r2, #24
 80021c8:	6812      	ldr	r2, [r2, #0]
 80021ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80021cc:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 80021d0:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80021d4:	f102 0218 	add.w	r2, r2, #24
 80021d8:	6812      	ldr	r2, [r2, #0]
 80021da:	641a      	str	r2, [r3, #64]	; 0x40
 80021dc:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 80021e0:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80021e4:	f102 0218 	add.w	r2, r2, #24
 80021e8:	6812      	ldr	r2, [r2, #0]
 80021ea:	645a      	str	r2, [r3, #68]	; 0x44
 80021ec:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 80021f0:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80021f4:	f102 0218 	add.w	r2, r2, #24
 80021f8:	6812      	ldr	r2, [r2, #0]
 80021fa:	649a      	str	r2, [r3, #72]	; 0x48
 80021fc:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8002200:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002204:	f102 0218 	add.w	r2, r2, #24
 8002208:	6812      	ldr	r2, [r2, #0]
 800220a:	64da      	str	r2, [r3, #76]	; 0x4c
 800220c:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8002210:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002214:	f102 0218 	add.w	r2, r2, #24
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	651a      	str	r2, [r3, #80]	; 0x50
 800221c:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8002220:	f107 0308 	add.w	r3, r7, #8
 8002224:	3b08      	subs	r3, #8
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6553      	str	r3, [r2, #84]	; 0x54
 800222a:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 800222e:	f107 0308 	add.w	r3, r7, #8
 8002232:	3b08      	subs	r3, #8
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6593      	str	r3, [r2, #88]	; 0x58
 8002238:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 800223c:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002240:	f102 0218 	add.w	r2, r2, #24
 8002244:	6812      	ldr	r2, [r2, #0]
 8002246:	65da      	str	r2, [r3, #92]	; 0x5c
 8002248:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 800224c:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002250:	f102 0218 	add.w	r2, r2, #24
 8002254:	6812      	ldr	r2, [r2, #0]
 8002256:	661a      	str	r2, [r3, #96]	; 0x60
 8002258:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 800225c:	f107 0308 	add.w	r3, r7, #8
 8002260:	3b08      	subs	r3, #8
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6653      	str	r3, [r2, #100]	; 0x64
 8002266:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 800226a:	f107 0308 	add.w	r3, r7, #8
 800226e:	3b08      	subs	r3, #8
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6693      	str	r3, [r2, #104]	; 0x68
 8002274:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8002278:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800227c:	f102 0218 	add.w	r2, r2, #24
 8002280:	6812      	ldr	r2, [r2, #0]
 8002282:	66da      	str	r2, [r3, #108]	; 0x6c
 8002284:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 8002288:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800228c:	f102 0218 	add.w	r2, r2, #24
 8002290:	6812      	ldr	r2, [r2, #0]
 8002292:	671a      	str	r2, [r3, #112]	; 0x70
 8002294:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8002298:	f107 0308 	add.w	r3, r7, #8
 800229c:	3b08      	subs	r3, #8
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6753      	str	r3, [r2, #116]	; 0x74
 80022a2:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 80022a6:	f107 0308 	add.w	r3, r7, #8
 80022aa:	3b08      	subs	r3, #8
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	6793      	str	r3, [r2, #120]	; 0x78
 80022b0:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 80022b4:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80022b8:	f102 0218 	add.w	r2, r2, #24
 80022bc:	6812      	ldr	r2, [r2, #0]
 80022be:	67da      	str	r2, [r3, #124]	; 0x7c
 80022c0:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 80022c4:	f107 0308 	add.w	r3, r7, #8
 80022c8:	3b08      	subs	r3, #8
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80022d0:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 80022d4:	f107 0308 	add.w	r3, r7, #8
 80022d8:	3b08      	subs	r3, #8
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80022e0:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 80022e4:	f107 0308 	add.w	r3, r7, #8
 80022e8:	3b08      	subs	r3, #8
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80022f0:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 80022f4:	f107 0308 	add.w	r3, r7, #8
 80022f8:	3b08      	subs	r3, #8
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002300:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8002304:	f107 0308 	add.w	r3, r7, #8
 8002308:	3b08      	subs	r3, #8
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002310:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8002314:	f107 0308 	add.w	r3, r7, #8
 8002318:	3b08      	subs	r3, #8
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002320:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8002324:	f107 0308 	add.w	r3, r7, #8
 8002328:	3b08      	subs	r3, #8
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8002330:	f607 42b8 	addw	r2, r7, #3256	; 0xcb8
 8002334:	f107 0308 	add.w	r3, r7, #8
 8002338:	3b08      	subs	r3, #8
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, textcolor,  //@..@
		textcolor, backcolor, backcolor, textcolor,  //@..@
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_I[10][3] = {
 8002340:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8002344:	f107 0308 	add.w	r3, r7, #8
 8002348:	3b08      	subs	r3, #8
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8002352:	f107 0308 	add.w	r3, r7, #8
 8002356:	3b08      	subs	r3, #8
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6053      	str	r3, [r2, #4]
 800235c:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8002360:	f107 0308 	add.w	r3, r7, #8
 8002364:	3b08      	subs	r3, #8
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	6093      	str	r3, [r2, #8]
 800236a:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 800236e:	f107 0308 	add.w	r3, r7, #8
 8002372:	3b08      	subs	r3, #8
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	60d3      	str	r3, [r2, #12]
 8002378:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 800237c:	f107 0308 	add.w	r3, r7, #8
 8002380:	3b08      	subs	r3, #8
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6113      	str	r3, [r2, #16]
 8002386:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 800238a:	f107 0308 	add.w	r3, r7, #8
 800238e:	3b08      	subs	r3, #8
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6153      	str	r3, [r2, #20]
 8002394:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8002398:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800239c:	f102 0218 	add.w	r2, r2, #24
 80023a0:	6812      	ldr	r2, [r2, #0]
 80023a2:	619a      	str	r2, [r3, #24]
 80023a4:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 80023a8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80023ac:	f102 0218 	add.w	r2, r2, #24
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	61da      	str	r2, [r3, #28]
 80023b4:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 80023b8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80023bc:	f102 0218 	add.w	r2, r2, #24
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	621a      	str	r2, [r3, #32]
 80023c4:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 80023c8:	f107 0308 	add.w	r3, r7, #8
 80023cc:	3b08      	subs	r3, #8
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6253      	str	r3, [r2, #36]	; 0x24
 80023d2:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 80023d6:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80023da:	f102 0218 	add.w	r2, r2, #24
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	629a      	str	r2, [r3, #40]	; 0x28
 80023e2:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 80023e6:	f107 0308 	add.w	r3, r7, #8
 80023ea:	3b08      	subs	r3, #8
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80023f0:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 80023f4:	f107 0308 	add.w	r3, r7, #8
 80023f8:	3b08      	subs	r3, #8
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6313      	str	r3, [r2, #48]	; 0x30
 80023fe:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8002402:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002406:	f102 0218 	add.w	r2, r2, #24
 800240a:	6812      	ldr	r2, [r2, #0]
 800240c:	635a      	str	r2, [r3, #52]	; 0x34
 800240e:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8002412:	f107 0308 	add.w	r3, r7, #8
 8002416:	3b08      	subs	r3, #8
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6393      	str	r3, [r2, #56]	; 0x38
 800241c:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8002420:	f107 0308 	add.w	r3, r7, #8
 8002424:	3b08      	subs	r3, #8
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	63d3      	str	r3, [r2, #60]	; 0x3c
 800242a:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 800242e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002432:	f102 0218 	add.w	r2, r2, #24
 8002436:	6812      	ldr	r2, [r2, #0]
 8002438:	641a      	str	r2, [r3, #64]	; 0x40
 800243a:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 800243e:	f107 0308 	add.w	r3, r7, #8
 8002442:	3b08      	subs	r3, #8
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	6453      	str	r3, [r2, #68]	; 0x44
 8002448:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 800244c:	f107 0308 	add.w	r3, r7, #8
 8002450:	3b08      	subs	r3, #8
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6493      	str	r3, [r2, #72]	; 0x48
 8002456:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 800245a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800245e:	f102 0218 	add.w	r2, r2, #24
 8002462:	6812      	ldr	r2, [r2, #0]
 8002464:	64da      	str	r2, [r3, #76]	; 0x4c
 8002466:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 800246a:	f107 0308 	add.w	r3, r7, #8
 800246e:	3b08      	subs	r3, #8
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6513      	str	r3, [r2, #80]	; 0x50
 8002474:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8002478:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800247c:	f102 0218 	add.w	r2, r2, #24
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	655a      	str	r2, [r3, #84]	; 0x54
 8002484:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8002488:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800248c:	f102 0218 	add.w	r2, r2, #24
 8002490:	6812      	ldr	r2, [r2, #0]
 8002492:	659a      	str	r2, [r3, #88]	; 0x58
 8002494:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8002498:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800249c:	f102 0218 	add.w	r2, r2, #24
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	65da      	str	r2, [r3, #92]	; 0x5c
 80024a4:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 80024a8:	f107 0308 	add.w	r3, r7, #8
 80024ac:	3b08      	subs	r3, #8
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6613      	str	r3, [r2, #96]	; 0x60
 80024b2:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 80024b6:	f107 0308 	add.w	r3, r7, #8
 80024ba:	3b08      	subs	r3, #8
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6653      	str	r3, [r2, #100]	; 0x64
 80024c0:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 80024c4:	f107 0308 	add.w	r3, r7, #8
 80024c8:	3b08      	subs	r3, #8
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6693      	str	r3, [r2, #104]	; 0x68
 80024ce:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 80024d2:	f107 0308 	add.w	r3, r7, #8
 80024d6:	3b08      	subs	r3, #8
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	66d3      	str	r3, [r2, #108]	; 0x6c
 80024dc:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 80024e0:	f107 0308 	add.w	r3, r7, #8
 80024e4:	3b08      	subs	r3, #8
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6713      	str	r3, [r2, #112]	; 0x70
 80024ea:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 80024ee:	f107 0308 	add.w	r3, r7, #8
 80024f2:	3b08      	subs	r3, #8
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6753      	str	r3, [r2, #116]	; 0x74
		backcolor, textcolor, backcolor,  //.@.
		textcolor, textcolor, textcolor,  //@@@
		backcolor, backcolor, backcolor,  //...
		backcolor, backcolor, backcolor,  //...
	};
	int letter_J[10][4] = {
 80024f8:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80024fc:	f107 0308 	add.w	r3, r7, #8
 8002500:	3b08      	subs	r3, #8
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800250a:	f107 0308 	add.w	r3, r7, #8
 800250e:	3b08      	subs	r3, #8
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6053      	str	r3, [r2, #4]
 8002514:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002518:	f107 0308 	add.w	r3, r7, #8
 800251c:	3b08      	subs	r3, #8
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6093      	str	r3, [r2, #8]
 8002522:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002526:	f107 0308 	add.w	r3, r7, #8
 800252a:	3b08      	subs	r3, #8
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	60d3      	str	r3, [r2, #12]
 8002530:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002534:	f107 0308 	add.w	r3, r7, #8
 8002538:	3b08      	subs	r3, #8
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6113      	str	r3, [r2, #16]
 800253e:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002542:	f107 0308 	add.w	r3, r7, #8
 8002546:	3b08      	subs	r3, #8
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6153      	str	r3, [r2, #20]
 800254c:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002550:	f107 0308 	add.w	r3, r7, #8
 8002554:	3b08      	subs	r3, #8
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6193      	str	r3, [r2, #24]
 800255a:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800255e:	f107 0308 	add.w	r3, r7, #8
 8002562:	3b08      	subs	r3, #8
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	61d3      	str	r3, [r2, #28]
 8002568:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800256c:	f107 0308 	add.w	r3, r7, #8
 8002570:	3b08      	subs	r3, #8
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6213      	str	r3, [r2, #32]
 8002576:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800257a:	f107 0308 	add.w	r3, r7, #8
 800257e:	3b08      	subs	r3, #8
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6253      	str	r3, [r2, #36]	; 0x24
 8002584:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002588:	f107 0308 	add.w	r3, r7, #8
 800258c:	3b08      	subs	r3, #8
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6293      	str	r3, [r2, #40]	; 0x28
 8002592:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8002596:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800259a:	f102 0218 	add.w	r2, r2, #24
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80025a2:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80025a6:	f107 0308 	add.w	r3, r7, #8
 80025aa:	3b08      	subs	r3, #8
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6313      	str	r3, [r2, #48]	; 0x30
 80025b0:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80025b4:	f107 0308 	add.w	r3, r7, #8
 80025b8:	3b08      	subs	r3, #8
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6353      	str	r3, [r2, #52]	; 0x34
 80025be:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80025c2:	f107 0308 	add.w	r3, r7, #8
 80025c6:	3b08      	subs	r3, #8
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6393      	str	r3, [r2, #56]	; 0x38
 80025cc:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 80025d0:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80025d4:	f102 0218 	add.w	r2, r2, #24
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	63da      	str	r2, [r3, #60]	; 0x3c
 80025dc:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80025e0:	f107 0308 	add.w	r3, r7, #8
 80025e4:	3b08      	subs	r3, #8
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ea:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80025ee:	f107 0308 	add.w	r3, r7, #8
 80025f2:	3b08      	subs	r3, #8
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6453      	str	r3, [r2, #68]	; 0x44
 80025f8:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80025fc:	f107 0308 	add.w	r3, r7, #8
 8002600:	3b08      	subs	r3, #8
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6493      	str	r3, [r2, #72]	; 0x48
 8002606:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 800260a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800260e:	f102 0218 	add.w	r2, r2, #24
 8002612:	6812      	ldr	r2, [r2, #0]
 8002614:	64da      	str	r2, [r3, #76]	; 0x4c
 8002616:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800261a:	f107 0308 	add.w	r3, r7, #8
 800261e:	3b08      	subs	r3, #8
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6513      	str	r3, [r2, #80]	; 0x50
 8002624:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002628:	f107 0308 	add.w	r3, r7, #8
 800262c:	3b08      	subs	r3, #8
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6553      	str	r3, [r2, #84]	; 0x54
 8002632:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002636:	f107 0308 	add.w	r3, r7, #8
 800263a:	3b08      	subs	r3, #8
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6593      	str	r3, [r2, #88]	; 0x58
 8002640:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8002644:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002648:	f102 0218 	add.w	r2, r2, #24
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002650:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8002654:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002658:	f102 0218 	add.w	r2, r2, #24
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	661a      	str	r2, [r3, #96]	; 0x60
 8002660:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002664:	f107 0308 	add.w	r3, r7, #8
 8002668:	3b08      	subs	r3, #8
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6653      	str	r3, [r2, #100]	; 0x64
 800266e:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002672:	f107 0308 	add.w	r3, r7, #8
 8002676:	3b08      	subs	r3, #8
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6693      	str	r3, [r2, #104]	; 0x68
 800267c:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8002680:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002684:	f102 0218 	add.w	r2, r2, #24
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	66da      	str	r2, [r3, #108]	; 0x6c
 800268c:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8002690:	f107 0308 	add.w	r3, r7, #8
 8002694:	3b08      	subs	r3, #8
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6713      	str	r3, [r2, #112]	; 0x70
 800269a:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 800269e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80026a2:	f102 0218 	add.w	r2, r2, #24
 80026a6:	6812      	ldr	r2, [r2, #0]
 80026a8:	675a      	str	r2, [r3, #116]	; 0x74
 80026aa:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 80026ae:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80026b2:	f102 0218 	add.w	r2, r2, #24
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	679a      	str	r2, [r3, #120]	; 0x78
 80026ba:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80026be:	f107 0308 	add.w	r3, r7, #8
 80026c2:	3b08      	subs	r3, #8
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	67d3      	str	r3, [r2, #124]	; 0x7c
 80026c8:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80026cc:	f107 0308 	add.w	r3, r7, #8
 80026d0:	3b08      	subs	r3, #8
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80026d8:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80026dc:	f107 0308 	add.w	r3, r7, #8
 80026e0:	3b08      	subs	r3, #8
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80026e8:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80026ec:	f107 0308 	add.w	r3, r7, #8
 80026f0:	3b08      	subs	r3, #8
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80026f8:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 80026fc:	f107 0308 	add.w	r3, r7, #8
 8002700:	3b08      	subs	r3, #8
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002708:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800270c:	f107 0308 	add.w	r3, r7, #8
 8002710:	3b08      	subs	r3, #8
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002718:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800271c:	f107 0308 	add.w	r3, r7, #8
 8002720:	3b08      	subs	r3, #8
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002728:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800272c:	f107 0308 	add.w	r3, r7, #8
 8002730:	3b08      	subs	r3, #8
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8002738:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800273c:	f107 0308 	add.w	r3, r7, #8
 8002740:	3b08      	subs	r3, #8
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, textcolor,  //@..@
		backcolor, textcolor, textcolor, backcolor,  //.@@.
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_K[10][4] = {
 8002748:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 800274c:	f107 0308 	add.w	r3, r7, #8
 8002750:	3b08      	subs	r3, #8
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 800275a:	f107 0308 	add.w	r3, r7, #8
 800275e:	3b08      	subs	r3, #8
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6053      	str	r3, [r2, #4]
 8002764:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002768:	f107 0308 	add.w	r3, r7, #8
 800276c:	3b08      	subs	r3, #8
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6093      	str	r3, [r2, #8]
 8002772:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002776:	f107 0308 	add.w	r3, r7, #8
 800277a:	3b08      	subs	r3, #8
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	60d3      	str	r3, [r2, #12]
 8002780:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002784:	f107 0308 	add.w	r3, r7, #8
 8002788:	3b08      	subs	r3, #8
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6113      	str	r3, [r2, #16]
 800278e:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002792:	f107 0308 	add.w	r3, r7, #8
 8002796:	3b08      	subs	r3, #8
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6153      	str	r3, [r2, #20]
 800279c:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80027a0:	f107 0308 	add.w	r3, r7, #8
 80027a4:	3b08      	subs	r3, #8
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6193      	str	r3, [r2, #24]
 80027aa:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80027ae:	f107 0308 	add.w	r3, r7, #8
 80027b2:	3b08      	subs	r3, #8
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	61d3      	str	r3, [r2, #28]
 80027b8:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80027bc:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80027c0:	f102 0218 	add.w	r2, r2, #24
 80027c4:	6812      	ldr	r2, [r2, #0]
 80027c6:	621a      	str	r2, [r3, #32]
 80027c8:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80027cc:	f107 0308 	add.w	r3, r7, #8
 80027d0:	3b08      	subs	r3, #8
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6253      	str	r3, [r2, #36]	; 0x24
 80027d6:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80027da:	f107 0308 	add.w	r3, r7, #8
 80027de:	3b08      	subs	r3, #8
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6293      	str	r3, [r2, #40]	; 0x28
 80027e4:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80027e8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80027ec:	f102 0218 	add.w	r2, r2, #24
 80027f0:	6812      	ldr	r2, [r2, #0]
 80027f2:	62da      	str	r2, [r3, #44]	; 0x2c
 80027f4:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80027f8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80027fc:	f102 0218 	add.w	r2, r2, #24
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	631a      	str	r2, [r3, #48]	; 0x30
 8002804:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002808:	f107 0308 	add.w	r3, r7, #8
 800280c:	3b08      	subs	r3, #8
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6353      	str	r3, [r2, #52]	; 0x34
 8002812:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002816:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800281a:	f102 0218 	add.w	r2, r2, #24
 800281e:	6812      	ldr	r2, [r2, #0]
 8002820:	639a      	str	r2, [r3, #56]	; 0x38
 8002822:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002826:	f107 0308 	add.w	r3, r7, #8
 800282a:	3b08      	subs	r3, #8
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002830:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002834:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002838:	f102 0218 	add.w	r2, r2, #24
 800283c:	6812      	ldr	r2, [r2, #0]
 800283e:	641a      	str	r2, [r3, #64]	; 0x40
 8002840:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002844:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002848:	f102 0218 	add.w	r2, r2, #24
 800284c:	6812      	ldr	r2, [r2, #0]
 800284e:	645a      	str	r2, [r3, #68]	; 0x44
 8002850:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002854:	f107 0308 	add.w	r3, r7, #8
 8002858:	3b08      	subs	r3, #8
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6493      	str	r3, [r2, #72]	; 0x48
 800285e:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002862:	f107 0308 	add.w	r3, r7, #8
 8002866:	3b08      	subs	r3, #8
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800286c:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002870:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002874:	f102 0218 	add.w	r2, r2, #24
 8002878:	6812      	ldr	r2, [r2, #0]
 800287a:	651a      	str	r2, [r3, #80]	; 0x50
 800287c:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002880:	f107 0308 	add.w	r3, r7, #8
 8002884:	3b08      	subs	r3, #8
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6553      	str	r3, [r2, #84]	; 0x54
 800288a:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800288e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002892:	f102 0218 	add.w	r2, r2, #24
 8002896:	6812      	ldr	r2, [r2, #0]
 8002898:	659a      	str	r2, [r3, #88]	; 0x58
 800289a:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 800289e:	f107 0308 	add.w	r3, r7, #8
 80028a2:	3b08      	subs	r3, #8
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80028a8:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80028ac:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80028b0:	f102 0218 	add.w	r2, r2, #24
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	661a      	str	r2, [r3, #96]	; 0x60
 80028b8:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80028bc:	f107 0308 	add.w	r3, r7, #8
 80028c0:	3b08      	subs	r3, #8
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6653      	str	r3, [r2, #100]	; 0x64
 80028c6:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80028ca:	f107 0308 	add.w	r3, r7, #8
 80028ce:	3b08      	subs	r3, #8
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6693      	str	r3, [r2, #104]	; 0x68
 80028d4:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80028d8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80028dc:	f102 0218 	add.w	r2, r2, #24
 80028e0:	6812      	ldr	r2, [r2, #0]
 80028e2:	66da      	str	r2, [r3, #108]	; 0x6c
 80028e4:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80028e8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80028ec:	f102 0218 	add.w	r2, r2, #24
 80028f0:	6812      	ldr	r2, [r2, #0]
 80028f2:	671a      	str	r2, [r3, #112]	; 0x70
 80028f4:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80028f8:	f107 0308 	add.w	r3, r7, #8
 80028fc:	3b08      	subs	r3, #8
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6753      	str	r3, [r2, #116]	; 0x74
 8002902:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002906:	f107 0308 	add.w	r3, r7, #8
 800290a:	3b08      	subs	r3, #8
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6793      	str	r3, [r2, #120]	; 0x78
 8002910:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8002914:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002918:	f102 0218 	add.w	r2, r2, #24
 800291c:	6812      	ldr	r2, [r2, #0]
 800291e:	67da      	str	r2, [r3, #124]	; 0x7c
 8002920:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002924:	f107 0308 	add.w	r3, r7, #8
 8002928:	3b08      	subs	r3, #8
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002930:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002934:	f107 0308 	add.w	r3, r7, #8
 8002938:	3b08      	subs	r3, #8
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8002940:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002944:	f107 0308 	add.w	r3, r7, #8
 8002948:	3b08      	subs	r3, #8
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002950:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002954:	f107 0308 	add.w	r3, r7, #8
 8002958:	3b08      	subs	r3, #8
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002960:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002964:	f107 0308 	add.w	r3, r7, #8
 8002968:	3b08      	subs	r3, #8
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002970:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002974:	f107 0308 	add.w	r3, r7, #8
 8002978:	3b08      	subs	r3, #8
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002980:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002984:	f107 0308 	add.w	r3, r7, #8
 8002988:	3b08      	subs	r3, #8
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8002990:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8002994:	f107 0308 	add.w	r3, r7, #8
 8002998:	3b08      	subs	r3, #8
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, textcolor,  //@..@
		textcolor, backcolor, backcolor, textcolor,  //@..@
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_L[10][4] = {
 80029a0:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 80029a4:	f107 0308 	add.w	r3, r7, #8
 80029a8:	3b08      	subs	r3, #8
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 80029b2:	f107 0308 	add.w	r3, r7, #8
 80029b6:	3b08      	subs	r3, #8
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	6053      	str	r3, [r2, #4]
 80029bc:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 80029c0:	f107 0308 	add.w	r3, r7, #8
 80029c4:	3b08      	subs	r3, #8
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6093      	str	r3, [r2, #8]
 80029ca:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 80029ce:	f107 0308 	add.w	r3, r7, #8
 80029d2:	3b08      	subs	r3, #8
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	60d3      	str	r3, [r2, #12]
 80029d8:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 80029dc:	f107 0308 	add.w	r3, r7, #8
 80029e0:	3b08      	subs	r3, #8
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6113      	str	r3, [r2, #16]
 80029e6:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 80029ea:	f107 0308 	add.w	r3, r7, #8
 80029ee:	3b08      	subs	r3, #8
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6153      	str	r3, [r2, #20]
 80029f4:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 80029f8:	f107 0308 	add.w	r3, r7, #8
 80029fc:	3b08      	subs	r3, #8
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6193      	str	r3, [r2, #24]
 8002a02:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002a06:	f107 0308 	add.w	r3, r7, #8
 8002a0a:	3b08      	subs	r3, #8
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	61d3      	str	r3, [r2, #28]
 8002a10:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8002a14:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002a18:	f102 0218 	add.w	r2, r2, #24
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	621a      	str	r2, [r3, #32]
 8002a20:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002a24:	f107 0308 	add.w	r3, r7, #8
 8002a28:	3b08      	subs	r3, #8
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6253      	str	r3, [r2, #36]	; 0x24
 8002a2e:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002a32:	f107 0308 	add.w	r3, r7, #8
 8002a36:	3b08      	subs	r3, #8
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6293      	str	r3, [r2, #40]	; 0x28
 8002a3c:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002a40:	f107 0308 	add.w	r3, r7, #8
 8002a44:	3b08      	subs	r3, #8
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002a4a:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8002a4e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002a52:	f102 0218 	add.w	r2, r2, #24
 8002a56:	6812      	ldr	r2, [r2, #0]
 8002a58:	631a      	str	r2, [r3, #48]	; 0x30
 8002a5a:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002a5e:	f107 0308 	add.w	r3, r7, #8
 8002a62:	3b08      	subs	r3, #8
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6353      	str	r3, [r2, #52]	; 0x34
 8002a68:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002a6c:	f107 0308 	add.w	r3, r7, #8
 8002a70:	3b08      	subs	r3, #8
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6393      	str	r3, [r2, #56]	; 0x38
 8002a76:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002a7a:	f107 0308 	add.w	r3, r7, #8
 8002a7e:	3b08      	subs	r3, #8
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002a84:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8002a88:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002a8c:	f102 0218 	add.w	r2, r2, #24
 8002a90:	6812      	ldr	r2, [r2, #0]
 8002a92:	641a      	str	r2, [r3, #64]	; 0x40
 8002a94:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002a98:	f107 0308 	add.w	r3, r7, #8
 8002a9c:	3b08      	subs	r3, #8
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8002aa2:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002aa6:	f107 0308 	add.w	r3, r7, #8
 8002aaa:	3b08      	subs	r3, #8
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6493      	str	r3, [r2, #72]	; 0x48
 8002ab0:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002ab4:	f107 0308 	add.w	r3, r7, #8
 8002ab8:	3b08      	subs	r3, #8
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002abe:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8002ac2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002ac6:	f102 0218 	add.w	r2, r2, #24
 8002aca:	6812      	ldr	r2, [r2, #0]
 8002acc:	651a      	str	r2, [r3, #80]	; 0x50
 8002ace:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002ad2:	f107 0308 	add.w	r3, r7, #8
 8002ad6:	3b08      	subs	r3, #8
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6553      	str	r3, [r2, #84]	; 0x54
 8002adc:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002ae0:	f107 0308 	add.w	r3, r7, #8
 8002ae4:	3b08      	subs	r3, #8
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6593      	str	r3, [r2, #88]	; 0x58
 8002aea:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002aee:	f107 0308 	add.w	r3, r7, #8
 8002af2:	3b08      	subs	r3, #8
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002af8:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8002afc:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002b00:	f102 0218 	add.w	r2, r2, #24
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	661a      	str	r2, [r3, #96]	; 0x60
 8002b08:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002b0c:	f107 0308 	add.w	r3, r7, #8
 8002b10:	3b08      	subs	r3, #8
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6653      	str	r3, [r2, #100]	; 0x64
 8002b16:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002b1a:	f107 0308 	add.w	r3, r7, #8
 8002b1e:	3b08      	subs	r3, #8
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6693      	str	r3, [r2, #104]	; 0x68
 8002b24:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002b28:	f107 0308 	add.w	r3, r7, #8
 8002b2c:	3b08      	subs	r3, #8
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	66d3      	str	r3, [r2, #108]	; 0x6c
 8002b32:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8002b36:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002b3a:	f102 0218 	add.w	r2, r2, #24
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	671a      	str	r2, [r3, #112]	; 0x70
 8002b42:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8002b46:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002b4a:	f102 0218 	add.w	r2, r2, #24
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	675a      	str	r2, [r3, #116]	; 0x74
 8002b52:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8002b56:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002b5a:	f102 0218 	add.w	r2, r2, #24
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	679a      	str	r2, [r3, #120]	; 0x78
 8002b62:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8002b66:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002b6a:	f102 0218 	add.w	r2, r2, #24
 8002b6e:	6812      	ldr	r2, [r2, #0]
 8002b70:	67da      	str	r2, [r3, #124]	; 0x7c
 8002b72:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002b76:	f107 0308 	add.w	r3, r7, #8
 8002b7a:	3b08      	subs	r3, #8
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b82:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002b86:	f107 0308 	add.w	r3, r7, #8
 8002b8a:	3b08      	subs	r3, #8
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8002b92:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002b96:	f107 0308 	add.w	r3, r7, #8
 8002b9a:	3b08      	subs	r3, #8
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002ba2:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002ba6:	f107 0308 	add.w	r3, r7, #8
 8002baa:	3b08      	subs	r3, #8
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002bb2:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002bb6:	f107 0308 	add.w	r3, r7, #8
 8002bba:	3b08      	subs	r3, #8
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bc2:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002bc6:	f107 0308 	add.w	r3, r7, #8
 8002bca:	3b08      	subs	r3, #8
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002bd2:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002bd6:	f107 0308 	add.w	r3, r7, #8
 8002bda:	3b08      	subs	r3, #8
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8002be2:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8002be6:	f107 0308 	add.w	r3, r7, #8
 8002bea:	3b08      	subs	r3, #8
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, backcolor,  //@...
		textcolor, textcolor, textcolor, textcolor,  //@@@@
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_M[10][4] = {
 8002bf2:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002bf6:	f107 0308 	add.w	r3, r7, #8
 8002bfa:	3b08      	subs	r3, #8
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002c04:	f107 0308 	add.w	r3, r7, #8
 8002c08:	3b08      	subs	r3, #8
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6053      	str	r3, [r2, #4]
 8002c0e:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002c12:	f107 0308 	add.w	r3, r7, #8
 8002c16:	3b08      	subs	r3, #8
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6093      	str	r3, [r2, #8]
 8002c1c:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002c20:	f107 0308 	add.w	r3, r7, #8
 8002c24:	3b08      	subs	r3, #8
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	60d3      	str	r3, [r2, #12]
 8002c2a:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002c2e:	f107 0308 	add.w	r3, r7, #8
 8002c32:	3b08      	subs	r3, #8
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6113      	str	r3, [r2, #16]
 8002c38:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002c3c:	f107 0308 	add.w	r3, r7, #8
 8002c40:	3b08      	subs	r3, #8
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	6153      	str	r3, [r2, #20]
 8002c46:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002c4a:	f107 0308 	add.w	r3, r7, #8
 8002c4e:	3b08      	subs	r3, #8
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6193      	str	r3, [r2, #24]
 8002c54:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002c58:	f107 0308 	add.w	r3, r7, #8
 8002c5c:	3b08      	subs	r3, #8
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	61d3      	str	r3, [r2, #28]
 8002c62:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002c66:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002c6a:	f102 0218 	add.w	r2, r2, #24
 8002c6e:	6812      	ldr	r2, [r2, #0]
 8002c70:	621a      	str	r2, [r3, #32]
 8002c72:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002c76:	f107 0308 	add.w	r3, r7, #8
 8002c7a:	3b08      	subs	r3, #8
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6253      	str	r3, [r2, #36]	; 0x24
 8002c80:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002c84:	f107 0308 	add.w	r3, r7, #8
 8002c88:	3b08      	subs	r3, #8
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6293      	str	r3, [r2, #40]	; 0x28
 8002c8e:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002c92:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002c96:	f102 0218 	add.w	r2, r2, #24
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c9e:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002ca2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002ca6:	f102 0218 	add.w	r2, r2, #24
 8002caa:	6812      	ldr	r2, [r2, #0]
 8002cac:	631a      	str	r2, [r3, #48]	; 0x30
 8002cae:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002cb2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002cb6:	f102 0218 	add.w	r2, r2, #24
 8002cba:	6812      	ldr	r2, [r2, #0]
 8002cbc:	635a      	str	r2, [r3, #52]	; 0x34
 8002cbe:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002cc2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002cc6:	f102 0218 	add.w	r2, r2, #24
 8002cca:	6812      	ldr	r2, [r2, #0]
 8002ccc:	639a      	str	r2, [r3, #56]	; 0x38
 8002cce:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002cd2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002cd6:	f102 0218 	add.w	r2, r2, #24
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	63da      	str	r2, [r3, #60]	; 0x3c
 8002cde:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002ce2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002ce6:	f102 0218 	add.w	r2, r2, #24
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40
 8002cee:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002cf2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002cf6:	f102 0218 	add.w	r2, r2, #24
 8002cfa:	6812      	ldr	r2, [r2, #0]
 8002cfc:	645a      	str	r2, [r3, #68]	; 0x44
 8002cfe:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002d02:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002d06:	f102 0218 	add.w	r2, r2, #24
 8002d0a:	6812      	ldr	r2, [r2, #0]
 8002d0c:	649a      	str	r2, [r3, #72]	; 0x48
 8002d0e:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002d12:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002d16:	f102 0218 	add.w	r2, r2, #24
 8002d1a:	6812      	ldr	r2, [r2, #0]
 8002d1c:	64da      	str	r2, [r3, #76]	; 0x4c
 8002d1e:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002d22:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002d26:	f102 0218 	add.w	r2, r2, #24
 8002d2a:	6812      	ldr	r2, [r2, #0]
 8002d2c:	651a      	str	r2, [r3, #80]	; 0x50
 8002d2e:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002d32:	f107 0308 	add.w	r3, r7, #8
 8002d36:	3b08      	subs	r3, #8
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6553      	str	r3, [r2, #84]	; 0x54
 8002d3c:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002d40:	f107 0308 	add.w	r3, r7, #8
 8002d44:	3b08      	subs	r3, #8
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6593      	str	r3, [r2, #88]	; 0x58
 8002d4a:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002d4e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002d52:	f102 0218 	add.w	r2, r2, #24
 8002d56:	6812      	ldr	r2, [r2, #0]
 8002d58:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d5a:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002d5e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002d62:	f102 0218 	add.w	r2, r2, #24
 8002d66:	6812      	ldr	r2, [r2, #0]
 8002d68:	661a      	str	r2, [r3, #96]	; 0x60
 8002d6a:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002d6e:	f107 0308 	add.w	r3, r7, #8
 8002d72:	3b08      	subs	r3, #8
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6653      	str	r3, [r2, #100]	; 0x64
 8002d78:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002d7c:	f107 0308 	add.w	r3, r7, #8
 8002d80:	3b08      	subs	r3, #8
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6693      	str	r3, [r2, #104]	; 0x68
 8002d86:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002d8a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002d8e:	f102 0218 	add.w	r2, r2, #24
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	66da      	str	r2, [r3, #108]	; 0x6c
 8002d96:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002d9a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002d9e:	f102 0218 	add.w	r2, r2, #24
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	671a      	str	r2, [r3, #112]	; 0x70
 8002da6:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002daa:	f107 0308 	add.w	r3, r7, #8
 8002dae:	3b08      	subs	r3, #8
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6753      	str	r3, [r2, #116]	; 0x74
 8002db4:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002db8:	f107 0308 	add.w	r3, r7, #8
 8002dbc:	3b08      	subs	r3, #8
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6793      	str	r3, [r2, #120]	; 0x78
 8002dc2:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002dc6:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002dca:	f102 0218 	add.w	r2, r2, #24
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	67da      	str	r2, [r3, #124]	; 0x7c
 8002dd2:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002dd6:	f107 0308 	add.w	r3, r7, #8
 8002dda:	3b08      	subs	r3, #8
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002de2:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002de6:	f107 0308 	add.w	r3, r7, #8
 8002dea:	3b08      	subs	r3, #8
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8002df2:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002df6:	f107 0308 	add.w	r3, r7, #8
 8002dfa:	3b08      	subs	r3, #8
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002e02:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002e06:	f107 0308 	add.w	r3, r7, #8
 8002e0a:	3b08      	subs	r3, #8
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002e12:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002e16:	f107 0308 	add.w	r3, r7, #8
 8002e1a:	3b08      	subs	r3, #8
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e22:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002e26:	f107 0308 	add.w	r3, r7, #8
 8002e2a:	3b08      	subs	r3, #8
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002e32:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002e36:	f107 0308 	add.w	r3, r7, #8
 8002e3a:	3b08      	subs	r3, #8
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8002e42:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8002e46:	f107 0308 	add.w	r3, r7, #8
 8002e4a:	3b08      	subs	r3, #8
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, textcolor,  //@..@
		textcolor, backcolor, backcolor, textcolor,  //@..@
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_N[10][4] = {
 8002e52:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002e56:	f107 0308 	add.w	r3, r7, #8
 8002e5a:	3b08      	subs	r3, #8
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6013      	str	r3, [r2, #0]
 8002e60:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002e64:	f107 0308 	add.w	r3, r7, #8
 8002e68:	3b08      	subs	r3, #8
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6053      	str	r3, [r2, #4]
 8002e6e:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002e72:	f107 0308 	add.w	r3, r7, #8
 8002e76:	3b08      	subs	r3, #8
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6093      	str	r3, [r2, #8]
 8002e7c:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002e80:	f107 0308 	add.w	r3, r7, #8
 8002e84:	3b08      	subs	r3, #8
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	60d3      	str	r3, [r2, #12]
 8002e8a:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002e8e:	f107 0308 	add.w	r3, r7, #8
 8002e92:	3b08      	subs	r3, #8
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	6113      	str	r3, [r2, #16]
 8002e98:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002e9c:	f107 0308 	add.w	r3, r7, #8
 8002ea0:	3b08      	subs	r3, #8
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6153      	str	r3, [r2, #20]
 8002ea6:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002eaa:	f107 0308 	add.w	r3, r7, #8
 8002eae:	3b08      	subs	r3, #8
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6193      	str	r3, [r2, #24]
 8002eb4:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002eb8:	f107 0308 	add.w	r3, r7, #8
 8002ebc:	3b08      	subs	r3, #8
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	61d3      	str	r3, [r2, #28]
 8002ec2:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002ec6:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002eca:	f102 0218 	add.w	r2, r2, #24
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	621a      	str	r2, [r3, #32]
 8002ed2:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002ed6:	f107 0308 	add.w	r3, r7, #8
 8002eda:	3b08      	subs	r3, #8
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6253      	str	r3, [r2, #36]	; 0x24
 8002ee0:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002ee4:	f107 0308 	add.w	r3, r7, #8
 8002ee8:	3b08      	subs	r3, #8
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6293      	str	r3, [r2, #40]	; 0x28
 8002eee:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002ef2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002ef6:	f102 0218 	add.w	r2, r2, #24
 8002efa:	6812      	ldr	r2, [r2, #0]
 8002efc:	62da      	str	r2, [r3, #44]	; 0x2c
 8002efe:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002f02:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002f06:	f102 0218 	add.w	r2, r2, #24
 8002f0a:	6812      	ldr	r2, [r2, #0]
 8002f0c:	631a      	str	r2, [r3, #48]	; 0x30
 8002f0e:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002f12:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002f16:	f102 0218 	add.w	r2, r2, #24
 8002f1a:	6812      	ldr	r2, [r2, #0]
 8002f1c:	635a      	str	r2, [r3, #52]	; 0x34
 8002f1e:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002f22:	f107 0308 	add.w	r3, r7, #8
 8002f26:	3b08      	subs	r3, #8
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6393      	str	r3, [r2, #56]	; 0x38
 8002f2c:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002f30:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002f34:	f102 0218 	add.w	r2, r2, #24
 8002f38:	6812      	ldr	r2, [r2, #0]
 8002f3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f3c:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002f40:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002f44:	f102 0218 	add.w	r2, r2, #24
 8002f48:	6812      	ldr	r2, [r2, #0]
 8002f4a:	641a      	str	r2, [r3, #64]	; 0x40
 8002f4c:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002f50:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002f54:	f102 0218 	add.w	r2, r2, #24
 8002f58:	6812      	ldr	r2, [r2, #0]
 8002f5a:	645a      	str	r2, [r3, #68]	; 0x44
 8002f5c:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002f60:	f107 0308 	add.w	r3, r7, #8
 8002f64:	3b08      	subs	r3, #8
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6493      	str	r3, [r2, #72]	; 0x48
 8002f6a:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002f6e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002f72:	f102 0218 	add.w	r2, r2, #24
 8002f76:	6812      	ldr	r2, [r2, #0]
 8002f78:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f7a:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002f7e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002f82:	f102 0218 	add.w	r2, r2, #24
 8002f86:	6812      	ldr	r2, [r2, #0]
 8002f88:	651a      	str	r2, [r3, #80]	; 0x50
 8002f8a:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002f8e:	f107 0308 	add.w	r3, r7, #8
 8002f92:	3b08      	subs	r3, #8
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6553      	str	r3, [r2, #84]	; 0x54
 8002f98:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002f9c:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002fa0:	f102 0218 	add.w	r2, r2, #24
 8002fa4:	6812      	ldr	r2, [r2, #0]
 8002fa6:	659a      	str	r2, [r3, #88]	; 0x58
 8002fa8:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002fac:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002fb0:	f102 0218 	add.w	r2, r2, #24
 8002fb4:	6812      	ldr	r2, [r2, #0]
 8002fb6:	65da      	str	r2, [r3, #92]	; 0x5c
 8002fb8:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002fbc:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002fc0:	f102 0218 	add.w	r2, r2, #24
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	661a      	str	r2, [r3, #96]	; 0x60
 8002fc8:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8002fcc:	f107 0308 	add.w	r3, r7, #8
 8002fd0:	3b08      	subs	r3, #8
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6653      	str	r3, [r2, #100]	; 0x64
 8002fd6:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002fda:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002fde:	f102 0218 	add.w	r2, r2, #24
 8002fe2:	6812      	ldr	r2, [r2, #0]
 8002fe4:	669a      	str	r2, [r3, #104]	; 0x68
 8002fe6:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002fea:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002fee:	f102 0218 	add.w	r2, r2, #24
 8002ff2:	6812      	ldr	r2, [r2, #0]
 8002ff4:	66da      	str	r2, [r3, #108]	; 0x6c
 8002ff6:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8002ffa:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8002ffe:	f102 0218 	add.w	r2, r2, #24
 8003002:	6812      	ldr	r2, [r2, #0]
 8003004:	671a      	str	r2, [r3, #112]	; 0x70
 8003006:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 800300a:	f107 0308 	add.w	r3, r7, #8
 800300e:	3b08      	subs	r3, #8
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	6753      	str	r3, [r2, #116]	; 0x74
 8003014:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8003018:	f107 0308 	add.w	r3, r7, #8
 800301c:	3b08      	subs	r3, #8
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6793      	str	r3, [r2, #120]	; 0x78
 8003022:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8003026:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800302a:	f102 0218 	add.w	r2, r2, #24
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	67da      	str	r2, [r3, #124]	; 0x7c
 8003032:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8003036:	f107 0308 	add.w	r3, r7, #8
 800303a:	3b08      	subs	r3, #8
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003042:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8003046:	f107 0308 	add.w	r3, r7, #8
 800304a:	3b08      	subs	r3, #8
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8003052:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8003056:	f107 0308 	add.w	r3, r7, #8
 800305a:	3b08      	subs	r3, #8
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003062:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8003066:	f107 0308 	add.w	r3, r7, #8
 800306a:	3b08      	subs	r3, #8
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003072:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8003076:	f107 0308 	add.w	r3, r7, #8
 800307a:	3b08      	subs	r3, #8
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003082:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8003086:	f107 0308 	add.w	r3, r7, #8
 800308a:	3b08      	subs	r3, #8
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003092:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8003096:	f107 0308 	add.w	r3, r7, #8
 800309a:	3b08      	subs	r3, #8
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 80030a2:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 80030a6:	f107 0308 	add.w	r3, r7, #8
 80030aa:	3b08      	subs	r3, #8
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, textcolor, textcolor,  //@.@@
		textcolor, backcolor, backcolor, textcolor,  //@..@
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_O[10][4] = {
 80030b2:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80030b6:	f107 0308 	add.w	r3, r7, #8
 80030ba:	3b08      	subs	r3, #8
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6013      	str	r3, [r2, #0]
 80030c0:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80030c4:	f107 0308 	add.w	r3, r7, #8
 80030c8:	3b08      	subs	r3, #8
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6053      	str	r3, [r2, #4]
 80030ce:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80030d2:	f107 0308 	add.w	r3, r7, #8
 80030d6:	3b08      	subs	r3, #8
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	6093      	str	r3, [r2, #8]
 80030dc:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80030e0:	f107 0308 	add.w	r3, r7, #8
 80030e4:	3b08      	subs	r3, #8
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	60d3      	str	r3, [r2, #12]
 80030ea:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80030ee:	f107 0308 	add.w	r3, r7, #8
 80030f2:	3b08      	subs	r3, #8
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6113      	str	r3, [r2, #16]
 80030f8:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80030fc:	f107 0308 	add.w	r3, r7, #8
 8003100:	3b08      	subs	r3, #8
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6153      	str	r3, [r2, #20]
 8003106:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 800310a:	f107 0308 	add.w	r3, r7, #8
 800310e:	3b08      	subs	r3, #8
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6193      	str	r3, [r2, #24]
 8003114:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8003118:	f107 0308 	add.w	r3, r7, #8
 800311c:	3b08      	subs	r3, #8
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	61d3      	str	r3, [r2, #28]
 8003122:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8003126:	f107 0308 	add.w	r3, r7, #8
 800312a:	3b08      	subs	r3, #8
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6213      	str	r3, [r2, #32]
 8003130:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8003134:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003138:	f102 0218 	add.w	r2, r2, #24
 800313c:	6812      	ldr	r2, [r2, #0]
 800313e:	625a      	str	r2, [r3, #36]	; 0x24
 8003140:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8003144:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003148:	f102 0218 	add.w	r2, r2, #24
 800314c:	6812      	ldr	r2, [r2, #0]
 800314e:	629a      	str	r2, [r3, #40]	; 0x28
 8003150:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8003154:	f107 0308 	add.w	r3, r7, #8
 8003158:	3b08      	subs	r3, #8
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800315e:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8003162:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003166:	f102 0218 	add.w	r2, r2, #24
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	631a      	str	r2, [r3, #48]	; 0x30
 800316e:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8003172:	f107 0308 	add.w	r3, r7, #8
 8003176:	3b08      	subs	r3, #8
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6353      	str	r3, [r2, #52]	; 0x34
 800317c:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8003180:	f107 0308 	add.w	r3, r7, #8
 8003184:	3b08      	subs	r3, #8
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6393      	str	r3, [r2, #56]	; 0x38
 800318a:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800318e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003192:	f102 0218 	add.w	r2, r2, #24
 8003196:	6812      	ldr	r2, [r2, #0]
 8003198:	63da      	str	r2, [r3, #60]	; 0x3c
 800319a:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800319e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80031a2:	f102 0218 	add.w	r2, r2, #24
 80031a6:	6812      	ldr	r2, [r2, #0]
 80031a8:	641a      	str	r2, [r3, #64]	; 0x40
 80031aa:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80031ae:	f107 0308 	add.w	r3, r7, #8
 80031b2:	3b08      	subs	r3, #8
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	6453      	str	r3, [r2, #68]	; 0x44
 80031b8:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80031bc:	f107 0308 	add.w	r3, r7, #8
 80031c0:	3b08      	subs	r3, #8
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6493      	str	r3, [r2, #72]	; 0x48
 80031c6:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80031ca:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80031ce:	f102 0218 	add.w	r2, r2, #24
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	64da      	str	r2, [r3, #76]	; 0x4c
 80031d6:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80031da:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80031de:	f102 0218 	add.w	r2, r2, #24
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	651a      	str	r2, [r3, #80]	; 0x50
 80031e6:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80031ea:	f107 0308 	add.w	r3, r7, #8
 80031ee:	3b08      	subs	r3, #8
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6553      	str	r3, [r2, #84]	; 0x54
 80031f4:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80031f8:	f107 0308 	add.w	r3, r7, #8
 80031fc:	3b08      	subs	r3, #8
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6593      	str	r3, [r2, #88]	; 0x58
 8003202:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8003206:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800320a:	f102 0218 	add.w	r2, r2, #24
 800320e:	6812      	ldr	r2, [r2, #0]
 8003210:	65da      	str	r2, [r3, #92]	; 0x5c
 8003212:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8003216:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800321a:	f102 0218 	add.w	r2, r2, #24
 800321e:	6812      	ldr	r2, [r2, #0]
 8003220:	661a      	str	r2, [r3, #96]	; 0x60
 8003222:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8003226:	f107 0308 	add.w	r3, r7, #8
 800322a:	3b08      	subs	r3, #8
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	6653      	str	r3, [r2, #100]	; 0x64
 8003230:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8003234:	f107 0308 	add.w	r3, r7, #8
 8003238:	3b08      	subs	r3, #8
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6693      	str	r3, [r2, #104]	; 0x68
 800323e:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8003242:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003246:	f102 0218 	add.w	r2, r2, #24
 800324a:	6812      	ldr	r2, [r2, #0]
 800324c:	66da      	str	r2, [r3, #108]	; 0x6c
 800324e:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8003252:	f107 0308 	add.w	r3, r7, #8
 8003256:	3b08      	subs	r3, #8
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	6713      	str	r3, [r2, #112]	; 0x70
 800325c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8003260:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003264:	f102 0218 	add.w	r2, r2, #24
 8003268:	6812      	ldr	r2, [r2, #0]
 800326a:	675a      	str	r2, [r3, #116]	; 0x74
 800326c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8003270:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003274:	f102 0218 	add.w	r2, r2, #24
 8003278:	6812      	ldr	r2, [r2, #0]
 800327a:	679a      	str	r2, [r3, #120]	; 0x78
 800327c:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8003280:	f107 0308 	add.w	r3, r7, #8
 8003284:	3b08      	subs	r3, #8
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	67d3      	str	r3, [r2, #124]	; 0x7c
 800328a:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 800328e:	f107 0308 	add.w	r3, r7, #8
 8003292:	3b08      	subs	r3, #8
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800329a:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 800329e:	f107 0308 	add.w	r3, r7, #8
 80032a2:	3b08      	subs	r3, #8
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80032aa:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80032ae:	f107 0308 	add.w	r3, r7, #8
 80032b2:	3b08      	subs	r3, #8
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80032ba:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80032be:	f107 0308 	add.w	r3, r7, #8
 80032c2:	3b08      	subs	r3, #8
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80032ca:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80032ce:	f107 0308 	add.w	r3, r7, #8
 80032d2:	3b08      	subs	r3, #8
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032da:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80032de:	f107 0308 	add.w	r3, r7, #8
 80032e2:	3b08      	subs	r3, #8
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80032ea:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80032ee:	f107 0308 	add.w	r3, r7, #8
 80032f2:	3b08      	subs	r3, #8
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 80032fa:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80032fe:	f107 0308 	add.w	r3, r7, #8
 8003302:	3b08      	subs	r3, #8
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, textcolor,  //@..@
		backcolor, textcolor, textcolor, backcolor,  //.@@.
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_P[10][4] = {
 800330a:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800330e:	f107 0308 	add.w	r3, r7, #8
 8003312:	3b08      	subs	r3, #8
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800331c:	f107 0308 	add.w	r3, r7, #8
 8003320:	3b08      	subs	r3, #8
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6053      	str	r3, [r2, #4]
 8003326:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800332a:	f107 0308 	add.w	r3, r7, #8
 800332e:	3b08      	subs	r3, #8
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6093      	str	r3, [r2, #8]
 8003334:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003338:	f107 0308 	add.w	r3, r7, #8
 800333c:	3b08      	subs	r3, #8
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	60d3      	str	r3, [r2, #12]
 8003342:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003346:	f107 0308 	add.w	r3, r7, #8
 800334a:	3b08      	subs	r3, #8
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	6113      	str	r3, [r2, #16]
 8003350:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003354:	f107 0308 	add.w	r3, r7, #8
 8003358:	3b08      	subs	r3, #8
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	6153      	str	r3, [r2, #20]
 800335e:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003362:	f107 0308 	add.w	r3, r7, #8
 8003366:	3b08      	subs	r3, #8
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6193      	str	r3, [r2, #24]
 800336c:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003370:	f107 0308 	add.w	r3, r7, #8
 8003374:	3b08      	subs	r3, #8
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	61d3      	str	r3, [r2, #28]
 800337a:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800337e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003382:	f102 0218 	add.w	r2, r2, #24
 8003386:	6812      	ldr	r2, [r2, #0]
 8003388:	621a      	str	r2, [r3, #32]
 800338a:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800338e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003392:	f102 0218 	add.w	r2, r2, #24
 8003396:	6812      	ldr	r2, [r2, #0]
 8003398:	625a      	str	r2, [r3, #36]	; 0x24
 800339a:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800339e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80033a2:	f102 0218 	add.w	r2, r2, #24
 80033a6:	6812      	ldr	r2, [r2, #0]
 80033a8:	629a      	str	r2, [r3, #40]	; 0x28
 80033aa:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 80033ae:	f107 0308 	add.w	r3, r7, #8
 80033b2:	3b08      	subs	r3, #8
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80033b8:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 80033bc:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80033c0:	f102 0218 	add.w	r2, r2, #24
 80033c4:	6812      	ldr	r2, [r2, #0]
 80033c6:	631a      	str	r2, [r3, #48]	; 0x30
 80033c8:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 80033cc:	f107 0308 	add.w	r3, r7, #8
 80033d0:	3b08      	subs	r3, #8
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6353      	str	r3, [r2, #52]	; 0x34
 80033d6:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 80033da:	f107 0308 	add.w	r3, r7, #8
 80033de:	3b08      	subs	r3, #8
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6393      	str	r3, [r2, #56]	; 0x38
 80033e4:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 80033e8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80033ec:	f102 0218 	add.w	r2, r2, #24
 80033f0:	6812      	ldr	r2, [r2, #0]
 80033f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80033f4:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 80033f8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80033fc:	f102 0218 	add.w	r2, r2, #24
 8003400:	6812      	ldr	r2, [r2, #0]
 8003402:	641a      	str	r2, [r3, #64]	; 0x40
 8003404:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003408:	f107 0308 	add.w	r3, r7, #8
 800340c:	3b08      	subs	r3, #8
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	6453      	str	r3, [r2, #68]	; 0x44
 8003412:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003416:	f107 0308 	add.w	r3, r7, #8
 800341a:	3b08      	subs	r3, #8
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6493      	str	r3, [r2, #72]	; 0x48
 8003420:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8003424:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003428:	f102 0218 	add.w	r2, r2, #24
 800342c:	6812      	ldr	r2, [r2, #0]
 800342e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003430:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8003434:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003438:	f102 0218 	add.w	r2, r2, #24
 800343c:	6812      	ldr	r2, [r2, #0]
 800343e:	651a      	str	r2, [r3, #80]	; 0x50
 8003440:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8003444:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003448:	f102 0218 	add.w	r2, r2, #24
 800344c:	6812      	ldr	r2, [r2, #0]
 800344e:	655a      	str	r2, [r3, #84]	; 0x54
 8003450:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8003454:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003458:	f102 0218 	add.w	r2, r2, #24
 800345c:	6812      	ldr	r2, [r2, #0]
 800345e:	659a      	str	r2, [r3, #88]	; 0x58
 8003460:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003464:	f107 0308 	add.w	r3, r7, #8
 8003468:	3b08      	subs	r3, #8
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	65d3      	str	r3, [r2, #92]	; 0x5c
 800346e:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8003472:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003476:	f102 0218 	add.w	r2, r2, #24
 800347a:	6812      	ldr	r2, [r2, #0]
 800347c:	661a      	str	r2, [r3, #96]	; 0x60
 800347e:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003482:	f107 0308 	add.w	r3, r7, #8
 8003486:	3b08      	subs	r3, #8
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	6653      	str	r3, [r2, #100]	; 0x64
 800348c:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003490:	f107 0308 	add.w	r3, r7, #8
 8003494:	3b08      	subs	r3, #8
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6693      	str	r3, [r2, #104]	; 0x68
 800349a:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800349e:	f107 0308 	add.w	r3, r7, #8
 80034a2:	3b08      	subs	r3, #8
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	66d3      	str	r3, [r2, #108]	; 0x6c
 80034a8:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 80034ac:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80034b0:	f102 0218 	add.w	r2, r2, #24
 80034b4:	6812      	ldr	r2, [r2, #0]
 80034b6:	671a      	str	r2, [r3, #112]	; 0x70
 80034b8:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 80034bc:	f107 0308 	add.w	r3, r7, #8
 80034c0:	3b08      	subs	r3, #8
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6753      	str	r3, [r2, #116]	; 0x74
 80034c6:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 80034ca:	f107 0308 	add.w	r3, r7, #8
 80034ce:	3b08      	subs	r3, #8
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6793      	str	r3, [r2, #120]	; 0x78
 80034d4:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 80034d8:	f107 0308 	add.w	r3, r7, #8
 80034dc:	3b08      	subs	r3, #8
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	67d3      	str	r3, [r2, #124]	; 0x7c
 80034e2:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 80034e6:	f107 0308 	add.w	r3, r7, #8
 80034ea:	3b08      	subs	r3, #8
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80034f2:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 80034f6:	f107 0308 	add.w	r3, r7, #8
 80034fa:	3b08      	subs	r3, #8
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8003502:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003506:	f107 0308 	add.w	r3, r7, #8
 800350a:	3b08      	subs	r3, #8
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003512:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003516:	f107 0308 	add.w	r3, r7, #8
 800351a:	3b08      	subs	r3, #8
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003522:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003526:	f107 0308 	add.w	r3, r7, #8
 800352a:	3b08      	subs	r3, #8
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003532:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003536:	f107 0308 	add.w	r3, r7, #8
 800353a:	3b08      	subs	r3, #8
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003542:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003546:	f107 0308 	add.w	r3, r7, #8
 800354a:	3b08      	subs	r3, #8
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8003552:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003556:	f107 0308 	add.w	r3, r7, #8
 800355a:	3b08      	subs	r3, #8
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, backcolor,  //@...
		textcolor, backcolor, backcolor, backcolor,  //@...
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_Q[10][4] = {
 8003562:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003566:	f107 0308 	add.w	r3, r7, #8
 800356a:	3b08      	subs	r3, #8
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6013      	str	r3, [r2, #0]
 8003570:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003574:	f107 0308 	add.w	r3, r7, #8
 8003578:	3b08      	subs	r3, #8
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6053      	str	r3, [r2, #4]
 800357e:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003582:	f107 0308 	add.w	r3, r7, #8
 8003586:	3b08      	subs	r3, #8
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6093      	str	r3, [r2, #8]
 800358c:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003590:	f107 0308 	add.w	r3, r7, #8
 8003594:	3b08      	subs	r3, #8
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	60d3      	str	r3, [r2, #12]
 800359a:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 800359e:	f107 0308 	add.w	r3, r7, #8
 80035a2:	3b08      	subs	r3, #8
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6113      	str	r3, [r2, #16]
 80035a8:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80035ac:	f107 0308 	add.w	r3, r7, #8
 80035b0:	3b08      	subs	r3, #8
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6153      	str	r3, [r2, #20]
 80035b6:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80035ba:	f107 0308 	add.w	r3, r7, #8
 80035be:	3b08      	subs	r3, #8
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6193      	str	r3, [r2, #24]
 80035c4:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80035c8:	f107 0308 	add.w	r3, r7, #8
 80035cc:	3b08      	subs	r3, #8
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	61d3      	str	r3, [r2, #28]
 80035d2:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80035d6:	f107 0308 	add.w	r3, r7, #8
 80035da:	3b08      	subs	r3, #8
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6213      	str	r3, [r2, #32]
 80035e0:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80035e4:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80035e8:	f102 0218 	add.w	r2, r2, #24
 80035ec:	6812      	ldr	r2, [r2, #0]
 80035ee:	625a      	str	r2, [r3, #36]	; 0x24
 80035f0:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80035f4:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80035f8:	f102 0218 	add.w	r2, r2, #24
 80035fc:	6812      	ldr	r2, [r2, #0]
 80035fe:	629a      	str	r2, [r3, #40]	; 0x28
 8003600:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003604:	f107 0308 	add.w	r3, r7, #8
 8003608:	3b08      	subs	r3, #8
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800360e:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8003612:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003616:	f102 0218 	add.w	r2, r2, #24
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	631a      	str	r2, [r3, #48]	; 0x30
 800361e:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003622:	f107 0308 	add.w	r3, r7, #8
 8003626:	3b08      	subs	r3, #8
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6353      	str	r3, [r2, #52]	; 0x34
 800362c:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003630:	f107 0308 	add.w	r3, r7, #8
 8003634:	3b08      	subs	r3, #8
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6393      	str	r3, [r2, #56]	; 0x38
 800363a:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800363e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003642:	f102 0218 	add.w	r2, r2, #24
 8003646:	6812      	ldr	r2, [r2, #0]
 8003648:	63da      	str	r2, [r3, #60]	; 0x3c
 800364a:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800364e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003652:	f102 0218 	add.w	r2, r2, #24
 8003656:	6812      	ldr	r2, [r2, #0]
 8003658:	641a      	str	r2, [r3, #64]	; 0x40
 800365a:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 800365e:	f107 0308 	add.w	r3, r7, #8
 8003662:	3b08      	subs	r3, #8
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6453      	str	r3, [r2, #68]	; 0x44
 8003668:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 800366c:	f107 0308 	add.w	r3, r7, #8
 8003670:	3b08      	subs	r3, #8
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6493      	str	r3, [r2, #72]	; 0x48
 8003676:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800367a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800367e:	f102 0218 	add.w	r2, r2, #24
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	64da      	str	r2, [r3, #76]	; 0x4c
 8003686:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800368a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800368e:	f102 0218 	add.w	r2, r2, #24
 8003692:	6812      	ldr	r2, [r2, #0]
 8003694:	651a      	str	r2, [r3, #80]	; 0x50
 8003696:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 800369a:	f107 0308 	add.w	r3, r7, #8
 800369e:	3b08      	subs	r3, #8
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	6553      	str	r3, [r2, #84]	; 0x54
 80036a4:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80036a8:	f107 0308 	add.w	r3, r7, #8
 80036ac:	3b08      	subs	r3, #8
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	6593      	str	r3, [r2, #88]	; 0x58
 80036b2:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80036b6:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80036ba:	f102 0218 	add.w	r2, r2, #24
 80036be:	6812      	ldr	r2, [r2, #0]
 80036c0:	65da      	str	r2, [r3, #92]	; 0x5c
 80036c2:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80036c6:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80036ca:	f102 0218 	add.w	r2, r2, #24
 80036ce:	6812      	ldr	r2, [r2, #0]
 80036d0:	661a      	str	r2, [r3, #96]	; 0x60
 80036d2:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80036d6:	f107 0308 	add.w	r3, r7, #8
 80036da:	3b08      	subs	r3, #8
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6653      	str	r3, [r2, #100]	; 0x64
 80036e0:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80036e4:	f107 0308 	add.w	r3, r7, #8
 80036e8:	3b08      	subs	r3, #8
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6693      	str	r3, [r2, #104]	; 0x68
 80036ee:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80036f2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80036f6:	f102 0218 	add.w	r2, r2, #24
 80036fa:	6812      	ldr	r2, [r2, #0]
 80036fc:	66da      	str	r2, [r3, #108]	; 0x6c
 80036fe:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003702:	f107 0308 	add.w	r3, r7, #8
 8003706:	3b08      	subs	r3, #8
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6713      	str	r3, [r2, #112]	; 0x70
 800370c:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8003710:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003714:	f102 0218 	add.w	r2, r2, #24
 8003718:	6812      	ldr	r2, [r2, #0]
 800371a:	675a      	str	r2, [r3, #116]	; 0x74
 800371c:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8003720:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003724:	f102 0218 	add.w	r2, r2, #24
 8003728:	6812      	ldr	r2, [r2, #0]
 800372a:	679a      	str	r2, [r3, #120]	; 0x78
 800372c:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003730:	f107 0308 	add.w	r3, r7, #8
 8003734:	3b08      	subs	r3, #8
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	67d3      	str	r3, [r2, #124]	; 0x7c
 800373a:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 800373e:	f107 0308 	add.w	r3, r7, #8
 8003742:	3b08      	subs	r3, #8
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800374a:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 800374e:	f107 0308 	add.w	r3, r7, #8
 8003752:	3b08      	subs	r3, #8
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 800375a:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800375e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003762:	f102 0218 	add.w	r2, r2, #24
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800376c:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003770:	f107 0308 	add.w	r3, r7, #8
 8003774:	3b08      	subs	r3, #8
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800377c:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003780:	f107 0308 	add.w	r3, r7, #8
 8003784:	3b08      	subs	r3, #8
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800378c:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8003790:	f107 0308 	add.w	r3, r7, #8
 8003794:	3b08      	subs	r3, #8
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800379c:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80037a0:	f107 0308 	add.w	r3, r7, #8
 80037a4:	3b08      	subs	r3, #8
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 80037ac:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 80037b0:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80037b4:	f102 0218 	add.w	r2, r2, #24
 80037b8:	6812      	ldr	r2, [r2, #0]
 80037ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		textcolor, backcolor, backcolor, textcolor,  //@..@
		backcolor, textcolor, textcolor, backcolor,  //.@@.
		backcolor, backcolor, textcolor, backcolor,  //..@.
		backcolor, backcolor, backcolor, textcolor,  //...@
	};
	int letter_R[10][4] = {
 80037be:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80037c2:	f107 0308 	add.w	r3, r7, #8
 80037c6:	3b08      	subs	r3, #8
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6013      	str	r3, [r2, #0]
 80037cc:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80037d0:	f107 0308 	add.w	r3, r7, #8
 80037d4:	3b08      	subs	r3, #8
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6053      	str	r3, [r2, #4]
 80037da:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80037de:	f107 0308 	add.w	r3, r7, #8
 80037e2:	3b08      	subs	r3, #8
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	6093      	str	r3, [r2, #8]
 80037e8:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80037ec:	f107 0308 	add.w	r3, r7, #8
 80037f0:	3b08      	subs	r3, #8
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	60d3      	str	r3, [r2, #12]
 80037f6:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80037fa:	f107 0308 	add.w	r3, r7, #8
 80037fe:	3b08      	subs	r3, #8
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6113      	str	r3, [r2, #16]
 8003804:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8003808:	f107 0308 	add.w	r3, r7, #8
 800380c:	3b08      	subs	r3, #8
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6153      	str	r3, [r2, #20]
 8003812:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8003816:	f107 0308 	add.w	r3, r7, #8
 800381a:	3b08      	subs	r3, #8
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6193      	str	r3, [r2, #24]
 8003820:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8003824:	f107 0308 	add.w	r3, r7, #8
 8003828:	3b08      	subs	r3, #8
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	61d3      	str	r3, [r2, #28]
 800382e:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8003832:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003836:	f102 0218 	add.w	r2, r2, #24
 800383a:	6812      	ldr	r2, [r2, #0]
 800383c:	621a      	str	r2, [r3, #32]
 800383e:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8003842:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003846:	f102 0218 	add.w	r2, r2, #24
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	625a      	str	r2, [r3, #36]	; 0x24
 800384e:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8003852:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003856:	f102 0218 	add.w	r2, r2, #24
 800385a:	6812      	ldr	r2, [r2, #0]
 800385c:	629a      	str	r2, [r3, #40]	; 0x28
 800385e:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8003862:	f107 0308 	add.w	r3, r7, #8
 8003866:	3b08      	subs	r3, #8
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800386c:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8003870:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003874:	f102 0218 	add.w	r2, r2, #24
 8003878:	6812      	ldr	r2, [r2, #0]
 800387a:	631a      	str	r2, [r3, #48]	; 0x30
 800387c:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8003880:	f107 0308 	add.w	r3, r7, #8
 8003884:	3b08      	subs	r3, #8
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6353      	str	r3, [r2, #52]	; 0x34
 800388a:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800388e:	f107 0308 	add.w	r3, r7, #8
 8003892:	3b08      	subs	r3, #8
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6393      	str	r3, [r2, #56]	; 0x38
 8003898:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800389c:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80038a0:	f102 0218 	add.w	r2, r2, #24
 80038a4:	6812      	ldr	r2, [r2, #0]
 80038a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80038a8:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80038ac:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80038b0:	f102 0218 	add.w	r2, r2, #24
 80038b4:	6812      	ldr	r2, [r2, #0]
 80038b6:	641a      	str	r2, [r3, #64]	; 0x40
 80038b8:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80038bc:	f107 0308 	add.w	r3, r7, #8
 80038c0:	3b08      	subs	r3, #8
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6453      	str	r3, [r2, #68]	; 0x44
 80038c6:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80038ca:	f107 0308 	add.w	r3, r7, #8
 80038ce:	3b08      	subs	r3, #8
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	6493      	str	r3, [r2, #72]	; 0x48
 80038d4:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80038d8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80038dc:	f102 0218 	add.w	r2, r2, #24
 80038e0:	6812      	ldr	r2, [r2, #0]
 80038e2:	64da      	str	r2, [r3, #76]	; 0x4c
 80038e4:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80038e8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80038ec:	f102 0218 	add.w	r2, r2, #24
 80038f0:	6812      	ldr	r2, [r2, #0]
 80038f2:	651a      	str	r2, [r3, #80]	; 0x50
 80038f4:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80038f8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80038fc:	f102 0218 	add.w	r2, r2, #24
 8003900:	6812      	ldr	r2, [r2, #0]
 8003902:	655a      	str	r2, [r3, #84]	; 0x54
 8003904:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8003908:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800390c:	f102 0218 	add.w	r2, r2, #24
 8003910:	6812      	ldr	r2, [r2, #0]
 8003912:	659a      	str	r2, [r3, #88]	; 0x58
 8003914:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8003918:	f107 0308 	add.w	r3, r7, #8
 800391c:	3b08      	subs	r3, #8
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003922:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8003926:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800392a:	f102 0218 	add.w	r2, r2, #24
 800392e:	6812      	ldr	r2, [r2, #0]
 8003930:	661a      	str	r2, [r3, #96]	; 0x60
 8003932:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8003936:	f107 0308 	add.w	r3, r7, #8
 800393a:	3b08      	subs	r3, #8
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6653      	str	r3, [r2, #100]	; 0x64
 8003940:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8003944:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003948:	f102 0218 	add.w	r2, r2, #24
 800394c:	6812      	ldr	r2, [r2, #0]
 800394e:	669a      	str	r2, [r3, #104]	; 0x68
 8003950:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8003954:	f107 0308 	add.w	r3, r7, #8
 8003958:	3b08      	subs	r3, #8
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	66d3      	str	r3, [r2, #108]	; 0x6c
 800395e:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8003962:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003966:	f102 0218 	add.w	r2, r2, #24
 800396a:	6812      	ldr	r2, [r2, #0]
 800396c:	671a      	str	r2, [r3, #112]	; 0x70
 800396e:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8003972:	f107 0308 	add.w	r3, r7, #8
 8003976:	3b08      	subs	r3, #8
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6753      	str	r3, [r2, #116]	; 0x74
 800397c:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8003980:	f107 0308 	add.w	r3, r7, #8
 8003984:	3b08      	subs	r3, #8
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6793      	str	r3, [r2, #120]	; 0x78
 800398a:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800398e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003992:	f102 0218 	add.w	r2, r2, #24
 8003996:	6812      	ldr	r2, [r2, #0]
 8003998:	67da      	str	r2, [r3, #124]	; 0x7c
 800399a:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 800399e:	f107 0308 	add.w	r3, r7, #8
 80039a2:	3b08      	subs	r3, #8
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80039aa:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80039ae:	f107 0308 	add.w	r3, r7, #8
 80039b2:	3b08      	subs	r3, #8
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80039ba:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80039be:	f107 0308 	add.w	r3, r7, #8
 80039c2:	3b08      	subs	r3, #8
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80039ca:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80039ce:	f107 0308 	add.w	r3, r7, #8
 80039d2:	3b08      	subs	r3, #8
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80039da:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80039de:	f107 0308 	add.w	r3, r7, #8
 80039e2:	3b08      	subs	r3, #8
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039ea:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80039ee:	f107 0308 	add.w	r3, r7, #8
 80039f2:	3b08      	subs	r3, #8
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80039fa:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80039fe:	f107 0308 	add.w	r3, r7, #8
 8003a02:	3b08      	subs	r3, #8
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8003a0a:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8003a0e:	f107 0308 	add.w	r3, r7, #8
 8003a12:	3b08      	subs	r3, #8
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, textcolor, backcolor,  //@.@.
		textcolor, backcolor, backcolor, textcolor,  //@..@
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_S[10][4] = {
 8003a1a:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003a1e:	f107 0308 	add.w	r3, r7, #8
 8003a22:	3b08      	subs	r3, #8
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6013      	str	r3, [r2, #0]
 8003a28:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003a2c:	f107 0308 	add.w	r3, r7, #8
 8003a30:	3b08      	subs	r3, #8
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6053      	str	r3, [r2, #4]
 8003a36:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003a3a:	f107 0308 	add.w	r3, r7, #8
 8003a3e:	3b08      	subs	r3, #8
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6093      	str	r3, [r2, #8]
 8003a44:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003a48:	f107 0308 	add.w	r3, r7, #8
 8003a4c:	3b08      	subs	r3, #8
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	60d3      	str	r3, [r2, #12]
 8003a52:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003a56:	f107 0308 	add.w	r3, r7, #8
 8003a5a:	3b08      	subs	r3, #8
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6113      	str	r3, [r2, #16]
 8003a60:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003a64:	f107 0308 	add.w	r3, r7, #8
 8003a68:	3b08      	subs	r3, #8
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6153      	str	r3, [r2, #20]
 8003a6e:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003a72:	f107 0308 	add.w	r3, r7, #8
 8003a76:	3b08      	subs	r3, #8
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6193      	str	r3, [r2, #24]
 8003a7c:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003a80:	f107 0308 	add.w	r3, r7, #8
 8003a84:	3b08      	subs	r3, #8
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	61d3      	str	r3, [r2, #28]
 8003a8a:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003a8e:	f107 0308 	add.w	r3, r7, #8
 8003a92:	3b08      	subs	r3, #8
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6213      	str	r3, [r2, #32]
 8003a98:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003a9c:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003aa0:	f102 0218 	add.w	r2, r2, #24
 8003aa4:	6812      	ldr	r2, [r2, #0]
 8003aa6:	625a      	str	r2, [r3, #36]	; 0x24
 8003aa8:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003aac:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003ab0:	f102 0218 	add.w	r2, r2, #24
 8003ab4:	6812      	ldr	r2, [r2, #0]
 8003ab6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ab8:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003abc:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003ac0:	f102 0218 	add.w	r2, r2, #24
 8003ac4:	6812      	ldr	r2, [r2, #0]
 8003ac6:	62da      	str	r2, [r3, #44]	; 0x2c
 8003ac8:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003acc:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003ad0:	f102 0218 	add.w	r2, r2, #24
 8003ad4:	6812      	ldr	r2, [r2, #0]
 8003ad6:	631a      	str	r2, [r3, #48]	; 0x30
 8003ad8:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003adc:	f107 0308 	add.w	r3, r7, #8
 8003ae0:	3b08      	subs	r3, #8
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6353      	str	r3, [r2, #52]	; 0x34
 8003ae6:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003aea:	f107 0308 	add.w	r3, r7, #8
 8003aee:	3b08      	subs	r3, #8
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6393      	str	r3, [r2, #56]	; 0x38
 8003af4:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003af8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003afc:	f102 0218 	add.w	r2, r2, #24
 8003b00:	6812      	ldr	r2, [r2, #0]
 8003b02:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b04:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003b08:	f107 0308 	add.w	r3, r7, #8
 8003b0c:	3b08      	subs	r3, #8
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	6413      	str	r3, [r2, #64]	; 0x40
 8003b12:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003b16:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003b1a:	f102 0218 	add.w	r2, r2, #24
 8003b1e:	6812      	ldr	r2, [r2, #0]
 8003b20:	645a      	str	r2, [r3, #68]	; 0x44
 8003b22:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003b26:	f107 0308 	add.w	r3, r7, #8
 8003b2a:	3b08      	subs	r3, #8
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6493      	str	r3, [r2, #72]	; 0x48
 8003b30:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003b34:	f107 0308 	add.w	r3, r7, #8
 8003b38:	3b08      	subs	r3, #8
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b3e:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003b42:	f107 0308 	add.w	r3, r7, #8
 8003b46:	3b08      	subs	r3, #8
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6513      	str	r3, [r2, #80]	; 0x50
 8003b4c:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003b50:	f107 0308 	add.w	r3, r7, #8
 8003b54:	3b08      	subs	r3, #8
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6553      	str	r3, [r2, #84]	; 0x54
 8003b5a:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003b5e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003b62:	f102 0218 	add.w	r2, r2, #24
 8003b66:	6812      	ldr	r2, [r2, #0]
 8003b68:	659a      	str	r2, [r3, #88]	; 0x58
 8003b6a:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003b6e:	f107 0308 	add.w	r3, r7, #8
 8003b72:	3b08      	subs	r3, #8
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003b78:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003b7c:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003b80:	f102 0218 	add.w	r2, r2, #24
 8003b84:	6812      	ldr	r2, [r2, #0]
 8003b86:	661a      	str	r2, [r3, #96]	; 0x60
 8003b88:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003b8c:	f107 0308 	add.w	r3, r7, #8
 8003b90:	3b08      	subs	r3, #8
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	6653      	str	r3, [r2, #100]	; 0x64
 8003b96:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003b9a:	f107 0308 	add.w	r3, r7, #8
 8003b9e:	3b08      	subs	r3, #8
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6693      	str	r3, [r2, #104]	; 0x68
 8003ba4:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003ba8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003bac:	f102 0218 	add.w	r2, r2, #24
 8003bb0:	6812      	ldr	r2, [r2, #0]
 8003bb2:	66da      	str	r2, [r3, #108]	; 0x6c
 8003bb4:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003bb8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003bbc:	f102 0218 	add.w	r2, r2, #24
 8003bc0:	6812      	ldr	r2, [r2, #0]
 8003bc2:	671a      	str	r2, [r3, #112]	; 0x70
 8003bc4:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003bc8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003bcc:	f102 0218 	add.w	r2, r2, #24
 8003bd0:	6812      	ldr	r2, [r2, #0]
 8003bd2:	675a      	str	r2, [r3, #116]	; 0x74
 8003bd4:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003bd8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003bdc:	f102 0218 	add.w	r2, r2, #24
 8003be0:	6812      	ldr	r2, [r2, #0]
 8003be2:	679a      	str	r2, [r3, #120]	; 0x78
 8003be4:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003be8:	f107 0308 	add.w	r3, r7, #8
 8003bec:	3b08      	subs	r3, #8
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	67d3      	str	r3, [r2, #124]	; 0x7c
 8003bf2:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003bf6:	f107 0308 	add.w	r3, r7, #8
 8003bfa:	3b08      	subs	r3, #8
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c02:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003c06:	f107 0308 	add.w	r3, r7, #8
 8003c0a:	3b08      	subs	r3, #8
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8003c12:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003c16:	f107 0308 	add.w	r3, r7, #8
 8003c1a:	3b08      	subs	r3, #8
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003c22:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003c26:	f107 0308 	add.w	r3, r7, #8
 8003c2a:	3b08      	subs	r3, #8
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003c32:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003c36:	f107 0308 	add.w	r3, r7, #8
 8003c3a:	3b08      	subs	r3, #8
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c42:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003c46:	f107 0308 	add.w	r3, r7, #8
 8003c4a:	3b08      	subs	r3, #8
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003c52:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003c56:	f107 0308 	add.w	r3, r7, #8
 8003c5a:	3b08      	subs	r3, #8
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 8003c62:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8003c66:	f107 0308 	add.w	r3, r7, #8
 8003c6a:	3b08      	subs	r3, #8
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, textcolor,  //@..@
		textcolor, textcolor, textcolor, backcolor,  //@@@.
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_T[10][5] = {
 8003c72:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003c76:	f107 0308 	add.w	r3, r7, #8
 8003c7a:	3b08      	subs	r3, #8
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6013      	str	r3, [r2, #0]
 8003c80:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003c84:	f107 0308 	add.w	r3, r7, #8
 8003c88:	3b08      	subs	r3, #8
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6053      	str	r3, [r2, #4]
 8003c8e:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003c92:	f107 0308 	add.w	r3, r7, #8
 8003c96:	3b08      	subs	r3, #8
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	6093      	str	r3, [r2, #8]
 8003c9c:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003ca0:	f107 0308 	add.w	r3, r7, #8
 8003ca4:	3b08      	subs	r3, #8
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	60d3      	str	r3, [r2, #12]
 8003caa:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003cae:	f107 0308 	add.w	r3, r7, #8
 8003cb2:	3b08      	subs	r3, #8
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6113      	str	r3, [r2, #16]
 8003cb8:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003cbc:	f107 0308 	add.w	r3, r7, #8
 8003cc0:	3b08      	subs	r3, #8
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6153      	str	r3, [r2, #20]
 8003cc6:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003cca:	f107 0308 	add.w	r3, r7, #8
 8003cce:	3b08      	subs	r3, #8
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6193      	str	r3, [r2, #24]
 8003cd4:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003cd8:	f107 0308 	add.w	r3, r7, #8
 8003cdc:	3b08      	subs	r3, #8
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	61d3      	str	r3, [r2, #28]
 8003ce2:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003ce6:	f107 0308 	add.w	r3, r7, #8
 8003cea:	3b08      	subs	r3, #8
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6213      	str	r3, [r2, #32]
 8003cf0:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003cf4:	f107 0308 	add.w	r3, r7, #8
 8003cf8:	3b08      	subs	r3, #8
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6253      	str	r3, [r2, #36]	; 0x24
 8003cfe:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003d02:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003d06:	f102 0218 	add.w	r2, r2, #24
 8003d0a:	6812      	ldr	r2, [r2, #0]
 8003d0c:	629a      	str	r2, [r3, #40]	; 0x28
 8003d0e:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003d12:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003d16:	f102 0218 	add.w	r2, r2, #24
 8003d1a:	6812      	ldr	r2, [r2, #0]
 8003d1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d1e:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003d22:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003d26:	f102 0218 	add.w	r2, r2, #24
 8003d2a:	6812      	ldr	r2, [r2, #0]
 8003d2c:	631a      	str	r2, [r3, #48]	; 0x30
 8003d2e:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003d32:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003d36:	f102 0218 	add.w	r2, r2, #24
 8003d3a:	6812      	ldr	r2, [r2, #0]
 8003d3c:	635a      	str	r2, [r3, #52]	; 0x34
 8003d3e:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003d42:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003d46:	f102 0218 	add.w	r2, r2, #24
 8003d4a:	6812      	ldr	r2, [r2, #0]
 8003d4c:	639a      	str	r2, [r3, #56]	; 0x38
 8003d4e:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003d52:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003d56:	f102 0218 	add.w	r2, r2, #24
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d5e:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003d62:	f107 0308 	add.w	r3, r7, #8
 8003d66:	3b08      	subs	r3, #8
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8003d6c:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003d70:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003d74:	f102 0218 	add.w	r2, r2, #24
 8003d78:	6812      	ldr	r2, [r2, #0]
 8003d7a:	645a      	str	r2, [r3, #68]	; 0x44
 8003d7c:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003d80:	f107 0308 	add.w	r3, r7, #8
 8003d84:	3b08      	subs	r3, #8
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6493      	str	r3, [r2, #72]	; 0x48
 8003d8a:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003d8e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003d92:	f102 0218 	add.w	r2, r2, #24
 8003d96:	6812      	ldr	r2, [r2, #0]
 8003d98:	64da      	str	r2, [r3, #76]	; 0x4c
 8003d9a:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003d9e:	f107 0308 	add.w	r3, r7, #8
 8003da2:	3b08      	subs	r3, #8
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6513      	str	r3, [r2, #80]	; 0x50
 8003da8:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003dac:	f107 0308 	add.w	r3, r7, #8
 8003db0:	3b08      	subs	r3, #8
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6553      	str	r3, [r2, #84]	; 0x54
 8003db6:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003dba:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003dbe:	f102 0218 	add.w	r2, r2, #24
 8003dc2:	6812      	ldr	r2, [r2, #0]
 8003dc4:	659a      	str	r2, [r3, #88]	; 0x58
 8003dc6:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003dca:	f107 0308 	add.w	r3, r7, #8
 8003dce:	3b08      	subs	r3, #8
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8003dd4:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003dd8:	f107 0308 	add.w	r3, r7, #8
 8003ddc:	3b08      	subs	r3, #8
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	6613      	str	r3, [r2, #96]	; 0x60
 8003de2:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003de6:	f107 0308 	add.w	r3, r7, #8
 8003dea:	3b08      	subs	r3, #8
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6653      	str	r3, [r2, #100]	; 0x64
 8003df0:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003df4:	f107 0308 	add.w	r3, r7, #8
 8003df8:	3b08      	subs	r3, #8
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6693      	str	r3, [r2, #104]	; 0x68
 8003dfe:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003e02:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003e06:	f102 0218 	add.w	r2, r2, #24
 8003e0a:	6812      	ldr	r2, [r2, #0]
 8003e0c:	66da      	str	r2, [r3, #108]	; 0x6c
 8003e0e:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003e12:	f107 0308 	add.w	r3, r7, #8
 8003e16:	3b08      	subs	r3, #8
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e1c:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003e20:	f107 0308 	add.w	r3, r7, #8
 8003e24:	3b08      	subs	r3, #8
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6753      	str	r3, [r2, #116]	; 0x74
 8003e2a:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003e2e:	f107 0308 	add.w	r3, r7, #8
 8003e32:	3b08      	subs	r3, #8
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	6793      	str	r3, [r2, #120]	; 0x78
 8003e38:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003e3c:	f107 0308 	add.w	r3, r7, #8
 8003e40:	3b08      	subs	r3, #8
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	67d3      	str	r3, [r2, #124]	; 0x7c
 8003e46:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003e4a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003e4e:	f102 0218 	add.w	r2, r2, #24
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8003e58:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003e5c:	f107 0308 	add.w	r3, r7, #8
 8003e60:	3b08      	subs	r3, #8
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8003e68:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003e6c:	f107 0308 	add.w	r3, r7, #8
 8003e70:	3b08      	subs	r3, #8
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8003e78:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003e7c:	f107 0308 	add.w	r3, r7, #8
 8003e80:	3b08      	subs	r3, #8
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003e88:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003e8c:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003e90:	f102 0218 	add.w	r2, r2, #24
 8003e94:	6812      	ldr	r2, [r2, #0]
 8003e96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8003e9a:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003e9e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003ea2:	f102 0218 	add.w	r2, r2, #24
 8003ea6:	6812      	ldr	r2, [r2, #0]
 8003ea8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8003eac:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8003eb0:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003eb4:	f102 0218 	add.w	r2, r2, #24
 8003eb8:	6812      	ldr	r2, [r2, #0]
 8003eba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003ebe:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003ec2:	f107 0308 	add.w	r3, r7, #8
 8003ec6:	3b08      	subs	r3, #8
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003ece:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003ed2:	f107 0308 	add.w	r3, r7, #8
 8003ed6:	3b08      	subs	r3, #8
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8003ede:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003ee2:	f107 0308 	add.w	r3, r7, #8
 8003ee6:	3b08      	subs	r3, #8
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8003eee:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003ef2:	f107 0308 	add.w	r3, r7, #8
 8003ef6:	3b08      	subs	r3, #8
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8003efe:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003f02:	f107 0308 	add.w	r3, r7, #8
 8003f06:	3b08      	subs	r3, #8
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 8003f0e:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003f12:	f107 0308 	add.w	r3, r7, #8
 8003f16:	3b08      	subs	r3, #8
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
 8003f1e:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003f22:	f107 0308 	add.w	r3, r7, #8
 8003f26:	3b08      	subs	r3, #8
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
 8003f2e:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003f32:	f107 0308 	add.w	r3, r7, #8
 8003f36:	3b08      	subs	r3, #8
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
 8003f3e:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003f42:	f107 0308 	add.w	r3, r7, #8
 8003f46:	3b08      	subs	r3, #8
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
 8003f4e:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003f52:	f107 0308 	add.w	r3, r7, #8
 8003f56:	3b08      	subs	r3, #8
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003f5e:	f507 62a7 	add.w	r2, r7, #1336	; 0x538
 8003f62:	f107 0308 	add.w	r3, r7, #8
 8003f66:	3b08      	subs	r3, #8
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		backcolor, backcolor, textcolor, backcolor, backcolor,  //..@..
		backcolor, textcolor, textcolor, textcolor, backcolor,  //.@@@.
		backcolor, backcolor, backcolor, backcolor, backcolor,  //.....
		backcolor, backcolor, backcolor, backcolor, backcolor,  //.....
	};
	int letter_U[10][4] = {
 8003f6e:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003f72:	f107 0308 	add.w	r3, r7, #8
 8003f76:	3b08      	subs	r3, #8
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	6013      	str	r3, [r2, #0]
 8003f7c:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003f80:	f107 0308 	add.w	r3, r7, #8
 8003f84:	3b08      	subs	r3, #8
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6053      	str	r3, [r2, #4]
 8003f8a:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003f8e:	f107 0308 	add.w	r3, r7, #8
 8003f92:	3b08      	subs	r3, #8
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	6093      	str	r3, [r2, #8]
 8003f98:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003f9c:	f107 0308 	add.w	r3, r7, #8
 8003fa0:	3b08      	subs	r3, #8
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	60d3      	str	r3, [r2, #12]
 8003fa6:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003faa:	f107 0308 	add.w	r3, r7, #8
 8003fae:	3b08      	subs	r3, #8
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6113      	str	r3, [r2, #16]
 8003fb4:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003fb8:	f107 0308 	add.w	r3, r7, #8
 8003fbc:	3b08      	subs	r3, #8
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	6153      	str	r3, [r2, #20]
 8003fc2:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003fc6:	f107 0308 	add.w	r3, r7, #8
 8003fca:	3b08      	subs	r3, #8
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	6193      	str	r3, [r2, #24]
 8003fd0:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003fd4:	f107 0308 	add.w	r3, r7, #8
 8003fd8:	3b08      	subs	r3, #8
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	61d3      	str	r3, [r2, #28]
 8003fde:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8003fe2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8003fe6:	f102 0218 	add.w	r2, r2, #24
 8003fea:	6812      	ldr	r2, [r2, #0]
 8003fec:	621a      	str	r2, [r3, #32]
 8003fee:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8003ff2:	f107 0308 	add.w	r3, r7, #8
 8003ff6:	3b08      	subs	r3, #8
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	6253      	str	r3, [r2, #36]	; 0x24
 8003ffc:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8004000:	f107 0308 	add.w	r3, r7, #8
 8004004:	3b08      	subs	r3, #8
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6293      	str	r3, [r2, #40]	; 0x28
 800400a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800400e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004012:	f102 0218 	add.w	r2, r2, #24
 8004016:	6812      	ldr	r2, [r2, #0]
 8004018:	62da      	str	r2, [r3, #44]	; 0x2c
 800401a:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800401e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004022:	f102 0218 	add.w	r2, r2, #24
 8004026:	6812      	ldr	r2, [r2, #0]
 8004028:	631a      	str	r2, [r3, #48]	; 0x30
 800402a:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 800402e:	f107 0308 	add.w	r3, r7, #8
 8004032:	3b08      	subs	r3, #8
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	6353      	str	r3, [r2, #52]	; 0x34
 8004038:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 800403c:	f107 0308 	add.w	r3, r7, #8
 8004040:	3b08      	subs	r3, #8
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6393      	str	r3, [r2, #56]	; 0x38
 8004046:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800404a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800404e:	f102 0218 	add.w	r2, r2, #24
 8004052:	6812      	ldr	r2, [r2, #0]
 8004054:	63da      	str	r2, [r3, #60]	; 0x3c
 8004056:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800405a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800405e:	f102 0218 	add.w	r2, r2, #24
 8004062:	6812      	ldr	r2, [r2, #0]
 8004064:	641a      	str	r2, [r3, #64]	; 0x40
 8004066:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 800406a:	f107 0308 	add.w	r3, r7, #8
 800406e:	3b08      	subs	r3, #8
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	6453      	str	r3, [r2, #68]	; 0x44
 8004074:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 8004078:	f107 0308 	add.w	r3, r7, #8
 800407c:	3b08      	subs	r3, #8
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6493      	str	r3, [r2, #72]	; 0x48
 8004082:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8004086:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800408a:	f102 0218 	add.w	r2, r2, #24
 800408e:	6812      	ldr	r2, [r2, #0]
 8004090:	64da      	str	r2, [r3, #76]	; 0x4c
 8004092:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8004096:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800409a:	f102 0218 	add.w	r2, r2, #24
 800409e:	6812      	ldr	r2, [r2, #0]
 80040a0:	651a      	str	r2, [r3, #80]	; 0x50
 80040a2:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80040a6:	f107 0308 	add.w	r3, r7, #8
 80040aa:	3b08      	subs	r3, #8
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6553      	str	r3, [r2, #84]	; 0x54
 80040b0:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80040b4:	f107 0308 	add.w	r3, r7, #8
 80040b8:	3b08      	subs	r3, #8
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6593      	str	r3, [r2, #88]	; 0x58
 80040be:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80040c2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80040c6:	f102 0218 	add.w	r2, r2, #24
 80040ca:	6812      	ldr	r2, [r2, #0]
 80040cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80040ce:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80040d2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80040d6:	f102 0218 	add.w	r2, r2, #24
 80040da:	6812      	ldr	r2, [r2, #0]
 80040dc:	661a      	str	r2, [r3, #96]	; 0x60
 80040de:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80040e2:	f107 0308 	add.w	r3, r7, #8
 80040e6:	3b08      	subs	r3, #8
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	6653      	str	r3, [r2, #100]	; 0x64
 80040ec:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80040f0:	f107 0308 	add.w	r3, r7, #8
 80040f4:	3b08      	subs	r3, #8
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	6693      	str	r3, [r2, #104]	; 0x68
 80040fa:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80040fe:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004102:	f102 0218 	add.w	r2, r2, #24
 8004106:	6812      	ldr	r2, [r2, #0]
 8004108:	66da      	str	r2, [r3, #108]	; 0x6c
 800410a:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 800410e:	f107 0308 	add.w	r3, r7, #8
 8004112:	3b08      	subs	r3, #8
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6713      	str	r3, [r2, #112]	; 0x70
 8004118:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800411c:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004120:	f102 0218 	add.w	r2, r2, #24
 8004124:	6812      	ldr	r2, [r2, #0]
 8004126:	675a      	str	r2, [r3, #116]	; 0x74
 8004128:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 800412c:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004130:	f102 0218 	add.w	r2, r2, #24
 8004134:	6812      	ldr	r2, [r2, #0]
 8004136:	679a      	str	r2, [r3, #120]	; 0x78
 8004138:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 800413c:	f107 0308 	add.w	r3, r7, #8
 8004140:	3b08      	subs	r3, #8
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	67d3      	str	r3, [r2, #124]	; 0x7c
 8004146:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 800414a:	f107 0308 	add.w	r3, r7, #8
 800414e:	3b08      	subs	r3, #8
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004156:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 800415a:	f107 0308 	add.w	r3, r7, #8
 800415e:	3b08      	subs	r3, #8
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8004166:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 800416a:	f107 0308 	add.w	r3, r7, #8
 800416e:	3b08      	subs	r3, #8
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004176:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 800417a:	f107 0308 	add.w	r3, r7, #8
 800417e:	3b08      	subs	r3, #8
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004186:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 800418a:	f107 0308 	add.w	r3, r7, #8
 800418e:	3b08      	subs	r3, #8
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004196:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 800419a:	f107 0308 	add.w	r3, r7, #8
 800419e:	3b08      	subs	r3, #8
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80041a6:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80041aa:	f107 0308 	add.w	r3, r7, #8
 80041ae:	3b08      	subs	r3, #8
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 80041b6:	f507 6293 	add.w	r2, r7, #1176	; 0x498
 80041ba:	f107 0308 	add.w	r3, r7, #8
 80041be:	3b08      	subs	r3, #8
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, textcolor,  //@..@
		backcolor, textcolor, textcolor, backcolor,  //.@@.
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_V[10][4] = {
 80041c6:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80041ca:	f107 0308 	add.w	r3, r7, #8
 80041ce:	3b08      	subs	r3, #8
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6013      	str	r3, [r2, #0]
 80041d4:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80041d8:	f107 0308 	add.w	r3, r7, #8
 80041dc:	3b08      	subs	r3, #8
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6053      	str	r3, [r2, #4]
 80041e2:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80041e6:	f107 0308 	add.w	r3, r7, #8
 80041ea:	3b08      	subs	r3, #8
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6093      	str	r3, [r2, #8]
 80041f0:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80041f4:	f107 0308 	add.w	r3, r7, #8
 80041f8:	3b08      	subs	r3, #8
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	60d3      	str	r3, [r2, #12]
 80041fe:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8004202:	f107 0308 	add.w	r3, r7, #8
 8004206:	3b08      	subs	r3, #8
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6113      	str	r3, [r2, #16]
 800420c:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8004210:	f107 0308 	add.w	r3, r7, #8
 8004214:	3b08      	subs	r3, #8
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	6153      	str	r3, [r2, #20]
 800421a:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 800421e:	f107 0308 	add.w	r3, r7, #8
 8004222:	3b08      	subs	r3, #8
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	6193      	str	r3, [r2, #24]
 8004228:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 800422c:	f107 0308 	add.w	r3, r7, #8
 8004230:	3b08      	subs	r3, #8
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	61d3      	str	r3, [r2, #28]
 8004236:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800423a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800423e:	f102 0218 	add.w	r2, r2, #24
 8004242:	6812      	ldr	r2, [r2, #0]
 8004244:	621a      	str	r2, [r3, #32]
 8004246:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 800424a:	f107 0308 	add.w	r3, r7, #8
 800424e:	3b08      	subs	r3, #8
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6253      	str	r3, [r2, #36]	; 0x24
 8004254:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8004258:	f107 0308 	add.w	r3, r7, #8
 800425c:	3b08      	subs	r3, #8
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6293      	str	r3, [r2, #40]	; 0x28
 8004262:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004266:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800426a:	f102 0218 	add.w	r2, r2, #24
 800426e:	6812      	ldr	r2, [r2, #0]
 8004270:	62da      	str	r2, [r3, #44]	; 0x2c
 8004272:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004276:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800427a:	f102 0218 	add.w	r2, r2, #24
 800427e:	6812      	ldr	r2, [r2, #0]
 8004280:	631a      	str	r2, [r3, #48]	; 0x30
 8004282:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8004286:	f107 0308 	add.w	r3, r7, #8
 800428a:	3b08      	subs	r3, #8
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6353      	str	r3, [r2, #52]	; 0x34
 8004290:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8004294:	f107 0308 	add.w	r3, r7, #8
 8004298:	3b08      	subs	r3, #8
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6393      	str	r3, [r2, #56]	; 0x38
 800429e:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80042a2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80042a6:	f102 0218 	add.w	r2, r2, #24
 80042aa:	6812      	ldr	r2, [r2, #0]
 80042ac:	63da      	str	r2, [r3, #60]	; 0x3c
 80042ae:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80042b2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80042b6:	f102 0218 	add.w	r2, r2, #24
 80042ba:	6812      	ldr	r2, [r2, #0]
 80042bc:	641a      	str	r2, [r3, #64]	; 0x40
 80042be:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80042c2:	f107 0308 	add.w	r3, r7, #8
 80042c6:	3b08      	subs	r3, #8
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	6453      	str	r3, [r2, #68]	; 0x44
 80042cc:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80042d0:	f107 0308 	add.w	r3, r7, #8
 80042d4:	3b08      	subs	r3, #8
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6493      	str	r3, [r2, #72]	; 0x48
 80042da:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80042de:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80042e2:	f102 0218 	add.w	r2, r2, #24
 80042e6:	6812      	ldr	r2, [r2, #0]
 80042e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80042ea:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 80042ee:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80042f2:	f102 0218 	add.w	r2, r2, #24
 80042f6:	6812      	ldr	r2, [r2, #0]
 80042f8:	651a      	str	r2, [r3, #80]	; 0x50
 80042fa:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80042fe:	f107 0308 	add.w	r3, r7, #8
 8004302:	3b08      	subs	r3, #8
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	6553      	str	r3, [r2, #84]	; 0x54
 8004308:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 800430c:	f107 0308 	add.w	r3, r7, #8
 8004310:	3b08      	subs	r3, #8
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	6593      	str	r3, [r2, #88]	; 0x58
 8004316:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 800431a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800431e:	f102 0218 	add.w	r2, r2, #24
 8004322:	6812      	ldr	r2, [r2, #0]
 8004324:	65da      	str	r2, [r3, #92]	; 0x5c
 8004326:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 800432a:	f107 0308 	add.w	r3, r7, #8
 800432e:	3b08      	subs	r3, #8
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	6613      	str	r3, [r2, #96]	; 0x60
 8004334:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004338:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800433c:	f102 0218 	add.w	r2, r2, #24
 8004340:	6812      	ldr	r2, [r2, #0]
 8004342:	665a      	str	r2, [r3, #100]	; 0x64
 8004344:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004348:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800434c:	f102 0218 	add.w	r2, r2, #24
 8004350:	6812      	ldr	r2, [r2, #0]
 8004352:	669a      	str	r2, [r3, #104]	; 0x68
 8004354:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8004358:	f107 0308 	add.w	r3, r7, #8
 800435c:	3b08      	subs	r3, #8
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	66d3      	str	r3, [r2, #108]	; 0x6c
 8004362:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8004366:	f107 0308 	add.w	r3, r7, #8
 800436a:	3b08      	subs	r3, #8
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6713      	str	r3, [r2, #112]	; 0x70
 8004370:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004374:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004378:	f102 0218 	add.w	r2, r2, #24
 800437c:	6812      	ldr	r2, [r2, #0]
 800437e:	675a      	str	r2, [r3, #116]	; 0x74
 8004380:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8004384:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004388:	f102 0218 	add.w	r2, r2, #24
 800438c:	6812      	ldr	r2, [r2, #0]
 800438e:	679a      	str	r2, [r3, #120]	; 0x78
 8004390:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8004394:	f107 0308 	add.w	r3, r7, #8
 8004398:	3b08      	subs	r3, #8
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	67d3      	str	r3, [r2, #124]	; 0x7c
 800439e:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80043a2:	f107 0308 	add.w	r3, r7, #8
 80043a6:	3b08      	subs	r3, #8
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80043ae:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80043b2:	f107 0308 	add.w	r3, r7, #8
 80043b6:	3b08      	subs	r3, #8
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80043be:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80043c2:	f107 0308 	add.w	r3, r7, #8
 80043c6:	3b08      	subs	r3, #8
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80043ce:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80043d2:	f107 0308 	add.w	r3, r7, #8
 80043d6:	3b08      	subs	r3, #8
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80043de:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80043e2:	f107 0308 	add.w	r3, r7, #8
 80043e6:	3b08      	subs	r3, #8
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043ee:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 80043f2:	f107 0308 	add.w	r3, r7, #8
 80043f6:	3b08      	subs	r3, #8
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80043fe:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8004402:	f107 0308 	add.w	r3, r7, #8
 8004406:	3b08      	subs	r3, #8
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800440e:	f507 727e 	add.w	r2, r7, #1016	; 0x3f8
 8004412:	f107 0308 	add.w	r3, r7, #8
 8004416:	3b08      	subs	r3, #8
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		backcolor, textcolor, textcolor, backcolor,  //.@@.
		backcolor, textcolor, textcolor, backcolor,  //.@@.
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_W[10][4] = {
 800441e:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004422:	f107 0308 	add.w	r3, r7, #8
 8004426:	3b08      	subs	r3, #8
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6013      	str	r3, [r2, #0]
 800442c:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004430:	f107 0308 	add.w	r3, r7, #8
 8004434:	3b08      	subs	r3, #8
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	6053      	str	r3, [r2, #4]
 800443a:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800443e:	f107 0308 	add.w	r3, r7, #8
 8004442:	3b08      	subs	r3, #8
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6093      	str	r3, [r2, #8]
 8004448:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800444c:	f107 0308 	add.w	r3, r7, #8
 8004450:	3b08      	subs	r3, #8
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	60d3      	str	r3, [r2, #12]
 8004456:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800445a:	f107 0308 	add.w	r3, r7, #8
 800445e:	3b08      	subs	r3, #8
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6113      	str	r3, [r2, #16]
 8004464:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004468:	f107 0308 	add.w	r3, r7, #8
 800446c:	3b08      	subs	r3, #8
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6153      	str	r3, [r2, #20]
 8004472:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004476:	f107 0308 	add.w	r3, r7, #8
 800447a:	3b08      	subs	r3, #8
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	6193      	str	r3, [r2, #24]
 8004480:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004484:	f107 0308 	add.w	r3, r7, #8
 8004488:	3b08      	subs	r3, #8
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	61d3      	str	r3, [r2, #28]
 800448e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004492:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004496:	f102 0218 	add.w	r2, r2, #24
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	621a      	str	r2, [r3, #32]
 800449e:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80044a2:	f107 0308 	add.w	r3, r7, #8
 80044a6:	3b08      	subs	r3, #8
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6253      	str	r3, [r2, #36]	; 0x24
 80044ac:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80044b0:	f107 0308 	add.w	r3, r7, #8
 80044b4:	3b08      	subs	r3, #8
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6293      	str	r3, [r2, #40]	; 0x28
 80044ba:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80044be:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80044c2:	f102 0218 	add.w	r2, r2, #24
 80044c6:	6812      	ldr	r2, [r2, #0]
 80044c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80044ca:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80044ce:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80044d2:	f102 0218 	add.w	r2, r2, #24
 80044d6:	6812      	ldr	r2, [r2, #0]
 80044d8:	631a      	str	r2, [r3, #48]	; 0x30
 80044da:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80044de:	f107 0308 	add.w	r3, r7, #8
 80044e2:	3b08      	subs	r3, #8
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6353      	str	r3, [r2, #52]	; 0x34
 80044e8:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80044ec:	f107 0308 	add.w	r3, r7, #8
 80044f0:	3b08      	subs	r3, #8
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	6393      	str	r3, [r2, #56]	; 0x38
 80044f6:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80044fa:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80044fe:	f102 0218 	add.w	r2, r2, #24
 8004502:	6812      	ldr	r2, [r2, #0]
 8004504:	63da      	str	r2, [r3, #60]	; 0x3c
 8004506:	f507 7356 	add.w	r3, r7, #856	; 0x358
 800450a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800450e:	f102 0218 	add.w	r2, r2, #24
 8004512:	6812      	ldr	r2, [r2, #0]
 8004514:	641a      	str	r2, [r3, #64]	; 0x40
 8004516:	f507 7256 	add.w	r2, r7, #856	; 0x358
 800451a:	f107 0308 	add.w	r3, r7, #8
 800451e:	3b08      	subs	r3, #8
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6453      	str	r3, [r2, #68]	; 0x44
 8004524:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004528:	f107 0308 	add.w	r3, r7, #8
 800452c:	3b08      	subs	r3, #8
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	6493      	str	r3, [r2, #72]	; 0x48
 8004532:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004536:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800453a:	f102 0218 	add.w	r2, r2, #24
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	64da      	str	r2, [r3, #76]	; 0x4c
 8004542:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004546:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800454a:	f102 0218 	add.w	r2, r2, #24
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	651a      	str	r2, [r3, #80]	; 0x50
 8004552:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004556:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800455a:	f102 0218 	add.w	r2, r2, #24
 800455e:	6812      	ldr	r2, [r2, #0]
 8004560:	655a      	str	r2, [r3, #84]	; 0x54
 8004562:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004566:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800456a:	f102 0218 	add.w	r2, r2, #24
 800456e:	6812      	ldr	r2, [r2, #0]
 8004570:	659a      	str	r2, [r3, #88]	; 0x58
 8004572:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004576:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800457a:	f102 0218 	add.w	r2, r2, #24
 800457e:	6812      	ldr	r2, [r2, #0]
 8004580:	65da      	str	r2, [r3, #92]	; 0x5c
 8004582:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004586:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800458a:	f102 0218 	add.w	r2, r2, #24
 800458e:	6812      	ldr	r2, [r2, #0]
 8004590:	661a      	str	r2, [r3, #96]	; 0x60
 8004592:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8004596:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800459a:	f102 0218 	add.w	r2, r2, #24
 800459e:	6812      	ldr	r2, [r2, #0]
 80045a0:	665a      	str	r2, [r3, #100]	; 0x64
 80045a2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80045a6:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80045aa:	f102 0218 	add.w	r2, r2, #24
 80045ae:	6812      	ldr	r2, [r2, #0]
 80045b0:	669a      	str	r2, [r3, #104]	; 0x68
 80045b2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80045b6:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80045ba:	f102 0218 	add.w	r2, r2, #24
 80045be:	6812      	ldr	r2, [r2, #0]
 80045c0:	66da      	str	r2, [r3, #108]	; 0x6c
 80045c2:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80045c6:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80045ca:	f102 0218 	add.w	r2, r2, #24
 80045ce:	6812      	ldr	r2, [r2, #0]
 80045d0:	671a      	str	r2, [r3, #112]	; 0x70
 80045d2:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80045d6:	f107 0308 	add.w	r3, r7, #8
 80045da:	3b08      	subs	r3, #8
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	6753      	str	r3, [r2, #116]	; 0x74
 80045e0:	f507 7256 	add.w	r2, r7, #856	; 0x358
 80045e4:	f107 0308 	add.w	r3, r7, #8
 80045e8:	3b08      	subs	r3, #8
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6793      	str	r3, [r2, #120]	; 0x78
 80045ee:	f507 7356 	add.w	r3, r7, #856	; 0x358
 80045f2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80045f6:	f102 0218 	add.w	r2, r2, #24
 80045fa:	6812      	ldr	r2, [r2, #0]
 80045fc:	67da      	str	r2, [r3, #124]	; 0x7c
 80045fe:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004602:	f107 0308 	add.w	r3, r7, #8
 8004606:	3b08      	subs	r3, #8
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800460e:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004612:	f107 0308 	add.w	r3, r7, #8
 8004616:	3b08      	subs	r3, #8
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 800461e:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004622:	f107 0308 	add.w	r3, r7, #8
 8004626:	3b08      	subs	r3, #8
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 800462e:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004632:	f107 0308 	add.w	r3, r7, #8
 8004636:	3b08      	subs	r3, #8
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800463e:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004642:	f107 0308 	add.w	r3, r7, #8
 8004646:	3b08      	subs	r3, #8
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800464e:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004652:	f107 0308 	add.w	r3, r7, #8
 8004656:	3b08      	subs	r3, #8
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800465e:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004662:	f107 0308 	add.w	r3, r7, #8
 8004666:	3b08      	subs	r3, #8
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 800466e:	f507 7256 	add.w	r2, r7, #856	; 0x358
 8004672:	f107 0308 	add.w	r3, r7, #8
 8004676:	3b08      	subs	r3, #8
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, textcolor, textcolor, textcolor,  //@@@@
		textcolor, backcolor, backcolor, textcolor,  //@..@
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_X[10][4] = {
 800467e:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004682:	f107 0308 	add.w	r3, r7, #8
 8004686:	3b08      	subs	r3, #8
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	6013      	str	r3, [r2, #0]
 800468c:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004690:	f107 0308 	add.w	r3, r7, #8
 8004694:	3b08      	subs	r3, #8
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6053      	str	r3, [r2, #4]
 800469a:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 800469e:	f107 0308 	add.w	r3, r7, #8
 80046a2:	3b08      	subs	r3, #8
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6093      	str	r3, [r2, #8]
 80046a8:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80046ac:	f107 0308 	add.w	r3, r7, #8
 80046b0:	3b08      	subs	r3, #8
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	60d3      	str	r3, [r2, #12]
 80046b6:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80046ba:	f107 0308 	add.w	r3, r7, #8
 80046be:	3b08      	subs	r3, #8
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	6113      	str	r3, [r2, #16]
 80046c4:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80046c8:	f107 0308 	add.w	r3, r7, #8
 80046cc:	3b08      	subs	r3, #8
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6153      	str	r3, [r2, #20]
 80046d2:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80046d6:	f107 0308 	add.w	r3, r7, #8
 80046da:	3b08      	subs	r3, #8
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	6193      	str	r3, [r2, #24]
 80046e0:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80046e4:	f107 0308 	add.w	r3, r7, #8
 80046e8:	3b08      	subs	r3, #8
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	61d3      	str	r3, [r2, #28]
 80046ee:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80046f2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80046f6:	f102 0218 	add.w	r2, r2, #24
 80046fa:	6812      	ldr	r2, [r2, #0]
 80046fc:	621a      	str	r2, [r3, #32]
 80046fe:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004702:	f107 0308 	add.w	r3, r7, #8
 8004706:	3b08      	subs	r3, #8
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	6253      	str	r3, [r2, #36]	; 0x24
 800470c:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004710:	f107 0308 	add.w	r3, r7, #8
 8004714:	3b08      	subs	r3, #8
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6293      	str	r3, [r2, #40]	; 0x28
 800471a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800471e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004722:	f102 0218 	add.w	r2, r2, #24
 8004726:	6812      	ldr	r2, [r2, #0]
 8004728:	62da      	str	r2, [r3, #44]	; 0x2c
 800472a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800472e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004732:	f102 0218 	add.w	r2, r2, #24
 8004736:	6812      	ldr	r2, [r2, #0]
 8004738:	631a      	str	r2, [r3, #48]	; 0x30
 800473a:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 800473e:	f107 0308 	add.w	r3, r7, #8
 8004742:	3b08      	subs	r3, #8
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	6353      	str	r3, [r2, #52]	; 0x34
 8004748:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 800474c:	f107 0308 	add.w	r3, r7, #8
 8004750:	3b08      	subs	r3, #8
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6393      	str	r3, [r2, #56]	; 0x38
 8004756:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800475a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800475e:	f102 0218 	add.w	r2, r2, #24
 8004762:	6812      	ldr	r2, [r2, #0]
 8004764:	63da      	str	r2, [r3, #60]	; 0x3c
 8004766:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 800476a:	f107 0308 	add.w	r3, r7, #8
 800476e:	3b08      	subs	r3, #8
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6413      	str	r3, [r2, #64]	; 0x40
 8004774:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8004778:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800477c:	f102 0218 	add.w	r2, r2, #24
 8004780:	6812      	ldr	r2, [r2, #0]
 8004782:	645a      	str	r2, [r3, #68]	; 0x44
 8004784:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8004788:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800478c:	f102 0218 	add.w	r2, r2, #24
 8004790:	6812      	ldr	r2, [r2, #0]
 8004792:	649a      	str	r2, [r3, #72]	; 0x48
 8004794:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004798:	f107 0308 	add.w	r3, r7, #8
 800479c:	3b08      	subs	r3, #8
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047a2:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80047a6:	f107 0308 	add.w	r3, r7, #8
 80047aa:	3b08      	subs	r3, #8
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	6513      	str	r3, [r2, #80]	; 0x50
 80047b0:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80047b4:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80047b8:	f102 0218 	add.w	r2, r2, #24
 80047bc:	6812      	ldr	r2, [r2, #0]
 80047be:	655a      	str	r2, [r3, #84]	; 0x54
 80047c0:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80047c4:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80047c8:	f102 0218 	add.w	r2, r2, #24
 80047cc:	6812      	ldr	r2, [r2, #0]
 80047ce:	659a      	str	r2, [r3, #88]	; 0x58
 80047d0:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80047d4:	f107 0308 	add.w	r3, r7, #8
 80047d8:	3b08      	subs	r3, #8
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	65d3      	str	r3, [r2, #92]	; 0x5c
 80047de:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 80047e2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80047e6:	f102 0218 	add.w	r2, r2, #24
 80047ea:	6812      	ldr	r2, [r2, #0]
 80047ec:	661a      	str	r2, [r3, #96]	; 0x60
 80047ee:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80047f2:	f107 0308 	add.w	r3, r7, #8
 80047f6:	3b08      	subs	r3, #8
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6653      	str	r3, [r2, #100]	; 0x64
 80047fc:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 8004800:	f107 0308 	add.w	r3, r7, #8
 8004804:	3b08      	subs	r3, #8
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6693      	str	r3, [r2, #104]	; 0x68
 800480a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800480e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004812:	f102 0218 	add.w	r2, r2, #24
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	66da      	str	r2, [r3, #108]	; 0x6c
 800481a:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800481e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004822:	f102 0218 	add.w	r2, r2, #24
 8004826:	6812      	ldr	r2, [r2, #0]
 8004828:	671a      	str	r2, [r3, #112]	; 0x70
 800482a:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 800482e:	f107 0308 	add.w	r3, r7, #8
 8004832:	3b08      	subs	r3, #8
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	6753      	str	r3, [r2, #116]	; 0x74
 8004838:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 800483c:	f107 0308 	add.w	r3, r7, #8
 8004840:	3b08      	subs	r3, #8
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6793      	str	r3, [r2, #120]	; 0x78
 8004846:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 800484a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800484e:	f102 0218 	add.w	r2, r2, #24
 8004852:	6812      	ldr	r2, [r2, #0]
 8004854:	67da      	str	r2, [r3, #124]	; 0x7c
 8004856:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 800485a:	f107 0308 	add.w	r3, r7, #8
 800485e:	3b08      	subs	r3, #8
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004866:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 800486a:	f107 0308 	add.w	r3, r7, #8
 800486e:	3b08      	subs	r3, #8
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8004876:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 800487a:	f107 0308 	add.w	r3, r7, #8
 800487e:	3b08      	subs	r3, #8
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004886:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 800488a:	f107 0308 	add.w	r3, r7, #8
 800488e:	3b08      	subs	r3, #8
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004896:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 800489a:	f107 0308 	add.w	r3, r7, #8
 800489e:	3b08      	subs	r3, #8
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048a6:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80048aa:	f107 0308 	add.w	r3, r7, #8
 80048ae:	3b08      	subs	r3, #8
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80048b6:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80048ba:	f107 0308 	add.w	r3, r7, #8
 80048be:	3b08      	subs	r3, #8
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
 80048c6:	f507 722e 	add.w	r2, r7, #696	; 0x2b8
 80048ca:	f107 0308 	add.w	r3, r7, #8
 80048ce:	3b08      	subs	r3, #8
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		textcolor, backcolor, backcolor, textcolor,  //@..@
		textcolor, backcolor, backcolor, textcolor,  //@..@
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int letter_Y[10][5] = {
 80048d6:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 80048da:	f107 0308 	add.w	r3, r7, #8
 80048de:	3b08      	subs	r3, #8
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6013      	str	r3, [r2, #0]
 80048e4:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 80048e8:	f107 0308 	add.w	r3, r7, #8
 80048ec:	3b08      	subs	r3, #8
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6053      	str	r3, [r2, #4]
 80048f2:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 80048f6:	f107 0308 	add.w	r3, r7, #8
 80048fa:	3b08      	subs	r3, #8
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6093      	str	r3, [r2, #8]
 8004900:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004904:	f107 0308 	add.w	r3, r7, #8
 8004908:	3b08      	subs	r3, #8
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	60d3      	str	r3, [r2, #12]
 800490e:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004912:	f107 0308 	add.w	r3, r7, #8
 8004916:	3b08      	subs	r3, #8
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6113      	str	r3, [r2, #16]
 800491c:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004920:	f107 0308 	add.w	r3, r7, #8
 8004924:	3b08      	subs	r3, #8
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6153      	str	r3, [r2, #20]
 800492a:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 800492e:	f107 0308 	add.w	r3, r7, #8
 8004932:	3b08      	subs	r3, #8
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6193      	str	r3, [r2, #24]
 8004938:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 800493c:	f107 0308 	add.w	r3, r7, #8
 8004940:	3b08      	subs	r3, #8
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	61d3      	str	r3, [r2, #28]
 8004946:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 800494a:	f107 0308 	add.w	r3, r7, #8
 800494e:	3b08      	subs	r3, #8
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	6213      	str	r3, [r2, #32]
 8004954:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004958:	f107 0308 	add.w	r3, r7, #8
 800495c:	3b08      	subs	r3, #8
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6253      	str	r3, [r2, #36]	; 0x24
 8004962:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004966:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800496a:	f102 0218 	add.w	r2, r2, #24
 800496e:	6812      	ldr	r2, [r2, #0]
 8004970:	629a      	str	r2, [r3, #40]	; 0x28
 8004972:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004976:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800497a:	f102 0218 	add.w	r2, r2, #24
 800497e:	6812      	ldr	r2, [r2, #0]
 8004980:	62da      	str	r2, [r3, #44]	; 0x2c
 8004982:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004986:	f107 0308 	add.w	r3, r7, #8
 800498a:	3b08      	subs	r3, #8
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6313      	str	r3, [r2, #48]	; 0x30
 8004990:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004994:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004998:	f102 0218 	add.w	r2, r2, #24
 800499c:	6812      	ldr	r2, [r2, #0]
 800499e:	635a      	str	r2, [r3, #52]	; 0x34
 80049a0:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80049a4:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80049a8:	f102 0218 	add.w	r2, r2, #24
 80049ac:	6812      	ldr	r2, [r2, #0]
 80049ae:	639a      	str	r2, [r3, #56]	; 0x38
 80049b0:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 80049b4:	f107 0308 	add.w	r3, r7, #8
 80049b8:	3b08      	subs	r3, #8
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	63d3      	str	r3, [r2, #60]	; 0x3c
 80049be:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80049c2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80049c6:	f102 0218 	add.w	r2, r2, #24
 80049ca:	6812      	ldr	r2, [r2, #0]
 80049cc:	641a      	str	r2, [r3, #64]	; 0x40
 80049ce:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 80049d2:	f107 0308 	add.w	r3, r7, #8
 80049d6:	3b08      	subs	r3, #8
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6453      	str	r3, [r2, #68]	; 0x44
 80049dc:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80049e0:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80049e4:	f102 0218 	add.w	r2, r2, #24
 80049e8:	6812      	ldr	r2, [r2, #0]
 80049ea:	649a      	str	r2, [r3, #72]	; 0x48
 80049ec:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 80049f0:	f107 0308 	add.w	r3, r7, #8
 80049f4:	3b08      	subs	r3, #8
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049fa:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 80049fe:	f107 0308 	add.w	r3, r7, #8
 8004a02:	3b08      	subs	r3, #8
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	6513      	str	r3, [r2, #80]	; 0x50
 8004a08:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004a0c:	f107 0308 	add.w	r3, r7, #8
 8004a10:	3b08      	subs	r3, #8
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6553      	str	r3, [r2, #84]	; 0x54
 8004a16:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004a1a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004a1e:	f102 0218 	add.w	r2, r2, #24
 8004a22:	6812      	ldr	r2, [r2, #0]
 8004a24:	659a      	str	r2, [r3, #88]	; 0x58
 8004a26:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004a2a:	f107 0308 	add.w	r3, r7, #8
 8004a2e:	3b08      	subs	r3, #8
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	65d3      	str	r3, [r2, #92]	; 0x5c
 8004a34:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004a38:	f107 0308 	add.w	r3, r7, #8
 8004a3c:	3b08      	subs	r3, #8
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6613      	str	r3, [r2, #96]	; 0x60
 8004a42:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004a46:	f107 0308 	add.w	r3, r7, #8
 8004a4a:	3b08      	subs	r3, #8
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	6653      	str	r3, [r2, #100]	; 0x64
 8004a50:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004a54:	f107 0308 	add.w	r3, r7, #8
 8004a58:	3b08      	subs	r3, #8
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6693      	str	r3, [r2, #104]	; 0x68
 8004a5e:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004a62:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004a66:	f102 0218 	add.w	r2, r2, #24
 8004a6a:	6812      	ldr	r2, [r2, #0]
 8004a6c:	66da      	str	r2, [r3, #108]	; 0x6c
 8004a6e:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004a72:	f107 0308 	add.w	r3, r7, #8
 8004a76:	3b08      	subs	r3, #8
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a7c:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004a80:	f107 0308 	add.w	r3, r7, #8
 8004a84:	3b08      	subs	r3, #8
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6753      	str	r3, [r2, #116]	; 0x74
 8004a8a:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004a8e:	f107 0308 	add.w	r3, r7, #8
 8004a92:	3b08      	subs	r3, #8
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6793      	str	r3, [r2, #120]	; 0x78
 8004a98:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004a9c:	f107 0308 	add.w	r3, r7, #8
 8004aa0:	3b08      	subs	r3, #8
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	67d3      	str	r3, [r2, #124]	; 0x7c
 8004aa6:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004aaa:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004aae:	f102 0218 	add.w	r2, r2, #24
 8004ab2:	6812      	ldr	r2, [r2, #0]
 8004ab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004ab8:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004abc:	f107 0308 	add.w	r3, r7, #8
 8004ac0:	3b08      	subs	r3, #8
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 8004ac8:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004acc:	f107 0308 	add.w	r3, r7, #8
 8004ad0:	3b08      	subs	r3, #8
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8004ad8:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004adc:	f107 0308 	add.w	r3, r7, #8
 8004ae0:	3b08      	subs	r3, #8
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004ae8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004aec:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004af0:	f102 0218 	add.w	r2, r2, #24
 8004af4:	6812      	ldr	r2, [r2, #0]
 8004af6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004afa:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004afe:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004b02:	f102 0218 	add.w	r2, r2, #24
 8004b06:	6812      	ldr	r2, [r2, #0]
 8004b08:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004b0c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8004b10:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004b14:	f102 0218 	add.w	r2, r2, #24
 8004b18:	6812      	ldr	r2, [r2, #0]
 8004b1a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004b1e:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004b22:	f107 0308 	add.w	r3, r7, #8
 8004b26:	3b08      	subs	r3, #8
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004b2e:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004b32:	f107 0308 	add.w	r3, r7, #8
 8004b36:	3b08      	subs	r3, #8
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8004b3e:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004b42:	f107 0308 	add.w	r3, r7, #8
 8004b46:	3b08      	subs	r3, #8
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8004b4e:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004b52:	f107 0308 	add.w	r3, r7, #8
 8004b56:	3b08      	subs	r3, #8
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8004b5e:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004b62:	f107 0308 	add.w	r3, r7, #8
 8004b66:	3b08      	subs	r3, #8
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
 8004b6e:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004b72:	f107 0308 	add.w	r3, r7, #8
 8004b76:	3b08      	subs	r3, #8
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
 8004b7e:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004b82:	f107 0308 	add.w	r3, r7, #8
 8004b86:	3b08      	subs	r3, #8
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
 8004b8e:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004b92:	f107 0308 	add.w	r3, r7, #8
 8004b96:	3b08      	subs	r3, #8
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
 8004b9e:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004ba2:	f107 0308 	add.w	r3, r7, #8
 8004ba6:	3b08      	subs	r3, #8
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f8c2 30bc 	str.w	r3, [r2, #188]	; 0xbc
 8004bae:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004bb2:	f107 0308 	add.w	r3, r7, #8
 8004bb6:	3b08      	subs	r3, #8
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004bbe:	f507 72f8 	add.w	r2, r7, #496	; 0x1f0
 8004bc2:	f107 0308 	add.w	r3, r7, #8
 8004bc6:	3b08      	subs	r3, #8
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
		backcolor, backcolor, textcolor, backcolor, backcolor,  //..@..
		backcolor, textcolor, textcolor, textcolor, backcolor,  //.@@@.
		backcolor, backcolor, backcolor, backcolor, backcolor,  //.....
		backcolor, backcolor, backcolor, backcolor, backcolor,  //.....
	};
	int letter_Z[10][4] = {
 8004bce:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004bd2:	3b18      	subs	r3, #24
 8004bd4:	f107 0208 	add.w	r2, r7, #8
 8004bd8:	3a08      	subs	r2, #8
 8004bda:	6812      	ldr	r2, [r2, #0]
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004be2:	3b18      	subs	r3, #24
 8004be4:	f107 0208 	add.w	r2, r7, #8
 8004be8:	3a08      	subs	r2, #8
 8004bea:	6812      	ldr	r2, [r2, #0]
 8004bec:	605a      	str	r2, [r3, #4]
 8004bee:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004bf2:	3b18      	subs	r3, #24
 8004bf4:	f107 0208 	add.w	r2, r7, #8
 8004bf8:	3a08      	subs	r2, #8
 8004bfa:	6812      	ldr	r2, [r2, #0]
 8004bfc:	609a      	str	r2, [r3, #8]
 8004bfe:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004c02:	3b18      	subs	r3, #24
 8004c04:	f107 0208 	add.w	r2, r7, #8
 8004c08:	3a08      	subs	r2, #8
 8004c0a:	6812      	ldr	r2, [r2, #0]
 8004c0c:	60da      	str	r2, [r3, #12]
 8004c0e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004c12:	3b18      	subs	r3, #24
 8004c14:	f107 0208 	add.w	r2, r7, #8
 8004c18:	3a08      	subs	r2, #8
 8004c1a:	6812      	ldr	r2, [r2, #0]
 8004c1c:	611a      	str	r2, [r3, #16]
 8004c1e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004c22:	3b18      	subs	r3, #24
 8004c24:	f107 0208 	add.w	r2, r7, #8
 8004c28:	3a08      	subs	r2, #8
 8004c2a:	6812      	ldr	r2, [r2, #0]
 8004c2c:	615a      	str	r2, [r3, #20]
 8004c2e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004c32:	3b18      	subs	r3, #24
 8004c34:	f107 0208 	add.w	r2, r7, #8
 8004c38:	3a08      	subs	r2, #8
 8004c3a:	6812      	ldr	r2, [r2, #0]
 8004c3c:	619a      	str	r2, [r3, #24]
 8004c3e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004c42:	3b18      	subs	r3, #24
 8004c44:	f107 0208 	add.w	r2, r7, #8
 8004c48:	3a08      	subs	r2, #8
 8004c4a:	6812      	ldr	r2, [r2, #0]
 8004c4c:	61da      	str	r2, [r3, #28]
 8004c4e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004c52:	3b18      	subs	r3, #24
 8004c54:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004c58:	f102 0218 	add.w	r2, r2, #24
 8004c5c:	6812      	ldr	r2, [r2, #0]
 8004c5e:	621a      	str	r2, [r3, #32]
 8004c60:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004c64:	3b18      	subs	r3, #24
 8004c66:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004c6a:	f102 0218 	add.w	r2, r2, #24
 8004c6e:	6812      	ldr	r2, [r2, #0]
 8004c70:	625a      	str	r2, [r3, #36]	; 0x24
 8004c72:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004c76:	3b18      	subs	r3, #24
 8004c78:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004c7c:	f102 0218 	add.w	r2, r2, #24
 8004c80:	6812      	ldr	r2, [r2, #0]
 8004c82:	629a      	str	r2, [r3, #40]	; 0x28
 8004c84:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004c88:	3b18      	subs	r3, #24
 8004c8a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004c8e:	f102 0218 	add.w	r2, r2, #24
 8004c92:	6812      	ldr	r2, [r2, #0]
 8004c94:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c96:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004c9a:	3b18      	subs	r3, #24
 8004c9c:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004ca0:	f102 0218 	add.w	r2, r2, #24
 8004ca4:	6812      	ldr	r2, [r2, #0]
 8004ca6:	631a      	str	r2, [r3, #48]	; 0x30
 8004ca8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004cac:	3b18      	subs	r3, #24
 8004cae:	f107 0208 	add.w	r2, r7, #8
 8004cb2:	3a08      	subs	r2, #8
 8004cb4:	6812      	ldr	r2, [r2, #0]
 8004cb6:	635a      	str	r2, [r3, #52]	; 0x34
 8004cb8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004cbc:	3b18      	subs	r3, #24
 8004cbe:	f107 0208 	add.w	r2, r7, #8
 8004cc2:	3a08      	subs	r2, #8
 8004cc4:	6812      	ldr	r2, [r2, #0]
 8004cc6:	639a      	str	r2, [r3, #56]	; 0x38
 8004cc8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004ccc:	3b18      	subs	r3, #24
 8004cce:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004cd2:	f102 0218 	add.w	r2, r2, #24
 8004cd6:	6812      	ldr	r2, [r2, #0]
 8004cd8:	63da      	str	r2, [r3, #60]	; 0x3c
 8004cda:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004cde:	3b18      	subs	r3, #24
 8004ce0:	f107 0208 	add.w	r2, r7, #8
 8004ce4:	3a08      	subs	r2, #8
 8004ce6:	6812      	ldr	r2, [r2, #0]
 8004ce8:	641a      	str	r2, [r3, #64]	; 0x40
 8004cea:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004cee:	3b18      	subs	r3, #24
 8004cf0:	f107 0208 	add.w	r2, r7, #8
 8004cf4:	3a08      	subs	r2, #8
 8004cf6:	6812      	ldr	r2, [r2, #0]
 8004cf8:	645a      	str	r2, [r3, #68]	; 0x44
 8004cfa:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004cfe:	3b18      	subs	r3, #24
 8004d00:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004d04:	f102 0218 	add.w	r2, r2, #24
 8004d08:	6812      	ldr	r2, [r2, #0]
 8004d0a:	649a      	str	r2, [r3, #72]	; 0x48
 8004d0c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004d10:	3b18      	subs	r3, #24
 8004d12:	f107 0208 	add.w	r2, r7, #8
 8004d16:	3a08      	subs	r2, #8
 8004d18:	6812      	ldr	r2, [r2, #0]
 8004d1a:	64da      	str	r2, [r3, #76]	; 0x4c
 8004d1c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004d20:	3b18      	subs	r3, #24
 8004d22:	f107 0208 	add.w	r2, r7, #8
 8004d26:	3a08      	subs	r2, #8
 8004d28:	6812      	ldr	r2, [r2, #0]
 8004d2a:	651a      	str	r2, [r3, #80]	; 0x50
 8004d2c:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004d30:	3b18      	subs	r3, #24
 8004d32:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004d36:	f102 0218 	add.w	r2, r2, #24
 8004d3a:	6812      	ldr	r2, [r2, #0]
 8004d3c:	655a      	str	r2, [r3, #84]	; 0x54
 8004d3e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004d42:	3b18      	subs	r3, #24
 8004d44:	f107 0208 	add.w	r2, r7, #8
 8004d48:	3a08      	subs	r2, #8
 8004d4a:	6812      	ldr	r2, [r2, #0]
 8004d4c:	659a      	str	r2, [r3, #88]	; 0x58
 8004d4e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004d52:	3b18      	subs	r3, #24
 8004d54:	f107 0208 	add.w	r2, r7, #8
 8004d58:	3a08      	subs	r2, #8
 8004d5a:	6812      	ldr	r2, [r2, #0]
 8004d5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004d5e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004d62:	3b18      	subs	r3, #24
 8004d64:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004d68:	f102 0218 	add.w	r2, r2, #24
 8004d6c:	6812      	ldr	r2, [r2, #0]
 8004d6e:	661a      	str	r2, [r3, #96]	; 0x60
 8004d70:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004d74:	3b18      	subs	r3, #24
 8004d76:	f107 0208 	add.w	r2, r7, #8
 8004d7a:	3a08      	subs	r2, #8
 8004d7c:	6812      	ldr	r2, [r2, #0]
 8004d7e:	665a      	str	r2, [r3, #100]	; 0x64
 8004d80:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004d84:	3b18      	subs	r3, #24
 8004d86:	f107 0208 	add.w	r2, r7, #8
 8004d8a:	3a08      	subs	r2, #8
 8004d8c:	6812      	ldr	r2, [r2, #0]
 8004d8e:	669a      	str	r2, [r3, #104]	; 0x68
 8004d90:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004d94:	3b18      	subs	r3, #24
 8004d96:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004d9a:	f102 0218 	add.w	r2, r2, #24
 8004d9e:	6812      	ldr	r2, [r2, #0]
 8004da0:	66da      	str	r2, [r3, #108]	; 0x6c
 8004da2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004da6:	3b18      	subs	r3, #24
 8004da8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004dac:	f102 0218 	add.w	r2, r2, #24
 8004db0:	6812      	ldr	r2, [r2, #0]
 8004db2:	671a      	str	r2, [r3, #112]	; 0x70
 8004db4:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004db8:	3b18      	subs	r3, #24
 8004dba:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004dbe:	f102 0218 	add.w	r2, r2, #24
 8004dc2:	6812      	ldr	r2, [r2, #0]
 8004dc4:	675a      	str	r2, [r3, #116]	; 0x74
 8004dc6:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004dca:	3b18      	subs	r3, #24
 8004dcc:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004dd0:	f102 0218 	add.w	r2, r2, #24
 8004dd4:	6812      	ldr	r2, [r2, #0]
 8004dd6:	679a      	str	r2, [r3, #120]	; 0x78
 8004dd8:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004ddc:	3b18      	subs	r3, #24
 8004dde:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8004de2:	f102 0218 	add.w	r2, r2, #24
 8004de6:	6812      	ldr	r2, [r2, #0]
 8004de8:	67da      	str	r2, [r3, #124]	; 0x7c
 8004dea:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004dee:	3b18      	subs	r3, #24
 8004df0:	f107 0208 	add.w	r2, r7, #8
 8004df4:	3a08      	subs	r2, #8
 8004df6:	6812      	ldr	r2, [r2, #0]
 8004df8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004dfc:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004e00:	3b18      	subs	r3, #24
 8004e02:	f107 0208 	add.w	r2, r7, #8
 8004e06:	3a08      	subs	r2, #8
 8004e08:	6812      	ldr	r2, [r2, #0]
 8004e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8004e0e:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004e12:	3b18      	subs	r3, #24
 8004e14:	f107 0208 	add.w	r2, r7, #8
 8004e18:	3a08      	subs	r2, #8
 8004e1a:	6812      	ldr	r2, [r2, #0]
 8004e1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8004e20:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004e24:	3b18      	subs	r3, #24
 8004e26:	f107 0208 	add.w	r2, r7, #8
 8004e2a:	3a08      	subs	r2, #8
 8004e2c:	6812      	ldr	r2, [r2, #0]
 8004e2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8004e32:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004e36:	3b18      	subs	r3, #24
 8004e38:	f107 0208 	add.w	r2, r7, #8
 8004e3c:	3a08      	subs	r2, #8
 8004e3e:	6812      	ldr	r2, [r2, #0]
 8004e40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004e44:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004e48:	3b18      	subs	r3, #24
 8004e4a:	f107 0208 	add.w	r2, r7, #8
 8004e4e:	3a08      	subs	r2, #8
 8004e50:	6812      	ldr	r2, [r2, #0]
 8004e52:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8004e56:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004e5a:	3b18      	subs	r3, #24
 8004e5c:	f107 0208 	add.w	r2, r7, #8
 8004e60:	3a08      	subs	r2, #8
 8004e62:	6812      	ldr	r2, [r2, #0]
 8004e64:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8004e68:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8004e6c:	3b18      	subs	r3, #24
 8004e6e:	f107 0208 	add.w	r2, r7, #8
 8004e72:	3a08      	subs	r2, #8
 8004e74:	6812      	ldr	r2, [r2, #0]
 8004e76:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		textcolor, backcolor, backcolor, textcolor,  //@..@
		textcolor, textcolor, textcolor, textcolor,  //@@@@
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int spatie[10][4] = {
 8004e7a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004e7e:	3b18      	subs	r3, #24
 8004e80:	f107 0208 	add.w	r2, r7, #8
 8004e84:	3a08      	subs	r2, #8
 8004e86:	6812      	ldr	r2, [r2, #0]
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004e8e:	3b18      	subs	r3, #24
 8004e90:	f107 0208 	add.w	r2, r7, #8
 8004e94:	3a08      	subs	r2, #8
 8004e96:	6812      	ldr	r2, [r2, #0]
 8004e98:	605a      	str	r2, [r3, #4]
 8004e9a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004e9e:	3b18      	subs	r3, #24
 8004ea0:	f107 0208 	add.w	r2, r7, #8
 8004ea4:	3a08      	subs	r2, #8
 8004ea6:	6812      	ldr	r2, [r2, #0]
 8004ea8:	609a      	str	r2, [r3, #8]
 8004eaa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004eae:	3b18      	subs	r3, #24
 8004eb0:	f107 0208 	add.w	r2, r7, #8
 8004eb4:	3a08      	subs	r2, #8
 8004eb6:	6812      	ldr	r2, [r2, #0]
 8004eb8:	60da      	str	r2, [r3, #12]
 8004eba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004ebe:	3b18      	subs	r3, #24
 8004ec0:	f107 0208 	add.w	r2, r7, #8
 8004ec4:	3a08      	subs	r2, #8
 8004ec6:	6812      	ldr	r2, [r2, #0]
 8004ec8:	611a      	str	r2, [r3, #16]
 8004eca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004ece:	3b18      	subs	r3, #24
 8004ed0:	f107 0208 	add.w	r2, r7, #8
 8004ed4:	3a08      	subs	r2, #8
 8004ed6:	6812      	ldr	r2, [r2, #0]
 8004ed8:	615a      	str	r2, [r3, #20]
 8004eda:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004ede:	3b18      	subs	r3, #24
 8004ee0:	f107 0208 	add.w	r2, r7, #8
 8004ee4:	3a08      	subs	r2, #8
 8004ee6:	6812      	ldr	r2, [r2, #0]
 8004ee8:	619a      	str	r2, [r3, #24]
 8004eea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004eee:	3b18      	subs	r3, #24
 8004ef0:	f107 0208 	add.w	r2, r7, #8
 8004ef4:	3a08      	subs	r2, #8
 8004ef6:	6812      	ldr	r2, [r2, #0]
 8004ef8:	61da      	str	r2, [r3, #28]
 8004efa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004efe:	3b18      	subs	r3, #24
 8004f00:	f107 0208 	add.w	r2, r7, #8
 8004f04:	3a08      	subs	r2, #8
 8004f06:	6812      	ldr	r2, [r2, #0]
 8004f08:	621a      	str	r2, [r3, #32]
 8004f0a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004f0e:	3b18      	subs	r3, #24
 8004f10:	f107 0208 	add.w	r2, r7, #8
 8004f14:	3a08      	subs	r2, #8
 8004f16:	6812      	ldr	r2, [r2, #0]
 8004f18:	625a      	str	r2, [r3, #36]	; 0x24
 8004f1a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004f1e:	3b18      	subs	r3, #24
 8004f20:	f107 0208 	add.w	r2, r7, #8
 8004f24:	3a08      	subs	r2, #8
 8004f26:	6812      	ldr	r2, [r2, #0]
 8004f28:	629a      	str	r2, [r3, #40]	; 0x28
 8004f2a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004f2e:	3b18      	subs	r3, #24
 8004f30:	f107 0208 	add.w	r2, r7, #8
 8004f34:	3a08      	subs	r2, #8
 8004f36:	6812      	ldr	r2, [r2, #0]
 8004f38:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f3a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004f3e:	3b18      	subs	r3, #24
 8004f40:	f107 0208 	add.w	r2, r7, #8
 8004f44:	3a08      	subs	r2, #8
 8004f46:	6812      	ldr	r2, [r2, #0]
 8004f48:	631a      	str	r2, [r3, #48]	; 0x30
 8004f4a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004f4e:	3b18      	subs	r3, #24
 8004f50:	f107 0208 	add.w	r2, r7, #8
 8004f54:	3a08      	subs	r2, #8
 8004f56:	6812      	ldr	r2, [r2, #0]
 8004f58:	635a      	str	r2, [r3, #52]	; 0x34
 8004f5a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004f5e:	3b18      	subs	r3, #24
 8004f60:	f107 0208 	add.w	r2, r7, #8
 8004f64:	3a08      	subs	r2, #8
 8004f66:	6812      	ldr	r2, [r2, #0]
 8004f68:	639a      	str	r2, [r3, #56]	; 0x38
 8004f6a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004f6e:	3b18      	subs	r3, #24
 8004f70:	f107 0208 	add.w	r2, r7, #8
 8004f74:	3a08      	subs	r2, #8
 8004f76:	6812      	ldr	r2, [r2, #0]
 8004f78:	63da      	str	r2, [r3, #60]	; 0x3c
 8004f7a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004f7e:	3b18      	subs	r3, #24
 8004f80:	f107 0208 	add.w	r2, r7, #8
 8004f84:	3a08      	subs	r2, #8
 8004f86:	6812      	ldr	r2, [r2, #0]
 8004f88:	641a      	str	r2, [r3, #64]	; 0x40
 8004f8a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004f8e:	3b18      	subs	r3, #24
 8004f90:	f107 0208 	add.w	r2, r7, #8
 8004f94:	3a08      	subs	r2, #8
 8004f96:	6812      	ldr	r2, [r2, #0]
 8004f98:	645a      	str	r2, [r3, #68]	; 0x44
 8004f9a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004f9e:	3b18      	subs	r3, #24
 8004fa0:	f107 0208 	add.w	r2, r7, #8
 8004fa4:	3a08      	subs	r2, #8
 8004fa6:	6812      	ldr	r2, [r2, #0]
 8004fa8:	649a      	str	r2, [r3, #72]	; 0x48
 8004faa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004fae:	3b18      	subs	r3, #24
 8004fb0:	f107 0208 	add.w	r2, r7, #8
 8004fb4:	3a08      	subs	r2, #8
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	64da      	str	r2, [r3, #76]	; 0x4c
 8004fba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004fbe:	3b18      	subs	r3, #24
 8004fc0:	f107 0208 	add.w	r2, r7, #8
 8004fc4:	3a08      	subs	r2, #8
 8004fc6:	6812      	ldr	r2, [r2, #0]
 8004fc8:	651a      	str	r2, [r3, #80]	; 0x50
 8004fca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004fce:	3b18      	subs	r3, #24
 8004fd0:	f107 0208 	add.w	r2, r7, #8
 8004fd4:	3a08      	subs	r2, #8
 8004fd6:	6812      	ldr	r2, [r2, #0]
 8004fd8:	655a      	str	r2, [r3, #84]	; 0x54
 8004fda:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004fde:	3b18      	subs	r3, #24
 8004fe0:	f107 0208 	add.w	r2, r7, #8
 8004fe4:	3a08      	subs	r2, #8
 8004fe6:	6812      	ldr	r2, [r2, #0]
 8004fe8:	659a      	str	r2, [r3, #88]	; 0x58
 8004fea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004fee:	3b18      	subs	r3, #24
 8004ff0:	f107 0208 	add.w	r2, r7, #8
 8004ff4:	3a08      	subs	r2, #8
 8004ff6:	6812      	ldr	r2, [r2, #0]
 8004ff8:	65da      	str	r2, [r3, #92]	; 0x5c
 8004ffa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004ffe:	3b18      	subs	r3, #24
 8005000:	f107 0208 	add.w	r2, r7, #8
 8005004:	3a08      	subs	r2, #8
 8005006:	6812      	ldr	r2, [r2, #0]
 8005008:	661a      	str	r2, [r3, #96]	; 0x60
 800500a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800500e:	3b18      	subs	r3, #24
 8005010:	f107 0208 	add.w	r2, r7, #8
 8005014:	3a08      	subs	r2, #8
 8005016:	6812      	ldr	r2, [r2, #0]
 8005018:	665a      	str	r2, [r3, #100]	; 0x64
 800501a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800501e:	3b18      	subs	r3, #24
 8005020:	f107 0208 	add.w	r2, r7, #8
 8005024:	3a08      	subs	r2, #8
 8005026:	6812      	ldr	r2, [r2, #0]
 8005028:	669a      	str	r2, [r3, #104]	; 0x68
 800502a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800502e:	3b18      	subs	r3, #24
 8005030:	f107 0208 	add.w	r2, r7, #8
 8005034:	3a08      	subs	r2, #8
 8005036:	6812      	ldr	r2, [r2, #0]
 8005038:	66da      	str	r2, [r3, #108]	; 0x6c
 800503a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800503e:	3b18      	subs	r3, #24
 8005040:	f107 0208 	add.w	r2, r7, #8
 8005044:	3a08      	subs	r2, #8
 8005046:	6812      	ldr	r2, [r2, #0]
 8005048:	671a      	str	r2, [r3, #112]	; 0x70
 800504a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800504e:	3b18      	subs	r3, #24
 8005050:	f107 0208 	add.w	r2, r7, #8
 8005054:	3a08      	subs	r2, #8
 8005056:	6812      	ldr	r2, [r2, #0]
 8005058:	675a      	str	r2, [r3, #116]	; 0x74
 800505a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800505e:	3b18      	subs	r3, #24
 8005060:	f107 0208 	add.w	r2, r7, #8
 8005064:	3a08      	subs	r2, #8
 8005066:	6812      	ldr	r2, [r2, #0]
 8005068:	679a      	str	r2, [r3, #120]	; 0x78
 800506a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800506e:	3b18      	subs	r3, #24
 8005070:	f107 0208 	add.w	r2, r7, #8
 8005074:	3a08      	subs	r2, #8
 8005076:	6812      	ldr	r2, [r2, #0]
 8005078:	67da      	str	r2, [r3, #124]	; 0x7c
 800507a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800507e:	3b18      	subs	r3, #24
 8005080:	f107 0208 	add.w	r2, r7, #8
 8005084:	3a08      	subs	r2, #8
 8005086:	6812      	ldr	r2, [r2, #0]
 8005088:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800508c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005090:	3b18      	subs	r3, #24
 8005092:	f107 0208 	add.w	r2, r7, #8
 8005096:	3a08      	subs	r2, #8
 8005098:	6812      	ldr	r2, [r2, #0]
 800509a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800509e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80050a2:	3b18      	subs	r3, #24
 80050a4:	f107 0208 	add.w	r2, r7, #8
 80050a8:	3a08      	subs	r2, #8
 80050aa:	6812      	ldr	r2, [r2, #0]
 80050ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 80050b0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80050b4:	3b18      	subs	r3, #24
 80050b6:	f107 0208 	add.w	r2, r7, #8
 80050ba:	3a08      	subs	r2, #8
 80050bc:	6812      	ldr	r2, [r2, #0]
 80050be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80050c2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80050c6:	3b18      	subs	r3, #24
 80050c8:	f107 0208 	add.w	r2, r7, #8
 80050cc:	3a08      	subs	r2, #8
 80050ce:	6812      	ldr	r2, [r2, #0]
 80050d0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80050d4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80050d8:	3b18      	subs	r3, #24
 80050da:	f107 0208 	add.w	r2, r7, #8
 80050de:	3a08      	subs	r2, #8
 80050e0:	6812      	ldr	r2, [r2, #0]
 80050e2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80050e6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80050ea:	3b18      	subs	r3, #24
 80050ec:	f107 0208 	add.w	r2, r7, #8
 80050f0:	3a08      	subs	r2, #8
 80050f2:	6812      	ldr	r2, [r2, #0]
 80050f4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80050f8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80050fc:	3b18      	subs	r3, #24
 80050fe:	f107 0208 	add.w	r2, r7, #8
 8005102:	3a08      	subs	r2, #8
 8005104:	6812      	ldr	r2, [r2, #0]
 8005106:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
		backcolor, backcolor, backcolor, backcolor,  //....
	};
	int komma[13][3]={
 800510a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800510e:	3b14      	subs	r3, #20
 8005110:	f107 0208 	add.w	r2, r7, #8
 8005114:	3a08      	subs	r2, #8
 8005116:	6812      	ldr	r2, [r2, #0]
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800511e:	3b14      	subs	r3, #20
 8005120:	f107 0208 	add.w	r2, r7, #8
 8005124:	3a08      	subs	r2, #8
 8005126:	6812      	ldr	r2, [r2, #0]
 8005128:	605a      	str	r2, [r3, #4]
 800512a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800512e:	3b14      	subs	r3, #20
 8005130:	f107 0208 	add.w	r2, r7, #8
 8005134:	3a08      	subs	r2, #8
 8005136:	6812      	ldr	r2, [r2, #0]
 8005138:	609a      	str	r2, [r3, #8]
 800513a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800513e:	3b14      	subs	r3, #20
 8005140:	f107 0208 	add.w	r2, r7, #8
 8005144:	3a08      	subs	r2, #8
 8005146:	6812      	ldr	r2, [r2, #0]
 8005148:	60da      	str	r2, [r3, #12]
 800514a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800514e:	3b14      	subs	r3, #20
 8005150:	f107 0208 	add.w	r2, r7, #8
 8005154:	3a08      	subs	r2, #8
 8005156:	6812      	ldr	r2, [r2, #0]
 8005158:	611a      	str	r2, [r3, #16]
 800515a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800515e:	3b14      	subs	r3, #20
 8005160:	f107 0208 	add.w	r2, r7, #8
 8005164:	3a08      	subs	r2, #8
 8005166:	6812      	ldr	r2, [r2, #0]
 8005168:	615a      	str	r2, [r3, #20]
 800516a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800516e:	3b14      	subs	r3, #20
 8005170:	f107 0208 	add.w	r2, r7, #8
 8005174:	3a08      	subs	r2, #8
 8005176:	6812      	ldr	r2, [r2, #0]
 8005178:	619a      	str	r2, [r3, #24]
 800517a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800517e:	3b14      	subs	r3, #20
 8005180:	f107 0208 	add.w	r2, r7, #8
 8005184:	3a08      	subs	r2, #8
 8005186:	6812      	ldr	r2, [r2, #0]
 8005188:	61da      	str	r2, [r3, #28]
 800518a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800518e:	3b14      	subs	r3, #20
 8005190:	f107 0208 	add.w	r2, r7, #8
 8005194:	3a08      	subs	r2, #8
 8005196:	6812      	ldr	r2, [r2, #0]
 8005198:	621a      	str	r2, [r3, #32]
 800519a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800519e:	3b14      	subs	r3, #20
 80051a0:	f107 0208 	add.w	r2, r7, #8
 80051a4:	3a08      	subs	r2, #8
 80051a6:	6812      	ldr	r2, [r2, #0]
 80051a8:	625a      	str	r2, [r3, #36]	; 0x24
 80051aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051ae:	3b14      	subs	r3, #20
 80051b0:	f107 0208 	add.w	r2, r7, #8
 80051b4:	3a08      	subs	r2, #8
 80051b6:	6812      	ldr	r2, [r2, #0]
 80051b8:	629a      	str	r2, [r3, #40]	; 0x28
 80051ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051be:	3b14      	subs	r3, #20
 80051c0:	f107 0208 	add.w	r2, r7, #8
 80051c4:	3a08      	subs	r2, #8
 80051c6:	6812      	ldr	r2, [r2, #0]
 80051c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80051ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051ce:	3b14      	subs	r3, #20
 80051d0:	f107 0208 	add.w	r2, r7, #8
 80051d4:	3a08      	subs	r2, #8
 80051d6:	6812      	ldr	r2, [r2, #0]
 80051d8:	631a      	str	r2, [r3, #48]	; 0x30
 80051da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051de:	3b14      	subs	r3, #20
 80051e0:	f107 0208 	add.w	r2, r7, #8
 80051e4:	3a08      	subs	r2, #8
 80051e6:	6812      	ldr	r2, [r2, #0]
 80051e8:	635a      	str	r2, [r3, #52]	; 0x34
 80051ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051ee:	3b14      	subs	r3, #20
 80051f0:	f107 0208 	add.w	r2, r7, #8
 80051f4:	3a08      	subs	r2, #8
 80051f6:	6812      	ldr	r2, [r2, #0]
 80051f8:	639a      	str	r2, [r3, #56]	; 0x38
 80051fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80051fe:	3b14      	subs	r3, #20
 8005200:	f107 0208 	add.w	r2, r7, #8
 8005204:	3a08      	subs	r2, #8
 8005206:	6812      	ldr	r2, [r2, #0]
 8005208:	63da      	str	r2, [r3, #60]	; 0x3c
 800520a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800520e:	3b14      	subs	r3, #20
 8005210:	f107 0208 	add.w	r2, r7, #8
 8005214:	3a08      	subs	r2, #8
 8005216:	6812      	ldr	r2, [r2, #0]
 8005218:	641a      	str	r2, [r3, #64]	; 0x40
 800521a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800521e:	3b14      	subs	r3, #20
 8005220:	f107 0208 	add.w	r2, r7, #8
 8005224:	3a08      	subs	r2, #8
 8005226:	6812      	ldr	r2, [r2, #0]
 8005228:	645a      	str	r2, [r3, #68]	; 0x44
 800522a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800522e:	3b14      	subs	r3, #20
 8005230:	f107 0208 	add.w	r2, r7, #8
 8005234:	3a08      	subs	r2, #8
 8005236:	6812      	ldr	r2, [r2, #0]
 8005238:	649a      	str	r2, [r3, #72]	; 0x48
 800523a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800523e:	3b14      	subs	r3, #20
 8005240:	f107 0208 	add.w	r2, r7, #8
 8005244:	3a08      	subs	r2, #8
 8005246:	6812      	ldr	r2, [r2, #0]
 8005248:	64da      	str	r2, [r3, #76]	; 0x4c
 800524a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800524e:	3b14      	subs	r3, #20
 8005250:	f107 0208 	add.w	r2, r7, #8
 8005254:	3a08      	subs	r2, #8
 8005256:	6812      	ldr	r2, [r2, #0]
 8005258:	651a      	str	r2, [r3, #80]	; 0x50
 800525a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800525e:	3b14      	subs	r3, #20
 8005260:	f107 0208 	add.w	r2, r7, #8
 8005264:	3a08      	subs	r2, #8
 8005266:	6812      	ldr	r2, [r2, #0]
 8005268:	655a      	str	r2, [r3, #84]	; 0x54
 800526a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800526e:	3b14      	subs	r3, #20
 8005270:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8005274:	f102 0218 	add.w	r2, r2, #24
 8005278:	6812      	ldr	r2, [r2, #0]
 800527a:	659a      	str	r2, [r3, #88]	; 0x58
 800527c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005280:	3b14      	subs	r3, #20
 8005282:	f107 0208 	add.w	r2, r7, #8
 8005286:	3a08      	subs	r2, #8
 8005288:	6812      	ldr	r2, [r2, #0]
 800528a:	65da      	str	r2, [r3, #92]	; 0x5c
 800528c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005290:	3b14      	subs	r3, #20
 8005292:	f107 0208 	add.w	r2, r7, #8
 8005296:	3a08      	subs	r2, #8
 8005298:	6812      	ldr	r2, [r2, #0]
 800529a:	661a      	str	r2, [r3, #96]	; 0x60
 800529c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052a0:	3b14      	subs	r3, #20
 80052a2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80052a6:	f102 0218 	add.w	r2, r2, #24
 80052aa:	6812      	ldr	r2, [r2, #0]
 80052ac:	665a      	str	r2, [r3, #100]	; 0x64
 80052ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052b2:	3b14      	subs	r3, #20
 80052b4:	f107 0208 	add.w	r2, r7, #8
 80052b8:	3a08      	subs	r2, #8
 80052ba:	6812      	ldr	r2, [r2, #0]
 80052bc:	669a      	str	r2, [r3, #104]	; 0x68
 80052be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052c2:	3b14      	subs	r3, #20
 80052c4:	f107 0208 	add.w	r2, r7, #8
 80052c8:	3a08      	subs	r2, #8
 80052ca:	6812      	ldr	r2, [r2, #0]
 80052cc:	66da      	str	r2, [r3, #108]	; 0x6c
 80052ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052d2:	3b14      	subs	r3, #20
 80052d4:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80052d8:	f102 0218 	add.w	r2, r2, #24
 80052dc:	6812      	ldr	r2, [r2, #0]
 80052de:	671a      	str	r2, [r3, #112]	; 0x70
 80052e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052e4:	3b14      	subs	r3, #20
 80052e6:	f107 0208 	add.w	r2, r7, #8
 80052ea:	3a08      	subs	r2, #8
 80052ec:	6812      	ldr	r2, [r2, #0]
 80052ee:	675a      	str	r2, [r3, #116]	; 0x74
 80052f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052f4:	3b14      	subs	r3, #20
 80052f6:	f107 0208 	add.w	r2, r7, #8
 80052fa:	3a08      	subs	r2, #8
 80052fc:	6812      	ldr	r2, [r2, #0]
 80052fe:	679a      	str	r2, [r3, #120]	; 0x78
 8005300:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005304:	3b14      	subs	r3, #20
 8005306:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800530a:	f102 0218 	add.w	r2, r2, #24
 800530e:	6812      	ldr	r2, [r2, #0]
 8005310:	67da      	str	r2, [r3, #124]	; 0x7c
 8005312:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005316:	3b14      	subs	r3, #20
 8005318:	f107 0208 	add.w	r2, r7, #8
 800531c:	3a08      	subs	r2, #8
 800531e:	6812      	ldr	r2, [r2, #0]
 8005320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8005324:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005328:	3b14      	subs	r3, #20
 800532a:	f107 0208 	add.w	r2, r7, #8
 800532e:	3a08      	subs	r2, #8
 8005330:	6812      	ldr	r2, [r2, #0]
 8005332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8005336:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800533a:	3b14      	subs	r3, #20
 800533c:	f107 0208 	add.w	r2, r7, #8
 8005340:	3a08      	subs	r2, #8
 8005342:	6812      	ldr	r2, [r2, #0]
 8005344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 8005348:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800534c:	3b14      	subs	r3, #20
 800534e:	f107 0208 	add.w	r2, r7, #8
 8005352:	3a08      	subs	r2, #8
 8005354:	6812      	ldr	r2, [r2, #0]
 8005356:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800535a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800535e:	3b14      	subs	r3, #20
 8005360:	f107 0208 	add.w	r2, r7, #8
 8005364:	3a08      	subs	r2, #8
 8005366:	6812      	ldr	r2, [r2, #0]
 8005368:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 800536c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005370:	3b14      	subs	r3, #20
 8005372:	f107 0208 	add.w	r2, r7, #8
 8005376:	3a08      	subs	r2, #8
 8005378:	6812      	ldr	r2, [r2, #0]
 800537a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800537e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005382:	3b14      	subs	r3, #20
 8005384:	f107 0208 	add.w	r2, r7, #8
 8005388:	3a08      	subs	r2, #8
 800538a:	6812      	ldr	r2, [r2, #0]
 800538c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		backcolor, textcolor, backcolor, 	//....
		backcolor, backcolor, backcolor, 	//....
		backcolor, backcolor, backcolor, 	//....
	};

	for (int i=0; i<10; i++)
 8005390:	2300      	movs	r3, #0
 8005392:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8005396:	f102 0204 	add.w	r2, r2, #4
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	f000 bc8a 	b.w	8005cb4 <letter_select+0x4d90>
	{
		for (int j=0; j<4; j++)
 80053a0:	2300      	movs	r3, #0
 80053a2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80053a6:	6013      	str	r3, [r2, #0]
 80053a8:	f000 bc73 	b.w	8005c92 <letter_select+0x4d6e>
		{
			int x_pos = j + x;
 80053ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80053b0:	3b1c      	subs	r3, #28
 80053b2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80053b6:	6812      	ldr	r2, [r2, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4413      	add	r3, r2
 80053bc:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 80053c0:	f102 021c 	add.w	r2, r2, #28
 80053c4:	6013      	str	r3, [r2, #0]
			int y_pos = i + y;
 80053c6:	f107 0308 	add.w	r3, r7, #8
 80053ca:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80053ce:	f102 0204 	add.w	r2, r2, #4
 80053d2:	6812      	ldr	r2, [r2, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4413      	add	r3, r2
 80053d8:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 80053dc:	f102 0218 	add.w	r2, r2, #24
 80053e0:	6013      	str	r3, [r2, #0]
			switch(letter)
 80053e2:	f107 0308 	add.w	r3, r7, #8
 80053e6:	3b01      	subs	r3, #1
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	3b20      	subs	r3, #32
 80053ec:	2b5a      	cmp	r3, #90	; 0x5a
 80053ee:	f200 8449 	bhi.w	8005c84 <letter_select+0x4d60>
 80053f2:	a201      	add	r2, pc, #4	; (adr r2, 80053f8 <letter_select+0x44d4>)
 80053f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f8:	08005bfd 	.word	0x08005bfd
 80053fc:	08005c85 	.word	0x08005c85
 8005400:	08005c85 	.word	0x08005c85
 8005404:	08005c85 	.word	0x08005c85
 8005408:	08005c85 	.word	0x08005c85
 800540c:	08005c85 	.word	0x08005c85
 8005410:	08005c85 	.word	0x08005c85
 8005414:	08005c85 	.word	0x08005c85
 8005418:	08005c85 	.word	0x08005c85
 800541c:	08005c85 	.word	0x08005c85
 8005420:	08005c85 	.word	0x08005c85
 8005424:	08005c85 	.word	0x08005c85
 8005428:	08005c3f 	.word	0x08005c3f
 800542c:	08005c85 	.word	0x08005c85
 8005430:	08005c85 	.word	0x08005c85
 8005434:	08005c85 	.word	0x08005c85
 8005438:	08005c85 	.word	0x08005c85
 800543c:	08005c85 	.word	0x08005c85
 8005440:	08005c85 	.word	0x08005c85
 8005444:	08005c85 	.word	0x08005c85
 8005448:	08005c85 	.word	0x08005c85
 800544c:	08005c85 	.word	0x08005c85
 8005450:	08005c85 	.word	0x08005c85
 8005454:	08005c85 	.word	0x08005c85
 8005458:	08005c85 	.word	0x08005c85
 800545c:	08005c85 	.word	0x08005c85
 8005460:	08005c85 	.word	0x08005c85
 8005464:	08005c85 	.word	0x08005c85
 8005468:	08005c85 	.word	0x08005c85
 800546c:	08005c85 	.word	0x08005c85
 8005470:	08005c85 	.word	0x08005c85
 8005474:	08005c85 	.word	0x08005c85
 8005478:	08005c85 	.word	0x08005c85
 800547c:	08005c85 	.word	0x08005c85
 8005480:	08005c85 	.word	0x08005c85
 8005484:	08005c85 	.word	0x08005c85
 8005488:	08005c85 	.word	0x08005c85
 800548c:	08005c85 	.word	0x08005c85
 8005490:	08005c85 	.word	0x08005c85
 8005494:	08005c85 	.word	0x08005c85
 8005498:	08005c85 	.word	0x08005c85
 800549c:	08005c85 	.word	0x08005c85
 80054a0:	08005c85 	.word	0x08005c85
 80054a4:	08005c85 	.word	0x08005c85
 80054a8:	08005c85 	.word	0x08005c85
 80054ac:	08005c85 	.word	0x08005c85
 80054b0:	08005c85 	.word	0x08005c85
 80054b4:	08005c85 	.word	0x08005c85
 80054b8:	08005c85 	.word	0x08005c85
 80054bc:	08005c85 	.word	0x08005c85
 80054c0:	08005c85 	.word	0x08005c85
 80054c4:	08005c85 	.word	0x08005c85
 80054c8:	08005c85 	.word	0x08005c85
 80054cc:	08005c85 	.word	0x08005c85
 80054d0:	08005c85 	.word	0x08005c85
 80054d4:	08005c85 	.word	0x08005c85
 80054d8:	08005c85 	.word	0x08005c85
 80054dc:	08005c85 	.word	0x08005c85
 80054e0:	08005c85 	.word	0x08005c85
 80054e4:	08005c85 	.word	0x08005c85
 80054e8:	08005c85 	.word	0x08005c85
 80054ec:	08005c85 	.word	0x08005c85
 80054f0:	08005c85 	.word	0x08005c85
 80054f4:	08005c85 	.word	0x08005c85
 80054f8:	08005c85 	.word	0x08005c85
 80054fc:	08005565 	.word	0x08005565
 8005500:	080055ab 	.word	0x080055ab
 8005504:	080055ef 	.word	0x080055ef
 8005508:	0800562f 	.word	0x0800562f
 800550c:	0800566f 	.word	0x0800566f
 8005510:	080056af 	.word	0x080056af
 8005514:	080056ef 	.word	0x080056ef
 8005518:	0800572f 	.word	0x0800572f
 800551c:	0800576f 	.word	0x0800576f
 8005520:	080057b3 	.word	0x080057b3
 8005524:	080057f3 	.word	0x080057f3
 8005528:	08005833 	.word	0x08005833
 800552c:	08005873 	.word	0x08005873
 8005530:	080058b3 	.word	0x080058b3
 8005534:	080058f3 	.word	0x080058f3
 8005538:	08005933 	.word	0x08005933
 800553c:	08005973 	.word	0x08005973
 8005540:	080059b3 	.word	0x080059b3
 8005544:	080059f3 	.word	0x080059f3
 8005548:	08005a33 	.word	0x08005a33
 800554c:	08005a77 	.word	0x08005a77
 8005550:	08005ab7 	.word	0x08005ab7
 8005554:	08005af7 	.word	0x08005af7
 8005558:	08005b37 	.word	0x08005b37
 800555c:	08005b77 	.word	0x08005b77
 8005560:	08005bbb 	.word	0x08005bbb
			{
			case 'a':
				UB_VGA_SetPixel(x_pos, y_pos, letter_A[i][j]); break;
 8005564:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005568:	f103 031c 	add.w	r3, r3, #28
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	b298      	uxth	r0, r3
 8005570:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005574:	f103 0318 	add.w	r3, r3, #24
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	b299      	uxth	r1, r3
 800557c:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8005580:	f103 0304 	add.w	r3, r3, #4
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	009a      	lsls	r2, r3, #2
 8005588:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4413      	add	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8005596:	f102 0208 	add.w	r2, r2, #8
 800559a:	4413      	add	r3, r2
 800559c:	f853 3cb0 	ldr.w	r3, [r3, #-176]
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	461a      	mov	r2, r3
 80055a4:	f001 fd04 	bl	8006fb0 <UB_VGA_SetPixel>
 80055a8:	e36c      	b.n	8005c84 <letter_select+0x4d60>
			case 'b':
				UB_VGA_SetPixel(x_pos, y_pos, letter_B[i][j]); break;
 80055aa:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80055ae:	f103 031c 	add.w	r3, r3, #28
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	b298      	uxth	r0, r3
 80055b6:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80055ba:	f103 0318 	add.w	r3, r3, #24
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	b29c      	uxth	r4, r3
 80055c2:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80055c6:	f103 0318 	add.w	r3, r3, #24
 80055ca:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80055ce:	f102 0204 	add.w	r2, r2, #4
 80055d2:	6812      	ldr	r2, [r2, #0]
 80055d4:	0091      	lsls	r1, r2, #2
 80055d6:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80055da:	6812      	ldr	r2, [r2, #0]
 80055dc:	440a      	add	r2, r1
 80055de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	461a      	mov	r2, r3
 80055e6:	4621      	mov	r1, r4
 80055e8:	f001 fce2 	bl	8006fb0 <UB_VGA_SetPixel>
 80055ec:	e34a      	b.n	8005c84 <letter_select+0x4d60>
			case 'c':
				UB_VGA_SetPixel(x_pos, y_pos, letter_C[i][j]); break;
 80055ee:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80055f2:	f103 031c 	add.w	r3, r3, #28
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	b298      	uxth	r0, r3
 80055fa:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80055fe:	f103 0318 	add.w	r3, r3, #24
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	b29c      	uxth	r4, r3
 8005606:	f607 73d8 	addw	r3, r7, #4056	; 0xfd8
 800560a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800560e:	f102 0204 	add.w	r2, r2, #4
 8005612:	6812      	ldr	r2, [r2, #0]
 8005614:	0091      	lsls	r1, r2, #2
 8005616:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800561a:	6812      	ldr	r2, [r2, #0]
 800561c:	440a      	add	r2, r1
 800561e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005622:	b2db      	uxtb	r3, r3
 8005624:	461a      	mov	r2, r3
 8005626:	4621      	mov	r1, r4
 8005628:	f001 fcc2 	bl	8006fb0 <UB_VGA_SetPixel>
 800562c:	e32a      	b.n	8005c84 <letter_select+0x4d60>
			case 'd':
				UB_VGA_SetPixel(x_pos, y_pos, letter_D[i][j]); break;
 800562e:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005632:	f103 031c 	add.w	r3, r3, #28
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	b298      	uxth	r0, r3
 800563a:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 800563e:	f103 0318 	add.w	r3, r3, #24
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	b29c      	uxth	r4, r3
 8005646:	f607 7338 	addw	r3, r7, #3896	; 0xf38
 800564a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800564e:	f102 0204 	add.w	r2, r2, #4
 8005652:	6812      	ldr	r2, [r2, #0]
 8005654:	0091      	lsls	r1, r2, #2
 8005656:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800565a:	6812      	ldr	r2, [r2, #0]
 800565c:	440a      	add	r2, r1
 800565e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005662:	b2db      	uxtb	r3, r3
 8005664:	461a      	mov	r2, r3
 8005666:	4621      	mov	r1, r4
 8005668:	f001 fca2 	bl	8006fb0 <UB_VGA_SetPixel>
 800566c:	e30a      	b.n	8005c84 <letter_select+0x4d60>
			case 'e':
				UB_VGA_SetPixel(x_pos, y_pos, letter_E[i][j]); break;
 800566e:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005672:	f103 031c 	add.w	r3, r3, #28
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	b298      	uxth	r0, r3
 800567a:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 800567e:	f103 0318 	add.w	r3, r3, #24
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	b29c      	uxth	r4, r3
 8005686:	f607 6398 	addw	r3, r7, #3736	; 0xe98
 800568a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800568e:	f102 0204 	add.w	r2, r2, #4
 8005692:	6812      	ldr	r2, [r2, #0]
 8005694:	0091      	lsls	r1, r2, #2
 8005696:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800569a:	6812      	ldr	r2, [r2, #0]
 800569c:	440a      	add	r2, r1
 800569e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	461a      	mov	r2, r3
 80056a6:	4621      	mov	r1, r4
 80056a8:	f001 fc82 	bl	8006fb0 <UB_VGA_SetPixel>
 80056ac:	e2ea      	b.n	8005c84 <letter_select+0x4d60>
			case 'f':
				UB_VGA_SetPixel(x_pos, y_pos, letter_F[i][j]); break;
 80056ae:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80056b2:	f103 031c 	add.w	r3, r3, #28
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	b298      	uxth	r0, r3
 80056ba:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80056be:	f103 0318 	add.w	r3, r3, #24
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	b29c      	uxth	r4, r3
 80056c6:	f607 53f8 	addw	r3, r7, #3576	; 0xdf8
 80056ca:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80056ce:	f102 0204 	add.w	r2, r2, #4
 80056d2:	6812      	ldr	r2, [r2, #0]
 80056d4:	0091      	lsls	r1, r2, #2
 80056d6:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80056da:	6812      	ldr	r2, [r2, #0]
 80056dc:	440a      	add	r2, r1
 80056de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	461a      	mov	r2, r3
 80056e6:	4621      	mov	r1, r4
 80056e8:	f001 fc62 	bl	8006fb0 <UB_VGA_SetPixel>
 80056ec:	e2ca      	b.n	8005c84 <letter_select+0x4d60>
			case 'g':
				UB_VGA_SetPixel(x_pos, y_pos, letter_G[i][j]); break;
 80056ee:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80056f2:	f103 031c 	add.w	r3, r3, #28
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	b298      	uxth	r0, r3
 80056fa:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80056fe:	f103 0318 	add.w	r3, r3, #24
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	b29c      	uxth	r4, r3
 8005706:	f607 5358 	addw	r3, r7, #3416	; 0xd58
 800570a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800570e:	f102 0204 	add.w	r2, r2, #4
 8005712:	6812      	ldr	r2, [r2, #0]
 8005714:	0091      	lsls	r1, r2, #2
 8005716:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800571a:	6812      	ldr	r2, [r2, #0]
 800571c:	440a      	add	r2, r1
 800571e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005722:	b2db      	uxtb	r3, r3
 8005724:	461a      	mov	r2, r3
 8005726:	4621      	mov	r1, r4
 8005728:	f001 fc42 	bl	8006fb0 <UB_VGA_SetPixel>
 800572c:	e2aa      	b.n	8005c84 <letter_select+0x4d60>
			case 'h':
				UB_VGA_SetPixel(x_pos, y_pos, letter_H[i][j]); break;
 800572e:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005732:	f103 031c 	add.w	r3, r3, #28
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	b298      	uxth	r0, r3
 800573a:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 800573e:	f103 0318 	add.w	r3, r3, #24
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	b29c      	uxth	r4, r3
 8005746:	f607 43b8 	addw	r3, r7, #3256	; 0xcb8
 800574a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800574e:	f102 0204 	add.w	r2, r2, #4
 8005752:	6812      	ldr	r2, [r2, #0]
 8005754:	0091      	lsls	r1, r2, #2
 8005756:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800575a:	6812      	ldr	r2, [r2, #0]
 800575c:	440a      	add	r2, r1
 800575e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005762:	b2db      	uxtb	r3, r3
 8005764:	461a      	mov	r2, r3
 8005766:	4621      	mov	r1, r4
 8005768:	f001 fc22 	bl	8006fb0 <UB_VGA_SetPixel>
 800576c:	e28a      	b.n	8005c84 <letter_select+0x4d60>
			case 'i':
				UB_VGA_SetPixel(x_pos, y_pos, letter_I[i][j]); break;
 800576e:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005772:	f103 031c 	add.w	r3, r3, #28
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	b298      	uxth	r0, r3
 800577a:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 800577e:	f103 0318 	add.w	r3, r3, #24
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	b29c      	uxth	r4, r3
 8005786:	f507 6144 	add.w	r1, r7, #3136	; 0xc40
 800578a:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800578e:	f103 0304 	add.w	r3, r3, #4
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	4613      	mov	r3, r2
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	4413      	add	r3, r2
 800579a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800579e:	6812      	ldr	r2, [r2, #0]
 80057a0:	4413      	add	r3, r2
 80057a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	461a      	mov	r2, r3
 80057aa:	4621      	mov	r1, r4
 80057ac:	f001 fc00 	bl	8006fb0 <UB_VGA_SetPixel>
 80057b0:	e268      	b.n	8005c84 <letter_select+0x4d60>
			case 'j':
				UB_VGA_SetPixel(x_pos, y_pos, letter_J[i][j]); break;
 80057b2:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80057b6:	f103 031c 	add.w	r3, r3, #28
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	b298      	uxth	r0, r3
 80057be:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80057c2:	f103 0318 	add.w	r3, r3, #24
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	b29c      	uxth	r4, r3
 80057ca:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 80057ce:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80057d2:	f102 0204 	add.w	r2, r2, #4
 80057d6:	6812      	ldr	r2, [r2, #0]
 80057d8:	0091      	lsls	r1, r2, #2
 80057da:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80057de:	6812      	ldr	r2, [r2, #0]
 80057e0:	440a      	add	r2, r1
 80057e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	461a      	mov	r2, r3
 80057ea:	4621      	mov	r1, r4
 80057ec:	f001 fbe0 	bl	8006fb0 <UB_VGA_SetPixel>
 80057f0:	e248      	b.n	8005c84 <letter_select+0x4d60>
			case 'k':
				UB_VGA_SetPixel(x_pos, y_pos, letter_K[i][j]); break;
 80057f2:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80057f6:	f103 031c 	add.w	r3, r3, #28
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	b298      	uxth	r0, r3
 80057fe:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005802:	f103 0318 	add.w	r3, r3, #24
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	b29c      	uxth	r4, r3
 800580a:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800580e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8005812:	f102 0204 	add.w	r2, r2, #4
 8005816:	6812      	ldr	r2, [r2, #0]
 8005818:	0091      	lsls	r1, r2, #2
 800581a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800581e:	6812      	ldr	r2, [r2, #0]
 8005820:	440a      	add	r2, r1
 8005822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005826:	b2db      	uxtb	r3, r3
 8005828:	461a      	mov	r2, r3
 800582a:	4621      	mov	r1, r4
 800582c:	f001 fbc0 	bl	8006fb0 <UB_VGA_SetPixel>
 8005830:	e228      	b.n	8005c84 <letter_select+0x4d60>
			case 'l':
				UB_VGA_SetPixel(x_pos, y_pos, letter_L[i][j]); break;
 8005832:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005836:	f103 031c 	add.w	r3, r3, #28
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	b298      	uxth	r0, r3
 800583e:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005842:	f103 0318 	add.w	r3, r3, #24
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	b29c      	uxth	r4, r3
 800584a:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 800584e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8005852:	f102 0204 	add.w	r2, r2, #4
 8005856:	6812      	ldr	r2, [r2, #0]
 8005858:	0091      	lsls	r1, r2, #2
 800585a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800585e:	6812      	ldr	r2, [r2, #0]
 8005860:	440a      	add	r2, r1
 8005862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005866:	b2db      	uxtb	r3, r3
 8005868:	461a      	mov	r2, r3
 800586a:	4621      	mov	r1, r4
 800586c:	f001 fba0 	bl	8006fb0 <UB_VGA_SetPixel>
 8005870:	e208      	b.n	8005c84 <letter_select+0x4d60>
			case 'm':
				UB_VGA_SetPixel(x_pos, y_pos, letter_M[i][j]); break;
 8005872:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005876:	f103 031c 	add.w	r3, r3, #28
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	b298      	uxth	r0, r3
 800587e:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005882:	f103 0318 	add.w	r3, r3, #24
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	b29c      	uxth	r4, r3
 800588a:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800588e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8005892:	f102 0204 	add.w	r2, r2, #4
 8005896:	6812      	ldr	r2, [r2, #0]
 8005898:	0091      	lsls	r1, r2, #2
 800589a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800589e:	6812      	ldr	r2, [r2, #0]
 80058a0:	440a      	add	r2, r1
 80058a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	461a      	mov	r2, r3
 80058aa:	4621      	mov	r1, r4
 80058ac:	f001 fb80 	bl	8006fb0 <UB_VGA_SetPixel>
 80058b0:	e1e8      	b.n	8005c84 <letter_select+0x4d60>
			case 'n':
				UB_VGA_SetPixel(x_pos, y_pos, letter_N[i][j]); break;
 80058b2:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80058b6:	f103 031c 	add.w	r3, r3, #28
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	b298      	uxth	r0, r3
 80058be:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80058c2:	f103 0318 	add.w	r3, r3, #24
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	b29c      	uxth	r4, r3
 80058ca:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 80058ce:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80058d2:	f102 0204 	add.w	r2, r2, #4
 80058d6:	6812      	ldr	r2, [r2, #0]
 80058d8:	0091      	lsls	r1, r2, #2
 80058da:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80058de:	6812      	ldr	r2, [r2, #0]
 80058e0:	440a      	add	r2, r1
 80058e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	461a      	mov	r2, r3
 80058ea:	4621      	mov	r1, r4
 80058ec:	f001 fb60 	bl	8006fb0 <UB_VGA_SetPixel>
 80058f0:	e1c8      	b.n	8005c84 <letter_select+0x4d60>
			case 'o':
				UB_VGA_SetPixel(x_pos, y_pos, letter_O[i][j]); break;
 80058f2:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80058f6:	f103 031c 	add.w	r3, r3, #28
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	b298      	uxth	r0, r3
 80058fe:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005902:	f103 0318 	add.w	r3, r3, #24
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	b29c      	uxth	r4, r3
 800590a:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800590e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8005912:	f102 0204 	add.w	r2, r2, #4
 8005916:	6812      	ldr	r2, [r2, #0]
 8005918:	0091      	lsls	r1, r2, #2
 800591a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800591e:	6812      	ldr	r2, [r2, #0]
 8005920:	440a      	add	r2, r1
 8005922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005926:	b2db      	uxtb	r3, r3
 8005928:	461a      	mov	r2, r3
 800592a:	4621      	mov	r1, r4
 800592c:	f001 fb40 	bl	8006fb0 <UB_VGA_SetPixel>
 8005930:	e1a8      	b.n	8005c84 <letter_select+0x4d60>
			case 'p':
				UB_VGA_SetPixel(x_pos, y_pos, letter_P[i][j]); break;
 8005932:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005936:	f103 031c 	add.w	r3, r3, #28
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	b298      	uxth	r0, r3
 800593e:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005942:	f103 0318 	add.w	r3, r3, #24
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	b29c      	uxth	r4, r3
 800594a:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800594e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8005952:	f102 0204 	add.w	r2, r2, #4
 8005956:	6812      	ldr	r2, [r2, #0]
 8005958:	0091      	lsls	r1, r2, #2
 800595a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800595e:	6812      	ldr	r2, [r2, #0]
 8005960:	440a      	add	r2, r1
 8005962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005966:	b2db      	uxtb	r3, r3
 8005968:	461a      	mov	r2, r3
 800596a:	4621      	mov	r1, r4
 800596c:	f001 fb20 	bl	8006fb0 <UB_VGA_SetPixel>
 8005970:	e188      	b.n	8005c84 <letter_select+0x4d60>
			case 'q':
				UB_VGA_SetPixel(x_pos, y_pos, letter_Q[i][j]); break;
 8005972:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005976:	f103 031c 	add.w	r3, r3, #28
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	b298      	uxth	r0, r3
 800597e:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005982:	f103 0318 	add.w	r3, r3, #24
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	b29c      	uxth	r4, r3
 800598a:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800598e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8005992:	f102 0204 	add.w	r2, r2, #4
 8005996:	6812      	ldr	r2, [r2, #0]
 8005998:	0091      	lsls	r1, r2, #2
 800599a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 800599e:	6812      	ldr	r2, [r2, #0]
 80059a0:	440a      	add	r2, r1
 80059a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	461a      	mov	r2, r3
 80059aa:	4621      	mov	r1, r4
 80059ac:	f001 fb00 	bl	8006fb0 <UB_VGA_SetPixel>
 80059b0:	e168      	b.n	8005c84 <letter_select+0x4d60>
			case 'r':
				UB_VGA_SetPixel(x_pos, y_pos, letter_R[i][j]); break;
 80059b2:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80059b6:	f103 031c 	add.w	r3, r3, #28
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	b298      	uxth	r0, r3
 80059be:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80059c2:	f103 0318 	add.w	r3, r3, #24
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	b29c      	uxth	r4, r3
 80059ca:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80059ce:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80059d2:	f102 0204 	add.w	r2, r2, #4
 80059d6:	6812      	ldr	r2, [r2, #0]
 80059d8:	0091      	lsls	r1, r2, #2
 80059da:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80059de:	6812      	ldr	r2, [r2, #0]
 80059e0:	440a      	add	r2, r1
 80059e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	461a      	mov	r2, r3
 80059ea:	4621      	mov	r1, r4
 80059ec:	f001 fae0 	bl	8006fb0 <UB_VGA_SetPixel>
 80059f0:	e148      	b.n	8005c84 <letter_select+0x4d60>
			case 's':
				UB_VGA_SetPixel(x_pos, y_pos, letter_S[i][j]); break;
 80059f2:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80059f6:	f103 031c 	add.w	r3, r3, #28
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	b298      	uxth	r0, r3
 80059fe:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005a02:	f103 0318 	add.w	r3, r3, #24
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	b29c      	uxth	r4, r3
 8005a0a:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8005a0e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8005a12:	f102 0204 	add.w	r2, r2, #4
 8005a16:	6812      	ldr	r2, [r2, #0]
 8005a18:	0091      	lsls	r1, r2, #2
 8005a1a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8005a1e:	6812      	ldr	r2, [r2, #0]
 8005a20:	440a      	add	r2, r1
 8005a22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a26:	b2db      	uxtb	r3, r3
 8005a28:	461a      	mov	r2, r3
 8005a2a:	4621      	mov	r1, r4
 8005a2c:	f001 fac0 	bl	8006fb0 <UB_VGA_SetPixel>
 8005a30:	e128      	b.n	8005c84 <letter_select+0x4d60>
			case 't':
				UB_VGA_SetPixel(x_pos, y_pos, letter_T[i][j]); break;
 8005a32:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005a36:	f103 031c 	add.w	r3, r3, #28
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	b298      	uxth	r0, r3
 8005a3e:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005a42:	f103 0318 	add.w	r3, r3, #24
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	b29c      	uxth	r4, r3
 8005a4a:	f507 61a7 	add.w	r1, r7, #1336	; 0x538
 8005a4e:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8005a52:	f103 0304 	add.w	r3, r3, #4
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8005a62:	6812      	ldr	r2, [r2, #0]
 8005a64:	4413      	add	r3, r2
 8005a66:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	4621      	mov	r1, r4
 8005a70:	f001 fa9e 	bl	8006fb0 <UB_VGA_SetPixel>
 8005a74:	e106      	b.n	8005c84 <letter_select+0x4d60>
			case 'u':
				UB_VGA_SetPixel(x_pos, y_pos, letter_U[i][j]); break;
 8005a76:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005a7a:	f103 031c 	add.w	r3, r3, #28
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	b298      	uxth	r0, r3
 8005a82:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005a86:	f103 0318 	add.w	r3, r3, #24
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	b29c      	uxth	r4, r3
 8005a8e:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 8005a92:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8005a96:	f102 0204 	add.w	r2, r2, #4
 8005a9a:	6812      	ldr	r2, [r2, #0]
 8005a9c:	0091      	lsls	r1, r2, #2
 8005a9e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8005aa2:	6812      	ldr	r2, [r2, #0]
 8005aa4:	440a      	add	r2, r1
 8005aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	461a      	mov	r2, r3
 8005aae:	4621      	mov	r1, r4
 8005ab0:	f001 fa7e 	bl	8006fb0 <UB_VGA_SetPixel>
 8005ab4:	e0e6      	b.n	8005c84 <letter_select+0x4d60>
			case 'v':
				UB_VGA_SetPixel(x_pos, y_pos, letter_V[i][j]); break;
 8005ab6:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005aba:	f103 031c 	add.w	r3, r3, #28
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	b298      	uxth	r0, r3
 8005ac2:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005ac6:	f103 0318 	add.w	r3, r3, #24
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	b29c      	uxth	r4, r3
 8005ace:	f507 737e 	add.w	r3, r7, #1016	; 0x3f8
 8005ad2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8005ad6:	f102 0204 	add.w	r2, r2, #4
 8005ada:	6812      	ldr	r2, [r2, #0]
 8005adc:	0091      	lsls	r1, r2, #2
 8005ade:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8005ae2:	6812      	ldr	r2, [r2, #0]
 8005ae4:	440a      	add	r2, r1
 8005ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	461a      	mov	r2, r3
 8005aee:	4621      	mov	r1, r4
 8005af0:	f001 fa5e 	bl	8006fb0 <UB_VGA_SetPixel>
 8005af4:	e0c6      	b.n	8005c84 <letter_select+0x4d60>
			case 'w':
				UB_VGA_SetPixel(x_pos, y_pos, letter_W[i][j]); break;
 8005af6:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005afa:	f103 031c 	add.w	r3, r3, #28
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	b298      	uxth	r0, r3
 8005b02:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005b06:	f103 0318 	add.w	r3, r3, #24
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	b29c      	uxth	r4, r3
 8005b0e:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8005b12:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8005b16:	f102 0204 	add.w	r2, r2, #4
 8005b1a:	6812      	ldr	r2, [r2, #0]
 8005b1c:	0091      	lsls	r1, r2, #2
 8005b1e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8005b22:	6812      	ldr	r2, [r2, #0]
 8005b24:	440a      	add	r2, r1
 8005b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	4621      	mov	r1, r4
 8005b30:	f001 fa3e 	bl	8006fb0 <UB_VGA_SetPixel>
 8005b34:	e0a6      	b.n	8005c84 <letter_select+0x4d60>
			case 'x':
				UB_VGA_SetPixel(x_pos, y_pos, letter_X[i][j]); break;
 8005b36:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005b3a:	f103 031c 	add.w	r3, r3, #28
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	b298      	uxth	r0, r3
 8005b42:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005b46:	f103 0318 	add.w	r3, r3, #24
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	b29c      	uxth	r4, r3
 8005b4e:	f507 732e 	add.w	r3, r7, #696	; 0x2b8
 8005b52:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8005b56:	f102 0204 	add.w	r2, r2, #4
 8005b5a:	6812      	ldr	r2, [r2, #0]
 8005b5c:	0091      	lsls	r1, r2, #2
 8005b5e:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8005b62:	6812      	ldr	r2, [r2, #0]
 8005b64:	440a      	add	r2, r1
 8005b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	4621      	mov	r1, r4
 8005b70:	f001 fa1e 	bl	8006fb0 <UB_VGA_SetPixel>
 8005b74:	e086      	b.n	8005c84 <letter_select+0x4d60>
			case 'y':
				UB_VGA_SetPixel(x_pos, y_pos, letter_Y[i][j]); break;
 8005b76:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005b7a:	f103 031c 	add.w	r3, r3, #28
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	b298      	uxth	r0, r3
 8005b82:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005b86:	f103 0318 	add.w	r3, r3, #24
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	b29c      	uxth	r4, r3
 8005b8e:	f507 71f8 	add.w	r1, r7, #496	; 0x1f0
 8005b92:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8005b96:	f103 0304 	add.w	r3, r3, #4
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8005ba6:	6812      	ldr	r2, [r2, #0]
 8005ba8:	4413      	add	r3, r2
 8005baa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	f001 f9fc 	bl	8006fb0 <UB_VGA_SetPixel>
 8005bb8:	e064      	b.n	8005c84 <letter_select+0x4d60>
			case 'z':
				UB_VGA_SetPixel(x_pos, y_pos, letter_Z[i][j]); break;
 8005bba:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005bbe:	f103 031c 	add.w	r3, r3, #28
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	b298      	uxth	r0, r3
 8005bc6:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005bca:	f103 0318 	add.w	r3, r3, #24
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	b29c      	uxth	r4, r3
 8005bd2:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 8005bd6:	3b18      	subs	r3, #24
 8005bd8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8005bdc:	f102 0204 	add.w	r2, r2, #4
 8005be0:	6812      	ldr	r2, [r2, #0]
 8005be2:	0091      	lsls	r1, r2, #2
 8005be4:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8005be8:	6812      	ldr	r2, [r2, #0]
 8005bea:	440a      	add	r2, r1
 8005bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	f001 f9db 	bl	8006fb0 <UB_VGA_SetPixel>
 8005bfa:	e043      	b.n	8005c84 <letter_select+0x4d60>
			case ' ':
				UB_VGA_SetPixel(x_pos, y_pos, spatie[i][j]); break;
 8005bfc:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005c00:	f103 031c 	add.w	r3, r3, #28
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	b298      	uxth	r0, r3
 8005c08:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005c0c:	f103 0318 	add.w	r3, r3, #24
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	b29c      	uxth	r4, r3
 8005c14:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005c18:	3b18      	subs	r3, #24
 8005c1a:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8005c1e:	f102 0204 	add.w	r2, r2, #4
 8005c22:	6812      	ldr	r2, [r2, #0]
 8005c24:	0091      	lsls	r1, r2, #2
 8005c26:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8005c2a:	6812      	ldr	r2, [r2, #0]
 8005c2c:	440a      	add	r2, r1
 8005c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	461a      	mov	r2, r3
 8005c36:	4621      	mov	r1, r4
 8005c38:	f001 f9ba 	bl	8006fb0 <UB_VGA_SetPixel>
 8005c3c:	e022      	b.n	8005c84 <letter_select+0x4d60>
			case ',':
				UB_VGA_SetPixel(x_pos, y_pos, komma[i][j]); break;
 8005c3e:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005c42:	f103 031c 	add.w	r3, r3, #28
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	b298      	uxth	r0, r3
 8005c4a:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8005c4e:	f103 0318 	add.w	r3, r3, #24
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	b29c      	uxth	r4, r3
 8005c56:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005c5a:	3a14      	subs	r2, #20
 8005c5c:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8005c60:	f103 0304 	add.w	r3, r3, #4
 8005c64:	6819      	ldr	r1, [r3, #0]
 8005c66:	460b      	mov	r3, r1
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	440b      	add	r3, r1
 8005c6c:	f507 518e 	add.w	r1, r7, #4544	; 0x11c0
 8005c70:	6809      	ldr	r1, [r1, #0]
 8005c72:	440b      	add	r3, r1
 8005c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	461a      	mov	r2, r3
 8005c7c:	4621      	mov	r1, r4
 8005c7e:	f001 f997 	bl	8006fb0 <UB_VGA_SetPixel>
 8005c82:	bf00      	nop
		for (int j=0; j<4; j++)
 8005c84:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8005c90:	6013      	str	r3, [r2, #0]
 8005c92:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b03      	cmp	r3, #3
 8005c9a:	f77f ab87 	ble.w	80053ac <letter_select+0x4488>
	for (int i=0; i<10; i++)
 8005c9e:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8005ca2:	f103 0304 	add.w	r3, r3, #4
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 8005cae:	f102 0204 	add.w	r2, r2, #4
 8005cb2:	6013      	str	r3, [r2, #0]
 8005cb4:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8005cb8:	f103 0304 	add.w	r3, r3, #4
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2b09      	cmp	r3, #9
 8005cc0:	f77f ab6e 	ble.w	80053a0 <letter_select+0x447c>
			}
		}
	}
}
 8005cc4:	bf00      	nop
 8005cc6:	f507 578e 	add.w	r7, r7, #4544	; 0x11c0
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd90      	pop	{r4, r7, pc}

08005cd0 <draw_bitmap>:
 * - selected bitmap (0-5)
 * - x1
 * - y1
 * - backcolor = color of last time clearscreen was called
 ***********************************************/
void draw_bitmap (int bitmap_selector, int x, int y, int backcolor) {
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
 8005cdc:	603b      	str	r3, [r7, #0]
					break;
			}
		}
	}
*/
}
 8005cde:	bf00      	nop
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <wait_ms>:

/********************************************//**
 * wait for time_ms
 ***********************************************/
void wait_ms(int time_ms)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b082      	sub	sp, #8
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
	DELAY_ms(time_ms);	// Delay in ms
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f001 f8db 	bl	8006eb0 <DELAY_ms>
}
 8005cfa:	bf00      	nop
 8005cfc:	3708      	adds	r7, #8
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
	...

08005d04 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	73fb      	strb	r3, [r7, #15]
 8005d10:	2300      	movs	r3, #0
 8005d12:	73bb      	strb	r3, [r7, #14]
 8005d14:	230f      	movs	r3, #15
 8005d16:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	78db      	ldrb	r3, [r3, #3]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d039      	beq.n	8005d94 <NVIC_Init+0x90>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8005d20:	4b27      	ldr	r3, [pc, #156]	; (8005dc0 <NVIC_Init+0xbc>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	43db      	mvns	r3, r3
 8005d26:	0a1b      	lsrs	r3, r3, #8
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	f003 0307 	and.w	r3, r3, #7
 8005d2e:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 8005d30:	7bfb      	ldrb	r3, [r7, #15]
 8005d32:	f1c3 0304 	rsb	r3, r3, #4
 8005d36:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8005d38:	7b7a      	ldrb	r2, [r7, #13]
 8005d3a:	7bfb      	ldrb	r3, [r7, #15]
 8005d3c:	fa42 f303 	asr.w	r3, r2, r3
 8005d40:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	785b      	ldrb	r3, [r3, #1]
 8005d46:	461a      	mov	r2, r3
 8005d48:	7bbb      	ldrb	r3, [r7, #14]
 8005d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4e:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	789a      	ldrb	r2, [r3, #2]
 8005d54:	7b7b      	ldrb	r3, [r7, #13]
 8005d56:	4013      	ands	r3, r2
 8005d58:	b2da      	uxtb	r2, r3
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
 8005d62:	011b      	lsls	r3, r3, #4
 8005d64:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8005d66:	4a17      	ldr	r2, [pc, #92]	; (8005dc4 <NVIC_Init+0xc0>)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	7bfa      	ldrb	r2, [r7, #15]
 8005d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005d74:	4a13      	ldr	r2, [pc, #76]	; (8005dc4 <NVIC_Init+0xc0>)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	095b      	lsrs	r3, r3, #5
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	f003 031f 	and.w	r3, r3, #31
 8005d88:	2101      	movs	r1, #1
 8005d8a:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005d8e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8005d92:	e00f      	b.n	8005db4 <NVIC_Init+0xb0>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005d94:	490b      	ldr	r1, [pc, #44]	; (8005dc4 <NVIC_Init+0xc0>)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	095b      	lsrs	r3, r3, #5
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	781b      	ldrb	r3, [r3, #0]
 8005da4:	f003 031f 	and.w	r3, r3, #31
 8005da8:	2201      	movs	r2, #1
 8005daa:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8005dac:	f100 0320 	add.w	r3, r0, #32
 8005db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005db4:	bf00      	nop
 8005db6:	3714      	adds	r7, #20
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr
 8005dc0:	e000ed00 	.word	0xe000ed00
 8005dc4:	e000e100 	.word	0xe000e100

08005dc8 <DMA_DeInit>:
  * @param  DMAy_Streamx: where y can be 1 or 2 to select the DMA and x can be 0
  *         to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_DeInit(DMA_Stream_TypeDef* DMAy_Streamx)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  /* Disable the selected DMAy Streamx */
  DMAy_Streamx->CR &= ~((uint32_t)DMA_SxCR_EN);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f023 0201 	bic.w	r2, r3, #1
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	601a      	str	r2, [r3, #0]

  /* Reset DMAy Streamx control register */
  DMAy_Streamx->CR  = 0;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	601a      	str	r2, [r3, #0]
  
  /* Reset DMAy Streamx Number of Data to Transfer register */
  DMAy_Streamx->NDTR = 0;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	605a      	str	r2, [r3, #4]
  
  /* Reset DMAy Streamx peripheral address register */
  DMAy_Streamx->PAR  = 0;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	609a      	str	r2, [r3, #8]
  
  /* Reset DMAy Streamx memory 0 address register */
  DMAy_Streamx->M0AR = 0;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	60da      	str	r2, [r3, #12]

  /* Reset DMAy Streamx memory 1 address register */
  DMAy_Streamx->M1AR = 0;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	611a      	str	r2, [r3, #16]

  /* Reset DMAy Streamx FIFO control register */
  DMAy_Streamx->FCR = (uint32_t)0x00000021; 
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2221      	movs	r2, #33	; 0x21
 8005dfe:	615a      	str	r2, [r3, #20]

  /* Reset interrupt pending bits for the selected stream */
  if (DMAy_Streamx == DMA1_Stream0)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a46      	ldr	r2, [pc, #280]	; (8005f1c <DMA_DeInit+0x154>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d103      	bne.n	8005e10 <DMA_DeInit+0x48>
  {
    /* Reset interrupt pending bits for DMA1 Stream0 */
    DMA1->LIFCR = DMA_Stream0_IT_MASK;
 8005e08:	4b45      	ldr	r3, [pc, #276]	; (8005f20 <DMA_DeInit+0x158>)
 8005e0a:	223d      	movs	r2, #61	; 0x3d
 8005e0c:	609a      	str	r2, [r3, #8]
    {
      /* Reset interrupt pending bits for DMA2 Stream7 */
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
    }
  }
}
 8005e0e:	e07e      	b.n	8005f0e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream1)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a44      	ldr	r2, [pc, #272]	; (8005f24 <DMA_DeInit+0x15c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d104      	bne.n	8005e22 <DMA_DeInit+0x5a>
    DMA1->LIFCR = DMA_Stream1_IT_MASK;
 8005e18:	4b41      	ldr	r3, [pc, #260]	; (8005f20 <DMA_DeInit+0x158>)
 8005e1a:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8005e1e:	609a      	str	r2, [r3, #8]
}
 8005e20:	e075      	b.n	8005f0e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream2)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a40      	ldr	r2, [pc, #256]	; (8005f28 <DMA_DeInit+0x160>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d104      	bne.n	8005e34 <DMA_DeInit+0x6c>
    DMA1->LIFCR = DMA_Stream2_IT_MASK;
 8005e2a:	4b3d      	ldr	r3, [pc, #244]	; (8005f20 <DMA_DeInit+0x158>)
 8005e2c:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8005e30:	609a      	str	r2, [r3, #8]
}
 8005e32:	e06c      	b.n	8005f0e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream3)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4a3d      	ldr	r2, [pc, #244]	; (8005f2c <DMA_DeInit+0x164>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d104      	bne.n	8005e46 <DMA_DeInit+0x7e>
    DMA1->LIFCR = DMA_Stream3_IT_MASK;
 8005e3c:	4b38      	ldr	r3, [pc, #224]	; (8005f20 <DMA_DeInit+0x158>)
 8005e3e:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8005e42:	609a      	str	r2, [r3, #8]
}
 8005e44:	e063      	b.n	8005f0e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream4)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a39      	ldr	r2, [pc, #228]	; (8005f30 <DMA_DeInit+0x168>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d103      	bne.n	8005e56 <DMA_DeInit+0x8e>
    DMA1->HIFCR = DMA_Stream4_IT_MASK;
 8005e4e:	4b34      	ldr	r3, [pc, #208]	; (8005f20 <DMA_DeInit+0x158>)
 8005e50:	4a38      	ldr	r2, [pc, #224]	; (8005f34 <DMA_DeInit+0x16c>)
 8005e52:	60da      	str	r2, [r3, #12]
}
 8005e54:	e05b      	b.n	8005f0e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream5)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a37      	ldr	r2, [pc, #220]	; (8005f38 <DMA_DeInit+0x170>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d103      	bne.n	8005e66 <DMA_DeInit+0x9e>
    DMA1->HIFCR = DMA_Stream5_IT_MASK;
 8005e5e:	4b30      	ldr	r3, [pc, #192]	; (8005f20 <DMA_DeInit+0x158>)
 8005e60:	4a36      	ldr	r2, [pc, #216]	; (8005f3c <DMA_DeInit+0x174>)
 8005e62:	60da      	str	r2, [r3, #12]
}
 8005e64:	e053      	b.n	8005f0e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream6)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	4a35      	ldr	r2, [pc, #212]	; (8005f40 <DMA_DeInit+0x178>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d103      	bne.n	8005e76 <DMA_DeInit+0xae>
    DMA1->HIFCR = (uint32_t)DMA_Stream6_IT_MASK;
 8005e6e:	4b2c      	ldr	r3, [pc, #176]	; (8005f20 <DMA_DeInit+0x158>)
 8005e70:	4a34      	ldr	r2, [pc, #208]	; (8005f44 <DMA_DeInit+0x17c>)
 8005e72:	60da      	str	r2, [r3, #12]
}
 8005e74:	e04b      	b.n	8005f0e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA1_Stream7)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a33      	ldr	r2, [pc, #204]	; (8005f48 <DMA_DeInit+0x180>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d104      	bne.n	8005e88 <DMA_DeInit+0xc0>
    DMA1->HIFCR = DMA_Stream7_IT_MASK;
 8005e7e:	4b28      	ldr	r3, [pc, #160]	; (8005f20 <DMA_DeInit+0x158>)
 8005e80:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8005e84:	60da      	str	r2, [r3, #12]
}
 8005e86:	e042      	b.n	8005f0e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream0)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a30      	ldr	r2, [pc, #192]	; (8005f4c <DMA_DeInit+0x184>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d103      	bne.n	8005e98 <DMA_DeInit+0xd0>
    DMA2->LIFCR = DMA_Stream0_IT_MASK;
 8005e90:	4b2f      	ldr	r3, [pc, #188]	; (8005f50 <DMA_DeInit+0x188>)
 8005e92:	223d      	movs	r2, #61	; 0x3d
 8005e94:	609a      	str	r2, [r3, #8]
}
 8005e96:	e03a      	b.n	8005f0e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream1)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a2e      	ldr	r2, [pc, #184]	; (8005f54 <DMA_DeInit+0x18c>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d104      	bne.n	8005eaa <DMA_DeInit+0xe2>
    DMA2->LIFCR = DMA_Stream1_IT_MASK;
 8005ea0:	4b2b      	ldr	r3, [pc, #172]	; (8005f50 <DMA_DeInit+0x188>)
 8005ea2:	f44f 6274 	mov.w	r2, #3904	; 0xf40
 8005ea6:	609a      	str	r2, [r3, #8]
}
 8005ea8:	e031      	b.n	8005f0e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream2)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a2a      	ldr	r2, [pc, #168]	; (8005f58 <DMA_DeInit+0x190>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d104      	bne.n	8005ebc <DMA_DeInit+0xf4>
    DMA2->LIFCR = DMA_Stream2_IT_MASK;
 8005eb2:	4b27      	ldr	r3, [pc, #156]	; (8005f50 <DMA_DeInit+0x188>)
 8005eb4:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 8005eb8:	609a      	str	r2, [r3, #8]
}
 8005eba:	e028      	b.n	8005f0e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream3)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a27      	ldr	r2, [pc, #156]	; (8005f5c <DMA_DeInit+0x194>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d104      	bne.n	8005ece <DMA_DeInit+0x106>
    DMA2->LIFCR = DMA_Stream3_IT_MASK;
 8005ec4:	4b22      	ldr	r3, [pc, #136]	; (8005f50 <DMA_DeInit+0x188>)
 8005ec6:	f04f 6274 	mov.w	r2, #255852544	; 0xf400000
 8005eca:	609a      	str	r2, [r3, #8]
}
 8005ecc:	e01f      	b.n	8005f0e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream4)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a23      	ldr	r2, [pc, #140]	; (8005f60 <DMA_DeInit+0x198>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d103      	bne.n	8005ede <DMA_DeInit+0x116>
    DMA2->HIFCR = DMA_Stream4_IT_MASK;
 8005ed6:	4b1e      	ldr	r3, [pc, #120]	; (8005f50 <DMA_DeInit+0x188>)
 8005ed8:	4a16      	ldr	r2, [pc, #88]	; (8005f34 <DMA_DeInit+0x16c>)
 8005eda:	60da      	str	r2, [r3, #12]
}
 8005edc:	e017      	b.n	8005f0e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream5)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a20      	ldr	r2, [pc, #128]	; (8005f64 <DMA_DeInit+0x19c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d103      	bne.n	8005eee <DMA_DeInit+0x126>
    DMA2->HIFCR = DMA_Stream5_IT_MASK;
 8005ee6:	4b1a      	ldr	r3, [pc, #104]	; (8005f50 <DMA_DeInit+0x188>)
 8005ee8:	4a14      	ldr	r2, [pc, #80]	; (8005f3c <DMA_DeInit+0x174>)
 8005eea:	60da      	str	r2, [r3, #12]
}
 8005eec:	e00f      	b.n	8005f0e <DMA_DeInit+0x146>
  else if (DMAy_Streamx == DMA2_Stream6)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a1d      	ldr	r2, [pc, #116]	; (8005f68 <DMA_DeInit+0x1a0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d103      	bne.n	8005efe <DMA_DeInit+0x136>
    DMA2->HIFCR = DMA_Stream6_IT_MASK;
 8005ef6:	4b16      	ldr	r3, [pc, #88]	; (8005f50 <DMA_DeInit+0x188>)
 8005ef8:	4a12      	ldr	r2, [pc, #72]	; (8005f44 <DMA_DeInit+0x17c>)
 8005efa:	60da      	str	r2, [r3, #12]
}
 8005efc:	e007      	b.n	8005f0e <DMA_DeInit+0x146>
    if (DMAy_Streamx == DMA2_Stream7)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a1a      	ldr	r2, [pc, #104]	; (8005f6c <DMA_DeInit+0x1a4>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d103      	bne.n	8005f0e <DMA_DeInit+0x146>
      DMA2->HIFCR = DMA_Stream7_IT_MASK;
 8005f06:	4b12      	ldr	r3, [pc, #72]	; (8005f50 <DMA_DeInit+0x188>)
 8005f08:	f04f 523d 	mov.w	r2, #792723456	; 0x2f400000
 8005f0c:	60da      	str	r2, [r3, #12]
}
 8005f0e:	bf00      	nop
 8005f10:	370c      	adds	r7, #12
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr
 8005f1a:	bf00      	nop
 8005f1c:	40026010 	.word	0x40026010
 8005f20:	40026000 	.word	0x40026000
 8005f24:	40026028 	.word	0x40026028
 8005f28:	40026040 	.word	0x40026040
 8005f2c:	40026058 	.word	0x40026058
 8005f30:	40026070 	.word	0x40026070
 8005f34:	2000003d 	.word	0x2000003d
 8005f38:	40026088 	.word	0x40026088
 8005f3c:	20000f40 	.word	0x20000f40
 8005f40:	400260a0 	.word	0x400260a0
 8005f44:	203d0000 	.word	0x203d0000
 8005f48:	400260b8 	.word	0x400260b8
 8005f4c:	40026410 	.word	0x40026410
 8005f50:	40026400 	.word	0x40026400
 8005f54:	40026428 	.word	0x40026428
 8005f58:	40026440 	.word	0x40026440
 8005f5c:	40026458 	.word	0x40026458
 8005f60:	40026470 	.word	0x40026470
 8005f64:	40026488 	.word	0x40026488
 8005f68:	400264a0 	.word	0x400264a0
 8005f6c:	400264b8 	.word	0x400264b8

08005f70 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	4b25      	ldr	r3, [pc, #148]	; (800601c <DMA_Init+0xac>)
 8005f88:	4013      	ands	r3, r2
 8005f8a:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8005f9a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	699b      	ldr	r3, [r3, #24]
 8005fa0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8005fa6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8005fb2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fb8:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8005fbe:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc4:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f023 0307 	bic.w	r3, r3, #7
 8005fde:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	691a      	ldr	r2, [r3, #16]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	689a      	ldr	r2, [r3, #8]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	60da      	str	r2, [r3, #12]
}
 800600e:	bf00      	nop
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	f01c803f 	.word	0xf01c803f

08006020 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	460b      	mov	r3, r1
 800602a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800602c:	78fb      	ldrb	r3, [r7, #3]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d006      	beq.n	8006040 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f043 0201 	orr.w	r2, r3, #1
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 800603e:	e005      	b.n	800604c <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f023 0201 	bic.w	r2, r3, #1
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	601a      	str	r2, [r3, #0]
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT, FunctionalState NewState)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	4613      	mov	r3, r2
 8006064:	71fb      	strb	r3, [r7, #7]
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  /* Check if the DMA_IT parameter contains a FIFO interrupt */
  if ((DMA_IT & DMA_IT_FE) != 0)
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00f      	beq.n	8006090 <DMA_ITConfig+0x38>
  {
    if (NewState != DISABLE)
 8006070:	79fb      	ldrb	r3, [r7, #7]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d006      	beq.n	8006084 <DMA_ITConfig+0x2c>
    {
      /* Enable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR |= (uint32_t)DMA_IT_FE;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	695b      	ldr	r3, [r3, #20]
 800607a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	615a      	str	r2, [r3, #20]
 8006082:	e005      	b.n	8006090 <DMA_ITConfig+0x38>
    }    
    else 
    {
      /* Disable the selected DMA FIFO interrupts */
      DMAy_Streamx->FCR &= ~(uint32_t)DMA_IT_FE;  
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	615a      	str	r2, [r3, #20]
    }
  }

  /* Check if the DMA_IT parameter contains a Transfer interrupt */
  if (DMA_IT != DMA_IT_FE)
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2b80      	cmp	r3, #128	; 0x80
 8006094:	d014      	beq.n	80060c0 <DMA_ITConfig+0x68>
  {
    if (NewState != DISABLE)
 8006096:	79fb      	ldrb	r3, [r7, #7]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d008      	beq.n	80060ae <DMA_ITConfig+0x56>
    {
      /* Enable the selected DMA transfer interrupts */
      DMAy_Streamx->CR |= (uint32_t)(DMA_IT  & TRANSFER_IT_ENABLE_MASK);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681a      	ldr	r2, [r3, #0]
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	f003 031e 	and.w	r3, r3, #30
 80060a6:	431a      	orrs	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	601a      	str	r2, [r3, #0]
    {
      /* Disable the selected DMA transfer interrupts */
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
    }    
  }
}
 80060ac:	e008      	b.n	80060c0 <DMA_ITConfig+0x68>
      DMAy_Streamx->CR &= ~(uint32_t)(DMA_IT & TRANSFER_IT_ENABLE_MASK);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f003 031e 	and.w	r3, r3, #30
 80060b8:	43db      	mvns	r3, r3
 80060ba:	401a      	ands	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	601a      	str	r2, [r3, #0]
}
 80060c0:	bf00      	nop
 80060c2:	3714      	adds	r7, #20
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <DMA_GetITStatus>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b087      	sub	sp, #28
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 80060d6:	2300      	movs	r3, #0
 80060d8:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0, enablestatus = 0;
 80060da:	2300      	movs	r3, #0
 80060dc:	60fb      	str	r3, [r7, #12]
 80060de:	2300      	movs	r3, #0
 80060e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_IT(DMA_IT));
 
  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a22      	ldr	r2, [pc, #136]	; (8006170 <DMA_GetITStatus+0xa4>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d802      	bhi.n	80060f0 <DMA_GetITStatus+0x24>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 80060ea:	4b22      	ldr	r3, [pc, #136]	; (8006174 <DMA_GetITStatus+0xa8>)
 80060ec:	613b      	str	r3, [r7, #16]
 80060ee:	e001      	b.n	80060f4 <DMA_GetITStatus+0x28>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 80060f0:	4b21      	ldr	r3, [pc, #132]	; (8006178 <DMA_GetITStatus+0xac>)
 80060f2:	613b      	str	r3, [r7, #16]
  }

  /* Check if the interrupt enable bit is in the CR or FCR register */
  if ((DMA_IT & TRANSFER_IT_MASK) != (uint32_t)RESET)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80060fa:	f023 13c3 	bic.w	r3, r3, #12779715	; 0xc300c3
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00a      	beq.n	8006118 <DMA_GetITStatus+0x4c>
  {
    /* Get the interrupt enable position mask in CR register */
    tmpreg = (uint32_t)((DMA_IT >> 11) & TRANSFER_IT_ENABLE_MASK);   
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	0adb      	lsrs	r3, r3, #11
 8006106:	f003 031e 	and.w	r3, r3, #30
 800610a:	60fb      	str	r3, [r7, #12]
    
    /* Check the enable bit in CR register */
    enablestatus = (uint32_t)(DMAy_Streamx->CR & tmpreg);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	4013      	ands	r3, r2
 8006114:	60bb      	str	r3, [r7, #8]
 8006116:	e004      	b.n	8006122 <DMA_GetITStatus+0x56>
  }
  else 
  {
    /* Check the enable bit in FCR register */
    enablestatus = (uint32_t)(DMAy_Streamx->FCR & DMA_IT_FE); 
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	695b      	ldr	r3, [r3, #20]
 800611c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006120:	60bb      	str	r3, [r7, #8]
  }
 
  /* Check if the interrupt pending flag is in LISR or HISR */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d003      	beq.n	8006134 <DMA_GetITStatus+0x68>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR ;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	e002      	b.n	800613a <DMA_GetITStatus+0x6e>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR ;
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	60fb      	str	r3, [r7, #12]
  } 

  /* mask all reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8006140:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8006144:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA interrupt */
  if (((tmpreg & DMA_IT) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	4013      	ands	r3, r2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d005      	beq.n	800615c <DMA_GetITStatus+0x90>
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d002      	beq.n	800615c <DMA_GetITStatus+0x90>
  {
    /* DMA_IT is set */
    bitstatus = SET;
 8006156:	2301      	movs	r3, #1
 8006158:	75fb      	strb	r3, [r7, #23]
 800615a:	e001      	b.n	8006160 <DMA_GetITStatus+0x94>
  }
  else
  {
    /* DMA_IT is reset */
    bitstatus = RESET;
 800615c:	2300      	movs	r3, #0
 800615e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_IT status */
  return  bitstatus;
 8006160:	7dfb      	ldrb	r3, [r7, #23]
}
 8006162:	4618      	mov	r0, r3
 8006164:	371c      	adds	r7, #28
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	4002640f 	.word	0x4002640f
 8006174:	40026000 	.word	0x40026000
 8006178:	40026400 	.word	0x40026400

0800617c <DMA_ClearITPendingBit>:
  *            @arg DMA_IT_FEIFx:  Streamx FIFO error interrupt
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval None
  */
void DMA_ClearITPendingBit(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_IT)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_IT(DMA_IT));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	4a10      	ldr	r2, [pc, #64]	; (80061cc <DMA_ClearITPendingBit+0x50>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d802      	bhi.n	8006194 <DMA_ClearITPendingBit+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 800618e:	4b10      	ldr	r3, [pc, #64]	; (80061d0 <DMA_ClearITPendingBit+0x54>)
 8006190:	60fb      	str	r3, [r7, #12]
 8006192:	e001      	b.n	8006198 <DMA_ClearITPendingBit+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8006194:	4b0f      	ldr	r3, [pc, #60]	; (80061d4 <DMA_ClearITPendingBit+0x58>)
 8006196:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_IT & HIGH_ISR_MASK) != (uint32_t)RESET)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d007      	beq.n	80061b2 <DMA_ClearITPendingBit+0x36>
  {
    /* Set DMAy HIFCR register clear interrupt bits */
    DMAy->HIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80061a8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear interrupt bits */
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
  }   
}
 80061b0:	e006      	b.n	80061c0 <DMA_ClearITPendingBit+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_IT & RESERVED_MASK);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 80061b8:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	6093      	str	r3, [r2, #8]
}
 80061c0:	bf00      	nop
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	4002640f 	.word	0x4002640f
 80061d0:	40026000 	.word	0x40026000
 80061d4:	40026400 	.word	0x40026400

080061d8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80061e2:	2300      	movs	r3, #0
 80061e4:	617b      	str	r3, [r7, #20]
 80061e6:	2300      	movs	r3, #0
 80061e8:	613b      	str	r3, [r7, #16]
 80061ea:	2300      	movs	r3, #0
 80061ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80061ee:	2300      	movs	r3, #0
 80061f0:	617b      	str	r3, [r7, #20]
 80061f2:	e076      	b.n	80062e2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80061f4:	2201      	movs	r2, #1
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	fa02 f303 	lsl.w	r3, r2, r3
 80061fc:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	4013      	ands	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8006208:	68fa      	ldr	r2, [r7, #12]
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	429a      	cmp	r2, r3
 800620e:	d165      	bne.n	80062dc <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	005b      	lsls	r3, r3, #1
 8006218:	2103      	movs	r1, #3
 800621a:	fa01 f303 	lsl.w	r3, r1, r3
 800621e:	43db      	mvns	r3, r3
 8006220:	401a      	ands	r2, r3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	791b      	ldrb	r3, [r3, #4]
 800622e:	4619      	mov	r1, r3
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	fa01 f303 	lsl.w	r3, r1, r3
 8006238:	431a      	orrs	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	791b      	ldrb	r3, [r3, #4]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d003      	beq.n	800624e <GPIO_Init+0x76>
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	791b      	ldrb	r3, [r3, #4]
 800624a:	2b02      	cmp	r3, #2
 800624c:	d12e      	bne.n	80062ac <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	689a      	ldr	r2, [r3, #8]
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	2103      	movs	r1, #3
 8006258:	fa01 f303 	lsl.w	r3, r1, r3
 800625c:	43db      	mvns	r3, r3
 800625e:	401a      	ands	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	689a      	ldr	r2, [r3, #8]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	795b      	ldrb	r3, [r3, #5]
 800626c:	4619      	mov	r1, r3
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	005b      	lsls	r3, r3, #1
 8006272:	fa01 f303 	lsl.w	r3, r1, r3
 8006276:	431a      	orrs	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	b29b      	uxth	r3, r3
 8006284:	4619      	mov	r1, r3
 8006286:	2301      	movs	r3, #1
 8006288:	408b      	lsls	r3, r1
 800628a:	43db      	mvns	r3, r3
 800628c:	401a      	ands	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	683a      	ldr	r2, [r7, #0]
 8006298:	7992      	ldrb	r2, [r2, #6]
 800629a:	4611      	mov	r1, r2
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	b292      	uxth	r2, r2
 80062a0:	fa01 f202 	lsl.w	r2, r1, r2
 80062a4:	b292      	uxth	r2, r2
 80062a6:	431a      	orrs	r2, r3
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	68da      	ldr	r2, [r3, #12]
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	2103      	movs	r1, #3
 80062b8:	fa01 f303 	lsl.w	r3, r1, r3
 80062bc:	43db      	mvns	r3, r3
 80062be:	401a      	ands	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	68da      	ldr	r2, [r3, #12]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	79db      	ldrb	r3, [r3, #7]
 80062cc:	4619      	mov	r1, r3
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	fa01 f303 	lsl.w	r3, r1, r3
 80062d6:	431a      	orrs	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	3301      	adds	r3, #1
 80062e0:	617b      	str	r3, [r7, #20]
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2b0f      	cmp	r3, #15
 80062e6:	d985      	bls.n	80061f4 <GPIO_Init+0x1c>
    }
  }
}
 80062e8:	bf00      	nop
 80062ea:	371c      	adds	r7, #28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_DCMI: Connect DCMI pins to AF13 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	460b      	mov	r3, r1
 80062fe:	807b      	strh	r3, [r7, #2]
 8006300:	4613      	mov	r3, r2
 8006302:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8006304:	2300      	movs	r3, #0
 8006306:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8006308:	2300      	movs	r3, #0
 800630a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800630c:	787a      	ldrb	r2, [r7, #1]
 800630e:	887b      	ldrh	r3, [r7, #2]
 8006310:	f003 0307 	and.w	r3, r3, #7
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	fa02 f303 	lsl.w	r3, r2, r3
 800631a:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 800631c:	887b      	ldrh	r3, [r7, #2]
 800631e:	08db      	lsrs	r3, r3, #3
 8006320:	b29b      	uxth	r3, r3
 8006322:	4618      	mov	r0, r3
 8006324:	887b      	ldrh	r3, [r7, #2]
 8006326:	08db      	lsrs	r3, r3, #3
 8006328:	b29b      	uxth	r3, r3
 800632a:	461a      	mov	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	3208      	adds	r2, #8
 8006330:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006334:	887b      	ldrh	r3, [r7, #2]
 8006336:	f003 0307 	and.w	r3, r3, #7
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	210f      	movs	r1, #15
 800633e:	fa01 f303 	lsl.w	r3, r1, r3
 8006342:	43db      	mvns	r3, r3
 8006344:	ea02 0103 	and.w	r1, r2, r3
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f100 0208 	add.w	r2, r0, #8
 800634e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8006352:	887b      	ldrh	r3, [r7, #2]
 8006354:	08db      	lsrs	r3, r3, #3
 8006356:	b29b      	uxth	r3, r3
 8006358:	461a      	mov	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	3208      	adds	r2, #8
 800635e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	4313      	orrs	r3, r2
 8006366:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8006368:	887b      	ldrh	r3, [r7, #2]
 800636a:	08db      	lsrs	r3, r3, #3
 800636c:	b29b      	uxth	r3, r3
 800636e:	461a      	mov	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	3208      	adds	r2, #8
 8006374:	68b9      	ldr	r1, [r7, #8]
 8006376:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800637a:	bf00      	nop
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
	...

08006388 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8006388:	b480      	push	{r7}
 800638a:	b089      	sub	sp, #36	; 0x24
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8006390:	2300      	movs	r3, #0
 8006392:	61bb      	str	r3, [r7, #24]
 8006394:	2300      	movs	r3, #0
 8006396:	617b      	str	r3, [r7, #20]
 8006398:	2300      	movs	r3, #0
 800639a:	61fb      	str	r3, [r7, #28]
 800639c:	2302      	movs	r3, #2
 800639e:	613b      	str	r3, [r7, #16]
 80063a0:	2300      	movs	r3, #0
 80063a2:	60fb      	str	r3, [r7, #12]
 80063a4:	2302      	movs	r3, #2
 80063a6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80063a8:	4b47      	ldr	r3, [pc, #284]	; (80064c8 <RCC_GetClocksFreq+0x140>)
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f003 030c 	and.w	r3, r3, #12
 80063b0:	61bb      	str	r3, [r7, #24]

  switch (tmp)
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	2b04      	cmp	r3, #4
 80063b6:	d007      	beq.n	80063c8 <RCC_GetClocksFreq+0x40>
 80063b8:	2b08      	cmp	r3, #8
 80063ba:	d009      	beq.n	80063d0 <RCC_GetClocksFreq+0x48>
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d13d      	bne.n	800643c <RCC_GetClocksFreq+0xb4>
  {
    case 0x00:  /* HSI used as system clock source */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a42      	ldr	r2, [pc, #264]	; (80064cc <RCC_GetClocksFreq+0x144>)
 80063c4:	601a      	str	r2, [r3, #0]
      break;
 80063c6:	e03d      	b.n	8006444 <RCC_GetClocksFreq+0xbc>
    case 0x04:  /* HSE used as system clock  source */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4a41      	ldr	r2, [pc, #260]	; (80064d0 <RCC_GetClocksFreq+0x148>)
 80063cc:	601a      	str	r2, [r3, #0]
      break;
 80063ce:	e039      	b.n	8006444 <RCC_GetClocksFreq+0xbc>
    case 0x08:  /* PLL used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLP
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80063d0:	4b3d      	ldr	r3, [pc, #244]	; (80064c8 <RCC_GetClocksFreq+0x140>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	0d9b      	lsrs	r3, r3, #22
 80063d6:	f003 0301 	and.w	r3, r3, #1
 80063da:	60fb      	str	r3, [r7, #12]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063dc:	4b3a      	ldr	r3, [pc, #232]	; (80064c8 <RCC_GetClocksFreq+0x140>)
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063e4:	60bb      	str	r3, [r7, #8]
      
      if (pllsource != 0)
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00c      	beq.n	8006406 <RCC_GetClocksFreq+0x7e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80063ec:	4a38      	ldr	r2, [pc, #224]	; (80064d0 <RCC_GetClocksFreq+0x148>)
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80063f4:	4a34      	ldr	r2, [pc, #208]	; (80064c8 <RCC_GetClocksFreq+0x140>)
 80063f6:	6852      	ldr	r2, [r2, #4]
 80063f8:	0992      	lsrs	r2, r2, #6
 80063fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063fe:	fb02 f303 	mul.w	r3, r2, r3
 8006402:	61fb      	str	r3, [r7, #28]
 8006404:	e00b      	b.n	800641e <RCC_GetClocksFreq+0x96>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8006406:	4a31      	ldr	r2, [pc, #196]	; (80064cc <RCC_GetClocksFreq+0x144>)
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	fbb2 f3f3 	udiv	r3, r2, r3
 800640e:	4a2e      	ldr	r2, [pc, #184]	; (80064c8 <RCC_GetClocksFreq+0x140>)
 8006410:	6852      	ldr	r2, [r2, #4]
 8006412:	0992      	lsrs	r2, r2, #6
 8006414:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006418:	fb02 f303 	mul.w	r3, r2, r3
 800641c:	61fb      	str	r3, [r7, #28]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800641e:	4b2a      	ldr	r3, [pc, #168]	; (80064c8 <RCC_GetClocksFreq+0x140>)
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	0c1b      	lsrs	r3, r3, #16
 8006424:	f003 0303 	and.w	r3, r3, #3
 8006428:	3301      	adds	r3, #1
 800642a:	005b      	lsls	r3, r3, #1
 800642c:	613b      	str	r3, [r7, #16]
      RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800642e:	69fa      	ldr	r2, [r7, #28]
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	fbb2 f2f3 	udiv	r2, r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	601a      	str	r2, [r3, #0]
      break;
 800643a:	e003      	b.n	8006444 <RCC_GetClocksFreq+0xbc>
    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a23      	ldr	r2, [pc, #140]	; (80064cc <RCC_GetClocksFreq+0x144>)
 8006440:	601a      	str	r2, [r3, #0]
      break;
 8006442:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/

  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8006444:	4b20      	ldr	r3, [pc, #128]	; (80064c8 <RCC_GetClocksFreq+0x140>)
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800644c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	091b      	lsrs	r3, r3, #4
 8006452:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8006454:	4a1f      	ldr	r2, [pc, #124]	; (80064d4 <RCC_GetClocksFreq+0x14c>)
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	4413      	add	r3, r2
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	b2db      	uxtb	r3, r3
 800645e:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	40da      	lsrs	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 800646c:	4b16      	ldr	r3, [pc, #88]	; (80064c8 <RCC_GetClocksFreq+0x140>)
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006474:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	0a9b      	lsrs	r3, r3, #10
 800647a:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 800647c:	4a15      	ldr	r2, [pc, #84]	; (80064d4 <RCC_GetClocksFreq+0x14c>)
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	4413      	add	r3, r2
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	b2db      	uxtb	r3, r3
 8006486:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	40da      	lsrs	r2, r3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8006494:	4b0c      	ldr	r3, [pc, #48]	; (80064c8 <RCC_GetClocksFreq+0x140>)
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800649c:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	0b5b      	lsrs	r3, r3, #13
 80064a2:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80064a4:	4a0b      	ldr	r2, [pc, #44]	; (80064d4 <RCC_GetClocksFreq+0x14c>)
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	4413      	add	r3, r2
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	40da      	lsrs	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	60da      	str	r2, [r3, #12]
}
 80064bc:	bf00      	nop
 80064be:	3724      	adds	r7, #36	; 0x24
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr
 80064c8:	40023800 	.word	0x40023800
 80064cc:	00f42400 	.word	0x00f42400
 80064d0:	007a1200 	.word	0x007a1200
 80064d4:	20000000 	.word	0x20000000

080064d8 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	460b      	mov	r3, r1
 80064e2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80064e4:	78fb      	ldrb	r3, [r7, #3]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d006      	beq.n	80064f8 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80064ea:	490a      	ldr	r1, [pc, #40]	; (8006514 <RCC_AHB1PeriphClockCmd+0x3c>)
 80064ec:	4b09      	ldr	r3, [pc, #36]	; (8006514 <RCC_AHB1PeriphClockCmd+0x3c>)
 80064ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80064f6:	e006      	b.n	8006506 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80064f8:	4906      	ldr	r1, [pc, #24]	; (8006514 <RCC_AHB1PeriphClockCmd+0x3c>)
 80064fa:	4b06      	ldr	r3, [pc, #24]	; (8006514 <RCC_AHB1PeriphClockCmd+0x3c>)
 80064fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	43db      	mvns	r3, r3
 8006502:	4013      	ands	r3, r2
 8006504:	630b      	str	r3, [r1, #48]	; 0x30
}
 8006506:	bf00      	nop
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	40023800 	.word	0x40023800

08006518 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	460b      	mov	r3, r1
 8006522:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006524:	78fb      	ldrb	r3, [r7, #3]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d006      	beq.n	8006538 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800652a:	490a      	ldr	r1, [pc, #40]	; (8006554 <RCC_APB1PeriphClockCmd+0x3c>)
 800652c:	4b09      	ldr	r3, [pc, #36]	; (8006554 <RCC_APB1PeriphClockCmd+0x3c>)
 800652e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4313      	orrs	r3, r2
 8006534:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8006536:	e006      	b.n	8006546 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8006538:	4906      	ldr	r1, [pc, #24]	; (8006554 <RCC_APB1PeriphClockCmd+0x3c>)
 800653a:	4b06      	ldr	r3, [pc, #24]	; (8006554 <RCC_APB1PeriphClockCmd+0x3c>)
 800653c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	43db      	mvns	r3, r3
 8006542:	4013      	ands	r3, r2
 8006544:	640b      	str	r3, [r1, #64]	; 0x40
}
 8006546:	bf00      	nop
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	40023800 	.word	0x40023800

08006558 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	460b      	mov	r3, r1
 8006562:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8006564:	78fb      	ldrb	r3, [r7, #3]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d006      	beq.n	8006578 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800656a:	490a      	ldr	r1, [pc, #40]	; (8006594 <RCC_APB2PeriphClockCmd+0x3c>)
 800656c:	4b09      	ldr	r3, [pc, #36]	; (8006594 <RCC_APB2PeriphClockCmd+0x3c>)
 800656e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4313      	orrs	r3, r2
 8006574:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8006576:	e006      	b.n	8006586 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8006578:	4906      	ldr	r1, [pc, #24]	; (8006594 <RCC_APB2PeriphClockCmd+0x3c>)
 800657a:	4b06      	ldr	r3, [pc, #24]	; (8006594 <RCC_APB2PeriphClockCmd+0x3c>)
 800657c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	43db      	mvns	r3, r3
 8006582:	4013      	ands	r3, r2
 8006584:	644b      	str	r3, [r1, #68]	; 0x44
}
 8006586:	bf00      	nop
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	40023800 	.word	0x40023800

08006598 <TIM_TimeBaseInit>:
  * @param  TIM_TimeBaseInitStruct: pointer to a TIM_TimeBaseInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80065a2:	2300      	movs	r3, #0
 80065a4:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	881b      	ldrh	r3, [r3, #0]
 80065aa:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)||
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a29      	ldr	r2, [pc, #164]	; (8006654 <TIM_TimeBaseInit+0xbc>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d013      	beq.n	80065dc <TIM_TimeBaseInit+0x44>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a28      	ldr	r2, [pc, #160]	; (8006658 <TIM_TimeBaseInit+0xc0>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d00f      	beq.n	80065dc <TIM_TimeBaseInit+0x44>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c2:	d00b      	beq.n	80065dc <TIM_TimeBaseInit+0x44>
     (TIMx == TIM2) || (TIMx == TIM3)||
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a25      	ldr	r2, [pc, #148]	; (800665c <TIM_TimeBaseInit+0xc4>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d007      	beq.n	80065dc <TIM_TimeBaseInit+0x44>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a24      	ldr	r2, [pc, #144]	; (8006660 <TIM_TimeBaseInit+0xc8>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d003      	beq.n	80065dc <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a23      	ldr	r2, [pc, #140]	; (8006664 <TIM_TimeBaseInit+0xcc>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d108      	bne.n	80065ee <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~(TIM_CR1_DIR | TIM_CR1_CMS));
 80065dc:	89fb      	ldrh	r3, [r7, #14]
 80065de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065e2:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	885a      	ldrh	r2, [r3, #2]
 80065e8:	89fb      	ldrh	r3, [r7, #14]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a1d      	ldr	r2, [pc, #116]	; (8006668 <TIM_TimeBaseInit+0xd0>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d00c      	beq.n	8006610 <TIM_TimeBaseInit+0x78>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a1c      	ldr	r2, [pc, #112]	; (800666c <TIM_TimeBaseInit+0xd4>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d008      	beq.n	8006610 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &=  (uint16_t)(~TIM_CR1_CKD);
 80065fe:	89fb      	ldrh	r3, [r7, #14]
 8006600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006604:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	891a      	ldrh	r2, [r3, #8]
 800660a:	89fb      	ldrh	r3, [r7, #14]
 800660c:	4313      	orrs	r3, r2
 800660e:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	89fa      	ldrh	r2, [r7, #14]
 8006614:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	685a      	ldr	r2, [r3, #4]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	881a      	ldrh	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8))  
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a0a      	ldr	r2, [pc, #40]	; (8006654 <TIM_TimeBaseInit+0xbc>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d003      	beq.n	8006636 <TIM_TimeBaseInit+0x9e>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a09      	ldr	r2, [pc, #36]	; (8006658 <TIM_TimeBaseInit+0xc0>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d104      	bne.n	8006640 <TIM_TimeBaseInit+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	7a9b      	ldrb	r3, [r3, #10]
 800663a:	b29a      	uxth	r2, r3
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;          
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	829a      	strh	r2, [r3, #20]
}
 8006646:	bf00      	nop
 8006648:	3714      	adds	r7, #20
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	40010000 	.word	0x40010000
 8006658:	40010400 	.word	0x40010400
 800665c:	40000400 	.word	0x40000400
 8006660:	40000800 	.word	0x40000800
 8006664:	40000c00 	.word	0x40000c00
 8006668:	40001000 	.word	0x40001000
 800666c:	40001400 	.word	0x40001400

08006670 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	460b      	mov	r3, r1
 800667a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800667c:	78fb      	ldrb	r3, [r7, #3]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d008      	beq.n	8006694 <TIM_ARRPreloadConfig+0x24>
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	b29b      	uxth	r3, r3
 8006688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800668c:	b29a      	uxth	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
  }
}
 8006692:	e007      	b.n	80066a4 <TIM_ARRPreloadConfig+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_ARPE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	881b      	ldrh	r3, [r3, #0]
 8006698:	b29b      	uxth	r3, r3
 800669a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800669e:	b29a      	uxth	r2, r3
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	801a      	strh	r2, [r3, #0]
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	460b      	mov	r3, r1
 80066ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80066bc:	78fb      	ldrb	r3, [r7, #3]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d008      	beq.n	80066d4 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	881b      	ldrh	r3, [r3, #0]
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	f043 0301 	orr.w	r3, r3, #1
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
  }
}
 80066d2:	e007      	b.n	80066e4 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)~TIM_CR1_CEN;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	b29b      	uxth	r3, r3
 80066da:	f023 0301 	bic.w	r3, r3, #1
 80066de:	b29a      	uxth	r2, r3
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	801a      	strh	r2, [r3, #0]
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 80066fa:	2300      	movs	r3, #0
 80066fc:	817b      	strh	r3, [r7, #10]
 80066fe:	2300      	movs	r3, #0
 8006700:	81fb      	strh	r3, [r7, #14]
 8006702:	2300      	movs	r3, #0
 8006704:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC3E;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	8c1b      	ldrh	r3, [r3, #32]
 800670a:	b29b      	uxth	r3, r3
 800670c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006710:	b29a      	uxth	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	8c1b      	ldrh	r3, [r3, #32]
 800671a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	889b      	ldrh	r3, [r3, #4]
 8006720:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	8b9b      	ldrh	r3, [r3, #28]
 8006726:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC3M;
 8006728:	897b      	ldrh	r3, [r7, #10]
 800672a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800672e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC3S;  
 8006730:	897b      	ldrh	r3, [r7, #10]
 8006732:	f023 0303 	bic.w	r3, r3, #3
 8006736:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	881a      	ldrh	r2, [r3, #0]
 800673c:	897b      	ldrh	r3, [r7, #10]
 800673e:	4313      	orrs	r3, r2
 8006740:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC3P;
 8006742:	89fb      	ldrh	r3, [r7, #14]
 8006744:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006748:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	899b      	ldrh	r3, [r3, #12]
 800674e:	021b      	lsls	r3, r3, #8
 8006750:	b29a      	uxth	r2, r3
 8006752:	89fb      	ldrh	r3, [r7, #14]
 8006754:	4313      	orrs	r3, r2
 8006756:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	885b      	ldrh	r3, [r3, #2]
 800675c:	021b      	lsls	r3, r3, #8
 800675e:	b29a      	uxth	r2, r3
 8006760:	89fb      	ldrh	r3, [r7, #14]
 8006762:	4313      	orrs	r3, r2
 8006764:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a22      	ldr	r2, [pc, #136]	; (80067f4 <TIM_OC3Init+0x104>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d003      	beq.n	8006776 <TIM_OC3Init+0x86>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	4a21      	ldr	r2, [pc, #132]	; (80067f8 <TIM_OC3Init+0x108>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d12b      	bne.n	80067ce <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NP;
 8006776:	89fb      	ldrh	r3, [r7, #14]
 8006778:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800677c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	89db      	ldrh	r3, [r3, #14]
 8006782:	021b      	lsls	r3, r3, #8
 8006784:	b29a      	uxth	r2, r3
 8006786:	89fb      	ldrh	r3, [r7, #14]
 8006788:	4313      	orrs	r3, r2
 800678a:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)~TIM_CCER_CC3NE;
 800678c:	89fb      	ldrh	r3, [r7, #14]
 800678e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006792:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	889b      	ldrh	r3, [r3, #4]
 8006798:	021b      	lsls	r3, r3, #8
 800679a:	b29a      	uxth	r2, r3
 800679c:	89fb      	ldrh	r3, [r7, #14]
 800679e:	4313      	orrs	r3, r2
 80067a0:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3;
 80067a2:	89bb      	ldrh	r3, [r7, #12]
 80067a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067a8:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)~TIM_CR2_OIS3N;
 80067aa:	89bb      	ldrh	r3, [r7, #12]
 80067ac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067b0:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	8a1b      	ldrh	r3, [r3, #16]
 80067b6:	011b      	lsls	r3, r3, #4
 80067b8:	b29a      	uxth	r2, r3
 80067ba:	89bb      	ldrh	r3, [r7, #12]
 80067bc:	4313      	orrs	r3, r2
 80067be:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	8a5b      	ldrh	r3, [r3, #18]
 80067c4:	011b      	lsls	r3, r3, #4
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	89bb      	ldrh	r3, [r7, #12]
 80067ca:	4313      	orrs	r3, r2
 80067cc:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	89ba      	ldrh	r2, [r7, #12]
 80067d2:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	897a      	ldrh	r2, [r7, #10]
 80067d8:	839a      	strh	r2, [r3, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	689a      	ldr	r2, [r3, #8]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	63da      	str	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	89fa      	ldrh	r2, [r7, #14]
 80067e6:	841a      	strh	r2, [r3, #32]
}
 80067e8:	bf00      	nop
 80067ea:	3714      	adds	r7, #20
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	40010000 	.word	0x40010000
 80067f8:	40010400 	.word	0x40010400

080067fc <TIM_OC4Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure that contains
  *         the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 8006806:	2300      	movs	r3, #0
 8006808:	81bb      	strh	r3, [r7, #12]
 800680a:	2300      	movs	r3, #0
 800680c:	817b      	strh	r3, [r7, #10]
 800680e:	2300      	movs	r3, #0
 8006810:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~TIM_CCER_CC4E;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	8c1b      	ldrh	r3, [r3, #32]
 8006816:	b29b      	uxth	r3, r3
 8006818:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800681c:	b29a      	uxth	r2, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	8c1b      	ldrh	r3, [r3, #32]
 8006826:	817b      	strh	r3, [r7, #10]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	889b      	ldrh	r3, [r3, #4]
 800682c:	81fb      	strh	r3, [r7, #14]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	8b9b      	ldrh	r3, [r3, #28]
 8006832:	81bb      	strh	r3, [r7, #12]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)~TIM_CCMR2_OC4M;
 8006834:	89bb      	ldrh	r3, [r7, #12]
 8006836:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800683a:	81bb      	strh	r3, [r7, #12]
  tmpccmrx &= (uint16_t)~TIM_CCMR2_CC4S;
 800683c:	89bb      	ldrh	r3, [r7, #12]
 800683e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006842:	81bb      	strh	r3, [r7, #12]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	881b      	ldrh	r3, [r3, #0]
 8006848:	021b      	lsls	r3, r3, #8
 800684a:	b29a      	uxth	r2, r3
 800684c:	89bb      	ldrh	r3, [r7, #12]
 800684e:	4313      	orrs	r3, r2
 8006850:	81bb      	strh	r3, [r7, #12]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)~TIM_CCER_CC4P;
 8006852:	897b      	ldrh	r3, [r7, #10]
 8006854:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006858:	817b      	strh	r3, [r7, #10]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	899b      	ldrh	r3, [r3, #12]
 800685e:	031b      	lsls	r3, r3, #12
 8006860:	b29a      	uxth	r2, r3
 8006862:	897b      	ldrh	r3, [r7, #10]
 8006864:	4313      	orrs	r3, r2
 8006866:	817b      	strh	r3, [r7, #10]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	885b      	ldrh	r3, [r3, #2]
 800686c:	031b      	lsls	r3, r3, #12
 800686e:	b29a      	uxth	r2, r3
 8006870:	897b      	ldrh	r3, [r7, #10]
 8006872:	4313      	orrs	r3, r2
 8006874:	817b      	strh	r3, [r7, #10]
  
  if((TIMx == TIM1) || (TIMx == TIM8))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a12      	ldr	r2, [pc, #72]	; (80068c4 <TIM_OC4Init+0xc8>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d003      	beq.n	8006886 <TIM_OC4Init+0x8a>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a11      	ldr	r2, [pc, #68]	; (80068c8 <TIM_OC4Init+0xcc>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d10a      	bne.n	800689c <TIM_OC4Init+0xa0>
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &=(uint16_t) ~TIM_CR2_OIS4;
 8006886:	89fb      	ldrh	r3, [r7, #14]
 8006888:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800688c:	81fb      	strh	r3, [r7, #14]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	8a1b      	ldrh	r3, [r3, #16]
 8006892:	019b      	lsls	r3, r3, #6
 8006894:	b29a      	uxth	r2, r3
 8006896:	89fb      	ldrh	r3, [r7, #14]
 8006898:	4313      	orrs	r3, r2
 800689a:	81fb      	strh	r3, [r7, #14]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	89fa      	ldrh	r2, [r7, #14]
 80068a0:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	89ba      	ldrh	r2, [r7, #12]
 80068a6:	839a      	strh	r2, [r3, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	689a      	ldr	r2, [r3, #8]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	897a      	ldrh	r2, [r7, #10]
 80068b4:	841a      	strh	r2, [r3, #32]
}
 80068b6:	bf00      	nop
 80068b8:	3714      	adds	r7, #20
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	40010000 	.word	0x40010000
 80068c8:	40010400 	.word	0x40010400

080068cc <TIM_OC3PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC3PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	460b      	mov	r3, r1
 80068d6:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 80068d8:	2300      	movs	r3, #0
 80068da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	8b9b      	ldrh	r3, [r3, #28]
 80068e0:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC3PE);
 80068e2:	89fb      	ldrh	r3, [r7, #14]
 80068e4:	f023 0308 	bic.w	r3, r3, #8
 80068e8:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 80068ea:	89fa      	ldrh	r2, [r7, #14]
 80068ec:	887b      	ldrh	r3, [r7, #2]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	89fa      	ldrh	r2, [r7, #14]
 80068f6:	839a      	strh	r2, [r3, #28]
}
 80068f8:	bf00      	nop
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <TIM_OC4PreloadConfig>:
  *            @arg TIM_OCPreload_Enable
  *            @arg TIM_OCPreload_Disable
  * @retval None
  */
void TIM_OC4PreloadConfig(TIM_TypeDef* TIMx, uint16_t TIM_OCPreload)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	460b      	mov	r3, r1
 800690e:	807b      	strh	r3, [r7, #2]
  uint16_t tmpccmr2 = 0;
 8006910:	2300      	movs	r3, #0
 8006912:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));

  tmpccmr2 = TIMx->CCMR2;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	8b9b      	ldrh	r3, [r3, #28]
 8006918:	81fb      	strh	r3, [r7, #14]

  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)(~TIM_CCMR2_OC4PE);
 800691a:	89fb      	ldrh	r3, [r7, #14]
 800691c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006920:	81fb      	strh	r3, [r7, #14]

  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8006922:	887b      	ldrh	r3, [r7, #2]
 8006924:	021b      	lsls	r3, r3, #8
 8006926:	b29a      	uxth	r2, r3
 8006928:	89fb      	ldrh	r3, [r7, #14]
 800692a:	4313      	orrs	r3, r2
 800692c:	81fb      	strh	r3, [r7, #14]

  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	89fa      	ldrh	r2, [r7, #14]
 8006932:	839a      	strh	r2, [r3, #28]
}
 8006934:	bf00      	nop
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	460b      	mov	r3, r1
 800694a:	807b      	strh	r3, [r7, #2]
 800694c:	4613      	mov	r3, r2
 800694e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006950:	787b      	ldrb	r3, [r7, #1]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d008      	beq.n	8006968 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	899b      	ldrh	r3, [r3, #12]
 800695a:	b29a      	uxth	r2, r3
 800695c:	887b      	ldrh	r3, [r7, #2]
 800695e:	4313      	orrs	r3, r2
 8006960:	b29a      	uxth	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8006966:	e009      	b.n	800697c <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	899b      	ldrh	r3, [r3, #12]
 800696c:	b29a      	uxth	r2, r3
 800696e:	887b      	ldrh	r3, [r7, #2]
 8006970:	43db      	mvns	r3, r3
 8006972:	b29b      	uxth	r3, r3
 8006974:	4013      	ands	r3, r2
 8006976:	b29a      	uxth	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	819a      	strh	r2, [r3, #12]
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <TIM_ClearITPendingBit>:
  * @note   TIM_IT_COM and TIM_IT_Break are used only with TIM1 and TIM8.
  *      
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	460b      	mov	r3, r1
 8006992:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));

  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8006994:	887b      	ldrh	r3, [r7, #2]
 8006996:	43db      	mvns	r3, r3
 8006998:	b29a      	uxth	r2, r3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	821a      	strh	r2, [r3, #16]
}
 800699e:	bf00      	nop
 80069a0:	370c      	adds	r7, #12
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 80069aa:	b480      	push	{r7}
 80069ac:	b083      	sub	sp, #12
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
 80069b2:	460b      	mov	r3, r1
 80069b4:	807b      	strh	r3, [r7, #2]
 80069b6:	4613      	mov	r3, r2
 80069b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx)); 
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80069ba:	787b      	ldrb	r3, [r7, #1]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d008      	beq.n	80069d2 <TIM_DMACmd+0x28>
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	899b      	ldrh	r3, [r3, #12]
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	887b      	ldrh	r3, [r7, #2]
 80069c8:	4313      	orrs	r3, r2
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
  }
}
 80069d0:	e009      	b.n	80069e6 <TIM_DMACmd+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	899b      	ldrh	r3, [r3, #12]
 80069d6:	b29a      	uxth	r2, r3
 80069d8:	887b      	ldrh	r3, [r7, #2]
 80069da:	43db      	mvns	r3, r3
 80069dc:	b29b      	uxth	r3, r3
 80069de:	4013      	ands	r3, r2
 80069e0:	b29a      	uxth	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	819a      	strh	r2, [r3, #12]
}
 80069e6:	bf00      	nop
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
	...

080069f4 <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b08a      	sub	sp, #40	; 0x28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80069fe:	2300      	movs	r3, #0
 8006a00:	627b      	str	r3, [r7, #36]	; 0x24
 8006a02:	2300      	movs	r3, #0
 8006a04:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8006a06:	2300      	movs	r3, #0
 8006a08:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	8a1b      	ldrh	r3, [r3, #16]
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8006a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a18:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006a1c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	88db      	ldrh	r3, [r3, #6]
 8006a22:	461a      	mov	r2, r3
 8006a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a26:	4313      	orrs	r3, r2
 8006a28:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	899b      	ldrh	r3, [r3, #12]
 8006a36:	b29b      	uxth	r3, r3
 8006a38:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006a40:	f023 030c 	bic.w	r3, r3, #12
 8006a44:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	889a      	ldrh	r2, [r3, #4]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	891b      	ldrh	r3, [r3, #8]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8006a56:	4313      	orrs	r3, r2
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	8a9b      	ldrh	r3, [r3, #20]
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a78:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	899b      	ldrh	r3, [r3, #12]
 8006a7e:	461a      	mov	r2, r3
 8006a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a82:	4313      	orrs	r3, r2
 8006a84:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	b29a      	uxth	r2, r3
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8006a8e:	f107 0308 	add.w	r3, r7, #8
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7ff fc78 	bl	8006388 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a30      	ldr	r2, [pc, #192]	; (8006b5c <USART_Init+0x168>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d003      	beq.n	8006aa8 <USART_Init+0xb4>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a2f      	ldr	r2, [pc, #188]	; (8006b60 <USART_Init+0x16c>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d102      	bne.n	8006aae <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	623b      	str	r3, [r7, #32]
 8006aac:	e001      	b.n	8006ab2 <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	899b      	ldrh	r3, [r3, #12]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	b21b      	sxth	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	da0c      	bge.n	8006ad8 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8006abe:	6a3a      	ldr	r2, [r7, #32]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	009b      	lsls	r3, r3, #2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	009a      	lsls	r2, r3, #2
 8006ac8:	441a      	add	r2, r3
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	005b      	lsls	r3, r3, #1
 8006ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ad4:	61fb      	str	r3, [r7, #28]
 8006ad6:	e00b      	b.n	8006af0 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8006ad8:	6a3a      	ldr	r2, [r7, #32]
 8006ada:	4613      	mov	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4413      	add	r3, r2
 8006ae0:	009a      	lsls	r2, r3, #2
 8006ae2:	441a      	add	r2, r3
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aee:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	4a1c      	ldr	r2, [pc, #112]	; (8006b64 <USART_Init+0x170>)
 8006af4:	fba2 2303 	umull	r2, r3, r2, r3
 8006af8:	095b      	lsrs	r3, r3, #5
 8006afa:	011b      	lsls	r3, r3, #4
 8006afc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8006afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b00:	091b      	lsrs	r3, r3, #4
 8006b02:	2264      	movs	r2, #100	; 0x64
 8006b04:	fb02 f303 	mul.w	r3, r2, r3
 8006b08:	69fa      	ldr	r2, [r7, #28]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	899b      	ldrh	r3, [r3, #12]
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	b21b      	sxth	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	da0c      	bge.n	8006b34 <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	00db      	lsls	r3, r3, #3
 8006b1e:	3332      	adds	r3, #50	; 0x32
 8006b20:	4a10      	ldr	r2, [pc, #64]	; (8006b64 <USART_Init+0x170>)
 8006b22:	fba2 2303 	umull	r2, r3, r2, r3
 8006b26:	095b      	lsrs	r3, r3, #5
 8006b28:	f003 0307 	and.w	r3, r3, #7
 8006b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	627b      	str	r3, [r7, #36]	; 0x24
 8006b32:	e00b      	b.n	8006b4c <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8006b34:	69bb      	ldr	r3, [r7, #24]
 8006b36:	011b      	lsls	r3, r3, #4
 8006b38:	3332      	adds	r3, #50	; 0x32
 8006b3a:	4a0a      	ldr	r2, [pc, #40]	; (8006b64 <USART_Init+0x170>)
 8006b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b40:	095b      	lsrs	r3, r3, #5
 8006b42:	f003 030f 	and.w	r3, r3, #15
 8006b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	811a      	strh	r2, [r3, #8]
}
 8006b54:	bf00      	nop
 8006b56:	3728      	adds	r7, #40	; 0x28
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}
 8006b5c:	40011000 	.word	0x40011000
 8006b60:	40011400 	.word	0x40011400
 8006b64:	51eb851f 	.word	0x51eb851f

08006b68 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b083      	sub	sp, #12
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	460b      	mov	r3, r1
 8006b72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8006b74:	78fb      	ldrb	r3, [r7, #3]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d008      	beq.n	8006b8c <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	899b      	ldrh	r3, [r3, #12]
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8006b8a:	e007      	b.n	8006b9c <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	899b      	ldrh	r3, [r3, #12]
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b96:	b29a      	uxth	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	819a      	strh	r2, [r3, #12]
}
 8006b9c:	bf00      	nop
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8006bb4:	887b      	ldrh	r3, [r7, #2]
 8006bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	809a      	strh	r2, [r3, #4]
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b087      	sub	sp, #28
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	807b      	strh	r3, [r7, #2]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	613b      	str	r3, [r7, #16]
 8006be0:	2300      	movs	r3, #0
 8006be2:	60fb      	str	r3, [r7, #12]
 8006be4:	2300      	movs	r3, #0
 8006be6:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8006be8:	2300      	movs	r3, #0
 8006bea:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8006bf0:	887b      	ldrh	r3, [r7, #2]
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	095b      	lsrs	r3, r3, #5
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8006bfa:	887b      	ldrh	r3, [r7, #2]
 8006bfc:	f003 031f 	and.w	r3, r3, #31
 8006c00:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8006c02:	2201      	movs	r2, #1
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0a:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d103      	bne.n	8006c1a <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	330c      	adds	r3, #12
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	e009      	b.n	8006c2e <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d103      	bne.n	8006c28 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	3310      	adds	r3, #16
 8006c24:	617b      	str	r3, [r7, #20]
 8006c26:	e002      	b.n	8006c2e <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	3314      	adds	r3, #20
 8006c2c:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8006c2e:	787b      	ldrb	r3, [r7, #1]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d006      	beq.n	8006c42 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	6811      	ldr	r1, [r2, #0]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	430a      	orrs	r2, r1
 8006c3e:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8006c40:	e006      	b.n	8006c50 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	6811      	ldr	r1, [r2, #0]
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	43d2      	mvns	r2, r2
 8006c4c:	400a      	ands	r2, r1
 8006c4e:	601a      	str	r2, [r3, #0]
}
 8006c50:	bf00      	nop
 8006c52:	371c      	adds	r7, #28
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	460b      	mov	r3, r1
 8006c66:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	887b      	ldrh	r3, [r7, #2]
 8006c74:	4013      	ands	r3, r2
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d002      	beq.n	8006c82 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	73fb      	strb	r3, [r7, #15]
 8006c80:	e001      	b.n	8006c86 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8006c82:	2300      	movs	r3, #0
 8006c84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3714      	adds	r7, #20
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <USART_GetITStatus>:
  *            @arg USART_IT_FE:   Framing Error interrupt
  *            @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b087      	sub	sp, #28
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	617b      	str	r3, [r7, #20]
 8006ca8:	2300      	movs	r3, #0
 8006caa:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8006cac:	2300      	movs	r3, #0
 8006cae:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8006cb0:	887b      	ldrh	r3, [r7, #2]
 8006cb2:	b2db      	uxtb	r3, r3
 8006cb4:	095b      	lsrs	r3, r3, #5
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8006cba:	887b      	ldrh	r3, [r7, #2]
 8006cbc:	f003 031f 	and.w	r3, r3, #31
 8006cc0:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8006cca:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d107      	bne.n	8006ce2 <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	899b      	ldrh	r3, [r3, #12]
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	461a      	mov	r2, r3
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	4013      	ands	r3, r2
 8006cde:	617b      	str	r3, [r7, #20]
 8006ce0:	e011      	b.n	8006d06 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	2b02      	cmp	r3, #2
 8006ce6:	d107      	bne.n	8006cf8 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	8a1b      	ldrh	r3, [r3, #16]
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	461a      	mov	r2, r3
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	617b      	str	r3, [r7, #20]
 8006cf6:	e006      	b.n	8006d06 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	8a9b      	ldrh	r3, [r3, #20]
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	461a      	mov	r2, r3
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	4013      	ands	r3, r2
 8006d04:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8006d06:	887b      	ldrh	r3, [r7, #2]
 8006d08:	0a1b      	lsrs	r3, r3, #8
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8006d0e:	2201      	movs	r2, #1
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	fa02 f303 	lsl.w	r3, r2, r3
 8006d16:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	461a      	mov	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4013      	ands	r3, r2
 8006d24:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d005      	beq.n	8006d38 <USART_GetITStatus+0xa4>
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d002      	beq.n	8006d38 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8006d32:	2301      	movs	r3, #1
 8006d34:	74fb      	strb	r3, [r7, #19]
 8006d36:	e001      	b.n	8006d3c <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8006d3c:	7cfb      	ldrb	r3, [r7, #19]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	371c      	adds	r7, #28
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <USART_ClearITPendingBit>:
  *          (USART_SendData()).
  *  
  * @retval None
  */
void USART_ClearITPendingBit(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b085      	sub	sp, #20
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
 8006d52:	460b      	mov	r3, r1
 8006d54:	807b      	strh	r3, [r7, #2]
  uint16_t bitpos = 0x00, itmask = 0x00;
 8006d56:	2300      	movs	r3, #0
 8006d58:	81fb      	strh	r3, [r7, #14]
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	81bb      	strh	r3, [r7, #12]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  bitpos = USART_IT >> 0x08;
 8006d5e:	887b      	ldrh	r3, [r7, #2]
 8006d60:	0a1b      	lsrs	r3, r3, #8
 8006d62:	81fb      	strh	r3, [r7, #14]
  itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
 8006d64:	89fb      	ldrh	r3, [r7, #14]
 8006d66:	2201      	movs	r2, #1
 8006d68:	fa02 f303 	lsl.w	r3, r2, r3
 8006d6c:	81bb      	strh	r3, [r7, #12]
  USARTx->SR = (uint16_t)~itmask;
 8006d6e:	89bb      	ldrh	r3, [r7, #12]
 8006d70:	43db      	mvns	r3, r3
 8006d72:	b29a      	uxth	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	801a      	strh	r2, [r3, #0]
}
 8006d78:	bf00      	nop
 8006d7a:	3714      	adds	r7, #20
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr
 8006d84:	0000      	movs	r0, r0
	...

08006d88 <DELAY_init>:
uint32_t D_mS; // Global variable (ms)
uint32_t D_S; // Global variable (s)


void DELAY_init(void)
{
 8006d88:	b590      	push	{r4, r7, lr}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
	RCC_ClocksTypeDef Clocks;
	RCC_GetClocksFreq(&Clocks);
 8006d8e:	463b      	mov	r3, r7
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7ff faf9 	bl	8006388 <RCC_GetClocksFreq>
	G_CLK = Clocks.SYSCLK_Frequency;	// Read the systemclock
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	4a3f      	ldr	r2, [pc, #252]	; (8006e98 <DELAY_init+0x110>)
 8006d9a:	6013      	str	r3, [r2, #0]
	D_S  = (G_CLK*1.25)/9/2;	// Number of instructions in one second
 8006d9c:	4b3e      	ldr	r3, [pc, #248]	; (8006e98 <DELAY_init+0x110>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7f9 fb65 	bl	8000470 <__aeabi_ui2d>
 8006da6:	f04f 0200 	mov.w	r2, #0
 8006daa:	4b3c      	ldr	r3, [pc, #240]	; (8006e9c <DELAY_init+0x114>)
 8006dac:	f7f9 fbd6 	bl	800055c <__aeabi_dmul>
 8006db0:	4603      	mov	r3, r0
 8006db2:	460c      	mov	r4, r1
 8006db4:	4618      	mov	r0, r3
 8006db6:	4621      	mov	r1, r4
 8006db8:	f04f 0200 	mov.w	r2, #0
 8006dbc:	4b38      	ldr	r3, [pc, #224]	; (8006ea0 <DELAY_init+0x118>)
 8006dbe:	f7f9 fcf7 	bl	80007b0 <__aeabi_ddiv>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	460c      	mov	r4, r1
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	4621      	mov	r1, r4
 8006dca:	f04f 0200 	mov.w	r2, #0
 8006dce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006dd2:	f7f9 fced 	bl	80007b0 <__aeabi_ddiv>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	460c      	mov	r4, r1
 8006dda:	4618      	mov	r0, r3
 8006ddc:	4621      	mov	r1, r4
 8006dde:	f7f9 fdcf 	bl	8000980 <__aeabi_d2uiz>
 8006de2:	4602      	mov	r2, r0
 8006de4:	4b2f      	ldr	r3, [pc, #188]	; (8006ea4 <DELAY_init+0x11c>)
 8006de6:	601a      	str	r2, [r3, #0]
	D_mS = (G_CLK*1.25)/9000/2; // Number of instructions in one millisecond
 8006de8:	4b2b      	ldr	r3, [pc, #172]	; (8006e98 <DELAY_init+0x110>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7f9 fb3f 	bl	8000470 <__aeabi_ui2d>
 8006df2:	f04f 0200 	mov.w	r2, #0
 8006df6:	4b29      	ldr	r3, [pc, #164]	; (8006e9c <DELAY_init+0x114>)
 8006df8:	f7f9 fbb0 	bl	800055c <__aeabi_dmul>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	460c      	mov	r4, r1
 8006e00:	4618      	mov	r0, r3
 8006e02:	4621      	mov	r1, r4
 8006e04:	a320      	add	r3, pc, #128	; (adr r3, 8006e88 <DELAY_init+0x100>)
 8006e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0a:	f7f9 fcd1 	bl	80007b0 <__aeabi_ddiv>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	460c      	mov	r4, r1
 8006e12:	4618      	mov	r0, r3
 8006e14:	4621      	mov	r1, r4
 8006e16:	f04f 0200 	mov.w	r2, #0
 8006e1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e1e:	f7f9 fcc7 	bl	80007b0 <__aeabi_ddiv>
 8006e22:	4603      	mov	r3, r0
 8006e24:	460c      	mov	r4, r1
 8006e26:	4618      	mov	r0, r3
 8006e28:	4621      	mov	r1, r4
 8006e2a:	f7f9 fda9 	bl	8000980 <__aeabi_d2uiz>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	4b1d      	ldr	r3, [pc, #116]	; (8006ea8 <DELAY_init+0x120>)
 8006e32:	601a      	str	r2, [r3, #0]
	D_uS = (G_CLK*1.25)/9000000/2; // Number of instructions in one microsecond, largest rounding error
 8006e34:	4b18      	ldr	r3, [pc, #96]	; (8006e98 <DELAY_init+0x110>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4618      	mov	r0, r3
 8006e3a:	f7f9 fb19 	bl	8000470 <__aeabi_ui2d>
 8006e3e:	f04f 0200 	mov.w	r2, #0
 8006e42:	4b16      	ldr	r3, [pc, #88]	; (8006e9c <DELAY_init+0x114>)
 8006e44:	f7f9 fb8a 	bl	800055c <__aeabi_dmul>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	460c      	mov	r4, r1
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	4621      	mov	r1, r4
 8006e50:	a30f      	add	r3, pc, #60	; (adr r3, 8006e90 <DELAY_init+0x108>)
 8006e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e56:	f7f9 fcab 	bl	80007b0 <__aeabi_ddiv>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	460c      	mov	r4, r1
 8006e5e:	4618      	mov	r0, r3
 8006e60:	4621      	mov	r1, r4
 8006e62:	f04f 0200 	mov.w	r2, #0
 8006e66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006e6a:	f7f9 fca1 	bl	80007b0 <__aeabi_ddiv>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	460c      	mov	r4, r1
 8006e72:	4618      	mov	r0, r3
 8006e74:	4621      	mov	r1, r4
 8006e76:	f7f9 fd83 	bl	8000980 <__aeabi_d2uiz>
 8006e7a:	4602      	mov	r2, r0
 8006e7c:	4b0b      	ldr	r3, [pc, #44]	; (8006eac <DELAY_init+0x124>)
 8006e7e:	601a      	str	r2, [r3, #0]
}
 8006e80:	bf00      	nop
 8006e82:	3714      	adds	r7, #20
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd90      	pop	{r4, r7, pc}
 8006e88:	00000000 	.word	0x00000000
 8006e8c:	40c19400 	.word	0x40c19400
 8006e90:	00000000 	.word	0x00000000
 8006e94:	41612a88 	.word	0x41612a88
 8006e98:	20013898 	.word	0x20013898
 8006e9c:	3ff40000 	.word	0x3ff40000
 8006ea0:	40220000 	.word	0x40220000
 8006ea4:	2001389c 	.word	0x2001389c
 8006ea8:	200138b8 	.word	0x200138b8
 8006eac:	200138b4 	.word	0x200138b4

08006eb0 <DELAY_ms>:
        time--;
    }
}

void DELAY_ms(volatile unsigned int time)
{
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
    volatile unsigned int i;

    while(time>0)		// Run x times 1 millisecond
 8006eb8:	e00d      	b.n	8006ed6 <DELAY_ms+0x26>
    {
        for(i=0;i<D_mS;i++);
 8006eba:	2300      	movs	r3, #0
 8006ebc:	60fb      	str	r3, [r7, #12]
 8006ebe:	e002      	b.n	8006ec6 <DELAY_ms+0x16>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	60fb      	str	r3, [r7, #12]
 8006ec6:	68fa      	ldr	r2, [r7, #12]
 8006ec8:	4b07      	ldr	r3, [pc, #28]	; (8006ee8 <DELAY_ms+0x38>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d3f7      	bcc.n	8006ec0 <DELAY_ms+0x10>
        time--;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	3b01      	subs	r3, #1
 8006ed4:	607b      	str	r3, [r7, #4]
    while(time>0)		// Run x times 1 millisecond
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1ee      	bne.n	8006eba <DELAY_ms+0xa>
    }
}
 8006edc:	bf00      	nop
 8006ede:	3714      	adds	r7, #20
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr
 8006ee8:	200138b8 	.word	0x200138b8

08006eec <UB_VGA_Screen_Init>:

//--------------------------------------------------------------
// Init VGA-Module
//--------------------------------------------------------------
void UB_VGA_Screen_Init(void)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
  uint16_t xp,yp;

  VGA.hsync_cnt=0;
 8006ef2:	4b1b      	ldr	r3, [pc, #108]	; (8006f60 <UB_VGA_Screen_Init+0x74>)
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	801a      	strh	r2, [r3, #0]
  VGA.start_adr=0;
 8006ef8:	4b19      	ldr	r3, [pc, #100]	; (8006f60 <UB_VGA_Screen_Init+0x74>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	605a      	str	r2, [r3, #4]
  VGA.dma2_cr_reg=0;
 8006efe:	4b18      	ldr	r3, [pc, #96]	; (8006f60 <UB_VGA_Screen_Init+0x74>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	609a      	str	r2, [r3, #8]

  // RAM init total black
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8006f04:	2300      	movs	r3, #0
 8006f06:	80bb      	strh	r3, [r7, #4]
 8006f08:	e017      	b.n	8006f3a <UB_VGA_Screen_Init+0x4e>
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	80fb      	strh	r3, [r7, #6]
 8006f0e:	e00d      	b.n	8006f2c <UB_VGA_Screen_Init+0x40>
      VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=0;
 8006f10:	88ba      	ldrh	r2, [r7, #4]
 8006f12:	4613      	mov	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	019b      	lsls	r3, r3, #6
 8006f1a:	441a      	add	r2, r3
 8006f1c:	88fb      	ldrh	r3, [r7, #6]
 8006f1e:	4413      	add	r3, r2
 8006f20:	4a10      	ldr	r2, [pc, #64]	; (8006f64 <UB_VGA_Screen_Init+0x78>)
 8006f22:	2100      	movs	r1, #0
 8006f24:	54d1      	strb	r1, [r2, r3]
    for(xp=0;xp<(VGA_DISPLAY_X+1);xp++) {
 8006f26:	88fb      	ldrh	r3, [r7, #6]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	80fb      	strh	r3, [r7, #6]
 8006f2c:	88fb      	ldrh	r3, [r7, #6]
 8006f2e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006f32:	d9ed      	bls.n	8006f10 <UB_VGA_Screen_Init+0x24>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8006f34:	88bb      	ldrh	r3, [r7, #4]
 8006f36:	3301      	adds	r3, #1
 8006f38:	80bb      	strh	r3, [r7, #4]
 8006f3a:	88bb      	ldrh	r3, [r7, #4]
 8006f3c:	2bef      	cmp	r3, #239	; 0xef
 8006f3e:	d9e4      	bls.n	8006f0a <UB_VGA_Screen_Init+0x1e>
    }
  }

  // init IO-Pins
  P_VGA_InitIO();
 8006f40:	f000 f85e 	bl	8007000 <P_VGA_InitIO>
  // init Timer
  P_VGA_InitTIM();
 8006f44:	f000 f8b0 	bl	80070a8 <P_VGA_InitTIM>
  // init DMA
  P_VGA_InitDMA();
 8006f48:	f000 f940 	bl	80071cc <P_VGA_InitDMA>
  // init Interrupts
  P_VGA_InitINT();
 8006f4c:	f000 f912 	bl	8007174 <P_VGA_InitINT>

  //-----------------------
  // Register swap and safe
  //-----------------------
  // content of CR-Register read and save
  VGA.dma2_cr_reg=DMA2_Stream5->CR;
 8006f50:	4b05      	ldr	r3, [pc, #20]	; (8006f68 <UB_VGA_Screen_Init+0x7c>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a02      	ldr	r2, [pc, #8]	; (8006f60 <UB_VGA_Screen_Init+0x74>)
 8006f56:	6093      	str	r3, [r2, #8]
}
 8006f58:	bf00      	nop
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	200006d8 	.word	0x200006d8
 8006f64:	2000077c 	.word	0x2000077c
 8006f68:	40026488 	.word	0x40026488

08006f6c <UB_VGA_FillScreen>:

//--------------------------------------------------------------
// fill the DMA RAM buffer with one color
//--------------------------------------------------------------
void UB_VGA_FillScreen(uint8_t color)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	4603      	mov	r3, r0
 8006f74:	71fb      	strb	r3, [r7, #7]
  uint16_t xp,yp;

  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8006f76:	2300      	movs	r3, #0
 8006f78:	81bb      	strh	r3, [r7, #12]
 8006f7a:	e012      	b.n	8006fa2 <UB_VGA_FillScreen+0x36>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	81fb      	strh	r3, [r7, #14]
 8006f80:	e008      	b.n	8006f94 <UB_VGA_FillScreen+0x28>
      UB_VGA_SetPixel(xp,yp,color);
 8006f82:	79fa      	ldrb	r2, [r7, #7]
 8006f84:	89b9      	ldrh	r1, [r7, #12]
 8006f86:	89fb      	ldrh	r3, [r7, #14]
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f000 f811 	bl	8006fb0 <UB_VGA_SetPixel>
    for(xp=0;xp<VGA_DISPLAY_X;xp++) {
 8006f8e:	89fb      	ldrh	r3, [r7, #14]
 8006f90:	3301      	adds	r3, #1
 8006f92:	81fb      	strh	r3, [r7, #14]
 8006f94:	89fb      	ldrh	r3, [r7, #14]
 8006f96:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006f9a:	d3f2      	bcc.n	8006f82 <UB_VGA_FillScreen+0x16>
  for(yp=0;yp<VGA_DISPLAY_Y;yp++) {
 8006f9c:	89bb      	ldrh	r3, [r7, #12]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	81bb      	strh	r3, [r7, #12]
 8006fa2:	89bb      	ldrh	r3, [r7, #12]
 8006fa4:	2bef      	cmp	r3, #239	; 0xef
 8006fa6:	d9e9      	bls.n	8006f7c <UB_VGA_FillScreen+0x10>
    }
  }
}
 8006fa8:	bf00      	nop
 8006faa:	3710      	adds	r7, #16
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <UB_VGA_SetPixel>:
//--------------------------------------------------------------
// put one Pixel on the screen with one color
// Important : the last Pixel+1 from every line must be black (don't know why??)
//--------------------------------------------------------------
void UB_VGA_SetPixel(uint16_t xp, uint16_t yp, uint8_t color)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	80fb      	strh	r3, [r7, #6]
 8006fba:	460b      	mov	r3, r1
 8006fbc:	80bb      	strh	r3, [r7, #4]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	70fb      	strb	r3, [r7, #3]
  if(xp>=VGA_DISPLAY_X) xp=0;
 8006fc2:	88fb      	ldrh	r3, [r7, #6]
 8006fc4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8006fc8:	d301      	bcc.n	8006fce <UB_VGA_SetPixel+0x1e>
 8006fca:	2300      	movs	r3, #0
 8006fcc:	80fb      	strh	r3, [r7, #6]
  if(yp>=VGA_DISPLAY_Y) yp=0;
 8006fce:	88bb      	ldrh	r3, [r7, #4]
 8006fd0:	2bef      	cmp	r3, #239	; 0xef
 8006fd2:	d901      	bls.n	8006fd8 <UB_VGA_SetPixel+0x28>
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	80bb      	strh	r3, [r7, #4]

  // Write pixel to ram
  VGA_RAM1[(yp*(VGA_DISPLAY_X+1))+xp]=color;
 8006fd8:	88ba      	ldrh	r2, [r7, #4]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	019b      	lsls	r3, r3, #6
 8006fe2:	441a      	add	r2, r3
 8006fe4:	88fb      	ldrh	r3, [r7, #6]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	4904      	ldr	r1, [pc, #16]	; (8006ffc <UB_VGA_SetPixel+0x4c>)
 8006fea:	78fa      	ldrb	r2, [r7, #3]
 8006fec:	54ca      	strb	r2, [r1, r3]
}
 8006fee:	bf00      	nop
 8006ff0:	370c      	adds	r7, #12
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff8:	4770      	bx	lr
 8006ffa:	bf00      	nop
 8006ffc:	2000077c 	.word	0x2000077c

08007000 <P_VGA_InitIO>:
//--------------------------------------------------------------
// interne Funktionen
// init aller IO-Pins
//--------------------------------------------------------------
void P_VGA_InitIO(void)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b082      	sub	sp, #8
 8007004:	af00      	add	r7, sp, #0
  // init RGB-Pins (PE8 - PE15)
  // as normal GPIOs
  //---------------------------------------------
 
  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE, ENABLE);
 8007006:	2101      	movs	r1, #1
 8007008:	2010      	movs	r0, #16
 800700a:	f7ff fa65 	bl	80064d8 <RCC_AHB1PeriphClockCmd>

  // Config as Digital output
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 |
 800700e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8007012:	603b      	str	r3, [r7, #0]
        GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8007014:	2301      	movs	r3, #1
 8007016:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8007018:	2300      	movs	r3, #0
 800701a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800701c:	2301      	movs	r3, #1
 800701e:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8007020:	2303      	movs	r3, #3
 8007022:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOE, &GPIO_InitStructure);
 8007024:	463b      	mov	r3, r7
 8007026:	4619      	mov	r1, r3
 8007028:	481d      	ldr	r0, [pc, #116]	; (80070a0 <P_VGA_InitIO+0xa0>)
 800702a:	f7ff f8d5 	bl	80061d8 <GPIO_Init>

  GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 800702e:	4b1c      	ldr	r3, [pc, #112]	; (80070a0 <P_VGA_InitIO+0xa0>)
 8007030:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 8007034:	835a      	strh	r2, [r3, #26]
  // init of the H-Sync Pin (PB11)
  // using Timer2 and CH4
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8007036:	2101      	movs	r1, #1
 8007038:	2002      	movs	r0, #2
 800703a:	f7ff fa4d 	bl	80064d8 <RCC_AHB1PeriphClockCmd>

  // Config Pins as Digital-out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
 800703e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007042:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8007044:	2302      	movs	r3, #2
 8007046:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8007048:	2303      	movs	r3, #3
 800704a:	717b      	strb	r3, [r7, #5]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800704c:	2300      	movs	r3, #0
 800704e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
 8007050:	2301      	movs	r3, #1
 8007052:	71fb      	strb	r3, [r7, #7]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8007054:	463b      	mov	r3, r7
 8007056:	4619      	mov	r1, r3
 8007058:	4812      	ldr	r0, [pc, #72]	; (80070a4 <P_VGA_InitIO+0xa4>)
 800705a:	f7ff f8bd 	bl	80061d8 <GPIO_Init>

  // alternative function connect with IO
  GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_TIM2);
 800705e:	2201      	movs	r2, #1
 8007060:	210b      	movs	r1, #11
 8007062:	4810      	ldr	r0, [pc, #64]	; (80070a4 <P_VGA_InitIO+0xa4>)
 8007064:	f7ff f946 	bl	80062f4 <GPIO_PinAFConfig>
  // init of V-Sync Pin (PB12)
  // using GPIO
  //---------------------------------------------

  // Clock Enable
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8007068:	2101      	movs	r1, #1
 800706a:	2002      	movs	r0, #2
 800706c:	f7ff fa34 	bl	80064d8 <RCC_AHB1PeriphClockCmd>

  // Config of the Pins as Digital out
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
 8007070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007074:	603b      	str	r3, [r7, #0]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8007076:	2301      	movs	r3, #1
 8007078:	713b      	strb	r3, [r7, #4]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800707a:	2300      	movs	r3, #0
 800707c:	71bb      	strb	r3, [r7, #6]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 800707e:	2301      	movs	r3, #1
 8007080:	71fb      	strb	r3, [r7, #7]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
 8007082:	2303      	movs	r3, #3
 8007084:	717b      	strb	r3, [r7, #5]
  GPIO_Init(GPIOB, &GPIO_InitStructure);
 8007086:	463b      	mov	r3, r7
 8007088:	4619      	mov	r1, r3
 800708a:	4806      	ldr	r0, [pc, #24]	; (80070a4 <P_VGA_InitIO+0xa4>)
 800708c:	f7ff f8a4 	bl	80061d8 <GPIO_Init>

  GPIOB->BSRRL = GPIO_Pin_12;
 8007090:	4b04      	ldr	r3, [pc, #16]	; (80070a4 <P_VGA_InitIO+0xa4>)
 8007092:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007096:	831a      	strh	r2, [r3, #24]
}
 8007098:	bf00      	nop
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}
 80070a0:	40021000 	.word	0x40021000
 80070a4:	40020400 	.word	0x40020400

080070a8 <P_VGA_InitTIM>:
//--------------------------------------------------------------
// internal Function
// init Timer
//--------------------------------------------------------------
void P_VGA_InitTIM(void)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b088      	sub	sp, #32
 80070ac:	af00      	add	r7, sp, #0
  // init of Timer1 for
  // Pixeldata via DMA
  //---------------------------------------------

  // Clock enable
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE);
 80070ae:	2101      	movs	r1, #1
 80070b0:	2001      	movs	r0, #1
 80070b2:	f7ff fa51 	bl	8006558 <RCC_APB2PeriphClockCmd>

  // Timer1 init
  TIM_TimeBaseStructure.TIM_Period =  VGA_TIM1_PERIODE;
 80070b6:	230b      	movs	r3, #11
 80070b8:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM1_PRESCALE;
 80070ba:	2300      	movs	r3, #0
 80070bc:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80070be:	2300      	movs	r3, #0
 80070c0:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80070c2:	2300      	movs	r3, #0
 80070c4:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure);
 80070c6:	f107 0314 	add.w	r3, r7, #20
 80070ca:	4619      	mov	r1, r3
 80070cc:	4828      	ldr	r0, [pc, #160]	; (8007170 <P_VGA_InitTIM+0xc8>)
 80070ce:	f7ff fa63 	bl	8006598 <TIM_TimeBaseInit>
  // CH4 for HSYNC-Signal
  // CH3 for DMA Trigger start
  //---------------------------------------------

  // Clock enable
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 80070d2:	2101      	movs	r1, #1
 80070d4:	2001      	movs	r0, #1
 80070d6:	f7ff fa1f 	bl	8006518 <RCC_APB1PeriphClockCmd>

  // Timer2 init
  TIM_TimeBaseStructure.TIM_Period = VGA_TIM2_HSYNC_PERIODE;
 80070da:	f640 236b 	movw	r3, #2667	; 0xa6b
 80070de:	61bb      	str	r3, [r7, #24]
  TIM_TimeBaseStructure.TIM_Prescaler = VGA_TIM2_HSYNC_PRESCALE;
 80070e0:	2300      	movs	r3, #0
 80070e2:	82bb      	strh	r3, [r7, #20]
  TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 80070e4:	2300      	movs	r3, #0
 80070e6:	83bb      	strh	r3, [r7, #28]
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 80070e8:	2300      	movs	r3, #0
 80070ea:	82fb      	strh	r3, [r7, #22]
  TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
 80070ec:	f107 0314 	add.w	r3, r7, #20
 80070f0:	4619      	mov	r1, r3
 80070f2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80070f6:	f7ff fa4f 	bl	8006598 <TIM_TimeBaseInit>

  // Timer2 Channel 3 ( for DMA Trigger start)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 80070fa:	2360      	movs	r3, #96	; 0x60
 80070fc:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 80070fe:	2301      	movs	r3, #1
 8007100:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HTRIGGER_START-VGA_TIM2_DMA_DELAY;
 8007102:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8007106:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8007108:	2302      	movs	r3, #2
 800710a:	81bb      	strh	r3, [r7, #12]
  TIM_OC3Init(TIM2, &TIM_OCInitStructure);
 800710c:	463b      	mov	r3, r7
 800710e:	4619      	mov	r1, r3
 8007110:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007114:	f7ff faec 	bl	80066f0 <TIM_OC3Init>
  TIM_OC3PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8007118:	2108      	movs	r1, #8
 800711a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800711e:	f7ff fbd5 	bl	80068cc <TIM_OC3PreloadConfig>

  // Timer2 Channel 4 (for HSYNC)
  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
 8007122:	2360      	movs	r3, #96	; 0x60
 8007124:	803b      	strh	r3, [r7, #0]
  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
 8007126:	2301      	movs	r3, #1
 8007128:	807b      	strh	r3, [r7, #2]
  TIM_OCInitStructure.TIM_Pulse = VGA_TIM2_HSYNC_IMP;
 800712a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800712e:	60bb      	str	r3, [r7, #8]
  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
 8007130:	2302      	movs	r3, #2
 8007132:	81bb      	strh	r3, [r7, #12]
  TIM_OC4Init(TIM2, &TIM_OCInitStructure);
 8007134:	463b      	mov	r3, r7
 8007136:	4619      	mov	r1, r3
 8007138:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800713c:	f7ff fb5e 	bl	80067fc <TIM_OC4Init>
  TIM_OC4PreloadConfig(TIM2, TIM_OCPreload_Enable);
 8007140:	2108      	movs	r1, #8
 8007142:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007146:	f7ff fbdd 	bl	8006904 <TIM_OC4PreloadConfig>
  //---------------------------------------------
  // enable all Timers
  //---------------------------------------------

  // Timer1 enable
  TIM_ARRPreloadConfig(TIM1, ENABLE);
 800714a:	2101      	movs	r1, #1
 800714c:	4808      	ldr	r0, [pc, #32]	; (8007170 <P_VGA_InitTIM+0xc8>)
 800714e:	f7ff fa8f 	bl	8006670 <TIM_ARRPreloadConfig>

  // Timer2 enable
  TIM_ARRPreloadConfig(TIM2, ENABLE);
 8007152:	2101      	movs	r1, #1
 8007154:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007158:	f7ff fa8a 	bl	8006670 <TIM_ARRPreloadConfig>
  TIM_Cmd(TIM2, ENABLE);
 800715c:	2101      	movs	r1, #1
 800715e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007162:	f7ff faa5 	bl	80066b0 <TIM_Cmd>

}
 8007166:	bf00      	nop
 8007168:	3720      	adds	r7, #32
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	40010000 	.word	0x40010000

08007174 <P_VGA_InitINT>:
//--------------------------------------------------------------
// internal Function
// init Interrupts
//--------------------------------------------------------------
void P_VGA_InitINT(void)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b082      	sub	sp, #8
 8007178:	af00      	add	r7, sp, #0
  // init from DMA Interrupt
  // for TransferComplete Interrupt
  // DMA2, Stream5, Channel6
  //---------------------------------------------

  DMA_ITConfig(DMA2_Stream5, DMA_IT_TC, ENABLE);
 800717a:	2201      	movs	r2, #1
 800717c:	2110      	movs	r1, #16
 800717e:	4812      	ldr	r0, [pc, #72]	; (80071c8 <P_VGA_InitINT+0x54>)
 8007180:	f7fe ff6a 	bl	8006058 <DMA_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream5_IRQn;
 8007184:	2344      	movs	r3, #68	; 0x44
 8007186:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8007188:	2300      	movs	r3, #0
 800718a:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800718c:	2300      	movs	r3, #0
 800718e:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8007190:	2301      	movs	r3, #1
 8007192:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 8007194:	1d3b      	adds	r3, r7, #4
 8007196:	4618      	mov	r0, r3
 8007198:	f7fe fdb4 	bl	8005d04 <NVIC_Init>
  // init of Timer2 Interrupt
  // for HSync-Counter using Update
  // for DMA Trigger START using CH3
  //---------------------------------------------

  TIM_ITConfig(TIM2,TIM_IT_CC3,ENABLE);
 800719c:	2201      	movs	r2, #1
 800719e:	2108      	movs	r1, #8
 80071a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80071a4:	f7ff fbcc 	bl	8006940 <TIM_ITConfig>

  // NVIC config
  NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
 80071a8:	231c      	movs	r3, #28
 80071aa:	713b      	strb	r3, [r7, #4]
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80071ac:	2300      	movs	r3, #0
 80071ae:	717b      	strb	r3, [r7, #5]
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80071b0:	2300      	movs	r3, #0
 80071b2:	71bb      	strb	r3, [r7, #6]
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 80071b4:	2301      	movs	r3, #1
 80071b6:	71fb      	strb	r3, [r7, #7]
  NVIC_Init(&NVIC_InitStructure);
 80071b8:	1d3b      	adds	r3, r7, #4
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7fe fda2 	bl	8005d04 <NVIC_Init>
}
 80071c0:	bf00      	nop
 80071c2:	3708      	adds	r7, #8
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	40026488 	.word	0x40026488

080071cc <P_VGA_InitDMA>:
//--------------------------------------------------------------
// internal Function
// init DMA
//--------------------------------------------------------------
void P_VGA_InitDMA(void)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b090      	sub	sp, #64	; 0x40
 80071d0:	af00      	add	r7, sp, #0
  // (look at page 217 of the Ref Manual)
  // DMA=2, Channel=6, Stream=5
  //---------------------------------------------

  // Clock Enable (DMA)
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
 80071d2:	2101      	movs	r1, #1
 80071d4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80071d8:	f7ff f97e 	bl	80064d8 <RCC_AHB1PeriphClockCmd>

  // DMA init (DMA2, Channel6, Stream5)
  DMA_Cmd(DMA2_Stream5, DISABLE);
 80071dc:	2100      	movs	r1, #0
 80071de:	481b      	ldr	r0, [pc, #108]	; (800724c <P_VGA_InitDMA+0x80>)
 80071e0:	f7fe ff1e 	bl	8006020 <DMA_Cmd>
  DMA_DeInit(DMA2_Stream5);
 80071e4:	4819      	ldr	r0, [pc, #100]	; (800724c <P_VGA_InitDMA+0x80>)
 80071e6:	f7fe fdef 	bl	8005dc8 <DMA_DeInit>
  DMA_InitStructure.DMA_Channel = DMA_Channel_6;
 80071ea:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 80071ee:	607b      	str	r3, [r7, #4]
  DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)VGA_GPIOE_ODR_ADDRESS;
 80071f0:	4b17      	ldr	r3, [pc, #92]	; (8007250 <P_VGA_InitDMA+0x84>)
 80071f2:	60bb      	str	r3, [r7, #8]
  DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)&VGA_RAM1;
 80071f4:	4b17      	ldr	r3, [pc, #92]	; (8007254 <P_VGA_InitDMA+0x88>)
 80071f6:	60fb      	str	r3, [r7, #12]
  DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
 80071f8:	2340      	movs	r3, #64	; 0x40
 80071fa:	613b      	str	r3, [r7, #16]
  DMA_InitStructure.DMA_BufferSize = VGA_DISPLAY_X+1;
 80071fc:	f240 1341 	movw	r3, #321	; 0x141
 8007200:	617b      	str	r3, [r7, #20]
  DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8007202:	2300      	movs	r3, #0
 8007204:	61bb      	str	r3, [r7, #24]
  DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 8007206:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800720a:	61fb      	str	r3, [r7, #28]
  DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 800720c:	2300      	movs	r3, #0
 800720e:	623b      	str	r3, [r7, #32]
  DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 8007210:	2300      	movs	r3, #0
 8007212:	627b      	str	r3, [r7, #36]	; 0x24
  DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 8007214:	2300      	movs	r3, #0
 8007216:	62bb      	str	r3, [r7, #40]	; 0x28
  DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 8007218:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800721c:	62fb      	str	r3, [r7, #44]	; 0x2c
  DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
 800721e:	2300      	movs	r3, #0
 8007220:	633b      	str	r3, [r7, #48]	; 0x30
  DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_HalfFull;
 8007222:	2301      	movs	r3, #1
 8007224:	637b      	str	r3, [r7, #52]	; 0x34
  DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
 8007226:	2300      	movs	r3, #0
 8007228:	63bb      	str	r3, [r7, #56]	; 0x38
  DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
 800722a:	2300      	movs	r3, #0
 800722c:	63fb      	str	r3, [r7, #60]	; 0x3c
  DMA_Init(DMA2_Stream5, &DMA_InitStructure);
 800722e:	1d3b      	adds	r3, r7, #4
 8007230:	4619      	mov	r1, r3
 8007232:	4806      	ldr	r0, [pc, #24]	; (800724c <P_VGA_InitDMA+0x80>)
 8007234:	f7fe fe9c 	bl	8005f70 <DMA_Init>

  // DMA-Timer1 enable
  TIM_DMACmd(TIM1,TIM_DMA_Update,ENABLE);
 8007238:	2201      	movs	r2, #1
 800723a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800723e:	4806      	ldr	r0, [pc, #24]	; (8007258 <P_VGA_InitDMA+0x8c>)
 8007240:	f7ff fbb3 	bl	80069aa <TIM_DMACmd>
}
 8007244:	bf00      	nop
 8007246:	3740      	adds	r7, #64	; 0x40
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	40026488 	.word	0x40026488
 8007250:	40021015 	.word	0x40021015
 8007254:	2000077c 	.word	0x2000077c
 8007258:	40010000 	.word	0x40010000

0800725c <TIM2_IRQHandler>:
//
//   CC3-Interrupt    -> starts from DMA
// Watch it.. higher troughput when interrupt flag is left alone
//--------------------------------------------------------------
void TIM2_IRQHandler(void)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	af00      	add	r7, sp, #0

  // Interrupt of Timer2 CH3 occurred (for Trigger start)
  TIM_ClearITPendingBit(TIM2, TIM_IT_CC3);
 8007260:	2108      	movs	r1, #8
 8007262:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8007266:	f7ff fb8f 	bl	8006988 <TIM_ClearITPendingBit>

  VGA.hsync_cnt++;
 800726a:	4b26      	ldr	r3, [pc, #152]	; (8007304 <TIM2_IRQHandler+0xa8>)
 800726c:	881b      	ldrh	r3, [r3, #0]
 800726e:	3301      	adds	r3, #1
 8007270:	b29a      	uxth	r2, r3
 8007272:	4b24      	ldr	r3, [pc, #144]	; (8007304 <TIM2_IRQHandler+0xa8>)
 8007274:	801a      	strh	r2, [r3, #0]
  if(VGA.hsync_cnt>=VGA_VSYNC_PERIODE) {
 8007276:	4b23      	ldr	r3, [pc, #140]	; (8007304 <TIM2_IRQHandler+0xa8>)
 8007278:	881b      	ldrh	r3, [r3, #0]
 800727a:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 800727e:	d905      	bls.n	800728c <TIM2_IRQHandler+0x30>
    // -----------
    VGA.hsync_cnt=0;
 8007280:	4b20      	ldr	r3, [pc, #128]	; (8007304 <TIM2_IRQHandler+0xa8>)
 8007282:	2200      	movs	r2, #0
 8007284:	801a      	strh	r2, [r3, #0]
    // Adresspointer first dot
    VGA.start_adr=(uint32_t)(&VGA_RAM1[0]);
 8007286:	4a20      	ldr	r2, [pc, #128]	; (8007308 <TIM2_IRQHandler+0xac>)
 8007288:	4b1e      	ldr	r3, [pc, #120]	; (8007304 <TIM2_IRQHandler+0xa8>)
 800728a:	605a      	str	r2, [r3, #4]
  }

  // HSync-Pixel
  if(VGA.hsync_cnt<VGA_VSYNC_IMP) {
 800728c:	4b1d      	ldr	r3, [pc, #116]	; (8007304 <TIM2_IRQHandler+0xa8>)
 800728e:	881b      	ldrh	r3, [r3, #0]
 8007290:	2b01      	cmp	r3, #1
 8007292:	d804      	bhi.n	800729e <TIM2_IRQHandler+0x42>
    // HSync low
    GPIOB->BSRRH = GPIO_Pin_12;
 8007294:	4b1d      	ldr	r3, [pc, #116]	; (800730c <TIM2_IRQHandler+0xb0>)
 8007296:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800729a:	835a      	strh	r2, [r3, #26]
 800729c:	e003      	b.n	80072a6 <TIM2_IRQHandler+0x4a>
  }
  else {
    // HSync High
    GPIOB->BSRRL = GPIO_Pin_12;
 800729e:	4b1b      	ldr	r3, [pc, #108]	; (800730c <TIM2_IRQHandler+0xb0>)
 80072a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80072a4:	831a      	strh	r2, [r3, #24]
  }

  // Test for DMA start
  if((VGA.hsync_cnt>=VGA_VSYNC_BILD_START) && (VGA.hsync_cnt<=VGA_VSYNC_BILD_STOP)) {
 80072a6:	4b17      	ldr	r3, [pc, #92]	; (8007304 <TIM2_IRQHandler+0xa8>)
 80072a8:	881b      	ldrh	r3, [r3, #0]
 80072aa:	2b23      	cmp	r3, #35	; 0x23
 80072ac:	d927      	bls.n	80072fe <TIM2_IRQHandler+0xa2>
 80072ae:	4b15      	ldr	r3, [pc, #84]	; (8007304 <TIM2_IRQHandler+0xa8>)
 80072b0:	881b      	ldrh	r3, [r3, #0]
 80072b2:	f240 2202 	movw	r2, #514	; 0x202
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d821      	bhi.n	80072fe <TIM2_IRQHandler+0xa2>
    // after FP start => DMA Transfer

    // DMA2 init
	DMA2_Stream5->CR=VGA.dma2_cr_reg;
 80072ba:	4a15      	ldr	r2, [pc, #84]	; (8007310 <TIM2_IRQHandler+0xb4>)
 80072bc:	4b11      	ldr	r3, [pc, #68]	; (8007304 <TIM2_IRQHandler+0xa8>)
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	6013      	str	r3, [r2, #0]
    // set adress
    DMA2_Stream5->M0AR=VGA.start_adr;
 80072c2:	4a13      	ldr	r2, [pc, #76]	; (8007310 <TIM2_IRQHandler+0xb4>)
 80072c4:	4b0f      	ldr	r3, [pc, #60]	; (8007304 <TIM2_IRQHandler+0xa8>)
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	60d3      	str	r3, [r2, #12]
    // Timer1 start
    TIM1->CR1|=TIM_CR1_CEN;
 80072ca:	4a12      	ldr	r2, [pc, #72]	; (8007314 <TIM2_IRQHandler+0xb8>)
 80072cc:	4b11      	ldr	r3, [pc, #68]	; (8007314 <TIM2_IRQHandler+0xb8>)
 80072ce:	881b      	ldrh	r3, [r3, #0]
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	f043 0301 	orr.w	r3, r3, #1
 80072d6:	b29b      	uxth	r3, r3
 80072d8:	8013      	strh	r3, [r2, #0]
    // DMA2 enable
    DMA2_Stream5->CR|=DMA_SxCR_EN;
 80072da:	4a0d      	ldr	r2, [pc, #52]	; (8007310 <TIM2_IRQHandler+0xb4>)
 80072dc:	4b0c      	ldr	r3, [pc, #48]	; (8007310 <TIM2_IRQHandler+0xb4>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f043 0301 	orr.w	r3, r3, #1
 80072e4:	6013      	str	r3, [r2, #0]

    // Test Adrespointer for high
    if((VGA.hsync_cnt & 0x01)!=0) {
 80072e6:	4b07      	ldr	r3, [pc, #28]	; (8007304 <TIM2_IRQHandler+0xa8>)
 80072e8:	881b      	ldrh	r3, [r3, #0]
 80072ea:	f003 0301 	and.w	r3, r3, #1
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d005      	beq.n	80072fe <TIM2_IRQHandler+0xa2>
      // inc after Hsync
      VGA.start_adr+=(VGA_DISPLAY_X+1);
 80072f2:	4b04      	ldr	r3, [pc, #16]	; (8007304 <TIM2_IRQHandler+0xa8>)
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	f203 1341 	addw	r3, r3, #321	; 0x141
 80072fa:	4a02      	ldr	r2, [pc, #8]	; (8007304 <TIM2_IRQHandler+0xa8>)
 80072fc:	6053      	str	r3, [r2, #4]
    }
  }
}
 80072fe:	bf00      	nop
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	200006d8 	.word	0x200006d8
 8007308:	2000077c 	.word	0x2000077c
 800730c:	40020400 	.word	0x40020400
 8007310:	40026488 	.word	0x40026488
 8007314:	40010000 	.word	0x40010000

08007318 <DMA2_Stream5_IRQHandler>:
//   after TransferCompleteInterrupt -> stop DMA
//
// still a bit buggy
//--------------------------------------------------------------
void DMA2_Stream5_IRQHandler(void)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	af00      	add	r7, sp, #0
  if(DMA_GetITStatus(DMA2_Stream5, DMA_IT_TCIF5))
 800731c:	490d      	ldr	r1, [pc, #52]	; (8007354 <DMA2_Stream5_IRQHandler+0x3c>)
 800731e:	480e      	ldr	r0, [pc, #56]	; (8007358 <DMA2_Stream5_IRQHandler+0x40>)
 8007320:	f7fe fed4 	bl	80060cc <DMA_GetITStatus>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d012      	beq.n	8007350 <DMA2_Stream5_IRQHandler+0x38>
  {
    // TransferInterruptComplete Interrupt from DMA2
    DMA_ClearITPendingBit(DMA2_Stream5, DMA_IT_TCIF5);
 800732a:	490a      	ldr	r1, [pc, #40]	; (8007354 <DMA2_Stream5_IRQHandler+0x3c>)
 800732c:	480a      	ldr	r0, [pc, #40]	; (8007358 <DMA2_Stream5_IRQHandler+0x40>)
 800732e:	f7fe ff25 	bl	800617c <DMA_ClearITPendingBit>
    // stop after all pixels => DMA Transfer stop

    // Timer1 stop
    TIM1->CR1&=~TIM_CR1_CEN;
 8007332:	4a0a      	ldr	r2, [pc, #40]	; (800735c <DMA2_Stream5_IRQHandler+0x44>)
 8007334:	4b09      	ldr	r3, [pc, #36]	; (800735c <DMA2_Stream5_IRQHandler+0x44>)
 8007336:	881b      	ldrh	r3, [r3, #0]
 8007338:	b29b      	uxth	r3, r3
 800733a:	f023 0301 	bic.w	r3, r3, #1
 800733e:	b29b      	uxth	r3, r3
 8007340:	8013      	strh	r3, [r2, #0]
    // DMA2 disable
    DMA2_Stream5->CR=0;
 8007342:	4b05      	ldr	r3, [pc, #20]	; (8007358 <DMA2_Stream5_IRQHandler+0x40>)
 8007344:	2200      	movs	r2, #0
 8007346:	601a      	str	r2, [r3, #0]
    // switch on black
    GPIOE->BSRRH = VGA_GPIO_HINIBBLE;
 8007348:	4b05      	ldr	r3, [pc, #20]	; (8007360 <DMA2_Stream5_IRQHandler+0x48>)
 800734a:	f44f 427f 	mov.w	r2, #65280	; 0xff00
 800734e:	835a      	strh	r2, [r3, #26]
  }
}
 8007350:	bf00      	nop
 8007352:	bd80      	pop	{r7, pc}
 8007354:	20008800 	.word	0x20008800
 8007358:	40026488 	.word	0x40026488
 800735c:	40010000 	.word	0x40010000
 8007360:	40021000 	.word	0x40021000

08007364 <UART_init>:

char string[100];
int charcounter = 0;

void UART_init(void)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b086      	sub	sp, #24
 8007368:	af00      	add	r7, sp, #0

  /* --------------------------- System Clocks Configuration -----------------*/
  /* USART2 clock enable */
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 800736a:	2101      	movs	r1, #1
 800736c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8007370:	f7ff f8d2 	bl	8006518 <RCC_APB1PeriphClockCmd>

  /* GPIOA clock enable */
  RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8007374:	2101      	movs	r1, #1
 8007376:	2001      	movs	r0, #1
 8007378:	f7ff f8ae 	bl	80064d8 <RCC_AHB1PeriphClockCmd>

  GPIO_InitTypeDef GPIO_InitStructure;

  /*-------------------------- GPIO Configuration ----------------------------*/
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 800737c:	230c      	movs	r3, #12
 800737e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8007380:	2302      	movs	r3, #2
 8007382:	753b      	strb	r3, [r7, #20]
  GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8007384:	2300      	movs	r3, #0
 8007386:	75bb      	strb	r3, [r7, #22]
  GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8007388:	2301      	movs	r3, #1
 800738a:	75fb      	strb	r3, [r7, #23]
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800738c:	2302      	movs	r3, #2
 800738e:	757b      	strb	r3, [r7, #21]
  GPIO_Init(GPIOA, &GPIO_InitStructure);
 8007390:	f107 0310 	add.w	r3, r7, #16
 8007394:	4619      	mov	r1, r3
 8007396:	4816      	ldr	r0, [pc, #88]	; (80073f0 <UART_init+0x8c>)
 8007398:	f7fe ff1e 	bl	80061d8 <GPIO_Init>

  /* Connect USART pins to AF */
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);   // USART2_TX
 800739c:	2207      	movs	r2, #7
 800739e:	2102      	movs	r1, #2
 80073a0:	4813      	ldr	r0, [pc, #76]	; (80073f0 <UART_init+0x8c>)
 80073a2:	f7fe ffa7 	bl	80062f4 <GPIO_PinAFConfig>
  GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);  // USART2_RX
 80073a6:	2207      	movs	r2, #7
 80073a8:	2103      	movs	r1, #3
 80073aa:	4811      	ldr	r0, [pc, #68]	; (80073f0 <UART_init+0x8c>)
 80073ac:	f7fe ffa2 	bl	80062f4 <GPIO_PinAFConfig>
      - One Stop Bit
      - No parity
      - Hardware flow control disabled (RTS and CTS signals)
      - Receive and transmit enabled
*/
USART_InitStructure.USART_BaudRate = 115200;
 80073b0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80073b4:	603b      	str	r3, [r7, #0]
USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 80073b6:	2300      	movs	r3, #0
 80073b8:	80bb      	strh	r3, [r7, #4]
USART_InitStructure.USART_StopBits = USART_StopBits_1;
 80073ba:	2300      	movs	r3, #0
 80073bc:	80fb      	strh	r3, [r7, #6]
USART_InitStructure.USART_Parity = USART_Parity_No;
 80073be:	2300      	movs	r3, #0
 80073c0:	813b      	strh	r3, [r7, #8]
USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80073c2:	2300      	movs	r3, #0
 80073c4:	81bb      	strh	r3, [r7, #12]

USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80073c6:	230c      	movs	r3, #12
 80073c8:	817b      	strh	r3, [r7, #10]

USART_Init(USART2, &USART_InitStructure);
 80073ca:	463b      	mov	r3, r7
 80073cc:	4619      	mov	r1, r3
 80073ce:	4809      	ldr	r0, [pc, #36]	; (80073f4 <UART_init+0x90>)
 80073d0:	f7ff fb10 	bl	80069f4 <USART_Init>
USART_ITConfig(USART2,USART_IT_RXNE,ENABLE);
 80073d4:	2201      	movs	r2, #1
 80073d6:	f240 5125 	movw	r1, #1317	; 0x525
 80073da:	4806      	ldr	r0, [pc, #24]	; (80073f4 <UART_init+0x90>)
 80073dc:	f7ff fbf6 	bl	8006bcc <USART_ITConfig>

USART_Cmd(USART2, ENABLE);
 80073e0:	2101      	movs	r1, #1
 80073e2:	4804      	ldr	r0, [pc, #16]	; (80073f4 <UART_init+0x90>)
 80073e4:	f7ff fbc0 	bl	8006b68 <USART_Cmd>

}
 80073e8:	bf00      	nop
 80073ea:	3718      	adds	r7, #24
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	40020000 	.word	0x40020000
 80073f4:	40004400 	.word	0x40004400

080073f8 <UART_putchar>:

void UART_putchar(char c)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	4603      	mov	r3, r0
 8007400:	71fb      	strb	r3, [r7, #7]
		while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET); // Wait for Empty
 8007402:	bf00      	nop
 8007404:	2180      	movs	r1, #128	; 0x80
 8007406:	4808      	ldr	r0, [pc, #32]	; (8007428 <UART_putchar+0x30>)
 8007408:	f7ff fc28 	bl	8006c5c <USART_GetFlagStatus>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d0f8      	beq.n	8007404 <UART_putchar+0xc>
		USART_SendData(USART2, c);
 8007412:	79fb      	ldrb	r3, [r7, #7]
 8007414:	b29b      	uxth	r3, r3
 8007416:	4619      	mov	r1, r3
 8007418:	4803      	ldr	r0, [pc, #12]	; (8007428 <UART_putchar+0x30>)
 800741a:	f7ff fbc5 	bl	8006ba8 <USART_SendData>

}
 800741e:	bf00      	nop
 8007420:	3708      	adds	r7, #8
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	40004400 	.word	0x40004400

0800742c <UART_puts>:

void UART_puts(char *s)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
	volatile unsigned int i;
	for (i=0; s[i]; i++)
 8007434:	2300      	movs	r3, #0
 8007436:	60fb      	str	r3, [r7, #12]
 8007438:	e009      	b.n	800744e <UART_puts+0x22>
	{
		UART_putchar(s[i]);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	4413      	add	r3, r2
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	4618      	mov	r0, r3
 8007444:	f7ff ffd8 	bl	80073f8 <UART_putchar>
	for (i=0; s[i]; i++)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	3301      	adds	r3, #1
 800744c:	60fb      	str	r3, [r7, #12]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	4413      	add	r3, r2
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1ef      	bne.n	800743a <UART_puts+0xe>
		//while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET); // Wait for Empty
		//USART_SendData(USART2, s[i]);
	}
}
 800745a:	bf00      	nop
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
	...

08007464 <USART2_IRQHandler>:
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
	NVIC_Init(&NVIC_InitStructure);
}

void USART2_IRQHandler(void)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b082      	sub	sp, #8
 8007468:	af00      	add	r7, sp, #0
	// check if the USART2 receive interrupt flag was set
	if( USART_GetITStatus(USART2, USART_IT_RXNE))
 800746a:	f240 5125 	movw	r1, #1317	; 0x525
 800746e:	4827      	ldr	r0, [pc, #156]	; (800750c <USART2_IRQHandler+0xa8>)
 8007470:	f7ff fc10 	bl	8006c94 <USART_GetITStatus>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d044      	beq.n	8007504 <USART2_IRQHandler+0xa0>
	{
		USART_ClearITPendingBit(USART2, USART_IT_RXNE);
 800747a:	f240 5125 	movw	r1, #1317	; 0x525
 800747e:	4823      	ldr	r0, [pc, #140]	; (800750c <USART2_IRQHandler+0xa8>)
 8007480:	f7ff fc63 	bl	8006d4a <USART_ClearITPendingBit>
		int i;
		char c = USART2->DR & 0xFF;
 8007484:	4b21      	ldr	r3, [pc, #132]	; (800750c <USART2_IRQHandler+0xa8>)
 8007486:	889b      	ldrh	r3, [r3, #4]
 8007488:	b29b      	uxth	r3, r3
 800748a:	70fb      	strb	r3, [r7, #3]
//		LCD_XY(10,1);
//		LCD_put("UART:   ");
//		LCD_XY(15,1);
//		LCD_putchar(c);

		if(c > 64 && c < 91)
 800748c:	78fb      	ldrb	r3, [r7, #3]
 800748e:	2b40      	cmp	r3, #64	; 0x40
 8007490:	d905      	bls.n	800749e <USART2_IRQHandler+0x3a>
 8007492:	78fb      	ldrb	r3, [r7, #3]
 8007494:	2b5a      	cmp	r3, #90	; 0x5a
 8007496:	d802      	bhi.n	800749e <USART2_IRQHandler+0x3a>
			c += 32;
 8007498:	78fb      	ldrb	r3, [r7, #3]
 800749a:	3320      	adds	r3, #32
 800749c:	70fb      	strb	r3, [r7, #3]
		if(c <= 13)
 800749e:	78fb      	ldrb	r3, [r7, #3]
 80074a0:	2b0d      	cmp	r3, #13
 80074a2:	d81d      	bhi.n	80074e0 <USART2_IRQHandler+0x7c>
		{
			for(i=0;i<charcounter;i++)
 80074a4:	2300      	movs	r3, #0
 80074a6:	607b      	str	r3, [r7, #4]
 80074a8:	e00b      	b.n	80074c2 <USART2_IRQHandler+0x5e>
			{
				USART_SendData(USART2, string[i]); // Echo Char
 80074aa:	4a19      	ldr	r2, [pc, #100]	; (8007510 <USART2_IRQHandler+0xac>)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4413      	add	r3, r2
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	4619      	mov	r1, r3
 80074b6:	4815      	ldr	r0, [pc, #84]	; (800750c <USART2_IRQHandler+0xa8>)
 80074b8:	f7ff fb76 	bl	8006ba8 <USART_SendData>
			for(i=0;i<charcounter;i++)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	3301      	adds	r3, #1
 80074c0:	607b      	str	r3, [r7, #4]
 80074c2:	4b14      	ldr	r3, [pc, #80]	; (8007514 <USART2_IRQHandler+0xb0>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	dbee      	blt.n	80074aa <USART2_IRQHandler+0x46>
			}
			charcounter = 0;
 80074cc:	4b11      	ldr	r3, [pc, #68]	; (8007514 <USART2_IRQHandler+0xb0>)
 80074ce:	2200      	movs	r2, #0
 80074d0:	601a      	str	r2, [r3, #0]
			USART_SendData(USART2, c); // Echo Char
 80074d2:	78fb      	ldrb	r3, [r7, #3]
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	4619      	mov	r1, r3
 80074d8:	480c      	ldr	r0, [pc, #48]	; (800750c <USART2_IRQHandler+0xa8>)
 80074da:	f7ff fb65 	bl	8006ba8 <USART_SendData>
 80074de:	e009      	b.n	80074f4 <USART2_IRQHandler+0x90>
		}
		else
		{
			string[charcounter] = c;
 80074e0:	4b0c      	ldr	r3, [pc, #48]	; (8007514 <USART2_IRQHandler+0xb0>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	490a      	ldr	r1, [pc, #40]	; (8007510 <USART2_IRQHandler+0xac>)
 80074e6:	78fa      	ldrb	r2, [r7, #3]
 80074e8:	54ca      	strb	r2, [r1, r3]
			charcounter++;
 80074ea:	4b0a      	ldr	r3, [pc, #40]	; (8007514 <USART2_IRQHandler+0xb0>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	3301      	adds	r3, #1
 80074f0:	4a08      	ldr	r2, [pc, #32]	; (8007514 <USART2_IRQHandler+0xb0>)
 80074f2:	6013      	str	r3, [r2, #0]
		}


		while (USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET); // Wait for Empty
 80074f4:	bf00      	nop
 80074f6:	2140      	movs	r1, #64	; 0x40
 80074f8:	4804      	ldr	r0, [pc, #16]	; (800750c <USART2_IRQHandler+0xa8>)
 80074fa:	f7ff fbaf 	bl	8006c5c <USART_GetFlagStatus>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b00      	cmp	r3, #0
 8007502:	d0f8      	beq.n	80074f6 <USART2_IRQHandler+0x92>

	}
}
 8007504:	bf00      	nop
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	40004400 	.word	0x40004400
 8007510:	200138bc 	.word	0x200138bc
 8007514:	2000069c 	.word	0x2000069c

08007518 <UART_get>:

// Ontvang een karakter via de UART
// niet echt nodig als routine maar als wrapper voor compatabiliteit. Let op geen -1 als er geen char is ontvangen!

char UART_get(void)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
    char uart_char = -1;
 800751e:	23ff      	movs	r3, #255	; 0xff
 8007520:	71fb      	strb	r3, [r7, #7]
    if (USART_GetFlagStatus(USART2, USART_FLAG_RXNE)== SET)  // check for data available
 8007522:	2120      	movs	r1, #32
 8007524:	4807      	ldr	r0, [pc, #28]	; (8007544 <UART_get+0x2c>)
 8007526:	f7ff fb99 	bl	8006c5c <USART_GetFlagStatus>
 800752a:	4603      	mov	r3, r0
 800752c:	2b01      	cmp	r3, #1
 800752e:	d103      	bne.n	8007538 <UART_get+0x20>
    	 uart_char= USART2->DR & 0xFF; // and read the data from peripheral
 8007530:	4b04      	ldr	r3, [pc, #16]	; (8007544 <UART_get+0x2c>)
 8007532:	889b      	ldrh	r3, [r3, #4]
 8007534:	b29b      	uxth	r3, r3
 8007536:	71fb      	strb	r3, [r7, #7]
    return uart_char;
 8007538:	79fb      	ldrb	r3, [r7, #7]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3708      	adds	r7, #8
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	40004400 	.word	0x40004400

08007548 <UART_gets>:
// args: char *readbuffer
//       int   echo, when TRUE, send read-char to UART
// remark: ARM sends -1 if buffer is empty
//         LF is cleared if set in terminal-program
void UART_gets(char *s, int echo)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
 8007550:	6039      	str	r1, [r7, #0]
	while (TRUE)
	{
	 	*s = UART_get();
 8007552:	f7ff ffe1 	bl	8007518 <UART_get>
 8007556:	4603      	mov	r3, r0
 8007558:	461a      	mov	r2, r3
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	701a      	strb	r2, [r3, #0]

	 	if (*s==-1)             // check for data available
	 		continue;

	 	if (*s==0xff || *s==LF) // if no data or LF, continue
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	2bff      	cmp	r3, #255	; 0xff
 8007564:	d017      	beq.n	8007596 <UART_gets+0x4e>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	2b0a      	cmp	r3, #10
 800756c:	d013      	beq.n	8007596 <UART_gets+0x4e>
			continue;


		if (echo)              // if output-flag set
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d004      	beq.n	800757e <UART_gets+0x36>
			UART_putchar(*s);  // to read what u entered
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	4618      	mov	r0, r3
 800757a:	f7ff ff3d 	bl	80073f8 <UART_putchar>


		if (*s==CR)            // if enter pressed
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	2b0d      	cmp	r3, #13
 8007584:	d103      	bne.n	800758e <UART_gets+0x46>
		{
			*s = '\0';         // ignore char and close string
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	701a      	strb	r2, [r3, #0]
		    return;            // buf ready, exit loop
 800758c:	e005      	b.n	800759a <UART_gets+0x52>
		}
		s++;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	3301      	adds	r3, #1
 8007592:	607b      	str	r3, [r7, #4]
 8007594:	e7dd      	b.n	8007552 <UART_gets+0xa>
			continue;
 8007596:	bf00      	nop
	 	*s = UART_get();
 8007598:	e7db      	b.n	8007552 <UART_gets+0xa>
	}
}
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <IO_Init>:

/********************************************//**
 *	initializing the hardware and for functions
 ***********************************************/
void IO_Init()
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	af00      	add	r7, sp, #0
	UB_VGA_Screen_Init(); // Init VGA-Screen
 80075a4:	f7ff fca2 	bl	8006eec <UB_VGA_Screen_Init>
	UART_init();
 80075a8:	f7ff fedc 	bl	8007364 <UART_init>
	DELAY_init();
 80075ac:	f7ff fbec 	bl	8006d88 <DELAY_init>
}
 80075b0:	bf00      	nop
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <input_uart>:
/*!
 *  This function is the interface of the UART.
 */

void input_uart()
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
	int fill;
	UART_gets(parameters,TRUE);		// Get data from terminal
 80075ba:	2101      	movs	r1, #1
 80075bc:	48ac      	ldr	r0, [pc, #688]	; (8007870 <input_uart+0x2bc>)
 80075be:	f7ff ffc3 	bl	8007548 <UART_gets>
	fl_token = strtok (parameters,",");	// Put first argument in fl_token
 80075c2:	49ac      	ldr	r1, [pc, #688]	; (8007874 <input_uart+0x2c0>)
 80075c4:	48aa      	ldr	r0, [pc, #680]	; (8007870 <input_uart+0x2bc>)
 80075c6:	f001 f9b7 	bl	8008938 <strtok>
 80075ca:	4602      	mov	r2, r0
 80075cc:	4baa      	ldr	r3, [pc, #680]	; (8007878 <input_uart+0x2c4>)
 80075ce:	601a      	str	r2, [r3, #0]
	strcpy(functions,fl_token);			// String compare to functions
 80075d0:	4ba9      	ldr	r3, [pc, #676]	; (8007878 <input_uart+0x2c4>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4619      	mov	r1, r3
 80075d6:	48a9      	ldr	r0, [pc, #676]	; (800787c <input_uart+0x2c8>)
 80075d8:	f001 f9a6 	bl	8008928 <strcpy>
	error_handling_1();
 80075dc:	f000 fb6a 	bl	8007cb4 <error_handling_1>

	if(strcmp(functions, "clearscherm")==0)	// Function is clearscreen
 80075e0:	49a7      	ldr	r1, [pc, #668]	; (8007880 <input_uart+0x2cc>)
 80075e2:	48a6      	ldr	r0, [pc, #664]	; (800787c <input_uart+0x2c8>)
 80075e4:	f7f8 fdf0 	bl	80001c8 <strcmp>
 80075e8:	4603      	mov	r3, r0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d136      	bne.n	800765c <input_uart+0xa8>
	{
		fill=0;
 80075ee:	2300      	movs	r3, #0
 80075f0:	607b      	str	r3, [r7, #4]
		while(fl_token != NULL)				// While something in fl_token execute code below
 80075f2:	e01d      	b.n	8007630 <input_uart+0x7c>
		{
		  switch(fill)						// Fill char string with each parameter
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d002      	beq.n	8007600 <input_uart+0x4c>
 80075fa:	2b01      	cmp	r3, #1
 80075fc:	d007      	beq.n	800760e <input_uart+0x5a>
 80075fe:	e00d      	b.n	800761c <input_uart+0x68>
		  {
			case 0:
			  strcpy(clearscrn_args.function,fl_token);
 8007600:	4b9d      	ldr	r3, [pc, #628]	; (8007878 <input_uart+0x2c4>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4619      	mov	r1, r3
 8007606:	489f      	ldr	r0, [pc, #636]	; (8007884 <input_uart+0x2d0>)
 8007608:	f001 f98e 	bl	8008928 <strcpy>
			  break;
 800760c:	e006      	b.n	800761c <input_uart+0x68>
			case 1:
			  strcpy(clearscrn_args.color,fl_token);
 800760e:	4b9a      	ldr	r3, [pc, #616]	; (8007878 <input_uart+0x2c4>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4619      	mov	r1, r3
 8007614:	489c      	ldr	r0, [pc, #624]	; (8007888 <input_uart+0x2d4>)
 8007616:	f001 f987 	bl	8008928 <strcpy>
			  break;
 800761a:	bf00      	nop
		  }
		  fill++;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	3301      	adds	r3, #1
 8007620:	607b      	str	r3, [r7, #4]
		  fl_token = strtok (NULL, ",");
 8007622:	4994      	ldr	r1, [pc, #592]	; (8007874 <input_uart+0x2c0>)
 8007624:	2000      	movs	r0, #0
 8007626:	f001 f987 	bl	8008938 <strtok>
 800762a:	4602      	mov	r2, r0
 800762c:	4b92      	ldr	r3, [pc, #584]	; (8007878 <input_uart+0x2c4>)
 800762e:	601a      	str	r2, [r3, #0]
		while(fl_token != NULL)				// While something in fl_token execute code below
 8007630:	4b91      	ldr	r3, [pc, #580]	; (8007878 <input_uart+0x2c4>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d1dd      	bne.n	80075f4 <input_uart+0x40>
		}
		if(fill<LEN_CLEARSCRN_ARG)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2b01      	cmp	r3, #1
 800763c:	dc03      	bgt.n	8007646 <input_uart+0x92>
			UART_puts("ERROR 3: to few arguments were given\r");
 800763e:	4893      	ldr	r0, [pc, #588]	; (800788c <input_uart+0x2d8>)
 8007640:	f7ff fef4 	bl	800742c <UART_puts>
 8007644:	e005      	b.n	8007652 <input_uart+0x9e>
		else if(fill>LEN_CLEARSCRN_ARG)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2b02      	cmp	r3, #2
 800764a:	dd02      	ble.n	8007652 <input_uart+0x9e>
			UART_puts("ERROR 4: to many arguments were given\r");
 800764c:	4890      	ldr	r0, [pc, #576]	; (8007890 <input_uart+0x2dc>)
 800764e:	f7ff feed 	bl	800742c <UART_puts>
		error_handling_2();
 8007652:	f000 fb93 	bl	8007d7c <error_handling_2>
		func_chooser();
 8007656:	f000 fe5d 	bl	8008314 <func_chooser>
		else if(fill>LEN_WAIT_ARG)
			UART_puts("ERROR 4: to many arguments were given\r");
		error_handling_2();
		func_chooser();
	}
}
 800765a:	e317      	b.n	8007c8c <input_uart+0x6d8>
	else if(strcmp(functions, "lijn")==0)
 800765c:	498d      	ldr	r1, [pc, #564]	; (8007894 <input_uart+0x2e0>)
 800765e:	4887      	ldr	r0, [pc, #540]	; (800787c <input_uart+0x2c8>)
 8007660:	f7f8 fdb2 	bl	80001c8 <strcmp>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d167      	bne.n	800773a <input_uart+0x186>
		fill=0;
 800766a:	2300      	movs	r3, #0
 800766c:	607b      	str	r3, [r7, #4]
		while(fl_token!= NULL)
 800766e:	e04e      	b.n	800770e <input_uart+0x15a>
			switch(fill)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b06      	cmp	r3, #6
 8007674:	d841      	bhi.n	80076fa <input_uart+0x146>
 8007676:	a201      	add	r2, pc, #4	; (adr r2, 800767c <input_uart+0xc8>)
 8007678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767c:	08007699 	.word	0x08007699
 8007680:	080076a7 	.word	0x080076a7
 8007684:	080076b5 	.word	0x080076b5
 8007688:	080076c3 	.word	0x080076c3
 800768c:	080076d1 	.word	0x080076d1
 8007690:	080076df 	.word	0x080076df
 8007694:	080076ed 	.word	0x080076ed
					strcpy(line_args.function,fl_token);
 8007698:	4b77      	ldr	r3, [pc, #476]	; (8007878 <input_uart+0x2c4>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4619      	mov	r1, r3
 800769e:	487e      	ldr	r0, [pc, #504]	; (8007898 <input_uart+0x2e4>)
 80076a0:	f001 f942 	bl	8008928 <strcpy>
					break;
 80076a4:	e029      	b.n	80076fa <input_uart+0x146>
					strcpy(line_args.x1,fl_token);
 80076a6:	4b74      	ldr	r3, [pc, #464]	; (8007878 <input_uart+0x2c4>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4619      	mov	r1, r3
 80076ac:	487b      	ldr	r0, [pc, #492]	; (800789c <input_uart+0x2e8>)
 80076ae:	f001 f93b 	bl	8008928 <strcpy>
					break;
 80076b2:	e022      	b.n	80076fa <input_uart+0x146>
					strcpy(line_args.y1,fl_token);
 80076b4:	4b70      	ldr	r3, [pc, #448]	; (8007878 <input_uart+0x2c4>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4619      	mov	r1, r3
 80076ba:	4879      	ldr	r0, [pc, #484]	; (80078a0 <input_uart+0x2ec>)
 80076bc:	f001 f934 	bl	8008928 <strcpy>
					break;
 80076c0:	e01b      	b.n	80076fa <input_uart+0x146>
					strcpy(line_args.x2,fl_token);
 80076c2:	4b6d      	ldr	r3, [pc, #436]	; (8007878 <input_uart+0x2c4>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4619      	mov	r1, r3
 80076c8:	4876      	ldr	r0, [pc, #472]	; (80078a4 <input_uart+0x2f0>)
 80076ca:	f001 f92d 	bl	8008928 <strcpy>
					break;
 80076ce:	e014      	b.n	80076fa <input_uart+0x146>
					strcpy(line_args.y2,fl_token);
 80076d0:	4b69      	ldr	r3, [pc, #420]	; (8007878 <input_uart+0x2c4>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4619      	mov	r1, r3
 80076d6:	4874      	ldr	r0, [pc, #464]	; (80078a8 <input_uart+0x2f4>)
 80076d8:	f001 f926 	bl	8008928 <strcpy>
					break;
 80076dc:	e00d      	b.n	80076fa <input_uart+0x146>
					strcpy(line_args.thickness,fl_token);
 80076de:	4b66      	ldr	r3, [pc, #408]	; (8007878 <input_uart+0x2c4>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4619      	mov	r1, r3
 80076e4:	4871      	ldr	r0, [pc, #452]	; (80078ac <input_uart+0x2f8>)
 80076e6:	f001 f91f 	bl	8008928 <strcpy>
					break;
 80076ea:	e006      	b.n	80076fa <input_uart+0x146>
					strcpy(line_args.color,fl_token);
 80076ec:	4b62      	ldr	r3, [pc, #392]	; (8007878 <input_uart+0x2c4>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4619      	mov	r1, r3
 80076f2:	486f      	ldr	r0, [pc, #444]	; (80078b0 <input_uart+0x2fc>)
 80076f4:	f001 f918 	bl	8008928 <strcpy>
					break;
 80076f8:	bf00      	nop
			fill++;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	3301      	adds	r3, #1
 80076fe:	607b      	str	r3, [r7, #4]
			fl_token = strtok (NULL, ",");
 8007700:	495c      	ldr	r1, [pc, #368]	; (8007874 <input_uart+0x2c0>)
 8007702:	2000      	movs	r0, #0
 8007704:	f001 f918 	bl	8008938 <strtok>
 8007708:	4602      	mov	r2, r0
 800770a:	4b5b      	ldr	r3, [pc, #364]	; (8007878 <input_uart+0x2c4>)
 800770c:	601a      	str	r2, [r3, #0]
		while(fl_token!= NULL)
 800770e:	4b5a      	ldr	r3, [pc, #360]	; (8007878 <input_uart+0x2c4>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1ac      	bne.n	8007670 <input_uart+0xbc>
		if(fill<LEN_LINE_ARG)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b06      	cmp	r3, #6
 800771a:	dc03      	bgt.n	8007724 <input_uart+0x170>
			UART_puts("ERROR 3: to few arguments were given\r");
 800771c:	485b      	ldr	r0, [pc, #364]	; (800788c <input_uart+0x2d8>)
 800771e:	f7ff fe85 	bl	800742c <UART_puts>
 8007722:	e005      	b.n	8007730 <input_uart+0x17c>
		else if(fill>LEN_LINE_ARG)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b07      	cmp	r3, #7
 8007728:	dd02      	ble.n	8007730 <input_uart+0x17c>
			UART_puts("ERROR 4: to many arguments were given\r");
 800772a:	4859      	ldr	r0, [pc, #356]	; (8007890 <input_uart+0x2dc>)
 800772c:	f7ff fe7e 	bl	800742c <UART_puts>
		error_handling_2();
 8007730:	f000 fb24 	bl	8007d7c <error_handling_2>
		func_chooser();
 8007734:	f000 fdee 	bl	8008314 <func_chooser>
}
 8007738:	e2a8      	b.n	8007c8c <input_uart+0x6d8>
	else if(strcmp(functions, "ellips")==0)
 800773a:	495e      	ldr	r1, [pc, #376]	; (80078b4 <input_uart+0x300>)
 800773c:	484f      	ldr	r0, [pc, #316]	; (800787c <input_uart+0x2c8>)
 800773e:	f7f8 fd43 	bl	80001c8 <strcmp>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d15f      	bne.n	8007808 <input_uart+0x254>
		fill=0;
 8007748:	2300      	movs	r3, #0
 800774a:	607b      	str	r3, [r7, #4]
		while(fl_token != NULL)
 800774c:	e046      	b.n	80077dc <input_uart+0x228>
			switch(fill)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b05      	cmp	r3, #5
 8007752:	d839      	bhi.n	80077c8 <input_uart+0x214>
 8007754:	a201      	add	r2, pc, #4	; (adr r2, 800775c <input_uart+0x1a8>)
 8007756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775a:	bf00      	nop
 800775c:	08007775 	.word	0x08007775
 8007760:	08007783 	.word	0x08007783
 8007764:	08007791 	.word	0x08007791
 8007768:	0800779f 	.word	0x0800779f
 800776c:	080077ad 	.word	0x080077ad
 8007770:	080077bb 	.word	0x080077bb
					strcpy(ellips_args.function,fl_token);
 8007774:	4b40      	ldr	r3, [pc, #256]	; (8007878 <input_uart+0x2c4>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4619      	mov	r1, r3
 800777a:	484f      	ldr	r0, [pc, #316]	; (80078b8 <input_uart+0x304>)
 800777c:	f001 f8d4 	bl	8008928 <strcpy>
					break;
 8007780:	e022      	b.n	80077c8 <input_uart+0x214>
					strcpy(ellips_args.x_center,fl_token);
 8007782:	4b3d      	ldr	r3, [pc, #244]	; (8007878 <input_uart+0x2c4>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4619      	mov	r1, r3
 8007788:	484c      	ldr	r0, [pc, #304]	; (80078bc <input_uart+0x308>)
 800778a:	f001 f8cd 	bl	8008928 <strcpy>
					break;
 800778e:	e01b      	b.n	80077c8 <input_uart+0x214>
					strcpy(ellips_args.y_center,fl_token);
 8007790:	4b39      	ldr	r3, [pc, #228]	; (8007878 <input_uart+0x2c4>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4619      	mov	r1, r3
 8007796:	484a      	ldr	r0, [pc, #296]	; (80078c0 <input_uart+0x30c>)
 8007798:	f001 f8c6 	bl	8008928 <strcpy>
					break;
 800779c:	e014      	b.n	80077c8 <input_uart+0x214>
					strcpy(ellips_args.x_rad,fl_token);
 800779e:	4b36      	ldr	r3, [pc, #216]	; (8007878 <input_uart+0x2c4>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4619      	mov	r1, r3
 80077a4:	4847      	ldr	r0, [pc, #284]	; (80078c4 <input_uart+0x310>)
 80077a6:	f001 f8bf 	bl	8008928 <strcpy>
					break;
 80077aa:	e00d      	b.n	80077c8 <input_uart+0x214>
					strcpy(ellips_args.y_rad,fl_token);
 80077ac:	4b32      	ldr	r3, [pc, #200]	; (8007878 <input_uart+0x2c4>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4619      	mov	r1, r3
 80077b2:	4845      	ldr	r0, [pc, #276]	; (80078c8 <input_uart+0x314>)
 80077b4:	f001 f8b8 	bl	8008928 <strcpy>
					break;
 80077b8:	e006      	b.n	80077c8 <input_uart+0x214>
					strcpy(ellips_args.color,fl_token);
 80077ba:	4b2f      	ldr	r3, [pc, #188]	; (8007878 <input_uart+0x2c4>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4619      	mov	r1, r3
 80077c0:	4842      	ldr	r0, [pc, #264]	; (80078cc <input_uart+0x318>)
 80077c2:	f001 f8b1 	bl	8008928 <strcpy>
					break;
 80077c6:	bf00      	nop
			fill++;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	3301      	adds	r3, #1
 80077cc:	607b      	str	r3, [r7, #4]
			fl_token = strtok (NULL, ",");
 80077ce:	4929      	ldr	r1, [pc, #164]	; (8007874 <input_uart+0x2c0>)
 80077d0:	2000      	movs	r0, #0
 80077d2:	f001 f8b1 	bl	8008938 <strtok>
 80077d6:	4602      	mov	r2, r0
 80077d8:	4b27      	ldr	r3, [pc, #156]	; (8007878 <input_uart+0x2c4>)
 80077da:	601a      	str	r2, [r3, #0]
		while(fl_token != NULL)
 80077dc:	4b26      	ldr	r3, [pc, #152]	; (8007878 <input_uart+0x2c4>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1b4      	bne.n	800774e <input_uart+0x19a>
		if(fill<LEN_ELLIPS_ARG)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2b05      	cmp	r3, #5
 80077e8:	dc03      	bgt.n	80077f2 <input_uart+0x23e>
			UART_puts("ERROR 3: to few arguments were given\r");
 80077ea:	4828      	ldr	r0, [pc, #160]	; (800788c <input_uart+0x2d8>)
 80077ec:	f7ff fe1e 	bl	800742c <UART_puts>
 80077f0:	e005      	b.n	80077fe <input_uart+0x24a>
		else if(fill>LEN_ELLIPS_ARG)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b06      	cmp	r3, #6
 80077f6:	dd02      	ble.n	80077fe <input_uart+0x24a>
			UART_puts("ERROR 4: to many arguments were given\r");
 80077f8:	4825      	ldr	r0, [pc, #148]	; (8007890 <input_uart+0x2dc>)
 80077fa:	f7ff fe17 	bl	800742c <UART_puts>
		error_handling_2();
 80077fe:	f000 fabd 	bl	8007d7c <error_handling_2>
		func_chooser();
 8007802:	f000 fd87 	bl	8008314 <func_chooser>
}
 8007806:	e241      	b.n	8007c8c <input_uart+0x6d8>
	else if(strcmp(functions, "rechthoek")==0)
 8007808:	4931      	ldr	r1, [pc, #196]	; (80078d0 <input_uart+0x31c>)
 800780a:	481c      	ldr	r0, [pc, #112]	; (800787c <input_uart+0x2c8>)
 800780c:	f7f8 fcdc 	bl	80001c8 <strcmp>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	f040 809a 	bne.w	800794c <input_uart+0x398>
		fill=0;
 8007818:	2300      	movs	r3, #0
 800781a:	607b      	str	r3, [r7, #4]
		while(fl_token != NULL)
 800781c:	e07f      	b.n	800791e <input_uart+0x36a>
			switch(fill)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2b05      	cmp	r3, #5
 8007822:	d872      	bhi.n	800790a <input_uart+0x356>
 8007824:	a201      	add	r2, pc, #4	; (adr r2, 800782c <input_uart+0x278>)
 8007826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800782a:	bf00      	nop
 800782c:	08007845 	.word	0x08007845
 8007830:	08007853 	.word	0x08007853
 8007834:	08007861 	.word	0x08007861
 8007838:	080078e1 	.word	0x080078e1
 800783c:	080078ef 	.word	0x080078ef
 8007840:	080078fd 	.word	0x080078fd
					strcpy(rectangle_args.function,fl_token);
 8007844:	4b0c      	ldr	r3, [pc, #48]	; (8007878 <input_uart+0x2c4>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4619      	mov	r1, r3
 800784a:	4822      	ldr	r0, [pc, #136]	; (80078d4 <input_uart+0x320>)
 800784c:	f001 f86c 	bl	8008928 <strcpy>
					break;
 8007850:	e05b      	b.n	800790a <input_uart+0x356>
					strcpy(rectangle_args.x1,fl_token);
 8007852:	4b09      	ldr	r3, [pc, #36]	; (8007878 <input_uart+0x2c4>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4619      	mov	r1, r3
 8007858:	481f      	ldr	r0, [pc, #124]	; (80078d8 <input_uart+0x324>)
 800785a:	f001 f865 	bl	8008928 <strcpy>
					break;
 800785e:	e054      	b.n	800790a <input_uart+0x356>
					strcpy(rectangle_args.y1,fl_token);
 8007860:	4b05      	ldr	r3, [pc, #20]	; (8007878 <input_uart+0x2c4>)
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4619      	mov	r1, r3
 8007866:	481d      	ldr	r0, [pc, #116]	; (80078dc <input_uart+0x328>)
 8007868:	f001 f85e 	bl	8008928 <strcpy>
					break;
 800786c:	e04d      	b.n	800790a <input_uart+0x356>
 800786e:	bf00      	nop
 8007870:	20013938 	.word	0x20013938
 8007874:	08009218 	.word	0x08009218
 8007878:	20013920 	.word	0x20013920
 800787c:	200138a0 	.word	0x200138a0
 8007880:	0800921c 	.word	0x0800921c
 8007884:	200006e4 	.word	0x200006e4
 8007888:	20000766 	.word	0x20000766
 800788c:	08009228 	.word	0x08009228
 8007890:	08009250 	.word	0x08009250
 8007894:	08009278 	.word	0x08009278
 8007898:	2001359c 	.word	0x2001359c
 800789c:	200135a6 	.word	0x200135a6
 80078a0:	200135b0 	.word	0x200135b0
 80078a4:	200135b5 	.word	0x200135b5
 80078a8:	200135ba 	.word	0x200135ba
 80078ac:	200135dd 	.word	0x200135dd
 80078b0:	2001361e 	.word	0x2001361e
 80078b4:	08009280 	.word	0x08009280
 80078b8:	200137fc 	.word	0x200137fc
 80078bc:	20013829 	.word	0x20013829
 80078c0:	2001382e 	.word	0x2001382e
 80078c4:	20013833 	.word	0x20013833
 80078c8:	20013838 	.word	0x20013838
 80078cc:	2001387e 	.word	0x2001387e
 80078d0:	08009288 	.word	0x08009288
 80078d4:	2001346c 	.word	0x2001346c
 80078d8:	20013476 	.word	0x20013476
 80078dc:	20013480 	.word	0x20013480
					strcpy(rectangle_args.x2,fl_token);
 80078e0:	4baa      	ldr	r3, [pc, #680]	; (8007b8c <input_uart+0x5d8>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4619      	mov	r1, r3
 80078e6:	48aa      	ldr	r0, [pc, #680]	; (8007b90 <input_uart+0x5dc>)
 80078e8:	f001 f81e 	bl	8008928 <strcpy>
					break;
 80078ec:	e00d      	b.n	800790a <input_uart+0x356>
					strcpy(rectangle_args.y2,fl_token);
 80078ee:	4ba7      	ldr	r3, [pc, #668]	; (8007b8c <input_uart+0x5d8>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4619      	mov	r1, r3
 80078f4:	48a7      	ldr	r0, [pc, #668]	; (8007b94 <input_uart+0x5e0>)
 80078f6:	f001 f817 	bl	8008928 <strcpy>
					break;
 80078fa:	e006      	b.n	800790a <input_uart+0x356>
					strcpy(rectangle_args.color,fl_token);
 80078fc:	4ba3      	ldr	r3, [pc, #652]	; (8007b8c <input_uart+0x5d8>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4619      	mov	r1, r3
 8007902:	48a5      	ldr	r0, [pc, #660]	; (8007b98 <input_uart+0x5e4>)
 8007904:	f001 f810 	bl	8008928 <strcpy>
					break;
 8007908:	bf00      	nop
			fill++;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	3301      	adds	r3, #1
 800790e:	607b      	str	r3, [r7, #4]
			fl_token = strtok (NULL, ",");
 8007910:	49a2      	ldr	r1, [pc, #648]	; (8007b9c <input_uart+0x5e8>)
 8007912:	2000      	movs	r0, #0
 8007914:	f001 f810 	bl	8008938 <strtok>
 8007918:	4602      	mov	r2, r0
 800791a:	4b9c      	ldr	r3, [pc, #624]	; (8007b8c <input_uart+0x5d8>)
 800791c:	601a      	str	r2, [r3, #0]
		while(fl_token != NULL)
 800791e:	4b9b      	ldr	r3, [pc, #620]	; (8007b8c <input_uart+0x5d8>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	f47f af7b 	bne.w	800781e <input_uart+0x26a>
		if(fill<LEN_RECTANGLE_ARG)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b05      	cmp	r3, #5
 800792c:	dc03      	bgt.n	8007936 <input_uart+0x382>
			UART_puts("ERROR 3: to few arguments were given\r");
 800792e:	489c      	ldr	r0, [pc, #624]	; (8007ba0 <input_uart+0x5ec>)
 8007930:	f7ff fd7c 	bl	800742c <UART_puts>
 8007934:	e005      	b.n	8007942 <input_uart+0x38e>
		else if(fill>LEN_RECTANGLE_ARG)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2b06      	cmp	r3, #6
 800793a:	dd02      	ble.n	8007942 <input_uart+0x38e>
			UART_puts("ERROR 4: to many arguments were given\r");
 800793c:	4899      	ldr	r0, [pc, #612]	; (8007ba4 <input_uart+0x5f0>)
 800793e:	f7ff fd75 	bl	800742c <UART_puts>
		error_handling_2();
 8007942:	f000 fa1b 	bl	8007d7c <error_handling_2>
		func_chooser();
 8007946:	f000 fce5 	bl	8008314 <func_chooser>
}
 800794a:	e19f      	b.n	8007c8c <input_uart+0x6d8>
	else if(strcmp(functions, "driehoek")==0)
 800794c:	4996      	ldr	r1, [pc, #600]	; (8007ba8 <input_uart+0x5f4>)
 800794e:	4897      	ldr	r0, [pc, #604]	; (8007bac <input_uart+0x5f8>)
 8007950:	f7f8 fc3a 	bl	80001c8 <strcmp>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d170      	bne.n	8007a3c <input_uart+0x488>
		fill=0;
 800795a:	2300      	movs	r3, #0
 800795c:	607b      	str	r3, [r7, #4]
		while(fl_token != NULL)
 800795e:	e057      	b.n	8007a10 <input_uart+0x45c>
			switch(fill)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b07      	cmp	r3, #7
 8007964:	d84a      	bhi.n	80079fc <input_uart+0x448>
 8007966:	a201      	add	r2, pc, #4	; (adr r2, 800796c <input_uart+0x3b8>)
 8007968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800796c:	0800798d 	.word	0x0800798d
 8007970:	0800799b 	.word	0x0800799b
 8007974:	080079a9 	.word	0x080079a9
 8007978:	080079b7 	.word	0x080079b7
 800797c:	080079c5 	.word	0x080079c5
 8007980:	080079d3 	.word	0x080079d3
 8007984:	080079e1 	.word	0x080079e1
 8007988:	080079ef 	.word	0x080079ef
					strcpy(triangle_args.function,fl_token);
 800798c:	4b7f      	ldr	r3, [pc, #508]	; (8007b8c <input_uart+0x5d8>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4619      	mov	r1, r3
 8007992:	4887      	ldr	r0, [pc, #540]	; (8007bb0 <input_uart+0x5fc>)
 8007994:	f000 ffc8 	bl	8008928 <strcpy>
					break;
 8007998:	e030      	b.n	80079fc <input_uart+0x448>
					strcpy(triangle_args.x1,fl_token);
 800799a:	4b7c      	ldr	r3, [pc, #496]	; (8007b8c <input_uart+0x5d8>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4619      	mov	r1, r3
 80079a0:	4884      	ldr	r0, [pc, #528]	; (8007bb4 <input_uart+0x600>)
 80079a2:	f000 ffc1 	bl	8008928 <strcpy>
					break;
 80079a6:	e029      	b.n	80079fc <input_uart+0x448>
					strcpy(triangle_args.y1,fl_token);
 80079a8:	4b78      	ldr	r3, [pc, #480]	; (8007b8c <input_uart+0x5d8>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4619      	mov	r1, r3
 80079ae:	4882      	ldr	r0, [pc, #520]	; (8007bb8 <input_uart+0x604>)
 80079b0:	f000 ffba 	bl	8008928 <strcpy>
					break;
 80079b4:	e022      	b.n	80079fc <input_uart+0x448>
					strcpy(triangle_args.x2,fl_token);
 80079b6:	4b75      	ldr	r3, [pc, #468]	; (8007b8c <input_uart+0x5d8>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4619      	mov	r1, r3
 80079bc:	487f      	ldr	r0, [pc, #508]	; (8007bbc <input_uart+0x608>)
 80079be:	f000 ffb3 	bl	8008928 <strcpy>
					break;
 80079c2:	e01b      	b.n	80079fc <input_uart+0x448>
					strcpy(triangle_args.y2,fl_token);
 80079c4:	4b71      	ldr	r3, [pc, #452]	; (8007b8c <input_uart+0x5d8>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4619      	mov	r1, r3
 80079ca:	487d      	ldr	r0, [pc, #500]	; (8007bc0 <input_uart+0x60c>)
 80079cc:	f000 ffac 	bl	8008928 <strcpy>
					break;
 80079d0:	e014      	b.n	80079fc <input_uart+0x448>
					strcpy(triangle_args.xtop,fl_token);
 80079d2:	4b6e      	ldr	r3, [pc, #440]	; (8007b8c <input_uart+0x5d8>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4619      	mov	r1, r3
 80079d8:	487a      	ldr	r0, [pc, #488]	; (8007bc4 <input_uart+0x610>)
 80079da:	f000 ffa5 	bl	8008928 <strcpy>
					break;
 80079de:	e00d      	b.n	80079fc <input_uart+0x448>
					strcpy(triangle_args.ytop,fl_token);
 80079e0:	4b6a      	ldr	r3, [pc, #424]	; (8007b8c <input_uart+0x5d8>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4619      	mov	r1, r3
 80079e6:	4878      	ldr	r0, [pc, #480]	; (8007bc8 <input_uart+0x614>)
 80079e8:	f000 ff9e 	bl	8008928 <strcpy>
					break;
 80079ec:	e006      	b.n	80079fc <input_uart+0x448>
					strcpy(triangle_args.color,fl_token);
 80079ee:	4b67      	ldr	r3, [pc, #412]	; (8007b8c <input_uart+0x5d8>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4619      	mov	r1, r3
 80079f4:	4875      	ldr	r0, [pc, #468]	; (8007bcc <input_uart+0x618>)
 80079f6:	f000 ff97 	bl	8008928 <strcpy>
					break;
 80079fa:	bf00      	nop
			fill++;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	3301      	adds	r3, #1
 8007a00:	607b      	str	r3, [r7, #4]
			fl_token = strtok (NULL, ",");
 8007a02:	4966      	ldr	r1, [pc, #408]	; (8007b9c <input_uart+0x5e8>)
 8007a04:	2000      	movs	r0, #0
 8007a06:	f000 ff97 	bl	8008938 <strtok>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	4b5f      	ldr	r3, [pc, #380]	; (8007b8c <input_uart+0x5d8>)
 8007a0e:	601a      	str	r2, [r3, #0]
		while(fl_token != NULL)
 8007a10:	4b5e      	ldr	r3, [pc, #376]	; (8007b8c <input_uart+0x5d8>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1a3      	bne.n	8007960 <input_uart+0x3ac>
		if(fill<LEN_TRIANGLE_ARG)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2b07      	cmp	r3, #7
 8007a1c:	dc03      	bgt.n	8007a26 <input_uart+0x472>
			UART_puts("ERROR 3: to few arguments were given\r");
 8007a1e:	4860      	ldr	r0, [pc, #384]	; (8007ba0 <input_uart+0x5ec>)
 8007a20:	f7ff fd04 	bl	800742c <UART_puts>
 8007a24:	e005      	b.n	8007a32 <input_uart+0x47e>
		else if(fill>LEN_TRIANGLE_ARG)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2b08      	cmp	r3, #8
 8007a2a:	dd02      	ble.n	8007a32 <input_uart+0x47e>
			UART_puts("ERROR 4: to many arguments were given\r");
 8007a2c:	485d      	ldr	r0, [pc, #372]	; (8007ba4 <input_uart+0x5f0>)
 8007a2e:	f7ff fcfd 	bl	800742c <UART_puts>
		error_handling_2();
 8007a32:	f000 f9a3 	bl	8007d7c <error_handling_2>
		func_chooser();
 8007a36:	f000 fc6d 	bl	8008314 <func_chooser>
}
 8007a3a:	e127      	b.n	8007c8c <input_uart+0x6d8>
	else if(strcmp(functions, "tekst")==0)
 8007a3c:	4964      	ldr	r1, [pc, #400]	; (8007bd0 <input_uart+0x61c>)
 8007a3e:	485b      	ldr	r0, [pc, #364]	; (8007bac <input_uart+0x5f8>)
 8007a40:	f7f8 fbc2 	bl	80001c8 <strcmp>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d155      	bne.n	8007af6 <input_uart+0x542>
		fill=0;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	607b      	str	r3, [r7, #4]
		while(fl_token != NULL)
 8007a4e:	e03c      	b.n	8007aca <input_uart+0x516>
			switch(fill)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2b04      	cmp	r3, #4
 8007a54:	d82f      	bhi.n	8007ab6 <input_uart+0x502>
 8007a56:	a201      	add	r2, pc, #4	; (adr r2, 8007a5c <input_uart+0x4a8>)
 8007a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5c:	08007a71 	.word	0x08007a71
 8007a60:	08007a7f 	.word	0x08007a7f
 8007a64:	08007a8d 	.word	0x08007a8d
 8007a68:	08007a9b 	.word	0x08007a9b
 8007a6c:	08007aa9 	.word	0x08007aa9
					strcpy(text_args.function,fl_token);
 8007a70:	4b46      	ldr	r3, [pc, #280]	; (8007b8c <input_uart+0x5d8>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4619      	mov	r1, r3
 8007a76:	4857      	ldr	r0, [pc, #348]	; (8007bd4 <input_uart+0x620>)
 8007a78:	f000 ff56 	bl	8008928 <strcpy>
					break;
 8007a7c:	e01b      	b.n	8007ab6 <input_uart+0x502>
					strcpy(text_args.x1,fl_token);
 8007a7e:	4b43      	ldr	r3, [pc, #268]	; (8007b8c <input_uart+0x5d8>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4619      	mov	r1, r3
 8007a84:	4854      	ldr	r0, [pc, #336]	; (8007bd8 <input_uart+0x624>)
 8007a86:	f000 ff4f 	bl	8008928 <strcpy>
					break;
 8007a8a:	e014      	b.n	8007ab6 <input_uart+0x502>
					strcpy(text_args.y1,fl_token);
 8007a8c:	4b3f      	ldr	r3, [pc, #252]	; (8007b8c <input_uart+0x5d8>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4619      	mov	r1, r3
 8007a92:	4852      	ldr	r0, [pc, #328]	; (8007bdc <input_uart+0x628>)
 8007a94:	f000 ff48 	bl	8008928 <strcpy>
					break;
 8007a98:	e00d      	b.n	8007ab6 <input_uart+0x502>
					strcpy(text_args.text_in,fl_token);
 8007a9a:	4b3c      	ldr	r3, [pc, #240]	; (8007b8c <input_uart+0x5d8>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	484f      	ldr	r0, [pc, #316]	; (8007be0 <input_uart+0x62c>)
 8007aa2:	f000 ff41 	bl	8008928 <strcpy>
					break;
 8007aa6:	e006      	b.n	8007ab6 <input_uart+0x502>
					strcpy(text_args.color,fl_token);
 8007aa8:	4b38      	ldr	r3, [pc, #224]	; (8007b8c <input_uart+0x5d8>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4619      	mov	r1, r3
 8007aae:	484d      	ldr	r0, [pc, #308]	; (8007be4 <input_uart+0x630>)
 8007ab0:	f000 ff3a 	bl	8008928 <strcpy>
					break;
 8007ab4:	bf00      	nop
			fill++;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	607b      	str	r3, [r7, #4]
			fl_token = strtok (NULL, ",");
 8007abc:	4937      	ldr	r1, [pc, #220]	; (8007b9c <input_uart+0x5e8>)
 8007abe:	2000      	movs	r0, #0
 8007ac0:	f000 ff3a 	bl	8008938 <strtok>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	4b31      	ldr	r3, [pc, #196]	; (8007b8c <input_uart+0x5d8>)
 8007ac8:	601a      	str	r2, [r3, #0]
		while(fl_token != NULL)
 8007aca:	4b30      	ldr	r3, [pc, #192]	; (8007b8c <input_uart+0x5d8>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d1be      	bne.n	8007a50 <input_uart+0x49c>
		if(fill<LEN_TEXT_ARG)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2b05      	cmp	r3, #5
 8007ad6:	dc03      	bgt.n	8007ae0 <input_uart+0x52c>
			UART_puts("ERROR 3: to few arguments were given\r");
 8007ad8:	4831      	ldr	r0, [pc, #196]	; (8007ba0 <input_uart+0x5ec>)
 8007ada:	f7ff fca7 	bl	800742c <UART_puts>
 8007ade:	e005      	b.n	8007aec <input_uart+0x538>
		else if(fill>LEN_TEXT_ARG)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2b06      	cmp	r3, #6
 8007ae4:	dd02      	ble.n	8007aec <input_uart+0x538>
			UART_puts("ERROR 4: to many arguments were given\r");
 8007ae6:	482f      	ldr	r0, [pc, #188]	; (8007ba4 <input_uart+0x5f0>)
 8007ae8:	f7ff fca0 	bl	800742c <UART_puts>
		error_handling_2();
 8007aec:	f000 f946 	bl	8007d7c <error_handling_2>
		func_chooser();
 8007af0:	f000 fc10 	bl	8008314 <func_chooser>
}
 8007af4:	e0ca      	b.n	8007c8c <input_uart+0x6d8>
	else if(strcmp(functions, "bitmap")==0)
 8007af6:	493c      	ldr	r1, [pc, #240]	; (8007be8 <input_uart+0x634>)
 8007af8:	482c      	ldr	r0, [pc, #176]	; (8007bac <input_uart+0x5f8>)
 8007afa:	f7f8 fb65 	bl	80001c8 <strcmp>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f040 8086 	bne.w	8007c12 <input_uart+0x65e>
		fill=0;
 8007b06:	2300      	movs	r3, #0
 8007b08:	607b      	str	r3, [r7, #4]
		while(fl_token != NULL)
 8007b0a:	e033      	b.n	8007b74 <input_uart+0x5c0>
			switch(fill)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	d826      	bhi.n	8007b60 <input_uart+0x5ac>
 8007b12:	a201      	add	r2, pc, #4	; (adr r2, 8007b18 <input_uart+0x564>)
 8007b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b18:	08007b29 	.word	0x08007b29
 8007b1c:	08007b37 	.word	0x08007b37
 8007b20:	08007b45 	.word	0x08007b45
 8007b24:	08007b53 	.word	0x08007b53
					strcpy(bitmap_args.function,fl_token);
 8007b28:	4b18      	ldr	r3, [pc, #96]	; (8007b8c <input_uart+0x5d8>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	482f      	ldr	r0, [pc, #188]	; (8007bec <input_uart+0x638>)
 8007b30:	f000 fefa 	bl	8008928 <strcpy>
					break;
 8007b34:	e014      	b.n	8007b60 <input_uart+0x5ac>
					strcpy(bitmap_args.bitmap_nr,fl_token);
 8007b36:	4b15      	ldr	r3, [pc, #84]	; (8007b8c <input_uart+0x5d8>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	482c      	ldr	r0, [pc, #176]	; (8007bf0 <input_uart+0x63c>)
 8007b3e:	f000 fef3 	bl	8008928 <strcpy>
					break;
 8007b42:	e00d      	b.n	8007b60 <input_uart+0x5ac>
					strcpy(bitmap_args.x1,fl_token);
 8007b44:	4b11      	ldr	r3, [pc, #68]	; (8007b8c <input_uart+0x5d8>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4619      	mov	r1, r3
 8007b4a:	482a      	ldr	r0, [pc, #168]	; (8007bf4 <input_uart+0x640>)
 8007b4c:	f000 feec 	bl	8008928 <strcpy>
					break;
 8007b50:	e006      	b.n	8007b60 <input_uart+0x5ac>
					strcpy(bitmap_args.y1,fl_token);
 8007b52:	4b0e      	ldr	r3, [pc, #56]	; (8007b8c <input_uart+0x5d8>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4619      	mov	r1, r3
 8007b58:	4827      	ldr	r0, [pc, #156]	; (8007bf8 <input_uart+0x644>)
 8007b5a:	f000 fee5 	bl	8008928 <strcpy>
					break;
 8007b5e:	bf00      	nop
			fill++;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	3301      	adds	r3, #1
 8007b64:	607b      	str	r3, [r7, #4]
			fl_token = strtok (NULL, ",");
 8007b66:	490d      	ldr	r1, [pc, #52]	; (8007b9c <input_uart+0x5e8>)
 8007b68:	2000      	movs	r0, #0
 8007b6a:	f000 fee5 	bl	8008938 <strtok>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	4b06      	ldr	r3, [pc, #24]	; (8007b8c <input_uart+0x5d8>)
 8007b72:	601a      	str	r2, [r3, #0]
		while(fl_token != NULL)
 8007b74:	4b05      	ldr	r3, [pc, #20]	; (8007b8c <input_uart+0x5d8>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d1c7      	bne.n	8007b0c <input_uart+0x558>
		if(fill<LEN_BITMAP_ARG)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b03      	cmp	r3, #3
 8007b80:	dc3c      	bgt.n	8007bfc <input_uart+0x648>
			UART_puts("ERROR 3: to few arguments were given\r");
 8007b82:	4807      	ldr	r0, [pc, #28]	; (8007ba0 <input_uart+0x5ec>)
 8007b84:	f7ff fc52 	bl	800742c <UART_puts>
 8007b88:	e03e      	b.n	8007c08 <input_uart+0x654>
 8007b8a:	bf00      	nop
 8007b8c:	20013920 	.word	0x20013920
 8007b90:	20013485 	.word	0x20013485
 8007b94:	2001348a 	.word	0x2001348a
 8007b98:	200134ee 	.word	0x200134ee
 8007b9c:	08009218 	.word	0x08009218
 8007ba0:	08009228 	.word	0x08009228
 8007ba4:	08009250 	.word	0x08009250
 8007ba8:	08009294 	.word	0x08009294
 8007bac:	200138a0 	.word	0x200138a0
 8007bb0:	20013504 	.word	0x20013504
 8007bb4:	2001350e 	.word	0x2001350e
 8007bb8:	20013518 	.word	0x20013518
 8007bbc:	2001351d 	.word	0x2001351d
 8007bc0:	20013522 	.word	0x20013522
 8007bc4:	20013527 	.word	0x20013527
 8007bc8:	2001352c 	.word	0x2001352c
 8007bcc:	20013586 	.word	0x20013586
 8007bd0:	080092a0 	.word	0x080092a0
 8007bd4:	200136cc 	.word	0x200136cc
 8007bd8:	200136d6 	.word	0x200136d6
 8007bdc:	200136e0 	.word	0x200136e0
 8007be0:	20013712 	.word	0x20013712
 8007be4:	2001374e 	.word	0x2001374e
 8007be8:	080092a8 	.word	0x080092a8
 8007bec:	20013634 	.word	0x20013634
 8007bf0:	200136ac 	.word	0x200136ac
 8007bf4:	2001363e 	.word	0x2001363e
 8007bf8:	20013648 	.word	0x20013648
		else if(fill>LEN_BITMAP_ARG)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2b04      	cmp	r3, #4
 8007c00:	dd02      	ble.n	8007c08 <input_uart+0x654>
			UART_puts("ERROR 4: to many arguments were given\r");
 8007c02:	4824      	ldr	r0, [pc, #144]	; (8007c94 <input_uart+0x6e0>)
 8007c04:	f7ff fc12 	bl	800742c <UART_puts>
		error_handling_2();
 8007c08:	f000 f8b8 	bl	8007d7c <error_handling_2>
		func_chooser();
 8007c0c:	f000 fb82 	bl	8008314 <func_chooser>
}
 8007c10:	e03c      	b.n	8007c8c <input_uart+0x6d8>
	else if(strcmp(functions, "wacht")==0)
 8007c12:	4921      	ldr	r1, [pc, #132]	; (8007c98 <input_uart+0x6e4>)
 8007c14:	4821      	ldr	r0, [pc, #132]	; (8007c9c <input_uart+0x6e8>)
 8007c16:	f7f8 fad7 	bl	80001c8 <strcmp>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d135      	bne.n	8007c8c <input_uart+0x6d8>
		fill=0;
 8007c20:	2300      	movs	r3, #0
 8007c22:	607b      	str	r3, [r7, #4]
		while(fl_token != NULL)
 8007c24:	e01d      	b.n	8007c62 <input_uart+0x6ae>
			switch(fill)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d002      	beq.n	8007c32 <input_uart+0x67e>
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d007      	beq.n	8007c40 <input_uart+0x68c>
 8007c30:	e00d      	b.n	8007c4e <input_uart+0x69a>
				strcpy(wait_args.function,fl_token);
 8007c32:	4b1b      	ldr	r3, [pc, #108]	; (8007ca0 <input_uart+0x6ec>)
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	4619      	mov	r1, r3
 8007c38:	481a      	ldr	r0, [pc, #104]	; (8007ca4 <input_uart+0x6f0>)
 8007c3a:	f000 fe75 	bl	8008928 <strcpy>
				break;
 8007c3e:	e006      	b.n	8007c4e <input_uart+0x69a>
				strcpy(wait_args.time_ms,fl_token);
 8007c40:	4b17      	ldr	r3, [pc, #92]	; (8007ca0 <input_uart+0x6ec>)
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4619      	mov	r1, r3
 8007c46:	4818      	ldr	r0, [pc, #96]	; (8007ca8 <input_uart+0x6f4>)
 8007c48:	f000 fe6e 	bl	8008928 <strcpy>
				break;
 8007c4c:	bf00      	nop
			fill++;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	3301      	adds	r3, #1
 8007c52:	607b      	str	r3, [r7, #4]
			fl_token = strtok (NULL, ",");
 8007c54:	4915      	ldr	r1, [pc, #84]	; (8007cac <input_uart+0x6f8>)
 8007c56:	2000      	movs	r0, #0
 8007c58:	f000 fe6e 	bl	8008938 <strtok>
 8007c5c:	4602      	mov	r2, r0
 8007c5e:	4b10      	ldr	r3, [pc, #64]	; (8007ca0 <input_uart+0x6ec>)
 8007c60:	601a      	str	r2, [r3, #0]
		while(fl_token != NULL)
 8007c62:	4b0f      	ldr	r3, [pc, #60]	; (8007ca0 <input_uart+0x6ec>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1dd      	bne.n	8007c26 <input_uart+0x672>
		if(fill<LEN_WAIT_ARG)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	dc03      	bgt.n	8007c78 <input_uart+0x6c4>
			UART_puts("ERROR 3: to few arguments were given\r");
 8007c70:	480f      	ldr	r0, [pc, #60]	; (8007cb0 <input_uart+0x6fc>)
 8007c72:	f7ff fbdb 	bl	800742c <UART_puts>
 8007c76:	e005      	b.n	8007c84 <input_uart+0x6d0>
		else if(fill>LEN_WAIT_ARG)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	dd02      	ble.n	8007c84 <input_uart+0x6d0>
			UART_puts("ERROR 4: to many arguments were given\r");
 8007c7e:	4805      	ldr	r0, [pc, #20]	; (8007c94 <input_uart+0x6e0>)
 8007c80:	f7ff fbd4 	bl	800742c <UART_puts>
		error_handling_2();
 8007c84:	f000 f87a 	bl	8007d7c <error_handling_2>
		func_chooser();
 8007c88:	f000 fb44 	bl	8008314 <func_chooser>
}
 8007c8c:	bf00      	nop
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	08009250 	.word	0x08009250
 8007c98:	080092b0 	.word	0x080092b0
 8007c9c:	200138a0 	.word	0x200138a0
 8007ca0:	20013920 	.word	0x20013920
 8007ca4:	20013764 	.word	0x20013764
 8007ca8:	200137e1 	.word	0x200137e1
 8007cac:	08009218 	.word	0x08009218
 8007cb0:	08009228 	.word	0x08009228

08007cb4 <error_handling_1>:
/*!
 *  This function is used for error handling. There is a handling for wrong typed functions and out of range pixels
 */

void error_handling_1()
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	af00      	add	r7, sp, #0
	// functie controle
	if(	strcmp(fl_token,"clearscherm")!=0 && strcmp(fl_token,"lijn")!=0 && strcmp(fl_token,"ellips")!=0 && strcmp(fl_token,"rechthoek")!=0 &&
 8007cb8:	4b26      	ldr	r3, [pc, #152]	; (8007d54 <error_handling_1+0xa0>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4926      	ldr	r1, [pc, #152]	; (8007d58 <error_handling_1+0xa4>)
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7f8 fa82 	bl	80001c8 <strcmp>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d041      	beq.n	8007d4e <error_handling_1+0x9a>
 8007cca:	4b22      	ldr	r3, [pc, #136]	; (8007d54 <error_handling_1+0xa0>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4923      	ldr	r1, [pc, #140]	; (8007d5c <error_handling_1+0xa8>)
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f7f8 fa79 	bl	80001c8 <strcmp>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d038      	beq.n	8007d4e <error_handling_1+0x9a>
 8007cdc:	4b1d      	ldr	r3, [pc, #116]	; (8007d54 <error_handling_1+0xa0>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	491f      	ldr	r1, [pc, #124]	; (8007d60 <error_handling_1+0xac>)
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7f8 fa70 	bl	80001c8 <strcmp>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d02f      	beq.n	8007d4e <error_handling_1+0x9a>
 8007cee:	4b19      	ldr	r3, [pc, #100]	; (8007d54 <error_handling_1+0xa0>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	491c      	ldr	r1, [pc, #112]	; (8007d64 <error_handling_1+0xb0>)
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7f8 fa67 	bl	80001c8 <strcmp>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d026      	beq.n	8007d4e <error_handling_1+0x9a>
		strcmp(fl_token,"driehoek")!=0 && strcmp(fl_token,"tekst")!=0 && strcmp(fl_token,"bitmap")!=0 && strcmp(fl_token,"wacht")!=0)
 8007d00:	4b14      	ldr	r3, [pc, #80]	; (8007d54 <error_handling_1+0xa0>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4918      	ldr	r1, [pc, #96]	; (8007d68 <error_handling_1+0xb4>)
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7f8 fa5e 	bl	80001c8 <strcmp>
 8007d0c:	4603      	mov	r3, r0
	if(	strcmp(fl_token,"clearscherm")!=0 && strcmp(fl_token,"lijn")!=0 && strcmp(fl_token,"ellips")!=0 && strcmp(fl_token,"rechthoek")!=0 &&
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d01d      	beq.n	8007d4e <error_handling_1+0x9a>
		strcmp(fl_token,"driehoek")!=0 && strcmp(fl_token,"tekst")!=0 && strcmp(fl_token,"bitmap")!=0 && strcmp(fl_token,"wacht")!=0)
 8007d12:	4b10      	ldr	r3, [pc, #64]	; (8007d54 <error_handling_1+0xa0>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	4915      	ldr	r1, [pc, #84]	; (8007d6c <error_handling_1+0xb8>)
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7f8 fa55 	bl	80001c8 <strcmp>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d014      	beq.n	8007d4e <error_handling_1+0x9a>
 8007d24:	4b0b      	ldr	r3, [pc, #44]	; (8007d54 <error_handling_1+0xa0>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4911      	ldr	r1, [pc, #68]	; (8007d70 <error_handling_1+0xbc>)
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7f8 fa4c 	bl	80001c8 <strcmp>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d00b      	beq.n	8007d4e <error_handling_1+0x9a>
 8007d36:	4b07      	ldr	r3, [pc, #28]	; (8007d54 <error_handling_1+0xa0>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	490e      	ldr	r1, [pc, #56]	; (8007d74 <error_handling_1+0xc0>)
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7f8 fa43 	bl	80001c8 <strcmp>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d002      	beq.n	8007d4e <error_handling_1+0x9a>
			UART_puts("ERROR 1: wrong typed function\r");
 8007d48:	480b      	ldr	r0, [pc, #44]	; (8007d78 <error_handling_1+0xc4>)
 8007d4a:	f7ff fb6f 	bl	800742c <UART_puts>
}
 8007d4e:	bf00      	nop
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	20013920 	.word	0x20013920
 8007d58:	0800921c 	.word	0x0800921c
 8007d5c:	08009278 	.word	0x08009278
 8007d60:	08009280 	.word	0x08009280
 8007d64:	08009288 	.word	0x08009288
 8007d68:	08009294 	.word	0x08009294
 8007d6c:	080092a0 	.word	0x080092a0
 8007d70:	080092a8 	.word	0x080092a8
 8007d74:	080092b0 	.word	0x080092b0
 8007d78:	080092b8 	.word	0x080092b8

08007d7c <error_handling_2>:

void error_handling_2()
{
 8007d7c:	b598      	push	{r3, r4, r7, lr}
 8007d7e:	af00      	add	r7, sp, #0
	// out of range checker
	if(!strcmp(line_args.function,"lijn"))
 8007d80:	49ba      	ldr	r1, [pc, #744]	; (800806c <error_handling_2+0x2f0>)
 8007d82:	48bb      	ldr	r0, [pc, #748]	; (8008070 <error_handling_2+0x2f4>)
 8007d84:	f7f8 fa20 	bl	80001c8 <strcmp>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d142      	bne.n	8007e14 <error_handling_2+0x98>
	{
		if(atoi(line_args.x1) < 0 || atoi(line_args.x1) > 320) UART_puts("ERROR 2: pixel out of range\r");
 8007d8e:	48b9      	ldr	r0, [pc, #740]	; (8008074 <error_handling_2+0x2f8>)
 8007d90:	f000 fda2 	bl	80088d8 <atoi>
 8007d94:	4603      	mov	r3, r0
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	db06      	blt.n	8007da8 <error_handling_2+0x2c>
 8007d9a:	48b6      	ldr	r0, [pc, #728]	; (8008074 <error_handling_2+0x2f8>)
 8007d9c:	f000 fd9c 	bl	80088d8 <atoi>
 8007da0:	4603      	mov	r3, r0
 8007da2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007da6:	dd03      	ble.n	8007db0 <error_handling_2+0x34>
 8007da8:	48b3      	ldr	r0, [pc, #716]	; (8008078 <error_handling_2+0x2fc>)
 8007daa:	f7ff fb3f 	bl	800742c <UART_puts>
 8007dae:	e1e8      	b.n	8008182 <error_handling_2+0x406>
		else if(atoi(line_args.y1) < 0 || atoi(line_args.y1) > 240) UART_puts("ERROR 2: pixel out of range\r");
 8007db0:	48b2      	ldr	r0, [pc, #712]	; (800807c <error_handling_2+0x300>)
 8007db2:	f000 fd91 	bl	80088d8 <atoi>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	db05      	blt.n	8007dc8 <error_handling_2+0x4c>
 8007dbc:	48af      	ldr	r0, [pc, #700]	; (800807c <error_handling_2+0x300>)
 8007dbe:	f000 fd8b 	bl	80088d8 <atoi>
 8007dc2:	4603      	mov	r3, r0
 8007dc4:	2bf0      	cmp	r3, #240	; 0xf0
 8007dc6:	dd03      	ble.n	8007dd0 <error_handling_2+0x54>
 8007dc8:	48ab      	ldr	r0, [pc, #684]	; (8008078 <error_handling_2+0x2fc>)
 8007dca:	f7ff fb2f 	bl	800742c <UART_puts>
 8007dce:	e1d8      	b.n	8008182 <error_handling_2+0x406>
		else if(atoi(line_args.x2) < 0 || atoi(line_args.x2) > 320) UART_puts("ERROR 2: pixel out of range\r");
 8007dd0:	48ab      	ldr	r0, [pc, #684]	; (8008080 <error_handling_2+0x304>)
 8007dd2:	f000 fd81 	bl	80088d8 <atoi>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	db06      	blt.n	8007dea <error_handling_2+0x6e>
 8007ddc:	48a8      	ldr	r0, [pc, #672]	; (8008080 <error_handling_2+0x304>)
 8007dde:	f000 fd7b 	bl	80088d8 <atoi>
 8007de2:	4603      	mov	r3, r0
 8007de4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007de8:	dd03      	ble.n	8007df2 <error_handling_2+0x76>
 8007dea:	48a3      	ldr	r0, [pc, #652]	; (8008078 <error_handling_2+0x2fc>)
 8007dec:	f7ff fb1e 	bl	800742c <UART_puts>
 8007df0:	e1c7      	b.n	8008182 <error_handling_2+0x406>
		else if(atoi(line_args.y2) < 0 || atoi(line_args.y2) > 240) UART_puts("ERROR 2: pixel out of range\r");
 8007df2:	48a4      	ldr	r0, [pc, #656]	; (8008084 <error_handling_2+0x308>)
 8007df4:	f000 fd70 	bl	80088d8 <atoi>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	db06      	blt.n	8007e0c <error_handling_2+0x90>
 8007dfe:	48a1      	ldr	r0, [pc, #644]	; (8008084 <error_handling_2+0x308>)
 8007e00:	f000 fd6a 	bl	80088d8 <atoi>
 8007e04:	4603      	mov	r3, r0
 8007e06:	2bf0      	cmp	r3, #240	; 0xf0
 8007e08:	f340 81bb 	ble.w	8008182 <error_handling_2+0x406>
 8007e0c:	489a      	ldr	r0, [pc, #616]	; (8008078 <error_handling_2+0x2fc>)
 8007e0e:	f7ff fb0d 	bl	800742c <UART_puts>
		if(atoi(bitmap_args.x1) < 0 || atoi(bitmap_args.x1) > 320) UART_puts("ERROR 2: pixel out of range\r");
		else if(atoi(bitmap_args.y1) < 0 || atoi(bitmap_args.y1) > 240) UART_puts("ERROR 2: pixel out of range\r");
		else if(atoi(bitmap_args.x1)+40 > 320) UART_puts("ERROR 2: pixel out of range\r");
		else if(atoi(bitmap_args.y1)+40 > 240) UART_puts("ERROR 2: pixel out of range\r");
	}
}
 8007e12:	e1b6      	b.n	8008182 <error_handling_2+0x406>
	else if(!strcmp(ellips_args.function,"ellips"))
 8007e14:	499c      	ldr	r1, [pc, #624]	; (8008088 <error_handling_2+0x30c>)
 8007e16:	489d      	ldr	r0, [pc, #628]	; (800808c <error_handling_2+0x310>)
 8007e18:	f7f8 f9d6 	bl	80001c8 <strcmp>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d156      	bne.n	8007ed0 <error_handling_2+0x154>
		if(atoi(ellips_args.x_center) < 0 || atoi(ellips_args.x_center) > 320) UART_puts("ERROR 2: pixel out of range\r");
 8007e22:	489b      	ldr	r0, [pc, #620]	; (8008090 <error_handling_2+0x314>)
 8007e24:	f000 fd58 	bl	80088d8 <atoi>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	db06      	blt.n	8007e3c <error_handling_2+0xc0>
 8007e2e:	4898      	ldr	r0, [pc, #608]	; (8008090 <error_handling_2+0x314>)
 8007e30:	f000 fd52 	bl	80088d8 <atoi>
 8007e34:	4603      	mov	r3, r0
 8007e36:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007e3a:	dd03      	ble.n	8007e44 <error_handling_2+0xc8>
 8007e3c:	488e      	ldr	r0, [pc, #568]	; (8008078 <error_handling_2+0x2fc>)
 8007e3e:	f7ff faf5 	bl	800742c <UART_puts>
 8007e42:	e19e      	b.n	8008182 <error_handling_2+0x406>
		else if(atoi(ellips_args.y_center) < 0 || atoi(ellips_args.y_center) > 240) UART_puts("ERROR 2: pixel out of range\r");
 8007e44:	4893      	ldr	r0, [pc, #588]	; (8008094 <error_handling_2+0x318>)
 8007e46:	f000 fd47 	bl	80088d8 <atoi>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	db05      	blt.n	8007e5c <error_handling_2+0xe0>
 8007e50:	4890      	ldr	r0, [pc, #576]	; (8008094 <error_handling_2+0x318>)
 8007e52:	f000 fd41 	bl	80088d8 <atoi>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2bf0      	cmp	r3, #240	; 0xf0
 8007e5a:	dd03      	ble.n	8007e64 <error_handling_2+0xe8>
 8007e5c:	4886      	ldr	r0, [pc, #536]	; (8008078 <error_handling_2+0x2fc>)
 8007e5e:	f7ff fae5 	bl	800742c <UART_puts>
 8007e62:	e18e      	b.n	8008182 <error_handling_2+0x406>
		else if((atoi(ellips_args.x_center) - atoi(ellips_args.x_rad)) < 0 || (atoi(ellips_args.x_center) + atoi(ellips_args.x_rad)) > 320) UART_puts("ERROR 2: pixel out of range\r");
 8007e64:	488a      	ldr	r0, [pc, #552]	; (8008090 <error_handling_2+0x314>)
 8007e66:	f000 fd37 	bl	80088d8 <atoi>
 8007e6a:	4604      	mov	r4, r0
 8007e6c:	488a      	ldr	r0, [pc, #552]	; (8008098 <error_handling_2+0x31c>)
 8007e6e:	f000 fd33 	bl	80088d8 <atoi>
 8007e72:	4603      	mov	r3, r0
 8007e74:	1ae3      	subs	r3, r4, r3
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	db0b      	blt.n	8007e92 <error_handling_2+0x116>
 8007e7a:	4885      	ldr	r0, [pc, #532]	; (8008090 <error_handling_2+0x314>)
 8007e7c:	f000 fd2c 	bl	80088d8 <atoi>
 8007e80:	4604      	mov	r4, r0
 8007e82:	4885      	ldr	r0, [pc, #532]	; (8008098 <error_handling_2+0x31c>)
 8007e84:	f000 fd28 	bl	80088d8 <atoi>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	4423      	add	r3, r4
 8007e8c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007e90:	dd03      	ble.n	8007e9a <error_handling_2+0x11e>
 8007e92:	4879      	ldr	r0, [pc, #484]	; (8008078 <error_handling_2+0x2fc>)
 8007e94:	f7ff faca 	bl	800742c <UART_puts>
 8007e98:	e173      	b.n	8008182 <error_handling_2+0x406>
		else if((atoi(ellips_args.y_center) - atoi(ellips_args.y_rad)) < 0 || (atoi(ellips_args.y_center) + atoi(ellips_args.y_rad)) > 240) UART_puts("ERROR 2: pixel out of range\r");
 8007e9a:	487e      	ldr	r0, [pc, #504]	; (8008094 <error_handling_2+0x318>)
 8007e9c:	f000 fd1c 	bl	80088d8 <atoi>
 8007ea0:	4604      	mov	r4, r0
 8007ea2:	487e      	ldr	r0, [pc, #504]	; (800809c <error_handling_2+0x320>)
 8007ea4:	f000 fd18 	bl	80088d8 <atoi>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	1ae3      	subs	r3, r4, r3
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	db0b      	blt.n	8007ec8 <error_handling_2+0x14c>
 8007eb0:	4878      	ldr	r0, [pc, #480]	; (8008094 <error_handling_2+0x318>)
 8007eb2:	f000 fd11 	bl	80088d8 <atoi>
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	4878      	ldr	r0, [pc, #480]	; (800809c <error_handling_2+0x320>)
 8007eba:	f000 fd0d 	bl	80088d8 <atoi>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	4423      	add	r3, r4
 8007ec2:	2bf0      	cmp	r3, #240	; 0xf0
 8007ec4:	f340 815d 	ble.w	8008182 <error_handling_2+0x406>
 8007ec8:	486b      	ldr	r0, [pc, #428]	; (8008078 <error_handling_2+0x2fc>)
 8007eca:	f7ff faaf 	bl	800742c <UART_puts>
}
 8007ece:	e158      	b.n	8008182 <error_handling_2+0x406>
	else if(!strcmp(rectangle_args.function,"rechthoek"))
 8007ed0:	4973      	ldr	r1, [pc, #460]	; (80080a0 <error_handling_2+0x324>)
 8007ed2:	4874      	ldr	r0, [pc, #464]	; (80080a4 <error_handling_2+0x328>)
 8007ed4:	f7f8 f978 	bl	80001c8 <strcmp>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d142      	bne.n	8007f64 <error_handling_2+0x1e8>
		if(atoi(rectangle_args.x1) < 0 || atoi(rectangle_args.x1) > 320) UART_puts("ERROR 2: pixel out of range\r");
 8007ede:	4872      	ldr	r0, [pc, #456]	; (80080a8 <error_handling_2+0x32c>)
 8007ee0:	f000 fcfa 	bl	80088d8 <atoi>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	db06      	blt.n	8007ef8 <error_handling_2+0x17c>
 8007eea:	486f      	ldr	r0, [pc, #444]	; (80080a8 <error_handling_2+0x32c>)
 8007eec:	f000 fcf4 	bl	80088d8 <atoi>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007ef6:	dd03      	ble.n	8007f00 <error_handling_2+0x184>
 8007ef8:	485f      	ldr	r0, [pc, #380]	; (8008078 <error_handling_2+0x2fc>)
 8007efa:	f7ff fa97 	bl	800742c <UART_puts>
 8007efe:	e140      	b.n	8008182 <error_handling_2+0x406>
		else if(atoi(rectangle_args.y1) < 0 || atoi(rectangle_args.y1) > 240) UART_puts("ERROR 2: pixel out of range\r");
 8007f00:	486a      	ldr	r0, [pc, #424]	; (80080ac <error_handling_2+0x330>)
 8007f02:	f000 fce9 	bl	80088d8 <atoi>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	db05      	blt.n	8007f18 <error_handling_2+0x19c>
 8007f0c:	4867      	ldr	r0, [pc, #412]	; (80080ac <error_handling_2+0x330>)
 8007f0e:	f000 fce3 	bl	80088d8 <atoi>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2bf0      	cmp	r3, #240	; 0xf0
 8007f16:	dd03      	ble.n	8007f20 <error_handling_2+0x1a4>
 8007f18:	4857      	ldr	r0, [pc, #348]	; (8008078 <error_handling_2+0x2fc>)
 8007f1a:	f7ff fa87 	bl	800742c <UART_puts>
 8007f1e:	e130      	b.n	8008182 <error_handling_2+0x406>
		else if(atoi(rectangle_args.x2) < 0 || atoi(rectangle_args.x2) > 320) UART_puts("ERROR 2: pixel out of range\r");
 8007f20:	4863      	ldr	r0, [pc, #396]	; (80080b0 <error_handling_2+0x334>)
 8007f22:	f000 fcd9 	bl	80088d8 <atoi>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	db06      	blt.n	8007f3a <error_handling_2+0x1be>
 8007f2c:	4860      	ldr	r0, [pc, #384]	; (80080b0 <error_handling_2+0x334>)
 8007f2e:	f000 fcd3 	bl	80088d8 <atoi>
 8007f32:	4603      	mov	r3, r0
 8007f34:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007f38:	dd03      	ble.n	8007f42 <error_handling_2+0x1c6>
 8007f3a:	484f      	ldr	r0, [pc, #316]	; (8008078 <error_handling_2+0x2fc>)
 8007f3c:	f7ff fa76 	bl	800742c <UART_puts>
 8007f40:	e11f      	b.n	8008182 <error_handling_2+0x406>
		else if(atoi(rectangle_args.y2) < 0 || atoi(rectangle_args.y2) > 240) UART_puts("ERROR 2: pixel out of range\r");
 8007f42:	485c      	ldr	r0, [pc, #368]	; (80080b4 <error_handling_2+0x338>)
 8007f44:	f000 fcc8 	bl	80088d8 <atoi>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	db06      	blt.n	8007f5c <error_handling_2+0x1e0>
 8007f4e:	4859      	ldr	r0, [pc, #356]	; (80080b4 <error_handling_2+0x338>)
 8007f50:	f000 fcc2 	bl	80088d8 <atoi>
 8007f54:	4603      	mov	r3, r0
 8007f56:	2bf0      	cmp	r3, #240	; 0xf0
 8007f58:	f340 8113 	ble.w	8008182 <error_handling_2+0x406>
 8007f5c:	4846      	ldr	r0, [pc, #280]	; (8008078 <error_handling_2+0x2fc>)
 8007f5e:	f7ff fa65 	bl	800742c <UART_puts>
}
 8007f62:	e10e      	b.n	8008182 <error_handling_2+0x406>
	else if(!strcmp(triangle_args.function,"driehoek"))
 8007f64:	4954      	ldr	r1, [pc, #336]	; (80080b8 <error_handling_2+0x33c>)
 8007f66:	4855      	ldr	r0, [pc, #340]	; (80080bc <error_handling_2+0x340>)
 8007f68:	f7f8 f92e 	bl	80001c8 <strcmp>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d163      	bne.n	800803a <error_handling_2+0x2be>
		if(atoi(triangle_args.x1) < 0 || atoi(triangle_args.x1) > 320) UART_puts("ERROR 2: pixel out of range\r");
 8007f72:	4853      	ldr	r0, [pc, #332]	; (80080c0 <error_handling_2+0x344>)
 8007f74:	f000 fcb0 	bl	80088d8 <atoi>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	db06      	blt.n	8007f8c <error_handling_2+0x210>
 8007f7e:	4850      	ldr	r0, [pc, #320]	; (80080c0 <error_handling_2+0x344>)
 8007f80:	f000 fcaa 	bl	80088d8 <atoi>
 8007f84:	4603      	mov	r3, r0
 8007f86:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007f8a:	dd03      	ble.n	8007f94 <error_handling_2+0x218>
 8007f8c:	483a      	ldr	r0, [pc, #232]	; (8008078 <error_handling_2+0x2fc>)
 8007f8e:	f7ff fa4d 	bl	800742c <UART_puts>
 8007f92:	e0f6      	b.n	8008182 <error_handling_2+0x406>
		else if(atoi(triangle_args.y1) < 0 || atoi(triangle_args.y1) > 240) UART_puts("ERROR 2: pixel out of range\r");
 8007f94:	484b      	ldr	r0, [pc, #300]	; (80080c4 <error_handling_2+0x348>)
 8007f96:	f000 fc9f 	bl	80088d8 <atoi>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	db05      	blt.n	8007fac <error_handling_2+0x230>
 8007fa0:	4848      	ldr	r0, [pc, #288]	; (80080c4 <error_handling_2+0x348>)
 8007fa2:	f000 fc99 	bl	80088d8 <atoi>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2bf0      	cmp	r3, #240	; 0xf0
 8007faa:	dd03      	ble.n	8007fb4 <error_handling_2+0x238>
 8007fac:	4832      	ldr	r0, [pc, #200]	; (8008078 <error_handling_2+0x2fc>)
 8007fae:	f7ff fa3d 	bl	800742c <UART_puts>
 8007fb2:	e0e6      	b.n	8008182 <error_handling_2+0x406>
		else if(atoi(triangle_args.x2) < 0 || atoi(triangle_args.x2) > 320) UART_puts("ERROR 2: pixel out of range\r");
 8007fb4:	4844      	ldr	r0, [pc, #272]	; (80080c8 <error_handling_2+0x34c>)
 8007fb6:	f000 fc8f 	bl	80088d8 <atoi>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	db06      	blt.n	8007fce <error_handling_2+0x252>
 8007fc0:	4841      	ldr	r0, [pc, #260]	; (80080c8 <error_handling_2+0x34c>)
 8007fc2:	f000 fc89 	bl	80088d8 <atoi>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8007fcc:	dd03      	ble.n	8007fd6 <error_handling_2+0x25a>
 8007fce:	482a      	ldr	r0, [pc, #168]	; (8008078 <error_handling_2+0x2fc>)
 8007fd0:	f7ff fa2c 	bl	800742c <UART_puts>
 8007fd4:	e0d5      	b.n	8008182 <error_handling_2+0x406>
		else if(atoi(triangle_args.y2) < 0 || atoi(triangle_args.y2) > 240) UART_puts("ERROR 2: pixel out of range\r");
 8007fd6:	483d      	ldr	r0, [pc, #244]	; (80080cc <error_handling_2+0x350>)
 8007fd8:	f000 fc7e 	bl	80088d8 <atoi>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	db05      	blt.n	8007fee <error_handling_2+0x272>
 8007fe2:	483a      	ldr	r0, [pc, #232]	; (80080cc <error_handling_2+0x350>)
 8007fe4:	f000 fc78 	bl	80088d8 <atoi>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2bf0      	cmp	r3, #240	; 0xf0
 8007fec:	dd03      	ble.n	8007ff6 <error_handling_2+0x27a>
 8007fee:	4822      	ldr	r0, [pc, #136]	; (8008078 <error_handling_2+0x2fc>)
 8007ff0:	f7ff fa1c 	bl	800742c <UART_puts>
 8007ff4:	e0c5      	b.n	8008182 <error_handling_2+0x406>
		else if(atoi(triangle_args.xtop) < 0 || atoi(triangle_args.xtop) > 320) UART_puts("ERROR 2: pixel out of range\r");
 8007ff6:	4836      	ldr	r0, [pc, #216]	; (80080d0 <error_handling_2+0x354>)
 8007ff8:	f000 fc6e 	bl	80088d8 <atoi>
 8007ffc:	4603      	mov	r3, r0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	db06      	blt.n	8008010 <error_handling_2+0x294>
 8008002:	4833      	ldr	r0, [pc, #204]	; (80080d0 <error_handling_2+0x354>)
 8008004:	f000 fc68 	bl	80088d8 <atoi>
 8008008:	4603      	mov	r3, r0
 800800a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800800e:	dd03      	ble.n	8008018 <error_handling_2+0x29c>
 8008010:	4819      	ldr	r0, [pc, #100]	; (8008078 <error_handling_2+0x2fc>)
 8008012:	f7ff fa0b 	bl	800742c <UART_puts>
 8008016:	e0b4      	b.n	8008182 <error_handling_2+0x406>
		else if(atoi(triangle_args.ytop) < 0 || atoi(triangle_args.ytop) > 240) UART_puts("ERROR 2: pixel out of range\r");
 8008018:	482e      	ldr	r0, [pc, #184]	; (80080d4 <error_handling_2+0x358>)
 800801a:	f000 fc5d 	bl	80088d8 <atoi>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	db06      	blt.n	8008032 <error_handling_2+0x2b6>
 8008024:	482b      	ldr	r0, [pc, #172]	; (80080d4 <error_handling_2+0x358>)
 8008026:	f000 fc57 	bl	80088d8 <atoi>
 800802a:	4603      	mov	r3, r0
 800802c:	2bf0      	cmp	r3, #240	; 0xf0
 800802e:	f340 80a8 	ble.w	8008182 <error_handling_2+0x406>
 8008032:	4811      	ldr	r0, [pc, #68]	; (8008078 <error_handling_2+0x2fc>)
 8008034:	f7ff f9fa 	bl	800742c <UART_puts>
}
 8008038:	e0a3      	b.n	8008182 <error_handling_2+0x406>
	else if(!strcmp(text_args.function,"tekst"))
 800803a:	4927      	ldr	r1, [pc, #156]	; (80080d8 <error_handling_2+0x35c>)
 800803c:	4827      	ldr	r0, [pc, #156]	; (80080dc <error_handling_2+0x360>)
 800803e:	f7f8 f8c3 	bl	80001c8 <strcmp>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d15d      	bne.n	8008104 <error_handling_2+0x388>
		if(atoi(text_args.x1) < 0 || atoi(text_args.x1) > 320) UART_puts("ERROR 2: pixel out of range\r");
 8008048:	4825      	ldr	r0, [pc, #148]	; (80080e0 <error_handling_2+0x364>)
 800804a:	f000 fc45 	bl	80088d8 <atoi>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	db06      	blt.n	8008062 <error_handling_2+0x2e6>
 8008054:	4822      	ldr	r0, [pc, #136]	; (80080e0 <error_handling_2+0x364>)
 8008056:	f000 fc3f 	bl	80088d8 <atoi>
 800805a:	4603      	mov	r3, r0
 800805c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008060:	dd40      	ble.n	80080e4 <error_handling_2+0x368>
 8008062:	4805      	ldr	r0, [pc, #20]	; (8008078 <error_handling_2+0x2fc>)
 8008064:	f7ff f9e2 	bl	800742c <UART_puts>
 8008068:	e08b      	b.n	8008182 <error_handling_2+0x406>
 800806a:	bf00      	nop
 800806c:	08009278 	.word	0x08009278
 8008070:	2001359c 	.word	0x2001359c
 8008074:	200135a6 	.word	0x200135a6
 8008078:	080092d8 	.word	0x080092d8
 800807c:	200135b0 	.word	0x200135b0
 8008080:	200135b5 	.word	0x200135b5
 8008084:	200135ba 	.word	0x200135ba
 8008088:	08009280 	.word	0x08009280
 800808c:	200137fc 	.word	0x200137fc
 8008090:	20013829 	.word	0x20013829
 8008094:	2001382e 	.word	0x2001382e
 8008098:	20013833 	.word	0x20013833
 800809c:	20013838 	.word	0x20013838
 80080a0:	08009288 	.word	0x08009288
 80080a4:	2001346c 	.word	0x2001346c
 80080a8:	20013476 	.word	0x20013476
 80080ac:	20013480 	.word	0x20013480
 80080b0:	20013485 	.word	0x20013485
 80080b4:	2001348a 	.word	0x2001348a
 80080b8:	08009294 	.word	0x08009294
 80080bc:	20013504 	.word	0x20013504
 80080c0:	2001350e 	.word	0x2001350e
 80080c4:	20013518 	.word	0x20013518
 80080c8:	2001351d 	.word	0x2001351d
 80080cc:	20013522 	.word	0x20013522
 80080d0:	20013527 	.word	0x20013527
 80080d4:	2001352c 	.word	0x2001352c
 80080d8:	080092a0 	.word	0x080092a0
 80080dc:	200136cc 	.word	0x200136cc
 80080e0:	200136d6 	.word	0x200136d6
		else if(atoi(text_args.y2) < 0 || atoi(text_args.y2) > 240) UART_puts("ERROR 2: pixel out of range\r");
 80080e4:	4828      	ldr	r0, [pc, #160]	; (8008188 <error_handling_2+0x40c>)
 80080e6:	f000 fbf7 	bl	80088d8 <atoi>
 80080ea:	4603      	mov	r3, r0
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	db05      	blt.n	80080fc <error_handling_2+0x380>
 80080f0:	4825      	ldr	r0, [pc, #148]	; (8008188 <error_handling_2+0x40c>)
 80080f2:	f000 fbf1 	bl	80088d8 <atoi>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2bf0      	cmp	r3, #240	; 0xf0
 80080fa:	dd42      	ble.n	8008182 <error_handling_2+0x406>
 80080fc:	4823      	ldr	r0, [pc, #140]	; (800818c <error_handling_2+0x410>)
 80080fe:	f7ff f995 	bl	800742c <UART_puts>
}
 8008102:	e03e      	b.n	8008182 <error_handling_2+0x406>
	else if(!strcmp(bitmap_args.function,"bitmap"))
 8008104:	4922      	ldr	r1, [pc, #136]	; (8008190 <error_handling_2+0x414>)
 8008106:	4823      	ldr	r0, [pc, #140]	; (8008194 <error_handling_2+0x418>)
 8008108:	f7f8 f85e 	bl	80001c8 <strcmp>
 800810c:	4603      	mov	r3, r0
 800810e:	2b00      	cmp	r3, #0
 8008110:	d137      	bne.n	8008182 <error_handling_2+0x406>
		if(atoi(bitmap_args.x1) < 0 || atoi(bitmap_args.x1) > 320) UART_puts("ERROR 2: pixel out of range\r");
 8008112:	4821      	ldr	r0, [pc, #132]	; (8008198 <error_handling_2+0x41c>)
 8008114:	f000 fbe0 	bl	80088d8 <atoi>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	db06      	blt.n	800812c <error_handling_2+0x3b0>
 800811e:	481e      	ldr	r0, [pc, #120]	; (8008198 <error_handling_2+0x41c>)
 8008120:	f000 fbda 	bl	80088d8 <atoi>
 8008124:	4603      	mov	r3, r0
 8008126:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800812a:	dd03      	ble.n	8008134 <error_handling_2+0x3b8>
 800812c:	4817      	ldr	r0, [pc, #92]	; (800818c <error_handling_2+0x410>)
 800812e:	f7ff f97d 	bl	800742c <UART_puts>
 8008132:	e026      	b.n	8008182 <error_handling_2+0x406>
		else if(atoi(bitmap_args.y1) < 0 || atoi(bitmap_args.y1) > 240) UART_puts("ERROR 2: pixel out of range\r");
 8008134:	4819      	ldr	r0, [pc, #100]	; (800819c <error_handling_2+0x420>)
 8008136:	f000 fbcf 	bl	80088d8 <atoi>
 800813a:	4603      	mov	r3, r0
 800813c:	2b00      	cmp	r3, #0
 800813e:	db05      	blt.n	800814c <error_handling_2+0x3d0>
 8008140:	4816      	ldr	r0, [pc, #88]	; (800819c <error_handling_2+0x420>)
 8008142:	f000 fbc9 	bl	80088d8 <atoi>
 8008146:	4603      	mov	r3, r0
 8008148:	2bf0      	cmp	r3, #240	; 0xf0
 800814a:	dd03      	ble.n	8008154 <error_handling_2+0x3d8>
 800814c:	480f      	ldr	r0, [pc, #60]	; (800818c <error_handling_2+0x410>)
 800814e:	f7ff f96d 	bl	800742c <UART_puts>
 8008152:	e016      	b.n	8008182 <error_handling_2+0x406>
		else if(atoi(bitmap_args.x1)+40 > 320) UART_puts("ERROR 2: pixel out of range\r");
 8008154:	4810      	ldr	r0, [pc, #64]	; (8008198 <error_handling_2+0x41c>)
 8008156:	f000 fbbf 	bl	80088d8 <atoi>
 800815a:	4603      	mov	r3, r0
 800815c:	3328      	adds	r3, #40	; 0x28
 800815e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8008162:	dd03      	ble.n	800816c <error_handling_2+0x3f0>
 8008164:	4809      	ldr	r0, [pc, #36]	; (800818c <error_handling_2+0x410>)
 8008166:	f7ff f961 	bl	800742c <UART_puts>
}
 800816a:	e00a      	b.n	8008182 <error_handling_2+0x406>
		else if(atoi(bitmap_args.y1)+40 > 240) UART_puts("ERROR 2: pixel out of range\r");
 800816c:	480b      	ldr	r0, [pc, #44]	; (800819c <error_handling_2+0x420>)
 800816e:	f000 fbb3 	bl	80088d8 <atoi>
 8008172:	4603      	mov	r3, r0
 8008174:	3328      	adds	r3, #40	; 0x28
 8008176:	2bf0      	cmp	r3, #240	; 0xf0
 8008178:	dd03      	ble.n	8008182 <error_handling_2+0x406>
 800817a:	4804      	ldr	r0, [pc, #16]	; (800818c <error_handling_2+0x410>)
 800817c:	f7ff f956 	bl	800742c <UART_puts>
}
 8008180:	e7ff      	b.n	8008182 <error_handling_2+0x406>
 8008182:	bf00      	nop
 8008184:	bd98      	pop	{r3, r4, r7, pc}
 8008186:	bf00      	nop
 8008188:	200136ea 	.word	0x200136ea
 800818c:	080092d8 	.word	0x080092d8
 8008190:	080092a8 	.word	0x080092a8
 8008194:	20013634 	.word	0x20013634
 8008198:	2001363e 	.word	0x2001363e
 800819c:	20013648 	.word	0x20013648

080081a0 <color>:

/********************************************//**
 *	converting the color array to defined hex values
 ***********************************************/
int color(char *color_input)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
	if(strcmp(color_input, "zwart")==0) return zwart;
 80081a8:	494a      	ldr	r1, [pc, #296]	; (80082d4 <color+0x134>)
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f7f8 f80c 	bl	80001c8 <strcmp>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d101      	bne.n	80081ba <color+0x1a>
 80081b6:	2300      	movs	r3, #0
 80081b8:	e087      	b.n	80082ca <color+0x12a>
	else if(strcmp(color_input, "blauw")==0) return blauw;
 80081ba:	4947      	ldr	r1, [pc, #284]	; (80082d8 <color+0x138>)
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f7f8 f803 	bl	80001c8 <strcmp>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d101      	bne.n	80081cc <color+0x2c>
 80081c8:	2303      	movs	r3, #3
 80081ca:	e07e      	b.n	80082ca <color+0x12a>
	else if(strcmp(color_input, "lichtblauw")==0) return lichtblauw;
 80081cc:	4943      	ldr	r1, [pc, #268]	; (80082dc <color+0x13c>)
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f7f7 fffa 	bl	80001c8 <strcmp>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d101      	bne.n	80081de <color+0x3e>
 80081da:	2373      	movs	r3, #115	; 0x73
 80081dc:	e075      	b.n	80082ca <color+0x12a>
	else if(strcmp(color_input, "groen")==0) return groen;
 80081de:	4940      	ldr	r1, [pc, #256]	; (80082e0 <color+0x140>)
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f7f7 fff1 	bl	80001c8 <strcmp>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d101      	bne.n	80081f0 <color+0x50>
 80081ec:	231c      	movs	r3, #28
 80081ee:	e06c      	b.n	80082ca <color+0x12a>
	else if(strcmp(color_input, "lichtgroen")==0) return lichtgroen;
 80081f0:	493c      	ldr	r1, [pc, #240]	; (80082e4 <color+0x144>)
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f7f7 ffe8 	bl	80001c8 <strcmp>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d101      	bne.n	8008202 <color+0x62>
 80081fe:	235c      	movs	r3, #92	; 0x5c
 8008200:	e063      	b.n	80082ca <color+0x12a>
	else if(strcmp(color_input, "rood")==0) return rood;
 8008202:	4939      	ldr	r1, [pc, #228]	; (80082e8 <color+0x148>)
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f7f7 ffdf 	bl	80001c8 <strcmp>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <color+0x74>
 8008210:	23e0      	movs	r3, #224	; 0xe0
 8008212:	e05a      	b.n	80082ca <color+0x12a>
	else if(strcmp(color_input, "lichtrood")==0) return lichtrood;
 8008214:	4935      	ldr	r1, [pc, #212]	; (80082ec <color+0x14c>)
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7f7 ffd6 	bl	80001c8 <strcmp>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <color+0x86>
 8008222:	23e9      	movs	r3, #233	; 0xe9
 8008224:	e051      	b.n	80082ca <color+0x12a>
	else if(strcmp(color_input, "wit")==0) return wit;
 8008226:	4932      	ldr	r1, [pc, #200]	; (80082f0 <color+0x150>)
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f7f7 ffcd 	bl	80001c8 <strcmp>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d101      	bne.n	8008238 <color+0x98>
 8008234:	23ff      	movs	r3, #255	; 0xff
 8008236:	e048      	b.n	80082ca <color+0x12a>
	else if(strcmp(color_input, "cyaan")==0) return cyaan;
 8008238:	492e      	ldr	r1, [pc, #184]	; (80082f4 <color+0x154>)
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f7f7 ffc4 	bl	80001c8 <strcmp>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d101      	bne.n	800824a <color+0xaa>
 8008246:	231f      	movs	r3, #31
 8008248:	e03f      	b.n	80082ca <color+0x12a>
	else if(strcmp(color_input, "lichtcyaan")==0) return lichtcyaan;
 800824a:	492b      	ldr	r1, [pc, #172]	; (80082f8 <color+0x158>)
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f7f7 ffbb 	bl	80001c8 <strcmp>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d101      	bne.n	800825c <color+0xbc>
 8008258:	237f      	movs	r3, #127	; 0x7f
 800825a:	e036      	b.n	80082ca <color+0x12a>
	else if(strcmp(color_input, "magenta")==0) return magenta;
 800825c:	4927      	ldr	r1, [pc, #156]	; (80082fc <color+0x15c>)
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f7f7 ffb2 	bl	80001c8 <strcmp>
 8008264:	4603      	mov	r3, r0
 8008266:	2b00      	cmp	r3, #0
 8008268:	d101      	bne.n	800826e <color+0xce>
 800826a:	23e3      	movs	r3, #227	; 0xe3
 800826c:	e02d      	b.n	80082ca <color+0x12a>
	else if(strcmp(color_input, "lichtmagenta")==0) return lichtmagenta;
 800826e:	4924      	ldr	r1, [pc, #144]	; (8008300 <color+0x160>)
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f7f7 ffa9 	bl	80001c8 <strcmp>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d101      	bne.n	8008280 <color+0xe0>
 800827c:	23e2      	movs	r3, #226	; 0xe2
 800827e:	e024      	b.n	80082ca <color+0x12a>
	else if(strcmp(color_input, "geel")==0) return geel;
 8008280:	4920      	ldr	r1, [pc, #128]	; (8008304 <color+0x164>)
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7f7 ffa0 	bl	80001c8 <strcmp>
 8008288:	4603      	mov	r3, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d101      	bne.n	8008292 <color+0xf2>
 800828e:	23fc      	movs	r3, #252	; 0xfc
 8008290:	e01b      	b.n	80082ca <color+0x12a>
	else if(strcmp(color_input, "bruin")==0) return bruin;
 8008292:	491d      	ldr	r1, [pc, #116]	; (8008308 <color+0x168>)
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f7f7 ff97 	bl	80001c8 <strcmp>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d101      	bne.n	80082a4 <color+0x104>
 80082a0:	2388      	movs	r3, #136	; 0x88
 80082a2:	e012      	b.n	80082ca <color+0x12a>
	else if(strcmp(color_input, "grijs")==0) return grijs;
 80082a4:	4919      	ldr	r1, [pc, #100]	; (800830c <color+0x16c>)
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f7f7 ff8e 	bl	80001c8 <strcmp>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d101      	bne.n	80082b6 <color+0x116>
 80082b2:	23e6      	movs	r3, #230	; 0xe6
 80082b4:	e009      	b.n	80082ca <color+0x12a>
	else if(strcmp(color_input, "paars")==0) return paars;
 80082b6:	4916      	ldr	r1, [pc, #88]	; (8008310 <color+0x170>)
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f7f7 ff85 	bl	80001c8 <strcmp>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d101      	bne.n	80082c8 <color+0x128>
 80082c4:	2350      	movs	r3, #80	; 0x50
 80082c6:	e000      	b.n	80082ca <color+0x12a>
	else return paars;
 80082c8:	2350      	movs	r3, #80	; 0x50
};
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	080092f8 	.word	0x080092f8
 80082d8:	08009300 	.word	0x08009300
 80082dc:	08009308 	.word	0x08009308
 80082e0:	08009314 	.word	0x08009314
 80082e4:	0800931c 	.word	0x0800931c
 80082e8:	08009328 	.word	0x08009328
 80082ec:	08009330 	.word	0x08009330
 80082f0:	0800933c 	.word	0x0800933c
 80082f4:	08009340 	.word	0x08009340
 80082f8:	08009348 	.word	0x08009348
 80082fc:	08009354 	.word	0x08009354
 8008300:	0800935c 	.word	0x0800935c
 8008304:	0800936c 	.word	0x0800936c
 8008308:	08009374 	.word	0x08009374
 800830c:	0800937c 	.word	0x0800937c
 8008310:	08009384 	.word	0x08009384

08008314 <func_chooser>:

/********************************************//**
 *	this functions makes a decision to which function to draw
 ***********************************************/
void func_chooser()
{
 8008314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008318:	b08c      	sub	sp, #48	; 0x30
 800831a:	af04      	add	r7, sp, #16
	if(!strcmp(clearscrn_args.function,"clearscherm"))
 800831c:	49b4      	ldr	r1, [pc, #720]	; (80085f0 <func_chooser+0x2dc>)
 800831e:	48b5      	ldr	r0, [pc, #724]	; (80085f4 <func_chooser+0x2e0>)
 8008320:	f7f7 ff52 	bl	80001c8 <strcmp>
 8008324:	4603      	mov	r3, r0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d116      	bne.n	8008358 <func_chooser+0x44>
	{
//		UART_puts("function = "); UART_puts(clearscrn_args.function); UART_puts("\r");
		clr_screen(color(clearscrn_args.color));
 800832a:	48b3      	ldr	r0, [pc, #716]	; (80085f8 <func_chooser+0x2e4>)
 800832c:	f7ff ff38 	bl	80081a0 <color>
 8008330:	4603      	mov	r3, r0
 8008332:	b2db      	uxtb	r3, r3
 8008334:	4618      	mov	r0, r3
 8008336:	f7f8 fb43 	bl	80009c0 <clr_screen>

		for(int i=0;i<sizeof(clearscrn_args.function);i++)
 800833a:	2300      	movs	r3, #0
 800833c:	61fb      	str	r3, [r7, #28]
 800833e:	e007      	b.n	8008350 <func_chooser+0x3c>
			clearscrn_args.function[i] = 0;
 8008340:	4aac      	ldr	r2, [pc, #688]	; (80085f4 <func_chooser+0x2e0>)
 8008342:	69fb      	ldr	r3, [r7, #28]
 8008344:	4413      	add	r3, r2
 8008346:	2200      	movs	r2, #0
 8008348:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<sizeof(clearscrn_args.function);i++)
 800834a:	69fb      	ldr	r3, [r7, #28]
 800834c:	3301      	adds	r3, #1
 800834e:	61fb      	str	r3, [r7, #28]
 8008350:	69fb      	ldr	r3, [r7, #28]
 8008352:	2b09      	cmp	r3, #9
 8008354:	d9f4      	bls.n	8008340 <func_chooser+0x2c>

		for(int i=0;i<sizeof(wait_args.function);i++)
			wait_args.function[i] = 0;
	}

}
 8008356:	e146      	b.n	80085e6 <func_chooser+0x2d2>
	else if(!strcmp(line_args.function,"lijn"))
 8008358:	49a8      	ldr	r1, [pc, #672]	; (80085fc <func_chooser+0x2e8>)
 800835a:	48a9      	ldr	r0, [pc, #676]	; (8008600 <func_chooser+0x2ec>)
 800835c:	f7f7 ff34 	bl	80001c8 <strcmp>
 8008360:	4603      	mov	r3, r0
 8008362:	2b00      	cmp	r3, #0
 8008364:	d12e      	bne.n	80083c4 <func_chooser+0xb0>
		draw_line(atoi(line_args.x1),atoi(line_args.y1),atoi(line_args.x2),atoi(line_args.y2),atoi(line_args.thickness),color(line_args.color));
 8008366:	48a7      	ldr	r0, [pc, #668]	; (8008604 <func_chooser+0x2f0>)
 8008368:	f000 fab6 	bl	80088d8 <atoi>
 800836c:	4605      	mov	r5, r0
 800836e:	48a6      	ldr	r0, [pc, #664]	; (8008608 <func_chooser+0x2f4>)
 8008370:	f000 fab2 	bl	80088d8 <atoi>
 8008374:	4606      	mov	r6, r0
 8008376:	48a5      	ldr	r0, [pc, #660]	; (800860c <func_chooser+0x2f8>)
 8008378:	f000 faae 	bl	80088d8 <atoi>
 800837c:	4680      	mov	r8, r0
 800837e:	48a4      	ldr	r0, [pc, #656]	; (8008610 <func_chooser+0x2fc>)
 8008380:	f000 faaa 	bl	80088d8 <atoi>
 8008384:	4681      	mov	r9, r0
 8008386:	48a3      	ldr	r0, [pc, #652]	; (8008614 <func_chooser+0x300>)
 8008388:	f000 faa6 	bl	80088d8 <atoi>
 800838c:	4604      	mov	r4, r0
 800838e:	48a2      	ldr	r0, [pc, #648]	; (8008618 <func_chooser+0x304>)
 8008390:	f7ff ff06 	bl	80081a0 <color>
 8008394:	4603      	mov	r3, r0
 8008396:	9301      	str	r3, [sp, #4]
 8008398:	9400      	str	r4, [sp, #0]
 800839a:	464b      	mov	r3, r9
 800839c:	4642      	mov	r2, r8
 800839e:	4631      	mov	r1, r6
 80083a0:	4628      	mov	r0, r5
 80083a2:	f7f8 fb1a 	bl	80009da <draw_line>
		for(int i=0;i<sizeof(line_args.function);i++)
 80083a6:	2300      	movs	r3, #0
 80083a8:	61bb      	str	r3, [r7, #24]
 80083aa:	e007      	b.n	80083bc <func_chooser+0xa8>
			line_args.function[i] = 0;
 80083ac:	4a94      	ldr	r2, [pc, #592]	; (8008600 <func_chooser+0x2ec>)
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	4413      	add	r3, r2
 80083b2:	2200      	movs	r2, #0
 80083b4:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<sizeof(line_args.function);i++)
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	3301      	adds	r3, #1
 80083ba:	61bb      	str	r3, [r7, #24]
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	2b09      	cmp	r3, #9
 80083c0:	d9f4      	bls.n	80083ac <func_chooser+0x98>
}
 80083c2:	e110      	b.n	80085e6 <func_chooser+0x2d2>
	else if(!strcmp(ellips_args.function,"ellips"))
 80083c4:	4995      	ldr	r1, [pc, #596]	; (800861c <func_chooser+0x308>)
 80083c6:	4896      	ldr	r0, [pc, #600]	; (8008620 <func_chooser+0x30c>)
 80083c8:	f7f7 fefe 	bl	80001c8 <strcmp>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d129      	bne.n	8008426 <func_chooser+0x112>
		draw_ellips(atoi(ellips_args.x_center),atoi(ellips_args.y_center),atoi(ellips_args.x_rad),atoi(ellips_args.y_rad),color(ellips_args.color));
 80083d2:	4894      	ldr	r0, [pc, #592]	; (8008624 <func_chooser+0x310>)
 80083d4:	f000 fa80 	bl	80088d8 <atoi>
 80083d8:	4604      	mov	r4, r0
 80083da:	4893      	ldr	r0, [pc, #588]	; (8008628 <func_chooser+0x314>)
 80083dc:	f000 fa7c 	bl	80088d8 <atoi>
 80083e0:	4605      	mov	r5, r0
 80083e2:	4892      	ldr	r0, [pc, #584]	; (800862c <func_chooser+0x318>)
 80083e4:	f000 fa78 	bl	80088d8 <atoi>
 80083e8:	4606      	mov	r6, r0
 80083ea:	4891      	ldr	r0, [pc, #580]	; (8008630 <func_chooser+0x31c>)
 80083ec:	f000 fa74 	bl	80088d8 <atoi>
 80083f0:	4680      	mov	r8, r0
 80083f2:	4890      	ldr	r0, [pc, #576]	; (8008634 <func_chooser+0x320>)
 80083f4:	f7ff fed4 	bl	80081a0 <color>
 80083f8:	4603      	mov	r3, r0
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	4643      	mov	r3, r8
 80083fe:	4632      	mov	r2, r6
 8008400:	4629      	mov	r1, r5
 8008402:	4620      	mov	r0, r4
 8008404:	f7f8 fcc3 	bl	8000d8e <draw_ellips>
		for(int i=0;i<sizeof(ellips_args.function);i++)
 8008408:	2300      	movs	r3, #0
 800840a:	617b      	str	r3, [r7, #20]
 800840c:	e007      	b.n	800841e <func_chooser+0x10a>
			ellips_args.function[i] = 0;
 800840e:	4a84      	ldr	r2, [pc, #528]	; (8008620 <func_chooser+0x30c>)
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	4413      	add	r3, r2
 8008414:	2200      	movs	r2, #0
 8008416:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<sizeof(ellips_args.function);i++)
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	3301      	adds	r3, #1
 800841c:	617b      	str	r3, [r7, #20]
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	2b09      	cmp	r3, #9
 8008422:	d9f4      	bls.n	800840e <func_chooser+0xfa>
}
 8008424:	e0df      	b.n	80085e6 <func_chooser+0x2d2>
	else if(!strcmp(rectangle_args.function,"rechthoek"))
 8008426:	4984      	ldr	r1, [pc, #528]	; (8008638 <func_chooser+0x324>)
 8008428:	4884      	ldr	r0, [pc, #528]	; (800863c <func_chooser+0x328>)
 800842a:	f7f7 fecd 	bl	80001c8 <strcmp>
 800842e:	4603      	mov	r3, r0
 8008430:	2b00      	cmp	r3, #0
 8008432:	d129      	bne.n	8008488 <func_chooser+0x174>
		draw_rectangle(atoi(rectangle_args.x1),atoi(rectangle_args.y1),atoi(rectangle_args.x2),atoi(rectangle_args.y2),color(rectangle_args.color));
 8008434:	4882      	ldr	r0, [pc, #520]	; (8008640 <func_chooser+0x32c>)
 8008436:	f000 fa4f 	bl	80088d8 <atoi>
 800843a:	4604      	mov	r4, r0
 800843c:	4881      	ldr	r0, [pc, #516]	; (8008644 <func_chooser+0x330>)
 800843e:	f000 fa4b 	bl	80088d8 <atoi>
 8008442:	4605      	mov	r5, r0
 8008444:	4880      	ldr	r0, [pc, #512]	; (8008648 <func_chooser+0x334>)
 8008446:	f000 fa47 	bl	80088d8 <atoi>
 800844a:	4606      	mov	r6, r0
 800844c:	487f      	ldr	r0, [pc, #508]	; (800864c <func_chooser+0x338>)
 800844e:	f000 fa43 	bl	80088d8 <atoi>
 8008452:	4680      	mov	r8, r0
 8008454:	487e      	ldr	r0, [pc, #504]	; (8008650 <func_chooser+0x33c>)
 8008456:	f7ff fea3 	bl	80081a0 <color>
 800845a:	4603      	mov	r3, r0
 800845c:	9300      	str	r3, [sp, #0]
 800845e:	4643      	mov	r3, r8
 8008460:	4632      	mov	r2, r6
 8008462:	4629      	mov	r1, r5
 8008464:	4620      	mov	r0, r4
 8008466:	f7f8 fce5 	bl	8000e34 <draw_rectangle>
		for(int i=0;i<sizeof(rectangle_args.function);i++)
 800846a:	2300      	movs	r3, #0
 800846c:	613b      	str	r3, [r7, #16]
 800846e:	e007      	b.n	8008480 <func_chooser+0x16c>
			rectangle_args.function[i] = 0;
 8008470:	4a72      	ldr	r2, [pc, #456]	; (800863c <func_chooser+0x328>)
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	4413      	add	r3, r2
 8008476:	2200      	movs	r2, #0
 8008478:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<sizeof(rectangle_args.function);i++)
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	3301      	adds	r3, #1
 800847e:	613b      	str	r3, [r7, #16]
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	2b09      	cmp	r3, #9
 8008484:	d9f4      	bls.n	8008470 <func_chooser+0x15c>
}
 8008486:	e0ae      	b.n	80085e6 <func_chooser+0x2d2>
	else if(!strcmp(triangle_args.function,"driehoek"))
 8008488:	4972      	ldr	r1, [pc, #456]	; (8008654 <func_chooser+0x340>)
 800848a:	4873      	ldr	r0, [pc, #460]	; (8008658 <func_chooser+0x344>)
 800848c:	f7f7 fe9c 	bl	80001c8 <strcmp>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d133      	bne.n	80084fe <func_chooser+0x1ea>
		draw_triangle(atoi(triangle_args.x1),atoi(triangle_args.y1),atoi(triangle_args.x2),atoi(triangle_args.y2),atoi(triangle_args.xtop),atoi(triangle_args.ytop),color(triangle_args.color));
 8008496:	4871      	ldr	r0, [pc, #452]	; (800865c <func_chooser+0x348>)
 8008498:	f000 fa1e 	bl	80088d8 <atoi>
 800849c:	4606      	mov	r6, r0
 800849e:	4870      	ldr	r0, [pc, #448]	; (8008660 <func_chooser+0x34c>)
 80084a0:	f000 fa1a 	bl	80088d8 <atoi>
 80084a4:	4680      	mov	r8, r0
 80084a6:	486f      	ldr	r0, [pc, #444]	; (8008664 <func_chooser+0x350>)
 80084a8:	f000 fa16 	bl	80088d8 <atoi>
 80084ac:	4681      	mov	r9, r0
 80084ae:	486e      	ldr	r0, [pc, #440]	; (8008668 <func_chooser+0x354>)
 80084b0:	f000 fa12 	bl	80088d8 <atoi>
 80084b4:	4682      	mov	sl, r0
 80084b6:	486d      	ldr	r0, [pc, #436]	; (800866c <func_chooser+0x358>)
 80084b8:	f000 fa0e 	bl	80088d8 <atoi>
 80084bc:	4604      	mov	r4, r0
 80084be:	486c      	ldr	r0, [pc, #432]	; (8008670 <func_chooser+0x35c>)
 80084c0:	f000 fa0a 	bl	80088d8 <atoi>
 80084c4:	4605      	mov	r5, r0
 80084c6:	486b      	ldr	r0, [pc, #428]	; (8008674 <func_chooser+0x360>)
 80084c8:	f7ff fe6a 	bl	80081a0 <color>
 80084cc:	4603      	mov	r3, r0
 80084ce:	9302      	str	r3, [sp, #8]
 80084d0:	9501      	str	r5, [sp, #4]
 80084d2:	9400      	str	r4, [sp, #0]
 80084d4:	4653      	mov	r3, sl
 80084d6:	464a      	mov	r2, r9
 80084d8:	4641      	mov	r1, r8
 80084da:	4630      	mov	r0, r6
 80084dc:	f7f8 fcd2 	bl	8000e84 <draw_triangle>
		for(int i=0;i<sizeof(triangle_args.function);i++)
 80084e0:	2300      	movs	r3, #0
 80084e2:	60fb      	str	r3, [r7, #12]
 80084e4:	e007      	b.n	80084f6 <func_chooser+0x1e2>
			triangle_args.function[i] = 0;
 80084e6:	4a5c      	ldr	r2, [pc, #368]	; (8008658 <func_chooser+0x344>)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	4413      	add	r3, r2
 80084ec:	2200      	movs	r2, #0
 80084ee:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<sizeof(triangle_args.function);i++)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	3301      	adds	r3, #1
 80084f4:	60fb      	str	r3, [r7, #12]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2b09      	cmp	r3, #9
 80084fa:	d9f4      	bls.n	80084e6 <func_chooser+0x1d2>
}
 80084fc:	e073      	b.n	80085e6 <func_chooser+0x2d2>
	else if(!strcmp(text_args.function,"tekst"))
 80084fe:	495e      	ldr	r1, [pc, #376]	; (8008678 <func_chooser+0x364>)
 8008500:	485e      	ldr	r0, [pc, #376]	; (800867c <func_chooser+0x368>)
 8008502:	f7f7 fe61 	bl	80001c8 <strcmp>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d125      	bne.n	8008558 <func_chooser+0x244>
		draw_text(atoi(text_args.x1),atoi(text_args.y1),text_args.text_in,color(clearscrn_args.color),color(text_args.color));
 800850c:	485c      	ldr	r0, [pc, #368]	; (8008680 <func_chooser+0x36c>)
 800850e:	f000 f9e3 	bl	80088d8 <atoi>
 8008512:	4604      	mov	r4, r0
 8008514:	485b      	ldr	r0, [pc, #364]	; (8008684 <func_chooser+0x370>)
 8008516:	f000 f9df 	bl	80088d8 <atoi>
 800851a:	4605      	mov	r5, r0
 800851c:	4836      	ldr	r0, [pc, #216]	; (80085f8 <func_chooser+0x2e4>)
 800851e:	f7ff fe3f 	bl	80081a0 <color>
 8008522:	4606      	mov	r6, r0
 8008524:	4858      	ldr	r0, [pc, #352]	; (8008688 <func_chooser+0x374>)
 8008526:	f7ff fe3b 	bl	80081a0 <color>
 800852a:	4603      	mov	r3, r0
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	4633      	mov	r3, r6
 8008530:	4a56      	ldr	r2, [pc, #344]	; (800868c <func_chooser+0x378>)
 8008532:	4629      	mov	r1, r5
 8008534:	4620      	mov	r0, r4
 8008536:	f7f8 fcce 	bl	8000ed6 <draw_text>
		for(int i=0;i<sizeof(text_args.function);i++)
 800853a:	2300      	movs	r3, #0
 800853c:	60bb      	str	r3, [r7, #8]
 800853e:	e007      	b.n	8008550 <func_chooser+0x23c>
			text_args.function[i] = 0;
 8008540:	4a4e      	ldr	r2, [pc, #312]	; (800867c <func_chooser+0x368>)
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	4413      	add	r3, r2
 8008546:	2200      	movs	r2, #0
 8008548:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<sizeof(text_args.function);i++)
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	3301      	adds	r3, #1
 800854e:	60bb      	str	r3, [r7, #8]
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	2b09      	cmp	r3, #9
 8008554:	d9f4      	bls.n	8008540 <func_chooser+0x22c>
}
 8008556:	e046      	b.n	80085e6 <func_chooser+0x2d2>
	else if(!strcmp(bitmap_args.function,"bitmap"))
 8008558:	494d      	ldr	r1, [pc, #308]	; (8008690 <func_chooser+0x37c>)
 800855a:	484e      	ldr	r0, [pc, #312]	; (8008694 <func_chooser+0x380>)
 800855c:	f7f7 fe34 	bl	80001c8 <strcmp>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d123      	bne.n	80085ae <func_chooser+0x29a>
		draw_bitmap(atoi(bitmap_args.bitmap_nr),atoi(bitmap_args.x1),atoi(bitmap_args.y1),color(clearscrn_args.color));
 8008566:	484c      	ldr	r0, [pc, #304]	; (8008698 <func_chooser+0x384>)
 8008568:	f000 f9b6 	bl	80088d8 <atoi>
 800856c:	4604      	mov	r4, r0
 800856e:	484b      	ldr	r0, [pc, #300]	; (800869c <func_chooser+0x388>)
 8008570:	f000 f9b2 	bl	80088d8 <atoi>
 8008574:	4605      	mov	r5, r0
 8008576:	484a      	ldr	r0, [pc, #296]	; (80086a0 <func_chooser+0x38c>)
 8008578:	f000 f9ae 	bl	80088d8 <atoi>
 800857c:	4606      	mov	r6, r0
 800857e:	481e      	ldr	r0, [pc, #120]	; (80085f8 <func_chooser+0x2e4>)
 8008580:	f7ff fe0e 	bl	80081a0 <color>
 8008584:	4603      	mov	r3, r0
 8008586:	4632      	mov	r2, r6
 8008588:	4629      	mov	r1, r5
 800858a:	4620      	mov	r0, r4
 800858c:	f7fd fba0 	bl	8005cd0 <draw_bitmap>
		for(int i=0;i<sizeof(bitmap_args.function);i++)
 8008590:	2300      	movs	r3, #0
 8008592:	607b      	str	r3, [r7, #4]
 8008594:	e007      	b.n	80085a6 <func_chooser+0x292>
			bitmap_args.function[i] = 0;
 8008596:	4a3f      	ldr	r2, [pc, #252]	; (8008694 <func_chooser+0x380>)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4413      	add	r3, r2
 800859c:	2200      	movs	r2, #0
 800859e:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<sizeof(bitmap_args.function);i++)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	3301      	adds	r3, #1
 80085a4:	607b      	str	r3, [r7, #4]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2b09      	cmp	r3, #9
 80085aa:	d9f4      	bls.n	8008596 <func_chooser+0x282>
}
 80085ac:	e01b      	b.n	80085e6 <func_chooser+0x2d2>
	else if(!strcmp(wait_args.function,"wacht"))
 80085ae:	493d      	ldr	r1, [pc, #244]	; (80086a4 <func_chooser+0x390>)
 80085b0:	483d      	ldr	r0, [pc, #244]	; (80086a8 <func_chooser+0x394>)
 80085b2:	f7f7 fe09 	bl	80001c8 <strcmp>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d114      	bne.n	80085e6 <func_chooser+0x2d2>
		wait_ms(atoi(wait_args.time_ms));
 80085bc:	483b      	ldr	r0, [pc, #236]	; (80086ac <func_chooser+0x398>)
 80085be:	f000 f98b 	bl	80088d8 <atoi>
 80085c2:	4603      	mov	r3, r0
 80085c4:	4618      	mov	r0, r3
 80085c6:	f7fd fb90 	bl	8005cea <wait_ms>
		for(int i=0;i<sizeof(wait_args.function);i++)
 80085ca:	2300      	movs	r3, #0
 80085cc:	603b      	str	r3, [r7, #0]
 80085ce:	e007      	b.n	80085e0 <func_chooser+0x2cc>
			wait_args.function[i] = 0;
 80085d0:	4a35      	ldr	r2, [pc, #212]	; (80086a8 <func_chooser+0x394>)
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	4413      	add	r3, r2
 80085d6:	2200      	movs	r2, #0
 80085d8:	701a      	strb	r2, [r3, #0]
		for(int i=0;i<sizeof(wait_args.function);i++)
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	3301      	adds	r3, #1
 80085de:	603b      	str	r3, [r7, #0]
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	2b09      	cmp	r3, #9
 80085e4:	d9f4      	bls.n	80085d0 <func_chooser+0x2bc>
}
 80085e6:	bf00      	nop
 80085e8:	3720      	adds	r7, #32
 80085ea:	46bd      	mov	sp, r7
 80085ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085f0:	0800938c 	.word	0x0800938c
 80085f4:	200006e4 	.word	0x200006e4
 80085f8:	20000766 	.word	0x20000766
 80085fc:	08009398 	.word	0x08009398
 8008600:	2001359c 	.word	0x2001359c
 8008604:	200135a6 	.word	0x200135a6
 8008608:	200135b0 	.word	0x200135b0
 800860c:	200135b5 	.word	0x200135b5
 8008610:	200135ba 	.word	0x200135ba
 8008614:	200135dd 	.word	0x200135dd
 8008618:	2001361e 	.word	0x2001361e
 800861c:	080093a0 	.word	0x080093a0
 8008620:	200137fc 	.word	0x200137fc
 8008624:	20013829 	.word	0x20013829
 8008628:	2001382e 	.word	0x2001382e
 800862c:	20013833 	.word	0x20013833
 8008630:	20013838 	.word	0x20013838
 8008634:	2001387e 	.word	0x2001387e
 8008638:	080093a8 	.word	0x080093a8
 800863c:	2001346c 	.word	0x2001346c
 8008640:	20013476 	.word	0x20013476
 8008644:	20013480 	.word	0x20013480
 8008648:	20013485 	.word	0x20013485
 800864c:	2001348a 	.word	0x2001348a
 8008650:	200134ee 	.word	0x200134ee
 8008654:	080093b4 	.word	0x080093b4
 8008658:	20013504 	.word	0x20013504
 800865c:	2001350e 	.word	0x2001350e
 8008660:	20013518 	.word	0x20013518
 8008664:	2001351d 	.word	0x2001351d
 8008668:	20013522 	.word	0x20013522
 800866c:	20013527 	.word	0x20013527
 8008670:	2001352c 	.word	0x2001352c
 8008674:	20013586 	.word	0x20013586
 8008678:	080093c0 	.word	0x080093c0
 800867c:	200136cc 	.word	0x200136cc
 8008680:	200136d6 	.word	0x200136d6
 8008684:	200136e0 	.word	0x200136e0
 8008688:	2001374e 	.word	0x2001374e
 800868c:	20013712 	.word	0x20013712
 8008690:	080093c8 	.word	0x080093c8
 8008694:	20013634 	.word	0x20013634
 8008698:	200136ac 	.word	0x200136ac
 800869c:	2001363e 	.word	0x2001363e
 80086a0:	20013648 	.word	0x20013648
 80086a4:	080093d0 	.word	0x080093d0
 80086a8:	20013764 	.word	0x20013764
 80086ac:	200137e1 	.word	0x200137e1

080086b0 <main>:

/********************************************//**
 *	main loop
 ***********************************************/
int main(void)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	af00      	add	r7, sp, #0
	//_____________________________INIT______________________________________________
	SystemInit(); // System speed to 168MHz
 80086b4:	f000 f85e 	bl	8008774 <SystemInit>
	IO_Init();
 80086b8:	f7fe ff72 	bl	80075a0 <IO_Init>

	while(1)
		input_uart();
 80086bc:	f7fe ff7a 	bl	80075b4 <input_uart>
 80086c0:	e7fc      	b.n	80086bc <main+0xc>
	...

080086c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80086c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80086fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80086c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80086ca:	e003      	b.n	80086d4 <LoopCopyDataInit>

080086cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80086cc:	4b0c      	ldr	r3, [pc, #48]	; (8008700 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80086ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80086d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80086d2:	3104      	adds	r1, #4

080086d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80086d4:	480b      	ldr	r0, [pc, #44]	; (8008704 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80086d6:	4b0c      	ldr	r3, [pc, #48]	; (8008708 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80086d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80086da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80086dc:	d3f6      	bcc.n	80086cc <CopyDataInit>
  ldr  r2, =_sbss
 80086de:	4a0b      	ldr	r2, [pc, #44]	; (800870c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80086e0:	e002      	b.n	80086e8 <LoopFillZerobss>

080086e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80086e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80086e4:	f842 3b04 	str.w	r3, [r2], #4

080086e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80086e8:	4b09      	ldr	r3, [pc, #36]	; (8008710 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80086ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80086ec:	d3f9      	bcc.n	80086e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80086ee:	f000 f841 	bl	8008774 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80086f2:	f000 f8f5 	bl	80088e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80086f6:	f7ff ffdb 	bl	80086b0 <main>
  bx  lr    
 80086fa:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80086fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008700:	080094ec 	.word	0x080094ec
  ldr  r0, =_sdata
 8008704:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008708:	20000680 	.word	0x20000680
  ldr  r2, =_sbss
 800870c:	20000680 	.word	0x20000680
  ldr  r3, = _ebss
 8008710:	200139ac 	.word	0x200139ac

08008714 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008714:	e7fe      	b.n	8008714 <ADC_IRQHandler>

08008716 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8008716:	b480      	push	{r7}
 8008718:	af00      	add	r7, sp, #0
}
 800871a:	bf00      	nop
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8008724:	b480      	push	{r7}
 8008726:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8008728:	e7fe      	b.n	8008728 <HardFault_Handler+0x4>

0800872a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800872a:	b480      	push	{r7}
 800872c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800872e:	e7fe      	b.n	800872e <MemManage_Handler+0x4>

08008730 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8008730:	b480      	push	{r7}
 8008732:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8008734:	e7fe      	b.n	8008734 <BusFault_Handler+0x4>

08008736 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8008736:	b480      	push	{r7}
 8008738:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800873a:	e7fe      	b.n	800873a <UsageFault_Handler+0x4>

0800873c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800873c:	b480      	push	{r7}
 800873e:	af00      	add	r7, sp, #0
}
 8008740:	bf00      	nop
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr

0800874a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800874a:	b480      	push	{r7}
 800874c:	af00      	add	r7, sp, #0
}
 800874e:	bf00      	nop
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr

08008758 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8008758:	b480      	push	{r7}
 800875a:	af00      	add	r7, sp, #0
}
 800875c:	bf00      	nop
 800875e:	46bd      	mov	sp, r7
 8008760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008764:	4770      	bx	lr

08008766 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8008766:	b480      	push	{r7}
 8008768:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 800876a:	bf00      	nop
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008778:	4a16      	ldr	r2, [pc, #88]	; (80087d4 <SystemInit+0x60>)
 800877a:	4b16      	ldr	r3, [pc, #88]	; (80087d4 <SystemInit+0x60>)
 800877c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008780:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008784:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008788:	4a13      	ldr	r2, [pc, #76]	; (80087d8 <SystemInit+0x64>)
 800878a:	4b13      	ldr	r3, [pc, #76]	; (80087d8 <SystemInit+0x64>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f043 0301 	orr.w	r3, r3, #1
 8008792:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008794:	4b10      	ldr	r3, [pc, #64]	; (80087d8 <SystemInit+0x64>)
 8008796:	2200      	movs	r2, #0
 8008798:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800879a:	4a0f      	ldr	r2, [pc, #60]	; (80087d8 <SystemInit+0x64>)
 800879c:	4b0e      	ldr	r3, [pc, #56]	; (80087d8 <SystemInit+0x64>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80087a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087a8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80087aa:	4b0b      	ldr	r3, [pc, #44]	; (80087d8 <SystemInit+0x64>)
 80087ac:	4a0b      	ldr	r2, [pc, #44]	; (80087dc <SystemInit+0x68>)
 80087ae:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80087b0:	4a09      	ldr	r2, [pc, #36]	; (80087d8 <SystemInit+0x64>)
 80087b2:	4b09      	ldr	r3, [pc, #36]	; (80087d8 <SystemInit+0x64>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80087bc:	4b06      	ldr	r3, [pc, #24]	; (80087d8 <SystemInit+0x64>)
 80087be:	2200      	movs	r2, #0
 80087c0:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80087c2:	f000 f80d 	bl	80087e0 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80087c6:	4b03      	ldr	r3, [pc, #12]	; (80087d4 <SystemInit+0x60>)
 80087c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80087cc:	609a      	str	r2, [r3, #8]
#endif
}
 80087ce:	bf00      	nop
 80087d0:	bd80      	pop	{r7, pc}
 80087d2:	bf00      	nop
 80087d4:	e000ed00 	.word	0xe000ed00
 80087d8:	40023800 	.word	0x40023800
 80087dc:	24003010 	.word	0x24003010

080087e0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80087e6:	2300      	movs	r3, #0
 80087e8:	607b      	str	r3, [r7, #4]
 80087ea:	2300      	movs	r3, #0
 80087ec:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80087ee:	4a36      	ldr	r2, [pc, #216]	; (80088c8 <SetSysClock+0xe8>)
 80087f0:	4b35      	ldr	r3, [pc, #212]	; (80088c8 <SetSysClock+0xe8>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087f8:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80087fa:	4b33      	ldr	r3, [pc, #204]	; (80088c8 <SetSysClock+0xe8>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008802:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	3301      	adds	r3, #1
 8008808:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d103      	bne.n	8008818 <SetSysClock+0x38>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008816:	d1f0      	bne.n	80087fa <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8008818:	4b2b      	ldr	r3, [pc, #172]	; (80088c8 <SetSysClock+0xe8>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008820:	2b00      	cmp	r3, #0
 8008822:	d002      	beq.n	800882a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8008824:	2301      	movs	r3, #1
 8008826:	603b      	str	r3, [r7, #0]
 8008828:	e001      	b.n	800882e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800882a:	2300      	movs	r3, #0
 800882c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	2b01      	cmp	r3, #1
 8008832:	d142      	bne.n	80088ba <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8008834:	4a24      	ldr	r2, [pc, #144]	; (80088c8 <SetSysClock+0xe8>)
 8008836:	4b24      	ldr	r3, [pc, #144]	; (80088c8 <SetSysClock+0xe8>)
 8008838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800883e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8008840:	4a22      	ldr	r2, [pc, #136]	; (80088cc <SetSysClock+0xec>)
 8008842:	4b22      	ldr	r3, [pc, #136]	; (80088cc <SetSysClock+0xec>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800884a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800884c:	4a1e      	ldr	r2, [pc, #120]	; (80088c8 <SetSysClock+0xe8>)
 800884e:	4b1e      	ldr	r3, [pc, #120]	; (80088c8 <SetSysClock+0xe8>)
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8008854:	4a1c      	ldr	r2, [pc, #112]	; (80088c8 <SetSysClock+0xe8>)
 8008856:	4b1c      	ldr	r3, [pc, #112]	; (80088c8 <SetSysClock+0xe8>)
 8008858:	689b      	ldr	r3, [r3, #8]
 800885a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800885e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8008860:	4a19      	ldr	r2, [pc, #100]	; (80088c8 <SetSysClock+0xe8>)
 8008862:	4b19      	ldr	r3, [pc, #100]	; (80088c8 <SetSysClock+0xe8>)
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800886a:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800886c:	4b16      	ldr	r3, [pc, #88]	; (80088c8 <SetSysClock+0xe8>)
 800886e:	4a18      	ldr	r2, [pc, #96]	; (80088d0 <SetSysClock+0xf0>)
 8008870:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8008872:	4a15      	ldr	r2, [pc, #84]	; (80088c8 <SetSysClock+0xe8>)
 8008874:	4b14      	ldr	r3, [pc, #80]	; (80088c8 <SetSysClock+0xe8>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800887c:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800887e:	bf00      	nop
 8008880:	4b11      	ldr	r3, [pc, #68]	; (80088c8 <SetSysClock+0xe8>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008888:	2b00      	cmp	r3, #0
 800888a:	d0f9      	beq.n	8008880 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 800888c:	4b11      	ldr	r3, [pc, #68]	; (80088d4 <SetSysClock+0xf4>)
 800888e:	f240 7205 	movw	r2, #1797	; 0x705
 8008892:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8008894:	4a0c      	ldr	r2, [pc, #48]	; (80088c8 <SetSysClock+0xe8>)
 8008896:	4b0c      	ldr	r3, [pc, #48]	; (80088c8 <SetSysClock+0xe8>)
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	f023 0303 	bic.w	r3, r3, #3
 800889e:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 80088a0:	4a09      	ldr	r2, [pc, #36]	; (80088c8 <SetSysClock+0xe8>)
 80088a2:	4b09      	ldr	r3, [pc, #36]	; (80088c8 <SetSysClock+0xe8>)
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	f043 0302 	orr.w	r3, r3, #2
 80088aa:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 80088ac:	bf00      	nop
 80088ae:	4b06      	ldr	r3, [pc, #24]	; (80088c8 <SetSysClock+0xe8>)
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	f003 030c 	and.w	r3, r3, #12
 80088b6:	2b08      	cmp	r3, #8
 80088b8:	d1f9      	bne.n	80088ae <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 80088ba:	bf00      	nop
 80088bc:	370c      	adds	r7, #12
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr
 80088c6:	bf00      	nop
 80088c8:	40023800 	.word	0x40023800
 80088cc:	40007000 	.word	0x40007000
 80088d0:	07405419 	.word	0x07405419
 80088d4:	40023c00 	.word	0x40023c00

080088d8 <atoi>:
 80088d8:	220a      	movs	r2, #10
 80088da:	2100      	movs	r1, #0
 80088dc:	f000 b902 	b.w	8008ae4 <strtol>

080088e0 <__libc_init_array>:
 80088e0:	b570      	push	{r4, r5, r6, lr}
 80088e2:	4e0d      	ldr	r6, [pc, #52]	; (8008918 <__libc_init_array+0x38>)
 80088e4:	4c0d      	ldr	r4, [pc, #52]	; (800891c <__libc_init_array+0x3c>)
 80088e6:	1ba4      	subs	r4, r4, r6
 80088e8:	10a4      	asrs	r4, r4, #2
 80088ea:	2500      	movs	r5, #0
 80088ec:	42a5      	cmp	r5, r4
 80088ee:	d109      	bne.n	8008904 <__libc_init_array+0x24>
 80088f0:	4e0b      	ldr	r6, [pc, #44]	; (8008920 <__libc_init_array+0x40>)
 80088f2:	4c0c      	ldr	r4, [pc, #48]	; (8008924 <__libc_init_array+0x44>)
 80088f4:	f000 fc84 	bl	8009200 <_init>
 80088f8:	1ba4      	subs	r4, r4, r6
 80088fa:	10a4      	asrs	r4, r4, #2
 80088fc:	2500      	movs	r5, #0
 80088fe:	42a5      	cmp	r5, r4
 8008900:	d105      	bne.n	800890e <__libc_init_array+0x2e>
 8008902:	bd70      	pop	{r4, r5, r6, pc}
 8008904:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008908:	4798      	blx	r3
 800890a:	3501      	adds	r5, #1
 800890c:	e7ee      	b.n	80088ec <__libc_init_array+0xc>
 800890e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008912:	4798      	blx	r3
 8008914:	3501      	adds	r5, #1
 8008916:	e7f2      	b.n	80088fe <__libc_init_array+0x1e>
 8008918:	080094e4 	.word	0x080094e4
 800891c:	080094e4 	.word	0x080094e4
 8008920:	080094e4 	.word	0x080094e4
 8008924:	080094e8 	.word	0x080094e8

08008928 <strcpy>:
 8008928:	4603      	mov	r3, r0
 800892a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800892e:	f803 2b01 	strb.w	r2, [r3], #1
 8008932:	2a00      	cmp	r2, #0
 8008934:	d1f9      	bne.n	800892a <strcpy+0x2>
 8008936:	4770      	bx	lr

08008938 <strtok>:
 8008938:	4b14      	ldr	r3, [pc, #80]	; (800898c <strtok+0x54>)
 800893a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800893e:	681d      	ldr	r5, [r3, #0]
 8008940:	f8d5 40e8 	ldr.w	r4, [r5, #232]	; 0xe8
 8008944:	4606      	mov	r6, r0
 8008946:	460f      	mov	r7, r1
 8008948:	b9bc      	cbnz	r4, 800897a <strtok+0x42>
 800894a:	2050      	movs	r0, #80	; 0x50
 800894c:	f000 f8e4 	bl	8008b18 <malloc>
 8008950:	f8c5 00e8 	str.w	r0, [r5, #232]	; 0xe8
 8008954:	6004      	str	r4, [r0, #0]
 8008956:	6044      	str	r4, [r0, #4]
 8008958:	6084      	str	r4, [r0, #8]
 800895a:	60c4      	str	r4, [r0, #12]
 800895c:	6104      	str	r4, [r0, #16]
 800895e:	6144      	str	r4, [r0, #20]
 8008960:	6184      	str	r4, [r0, #24]
 8008962:	6284      	str	r4, [r0, #40]	; 0x28
 8008964:	62c4      	str	r4, [r0, #44]	; 0x2c
 8008966:	6304      	str	r4, [r0, #48]	; 0x30
 8008968:	6344      	str	r4, [r0, #52]	; 0x34
 800896a:	6384      	str	r4, [r0, #56]	; 0x38
 800896c:	63c4      	str	r4, [r0, #60]	; 0x3c
 800896e:	6404      	str	r4, [r0, #64]	; 0x40
 8008970:	6444      	str	r4, [r0, #68]	; 0x44
 8008972:	6484      	str	r4, [r0, #72]	; 0x48
 8008974:	64c4      	str	r4, [r0, #76]	; 0x4c
 8008976:	7704      	strb	r4, [r0, #28]
 8008978:	6244      	str	r4, [r0, #36]	; 0x24
 800897a:	f8d5 20e8 	ldr.w	r2, [r5, #232]	; 0xe8
 800897e:	4639      	mov	r1, r7
 8008980:	4630      	mov	r0, r6
 8008982:	2301      	movs	r3, #1
 8008984:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008988:	f000 b802 	b.w	8008990 <__strtok_r>
 800898c:	20000010 	.word	0x20000010

08008990 <__strtok_r>:
 8008990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008992:	b918      	cbnz	r0, 800899c <__strtok_r+0xc>
 8008994:	6810      	ldr	r0, [r2, #0]
 8008996:	b908      	cbnz	r0, 800899c <__strtok_r+0xc>
 8008998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800899a:	4620      	mov	r0, r4
 800899c:	4604      	mov	r4, r0
 800899e:	460f      	mov	r7, r1
 80089a0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80089a4:	f817 6b01 	ldrb.w	r6, [r7], #1
 80089a8:	b91e      	cbnz	r6, 80089b2 <__strtok_r+0x22>
 80089aa:	b965      	cbnz	r5, 80089c6 <__strtok_r+0x36>
 80089ac:	6015      	str	r5, [r2, #0]
 80089ae:	4628      	mov	r0, r5
 80089b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089b2:	42b5      	cmp	r5, r6
 80089b4:	d1f6      	bne.n	80089a4 <__strtok_r+0x14>
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1ef      	bne.n	800899a <__strtok_r+0xa>
 80089ba:	6014      	str	r4, [r2, #0]
 80089bc:	7003      	strb	r3, [r0, #0]
 80089be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089c0:	461c      	mov	r4, r3
 80089c2:	e00c      	b.n	80089de <__strtok_r+0x4e>
 80089c4:	b915      	cbnz	r5, 80089cc <__strtok_r+0x3c>
 80089c6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80089ca:	460e      	mov	r6, r1
 80089cc:	f816 5b01 	ldrb.w	r5, [r6], #1
 80089d0:	42ab      	cmp	r3, r5
 80089d2:	d1f7      	bne.n	80089c4 <__strtok_r+0x34>
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d0f3      	beq.n	80089c0 <__strtok_r+0x30>
 80089d8:	2300      	movs	r3, #0
 80089da:	f804 3c01 	strb.w	r3, [r4, #-1]
 80089de:	6014      	str	r4, [r2, #0]
 80089e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080089e2 <_strtol_l.isra.0>:
 80089e2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e6:	4680      	mov	r8, r0
 80089e8:	4689      	mov	r9, r1
 80089ea:	4692      	mov	sl, r2
 80089ec:	461f      	mov	r7, r3
 80089ee:	468b      	mov	fp, r1
 80089f0:	465d      	mov	r5, fp
 80089f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80089f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80089f8:	f000 f88a 	bl	8008b10 <__locale_ctype_ptr_l>
 80089fc:	4420      	add	r0, r4
 80089fe:	7846      	ldrb	r6, [r0, #1]
 8008a00:	f016 0608 	ands.w	r6, r6, #8
 8008a04:	d10b      	bne.n	8008a1e <_strtol_l.isra.0+0x3c>
 8008a06:	2c2d      	cmp	r4, #45	; 0x2d
 8008a08:	d10b      	bne.n	8008a22 <_strtol_l.isra.0+0x40>
 8008a0a:	782c      	ldrb	r4, [r5, #0]
 8008a0c:	2601      	movs	r6, #1
 8008a0e:	f10b 0502 	add.w	r5, fp, #2
 8008a12:	b167      	cbz	r7, 8008a2e <_strtol_l.isra.0+0x4c>
 8008a14:	2f10      	cmp	r7, #16
 8008a16:	d114      	bne.n	8008a42 <_strtol_l.isra.0+0x60>
 8008a18:	2c30      	cmp	r4, #48	; 0x30
 8008a1a:	d00a      	beq.n	8008a32 <_strtol_l.isra.0+0x50>
 8008a1c:	e011      	b.n	8008a42 <_strtol_l.isra.0+0x60>
 8008a1e:	46ab      	mov	fp, r5
 8008a20:	e7e6      	b.n	80089f0 <_strtol_l.isra.0+0xe>
 8008a22:	2c2b      	cmp	r4, #43	; 0x2b
 8008a24:	bf04      	itt	eq
 8008a26:	782c      	ldrbeq	r4, [r5, #0]
 8008a28:	f10b 0502 	addeq.w	r5, fp, #2
 8008a2c:	e7f1      	b.n	8008a12 <_strtol_l.isra.0+0x30>
 8008a2e:	2c30      	cmp	r4, #48	; 0x30
 8008a30:	d127      	bne.n	8008a82 <_strtol_l.isra.0+0xa0>
 8008a32:	782b      	ldrb	r3, [r5, #0]
 8008a34:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a38:	2b58      	cmp	r3, #88	; 0x58
 8008a3a:	d14b      	bne.n	8008ad4 <_strtol_l.isra.0+0xf2>
 8008a3c:	786c      	ldrb	r4, [r5, #1]
 8008a3e:	2710      	movs	r7, #16
 8008a40:	3502      	adds	r5, #2
 8008a42:	2e00      	cmp	r6, #0
 8008a44:	bf0c      	ite	eq
 8008a46:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008a4a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8008a4e:	2200      	movs	r2, #0
 8008a50:	fbb1 fef7 	udiv	lr, r1, r7
 8008a54:	4610      	mov	r0, r2
 8008a56:	fb07 1c1e 	mls	ip, r7, lr, r1
 8008a5a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8008a5e:	2b09      	cmp	r3, #9
 8008a60:	d811      	bhi.n	8008a86 <_strtol_l.isra.0+0xa4>
 8008a62:	461c      	mov	r4, r3
 8008a64:	42a7      	cmp	r7, r4
 8008a66:	dd1d      	ble.n	8008aa4 <_strtol_l.isra.0+0xc2>
 8008a68:	1c53      	adds	r3, r2, #1
 8008a6a:	d007      	beq.n	8008a7c <_strtol_l.isra.0+0x9a>
 8008a6c:	4586      	cmp	lr, r0
 8008a6e:	d316      	bcc.n	8008a9e <_strtol_l.isra.0+0xbc>
 8008a70:	d101      	bne.n	8008a76 <_strtol_l.isra.0+0x94>
 8008a72:	45a4      	cmp	ip, r4
 8008a74:	db13      	blt.n	8008a9e <_strtol_l.isra.0+0xbc>
 8008a76:	fb00 4007 	mla	r0, r0, r7, r4
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a80:	e7eb      	b.n	8008a5a <_strtol_l.isra.0+0x78>
 8008a82:	270a      	movs	r7, #10
 8008a84:	e7dd      	b.n	8008a42 <_strtol_l.isra.0+0x60>
 8008a86:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008a8a:	2b19      	cmp	r3, #25
 8008a8c:	d801      	bhi.n	8008a92 <_strtol_l.isra.0+0xb0>
 8008a8e:	3c37      	subs	r4, #55	; 0x37
 8008a90:	e7e8      	b.n	8008a64 <_strtol_l.isra.0+0x82>
 8008a92:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008a96:	2b19      	cmp	r3, #25
 8008a98:	d804      	bhi.n	8008aa4 <_strtol_l.isra.0+0xc2>
 8008a9a:	3c57      	subs	r4, #87	; 0x57
 8008a9c:	e7e2      	b.n	8008a64 <_strtol_l.isra.0+0x82>
 8008a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8008aa2:	e7eb      	b.n	8008a7c <_strtol_l.isra.0+0x9a>
 8008aa4:	1c53      	adds	r3, r2, #1
 8008aa6:	d108      	bne.n	8008aba <_strtol_l.isra.0+0xd8>
 8008aa8:	2322      	movs	r3, #34	; 0x22
 8008aaa:	f8c8 3000 	str.w	r3, [r8]
 8008aae:	4608      	mov	r0, r1
 8008ab0:	f1ba 0f00 	cmp.w	sl, #0
 8008ab4:	d107      	bne.n	8008ac6 <_strtol_l.isra.0+0xe4>
 8008ab6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aba:	b106      	cbz	r6, 8008abe <_strtol_l.isra.0+0xdc>
 8008abc:	4240      	negs	r0, r0
 8008abe:	f1ba 0f00 	cmp.w	sl, #0
 8008ac2:	d00c      	beq.n	8008ade <_strtol_l.isra.0+0xfc>
 8008ac4:	b122      	cbz	r2, 8008ad0 <_strtol_l.isra.0+0xee>
 8008ac6:	3d01      	subs	r5, #1
 8008ac8:	f8ca 5000 	str.w	r5, [sl]
 8008acc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad0:	464d      	mov	r5, r9
 8008ad2:	e7f9      	b.n	8008ac8 <_strtol_l.isra.0+0xe6>
 8008ad4:	2430      	movs	r4, #48	; 0x30
 8008ad6:	2f00      	cmp	r7, #0
 8008ad8:	d1b3      	bne.n	8008a42 <_strtol_l.isra.0+0x60>
 8008ada:	2708      	movs	r7, #8
 8008adc:	e7b1      	b.n	8008a42 <_strtol_l.isra.0+0x60>
 8008ade:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08008ae4 <strtol>:
 8008ae4:	4b08      	ldr	r3, [pc, #32]	; (8008b08 <strtol+0x24>)
 8008ae6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ae8:	681c      	ldr	r4, [r3, #0]
 8008aea:	4d08      	ldr	r5, [pc, #32]	; (8008b0c <strtol+0x28>)
 8008aec:	6a23      	ldr	r3, [r4, #32]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	bf08      	it	eq
 8008af2:	462b      	moveq	r3, r5
 8008af4:	9300      	str	r3, [sp, #0]
 8008af6:	4613      	mov	r3, r2
 8008af8:	460a      	mov	r2, r1
 8008afa:	4601      	mov	r1, r0
 8008afc:	4620      	mov	r0, r4
 8008afe:	f7ff ff70 	bl	80089e2 <_strtol_l.isra.0>
 8008b02:	b003      	add	sp, #12
 8008b04:	bd30      	pop	{r4, r5, pc}
 8008b06:	bf00      	nop
 8008b08:	20000010 	.word	0x20000010
 8008b0c:	20000104 	.word	0x20000104

08008b10 <__locale_ctype_ptr_l>:
 8008b10:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008b14:	4770      	bx	lr
	...

08008b18 <malloc>:
 8008b18:	4b02      	ldr	r3, [pc, #8]	; (8008b24 <malloc+0xc>)
 8008b1a:	4601      	mov	r1, r0
 8008b1c:	6818      	ldr	r0, [r3, #0]
 8008b1e:	f000 b803 	b.w	8008b28 <_malloc_r>
 8008b22:	bf00      	nop
 8008b24:	20000010 	.word	0x20000010

08008b28 <_malloc_r>:
 8008b28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b2c:	f101 040b 	add.w	r4, r1, #11
 8008b30:	2c16      	cmp	r4, #22
 8008b32:	4681      	mov	r9, r0
 8008b34:	d907      	bls.n	8008b46 <_malloc_r+0x1e>
 8008b36:	f034 0407 	bics.w	r4, r4, #7
 8008b3a:	d505      	bpl.n	8008b48 <_malloc_r+0x20>
 8008b3c:	230c      	movs	r3, #12
 8008b3e:	f8c9 3000 	str.w	r3, [r9]
 8008b42:	2600      	movs	r6, #0
 8008b44:	e131      	b.n	8008daa <_malloc_r+0x282>
 8008b46:	2410      	movs	r4, #16
 8008b48:	428c      	cmp	r4, r1
 8008b4a:	d3f7      	bcc.n	8008b3c <_malloc_r+0x14>
 8008b4c:	4648      	mov	r0, r9
 8008b4e:	f000 fa0b 	bl	8008f68 <__malloc_lock>
 8008b52:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8008b56:	4d9c      	ldr	r5, [pc, #624]	; (8008dc8 <_malloc_r+0x2a0>)
 8008b58:	d236      	bcs.n	8008bc8 <_malloc_r+0xa0>
 8008b5a:	f104 0208 	add.w	r2, r4, #8
 8008b5e:	442a      	add	r2, r5
 8008b60:	f1a2 0108 	sub.w	r1, r2, #8
 8008b64:	6856      	ldr	r6, [r2, #4]
 8008b66:	428e      	cmp	r6, r1
 8008b68:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8008b6c:	d102      	bne.n	8008b74 <_malloc_r+0x4c>
 8008b6e:	68d6      	ldr	r6, [r2, #12]
 8008b70:	42b2      	cmp	r2, r6
 8008b72:	d010      	beq.n	8008b96 <_malloc_r+0x6e>
 8008b74:	6873      	ldr	r3, [r6, #4]
 8008b76:	68f2      	ldr	r2, [r6, #12]
 8008b78:	68b1      	ldr	r1, [r6, #8]
 8008b7a:	f023 0303 	bic.w	r3, r3, #3
 8008b7e:	60ca      	str	r2, [r1, #12]
 8008b80:	4433      	add	r3, r6
 8008b82:	6091      	str	r1, [r2, #8]
 8008b84:	685a      	ldr	r2, [r3, #4]
 8008b86:	f042 0201 	orr.w	r2, r2, #1
 8008b8a:	605a      	str	r2, [r3, #4]
 8008b8c:	4648      	mov	r0, r9
 8008b8e:	f000 f9f1 	bl	8008f74 <__malloc_unlock>
 8008b92:	3608      	adds	r6, #8
 8008b94:	e109      	b.n	8008daa <_malloc_r+0x282>
 8008b96:	3302      	adds	r3, #2
 8008b98:	4a8c      	ldr	r2, [pc, #560]	; (8008dcc <_malloc_r+0x2a4>)
 8008b9a:	692e      	ldr	r6, [r5, #16]
 8008b9c:	4296      	cmp	r6, r2
 8008b9e:	4611      	mov	r1, r2
 8008ba0:	d06d      	beq.n	8008c7e <_malloc_r+0x156>
 8008ba2:	6870      	ldr	r0, [r6, #4]
 8008ba4:	f020 0003 	bic.w	r0, r0, #3
 8008ba8:	1b07      	subs	r7, r0, r4
 8008baa:	2f0f      	cmp	r7, #15
 8008bac:	dd47      	ble.n	8008c3e <_malloc_r+0x116>
 8008bae:	1933      	adds	r3, r6, r4
 8008bb0:	f044 0401 	orr.w	r4, r4, #1
 8008bb4:	6074      	str	r4, [r6, #4]
 8008bb6:	616b      	str	r3, [r5, #20]
 8008bb8:	612b      	str	r3, [r5, #16]
 8008bba:	60da      	str	r2, [r3, #12]
 8008bbc:	609a      	str	r2, [r3, #8]
 8008bbe:	f047 0201 	orr.w	r2, r7, #1
 8008bc2:	605a      	str	r2, [r3, #4]
 8008bc4:	5037      	str	r7, [r6, r0]
 8008bc6:	e7e1      	b.n	8008b8c <_malloc_r+0x64>
 8008bc8:	0a63      	lsrs	r3, r4, #9
 8008bca:	d02a      	beq.n	8008c22 <_malloc_r+0xfa>
 8008bcc:	2b04      	cmp	r3, #4
 8008bce:	d812      	bhi.n	8008bf6 <_malloc_r+0xce>
 8008bd0:	09a3      	lsrs	r3, r4, #6
 8008bd2:	3338      	adds	r3, #56	; 0x38
 8008bd4:	1c5a      	adds	r2, r3, #1
 8008bd6:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8008bda:	f1a2 0008 	sub.w	r0, r2, #8
 8008bde:	6856      	ldr	r6, [r2, #4]
 8008be0:	4286      	cmp	r6, r0
 8008be2:	d006      	beq.n	8008bf2 <_malloc_r+0xca>
 8008be4:	6872      	ldr	r2, [r6, #4]
 8008be6:	f022 0203 	bic.w	r2, r2, #3
 8008bea:	1b11      	subs	r1, r2, r4
 8008bec:	290f      	cmp	r1, #15
 8008bee:	dd1c      	ble.n	8008c2a <_malloc_r+0x102>
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	e7d0      	b.n	8008b98 <_malloc_r+0x70>
 8008bf6:	2b14      	cmp	r3, #20
 8008bf8:	d801      	bhi.n	8008bfe <_malloc_r+0xd6>
 8008bfa:	335b      	adds	r3, #91	; 0x5b
 8008bfc:	e7ea      	b.n	8008bd4 <_malloc_r+0xac>
 8008bfe:	2b54      	cmp	r3, #84	; 0x54
 8008c00:	d802      	bhi.n	8008c08 <_malloc_r+0xe0>
 8008c02:	0b23      	lsrs	r3, r4, #12
 8008c04:	336e      	adds	r3, #110	; 0x6e
 8008c06:	e7e5      	b.n	8008bd4 <_malloc_r+0xac>
 8008c08:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8008c0c:	d802      	bhi.n	8008c14 <_malloc_r+0xec>
 8008c0e:	0be3      	lsrs	r3, r4, #15
 8008c10:	3377      	adds	r3, #119	; 0x77
 8008c12:	e7df      	b.n	8008bd4 <_malloc_r+0xac>
 8008c14:	f240 5254 	movw	r2, #1364	; 0x554
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d804      	bhi.n	8008c26 <_malloc_r+0xfe>
 8008c1c:	0ca3      	lsrs	r3, r4, #18
 8008c1e:	337c      	adds	r3, #124	; 0x7c
 8008c20:	e7d8      	b.n	8008bd4 <_malloc_r+0xac>
 8008c22:	233f      	movs	r3, #63	; 0x3f
 8008c24:	e7d6      	b.n	8008bd4 <_malloc_r+0xac>
 8008c26:	237e      	movs	r3, #126	; 0x7e
 8008c28:	e7d4      	b.n	8008bd4 <_malloc_r+0xac>
 8008c2a:	2900      	cmp	r1, #0
 8008c2c:	68f1      	ldr	r1, [r6, #12]
 8008c2e:	db04      	blt.n	8008c3a <_malloc_r+0x112>
 8008c30:	68b3      	ldr	r3, [r6, #8]
 8008c32:	60d9      	str	r1, [r3, #12]
 8008c34:	608b      	str	r3, [r1, #8]
 8008c36:	18b3      	adds	r3, r6, r2
 8008c38:	e7a4      	b.n	8008b84 <_malloc_r+0x5c>
 8008c3a:	460e      	mov	r6, r1
 8008c3c:	e7d0      	b.n	8008be0 <_malloc_r+0xb8>
 8008c3e:	2f00      	cmp	r7, #0
 8008c40:	616a      	str	r2, [r5, #20]
 8008c42:	612a      	str	r2, [r5, #16]
 8008c44:	db05      	blt.n	8008c52 <_malloc_r+0x12a>
 8008c46:	4430      	add	r0, r6
 8008c48:	6843      	ldr	r3, [r0, #4]
 8008c4a:	f043 0301 	orr.w	r3, r3, #1
 8008c4e:	6043      	str	r3, [r0, #4]
 8008c50:	e79c      	b.n	8008b8c <_malloc_r+0x64>
 8008c52:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8008c56:	d244      	bcs.n	8008ce2 <_malloc_r+0x1ba>
 8008c58:	08c0      	lsrs	r0, r0, #3
 8008c5a:	1087      	asrs	r7, r0, #2
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	fa02 f707 	lsl.w	r7, r2, r7
 8008c62:	686a      	ldr	r2, [r5, #4]
 8008c64:	3001      	adds	r0, #1
 8008c66:	433a      	orrs	r2, r7
 8008c68:	606a      	str	r2, [r5, #4]
 8008c6a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8008c6e:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8008c72:	60b7      	str	r7, [r6, #8]
 8008c74:	3a08      	subs	r2, #8
 8008c76:	60f2      	str	r2, [r6, #12]
 8008c78:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8008c7c:	60fe      	str	r6, [r7, #12]
 8008c7e:	2001      	movs	r0, #1
 8008c80:	109a      	asrs	r2, r3, #2
 8008c82:	fa00 f202 	lsl.w	r2, r0, r2
 8008c86:	6868      	ldr	r0, [r5, #4]
 8008c88:	4282      	cmp	r2, r0
 8008c8a:	f200 80a1 	bhi.w	8008dd0 <_malloc_r+0x2a8>
 8008c8e:	4202      	tst	r2, r0
 8008c90:	d106      	bne.n	8008ca0 <_malloc_r+0x178>
 8008c92:	f023 0303 	bic.w	r3, r3, #3
 8008c96:	0052      	lsls	r2, r2, #1
 8008c98:	4202      	tst	r2, r0
 8008c9a:	f103 0304 	add.w	r3, r3, #4
 8008c9e:	d0fa      	beq.n	8008c96 <_malloc_r+0x16e>
 8008ca0:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8008ca4:	46e0      	mov	r8, ip
 8008ca6:	469e      	mov	lr, r3
 8008ca8:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8008cac:	4546      	cmp	r6, r8
 8008cae:	d153      	bne.n	8008d58 <_malloc_r+0x230>
 8008cb0:	f10e 0e01 	add.w	lr, lr, #1
 8008cb4:	f01e 0f03 	tst.w	lr, #3
 8008cb8:	f108 0808 	add.w	r8, r8, #8
 8008cbc:	d1f4      	bne.n	8008ca8 <_malloc_r+0x180>
 8008cbe:	0798      	lsls	r0, r3, #30
 8008cc0:	d179      	bne.n	8008db6 <_malloc_r+0x28e>
 8008cc2:	686b      	ldr	r3, [r5, #4]
 8008cc4:	ea23 0302 	bic.w	r3, r3, r2
 8008cc8:	606b      	str	r3, [r5, #4]
 8008cca:	6868      	ldr	r0, [r5, #4]
 8008ccc:	0052      	lsls	r2, r2, #1
 8008cce:	4282      	cmp	r2, r0
 8008cd0:	d87e      	bhi.n	8008dd0 <_malloc_r+0x2a8>
 8008cd2:	2a00      	cmp	r2, #0
 8008cd4:	d07c      	beq.n	8008dd0 <_malloc_r+0x2a8>
 8008cd6:	4673      	mov	r3, lr
 8008cd8:	4202      	tst	r2, r0
 8008cda:	d1e1      	bne.n	8008ca0 <_malloc_r+0x178>
 8008cdc:	3304      	adds	r3, #4
 8008cde:	0052      	lsls	r2, r2, #1
 8008ce0:	e7fa      	b.n	8008cd8 <_malloc_r+0x1b0>
 8008ce2:	0a42      	lsrs	r2, r0, #9
 8008ce4:	2a04      	cmp	r2, #4
 8008ce6:	d815      	bhi.n	8008d14 <_malloc_r+0x1ec>
 8008ce8:	0982      	lsrs	r2, r0, #6
 8008cea:	3238      	adds	r2, #56	; 0x38
 8008cec:	1c57      	adds	r7, r2, #1
 8008cee:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8008cf2:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8008cf6:	45be      	cmp	lr, r7
 8008cf8:	d126      	bne.n	8008d48 <_malloc_r+0x220>
 8008cfa:	2001      	movs	r0, #1
 8008cfc:	1092      	asrs	r2, r2, #2
 8008cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8008d02:	6868      	ldr	r0, [r5, #4]
 8008d04:	4310      	orrs	r0, r2
 8008d06:	6068      	str	r0, [r5, #4]
 8008d08:	f8c6 e00c 	str.w	lr, [r6, #12]
 8008d0c:	60b7      	str	r7, [r6, #8]
 8008d0e:	f8ce 6008 	str.w	r6, [lr, #8]
 8008d12:	e7b3      	b.n	8008c7c <_malloc_r+0x154>
 8008d14:	2a14      	cmp	r2, #20
 8008d16:	d801      	bhi.n	8008d1c <_malloc_r+0x1f4>
 8008d18:	325b      	adds	r2, #91	; 0x5b
 8008d1a:	e7e7      	b.n	8008cec <_malloc_r+0x1c4>
 8008d1c:	2a54      	cmp	r2, #84	; 0x54
 8008d1e:	d802      	bhi.n	8008d26 <_malloc_r+0x1fe>
 8008d20:	0b02      	lsrs	r2, r0, #12
 8008d22:	326e      	adds	r2, #110	; 0x6e
 8008d24:	e7e2      	b.n	8008cec <_malloc_r+0x1c4>
 8008d26:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008d2a:	d802      	bhi.n	8008d32 <_malloc_r+0x20a>
 8008d2c:	0bc2      	lsrs	r2, r0, #15
 8008d2e:	3277      	adds	r2, #119	; 0x77
 8008d30:	e7dc      	b.n	8008cec <_malloc_r+0x1c4>
 8008d32:	f240 5754 	movw	r7, #1364	; 0x554
 8008d36:	42ba      	cmp	r2, r7
 8008d38:	bf9a      	itte	ls
 8008d3a:	0c82      	lsrls	r2, r0, #18
 8008d3c:	327c      	addls	r2, #124	; 0x7c
 8008d3e:	227e      	movhi	r2, #126	; 0x7e
 8008d40:	e7d4      	b.n	8008cec <_malloc_r+0x1c4>
 8008d42:	68bf      	ldr	r7, [r7, #8]
 8008d44:	45be      	cmp	lr, r7
 8008d46:	d004      	beq.n	8008d52 <_malloc_r+0x22a>
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	f022 0203 	bic.w	r2, r2, #3
 8008d4e:	4290      	cmp	r0, r2
 8008d50:	d3f7      	bcc.n	8008d42 <_malloc_r+0x21a>
 8008d52:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8008d56:	e7d7      	b.n	8008d08 <_malloc_r+0x1e0>
 8008d58:	6870      	ldr	r0, [r6, #4]
 8008d5a:	68f7      	ldr	r7, [r6, #12]
 8008d5c:	f020 0003 	bic.w	r0, r0, #3
 8008d60:	eba0 0a04 	sub.w	sl, r0, r4
 8008d64:	f1ba 0f0f 	cmp.w	sl, #15
 8008d68:	dd10      	ble.n	8008d8c <_malloc_r+0x264>
 8008d6a:	68b2      	ldr	r2, [r6, #8]
 8008d6c:	1933      	adds	r3, r6, r4
 8008d6e:	f044 0401 	orr.w	r4, r4, #1
 8008d72:	6074      	str	r4, [r6, #4]
 8008d74:	60d7      	str	r7, [r2, #12]
 8008d76:	60ba      	str	r2, [r7, #8]
 8008d78:	f04a 0201 	orr.w	r2, sl, #1
 8008d7c:	616b      	str	r3, [r5, #20]
 8008d7e:	612b      	str	r3, [r5, #16]
 8008d80:	60d9      	str	r1, [r3, #12]
 8008d82:	6099      	str	r1, [r3, #8]
 8008d84:	605a      	str	r2, [r3, #4]
 8008d86:	f846 a000 	str.w	sl, [r6, r0]
 8008d8a:	e6ff      	b.n	8008b8c <_malloc_r+0x64>
 8008d8c:	f1ba 0f00 	cmp.w	sl, #0
 8008d90:	db0f      	blt.n	8008db2 <_malloc_r+0x28a>
 8008d92:	4430      	add	r0, r6
 8008d94:	6843      	ldr	r3, [r0, #4]
 8008d96:	f043 0301 	orr.w	r3, r3, #1
 8008d9a:	6043      	str	r3, [r0, #4]
 8008d9c:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8008da0:	4648      	mov	r0, r9
 8008da2:	60df      	str	r7, [r3, #12]
 8008da4:	60bb      	str	r3, [r7, #8]
 8008da6:	f000 f8e5 	bl	8008f74 <__malloc_unlock>
 8008daa:	4630      	mov	r0, r6
 8008dac:	b003      	add	sp, #12
 8008dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008db2:	463e      	mov	r6, r7
 8008db4:	e77a      	b.n	8008cac <_malloc_r+0x184>
 8008db6:	f85c 0908 	ldr.w	r0, [ip], #-8
 8008dba:	4584      	cmp	ip, r0
 8008dbc:	f103 33ff 	add.w	r3, r3, #4294967295
 8008dc0:	f43f af7d 	beq.w	8008cbe <_malloc_r+0x196>
 8008dc4:	e781      	b.n	8008cca <_malloc_r+0x1a2>
 8008dc6:	bf00      	nop
 8008dc8:	20000270 	.word	0x20000270
 8008dcc:	20000278 	.word	0x20000278
 8008dd0:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8008dd4:	f8db 6004 	ldr.w	r6, [fp, #4]
 8008dd8:	f026 0603 	bic.w	r6, r6, #3
 8008ddc:	42b4      	cmp	r4, r6
 8008dde:	d803      	bhi.n	8008de8 <_malloc_r+0x2c0>
 8008de0:	1b33      	subs	r3, r6, r4
 8008de2:	2b0f      	cmp	r3, #15
 8008de4:	f300 8096 	bgt.w	8008f14 <_malloc_r+0x3ec>
 8008de8:	4a4f      	ldr	r2, [pc, #316]	; (8008f28 <_malloc_r+0x400>)
 8008dea:	6817      	ldr	r7, [r2, #0]
 8008dec:	4a4f      	ldr	r2, [pc, #316]	; (8008f2c <_malloc_r+0x404>)
 8008dee:	6811      	ldr	r1, [r2, #0]
 8008df0:	3710      	adds	r7, #16
 8008df2:	3101      	adds	r1, #1
 8008df4:	eb0b 0306 	add.w	r3, fp, r6
 8008df8:	4427      	add	r7, r4
 8008dfa:	d005      	beq.n	8008e08 <_malloc_r+0x2e0>
 8008dfc:	494c      	ldr	r1, [pc, #304]	; (8008f30 <_malloc_r+0x408>)
 8008dfe:	3901      	subs	r1, #1
 8008e00:	440f      	add	r7, r1
 8008e02:	3101      	adds	r1, #1
 8008e04:	4249      	negs	r1, r1
 8008e06:	400f      	ands	r7, r1
 8008e08:	4639      	mov	r1, r7
 8008e0a:	4648      	mov	r0, r9
 8008e0c:	9201      	str	r2, [sp, #4]
 8008e0e:	9300      	str	r3, [sp, #0]
 8008e10:	f000 f8b6 	bl	8008f80 <_sbrk_r>
 8008e14:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008e18:	4680      	mov	r8, r0
 8008e1a:	d056      	beq.n	8008eca <_malloc_r+0x3a2>
 8008e1c:	9b00      	ldr	r3, [sp, #0]
 8008e1e:	9a01      	ldr	r2, [sp, #4]
 8008e20:	4283      	cmp	r3, r0
 8008e22:	d901      	bls.n	8008e28 <_malloc_r+0x300>
 8008e24:	45ab      	cmp	fp, r5
 8008e26:	d150      	bne.n	8008eca <_malloc_r+0x3a2>
 8008e28:	4842      	ldr	r0, [pc, #264]	; (8008f34 <_malloc_r+0x40c>)
 8008e2a:	6801      	ldr	r1, [r0, #0]
 8008e2c:	4543      	cmp	r3, r8
 8008e2e:	eb07 0e01 	add.w	lr, r7, r1
 8008e32:	f8c0 e000 	str.w	lr, [r0]
 8008e36:	4940      	ldr	r1, [pc, #256]	; (8008f38 <_malloc_r+0x410>)
 8008e38:	4682      	mov	sl, r0
 8008e3a:	d113      	bne.n	8008e64 <_malloc_r+0x33c>
 8008e3c:	420b      	tst	r3, r1
 8008e3e:	d111      	bne.n	8008e64 <_malloc_r+0x33c>
 8008e40:	68ab      	ldr	r3, [r5, #8]
 8008e42:	443e      	add	r6, r7
 8008e44:	f046 0601 	orr.w	r6, r6, #1
 8008e48:	605e      	str	r6, [r3, #4]
 8008e4a:	4a3c      	ldr	r2, [pc, #240]	; (8008f3c <_malloc_r+0x414>)
 8008e4c:	f8da 3000 	ldr.w	r3, [sl]
 8008e50:	6811      	ldr	r1, [r2, #0]
 8008e52:	428b      	cmp	r3, r1
 8008e54:	bf88      	it	hi
 8008e56:	6013      	strhi	r3, [r2, #0]
 8008e58:	4a39      	ldr	r2, [pc, #228]	; (8008f40 <_malloc_r+0x418>)
 8008e5a:	6811      	ldr	r1, [r2, #0]
 8008e5c:	428b      	cmp	r3, r1
 8008e5e:	bf88      	it	hi
 8008e60:	6013      	strhi	r3, [r2, #0]
 8008e62:	e032      	b.n	8008eca <_malloc_r+0x3a2>
 8008e64:	6810      	ldr	r0, [r2, #0]
 8008e66:	3001      	adds	r0, #1
 8008e68:	bf1b      	ittet	ne
 8008e6a:	eba8 0303 	subne.w	r3, r8, r3
 8008e6e:	4473      	addne	r3, lr
 8008e70:	f8c2 8000 	streq.w	r8, [r2]
 8008e74:	f8ca 3000 	strne.w	r3, [sl]
 8008e78:	f018 0007 	ands.w	r0, r8, #7
 8008e7c:	bf1c      	itt	ne
 8008e7e:	f1c0 0008 	rsbne	r0, r0, #8
 8008e82:	4480      	addne	r8, r0
 8008e84:	4b2a      	ldr	r3, [pc, #168]	; (8008f30 <_malloc_r+0x408>)
 8008e86:	4447      	add	r7, r8
 8008e88:	4418      	add	r0, r3
 8008e8a:	400f      	ands	r7, r1
 8008e8c:	1bc7      	subs	r7, r0, r7
 8008e8e:	4639      	mov	r1, r7
 8008e90:	4648      	mov	r0, r9
 8008e92:	f000 f875 	bl	8008f80 <_sbrk_r>
 8008e96:	1c43      	adds	r3, r0, #1
 8008e98:	bf08      	it	eq
 8008e9a:	4640      	moveq	r0, r8
 8008e9c:	f8da 3000 	ldr.w	r3, [sl]
 8008ea0:	f8c5 8008 	str.w	r8, [r5, #8]
 8008ea4:	bf08      	it	eq
 8008ea6:	2700      	moveq	r7, #0
 8008ea8:	eba0 0008 	sub.w	r0, r0, r8
 8008eac:	443b      	add	r3, r7
 8008eae:	4407      	add	r7, r0
 8008eb0:	f047 0701 	orr.w	r7, r7, #1
 8008eb4:	45ab      	cmp	fp, r5
 8008eb6:	f8ca 3000 	str.w	r3, [sl]
 8008eba:	f8c8 7004 	str.w	r7, [r8, #4]
 8008ebe:	d0c4      	beq.n	8008e4a <_malloc_r+0x322>
 8008ec0:	2e0f      	cmp	r6, #15
 8008ec2:	d810      	bhi.n	8008ee6 <_malloc_r+0x3be>
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	f8c8 3004 	str.w	r3, [r8, #4]
 8008eca:	68ab      	ldr	r3, [r5, #8]
 8008ecc:	685a      	ldr	r2, [r3, #4]
 8008ece:	f022 0203 	bic.w	r2, r2, #3
 8008ed2:	4294      	cmp	r4, r2
 8008ed4:	eba2 0304 	sub.w	r3, r2, r4
 8008ed8:	d801      	bhi.n	8008ede <_malloc_r+0x3b6>
 8008eda:	2b0f      	cmp	r3, #15
 8008edc:	dc1a      	bgt.n	8008f14 <_malloc_r+0x3ec>
 8008ede:	4648      	mov	r0, r9
 8008ee0:	f000 f848 	bl	8008f74 <__malloc_unlock>
 8008ee4:	e62d      	b.n	8008b42 <_malloc_r+0x1a>
 8008ee6:	f8db 3004 	ldr.w	r3, [fp, #4]
 8008eea:	3e0c      	subs	r6, #12
 8008eec:	f026 0607 	bic.w	r6, r6, #7
 8008ef0:	f003 0301 	and.w	r3, r3, #1
 8008ef4:	4333      	orrs	r3, r6
 8008ef6:	f8cb 3004 	str.w	r3, [fp, #4]
 8008efa:	eb0b 0306 	add.w	r3, fp, r6
 8008efe:	2205      	movs	r2, #5
 8008f00:	2e0f      	cmp	r6, #15
 8008f02:	605a      	str	r2, [r3, #4]
 8008f04:	609a      	str	r2, [r3, #8]
 8008f06:	d9a0      	bls.n	8008e4a <_malloc_r+0x322>
 8008f08:	f10b 0108 	add.w	r1, fp, #8
 8008f0c:	4648      	mov	r0, r9
 8008f0e:	f000 f8ab 	bl	8009068 <_free_r>
 8008f12:	e79a      	b.n	8008e4a <_malloc_r+0x322>
 8008f14:	68ae      	ldr	r6, [r5, #8]
 8008f16:	f044 0201 	orr.w	r2, r4, #1
 8008f1a:	4434      	add	r4, r6
 8008f1c:	f043 0301 	orr.w	r3, r3, #1
 8008f20:	6072      	str	r2, [r6, #4]
 8008f22:	60ac      	str	r4, [r5, #8]
 8008f24:	6063      	str	r3, [r4, #4]
 8008f26:	e631      	b.n	8008b8c <_malloc_r+0x64>
 8008f28:	200006d0 	.word	0x200006d0
 8008f2c:	20000678 	.word	0x20000678
 8008f30:	00000080 	.word	0x00000080
 8008f34:	200006a0 	.word	0x200006a0
 8008f38:	0000007f 	.word	0x0000007f
 8008f3c:	200006c8 	.word	0x200006c8
 8008f40:	200006cc 	.word	0x200006cc

08008f44 <__ascii_mbtowc>:
 8008f44:	b082      	sub	sp, #8
 8008f46:	b901      	cbnz	r1, 8008f4a <__ascii_mbtowc+0x6>
 8008f48:	a901      	add	r1, sp, #4
 8008f4a:	b142      	cbz	r2, 8008f5e <__ascii_mbtowc+0x1a>
 8008f4c:	b14b      	cbz	r3, 8008f62 <__ascii_mbtowc+0x1e>
 8008f4e:	7813      	ldrb	r3, [r2, #0]
 8008f50:	600b      	str	r3, [r1, #0]
 8008f52:	7812      	ldrb	r2, [r2, #0]
 8008f54:	1c10      	adds	r0, r2, #0
 8008f56:	bf18      	it	ne
 8008f58:	2001      	movne	r0, #1
 8008f5a:	b002      	add	sp, #8
 8008f5c:	4770      	bx	lr
 8008f5e:	4610      	mov	r0, r2
 8008f60:	e7fb      	b.n	8008f5a <__ascii_mbtowc+0x16>
 8008f62:	f06f 0001 	mvn.w	r0, #1
 8008f66:	e7f8      	b.n	8008f5a <__ascii_mbtowc+0x16>

08008f68 <__malloc_lock>:
 8008f68:	4801      	ldr	r0, [pc, #4]	; (8008f70 <__malloc_lock+0x8>)
 8008f6a:	f000 b939 	b.w	80091e0 <__retarget_lock_acquire_recursive>
 8008f6e:	bf00      	nop
 8008f70:	200139a0 	.word	0x200139a0

08008f74 <__malloc_unlock>:
 8008f74:	4801      	ldr	r0, [pc, #4]	; (8008f7c <__malloc_unlock+0x8>)
 8008f76:	f000 b934 	b.w	80091e2 <__retarget_lock_release_recursive>
 8008f7a:	bf00      	nop
 8008f7c:	200139a0 	.word	0x200139a0

08008f80 <_sbrk_r>:
 8008f80:	b538      	push	{r3, r4, r5, lr}
 8008f82:	4c06      	ldr	r4, [pc, #24]	; (8008f9c <_sbrk_r+0x1c>)
 8008f84:	2300      	movs	r3, #0
 8008f86:	4605      	mov	r5, r0
 8008f88:	4608      	mov	r0, r1
 8008f8a:	6023      	str	r3, [r4, #0]
 8008f8c:	f000 f92a 	bl	80091e4 <_sbrk>
 8008f90:	1c43      	adds	r3, r0, #1
 8008f92:	d102      	bne.n	8008f9a <_sbrk_r+0x1a>
 8008f94:	6823      	ldr	r3, [r4, #0]
 8008f96:	b103      	cbz	r3, 8008f9a <_sbrk_r+0x1a>
 8008f98:	602b      	str	r3, [r5, #0]
 8008f9a:	bd38      	pop	{r3, r4, r5, pc}
 8008f9c:	200139a8 	.word	0x200139a8

08008fa0 <__ascii_wctomb>:
 8008fa0:	b149      	cbz	r1, 8008fb6 <__ascii_wctomb+0x16>
 8008fa2:	2aff      	cmp	r2, #255	; 0xff
 8008fa4:	bf85      	ittet	hi
 8008fa6:	238a      	movhi	r3, #138	; 0x8a
 8008fa8:	6003      	strhi	r3, [r0, #0]
 8008faa:	700a      	strbls	r2, [r1, #0]
 8008fac:	f04f 30ff 	movhi.w	r0, #4294967295
 8008fb0:	bf98      	it	ls
 8008fb2:	2001      	movls	r0, #1
 8008fb4:	4770      	bx	lr
 8008fb6:	4608      	mov	r0, r1
 8008fb8:	4770      	bx	lr
	...

08008fbc <_malloc_trim_r>:
 8008fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fc0:	4f25      	ldr	r7, [pc, #148]	; (8009058 <_malloc_trim_r+0x9c>)
 8008fc2:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8009064 <_malloc_trim_r+0xa8>
 8008fc6:	4689      	mov	r9, r1
 8008fc8:	4606      	mov	r6, r0
 8008fca:	f7ff ffcd 	bl	8008f68 <__malloc_lock>
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	685d      	ldr	r5, [r3, #4]
 8008fd2:	f1a8 0411 	sub.w	r4, r8, #17
 8008fd6:	f025 0503 	bic.w	r5, r5, #3
 8008fda:	eba4 0409 	sub.w	r4, r4, r9
 8008fde:	442c      	add	r4, r5
 8008fe0:	fbb4 f4f8 	udiv	r4, r4, r8
 8008fe4:	3c01      	subs	r4, #1
 8008fe6:	fb08 f404 	mul.w	r4, r8, r4
 8008fea:	4544      	cmp	r4, r8
 8008fec:	da05      	bge.n	8008ffa <_malloc_trim_r+0x3e>
 8008fee:	4630      	mov	r0, r6
 8008ff0:	f7ff ffc0 	bl	8008f74 <__malloc_unlock>
 8008ff4:	2000      	movs	r0, #0
 8008ff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ffa:	2100      	movs	r1, #0
 8008ffc:	4630      	mov	r0, r6
 8008ffe:	f7ff ffbf 	bl	8008f80 <_sbrk_r>
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	442b      	add	r3, r5
 8009006:	4298      	cmp	r0, r3
 8009008:	d1f1      	bne.n	8008fee <_malloc_trim_r+0x32>
 800900a:	4261      	negs	r1, r4
 800900c:	4630      	mov	r0, r6
 800900e:	f7ff ffb7 	bl	8008f80 <_sbrk_r>
 8009012:	3001      	adds	r0, #1
 8009014:	d110      	bne.n	8009038 <_malloc_trim_r+0x7c>
 8009016:	2100      	movs	r1, #0
 8009018:	4630      	mov	r0, r6
 800901a:	f7ff ffb1 	bl	8008f80 <_sbrk_r>
 800901e:	68ba      	ldr	r2, [r7, #8]
 8009020:	1a83      	subs	r3, r0, r2
 8009022:	2b0f      	cmp	r3, #15
 8009024:	dde3      	ble.n	8008fee <_malloc_trim_r+0x32>
 8009026:	490d      	ldr	r1, [pc, #52]	; (800905c <_malloc_trim_r+0xa0>)
 8009028:	6809      	ldr	r1, [r1, #0]
 800902a:	1a40      	subs	r0, r0, r1
 800902c:	490c      	ldr	r1, [pc, #48]	; (8009060 <_malloc_trim_r+0xa4>)
 800902e:	f043 0301 	orr.w	r3, r3, #1
 8009032:	6008      	str	r0, [r1, #0]
 8009034:	6053      	str	r3, [r2, #4]
 8009036:	e7da      	b.n	8008fee <_malloc_trim_r+0x32>
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	4a09      	ldr	r2, [pc, #36]	; (8009060 <_malloc_trim_r+0xa4>)
 800903c:	1b2d      	subs	r5, r5, r4
 800903e:	f045 0501 	orr.w	r5, r5, #1
 8009042:	605d      	str	r5, [r3, #4]
 8009044:	6813      	ldr	r3, [r2, #0]
 8009046:	4630      	mov	r0, r6
 8009048:	1b1c      	subs	r4, r3, r4
 800904a:	6014      	str	r4, [r2, #0]
 800904c:	f7ff ff92 	bl	8008f74 <__malloc_unlock>
 8009050:	2001      	movs	r0, #1
 8009052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009056:	bf00      	nop
 8009058:	20000270 	.word	0x20000270
 800905c:	20000678 	.word	0x20000678
 8009060:	200006a0 	.word	0x200006a0
 8009064:	00000080 	.word	0x00000080

08009068 <_free_r>:
 8009068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800906c:	4604      	mov	r4, r0
 800906e:	4688      	mov	r8, r1
 8009070:	2900      	cmp	r1, #0
 8009072:	f000 80ab 	beq.w	80091cc <_free_r+0x164>
 8009076:	f7ff ff77 	bl	8008f68 <__malloc_lock>
 800907a:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800907e:	4d54      	ldr	r5, [pc, #336]	; (80091d0 <_free_r+0x168>)
 8009080:	f022 0001 	bic.w	r0, r2, #1
 8009084:	f1a8 0308 	sub.w	r3, r8, #8
 8009088:	181f      	adds	r7, r3, r0
 800908a:	68a9      	ldr	r1, [r5, #8]
 800908c:	687e      	ldr	r6, [r7, #4]
 800908e:	428f      	cmp	r7, r1
 8009090:	f026 0603 	bic.w	r6, r6, #3
 8009094:	f002 0201 	and.w	r2, r2, #1
 8009098:	d11b      	bne.n	80090d2 <_free_r+0x6a>
 800909a:	4430      	add	r0, r6
 800909c:	b93a      	cbnz	r2, 80090ae <_free_r+0x46>
 800909e:	f858 2c08 	ldr.w	r2, [r8, #-8]
 80090a2:	1a9b      	subs	r3, r3, r2
 80090a4:	4410      	add	r0, r2
 80090a6:	6899      	ldr	r1, [r3, #8]
 80090a8:	68da      	ldr	r2, [r3, #12]
 80090aa:	60ca      	str	r2, [r1, #12]
 80090ac:	6091      	str	r1, [r2, #8]
 80090ae:	f040 0201 	orr.w	r2, r0, #1
 80090b2:	605a      	str	r2, [r3, #4]
 80090b4:	60ab      	str	r3, [r5, #8]
 80090b6:	4b47      	ldr	r3, [pc, #284]	; (80091d4 <_free_r+0x16c>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4298      	cmp	r0, r3
 80090bc:	d304      	bcc.n	80090c8 <_free_r+0x60>
 80090be:	4b46      	ldr	r3, [pc, #280]	; (80091d8 <_free_r+0x170>)
 80090c0:	4620      	mov	r0, r4
 80090c2:	6819      	ldr	r1, [r3, #0]
 80090c4:	f7ff ff7a 	bl	8008fbc <_malloc_trim_r>
 80090c8:	4620      	mov	r0, r4
 80090ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090ce:	f7ff bf51 	b.w	8008f74 <__malloc_unlock>
 80090d2:	607e      	str	r6, [r7, #4]
 80090d4:	2a00      	cmp	r2, #0
 80090d6:	d139      	bne.n	800914c <_free_r+0xe4>
 80090d8:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80090dc:	1a5b      	subs	r3, r3, r1
 80090de:	4408      	add	r0, r1
 80090e0:	6899      	ldr	r1, [r3, #8]
 80090e2:	f105 0e08 	add.w	lr, r5, #8
 80090e6:	4571      	cmp	r1, lr
 80090e8:	d032      	beq.n	8009150 <_free_r+0xe8>
 80090ea:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80090ee:	f8c1 e00c 	str.w	lr, [r1, #12]
 80090f2:	f8ce 1008 	str.w	r1, [lr, #8]
 80090f6:	19b9      	adds	r1, r7, r6
 80090f8:	6849      	ldr	r1, [r1, #4]
 80090fa:	07c9      	lsls	r1, r1, #31
 80090fc:	d40a      	bmi.n	8009114 <_free_r+0xac>
 80090fe:	4430      	add	r0, r6
 8009100:	68b9      	ldr	r1, [r7, #8]
 8009102:	bb3a      	cbnz	r2, 8009154 <_free_r+0xec>
 8009104:	4e35      	ldr	r6, [pc, #212]	; (80091dc <_free_r+0x174>)
 8009106:	42b1      	cmp	r1, r6
 8009108:	d124      	bne.n	8009154 <_free_r+0xec>
 800910a:	616b      	str	r3, [r5, #20]
 800910c:	612b      	str	r3, [r5, #16]
 800910e:	2201      	movs	r2, #1
 8009110:	60d9      	str	r1, [r3, #12]
 8009112:	6099      	str	r1, [r3, #8]
 8009114:	f040 0101 	orr.w	r1, r0, #1
 8009118:	6059      	str	r1, [r3, #4]
 800911a:	5018      	str	r0, [r3, r0]
 800911c:	2a00      	cmp	r2, #0
 800911e:	d1d3      	bne.n	80090c8 <_free_r+0x60>
 8009120:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009124:	d21a      	bcs.n	800915c <_free_r+0xf4>
 8009126:	08c0      	lsrs	r0, r0, #3
 8009128:	1081      	asrs	r1, r0, #2
 800912a:	2201      	movs	r2, #1
 800912c:	408a      	lsls	r2, r1
 800912e:	6869      	ldr	r1, [r5, #4]
 8009130:	3001      	adds	r0, #1
 8009132:	430a      	orrs	r2, r1
 8009134:	606a      	str	r2, [r5, #4]
 8009136:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800913a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800913e:	6099      	str	r1, [r3, #8]
 8009140:	3a08      	subs	r2, #8
 8009142:	60da      	str	r2, [r3, #12]
 8009144:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8009148:	60cb      	str	r3, [r1, #12]
 800914a:	e7bd      	b.n	80090c8 <_free_r+0x60>
 800914c:	2200      	movs	r2, #0
 800914e:	e7d2      	b.n	80090f6 <_free_r+0x8e>
 8009150:	2201      	movs	r2, #1
 8009152:	e7d0      	b.n	80090f6 <_free_r+0x8e>
 8009154:	68fe      	ldr	r6, [r7, #12]
 8009156:	60ce      	str	r6, [r1, #12]
 8009158:	60b1      	str	r1, [r6, #8]
 800915a:	e7db      	b.n	8009114 <_free_r+0xac>
 800915c:	0a42      	lsrs	r2, r0, #9
 800915e:	2a04      	cmp	r2, #4
 8009160:	d813      	bhi.n	800918a <_free_r+0x122>
 8009162:	0982      	lsrs	r2, r0, #6
 8009164:	3238      	adds	r2, #56	; 0x38
 8009166:	1c51      	adds	r1, r2, #1
 8009168:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800916c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8009170:	428e      	cmp	r6, r1
 8009172:	d124      	bne.n	80091be <_free_r+0x156>
 8009174:	2001      	movs	r0, #1
 8009176:	1092      	asrs	r2, r2, #2
 8009178:	fa00 f202 	lsl.w	r2, r0, r2
 800917c:	6868      	ldr	r0, [r5, #4]
 800917e:	4302      	orrs	r2, r0
 8009180:	606a      	str	r2, [r5, #4]
 8009182:	60de      	str	r6, [r3, #12]
 8009184:	6099      	str	r1, [r3, #8]
 8009186:	60b3      	str	r3, [r6, #8]
 8009188:	e7de      	b.n	8009148 <_free_r+0xe0>
 800918a:	2a14      	cmp	r2, #20
 800918c:	d801      	bhi.n	8009192 <_free_r+0x12a>
 800918e:	325b      	adds	r2, #91	; 0x5b
 8009190:	e7e9      	b.n	8009166 <_free_r+0xfe>
 8009192:	2a54      	cmp	r2, #84	; 0x54
 8009194:	d802      	bhi.n	800919c <_free_r+0x134>
 8009196:	0b02      	lsrs	r2, r0, #12
 8009198:	326e      	adds	r2, #110	; 0x6e
 800919a:	e7e4      	b.n	8009166 <_free_r+0xfe>
 800919c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80091a0:	d802      	bhi.n	80091a8 <_free_r+0x140>
 80091a2:	0bc2      	lsrs	r2, r0, #15
 80091a4:	3277      	adds	r2, #119	; 0x77
 80091a6:	e7de      	b.n	8009166 <_free_r+0xfe>
 80091a8:	f240 5154 	movw	r1, #1364	; 0x554
 80091ac:	428a      	cmp	r2, r1
 80091ae:	bf9a      	itte	ls
 80091b0:	0c82      	lsrls	r2, r0, #18
 80091b2:	327c      	addls	r2, #124	; 0x7c
 80091b4:	227e      	movhi	r2, #126	; 0x7e
 80091b6:	e7d6      	b.n	8009166 <_free_r+0xfe>
 80091b8:	6889      	ldr	r1, [r1, #8]
 80091ba:	428e      	cmp	r6, r1
 80091bc:	d004      	beq.n	80091c8 <_free_r+0x160>
 80091be:	684a      	ldr	r2, [r1, #4]
 80091c0:	f022 0203 	bic.w	r2, r2, #3
 80091c4:	4290      	cmp	r0, r2
 80091c6:	d3f7      	bcc.n	80091b8 <_free_r+0x150>
 80091c8:	68ce      	ldr	r6, [r1, #12]
 80091ca:	e7da      	b.n	8009182 <_free_r+0x11a>
 80091cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091d0:	20000270 	.word	0x20000270
 80091d4:	2000067c 	.word	0x2000067c
 80091d8:	200006d0 	.word	0x200006d0
 80091dc:	20000278 	.word	0x20000278

080091e0 <__retarget_lock_acquire_recursive>:
 80091e0:	4770      	bx	lr

080091e2 <__retarget_lock_release_recursive>:
 80091e2:	4770      	bx	lr

080091e4 <_sbrk>:
 80091e4:	4b04      	ldr	r3, [pc, #16]	; (80091f8 <_sbrk+0x14>)
 80091e6:	6819      	ldr	r1, [r3, #0]
 80091e8:	4602      	mov	r2, r0
 80091ea:	b909      	cbnz	r1, 80091f0 <_sbrk+0xc>
 80091ec:	4903      	ldr	r1, [pc, #12]	; (80091fc <_sbrk+0x18>)
 80091ee:	6019      	str	r1, [r3, #0]
 80091f0:	6818      	ldr	r0, [r3, #0]
 80091f2:	4402      	add	r2, r0
 80091f4:	601a      	str	r2, [r3, #0]
 80091f6:	4770      	bx	lr
 80091f8:	200006d4 	.word	0x200006d4
 80091fc:	200139ac 	.word	0x200139ac

08009200 <_init>:
 8009200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009202:	bf00      	nop
 8009204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009206:	bc08      	pop	{r3}
 8009208:	469e      	mov	lr, r3
 800920a:	4770      	bx	lr

0800920c <_fini>:
 800920c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920e:	bf00      	nop
 8009210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009212:	bc08      	pop	{r3}
 8009214:	469e      	mov	lr, r3
 8009216:	4770      	bx	lr
